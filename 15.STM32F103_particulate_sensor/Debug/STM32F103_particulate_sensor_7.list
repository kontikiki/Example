
STM32F103_particulate_sensor_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005220  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005818  08005818  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005818  08005818  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005818  08005818  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000088  080058a8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  080058a8  000206f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e047  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003989  00000000  00000000  0006e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035e8  00000000  00000000  00071a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003430  00000000  00000000  00075070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a38c  00000000  00000000  000784a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e37f  00000000  00000000  0009282c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a46e2  00000000  00000000  000b0bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015528d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f1f8  00000000  00000000  001552e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005314 	.word	0x08005314

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005314 	.word	0x08005314

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a4      	sub	sp, #144	; 0x90
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str[32];
	char str2[32];
	char str3[32];
	int state = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int pre_tick = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int first = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 ffea 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 fabe 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 fbf4 	bl	8000958 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000170:	f000 fb1a 	bl	80007a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 fb9c 	bl	80008b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000178:	f000 fbc4 	bl	8000904 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800017c:	f000 fb4a 	bl	8000814 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000180:	f000 faf6 	bl	8000770 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000184:	4868      	ldr	r0, [pc, #416]	; (8000328 <main+0x1dc>)
 8000186:	f002 f9f1 	bl	800256c <HAL_TIM_Base_Start_IT>
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800018a:	4b68      	ldr	r3, [pc, #416]	; (800032c <main+0x1e0>)
 800018c:	4a68      	ldr	r2, [pc, #416]	; (8000330 <main+0x1e4>)
 800018e:	4969      	ldr	r1, [pc, #420]	; (8000334 <main+0x1e8>)
 8000190:	4869      	ldr	r0, [pc, #420]	; (8000338 <main+0x1ec>)
 8000192:	f003 f82b 	bl	80031ec <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 8000196:	4868      	ldr	r0, [pc, #416]	; (8000338 <main+0x1ec>)
 8000198:	f004 fb73 	bl	8004882 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 800019c:	2100      	movs	r1, #0
 800019e:	4866      	ldr	r0, [pc, #408]	; (8000338 <main+0x1ec>)
 80001a0:	f004 fb7e 	bl	80048a0 <u8x8_SetPowerSave>

	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 80001a4:	4965      	ldr	r1, [pc, #404]	; (800033c <main+0x1f0>)
 80001a6:	4864      	ldr	r0, [pc, #400]	; (8000338 <main+0x1ec>)
 80001a8:	f003 fcba 	bl	8003b20 <u8g2_SetFont>
	u8g2_SetDisplayRotation(&u8g2,U8G2_R2);
 80001ac:	4964      	ldr	r1, [pc, #400]	; (8000340 <main+0x1f4>)
 80001ae:	4862      	ldr	r0, [pc, #392]	; (8000338 <main+0x1ec>)
 80001b0:	f003 ff28 	bl	8004004 <u8g2_SetDisplayRotation>

	//HAL_UART_Receive_IT(&huart1, &cmd, 1);

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 80001b4:	4b63      	ldr	r3, [pc, #396]	; (8000344 <main+0x1f8>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	695a      	ldr	r2, [r3, #20]
 80001ba:	4b62      	ldr	r3, [pc, #392]	; (8000344 <main+0x1f8>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f042 0201 	orr.w	r2, r2, #1
 80001c2:	615a      	str	r2, [r3, #20]
	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80001c4:	4b5f      	ldr	r3, [pc, #380]	; (8000344 <main+0x1f8>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	68da      	ldr	r2, [r3, #12]
 80001ca:	4b5e      	ldr	r3, [pc, #376]	; (8000344 <main+0x1f8>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f042 0220 	orr.w	r2, r2, #32
 80001d2:	60da      	str	r2, [r3, #12]
	rxBufferInit(&uart_rx);
 80001d4:	485c      	ldr	r0, [pc, #368]	; (8000348 <main+0x1fc>)
 80001d6:	f000 fec5 	bl	8000f64 <rxBufferInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (timerFlag == 1) {
 80001da:	4b5c      	ldr	r3, [pc, #368]	; (800034c <main+0x200>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d12c      	bne.n	800023e <main+0xf2>
			timerFlag = 0;
 80001e4:	4b59      	ldr	r3, [pc, #356]	; (800034c <main+0x200>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]

			state = 2;
 80001ea:	2302      	movs	r3, #2
 80001ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			if (first++ > 0) {
 80001f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80001f4:	1c5a      	adds	r2, r3, #1
 80001f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	dd09      	ble.n	8000212 <main+0xc6>
				sprintf(str, "1 min TIMER");
 80001fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000202:	4953      	ldr	r1, [pc, #332]	; (8000350 <main+0x204>)
 8000204:	4618      	mov	r0, r3
 8000206:	f004 fc0b 	bl	8004a20 <siprintf>
				first = 1;
 800020a:	2301      	movs	r3, #1
 800020c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000210:	e005      	b.n	800021e <main+0xd2>

			} else {
				sprintf(str, "Hello :)");
 8000212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000216:	494f      	ldr	r1, [pc, #316]	; (8000354 <main+0x208>)
 8000218:	4618      	mov	r0, r3
 800021a:	f004 fc01 	bl	8004a20 <siprintf>
			}

			u8g2_FirstPage(&u8g2);
 800021e:	4846      	ldr	r0, [pc, #280]	; (8000338 <main+0x1ec>)
 8000220:	f002 ff91 	bl	8003146 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 8000224:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000228:	221e      	movs	r2, #30
 800022a:	2105      	movs	r1, #5
 800022c:	4842      	ldr	r0, [pc, #264]	; (8000338 <main+0x1ec>)
 800022e:	f003 fbd9 	bl	80039e4 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 8000232:	4841      	ldr	r0, [pc, #260]	; (8000338 <main+0x1ec>)
 8000234:	f002 ff9b 	bl	800316e <u8g2_NextPage>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1f2      	bne.n	8000224 <main+0xd8>

		}

		if (btnFlag == 1) {
 800023e:	4b46      	ldr	r3, [pc, #280]	; (8000358 <main+0x20c>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	2b01      	cmp	r3, #1
 8000246:	d11b      	bne.n	8000280 <main+0x134>
			btnFlag = 0;
 8000248:	4b43      	ldr	r3, [pc, #268]	; (8000358 <main+0x20c>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]

			state = 2;
 800024e:	2302      	movs	r3, #2
 8000250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			sprintf(str, "BUTTON!");
 8000254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000258:	4940      	ldr	r1, [pc, #256]	; (800035c <main+0x210>)
 800025a:	4618      	mov	r0, r3
 800025c:	f004 fbe0 	bl	8004a20 <siprintf>
			u8g2_FirstPage(&u8g2);
 8000260:	4835      	ldr	r0, [pc, #212]	; (8000338 <main+0x1ec>)
 8000262:	f002 ff70 	bl	8003146 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 8000266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800026a:	221e      	movs	r2, #30
 800026c:	2105      	movs	r1, #5
 800026e:	4832      	ldr	r0, [pc, #200]	; (8000338 <main+0x1ec>)
 8000270:	f003 fbb8 	bl	80039e4 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 8000274:	4830      	ldr	r0, [pc, #192]	; (8000338 <main+0x1ec>)
 8000276:	f002 ff7a 	bl	800316e <u8g2_NextPage>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1f2      	bne.n	8000266 <main+0x11a>

		}

		if (state == 1) {
 8000280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000284:	2b01      	cmp	r3, #1
 8000286:	f040 811a 	bne.w	80004be <main+0x372>
			state = 3;
 800028a:	2303      	movs	r3, #3
 800028c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			sprintf(str, "MEASURING...");
 8000290:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000294:	4932      	ldr	r1, [pc, #200]	; (8000360 <main+0x214>)
 8000296:	4618      	mov	r0, r3
 8000298:	f004 fbc2 	bl	8004a20 <siprintf>
						u8g2_FirstPage(&u8g2);
 800029c:	4826      	ldr	r0, [pc, #152]	; (8000338 <main+0x1ec>)
 800029e:	f002 ff52 	bl	8003146 <u8g2_FirstPage>
						do {
							u8g2_DrawStrX2(&u8g2, 5, 30, str);
 80002a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002a6:	221e      	movs	r2, #30
 80002a8:	2105      	movs	r1, #5
 80002aa:	4823      	ldr	r0, [pc, #140]	; (8000338 <main+0x1ec>)
 80002ac:	f003 fb9a 	bl	80039e4 <u8g2_DrawStrX2>

						} while (u8g2_NextPage(&u8g2));
 80002b0:	4821      	ldr	r0, [pc, #132]	; (8000338 <main+0x1ec>)
 80002b2:	f002 ff5c 	bl	800316e <u8g2_NextPage>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f2      	bne.n	80002a2 <main+0x156>
			pre_tick = HAL_GetTick();
 80002bc:	f000 ff96 	bl	80011ec <HAL_GetTick>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while ((HAL_GetTick() - pre_tick) < 5000)
 80002c6:	bf00      	nop
 80002c8:	f000 ff90 	bl	80011ec <HAL_GetTick>
 80002cc:	4602      	mov	r2, r0
 80002ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	f241 3287 	movw	r2, #4999	; 0x1387
 80002d8:	4293      	cmp	r3, r2
 80002da:	d9f5      	bls.n	80002c8 <main+0x17c>
				;

			memset(buff, 0, 55);
 80002dc:	2237      	movs	r2, #55	; 0x37
 80002de:	2100      	movs	r1, #0
 80002e0:	4820      	ldr	r0, [pc, #128]	; (8000364 <main+0x218>)
 80002e2:	f004 fb95 	bl	8004a10 <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) getDataCommand, 5, 5000);
 80002e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80002ea:	2205      	movs	r2, #5
 80002ec:	491e      	ldr	r1, [pc, #120]	; (8000368 <main+0x21c>)
 80002ee:	4815      	ldr	r0, [pc, #84]	; (8000344 <main+0x1f8>)
 80002f0:	f002 fd33 	bl	8002d5a <HAL_UART_Transmit>

			pre_tick = HAL_GetTick();
 80002f4:	f000 ff7a 	bl	80011ec <HAL_GetTick>
 80002f8:	4603      	mov	r3, r0
 80002fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while ((HAL_GetTick() - pre_tick) < 1000)
 80002fe:	bf00      	nop
 8000300:	f000 ff74 	bl	80011ec <HAL_GetTick>
 8000304:	4602      	mov	r2, r0
 8000306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000310:	d3f6      	bcc.n	8000300 <main+0x1b4>
				;

			uint8_t num = uart_available(&uart_rx);
 8000312:	480d      	ldr	r0, [pc, #52]	; (8000348 <main+0x1fc>)
 8000314:	f000 fe9e 	bl	8001054 <uart_available>
 8000318:	4603      	mov	r3, r0
 800031a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			uint8_t i;
			for (i = 0; i < num; i++) {
 800031e:	2300      	movs	r3, #0
 8000320:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000324:	e036      	b.n	8000394 <main+0x248>
 8000326:	bf00      	nop
 8000328:	200000fc 	.word	0x200000fc
 800032c:	08000da9 	.word	0x08000da9
 8000330:	08000ea1 	.word	0x08000ea1
 8000334:	080056fc 	.word	0x080056fc
 8000338:	20000208 	.word	0x20000208
 800033c:	080053d8 	.word	0x080053d8
 8000340:	08005708 	.word	0x08005708
 8000344:	20000188 	.word	0x20000188
 8000348:	200002a0 	.word	0x200002a0
 800034c:	20000204 	.word	0x20000204
 8000350:	0800532c 	.word	0x0800532c
 8000354:	08005338 	.word	0x08005338
 8000358:	20000203 	.word	0x20000203
 800035c:	08005344 	.word	0x08005344
 8000360:	0800534c 	.word	0x0800534c
 8000364:	200001cc 	.word	0x200001cc
 8000368:	20000000 	.word	0x20000000
				int ch = pop(&uart_rx);
 800036c:	489b      	ldr	r0, [pc, #620]	; (80005dc <main+0x490>)
 800036e:	f000 fe3f 	bl	8000ff0 <pop>
 8000372:	4603      	mov	r3, r0
 8000374:	663b      	str	r3, [r7, #96]	; 0x60
				if (ch != -1) {
 8000376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800037c:	d005      	beq.n	800038a <main+0x23e>

					buff[i] = ch;
 800037e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000382:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000384:	b2d1      	uxtb	r1, r2
 8000386:	4a96      	ldr	r2, [pc, #600]	; (80005e0 <main+0x494>)
 8000388:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 800038a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800038e:	3301      	adds	r3, #1
 8000390:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000394:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8000398:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800039c:	429a      	cmp	r2, r3
 800039e:	d3e5      	bcc.n	800036c <main+0x220>
				}
			}
			//HAL_UART_Transmit(&huart1, buff, num, 500);

			if ((buff[0] == 0x16 && buff[1] == 0x35)) {
 80003a0:	4b8f      	ldr	r3, [pc, #572]	; (80005e0 <main+0x494>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b16      	cmp	r3, #22
 80003a6:	f47f af18 	bne.w	80001da <main+0x8e>
 80003aa:	4b8d      	ldr	r3, [pc, #564]	; (80005e0 <main+0x494>)
 80003ac:	785b      	ldrb	r3, [r3, #1]
 80003ae:	2b35      	cmp	r3, #53	; 0x35
 80003b0:	f47f af13 	bne.w	80001da <main+0x8e>
				if (buff[2] == 0x0B) {
 80003b4:	4b8a      	ldr	r3, [pc, #552]	; (80005e0 <main+0x494>)
 80003b6:	789b      	ldrb	r3, [r3, #2]
 80003b8:	2b0b      	cmp	r3, #11
 80003ba:	f47f af0e 	bne.w	80001da <main+0x8e>
					int val = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					val |= (buff[3] << 24) | (buff[4] << 16) | (buff[5] << 8)
							| buff[6];
							*/
					val=(buff[3]<<24)+(buff[4]<<16)+(buff[5]<<8)+(buff[6]);
 80003c2:	4b87      	ldr	r3, [pc, #540]	; (80005e0 <main+0x494>)
 80003c4:	78db      	ldrb	r3, [r3, #3]
 80003c6:	061a      	lsls	r2, r3, #24
 80003c8:	4b85      	ldr	r3, [pc, #532]	; (80005e0 <main+0x494>)
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	041b      	lsls	r3, r3, #16
 80003ce:	441a      	add	r2, r3
 80003d0:	4b83      	ldr	r3, [pc, #524]	; (80005e0 <main+0x494>)
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	021b      	lsls	r3, r3, #8
 80003d6:	4413      	add	r3, r2
 80003d8:	4a81      	ldr	r2, [pc, #516]	; (80005e0 <main+0x494>)
 80003da:	7992      	ldrb	r2, [r2, #6]
 80003dc:	4413      	add	r3, r2
 80003de:	66bb      	str	r3, [r7, #104]	; 0x68
					sprintf(str, "PM1.0 : %d\r\n", val);
 80003e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80003e6:	497f      	ldr	r1, [pc, #508]	; (80005e4 <main+0x498>)
 80003e8:	4618      	mov	r0, r3
 80003ea:	f004 fb19 	bl	8004a20 <siprintf>
#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str),
	  							100);
	  #endif
					val = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	66bb      	str	r3, [r7, #104]	; 0x68
					val=(buff[7]<<24)+(buff[8]<<16)+(buff[9]<<8)+(buff[10]);
 80003f2:	4b7b      	ldr	r3, [pc, #492]	; (80005e0 <main+0x494>)
 80003f4:	79db      	ldrb	r3, [r3, #7]
 80003f6:	061a      	lsls	r2, r3, #24
 80003f8:	4b79      	ldr	r3, [pc, #484]	; (80005e0 <main+0x494>)
 80003fa:	7a1b      	ldrb	r3, [r3, #8]
 80003fc:	041b      	lsls	r3, r3, #16
 80003fe:	441a      	add	r2, r3
 8000400:	4b77      	ldr	r3, [pc, #476]	; (80005e0 <main+0x494>)
 8000402:	7a5b      	ldrb	r3, [r3, #9]
 8000404:	021b      	lsls	r3, r3, #8
 8000406:	4413      	add	r3, r2
 8000408:	4a75      	ldr	r2, [pc, #468]	; (80005e0 <main+0x494>)
 800040a:	7a92      	ldrb	r2, [r2, #10]
 800040c:	4413      	add	r3, r2
 800040e:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					val |= (buff[7] << 24) | (buff[8] << 16) | (buff[9] << 8)
							| buff[10];
							*/
					sprintf(str2, "PM2.5 : %d\r\n", val);
 8000410:	f107 0320 	add.w	r3, r7, #32
 8000414:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000416:	4974      	ldr	r1, [pc, #464]	; (80005e8 <main+0x49c>)
 8000418:	4618      	mov	r0, r3
 800041a:	f004 fb01 	bl	8004a20 <siprintf>
#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str2, sizeof(str2),
	  							5000);
	  #endif
					val = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	66bb      	str	r3, [r7, #104]	; 0x68
					val=(buff[11]<<24)+(buff[12]<<16)+(buff[13]<<8)+(buff[14]);
 8000422:	4b6f      	ldr	r3, [pc, #444]	; (80005e0 <main+0x494>)
 8000424:	7adb      	ldrb	r3, [r3, #11]
 8000426:	061a      	lsls	r2, r3, #24
 8000428:	4b6d      	ldr	r3, [pc, #436]	; (80005e0 <main+0x494>)
 800042a:	7b1b      	ldrb	r3, [r3, #12]
 800042c:	041b      	lsls	r3, r3, #16
 800042e:	441a      	add	r2, r3
 8000430:	4b6b      	ldr	r3, [pc, #428]	; (80005e0 <main+0x494>)
 8000432:	7b5b      	ldrb	r3, [r3, #13]
 8000434:	021b      	lsls	r3, r3, #8
 8000436:	4413      	add	r3, r2
 8000438:	4a69      	ldr	r2, [pc, #420]	; (80005e0 <main+0x494>)
 800043a:	7b92      	ldrb	r2, [r2, #14]
 800043c:	4413      	add	r3, r2
 800043e:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					val |= (buff[11] << 24) | (buff[12] << 16) | (buff[13] << 8)
							| buff[14];
							*/
					sprintf(str3, "PM10 : %d\r\n", val);
 8000440:	463b      	mov	r3, r7
 8000442:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000444:	4969      	ldr	r1, [pc, #420]	; (80005ec <main+0x4a0>)
 8000446:	4618      	mov	r0, r3
 8000448:	f004 faea 	bl	8004a20 <siprintf>

#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str3, sizeof(str3),
	  												5000);
	  #else
					u8g2_FirstPage(&u8g2);
 800044c:	4868      	ldr	r0, [pc, #416]	; (80005f0 <main+0x4a4>)
 800044e:	f002 fe7a 	bl	8003146 <u8g2_FirstPage>
					do {
						u8g2_DrawStrX2(&u8g2, 5, 15, str);
 8000452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000456:	220f      	movs	r2, #15
 8000458:	2105      	movs	r1, #5
 800045a:	4865      	ldr	r0, [pc, #404]	; (80005f0 <main+0x4a4>)
 800045c:	f003 fac2 	bl	80039e4 <u8g2_DrawStrX2>
						u8g2_DrawStrX2(&u8g2, 5, 30, str2);
 8000460:	f107 0320 	add.w	r3, r7, #32
 8000464:	221e      	movs	r2, #30
 8000466:	2105      	movs	r1, #5
 8000468:	4861      	ldr	r0, [pc, #388]	; (80005f0 <main+0x4a4>)
 800046a:	f003 fabb 	bl	80039e4 <u8g2_DrawStrX2>
						u8g2_DrawStrX2(&u8g2, 5, 45, str3);
 800046e:	463b      	mov	r3, r7
 8000470:	222d      	movs	r2, #45	; 0x2d
 8000472:	2105      	movs	r1, #5
 8000474:	485e      	ldr	r0, [pc, #376]	; (80005f0 <main+0x4a4>)
 8000476:	f003 fab5 	bl	80039e4 <u8g2_DrawStrX2>
					} while (u8g2_NextPage(&u8g2));
 800047a:	485d      	ldr	r0, [pc, #372]	; (80005f0 <main+0x4a4>)
 800047c:	f002 fe77 	bl	800316e <u8g2_NextPage>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1e5      	bne.n	8000452 <main+0x306>
					int pre_tick = HAL_GetTick();
 8000486:	f000 feb1 	bl	80011ec <HAL_GetTick>
 800048a:	4603      	mov	r3, r0
 800048c:	667b      	str	r3, [r7, #100]	; 0x64
					while ((HAL_GetTick() - pre_tick) < 1000)
 800048e:	bf00      	nop
 8000490:	f000 feac 	bl	80011ec <HAL_GetTick>
 8000494:	4602      	mov	r2, r0
 8000496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800049e:	d3f7      	bcc.n	8000490 <main+0x344>
						;

#endif

					memset(str, 0, sizeof(str));
 80004a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004a4:	2220      	movs	r2, #32
 80004a6:	2100      	movs	r1, #0
 80004a8:	4618      	mov	r0, r3
 80004aa:	f004 fab1 	bl	8004a10 <memset>
					memset(str2, 0, sizeof(str2));
 80004ae:	f107 0320 	add.w	r3, r7, #32
 80004b2:	2220      	movs	r2, #32
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f004 faaa 	bl	8004a10 <memset>
 80004bc:	e68d      	b.n	80001da <main+0x8e>
				}

			}
		}

		else if (state == 2) {
 80004be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d142      	bne.n	800054c <main+0x400>
			state = 1;
 80004c6:	2301      	movs	r3, #1
 80004c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			memset(buff, 0, 55);
 80004cc:	2237      	movs	r2, #55	; 0x37
 80004ce:	2100      	movs	r1, #0
 80004d0:	4843      	ldr	r0, [pc, #268]	; (80005e0 <main+0x494>)
 80004d2:	f004 fa9d 	bl	8004a10 <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) openCommand, 6,
 80004d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80004da:	2206      	movs	r2, #6
 80004dc:	4945      	ldr	r1, [pc, #276]	; (80005f4 <main+0x4a8>)
 80004de:	4846      	ldr	r0, [pc, #280]	; (80005f8 <main+0x4ac>)
 80004e0:	f002 fc3b 	bl	8002d5a <HAL_UART_Transmit>
					5000);
			pre_tick = HAL_GetTick();
 80004e4:	f000 fe82 	bl	80011ec <HAL_GetTick>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while ((HAL_GetTick() - pre_tick) < 1000)
 80004ee:	bf00      	nop
 80004f0:	f000 fe7c 	bl	80011ec <HAL_GetTick>
 80004f4:	4602      	mov	r2, r0
 80004f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000500:	d3f6      	bcc.n	80004f0 <main+0x3a4>
				;

			uint8_t num = uart_available(&uart_rx);
 8000502:	4836      	ldr	r0, [pc, #216]	; (80005dc <main+0x490>)
 8000504:	f000 fda6 	bl	8001054 <uart_available>
 8000508:	4603      	mov	r3, r0
 800050a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

			uint8_t i;

			for (i = 0; i < num; i++) {
 800050e:	2300      	movs	r3, #0
 8000510:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000514:	e013      	b.n	800053e <main+0x3f2>
				int ch = pop(&uart_rx);
 8000516:	4831      	ldr	r0, [pc, #196]	; (80005dc <main+0x490>)
 8000518:	f000 fd6a 	bl	8000ff0 <pop>
 800051c:	4603      	mov	r3, r0
 800051e:	673b      	str	r3, [r7, #112]	; 0x70
				if (ch != -1) {
 8000520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000526:	d005      	beq.n	8000534 <main+0x3e8>
					buff[i] = ch;
 8000528:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800052c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800052e:	b2d1      	uxtb	r1, r2
 8000530:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <main+0x494>)
 8000532:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 8000534:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000538:	3301      	adds	r3, #1
 800053a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800053e:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8000542:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000546:	429a      	cmp	r2, r3
 8000548:	d3e5      	bcc.n	8000516 <main+0x3ca>
 800054a:	e646      	b.n	80001da <main+0x8e>
				}
			}
			//HAL_UART_Transmit(&huart1, buff, num, 500);

		} else if (state == 3) {
 800054c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000550:	2b03      	cmp	r3, #3
 8000552:	d155      	bne.n	8000600 <main+0x4b4>
			state = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			memset(buff, 0, 55);
 800055a:	2237      	movs	r2, #55	; 0x37
 800055c:	2100      	movs	r1, #0
 800055e:	4820      	ldr	r0, [pc, #128]	; (80005e0 <main+0x494>)
 8000560:	f004 fa56 	bl	8004a10 <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) closeCommand, 6,
 8000564:	f241 3388 	movw	r3, #5000	; 0x1388
 8000568:	2206      	movs	r2, #6
 800056a:	4924      	ldr	r1, [pc, #144]	; (80005fc <main+0x4b0>)
 800056c:	4822      	ldr	r0, [pc, #136]	; (80005f8 <main+0x4ac>)
 800056e:	f002 fbf4 	bl	8002d5a <HAL_UART_Transmit>
					5000);
			pre_tick = HAL_GetTick();
 8000572:	f000 fe3b 	bl	80011ec <HAL_GetTick>
 8000576:	4603      	mov	r3, r0
 8000578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while ((HAL_GetTick() - pre_tick) < 1000)
 800057c:	bf00      	nop
 800057e:	f000 fe35 	bl	80011ec <HAL_GetTick>
 8000582:	4602      	mov	r2, r0
 8000584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800058e:	d3f6      	bcc.n	800057e <main+0x432>
				;

			uint8_t num = uart_available(&uart_rx);
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <main+0x490>)
 8000592:	f000 fd5f 	bl	8001054 <uart_available>
 8000596:	4603      	mov	r3, r0
 8000598:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			uint8_t i;

			for (i = 0; i < num; i++) {
 800059c:	2300      	movs	r3, #0
 800059e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80005a2:	e013      	b.n	80005cc <main+0x480>
				int ch = pop(&uart_rx);
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x490>)
 80005a6:	f000 fd23 	bl	8000ff0 <pop>
 80005aa:	4603      	mov	r3, r0
 80005ac:	67bb      	str	r3, [r7, #120]	; 0x78
				if (ch != -1) {
 80005ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b4:	d005      	beq.n	80005c2 <main+0x476>
					buff[i] = ch;
 80005b6:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80005ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80005bc:	b2d1      	uxtb	r1, r2
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <main+0x494>)
 80005c0:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 80005c2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80005c6:	3301      	adds	r3, #1
 80005c8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80005cc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80005d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3e5      	bcc.n	80005a4 <main+0x458>
 80005d8:	e5ff      	b.n	80001da <main+0x8e>
 80005da:	bf00      	nop
 80005dc:	200002a0 	.word	0x200002a0
 80005e0:	200001cc 	.word	0x200001cc
 80005e4:	0800535c 	.word	0x0800535c
 80005e8:	0800536c 	.word	0x0800536c
 80005ec:	0800537c 	.word	0x0800537c
 80005f0:	20000208 	.word	0x20000208
 80005f4:	20000010 	.word	0x20000010
 80005f8:	20000188 	.word	0x20000188
 80005fc:	20000008 	.word	0x20000008
				}
			}
			//HAL_UART_Transmit(&huart1, buff, num, 500);
		} else if (state == 0) {
 8000600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000604:	2b00      	cmp	r3, #0
 8000606:	f47f ade8 	bne.w	80001da <main+0x8e>

			sprintf(str, "   ^   ^");
 800060a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800060e:	4931      	ldr	r1, [pc, #196]	; (80006d4 <main+0x588>)
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fa05 	bl	8004a20 <siprintf>
			sprintf(str2, "     o");
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	492f      	ldr	r1, [pc, #188]	; (80006d8 <main+0x58c>)
 800061c:	4618      	mov	r0, r3
 800061e:	f004 f9ff 	bl	8004a20 <siprintf>
			u8g2_FirstPage(&u8g2);
 8000622:	482e      	ldr	r0, [pc, #184]	; (80006dc <main+0x590>)
 8000624:	f002 fd8f 	bl	8003146 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 8000628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800062c:	221e      	movs	r2, #30
 800062e:	2105      	movs	r1, #5
 8000630:	482a      	ldr	r0, [pc, #168]	; (80006dc <main+0x590>)
 8000632:	f003 f9d7 	bl	80039e4 <u8g2_DrawStrX2>
				u8g2_DrawStrX2(&u8g2, 5, 45, str2);
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	222d      	movs	r2, #45	; 0x2d
 800063c:	2105      	movs	r1, #5
 800063e:	4827      	ldr	r0, [pc, #156]	; (80006dc <main+0x590>)
 8000640:	f003 f9d0 	bl	80039e4 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 8000644:	4825      	ldr	r0, [pc, #148]	; (80006dc <main+0x590>)
 8000646:	f002 fd92 	bl	800316e <u8g2_NextPage>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1eb      	bne.n	8000628 <main+0x4dc>

			pre_tick = HAL_GetTick();
 8000650:	f000 fdcc 	bl	80011ec <HAL_GetTick>
 8000654:	4603      	mov	r3, r0
 8000656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while ((HAL_GetTick() - pre_tick) < 1000)
 800065a:	bf00      	nop
 800065c:	f000 fdc6 	bl	80011ec <HAL_GetTick>
 8000660:	4602      	mov	r2, r0
 8000662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800066c:	d3f6      	bcc.n	800065c <main+0x510>
				;

			sprintf(str, "   -   -");
 800066e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000672:	491b      	ldr	r1, [pc, #108]	; (80006e0 <main+0x594>)
 8000674:	4618      	mov	r0, r3
 8000676:	f004 f9d3 	bl	8004a20 <siprintf>
			sprintf(str2, "     _");
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4919      	ldr	r1, [pc, #100]	; (80006e4 <main+0x598>)
 8000680:	4618      	mov	r0, r3
 8000682:	f004 f9cd 	bl	8004a20 <siprintf>
			u8g2_FirstPage(&u8g2);
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <main+0x590>)
 8000688:	f002 fd5d 	bl	8003146 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 800068c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000690:	221e      	movs	r2, #30
 8000692:	2105      	movs	r1, #5
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <main+0x590>)
 8000696:	f003 f9a5 	bl	80039e4 <u8g2_DrawStrX2>
				u8g2_DrawStrX2(&u8g2, 5, 45, str2);
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	222d      	movs	r2, #45	; 0x2d
 80006a0:	2105      	movs	r1, #5
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <main+0x590>)
 80006a4:	f003 f99e 	bl	80039e4 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <main+0x590>)
 80006aa:	f002 fd60 	bl	800316e <u8g2_NextPage>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1eb      	bne.n	800068c <main+0x540>

			pre_tick = HAL_GetTick();
 80006b4:	f000 fd9a 	bl	80011ec <HAL_GetTick>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while ((HAL_GetTick() - pre_tick) < 1000)
 80006be:	bf00      	nop
 80006c0:	f000 fd94 	bl	80011ec <HAL_GetTick>
 80006c4:	4602      	mov	r2, r0
 80006c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d0:	d3f6      	bcc.n	80006c0 <main+0x574>
		if (timerFlag == 1) {
 80006d2:	e582      	b.n	80001da <main+0x8e>
 80006d4:	08005388 	.word	0x08005388
 80006d8:	08005394 	.word	0x08005394
 80006dc:	20000208 	.word	0x20000208
 80006e0:	0800539c 	.word	0x0800539c
 80006e4:	080053a8 	.word	0x080053a8

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b090      	sub	sp, #64	; 0x40
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	2228      	movs	r2, #40	; 0x28
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 f98a 	bl	8004a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070a:	2301      	movs	r3, #1
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000726:	2300      	movs	r3, #0
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0318 	add.w	r3, r7, #24
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f84c 	bl	80017cc <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800073a:	f000 f9a1 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fab9 	bl	8001cd0 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000764:	f000 f98c 	bl	8000a80 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3740      	adds	r7, #64	; 0x40
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2026      	movs	r0, #38	; 0x26
 800077a:	f000 fe3c 	bl	80013f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800077e:	2026      	movs	r0, #38	; 0x26
 8000780:	f000 fe55 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2006      	movs	r0, #6
 800078a:	f000 fe34 	bl	80013f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800078e:	2006      	movs	r0, #6
 8000790:	f000 fe4d 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	201c      	movs	r0, #28
 800079a:	f000 fe2c 	bl	80013f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800079e:	201c      	movs	r0, #28
 80007a0:	f000 fe45 	bl	800142e <HAL_NVIC_EnableIRQ>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_SPI1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_SPI1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x64>)
 80007f4:	220a      	movs	r2, #10
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_SPI1_Init+0x64>)
 80007fa:	f001 fc01 	bl	8002000 <HAL_SPI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 f93c 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000a4 	.word	0x200000a4
 8000810:	40013000 	.word	0x40013000

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_TIM2_Init+0x98>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM2_Init+0x98>)
 800083a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800083e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_TIM2_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_TIM2_Init+0x98>)
 8000848:	f242 720f 	movw	r2, #9999	; 0x270f
 800084c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_TIM2_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_TIM2_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_TIM2_Init+0x98>)
 800085c:	f001 fe36 	bl	80024cc <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000866:	f000 f90b 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_TIM2_Init+0x98>)
 8000878:	f001 ffd2 	bl	8002820 <HAL_TIM_ConfigClockSource>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000882:	f000 f8fd 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_TIM2_Init+0x98>)
 8000894:	f002 f9a4 	bl	8002be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800089e:	f000 f8ef 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000fc 	.word	0x200000fc

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART1_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e8:	f002 f9ea 	bl	8002cc0 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f8c5 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000144 	.word	0x20000144
 8000900:	40013800 	.word	0x40013800

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART2_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800093c:	f002 f9c0 	bl	8002cc0 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f89b 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000188 	.word	0x20000188
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_GPIO_Init+0xc8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <MX_GPIO_Init+0xc8>)
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_GPIO_Init+0xc8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0320 	and.w	r3, r3, #32
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_GPIO_Init+0xc8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <MX_GPIO_Init+0xc8>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_GPIO_Init+0xc8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_GPIO_Init+0xc8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <MX_GPIO_Init+0xc8>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_GPIO_Init+0xc8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2150      	movs	r1, #80	; 0x50
 80009b8:	481a      	ldr	r0, [pc, #104]	; (8000a24 <MX_GPIO_Init+0xcc>)
 80009ba:	f000 fed7 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2101      	movs	r1, #1
 80009c2:	4819      	ldr	r0, [pc, #100]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009c4:	f000 fed2 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn0_Pin */
  GPIO_InitStruct.Pin = btn0_Pin;
 80009c8:	2301      	movs	r3, #1
 80009ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_GPIO_Init+0xd4>)
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn0_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <MX_GPIO_Init+0xcc>)
 80009dc:	f000 fd42 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin;
 80009e0:	2350      	movs	r3, #80	; 0x50
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_GPIO_Init+0xcc>)
 80009f8:	f000 fd34 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80009fc:	2301      	movs	r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000a14:	f000 fd26 	bl	8001464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010800 	.word	0x40010800
 8000a28:	40010c00 	.word	0x40010c00
 8000a2c:	10210000 	.word	0x10210000

08000a30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
//GPIO PIN OUTPUT HIGH
	if (htim->Instance == htim2.Instance) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d102      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerFlag = 1;
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]

	}
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	200000fc 	.word	0x200000fc
 8000a58:	20000204 	.word	0x20000204

08000a5c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == btn0_Pin) {
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d102      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0x16>

		btnFlag = 1;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x20>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]

	}
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000203 	.word	0x20000203

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6193      	str	r3, [r2, #24]
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_MspInit+0x60>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_MspInit+0x60>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000

08000af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <HAL_SPI_MspInit+0x70>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d123      	bne.n	8000b58 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_SPI_MspInit+0x74>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <HAL_SPI_MspInit+0x74>)
 8000b16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_SPI_MspInit+0x74>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_SPI_MspInit+0x74>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_SPI_MspInit+0x74>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_SPI_MspInit+0x74>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b40:	23a0      	movs	r3, #160	; 0xa0
 8000b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_SPI_MspInit+0x78>)
 8000b54:	f000 fc86 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40013000 	.word	0x40013000
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010800 	.word	0x40010800

08000b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b7c:	d10b      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_TIM_Base_MspInit+0x34>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_TIM_Base_MspInit+0x34>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_TIM_Base_MspInit+0x34>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a37      	ldr	r2, [pc, #220]	; (8000c9c <HAL_UART_MspInit+0xf8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d132      	bne.n	8000c2a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a35      	ldr	r2, [pc, #212]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a2f      	ldr	r2, [pc, #188]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4826      	ldr	r0, [pc, #152]	; (8000ca4 <HAL_UART_MspInit+0x100>)
 8000c0a:	f000 fc2b 	bl	8001464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <HAL_UART_MspInit+0x100>)
 8000c24:	f000 fc1e 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c28:	e034      	b.n	8000c94 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <HAL_UART_MspInit+0x104>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d12f      	bne.n	8000c94 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3e:	61d3      	str	r3, [r2, #28]
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c64:	2304      	movs	r3, #4
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	4619      	mov	r1, r3
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_UART_MspInit+0x100>)
 8000c78:	f000 fbf4 	bl	8001464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_UART_MspInit+0x100>)
 8000c90:	f000 fbe8 	bl	8001464 <HAL_GPIO_Init>
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013800 	.word	0x40013800
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	40004400 	.word	0x40004400

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf2:	f000 fa69 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn0_Pin);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f000 fd4c 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM2_IRQHandler+0x10>)
 8000d0e:	f001 fc7f 	bl	8002610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000fc 	.word	0x200000fc

08000d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
Uart_isr(&huart2);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART2_IRQHandler+0x10>)
 8000d22:	f000 f9bd 	bl	80010a0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
 // HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000188 	.word	0x20000188

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f003 fe2c 	bl	80049bc <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20005000 	.word	0x20005000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	2000029c 	.word	0x2000029c
 8000d98:	200006f0 	.word	0x200006f0

08000d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	72fb      	strb	r3, [r7, #11]
 8000db6:	4613      	mov	r3, r2
 8000db8:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	3b28      	subs	r3, #40	; 0x28
 8000dbe:	2b23      	cmp	r3, #35	; 0x23
 8000dc0:	d864      	bhi.n	8000e8c <u8x8_stm32_gpio_and_delay+0xe4>
 8000dc2:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <u8x8_stm32_gpio_and_delay+0x20>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000e8d 	.word	0x08000e8d
 8000dcc:	08000e59 	.word	0x08000e59
 8000dd0:	08000e8d 	.word	0x08000e8d
 8000dd4:	08000e8d 	.word	0x08000e8d
 8000dd8:	08000e8d 	.word	0x08000e8d
 8000ddc:	08000e8d 	.word	0x08000e8d
 8000de0:	08000e8d 	.word	0x08000e8d
 8000de4:	08000e8d 	.word	0x08000e8d
 8000de8:	08000e8d 	.word	0x08000e8d
 8000dec:	08000e8d 	.word	0x08000e8d
 8000df0:	08000e8d 	.word	0x08000e8d
 8000df4:	08000e8d 	.word	0x08000e8d
 8000df8:	08000e8d 	.word	0x08000e8d
 8000dfc:	08000e8d 	.word	0x08000e8d
 8000e00:	08000e8d 	.word	0x08000e8d
 8000e04:	08000e8d 	.word	0x08000e8d
 8000e08:	08000e8d 	.word	0x08000e8d
 8000e0c:	08000e8d 	.word	0x08000e8d
 8000e10:	08000e8d 	.word	0x08000e8d
 8000e14:	08000e8d 	.word	0x08000e8d
 8000e18:	08000e8d 	.word	0x08000e8d
 8000e1c:	08000e8d 	.word	0x08000e8d
 8000e20:	08000e8d 	.word	0x08000e8d
 8000e24:	08000e8d 	.word	0x08000e8d
 8000e28:	08000e8d 	.word	0x08000e8d
 8000e2c:	08000e8d 	.word	0x08000e8d
 8000e30:	08000e8d 	.word	0x08000e8d
 8000e34:	08000e8d 	.word	0x08000e8d
 8000e38:	08000e8d 	.word	0x08000e8d
 8000e3c:	08000e8d 	.word	0x08000e8d
 8000e40:	08000e8d 	.word	0x08000e8d
 8000e44:	08000e8d 	.word	0x08000e8d
 8000e48:	08000e8d 	.word	0x08000e8d
 8000e4c:	08000e63 	.word	0x08000e63
 8000e50:	08000e71 	.word	0x08000e71
 8000e54:	08000e7f 	.word	0x08000e7f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000e58:	7abb      	ldrb	r3, [r7, #10]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f9d0 	bl	8001200 <HAL_Delay>
		break;
 8000e60:	e014      	b.n	8000e8c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8000e62:	7abb      	ldrb	r3, [r7, #10]
 8000e64:	461a      	mov	r2, r3
 8000e66:	2101      	movs	r1, #1
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <u8x8_stm32_gpio_and_delay+0xf0>)
 8000e6a:	f000 fc7f 	bl	800176c <HAL_GPIO_WritePin>
		break;
 8000e6e:	e00d      	b.n	8000e8c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8000e70:	7abb      	ldrb	r3, [r7, #10]
 8000e72:	461a      	mov	r2, r3
 8000e74:	2140      	movs	r1, #64	; 0x40
 8000e76:	4809      	ldr	r0, [pc, #36]	; (8000e9c <u8x8_stm32_gpio_and_delay+0xf4>)
 8000e78:	f000 fc78 	bl	800176c <HAL_GPIO_WritePin>
		break;
 8000e7c:	e006      	b.n	8000e8c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8000e7e:	7abb      	ldrb	r3, [r7, #10]
 8000e80:	461a      	mov	r2, r3
 8000e82:	2110      	movs	r1, #16
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <u8x8_stm32_gpio_and_delay+0xf4>)
 8000e86:	f000 fc71 	bl	800176c <HAL_GPIO_WritePin>
		break;
 8000e8a:	bf00      	nop
	}
	return 1;
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	72fb      	strb	r3, [r7, #11]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8000eb2:	7afb      	ldrb	r3, [r7, #11]
 8000eb4:	3b14      	subs	r3, #20
 8000eb6:	2b0c      	cmp	r3, #12
 8000eb8:	d847      	bhi.n	8000f4a <u8x8_byte_stm32_hw_spi+0xaa>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <u8x8_byte_stm32_hw_spi+0x20>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000f4f 	.word	0x08000f4f
 8000ec4:	08000f4b 	.word	0x08000f4b
 8000ec8:	08000f4b 	.word	0x08000f4b
 8000ecc:	08000ef5 	.word	0x08000ef5
 8000ed0:	08000f1b 	.word	0x08000f1b
 8000ed4:	08000f33 	.word	0x08000f33
 8000ed8:	08000f4b 	.word	0x08000f4b
 8000edc:	08000f4b 	.word	0x08000f4b
 8000ee0:	08000f4b 	.word	0x08000f4b
 8000ee4:	08000f4b 	.word	0x08000f4b
 8000ee8:	08000f4b 	.word	0x08000f4b
 8000eec:	08000f4b 	.word	0x08000f4b
 8000ef0:	08000f0d 	.word	0x08000f0d
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8000ef4:	7abb      	ldrb	r3, [r7, #10]
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4818      	ldr	r0, [pc, #96]	; (8000f60 <u8x8_byte_stm32_hw_spi+0xc0>)
 8000efe:	f001 f903 	bl	8002108 <HAL_SPI_Transmit>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d024      	beq.n	8000f52 <u8x8_byte_stm32_hw_spi+0xb2>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e024      	b.n	8000f56 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8000f0c:	7abb      	ldrb	r3, [r7, #10]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	214a      	movs	r1, #74	; 0x4a
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f003 fce4 	bl	80048e0 <u8x8_gpio_call>
		break;
 8000f18:	e01c      	b.n	8000f54 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	2149      	movs	r1, #73	; 0x49
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f003 fcdb 	bl	80048e0 <u8x8_gpio_call>
		HAL_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 f968 	bl	8001200 <HAL_Delay>
		break;
 8000f30:	e010      	b.n	8000f54 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 f964 	bl	8001200 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2149      	movs	r1, #73	; 0x49
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f003 fccc 	bl	80048e0 <u8x8_gpio_call>
		break;
 8000f48:	e004      	b.n	8000f54 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e003      	b.n	8000f56 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8000f4e:	bf00      	nop
 8000f50:	e000      	b.n	8000f54 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8000f52:	bf00      	nop
	}
	return 1;
 8000f54:	2301      	movs	r3, #1
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000a4 	.word	0x200000a4

08000f64 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart2;

void rxBufferInit(ring_buffer_t *uart) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	871a      	strh	r2, [r3, #56]	; 0x38
	uart->tail = 0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	875a      	strh	r2, [r3, #58]	; 0x3a
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 fd46 	bl	8004a10 <memset>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <push+0x60>)
 8000fa4:	fba3 2301 	umull	r2, r3, r3, r1
 8000fa8:	1aca      	subs	r2, r1, r3
 8000faa:	0852      	lsrs	r2, r2, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	095a      	lsrs	r2, r3, #5
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	1a9b      	subs	r3, r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	1aca      	subs	r2, r1, r3
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	89fa      	ldrh	r2, [r7, #14]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d009      	beq.n	8000fe0 <push+0x54>
		uart->buffer[uart->head] = ch;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	78fa      	ldrb	r2, [r7, #3]
 8000fd8:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	89fa      	ldrh	r2, [r7, #14]
 8000fde:	871a      	strh	r2, [r3, #56]	; 0x38
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	29e4129f 	.word	0x29e4129f

08000ff0 <pop>:

uint8_t pop(ring_buffer_t *uart) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001002:	b29b      	uxth	r3, r3
 8001004:	429a      	cmp	r2, r3
 8001006:	d101      	bne.n	800100c <pop+0x1c>
		return -1;
 8001008:	23ff      	movs	r3, #255	; 0xff
 800100a:	e01c      	b.n	8001046 <pop+0x56>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001010:	b29b      	uxth	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	5c9b      	ldrb	r3, [r3, r2]
 8001018:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800101e:	b29b      	uxth	r3, r3
 8001020:	3301      	adds	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <pop+0x60>)
 8001026:	fba3 1302 	umull	r1, r3, r3, r2
 800102a:	1ad1      	subs	r1, r2, r3
 800102c:	0849      	lsrs	r1, r1, #1
 800102e:	440b      	add	r3, r1
 8001030:	0959      	lsrs	r1, r3, #5
 8001032:	460b      	mov	r3, r1
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	1a5b      	subs	r3, r3, r1
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	1a5b      	subs	r3, r3, r1
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	b29a      	uxth	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	875a      	strh	r2, [r3, #58]	; 0x3a

		return cpop;
 8001044:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	29e4129f 	.word	0x29e4129f

08001054 <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001060:	b29b      	uxth	r3, r3
 8001062:	3337      	adds	r3, #55	; 0x37
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8001068:	b292      	uxth	r2, r2
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	4619      	mov	r1, r3
			% RX_BUFFER_SIZE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <uart_available+0x48>)
 8001070:	fba3 2301 	umull	r2, r3, r3, r1
 8001074:	1aca      	subs	r2, r1, r3
 8001076:	0852      	lsrs	r2, r2, #1
 8001078:	4413      	add	r3, r2
 800107a:	095a      	lsrs	r2, r3, #5
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	1aca      	subs	r2, r1, r3
	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 8001088:	4613      	mov	r3, r2
 800108a:	73fb      	strb	r3, [r7, #15]
	return n;
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	29e4129f 	.word	0x29e4129f

080010a0 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d011      	beq.n	80010e6 <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00c      	beq.n	80010e6 <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	4619      	mov	r1, r3
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <Uart_isr+0x4c>)
 80010e0:	f7ff ff54 	bl	8000f8c <push>
		return;
 80010e4:	bf00      	nop
	}
}
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200002a0 	.word	0x200002a0

080010f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	; (8001128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	; (8001134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001116:	f7ff fe41 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111a:	f003 fc55 	bl	80049c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff f815 	bl	800014c <main>
  bx lr
 8001122:	4770      	bx	lr
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800112c:	08005820 	.word	0x08005820
  ldr r2, =_sbss
 8001130:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001134:	200006f0 	.word	0x200006f0

08001138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_2_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x28>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x28>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f947 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fc98 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f95f 	bl	800144a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 f927 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000018 	.word	0x20000018
 80011c0:	20000020 	.word	0x20000020
 80011c4:	2000001c 	.word	0x2000001c

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <HAL_IncTick+0x20>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000020 	.word	0x20000020
 80011e8:	200002dc 	.word	0x200002dc

080011ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_GetTick+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	200002dc 	.word	0x200002dc

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff fff0 	bl	80011ec <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffe0 	bl	80011ec <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000020 	.word	0x20000020

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4906      	ldr	r1, [pc, #24]	; (80012e0 <__NVIC_EnableIRQ+0x34>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff90 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff2d 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff42 	bl	8001290 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ff90 	bl	8001338 <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff5f 	bl	80012e4 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff35 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffa2 	bl	800139c <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b08b      	sub	sp, #44	; 0x2c
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	e169      	b.n	800174c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001478:	2201      	movs	r2, #1
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	429a      	cmp	r2, r3
 8001492:	f040 8158 	bne.w	8001746 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a9a      	ldr	r2, [pc, #616]	; (8001704 <HAL_GPIO_Init+0x2a0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d05e      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014a0:	4a98      	ldr	r2, [pc, #608]	; (8001704 <HAL_GPIO_Init+0x2a0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d875      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014a6:	4a98      	ldr	r2, [pc, #608]	; (8001708 <HAL_GPIO_Init+0x2a4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d058      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014ac:	4a96      	ldr	r2, [pc, #600]	; (8001708 <HAL_GPIO_Init+0x2a4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d86f      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014b2:	4a96      	ldr	r2, [pc, #600]	; (800170c <HAL_GPIO_Init+0x2a8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d052      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014b8:	4a94      	ldr	r2, [pc, #592]	; (800170c <HAL_GPIO_Init+0x2a8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d869      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014be:	4a94      	ldr	r2, [pc, #592]	; (8001710 <HAL_GPIO_Init+0x2ac>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d04c      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014c4:	4a92      	ldr	r2, [pc, #584]	; (8001710 <HAL_GPIO_Init+0x2ac>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d863      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014ca:	4a92      	ldr	r2, [pc, #584]	; (8001714 <HAL_GPIO_Init+0x2b0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d046      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014d0:	4a90      	ldr	r2, [pc, #576]	; (8001714 <HAL_GPIO_Init+0x2b0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d85d      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d82a      	bhi.n	8001530 <HAL_GPIO_Init+0xcc>
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d859      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014de:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <HAL_GPIO_Init+0x80>)
 80014e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e4:	0800155f 	.word	0x0800155f
 80014e8:	08001539 	.word	0x08001539
 80014ec:	0800154b 	.word	0x0800154b
 80014f0:	0800158d 	.word	0x0800158d
 80014f4:	08001593 	.word	0x08001593
 80014f8:	08001593 	.word	0x08001593
 80014fc:	08001593 	.word	0x08001593
 8001500:	08001593 	.word	0x08001593
 8001504:	08001593 	.word	0x08001593
 8001508:	08001593 	.word	0x08001593
 800150c:	08001593 	.word	0x08001593
 8001510:	08001593 	.word	0x08001593
 8001514:	08001593 	.word	0x08001593
 8001518:	08001593 	.word	0x08001593
 800151c:	08001593 	.word	0x08001593
 8001520:	08001593 	.word	0x08001593
 8001524:	08001593 	.word	0x08001593
 8001528:	08001541 	.word	0x08001541
 800152c:	08001555 	.word	0x08001555
 8001530:	4a79      	ldr	r2, [pc, #484]	; (8001718 <HAL_GPIO_Init+0x2b4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001536:	e02c      	b.n	8001592 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e029      	b.n	8001594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	3304      	adds	r3, #4
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e024      	b.n	8001594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	3308      	adds	r3, #8
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e01f      	b.n	8001594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	330c      	adds	r3, #12
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e01a      	b.n	8001594 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001566:	2304      	movs	r3, #4
 8001568:	623b      	str	r3, [r7, #32]
          break;
 800156a:	e013      	b.n	8001594 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d105      	bne.n	8001580 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001574:	2308      	movs	r3, #8
 8001576:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	611a      	str	r2, [r3, #16]
          break;
 800157e:	e009      	b.n	8001594 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001580:	2308      	movs	r3, #8
 8001582:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	615a      	str	r2, [r3, #20]
          break;
 800158a:	e003      	b.n	8001594 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x130>
          break;
 8001592:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2bff      	cmp	r3, #255	; 0xff
 8001598:	d801      	bhi.n	800159e <HAL_GPIO_Init+0x13a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_Init+0x13e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3304      	adds	r3, #4
 80015a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2bff      	cmp	r3, #255	; 0xff
 80015a8:	d802      	bhi.n	80015b0 <HAL_GPIO_Init+0x14c>
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	e002      	b.n	80015b6 <HAL_GPIO_Init+0x152>
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	3b08      	subs	r3, #8
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	210f      	movs	r1, #15
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	401a      	ands	r2, r3
 80015c8:	6a39      	ldr	r1, [r7, #32]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80b1 	beq.w	8001746 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a4c      	ldr	r2, [pc, #304]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b4a      	ldr	r3, [pc, #296]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015fc:	4a48      	ldr	r2, [pc, #288]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001608:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a40      	ldr	r2, [pc, #256]	; (8001724 <HAL_GPIO_Init+0x2c0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_GPIO_Init+0x1ec>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a3f      	ldr	r2, [pc, #252]	; (8001728 <HAL_GPIO_Init+0x2c4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00d      	beq.n	800164c <HAL_GPIO_Init+0x1e8>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a3e      	ldr	r2, [pc, #248]	; (800172c <HAL_GPIO_Init+0x2c8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x1e4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3d      	ldr	r2, [pc, #244]	; (8001730 <HAL_GPIO_Init+0x2cc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_GPIO_Init+0x1e0>
 8001640:	2303      	movs	r3, #3
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001644:	2304      	movs	r3, #4
 8001646:	e004      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001648:	2302      	movs	r3, #2
 800164a:	e002      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001650:	2300      	movs	r3, #0
 8001652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4093      	lsls	r3, r2
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001662:	492f      	ldr	r1, [pc, #188]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	492c      	ldr	r1, [pc, #176]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	4928      	ldr	r1, [pc, #160]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001694:	4013      	ands	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4922      	ldr	r1, [pc, #136]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	491e      	ldr	r1, [pc, #120]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	4918      	ldr	r1, [pc, #96]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4914      	ldr	r1, [pc, #80]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d021      	beq.n	8001738 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
 8001700:	e021      	b.n	8001746 <HAL_GPIO_Init+0x2e2>
 8001702:	bf00      	nop
 8001704:	10320000 	.word	0x10320000
 8001708:	10310000 	.word	0x10310000
 800170c:	10220000 	.word	0x10220000
 8001710:	10210000 	.word	0x10210000
 8001714:	10120000 	.word	0x10120000
 8001718:	10110000 	.word	0x10110000
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	40010800 	.word	0x40010800
 8001728:	40010c00 	.word	0x40010c00
 800172c:	40011000 	.word	0x40011000
 8001730:	40011400 	.word	0x40011400
 8001734:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_GPIO_Init+0x304>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4909      	ldr	r1, [pc, #36]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001742:	4013      	ands	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	3301      	adds	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	f47f ae8e 	bne.w	8001478 <HAL_GPIO_Init+0x14>
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	372c      	adds	r7, #44	; 0x2c
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f94e 	bl	8000a5c <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e272      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8087 	beq.w	80018fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ec:	4b92      	ldr	r3, [pc, #584]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d00c      	beq.n	8001812 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f8:	4b8f      	ldr	r3, [pc, #572]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d112      	bne.n	800182a <HAL_RCC_OscConfig+0x5e>
 8001804:	4b8c      	ldr	r3, [pc, #560]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d10b      	bne.n	800182a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001812:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d06c      	beq.n	80018f8 <HAL_RCC_OscConfig+0x12c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d168      	bne.n	80018f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e24c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x76>
 8001834:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a7f      	ldr	r2, [pc, #508]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800183a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e02e      	b.n	80018a0 <HAL_RCC_OscConfig+0xd4>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x98>
 800184a:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a7a      	ldr	r2, [pc, #488]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a77      	ldr	r2, [pc, #476]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800185c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e01d      	b.n	80018a0 <HAL_RCC_OscConfig+0xd4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0xbc>
 800186e:	4b72      	ldr	r3, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a71      	ldr	r2, [pc, #452]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a6e      	ldr	r2, [pc, #440]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0xd4>
 8001888:	4b6b      	ldr	r3, [pc, #428]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a6a      	ldr	r2, [pc, #424]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b68      	ldr	r3, [pc, #416]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a67      	ldr	r2, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fca0 	bl	80011ec <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fc9c 	bl	80011ec <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e200      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0xe4>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc8c 	bl	80011ec <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fc88 	bl	80011ec <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1ec      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x10c>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d063      	beq.n	80019ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001906:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b08      	cmp	r3, #8
 800191c:	d11c      	bne.n	8001958 <HAL_RCC_OscConfig+0x18c>
 800191e:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d116      	bne.n	8001958 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <HAL_RCC_OscConfig+0x176>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e1c0      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4939      	ldr	r1, [pc, #228]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	e03a      	b.n	80019ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fc41 	bl	80011ec <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff fc3d 	bl	80011ec <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1a1      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4927      	ldr	r1, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCC_OscConfig+0x270>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fc20 	bl	80011ec <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b0:	f7ff fc1c 	bl	80011ec <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e180      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d03a      	beq.n	8001a50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d019      	beq.n	8001a16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_RCC_OscConfig+0x274>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7ff fc00 	bl	80011ec <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff fbfc 	bl	80011ec <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e160      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f000 fad8 	bl	8001fc4 <RCC_Delay>
 8001a14:	e01c      	b.n	8001a50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_OscConfig+0x274>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fbe6 	bl	80011ec <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a22:	e00f      	b.n	8001a44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fbe2 	bl	80011ec <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d908      	bls.n	8001a44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e146      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	42420000 	.word	0x42420000
 8001a40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e9      	bne.n	8001a24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a6 	beq.w	8001baa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b8b      	ldr	r3, [pc, #556]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10d      	bne.n	8001a8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a87      	ldr	r2, [pc, #540]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	4b85      	ldr	r3, [pc, #532]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8a:	4b82      	ldr	r3, [pc, #520]	; (8001c94 <HAL_RCC_OscConfig+0x4c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a96:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <HAL_RCC_OscConfig+0x4c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7e      	ldr	r2, [pc, #504]	; (8001c94 <HAL_RCC_OscConfig+0x4c8>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fba3 	bl	80011ec <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aaa:	f7ff fb9f 	bl	80011ec <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	; 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e103      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x4c8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x312>
 8001ad0:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a6e      	ldr	r2, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e02d      	b.n	8001b3a <HAL_RCC_OscConfig+0x36e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x334>
 8001ae6:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a69      	ldr	r2, [pc, #420]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4a66      	ldr	r2, [pc, #408]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6213      	str	r3, [r2, #32]
 8001afe:	e01c      	b.n	8001b3a <HAL_RCC_OscConfig+0x36e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x356>
 8001b08:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a60      	ldr	r2, [pc, #384]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	4b5e      	ldr	r3, [pc, #376]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a5d      	ldr	r2, [pc, #372]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x36e>
 8001b22:	4b5b      	ldr	r3, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a5a      	ldr	r2, [pc, #360]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	4b58      	ldr	r3, [pc, #352]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d015      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fb53 	bl	80011ec <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fb4f 	bl	80011ec <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0b1      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ee      	beq.n	8001b4a <HAL_RCC_OscConfig+0x37e>
 8001b6c:	e014      	b.n	8001b98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fb3d 	bl	80011ec <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff fb39 	bl	80011ec <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e09b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ee      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d105      	bne.n	8001baa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a3b      	ldr	r2, [pc, #236]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8087 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d061      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d146      	bne.n	8001c56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_RCC_OscConfig+0x4cc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fb0d 	bl	80011ec <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff fb09 	bl	80011ec <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e06d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4921      	ldr	r1, [pc, #132]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a19      	ldr	r1, [r3, #32]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	430b      	orrs	r3, r1
 8001c22:	491b      	ldr	r1, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x4cc>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fadd 	bl	80011ec <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff fad9 	bl	80011ec <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e03d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x46a>
 8001c54:	e035      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x4cc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fac6 	bl	80011ec <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff fac2 	bl	80011ec <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e026      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x498>
 8001c82:	e01e      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e019      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40007000 	.word	0x40007000
 8001c98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_OscConfig+0x500>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0d0      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d910      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	4965      	ldr	r1, [pc, #404]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b8      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a58      	ldr	r2, [pc, #352]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	494d      	ldr	r1, [pc, #308]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d040      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d115      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e073      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06b      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4936      	ldr	r1, [pc, #216]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff fa14 	bl	80011ec <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff fa10 	bl	80011ec <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e053      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d210      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4922      	ldr	r1, [pc, #136]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e032      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4916      	ldr	r1, [pc, #88]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	490e      	ldr	r1, [pc, #56]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e5e:	f000 f821 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	490a      	ldr	r1, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	5ccb      	ldrb	r3, [r1, r3]
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1cc>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_ClockConfig+0x1d0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f972 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	080053c0 	.word	0x080053c0
 8001e9c:	20000018 	.word	0x20000018
 8001ea0:	2000001c 	.word	0x2000001c

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b490      	push	{r4, r7}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xac>)
 8001eac:	1d3c      	adds	r4, r7, #4
 8001eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001eb4:	f240 2301 	movw	r3, #513	; 0x201
 8001eb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d002      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x46>
 8001ee2:	e02b      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ee6:	623b      	str	r3, [r7, #32]
      break;
 8001ee8:	e02b      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	0c9b      	lsrs	r3, r3, #18
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3328      	adds	r3, #40	; 0x28
 8001ef4:	443b      	add	r3, r7
 8001ef6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001efa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	0c5b      	lsrs	r3, r3, #17
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	3328      	adds	r3, #40	; 0x28
 8001f12:	443b      	add	r3, r7
 8001f14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f1e:	fb03 f202 	mul.w	r2, r3, r2
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2a:	e004      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	623b      	str	r3, [r7, #32]
      break;
 8001f3a:	e002      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f3e:	623b      	str	r3, [r7, #32]
      break;
 8001f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc90      	pop	{r4, r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	080053b0 	.word	0x080053b0
 8001f54:	40021000 	.word	0x40021000
 8001f58:	007a1200 	.word	0x007a1200
 8001f5c:	003d0900 	.word	0x003d0900

08001f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000018 	.word	0x20000018

08001f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f78:	f7ff fff2 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	080053d0 	.word	0x080053d0

08001f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fa0:	f7ff ffde 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	0adb      	lsrs	r3, r3, #11
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	080053d0 	.word	0x080053d0

08001fc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <RCC_Delay+0x34>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <RCC_Delay+0x38>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0a5b      	lsrs	r3, r3, #9
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fe0:	bf00      	nop
  }
  while (Delay --);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1e5a      	subs	r2, r3, #1
 8001fe6:	60fa      	str	r2, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f9      	bne.n	8001fe0 <RCC_Delay+0x1c>
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	20000018 	.word	0x20000018
 8001ffc:	10624dd3 	.word	0x10624dd3

08002000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e076      	b.n	8002100 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2b00      	cmp	r3, #0
 8002018:	d108      	bne.n	800202c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002022:	d009      	beq.n	8002038 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
 800202a:	e005      	b.n	8002038 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fd4c 	bl	8000af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800206e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020bc:	ea42 0103 	orr.w	r1, r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	0c1a      	lsrs	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f002 0204 	and.w	r2, r2, #4
 80020de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_SPI_Transmit+0x22>
 8002126:	2302      	movs	r3, #2
 8002128:	e126      	b.n	8002378 <HAL_SPI_Transmit+0x270>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002132:	f7ff f85b 	bl	80011ec <HAL_GetTick>
 8002136:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d002      	beq.n	800214e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002148:	2302      	movs	r3, #2
 800214a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800214c:	e10b      	b.n	8002366 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_SPI_Transmit+0x52>
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800215e:	e102      	b.n	8002366 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2203      	movs	r2, #3
 8002164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a6:	d10f      	bne.n	80021c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d007      	beq.n	80021e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ee:	d14b      	bne.n	8002288 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_SPI_Transmit+0xf6>
 80021f8:	8afb      	ldrh	r3, [r7, #22]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d13e      	bne.n	800227c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	1c9a      	adds	r2, r3, #2
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002222:	e02b      	b.n	800227c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b02      	cmp	r3, #2
 8002230:	d112      	bne.n	8002258 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	1c9a      	adds	r2, r3, #2
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	86da      	strh	r2, [r3, #54]	; 0x36
 8002256:	e011      	b.n	800227c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002258:	f7fe ffc8 	bl	80011ec <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d803      	bhi.n	8002270 <HAL_SPI_Transmit+0x168>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d102      	bne.n	8002276 <HAL_SPI_Transmit+0x16e>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	77fb      	strb	r3, [r7, #31]
          goto error;
 800227a:	e074      	b.n	8002366 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1ce      	bne.n	8002224 <HAL_SPI_Transmit+0x11c>
 8002286:	e04c      	b.n	8002322 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_SPI_Transmit+0x18e>
 8002290:	8afb      	ldrh	r3, [r7, #22]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d140      	bne.n	8002318 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	330c      	adds	r3, #12
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022bc:	e02c      	b.n	8002318 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d113      	bne.n	80022f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80022f2:	e011      	b.n	8002318 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f4:	f7fe ff7a 	bl	80011ec <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d803      	bhi.n	800230c <HAL_SPI_Transmit+0x204>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d102      	bne.n	8002312 <HAL_SPI_Transmit+0x20a>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002316:	e026      	b.n	8002366 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1cd      	bne.n	80022be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f8b2 	bl	8002490 <SPI_EndRxTxTransaction>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	77fb      	strb	r3, [r7, #31]
 8002362:	e000      	b.n	8002366 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002364:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002376:	7ffb      	ldrb	r3, [r7, #31]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002390:	f7fe ff2c 	bl	80011ec <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4413      	add	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023a0:	f7fe ff24 	bl	80011ec <HAL_GetTick>
 80023a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	015b      	lsls	r3, r3, #5
 80023ac:	0d1b      	lsrs	r3, r3, #20
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023b6:	e054      	b.n	8002462 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d050      	beq.n	8002462 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023c0:	f7fe ff14 	bl	80011ec <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d902      	bls.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d13d      	bne.n	8002452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ee:	d111      	bne.n	8002414 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f8:	d004      	beq.n	8002404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002402:	d107      	bne.n	8002414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241c:	d10f      	bne.n	800243e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e017      	b.n	8002482 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3b01      	subs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	429a      	cmp	r2, r3
 800247e:	d19b      	bne.n	80023b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000018 	.word	0x20000018

08002490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff ff6a 	bl	8002380 <SPI_WaitFlagStateUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	f043 0220 	orr.w	r2, r3, #32
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e000      	b.n	80024c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e041      	b.n	8002562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fb3a 	bl	8000b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f000 fa70 	bl	80029f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d001      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e03a      	b.n	80025fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_TIM_Base_Start_IT+0x98>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00e      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x58>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ae:	d009      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x58>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <HAL_TIM_Base_Start_IT+0x9c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x58>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a13      	ldr	r2, [pc, #76]	; (800260c <HAL_TIM_Base_Start_IT+0xa0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d111      	bne.n	80025e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d010      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e6:	e007      	b.n	80025f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400
 800260c:	40000800 	.word	0x40000800

08002610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d122      	bne.n	800266c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b02      	cmp	r3, #2
 8002632:	d11b      	bne.n	800266c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0202 	mvn.w	r2, #2
 800263c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9b1 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
 8002658:	e005      	b.n	8002666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f9a4 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f9b3 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d122      	bne.n	80026c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d11b      	bne.n	80026c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0204 	mvn.w	r2, #4
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f987 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f97a 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f989 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0208 	mvn.w	r2, #8
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2204      	movs	r2, #4
 80026ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f95d 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f950 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f95f 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b10      	cmp	r3, #16
 8002720:	d122      	bne.n	8002768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b10      	cmp	r3, #16
 800272e:	d11b      	bne.n	8002768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0210 	mvn.w	r2, #16
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2208      	movs	r2, #8
 800273e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f933 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
 8002754:	e005      	b.n	8002762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f926 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f935 	bl	80029cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0201 	mvn.w	r2, #1
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe f94e 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b80      	cmp	r3, #128	; 0x80
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d107      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fa77 	bl	8002cae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d10e      	bne.n	80027ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d107      	bne.n	80027ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8f9 	bl	80029de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b20      	cmp	r3, #32
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0220 	mvn.w	r2, #32
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa42 	bl	8002c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_TIM_ConfigClockSource+0x18>
 8002834:	2302      	movs	r3, #2
 8002836:	e0b3      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x180>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002870:	d03e      	beq.n	80028f0 <HAL_TIM_ConfigClockSource+0xd0>
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002876:	f200 8087 	bhi.w	8002988 <HAL_TIM_ConfigClockSource+0x168>
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	f000 8085 	beq.w	800298c <HAL_TIM_ConfigClockSource+0x16c>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002886:	d87f      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x168>
 8002888:	2b70      	cmp	r3, #112	; 0x70
 800288a:	d01a      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xa2>
 800288c:	2b70      	cmp	r3, #112	; 0x70
 800288e:	d87b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x168>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d050      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x116>
 8002894:	2b60      	cmp	r3, #96	; 0x60
 8002896:	d877      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x168>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d03c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0xf6>
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d873      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x168>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d058      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x136>
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d86f      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x168>
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	d064      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x156>
 80028ac:	2b30      	cmp	r3, #48	; 0x30
 80028ae:	d86b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x168>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d060      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x156>
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d867      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x168>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05c      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x156>
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d05a      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028c0:	e062      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f000 f966 	bl	8002ba2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	609a      	str	r2, [r3, #8]
      break;
 80028ee:	e04e      	b.n	800298e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f000 f94f 	bl	8002ba2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002912:	609a      	str	r2, [r3, #8]
      break;
 8002914:	e03b      	b.n	800298e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	461a      	mov	r2, r3
 8002924:	f000 f8c6 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2150      	movs	r1, #80	; 0x50
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f91d 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002934:	e02b      	b.n	800298e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 f8e4 	bl	8002b10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2160      	movs	r1, #96	; 0x60
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f90d 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002954:	e01b      	b.n	800298e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f000 f8a6 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2140      	movs	r1, #64	; 0x40
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f8fd 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002974:	e00b      	b.n	800298e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f000 f8f4 	bl	8002b6e <TIM_ITRx_SetConfig>
        break;
 8002986:	e002      	b.n	800298e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800298c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <TIM_Base_SetConfig+0xb8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00b      	beq.n	8002a20 <TIM_Base_SetConfig+0x30>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d007      	beq.n	8002a20 <TIM_Base_SetConfig+0x30>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <TIM_Base_SetConfig+0xbc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d003      	beq.n	8002a20 <TIM_Base_SetConfig+0x30>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a25      	ldr	r2, [pc, #148]	; (8002ab0 <TIM_Base_SetConfig+0xc0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d108      	bne.n	8002a32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <TIM_Base_SetConfig+0xb8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00b      	beq.n	8002a52 <TIM_Base_SetConfig+0x62>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d007      	beq.n	8002a52 <TIM_Base_SetConfig+0x62>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <TIM_Base_SetConfig+0xbc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d003      	beq.n	8002a52 <TIM_Base_SetConfig+0x62>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <TIM_Base_SetConfig+0xc0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d108      	bne.n	8002a64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <TIM_Base_SetConfig+0xb8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d103      	bne.n	8002a98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	615a      	str	r2, [r3, #20]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800

08002ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f023 0201 	bic.w	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f023 030a 	bic.w	r3, r3, #10
 8002af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	621a      	str	r2, [r3, #32]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f023 0210 	bic.w	r2, r3, #16
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	031b      	lsls	r3, r3, #12
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	621a      	str	r2, [r3, #32]
}
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f043 0307 	orr.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	021a      	lsls	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	609a      	str	r2, [r3, #8]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e046      	b.n	8002c86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d009      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10c      	bne.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800

08002c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e03f      	b.n	8002d52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd ff5c 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f905 	bl	8002f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
 8002d5e:	af02      	add	r7, sp, #8
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d17c      	bne.n	8002e74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_UART_Transmit+0x2c>
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e075      	b.n	8002e76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_UART_Transmit+0x3e>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e06e      	b.n	8002e76 <HAL_UART_Transmit+0x11c>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2221      	movs	r2, #33	; 0x21
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dae:	f7fe fa1d 	bl	80011ec <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc8:	d108      	bne.n	8002ddc <HAL_UART_Transmit+0x82>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d104      	bne.n	8002ddc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e003      	b.n	8002de4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dec:	e02a      	b.n	8002e44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f840 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e036      	b.n	8002e76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	3302      	adds	r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	e007      	b.n	8002e36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	3301      	adds	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1cf      	bne.n	8002dee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2140      	movs	r1, #64	; 0x40
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f810 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e006      	b.n	8002e76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8e:	e02c      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d028      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <UART_WaitOnFlagUntilTimeout+0x30>
 8002e9e:	f7fe f9a5 	bl	80011ec <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d21d      	bcs.n	8002eea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ebc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e00f      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d0c3      	beq.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f4e:	f023 030c 	bic.w	r3, r3, #12
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <UART_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d103      	bne.n	8002f84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7ff f80e 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	e002      	b.n	8002f8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f84:	f7fe fff6 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8002f88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009a      	lsls	r2, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <UART_SetConfig+0x118>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	0119      	lsls	r1, r3, #4
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <UART_SetConfig+0x118>)
 8002fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2064      	movs	r0, #100	; 0x64
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	; 0x32
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <UART_SetConfig+0x118>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe0:	4419      	add	r1, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009a      	lsls	r2, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <UART_SetConfig+0x118>)
 8002ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2064      	movs	r0, #100	; 0x64
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	3332      	adds	r3, #50	; 0x32
 800300c:	4a07      	ldr	r2, [pc, #28]	; (800302c <UART_SetConfig+0x118>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	f003 020f 	and.w	r2, r3, #15
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	440a      	add	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40013800 	.word	0x40013800
 800302c:	51eb851f 	.word	0x51eb851f

08003030 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	7c1b      	ldrb	r3, [r3, #16]
 800303e:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fcd6 	bl	8004a10 <memset>
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af02      	add	r7, sp, #8
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
 8003078:	4613      	mov	r3, r2
 800307a:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	7c1b      	ldrb	r3, [r3, #16]
 8003082:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	b29b      	uxth	r3, r3
 8003092:	89ba      	ldrh	r2, [r7, #12]
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800309a:	89bb      	ldrh	r3, [r7, #12]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80030a0:	89bb      	ldrh	r3, [r7, #12]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4413      	add	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80030a8:	7bf9      	ldrb	r1, [r7, #15]
 80030aa:	78ba      	ldrb	r2, [r7, #2]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	460b      	mov	r3, r1
 80030b2:	2100      	movs	r1, #0
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f001 fbb3 	bl	8004820 <u8x8_DrawTile>
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d4:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030dc:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	7c5b      	ldrb	r3, [r3, #17]
 80030e4:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80030e6:	7bba      	ldrb	r2, [r7, #14]
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ffbd 	bl	800306c <u8g2_send_tile_row>
    src_row++;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3301      	adds	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80030f8:	7bbb      	ldrb	r3, [r7, #14]
 80030fa:	3301      	adds	r3, #1
 80030fc:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	7b7b      	ldrb	r3, [r7, #13]
 8003102:	429a      	cmp	r2, r3
 8003104:	d203      	bcs.n	800310e <u8g2_send_buffer+0x4c>
 8003106:	7bba      	ldrb	r2, [r7, #14]
 8003108:	7b3b      	ldrb	r3, [r7, #12]
 800310a:	429a      	cmp	r2, r3
 800310c:	d3eb      	bcc.n	80030e6 <u8g2_send_buffer+0x24>
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff69 	bl	8003030 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800315e:	2100      	movs	r1, #0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ffd8 	bl	8003116 <u8g2_SetBufferCurrTileRow>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ffa3 	bl	80030c2 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003182:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	4413      	add	r3, r2
 800318e:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	7c5b      	ldrb	r3, [r3, #17]
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	429a      	cmp	r2, r3
 800319a:	d304      	bcc.n	80031a6 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f001 fb90 	bl	80048c2 <u8x8_RefreshDisplay>
    return 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e00d      	b.n	80031c2 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ff3d 	bl	8003030 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ffab 	bl	8003116 <u8g2_SetBufferCurrTileRow>
  return 1;
 80031c0:	2301      	movs	r3, #1
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2208      	movs	r2, #8
 80031d8:	701a      	strb	r2, [r3, #0]
  return buf;
 80031da:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	200002e0 	.word	0x200002e0

080031ec <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8003202:	490c      	ldr	r1, [pc, #48]	; (8003234 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f001 fbbb 	bl	8004980 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800320a:	f107 0313 	add.w	r3, r7, #19
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ffdc 	bl	80031cc <u8g2_m_16_8_f>
 8003214:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003216:	7cfa      	ldrb	r2, [r7, #19]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800321e:	6979      	ldr	r1, [r7, #20]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 feac 	bl	8003f7e <u8g2_SetupBuffer>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	08004545 	.word	0x08004545
 8003234:	0800471d 	.word	0x0800471d
 8003238:	08003e03 	.word	0x08003e03

0800323c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	781b      	ldrb	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	81fb      	strh	r3, [r7, #14]
    font++;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3301      	adds	r3, #1
 800327c:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800327e:	89fb      	ldrh	r3, [r7, #14]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b29a      	uxth	r2, r3
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	4413      	add	r3, r2
 800328e:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003290:	89fb      	ldrh	r3, [r7, #14]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80032a6:	2100      	movs	r1, #0
 80032a8:	6838      	ldr	r0, [r7, #0]
 80032aa:	f7ff ffc7 	bl	800323c <u8g2_font_get_byte>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461a      	mov	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80032b6:	2101      	movs	r1, #1
 80032b8:	6838      	ldr	r0, [r7, #0]
 80032ba:	f7ff ffbf 	bl	800323c <u8g2_font_get_byte>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80032c6:	2102      	movs	r1, #2
 80032c8:	6838      	ldr	r0, [r7, #0]
 80032ca:	f7ff ffb7 	bl	800323c <u8g2_font_get_byte>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80032d6:	2103      	movs	r1, #3
 80032d8:	6838      	ldr	r0, [r7, #0]
 80032da:	f7ff ffaf 	bl	800323c <u8g2_font_get_byte>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80032e6:	2104      	movs	r1, #4
 80032e8:	6838      	ldr	r0, [r7, #0]
 80032ea:	f7ff ffa7 	bl	800323c <u8g2_font_get_byte>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80032f6:	2105      	movs	r1, #5
 80032f8:	6838      	ldr	r0, [r7, #0]
 80032fa:	f7ff ff9f 	bl	800323c <u8g2_font_get_byte>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003306:	2106      	movs	r1, #6
 8003308:	6838      	ldr	r0, [r7, #0]
 800330a:	f7ff ff97 	bl	800323c <u8g2_font_get_byte>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003316:	2107      	movs	r1, #7
 8003318:	6838      	ldr	r0, [r7, #0]
 800331a:	f7ff ff8f 	bl	800323c <u8g2_font_get_byte>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003326:	2108      	movs	r1, #8
 8003328:	6838      	ldr	r0, [r7, #0]
 800332a:	f7ff ff87 	bl	800323c <u8g2_font_get_byte>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003336:	2109      	movs	r1, #9
 8003338:	6838      	ldr	r0, [r7, #0]
 800333a:	f7ff ff7f 	bl	800323c <u8g2_font_get_byte>
 800333e:	4603      	mov	r3, r0
 8003340:	b25a      	sxtb	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003346:	210a      	movs	r1, #10
 8003348:	6838      	ldr	r0, [r7, #0]
 800334a:	f7ff ff77 	bl	800323c <u8g2_font_get_byte>
 800334e:	4603      	mov	r3, r0
 8003350:	b25a      	sxtb	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003356:	210b      	movs	r1, #11
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f7ff ff6f 	bl	800323c <u8g2_font_get_byte>
 800335e:	4603      	mov	r3, r0
 8003360:	b25a      	sxtb	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003366:	210c      	movs	r1, #12
 8003368:	6838      	ldr	r0, [r7, #0]
 800336a:	f7ff ff67 	bl	800323c <u8g2_font_get_byte>
 800336e:	4603      	mov	r3, r0
 8003370:	b25a      	sxtb	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003376:	210d      	movs	r1, #13
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	f7ff ff5f 	bl	800323c <u8g2_font_get_byte>
 800337e:	4603      	mov	r3, r0
 8003380:	b25a      	sxtb	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003386:	210e      	movs	r1, #14
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	f7ff ff57 	bl	800323c <u8g2_font_get_byte>
 800338e:	4603      	mov	r3, r0
 8003390:	b25a      	sxtb	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003396:	210f      	movs	r1, #15
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	f7ff ff4f 	bl	800323c <u8g2_font_get_byte>
 800339e:	4603      	mov	r3, r0
 80033a0:	b25a      	sxtb	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80033a6:	2110      	movs	r1, #16
 80033a8:	6838      	ldr	r0, [r7, #0]
 80033aa:	f7ff ff47 	bl	800323c <u8g2_font_get_byte>
 80033ae:	4603      	mov	r3, r0
 80033b0:	b25a      	sxtb	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80033b6:	2111      	movs	r1, #17
 80033b8:	6838      	ldr	r0, [r7, #0]
 80033ba:	f7ff ff50 	bl	800325e <u8g2_font_get_word>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80033c6:	2113      	movs	r1, #19
 80033c8:	6838      	ldr	r0, [r7, #0]
 80033ca:	f7ff ff48 	bl	800325e <u8g2_font_get_word>
 80033ce:	4603      	mov	r3, r0
 80033d0:	461a      	mov	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80033d6:	2115      	movs	r1, #21
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	f7ff ff40 	bl	800325e <u8g2_font_get_word>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	82da      	strh	r2, [r3, #22]
#endif
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	7b1b      	ldrb	r3, [r3, #12]
 80033fe:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	fa42 f303 	asr.w	r3, r2, r3
 8003410:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003412:	7b7b      	ldrb	r3, [r7, #13]
 8003414:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003416:	7bba      	ldrb	r2, [r7, #14]
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	4413      	add	r3, r2
 800341c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	2b07      	cmp	r3, #7
 8003422:	d91a      	bls.n	800345a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003424:	2308      	movs	r3, #8
 8003426:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003428:	7b3a      	ldrb	r2, [r7, #12]
 800342a:	7b7b      	ldrb	r3, [r7, #13]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	7b3b      	ldrb	r3, [r7, #12]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	b25a      	sxtb	r2, r3
 800344a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344e:	4313      	orrs	r3, r2
 8003450:	b25b      	sxtb	r3, r3
 8003452:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	3b08      	subs	r3, #8
 8003458:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	b2da      	uxtb	r2, r3
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	4013      	ands	r3, r2
 800346e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7bba      	ldrb	r2, [r7, #14]
 8003474:	731a      	strb	r2, [r3, #12]
  return val;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ffab 	bl	80033ee <u8g2_font_decode_get_unsigned_bits>
 8003498:	4603      	mov	r3, r0
 800349a:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800349c:	2301      	movs	r3, #1
 800349e:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80034a6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	7bbb      	ldrb	r3, [r7, #14]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	73fb      	strb	r3, [r7, #15]
  return v;
 80034bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <u8g2_font_2x_decode_len>:
  decode->y = ly;  
}


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]
 80034d4:	4613      	mov	r3, r2
 80034d6:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3360      	adds	r3, #96	; 0x60
 80034dc:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80034e8:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80034f0:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80034f8:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	7d7b      	ldrb	r3, [r7, #21]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003506:	7dfa      	ldrb	r2, [r7, #23]
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	429a      	cmp	r2, r3
 800350c:	d201      	bcs.n	8003512 <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	889b      	ldrh	r3, [r3, #4]
 8003516:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	88db      	ldrh	r3, [r3, #6]
 800351c:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 800351e:	7d7b      	ldrb	r3, [r7, #21]
 8003520:	b29b      	uxth	r3, r3
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	89bb      	ldrh	r3, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 800352c:	7d3b      	ldrb	r3, [r7, #20]
 800352e:	b29b      	uxth	r3, r3
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	897b      	ldrh	r3, [r7, #10]
 8003536:	4413      	add	r3, r2
 8003538:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800353a:	78bb      	ldrb	r3, [r7, #2]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01d      	beq.n	800357c <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	7b9a      	ldrb	r2, [r3, #14]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800354a:	7dbb      	ldrb	r3, [r7, #22]
 800354c:	b29b      	uxth	r3, r3
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	897a      	ldrh	r2, [r7, #10]
 8003554:	89b9      	ldrh	r1, [r7, #12]
 8003556:	2000      	movs	r0, #0
 8003558:	9000      	str	r0, [sp, #0]
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fb68 	bl	8003c30 <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 8003560:	897b      	ldrh	r3, [r7, #10]
 8003562:	3301      	adds	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	7dbb      	ldrb	r3, [r7, #22]
 8003568:	b29b      	uxth	r3, r3
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	89b9      	ldrh	r1, [r7, #12]
 8003570:	2000      	movs	r0, #0
 8003572:	9000      	str	r0, [sp, #0]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fb5b 	bl	8003c30 <u8g2_DrawHVLine>
 800357a:	e020      	b.n	80035be <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	7b5b      	ldrb	r3, [r3, #13]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11c      	bne.n	80035be <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	7bda      	ldrb	r2, [r3, #15]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800358e:	7dbb      	ldrb	r3, [r7, #22]
 8003590:	b29b      	uxth	r3, r3
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	b29b      	uxth	r3, r3
 8003596:	897a      	ldrh	r2, [r7, #10]
 8003598:	89b9      	ldrh	r1, [r7, #12]
 800359a:	2000      	movs	r0, #0
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fb46 	bl	8003c30 <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	3301      	adds	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	7dbb      	ldrb	r3, [r7, #22]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	89b9      	ldrh	r1, [r7, #12]
 80035b4:	2000      	movs	r0, #0
 80035b6:	9000      	str	r0, [sp, #0]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fb39 	bl	8003c30 <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80035be:	7dfa      	ldrb	r2, [r7, #23]
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d309      	bcc.n	80035da <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 80035c6:	7dfa      	ldrb	r2, [r7, #23]
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	757b      	strb	r3, [r7, #21]
    ly++;
 80035d2:	7d3b      	ldrb	r3, [r7, #20]
 80035d4:	3301      	adds	r3, #1
 80035d6:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80035d8:	e78b      	b.n	80034f2 <u8g2_font_2x_decode_len+0x2a>
      break;
 80035da:	bf00      	nop
  }
  lx += cnt;
 80035dc:	7d7a      	ldrb	r2, [r7, #21]
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	4413      	add	r3, r2
 80035e2:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80035e4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80035ec:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	725a      	strb	r2, [r3, #9]
  
}
 80035f4:	bf00      	nop
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3360      	adds	r3, #96	; 0x60
 800360a:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800361e:	4619      	mov	r1, r3
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fee4 	bl	80033ee <u8g2_font_decode_get_unsigned_bits>
 8003626:	4603      	mov	r3, r0
 8003628:	b25a      	sxtb	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003634:	4619      	mov	r1, r3
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7ff fed9 	bl	80033ee <u8g2_font_decode_get_unsigned_bits>
 800363c:	4603      	mov	r3, r0
 800363e:	b25a      	sxtb	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	7b9b      	ldrb	r3, [r3, #14]
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	73da      	strb	r2, [r3, #15]
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <u8g2_font_2x_decode_glyph>:
  return d;
}


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b08a      	sub	sp, #40	; 0x28
 800366e:	af02      	add	r7, sp, #8
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3360      	adds	r3, #96	; 0x60
 8003678:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ffbd 	bl	80035fc <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8003688:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003690:	4619      	mov	r1, r3
 8003692:	69f8      	ldr	r0, [r7, #28]
 8003694:	f7ff fef5 	bl	8003482 <u8g2_font_decode_get_signed_bits>
 8003698:	4603      	mov	r3, r0
 800369a:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80036a2:	4619      	mov	r1, r3
 80036a4:	69f8      	ldr	r0, [r7, #28]
 80036a6:	f7ff feec 	bl	8003482 <u8g2_font_decode_get_signed_bits>
 80036aa:	4603      	mov	r3, r0
 80036ac:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80036b4:	4619      	mov	r1, r3
 80036b6:	69f8      	ldr	r0, [r7, #28]
 80036b8:	f7ff fee3 	bl	8003482 <u8g2_font_decode_get_signed_bits>
 80036bc:	4603      	mov	r3, r0
 80036be:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	dd7b      	ble.n	80037c2 <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	889a      	ldrh	r2, [r3, #4]
 80036ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	88da      	ldrh	r2, [r3, #6]
 80036e0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	b299      	uxth	r1, r3
 80036ea:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	440b      	add	r3, r1
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	889b      	ldrh	r3, [r3, #4]
 8003700:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	88db      	ldrh	r3, [r3, #6]
 8003706:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 8003708:	8afb      	ldrh	r3, [r7, #22]
 800370a:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 800370c:	8abb      	ldrh	r3, [r7, #20]
 800370e:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003716:	b29b      	uxth	r3, r3
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	8a7b      	ldrh	r3, [r7, #18]
 800371e:	4413      	add	r3, r2
 8003720:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 8003722:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003726:	b29b      	uxth	r3, r3
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	8a3b      	ldrh	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003732:	8a78      	ldrh	r0, [r7, #18]
 8003734:	8aba      	ldrh	r2, [r7, #20]
 8003736:	8af9      	ldrh	r1, [r7, #22]
 8003738:	8a3b      	ldrh	r3, [r7, #16]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4603      	mov	r3, r0
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fb34 	bl	8003dac <u8g2_IsIntersection>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 800374a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800374e:	e03c      	b.n	80037ca <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2200      	movs	r2, #0
 8003754:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2200      	movs	r2, #0
 800375a:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003762:	4619      	mov	r1, r3
 8003764:	69f8      	ldr	r0, [r7, #28]
 8003766:	f7ff fe42 	bl	80033ee <u8g2_font_decode_get_unsigned_bits>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003774:	4619      	mov	r1, r3
 8003776:	69f8      	ldr	r0, [r7, #28]
 8003778:	f7ff fe39 	bl	80033ee <u8g2_font_decode_get_unsigned_bits>
 800377c:	4603      	mov	r3, r0
 800377e:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2200      	movs	r2, #0
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fe9e 	bl	80034c8 <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 800378c:	7bbb      	ldrb	r3, [r7, #14]
 800378e:	2201      	movs	r2, #1
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fe98 	bl	80034c8 <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003798:	2101      	movs	r1, #1
 800379a:	69f8      	ldr	r0, [r7, #28]
 800379c:	f7ff fe27 	bl	80033ee <u8g2_font_decode_get_unsigned_bits>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ec      	bne.n	8003780 <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80037ac:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	dd00      	ble.n	80037b6 <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80037b4:	e7d2      	b.n	800375c <u8g2_font_2x_decode_glyph+0xf2>
	break;
 80037b6:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	7b9a      	ldrb	r2, [r3, #14]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 80037c2:	7e3b      	ldrb	r3, [r7, #24]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	b25b      	sxtb	r3, r3
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b086      	sub	sp, #24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3317      	adds	r3, #23
 80037e8:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	2bff      	cmp	r3, #255	; 0xff
 80037ee:	d82a      	bhi.n	8003846 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	2b60      	cmp	r3, #96	; 0x60
 80037f4:	d907      	bls.n	8003806 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80037fc:	461a      	mov	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4413      	add	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e009      	b.n	800381a <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003806:	887b      	ldrh	r3, [r7, #2]
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d906      	bls.n	800381a <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003812:	461a      	mov	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4413      	add	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3301      	adds	r3, #1
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d04e      	beq.n	80038c2 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	429a      	cmp	r2, r3
 800382e:	d102      	bne.n	8003836 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3302      	adds	r3, #2
 8003834:	e049      	b.n	80038ca <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3301      	adds	r3, #1
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4413      	add	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003844:	e7e9      	b.n	800381a <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800384c:	461a      	mov	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4413      	add	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003858:	2100      	movs	r1, #0
 800385a:	6938      	ldr	r0, [r7, #16]
 800385c:	f7ff fcff 	bl	800325e <u8g2_font_get_word>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4413      	add	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800386a:	2102      	movs	r1, #2
 800386c:	6938      	ldr	r0, [r7, #16]
 800386e:	f7ff fcf6 	bl	800325e <u8g2_font_get_word>
 8003872:	4603      	mov	r3, r0
 8003874:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	3304      	adds	r3, #4
 800387a:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800387c:	89fa      	ldrh	r2, [r7, #14]
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	429a      	cmp	r2, r3
 8003882:	d3e9      	bcc.n	8003858 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800388a:	89fb      	ldrh	r3, [r7, #14]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3301      	adds	r3, #1
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	b29a      	uxth	r2, r3
 8003898:	89fb      	ldrh	r3, [r7, #14]
 800389a:	4313      	orrs	r3, r2
 800389c:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800389e:	89fb      	ldrh	r3, [r7, #14]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80038a4:	89fa      	ldrh	r2, [r7, #14]
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d102      	bne.n	80038b2 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3303      	adds	r3, #3
 80038b0:	e00b      	b.n	80038ca <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3302      	adds	r3, #2
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	4413      	add	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80038c0:	e7e0      	b.n	8003884 <u8g2_font_get_glyph_data+0xb2>
	break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <u8g2_font_get_glyph_data+0xf6>
	break;
 80038c6:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <u8g2_font_2x_draw_glyph>:
  }
  return dx;
}

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	4608      	mov	r0, r1
 80038dc:	4611      	mov	r1, r2
 80038de:	461a      	mov	r2, r3
 80038e0:	4603      	mov	r3, r0
 80038e2:	817b      	strh	r3, [r7, #10]
 80038e4:	460b      	mov	r3, r1
 80038e6:	813b      	strh	r3, [r7, #8]
 80038e8:	4613      	mov	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	897a      	ldrh	r2, [r7, #10]
 80038f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	893a      	ldrh	r2, [r7, #8]
 80038fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	4619      	mov	r1, r3
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ff64 	bl	80037d2 <u8g2_font_get_glyph_data>
 800390a:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 8003912:	6939      	ldr	r1, [r7, #16]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7ff fea8 	bl	800366a <u8g2_font_2x_decode_glyph>
 800391a:	4603      	mov	r3, r0
 800391c:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800391e:	8afb      	ldrh	r3, [r7, #22]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <u8g2_DrawGlyphX2>:
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	4608      	mov	r0, r1
 8003932:	4611      	mov	r1, r2
 8003934:	461a      	mov	r2, r3
 8003936:	4603      	mov	r3, r0
 8003938:	817b      	strh	r3, [r7, #10]
 800393a:	460b      	mov	r3, r1
 800393c:	813b      	strh	r3, [r7, #8]
 800393e:	4613      	mov	r3, r2
 8003940:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	4798      	blx	r3
 800394a:	4603      	mov	r3, r0
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	4413      	add	r3, r2
 8003954:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	893a      	ldrh	r2, [r7, #8]
 800395a:	8979      	ldrh	r1, [r7, #10]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff ffb8 	bl	80038d2 <u8g2_font_2x_draw_glyph>
 8003962:	4603      	mov	r3, r0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <u8g2_draw_string_2x>:
  return sum;
}

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	817b      	strh	r3, [r7, #10]
 800397a:	4613      	mov	r3, r2
 800397c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fcdd 	bl	800433e <u8x8_utf8_init>
  sum = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	7812      	ldrb	r2, [r2, #0]
 8003990:	4611      	mov	r1, r2
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	4798      	blx	r3
 8003996:	4603      	mov	r3, r0
 8003998:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800399a:	8abb      	ldrh	r3, [r7, #20]
 800399c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d018      	beq.n	80039d6 <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3301      	adds	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80039aa:	8abb      	ldrh	r3, [r7, #20]
 80039ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d0e9      	beq.n	8003988 <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 80039b4:	8abb      	ldrh	r3, [r7, #20]
 80039b6:	893a      	ldrh	r2, [r7, #8]
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f7ff ffb4 	bl	8003928 <u8g2_DrawGlyphX2>
 80039c0:	4603      	mov	r3, r0
 80039c2:	827b      	strh	r3, [r7, #18]
      x += delta;
 80039c4:	897a      	ldrh	r2, [r7, #10]
 80039c6:	8a7b      	ldrh	r3, [r7, #18]
 80039c8:	4413      	add	r3, r2
 80039ca:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 80039cc:	8afa      	ldrh	r2, [r7, #22]
 80039ce:	8a7b      	ldrh	r3, [r7, #18]
 80039d0:	4413      	add	r3, r2
 80039d2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80039d4:	e7d8      	b.n	8003988 <u8g2_draw_string_2x+0x1c>
      break;
 80039d6:	bf00      	nop
    }
  }
  return sum;
 80039d8:	8afb      	ldrh	r3, [r7, #22]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <u8g2_DrawStrX2>:
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_draw_string(u8g2, x, y, str);
}

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	4613      	mov	r3, r2
 80039f4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a06      	ldr	r2, [pc, #24]	; (8003a14 <u8g2_DrawStrX2+0x30>)
 80039fa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 80039fc:	893a      	ldrh	r2, [r7, #8]
 80039fe:	8979      	ldrh	r1, [r7, #10]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff ffb2 	bl	800396c <u8g2_draw_string_2x>
 8003a08:	4603      	mov	r3, r0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	08004359 	.word	0x08004359

08003a18 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05d      	beq.n	8003ae4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d04d      	beq.n	8003ae6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d11c      	bne.n	8003a8e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8003a60:	429a      	cmp	r2, r3
 8003a62:	da05      	bge.n	8003a70 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dd32      	ble.n	8003ae6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003a8c:	e02b      	b.n	8003ae6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003aa4:	440b      	add	r3, r1
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	da0d      	bge.n	8003ac6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	b25a      	sxtb	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	dd07      	ble.n	8003ae6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003ae2:	e000      	b.n	8003ae6 <u8g2_UpdateRefHeight+0xce>
    return;
 8003ae4:	bf00      	nop
  }  
}
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return 0;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
	...

08003b04 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <u8g2_SetFontPosBaseline+0x18>)
 8003b10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	08003aef 	.word	0x08003aef

08003b20 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d00b      	beq.n	8003b4c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3374      	adds	r3, #116	; 0x74
 8003b3e:	6839      	ldr	r1, [r7, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fbab 	bl	800329c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ff66 	bl	8003a18 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	460b      	mov	r3, r1
 8003b64:	80fb      	strh	r3, [r7, #6]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003b70:	8afb      	ldrh	r3, [r7, #22]
 8003b72:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	8abb      	ldrh	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003b7e:	8afa      	ldrh	r2, [r7, #22]
 8003b80:	8abb      	ldrh	r3, [r7, #20]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90b      	bls.n	8003b9e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003b86:	8afa      	ldrh	r2, [r7, #22]
 8003b88:	88bb      	ldrh	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d205      	bcs.n	8003b9a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003b8e:	88bb      	ldrh	r3, [r7, #4]
 8003b90:	82bb      	strh	r3, [r7, #20]
      b--;
 8003b92:	8abb      	ldrh	r3, [r7, #20]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	82bb      	strh	r3, [r7, #20]
 8003b98:	e001      	b.n	8003b9e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003b9e:	8afa      	ldrh	r2, [r7, #22]
 8003ba0:	88bb      	ldrh	r3, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d301      	bcc.n	8003baa <u8g2_clip_intersection2+0x56>
    return 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e01c      	b.n	8003be4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003baa:	8aba      	ldrh	r2, [r7, #20]
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d801      	bhi.n	8003bb6 <u8g2_clip_intersection2+0x62>
    return 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e016      	b.n	8003be4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8003bb6:	8afa      	ldrh	r2, [r7, #22]
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d201      	bcs.n	8003bc2 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8003bc2:	8aba      	ldrh	r2, [r7, #20]
 8003bc4:	88bb      	ldrh	r3, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d901      	bls.n	8003bce <u8g2_clip_intersection2+0x7a>
    b = d;
 8003bca:	88bb      	ldrh	r3, [r7, #4]
 8003bcc:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8afa      	ldrh	r2, [r7, #22]
 8003bd2:	801a      	strh	r2, [r3, #0]
  b -= a;
 8003bd4:	8aba      	ldrh	r2, [r7, #20]
 8003bd6:	8afb      	ldrh	r3, [r7, #22]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	8aba      	ldrh	r2, [r7, #20]
 8003be0:	801a      	strh	r2, [r3, #0]
  return 1;
 8003be2:	2301      	movs	r3, #1
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003bee:	b590      	push	{r4, r7, lr}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af02      	add	r7, sp, #8
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	817b      	strh	r3, [r7, #10]
 8003c00:	460b      	mov	r3, r1
 8003c02:	813b      	strh	r3, [r7, #8]
 8003c04:	4613      	mov	r3, r2
 8003c06:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0c:	893a      	ldrh	r2, [r7, #8]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003c16:	88f8      	ldrh	r0, [r7, #6]
 8003c18:	893a      	ldrh	r2, [r7, #8]
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	4603      	mov	r3, r0
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	47a0      	blx	r4
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}

08003c30 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	817b      	strh	r3, [r7, #10]
 8003c42:	460b      	mov	r3, r1
 8003c44:	813b      	strh	r3, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d075      	beq.n	8003d40 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d072      	beq.n	8003d40 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d91a      	bls.n	8003c96 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003c60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d109      	bne.n	8003c7c <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003c68:	897a      	ldrh	r2, [r7, #10]
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	817b      	strh	r3, [r7, #10]
	  x++;
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	3301      	adds	r3, #1
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	817b      	strh	r3, [r7, #10]
 8003c7a:	e00c      	b.n	8003c96 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003c7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d108      	bne.n	8003c96 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8003c84:	893a      	ldrh	r2, [r7, #8]
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	813b      	strh	r3, [r7, #8]
	  y++;
 8003c8e:	893b      	ldrh	r3, [r7, #8]
 8003c90:	3301      	adds	r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8003c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003ca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d11a      	bne.n	8003ce0 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d83b      	bhi.n	8003d2e <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003cbc:	893b      	ldrh	r3, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d937      	bls.n	8003d32 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003cce:	1db9      	adds	r1, r7, #6
 8003cd0:	f107 000a 	add.w	r0, r7, #10
 8003cd4:	f7ff ff3e 	bl	8003b54 <u8g2_clip_intersection2>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11a      	bne.n	8003d14 <u8g2_DrawHVLine+0xe4>
	  return;
 8003cde:	e02f      	b.n	8003d40 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003ce6:	897b      	ldrh	r3, [r7, #10]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d824      	bhi.n	8003d36 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003cf2:	897b      	ldrh	r3, [r7, #10]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d920      	bls.n	8003d3a <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003d04:	1db9      	adds	r1, r7, #6
 8003d06:	f107 0008 	add.w	r0, r7, #8
 8003d0a:	f7ff ff23 	bl	8003b54 <u8g2_clip_intersection2>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d014      	beq.n	8003d3e <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	689c      	ldr	r4, [r3, #8]
 8003d1a:	8979      	ldrh	r1, [r7, #10]
 8003d1c:	893a      	ldrh	r2, [r7, #8]
 8003d1e:	88f8      	ldrh	r0, [r7, #6]
 8003d20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4603      	mov	r3, r0
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	47a0      	blx	r4
 8003d2c:	e008      	b.n	8003d40 <u8g2_DrawHVLine+0x110>
	  return;
 8003d2e:	bf00      	nop
 8003d30:	e006      	b.n	8003d40 <u8g2_DrawHVLine+0x110>
	  return;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <u8g2_DrawHVLine+0x110>
	  return;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <u8g2_DrawHVLine+0x110>
	  return;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <u8g2_DrawHVLine+0x110>
	  return;
 8003d3e:	bf00      	nop
    }
}
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd90      	pop	{r4, r7, pc}

08003d46 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003d46:	b490      	push	{r4, r7}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	4608      	mov	r0, r1
 8003d50:	4611      	mov	r1, r2
 8003d52:	461a      	mov	r2, r3
 8003d54:	4623      	mov	r3, r4
 8003d56:	80fb      	strh	r3, [r7, #6]
 8003d58:	4603      	mov	r3, r0
 8003d5a:	80bb      	strh	r3, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003d64:	887a      	ldrh	r2, [r7, #2]
 8003d66:	88bb      	ldrh	r3, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d20d      	bcs.n	8003d88 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8003d6c:	883a      	ldrh	r2, [r7, #0]
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d901      	bls.n	8003d78 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e014      	b.n	8003da2 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003d78:	887a      	ldrh	r2, [r7, #2]
 8003d7a:	883b      	ldrh	r3, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d901      	bls.n	8003d84 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e00e      	b.n	8003da2 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e00c      	b.n	8003da2 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003d88:	883a      	ldrh	r2, [r7, #0]
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d907      	bls.n	8003da0 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003d90:	887a      	ldrh	r2, [r7, #2]
 8003d92:	883b      	ldrh	r3, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d901      	bls.n	8003d9c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e002      	b.n	8003da2 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003da0:	2300      	movs	r3, #0
    }
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc90      	pop	{r4, r7}
 8003daa:	4770      	bx	lr

08003dac <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	461a      	mov	r2, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	813b      	strh	r3, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8003dd2:	8b3b      	ldrh	r3, [r7, #24]
 8003dd4:	893a      	ldrh	r2, [r7, #8]
 8003dd6:	f7ff ffb6 	bl	8003d46 <u8g2_is_intersection_decision_tree>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <u8g2_IsIntersection+0x38>
    return 0; 
 8003de0:	2300      	movs	r3, #0
 8003de2:	e00a      	b.n	8003dfa <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	897a      	ldrh	r2, [r7, #10]
 8003df4:	f7ff ffa7 	bl	8003d46 <u8g2_is_intersection_decision_tree>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b089      	sub	sp, #36	; 0x24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	4608      	mov	r0, r1
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4603      	mov	r3, r0
 8003e12:	817b      	strh	r3, [r7, #10]
 8003e14:	460b      	mov	r3, r1
 8003e16:	813b      	strh	r3, [r7, #8]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8003e1c:	893b      	ldrh	r3, [r7, #8]
 8003e1e:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003e20:	7efb      	ldrb	r3, [r7, #27]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8003e2c:	7e3a      	ldrb	r2, [r7, #24]
 8003e2e:	7efb      	ldrb	r3, [r7, #27]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d801      	bhi.n	8003e4c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003e48:	7e3b      	ldrb	r3, [r7, #24]
 8003e4a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003e56:	7e3b      	ldrb	r3, [r7, #24]
 8003e58:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003e5a:	893b      	ldrh	r3, [r7, #8]
 8003e5c:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	f023 0307 	bic.w	r3, r3, #7
 8003e64:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	7c1b      	ldrb	r3, [r3, #16]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	8afa      	ldrh	r2, [r7, #22]
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8003e7c:	8afb      	ldrh	r3, [r7, #22]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003e84:	897b      	ldrh	r3, [r7, #10]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8003e8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d117      	bne.n	8003ec4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	7ebb      	ldrb	r3, [r7, #26]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	7e7b      	ldrb	r3, [r7, #25]
 8003ea8:	4053      	eors	r3, r2
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	61fb      	str	r3, [r7, #28]
	len--;
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e8      	bne.n	8003e94 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003ec2:	e038      	b.n	8003f36 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	7ebb      	ldrb	r3, [r7, #26]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	7e7b      	ldrb	r3, [r7, #25]
 8003ed8:	4053      	eors	r3, r2
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003ee0:	7efb      	ldrb	r3, [r7, #27]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003ee6:	7efb      	ldrb	r3, [r7, #27]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	76fb      	strb	r3, [r7, #27]
      len--;
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003ef4:	7efb      	ldrb	r3, [r7, #27]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d114      	bne.n	8003f24 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003efe:	461a      	mov	r2, r3
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d801      	bhi.n	8003f14 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d008      	beq.n	8003f30 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	767b      	strb	r3, [r7, #25]
 8003f22:	e005      	b.n	8003f30 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003f24:	7ebb      	ldrb	r3, [r7, #26]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003f2a:	7e7b      	ldrb	r3, [r7, #25]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1c6      	bne.n	8003ec4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003f36:	bf00      	nop
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	79fa      	ldrb	r2, [r7, #7]
 8003fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff ffa9 	bl	8003f40 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff fd88 	bl	8003b04 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <u8g2_SetDisplayRotation>:
/*
  Usually the display rotation is set initially, but it could be done later also
  u8g2_cb can be U8G2_R0..U8G2_R3
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  u8g2->cb = u8g2_cb;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004044:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004046:	89fb      	ldrh	r3, [r7, #14]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	89fa      	ldrh	r2, [r7, #14]
 8004050:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	7c1b      	ldrb	r3, [r3, #16]
 8004056:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8004058:	89fb      	ldrh	r3, [r7, #14]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	89fa      	ldrh	r2, [r7, #14]
 8004062:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800406a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800406c:	89fb      	ldrh	r3, [r7, #14]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	89fa      	ldrh	r2, [r7, #14]
 8004076:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800407e:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8004088:	4413      	add	r3, r2
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	7c52      	ldrb	r2, [r2, #17]
 800408e:	4293      	cmp	r3, r2
 8004090:	dd08      	ble.n	80040a4 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	7c5b      	ldrb	r3, [r3, #17]
 8004096:	b29a      	uxth	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800409e:	b29b      	uxth	r3, r3
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80040a4:	89fb      	ldrh	r3, [r7, #14]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	4413      	add	r3, r2
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	8a9a      	ldrh	r2, [r3, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	8ada      	ldrh	r2, [r3, #22]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4603      	mov	r3, r0
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fe49 	bl	8003dac <u8g2_IsIntersection>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8004128:	e03b      	b.n	80041a2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413e:	429a      	cmp	r2, r3
 8004140:	d205      	bcs.n	800414e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800415a:	429a      	cmp	r2, r3
 800415c:	d905      	bls.n	800416a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004176:	429a      	cmp	r2, r3
 8004178:	d205      	bcs.n	8004186 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004192:	429a      	cmp	r2, r3
 8004194:	d905      	bls.n	80041a2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ff3c 	bl	8004030 <u8g2_update_dimension_common>
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff7b 	bl	80040f0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ff10 	bl	8004030 <u8g2_update_dimension_common>
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004248:	429a      	cmp	r2, r3
 800424a:	d30a      	bcc.n	8004262 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff39 	bl	80040f0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af02      	add	r7, sp, #8
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	4608      	mov	r0, r1
 8004290:	4611      	mov	r1, r2
 8004292:	461a      	mov	r2, r3
 8004294:	4603      	mov	r3, r0
 8004296:	817b      	strh	r3, [r7, #10]
 8004298:	460b      	mov	r3, r1
 800429a:	813b      	strh	r3, [r7, #8]
 800429c:	4613      	mov	r3, r2
 800429e:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80042a0:	88f8      	ldrh	r0, [r7, #6]
 80042a2:	893a      	ldrh	r2, [r7, #8]
 80042a4:	8979      	ldrh	r1, [r7, #10]
 80042a6:	7e3b      	ldrb	r3, [r7, #24]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	4603      	mov	r3, r0
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff fc9e 	bl	8003bee <u8g2_draw_hv_line_2dir>
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b088      	sub	sp, #32
 80042be:	af02      	add	r7, sp, #8
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	4608      	mov	r0, r1
 80042c4:	4611      	mov	r1, r2
 80042c6:	461a      	mov	r2, r3
 80042c8:	4603      	mov	r3, r0
 80042ca:	817b      	strh	r3, [r7, #10]
 80042cc:	460b      	mov	r3, r1
 80042ce:	813b      	strh	r3, [r7, #8]
 80042d0:	4613      	mov	r3, r2
 80042d2:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042da:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 80042dc:	8aba      	ldrh	r2, [r7, #20]
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042ea:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 80042ec:	8afa      	ldrh	r2, [r7, #22]
 80042ee:	897b      	ldrh	r3, [r7, #10]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 80042f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80042fc:	8abb      	ldrh	r3, [r7, #20]
 80042fe:	3b01      	subs	r3, #1
 8004300:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8004302:	8afa      	ldrh	r2, [r7, #22]
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	82fb      	strh	r3, [r7, #22]
 800430a:	e00a      	b.n	8004322 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 800430c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d106      	bne.n	8004322 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8004314:	8afb      	ldrh	r3, [r7, #22]
 8004316:	3b01      	subs	r3, #1
 8004318:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 800431a:	8aba      	ldrh	r2, [r7, #20]
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8004322:	88f8      	ldrh	r0, [r7, #6]
 8004324:	8aba      	ldrh	r2, [r7, #20]
 8004326:	8af9      	ldrh	r1, [r7, #22]
 8004328:	f897 3020 	ldrb.w	r3, [r7, #32]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4603      	mov	r3, r0
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fc5c 	bl	8003bee <u8g2_draw_hv_line_2dir>
}
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <u8x8_ascii_next+0x18>
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	2b0a      	cmp	r3, #10
 800436e:	d102      	bne.n	8004376 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004374:	e001      	b.n	800437a <u8x8_ascii_next+0x22>
  return b;
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	b29b      	uxth	r3, r3
}
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8004384:	b590      	push	{r4, r7, lr}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691c      	ldr	r4, [r3, #16]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	2300      	movs	r3, #0
 8004398:	2120      	movs	r1, #32
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	47a0      	blx	r4
 800439e:	4603      	mov	r3, r0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd90      	pop	{r4, r7, pc}

080043a8 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	460b      	mov	r3, r1
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691c      	ldr	r4, [r3, #16]
 80043ba:	7afa      	ldrb	r2, [r7, #11]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2117      	movs	r1, #23
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	47a0      	blx	r4
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd90      	pop	{r4, r7, pc}

080043ce <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80043da:	1cfb      	adds	r3, r7, #3
 80043dc:	461a      	mov	r2, r3
 80043de:	2101      	movs	r1, #1
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ffe1 	bl	80043a8 <u8x8_byte_SendBytes>
 80043e6:	4603      	mov	r3, r0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68dc      	ldr	r4, [r3, #12]
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	2300      	movs	r3, #0
 8004404:	2115      	movs	r1, #21
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	47a0      	blx	r4
 800440a:	4603      	mov	r3, r0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bd90      	pop	{r4, r7, pc}

08004414 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68dc      	ldr	r4, [r3, #12]
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	2300      	movs	r3, #0
 8004428:	2116      	movs	r1, #22
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	47a0      	blx	r4
 800442e:	4603      	mov	r3, r0
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bd90      	pop	{r4, r7, pc}

08004438 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	460b      	mov	r3, r1
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68dc      	ldr	r4, [r3, #12]
 800444a:	7afa      	ldrb	r2, [r7, #11]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2117      	movs	r1, #23
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	47a0      	blx	r4
 8004454:	4603      	mov	r3, r0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bd90      	pop	{r4, r7, pc}

0800445e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800445e:	b590      	push	{r4, r7, lr}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68dc      	ldr	r4, [r3, #12]
 800446a:	2300      	movs	r3, #0
 800446c:	2200      	movs	r2, #0
 800446e:	2118      	movs	r1, #24
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	47a0      	blx	r4
 8004474:	4603      	mov	r3, r0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	bd90      	pop	{r4, r7, pc}

0800447e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800447e:	b590      	push	{r4, r7, lr}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68dc      	ldr	r4, [r3, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	2200      	movs	r2, #0
 800448e:	2119      	movs	r1, #25
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	47a0      	blx	r4
 8004494:	4603      	mov	r3, r0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}

0800449e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800449e:	b590      	push	{r4, r7, lr}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	73fb      	strb	r3, [r7, #15]
    data++;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2bfe      	cmp	r3, #254	; 0xfe
 80044b8:	d031      	beq.n	800451e <u8x8_cad_SendSequence+0x80>
 80044ba:	2bfe      	cmp	r3, #254	; 0xfe
 80044bc:	dc3d      	bgt.n	800453a <u8x8_cad_SendSequence+0x9c>
 80044be:	2b19      	cmp	r3, #25
 80044c0:	dc3b      	bgt.n	800453a <u8x8_cad_SendSequence+0x9c>
 80044c2:	2b18      	cmp	r3, #24
 80044c4:	da23      	bge.n	800450e <u8x8_cad_SendSequence+0x70>
 80044c6:	2b16      	cmp	r3, #22
 80044c8:	dc02      	bgt.n	80044d0 <u8x8_cad_SendSequence+0x32>
 80044ca:	2b15      	cmp	r3, #21
 80044cc:	da03      	bge.n	80044d6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80044ce:	e034      	b.n	800453a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80044d0:	2b17      	cmp	r3, #23
 80044d2:	d00e      	beq.n	80044f2 <u8x8_cad_SendSequence+0x54>
	return;
 80044d4:	e031      	b.n	800453a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68dc      	ldr	r4, [r3, #12]
 80044e0:	7bba      	ldrb	r2, [r7, #14]
 80044e2:	7bf9      	ldrb	r1, [r7, #15]
 80044e4:	2300      	movs	r3, #0
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	47a0      	blx	r4
	  data++;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	603b      	str	r3, [r7, #0]
	  break;
 80044f0:	e022      	b.n	8004538 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80044f8:	f107 030e 	add.w	r3, r7, #14
 80044fc:	461a      	mov	r2, r3
 80044fe:	2101      	movs	r1, #1
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff99 	bl	8004438 <u8x8_cad_SendData>
	  data++;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	603b      	str	r3, [r7, #0]
	  break;
 800450c:	e014      	b.n	8004538 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68dc      	ldr	r4, [r3, #12]
 8004512:	7bf9      	ldrb	r1, [r7, #15]
 8004514:	2300      	movs	r3, #0
 8004516:	2200      	movs	r2, #0
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	47a0      	blx	r4
	  break;
 800451c:	e00c      	b.n	8004538 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004524:	7bbb      	ldrb	r3, [r7, #14]
 8004526:	461a      	mov	r2, r3
 8004528:	2129      	movs	r1, #41	; 0x29
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9d8 	bl	80048e0 <u8x8_gpio_call>
	  data++;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	603b      	str	r3, [r7, #0]
	  break;
 8004536:	bf00      	nop
    cmd = *data;
 8004538:	e7b6      	b.n	80044a8 <u8x8_cad_SendSequence+0xa>
	return;
 800453a:	bf00      	nop
    }
  }
}
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bd90      	pop	{r4, r7, pc}
	...

08004544 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	72fb      	strb	r3, [r7, #11]
 8004552:	4613      	mov	r3, r2
 8004554:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8004556:	7afb      	ldrb	r3, [r7, #11]
 8004558:	3b14      	subs	r3, #20
 800455a:	2b05      	cmp	r3, #5
 800455c:	d82f      	bhi.n	80045be <u8x8_cad_001+0x7a>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <u8x8_cad_001+0x20>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	080045ad 	.word	0x080045ad
 8004568:	0800457d 	.word	0x0800457d
 800456c:	08004591 	.word	0x08004591
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045ad 	.word	0x080045ad
 8004578:	080045ad 	.word	0x080045ad
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800457c:	2100      	movs	r1, #0
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff ff00 	bl	8004384 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004584:	7abb      	ldrb	r3, [r7, #10]
 8004586:	4619      	mov	r1, r3
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff ff20 	bl	80043ce <u8x8_byte_SendByte>
      break;
 800458e:	e018      	b.n	80045c2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004590:	2100      	movs	r1, #0
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff fef6 	bl	8004384 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004598:	7abb      	ldrb	r3, [r7, #10]
 800459a:	4619      	mov	r1, r3
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7ff ff16 	bl	80043ce <u8x8_byte_SendByte>
      break;
 80045a2:	e00e      	b.n	80045c2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80045a4:	2101      	movs	r1, #1
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff feec 	bl	8004384 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691c      	ldr	r4, [r3, #16]
 80045b0:	7aba      	ldrb	r2, [r7, #10]
 80045b2:	7af9      	ldrb	r1, [r7, #11]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	47a0      	blx	r4
 80045ba:	4603      	mov	r3, r0
 80045bc:	e002      	b.n	80045c4 <u8x8_cad_001+0x80>
    default:
      return 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <u8x8_cad_001+0x80>
  }
  return 1;
 80045c2:	2301      	movs	r3, #1
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd90      	pop	{r4, r7, pc}

080045cc <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	72fb      	strb	r3, [r7, #11]
 80045da:	4613      	mov	r3, r2
 80045dc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80045de:	7afb      	ldrb	r3, [r7, #11]
 80045e0:	3b0b      	subs	r3, #11
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	f200 808a 	bhi.w	80046fc <u8x8_d_ssd1306_sh1106_generic+0x130>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004605 	.word	0x08004605
 80045f4:	080046fd 	.word	0x080046fd
 80045f8:	0800461f 	.word	0x0800461f
 80045fc:	08004651 	.word	0x08004651
 8004600:	08004671 	.word	0x08004671
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004604:	7abb      	ldrb	r3, [r7, #10]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800460a:	4940      	ldr	r1, [pc, #256]	; (800470c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff ff46 	bl	800449e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004612:	e075      	b.n	8004700 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004614:	493e      	ldr	r1, [pc, #248]	; (8004710 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff ff41 	bl	800449e <u8x8_cad_SendSequence>
      break;
 800461c:	e070      	b.n	8004700 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800461e:	7abb      	ldrb	r3, [r7, #10]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8004624:	493b      	ldr	r1, [pc, #236]	; (8004714 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff ff39 	bl	800449e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	7c9a      	ldrb	r2, [r3, #18]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004638:	e062      	b.n	8004700 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800463a:	4937      	ldr	r1, [pc, #220]	; (8004718 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff ff2e 	bl	800449e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	7cda      	ldrb	r2, [r3, #19]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800464e:	e057      	b.n	8004700 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff ff04 	bl	800445e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004656:	2181      	movs	r1, #129	; 0x81
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff fec9 	bl	80043f0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800465e:	7abb      	ldrb	r3, [r7, #10]
 8004660:	4619      	mov	r1, r3
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fed6 	bl	8004414 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff ff08 	bl	800447e <u8x8_cad_EndTransfer>
      break;
 800466e:	e047      	b.n	8004700 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7ff fef4 	bl	800445e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	795b      	ldrb	r3, [r3, #5]
 800467a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	4413      	add	r3, r2
 800468c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800468e:	2140      	movs	r1, #64	; 0x40
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff fead 	bl	80043f0 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f043 0310 	orr.w	r3, r3, #16
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	4619      	mov	r1, r3
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff fea3 	bl	80043f0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4619      	mov	r1, r3
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff fead 	bl	8004414 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	799b      	ldrb	r3, [r3, #6]
 80046be:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	4619      	mov	r1, r3
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fea4 	bl	8004414 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80046d8:	7dbb      	ldrb	r3, [r7, #22]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4619      	mov	r1, r3
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff fea8 	bl	8004438 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80046e8:	7abb      	ldrb	r3, [r7, #10]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80046ee:	7abb      	ldrb	r3, [r7, #10]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1eb      	bne.n	80046cc <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff fec2 	bl	800447e <u8x8_cad_EndTransfer>
      break;
 80046fa:	e001      	b.n	8004700 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004700:	2301      	movs	r3, #1
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	0800574c 	.word	0x0800574c
 8004710:	08005754 	.word	0x08005754
 8004714:	0800575c 	.word	0x0800575c
 8004718:	08005764 	.word	0x08005764

0800471c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	72fb      	strb	r3, [r7, #11]
 800472a:	4613      	mov	r3, r2
 800472c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800472e:	7aba      	ldrb	r2, [r7, #10]
 8004730:	7af9      	ldrb	r1, [r7, #11]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ff49 	bl	80045cc <u8x8_d_ssd1306_sh1106_generic>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8004740:	2301      	movs	r3, #1
 8004742:	e014      	b.n	800476e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8004744:	7afb      	ldrb	r3, [r7, #11]
 8004746:	2b09      	cmp	r3, #9
 8004748:	d009      	beq.n	800475e <u8x8_d_ssd1306_128x64_noname+0x42>
 800474a:	2b0a      	cmp	r3, #10
 800474c:	d10c      	bne.n	8004768 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f829 	bl	80047a6 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8004754:	4908      	ldr	r1, [pc, #32]	; (8004778 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff fea1 	bl	800449e <u8x8_cad_SendSequence>
      break;
 800475c:	e006      	b.n	800476c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800475e:	4907      	ldr	r1, [pc, #28]	; (800477c <u8x8_d_ssd1306_128x64_noname+0x60>)
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f80d 	bl	8004780 <u8x8_d_helper_display_setup_memory>
      break;
 8004766:	e001      	b.n	800476c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800476c:	2301      	movs	r3, #1
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	08005714 	.word	0x08005714
 800477c:	0800576c 	.word	0x0800576c

08004780 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	7c9a      	ldrb	r2, [r3, #18]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr

080047a6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80047a6:	b590      	push	{r4, r7, lr}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695c      	ldr	r4, [r3, #20]
 80047b2:	2300      	movs	r3, #0
 80047b4:	2200      	movs	r2, #0
 80047b6:	2128      	movs	r1, #40	; 0x28
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68dc      	ldr	r4, [r3, #12]
 80047c0:	2300      	movs	r3, #0
 80047c2:	2200      	movs	r2, #0
 80047c4:	2114      	movs	r1, #20
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80047ca:	2201      	movs	r2, #1
 80047cc:	214b      	movs	r1, #75	; 0x4b
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f886 	bl	80048e0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	791b      	ldrb	r3, [r3, #4]
 80047da:	461a      	mov	r2, r3
 80047dc:	2129      	movs	r1, #41	; 0x29
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f87e 	bl	80048e0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80047e4:	2200      	movs	r2, #0
 80047e6:	214b      	movs	r1, #75	; 0x4b
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f879 	bl	80048e0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	791b      	ldrb	r3, [r3, #4]
 80047f4:	461a      	mov	r2, r3
 80047f6:	2129      	movs	r1, #41	; 0x29
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f871 	bl	80048e0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80047fe:	2201      	movs	r2, #1
 8004800:	214b      	movs	r1, #75	; 0x4b
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f86c 	bl	80048e0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	795b      	ldrb	r3, [r3, #5]
 800480e:	461a      	mov	r2, r3
 8004810:	2129      	movs	r1, #41	; 0x29
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f864 	bl	80048e0 <u8x8_gpio_call>
}    
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bd90      	pop	{r4, r7, pc}

08004820 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4603      	mov	r3, r0
 8004830:	70fb      	strb	r3, [r7, #3]
 8004832:	460b      	mov	r3, r1
 8004834:	70bb      	strb	r3, [r7, #2]
 8004836:	4613      	mov	r3, r2
 8004838:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800483e:	78bb      	ldrb	r3, [r7, #2]
 8004840:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004842:	787b      	ldrb	r3, [r7, #1]
 8004844:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689c      	ldr	r4, [r3, #8]
 800484e:	f107 0308 	add.w	r3, r7, #8
 8004852:	2201      	movs	r2, #1
 8004854:	210f      	movs	r1, #15
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	47a0      	blx	r4
 800485a:	4603      	mov	r3, r0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}

08004864 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689c      	ldr	r4, [r3, #8]
 8004870:	2300      	movs	r3, #0
 8004872:	2200      	movs	r2, #0
 8004874:	2109      	movs	r1, #9
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	47a0      	blx	r4
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	bd90      	pop	{r4, r7, pc}

08004882 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004882:	b590      	push	{r4, r7, lr}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689c      	ldr	r4, [r3, #8]
 800488e:	2300      	movs	r3, #0
 8004890:	2200      	movs	r2, #0
 8004892:	210a      	movs	r1, #10
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bd90      	pop	{r4, r7, pc}

080048a0 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689c      	ldr	r4, [r3, #8]
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	2300      	movs	r3, #0
 80048b4:	210b      	movs	r1, #11
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	47a0      	blx	r4
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd90      	pop	{r4, r7, pc}

080048c2 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80048c2:	b590      	push	{r4, r7, lr}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689c      	ldr	r4, [r3, #8]
 80048ce:	2300      	movs	r3, #0
 80048d0:	2200      	movs	r2, #0
 80048d2:	2110      	movs	r1, #16
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	47a0      	blx	r4
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd90      	pop	{r4, r7, pc}

080048e0 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
 80048ec:	4613      	mov	r3, r2
 80048ee:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695c      	ldr	r4, [r3, #20]
 80048f4:	78ba      	ldrb	r2, [r7, #2]
 80048f6:	78f9      	ldrb	r1, [r7, #3]
 80048f8:	2300      	movs	r3, #0
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	47a0      	blx	r4
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bd90      	pop	{r4, r7, pc}

08004906 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	72fb      	strb	r3, [r7, #11]
 8004914:	4613      	mov	r3, r2
 8004916:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a11      	ldr	r2, [pc, #68]	; (800497c <u8x8_SetupDefaults+0x58>)
 8004936:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <u8x8_SetupDefaults+0x58>)
 800493c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a0e      	ldr	r2, [pc, #56]	; (800497c <u8x8_SetupDefaults+0x58>)
 8004942:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a0d      	ldr	r2, [pc, #52]	; (800497c <u8x8_SetupDefaults+0x58>)
 8004948:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	22ff      	movs	r2, #255	; 0xff
 8004964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	22ff      	movs	r2, #255	; 0xff
 800496c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	08004907 	.word	0x08004907

08004980 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff ffc8 	bl	8004924 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff ff59 	bl	8004864 <u8x8_SetupMemory>
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <__errno>:
 80049bc:	4b01      	ldr	r3, [pc, #4]	; (80049c4 <__errno+0x8>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000024 	.word	0x20000024

080049c8 <__libc_init_array>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	2600      	movs	r6, #0
 80049cc:	4d0c      	ldr	r5, [pc, #48]	; (8004a00 <__libc_init_array+0x38>)
 80049ce:	4c0d      	ldr	r4, [pc, #52]	; (8004a04 <__libc_init_array+0x3c>)
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	42a6      	cmp	r6, r4
 80049d6:	d109      	bne.n	80049ec <__libc_init_array+0x24>
 80049d8:	f000 fc9c 	bl	8005314 <_init>
 80049dc:	2600      	movs	r6, #0
 80049de:	4d0a      	ldr	r5, [pc, #40]	; (8004a08 <__libc_init_array+0x40>)
 80049e0:	4c0a      	ldr	r4, [pc, #40]	; (8004a0c <__libc_init_array+0x44>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	42a6      	cmp	r6, r4
 80049e8:	d105      	bne.n	80049f6 <__libc_init_array+0x2e>
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f0:	4798      	blx	r3
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7ee      	b.n	80049d4 <__libc_init_array+0xc>
 80049f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fa:	4798      	blx	r3
 80049fc:	3601      	adds	r6, #1
 80049fe:	e7f2      	b.n	80049e6 <__libc_init_array+0x1e>
 8004a00:	08005818 	.word	0x08005818
 8004a04:	08005818 	.word	0x08005818
 8004a08:	08005818 	.word	0x08005818
 8004a0c:	0800581c 	.word	0x0800581c

08004a10 <memset>:
 8004a10:	4603      	mov	r3, r0
 8004a12:	4402      	add	r2, r0
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d100      	bne.n	8004a1a <memset+0xa>
 8004a18:	4770      	bx	lr
 8004a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1e:	e7f9      	b.n	8004a14 <memset+0x4>

08004a20 <siprintf>:
 8004a20:	b40e      	push	{r1, r2, r3}
 8004a22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a26:	b500      	push	{lr}
 8004a28:	b09c      	sub	sp, #112	; 0x70
 8004a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	9006      	str	r0, [sp, #24]
 8004a30:	9107      	str	r1, [sp, #28]
 8004a32:	9104      	str	r1, [sp, #16]
 8004a34:	4808      	ldr	r0, [pc, #32]	; (8004a58 <siprintf+0x38>)
 8004a36:	4909      	ldr	r1, [pc, #36]	; (8004a5c <siprintf+0x3c>)
 8004a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a3c:	9105      	str	r1, [sp, #20]
 8004a3e:	6800      	ldr	r0, [r0, #0]
 8004a40:	a902      	add	r1, sp, #8
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	f000 f8fe 	bl	8004c44 <_svfiprintf_r>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	9b02      	ldr	r3, [sp, #8]
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	b01c      	add	sp, #112	; 0x70
 8004a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a54:	b003      	add	sp, #12
 8004a56:	4770      	bx	lr
 8004a58:	20000024 	.word	0x20000024
 8004a5c:	ffff0208 	.word	0xffff0208

08004a60 <__retarget_lock_acquire_recursive>:
 8004a60:	4770      	bx	lr

08004a62 <__retarget_lock_release_recursive>:
 8004a62:	4770      	bx	lr

08004a64 <sbrk_aligned>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4e0e      	ldr	r6, [pc, #56]	; (8004aa0 <sbrk_aligned+0x3c>)
 8004a68:	460c      	mov	r4, r1
 8004a6a:	6831      	ldr	r1, [r6, #0]
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	b911      	cbnz	r1, 8004a76 <sbrk_aligned+0x12>
 8004a70:	f000 fb7e 	bl	8005170 <_sbrk_r>
 8004a74:	6030      	str	r0, [r6, #0]
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f000 fb79 	bl	8005170 <_sbrk_r>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	d00a      	beq.n	8004a98 <sbrk_aligned+0x34>
 8004a82:	1cc4      	adds	r4, r0, #3
 8004a84:	f024 0403 	bic.w	r4, r4, #3
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d007      	beq.n	8004a9c <sbrk_aligned+0x38>
 8004a8c:	1a21      	subs	r1, r4, r0
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 fb6e 	bl	8005170 <_sbrk_r>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d101      	bne.n	8004a9c <sbrk_aligned+0x38>
 8004a98:	f04f 34ff 	mov.w	r4, #4294967295
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	200006e8 	.word	0x200006e8

08004aa4 <_malloc_r>:
 8004aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa8:	1ccd      	adds	r5, r1, #3
 8004aaa:	f025 0503 	bic.w	r5, r5, #3
 8004aae:	3508      	adds	r5, #8
 8004ab0:	2d0c      	cmp	r5, #12
 8004ab2:	bf38      	it	cc
 8004ab4:	250c      	movcc	r5, #12
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	4607      	mov	r7, r0
 8004aba:	db01      	blt.n	8004ac0 <_malloc_r+0x1c>
 8004abc:	42a9      	cmp	r1, r5
 8004abe:	d905      	bls.n	8004acc <_malloc_r+0x28>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004acc:	4e2e      	ldr	r6, [pc, #184]	; (8004b88 <_malloc_r+0xe4>)
 8004ace:	f000 fb95 	bl	80051fc <__malloc_lock>
 8004ad2:	6833      	ldr	r3, [r6, #0]
 8004ad4:	461c      	mov	r4, r3
 8004ad6:	bb34      	cbnz	r4, 8004b26 <_malloc_r+0x82>
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4638      	mov	r0, r7
 8004adc:	f7ff ffc2 	bl	8004a64 <sbrk_aligned>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	d14d      	bne.n	8004b82 <_malloc_r+0xde>
 8004ae6:	6834      	ldr	r4, [r6, #0]
 8004ae8:	4626      	mov	r6, r4
 8004aea:	2e00      	cmp	r6, #0
 8004aec:	d140      	bne.n	8004b70 <_malloc_r+0xcc>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	4631      	mov	r1, r6
 8004af2:	4638      	mov	r0, r7
 8004af4:	eb04 0803 	add.w	r8, r4, r3
 8004af8:	f000 fb3a 	bl	8005170 <_sbrk_r>
 8004afc:	4580      	cmp	r8, r0
 8004afe:	d13a      	bne.n	8004b76 <_malloc_r+0xd2>
 8004b00:	6821      	ldr	r1, [r4, #0]
 8004b02:	3503      	adds	r5, #3
 8004b04:	1a6d      	subs	r5, r5, r1
 8004b06:	f025 0503 	bic.w	r5, r5, #3
 8004b0a:	3508      	adds	r5, #8
 8004b0c:	2d0c      	cmp	r5, #12
 8004b0e:	bf38      	it	cc
 8004b10:	250c      	movcc	r5, #12
 8004b12:	4638      	mov	r0, r7
 8004b14:	4629      	mov	r1, r5
 8004b16:	f7ff ffa5 	bl	8004a64 <sbrk_aligned>
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d02b      	beq.n	8004b76 <_malloc_r+0xd2>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	442b      	add	r3, r5
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	e00e      	b.n	8004b44 <_malloc_r+0xa0>
 8004b26:	6822      	ldr	r2, [r4, #0]
 8004b28:	1b52      	subs	r2, r2, r5
 8004b2a:	d41e      	bmi.n	8004b6a <_malloc_r+0xc6>
 8004b2c:	2a0b      	cmp	r2, #11
 8004b2e:	d916      	bls.n	8004b5e <_malloc_r+0xba>
 8004b30:	1961      	adds	r1, r4, r5
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	6025      	str	r5, [r4, #0]
 8004b36:	bf18      	it	ne
 8004b38:	6059      	strne	r1, [r3, #4]
 8004b3a:	6863      	ldr	r3, [r4, #4]
 8004b3c:	bf08      	it	eq
 8004b3e:	6031      	streq	r1, [r6, #0]
 8004b40:	5162      	str	r2, [r4, r5]
 8004b42:	604b      	str	r3, [r1, #4]
 8004b44:	4638      	mov	r0, r7
 8004b46:	f104 060b 	add.w	r6, r4, #11
 8004b4a:	f000 fb5d 	bl	8005208 <__malloc_unlock>
 8004b4e:	f026 0607 	bic.w	r6, r6, #7
 8004b52:	1d23      	adds	r3, r4, #4
 8004b54:	1af2      	subs	r2, r6, r3
 8004b56:	d0b6      	beq.n	8004ac6 <_malloc_r+0x22>
 8004b58:	1b9b      	subs	r3, r3, r6
 8004b5a:	50a3      	str	r3, [r4, r2]
 8004b5c:	e7b3      	b.n	8004ac6 <_malloc_r+0x22>
 8004b5e:	6862      	ldr	r2, [r4, #4]
 8004b60:	42a3      	cmp	r3, r4
 8004b62:	bf0c      	ite	eq
 8004b64:	6032      	streq	r2, [r6, #0]
 8004b66:	605a      	strne	r2, [r3, #4]
 8004b68:	e7ec      	b.n	8004b44 <_malloc_r+0xa0>
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	6864      	ldr	r4, [r4, #4]
 8004b6e:	e7b2      	b.n	8004ad6 <_malloc_r+0x32>
 8004b70:	4634      	mov	r4, r6
 8004b72:	6876      	ldr	r6, [r6, #4]
 8004b74:	e7b9      	b.n	8004aea <_malloc_r+0x46>
 8004b76:	230c      	movs	r3, #12
 8004b78:	4638      	mov	r0, r7
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	f000 fb44 	bl	8005208 <__malloc_unlock>
 8004b80:	e7a1      	b.n	8004ac6 <_malloc_r+0x22>
 8004b82:	6025      	str	r5, [r4, #0]
 8004b84:	e7de      	b.n	8004b44 <_malloc_r+0xa0>
 8004b86:	bf00      	nop
 8004b88:	200006e4 	.word	0x200006e4

08004b8c <__ssputs_r>:
 8004b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	688e      	ldr	r6, [r1, #8]
 8004b92:	4682      	mov	sl, r0
 8004b94:	429e      	cmp	r6, r3
 8004b96:	460c      	mov	r4, r1
 8004b98:	4690      	mov	r8, r2
 8004b9a:	461f      	mov	r7, r3
 8004b9c:	d838      	bhi.n	8004c10 <__ssputs_r+0x84>
 8004b9e:	898a      	ldrh	r2, [r1, #12]
 8004ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ba4:	d032      	beq.n	8004c0c <__ssputs_r+0x80>
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	6909      	ldr	r1, [r1, #16]
 8004baa:	3301      	adds	r3, #1
 8004bac:	eba5 0901 	sub.w	r9, r5, r1
 8004bb0:	6965      	ldr	r5, [r4, #20]
 8004bb2:	444b      	add	r3, r9
 8004bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bbc:	106d      	asrs	r5, r5, #1
 8004bbe:	429d      	cmp	r5, r3
 8004bc0:	bf38      	it	cc
 8004bc2:	461d      	movcc	r5, r3
 8004bc4:	0553      	lsls	r3, r2, #21
 8004bc6:	d531      	bpl.n	8004c2c <__ssputs_r+0xa0>
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f7ff ff6b 	bl	8004aa4 <_malloc_r>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	b950      	cbnz	r0, 8004be8 <__ssputs_r+0x5c>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	f8ca 3000 	str.w	r3, [sl]
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be8:	464a      	mov	r2, r9
 8004bea:	6921      	ldr	r1, [r4, #16]
 8004bec:	f000 fade 	bl	80051ac <memcpy>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	6126      	str	r6, [r4, #16]
 8004bfe:	444e      	add	r6, r9
 8004c00:	6026      	str	r6, [r4, #0]
 8004c02:	463e      	mov	r6, r7
 8004c04:	6165      	str	r5, [r4, #20]
 8004c06:	eba5 0509 	sub.w	r5, r5, r9
 8004c0a:	60a5      	str	r5, [r4, #8]
 8004c0c:	42be      	cmp	r6, r7
 8004c0e:	d900      	bls.n	8004c12 <__ssputs_r+0x86>
 8004c10:	463e      	mov	r6, r7
 8004c12:	4632      	mov	r2, r6
 8004c14:	4641      	mov	r1, r8
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	f000 fad6 	bl	80051c8 <memmove>
 8004c1c:	68a3      	ldr	r3, [r4, #8]
 8004c1e:	2000      	movs	r0, #0
 8004c20:	1b9b      	subs	r3, r3, r6
 8004c22:	60a3      	str	r3, [r4, #8]
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	4433      	add	r3, r6
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	e7db      	b.n	8004be4 <__ssputs_r+0x58>
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	f000 fb39 	bl	80052a4 <_realloc_r>
 8004c32:	4606      	mov	r6, r0
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d1e1      	bne.n	8004bfc <__ssputs_r+0x70>
 8004c38:	4650      	mov	r0, sl
 8004c3a:	6921      	ldr	r1, [r4, #16]
 8004c3c:	f000 faea 	bl	8005214 <_free_r>
 8004c40:	e7c7      	b.n	8004bd2 <__ssputs_r+0x46>
	...

08004c44 <_svfiprintf_r>:
 8004c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c48:	4698      	mov	r8, r3
 8004c4a:	898b      	ldrh	r3, [r1, #12]
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	061b      	lsls	r3, r3, #24
 8004c50:	460d      	mov	r5, r1
 8004c52:	4614      	mov	r4, r2
 8004c54:	b09d      	sub	sp, #116	; 0x74
 8004c56:	d50e      	bpl.n	8004c76 <_svfiprintf_r+0x32>
 8004c58:	690b      	ldr	r3, [r1, #16]
 8004c5a:	b963      	cbnz	r3, 8004c76 <_svfiprintf_r+0x32>
 8004c5c:	2140      	movs	r1, #64	; 0x40
 8004c5e:	f7ff ff21 	bl	8004aa4 <_malloc_r>
 8004c62:	6028      	str	r0, [r5, #0]
 8004c64:	6128      	str	r0, [r5, #16]
 8004c66:	b920      	cbnz	r0, 8004c72 <_svfiprintf_r+0x2e>
 8004c68:	230c      	movs	r3, #12
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	e0d1      	b.n	8004e16 <_svfiprintf_r+0x1d2>
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	616b      	str	r3, [r5, #20]
 8004c76:	2300      	movs	r3, #0
 8004c78:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7a:	2320      	movs	r3, #32
 8004c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c80:	2330      	movs	r3, #48	; 0x30
 8004c82:	f04f 0901 	mov.w	r9, #1
 8004c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e30 <_svfiprintf_r+0x1ec>
 8004c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c92:	4623      	mov	r3, r4
 8004c94:	469a      	mov	sl, r3
 8004c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c9a:	b10a      	cbz	r2, 8004ca0 <_svfiprintf_r+0x5c>
 8004c9c:	2a25      	cmp	r2, #37	; 0x25
 8004c9e:	d1f9      	bne.n	8004c94 <_svfiprintf_r+0x50>
 8004ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ca4:	d00b      	beq.n	8004cbe <_svfiprintf_r+0x7a>
 8004ca6:	465b      	mov	r3, fp
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4629      	mov	r1, r5
 8004cac:	4638      	mov	r0, r7
 8004cae:	f7ff ff6d 	bl	8004b8c <__ssputs_r>
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f000 80aa 	beq.w	8004e0c <_svfiprintf_r+0x1c8>
 8004cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cba:	445a      	add	r2, fp
 8004cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80a2 	beq.w	8004e0c <_svfiprintf_r+0x1c8>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295
 8004cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cd2:	f10a 0a01 	add.w	sl, sl, #1
 8004cd6:	9304      	str	r3, [sp, #16]
 8004cd8:	9307      	str	r3, [sp, #28]
 8004cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cde:	931a      	str	r3, [sp, #104]	; 0x68
 8004ce0:	4654      	mov	r4, sl
 8004ce2:	2205      	movs	r2, #5
 8004ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce8:	4851      	ldr	r0, [pc, #324]	; (8004e30 <_svfiprintf_r+0x1ec>)
 8004cea:	f000 fa51 	bl	8005190 <memchr>
 8004cee:	9a04      	ldr	r2, [sp, #16]
 8004cf0:	b9d8      	cbnz	r0, 8004d2a <_svfiprintf_r+0xe6>
 8004cf2:	06d0      	lsls	r0, r2, #27
 8004cf4:	bf44      	itt	mi
 8004cf6:	2320      	movmi	r3, #32
 8004cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cfc:	0711      	lsls	r1, r2, #28
 8004cfe:	bf44      	itt	mi
 8004d00:	232b      	movmi	r3, #43	; 0x2b
 8004d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d06:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d0c:	d015      	beq.n	8004d3a <_svfiprintf_r+0xf6>
 8004d0e:	4654      	mov	r4, sl
 8004d10:	2000      	movs	r0, #0
 8004d12:	f04f 0c0a 	mov.w	ip, #10
 8004d16:	9a07      	ldr	r2, [sp, #28]
 8004d18:	4621      	mov	r1, r4
 8004d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d1e:	3b30      	subs	r3, #48	; 0x30
 8004d20:	2b09      	cmp	r3, #9
 8004d22:	d94e      	bls.n	8004dc2 <_svfiprintf_r+0x17e>
 8004d24:	b1b0      	cbz	r0, 8004d54 <_svfiprintf_r+0x110>
 8004d26:	9207      	str	r2, [sp, #28]
 8004d28:	e014      	b.n	8004d54 <_svfiprintf_r+0x110>
 8004d2a:	eba0 0308 	sub.w	r3, r0, r8
 8004d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d32:	4313      	orrs	r3, r2
 8004d34:	46a2      	mov	sl, r4
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	e7d2      	b.n	8004ce0 <_svfiprintf_r+0x9c>
 8004d3a:	9b03      	ldr	r3, [sp, #12]
 8004d3c:	1d19      	adds	r1, r3, #4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	9103      	str	r1, [sp, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bfbb      	ittet	lt
 8004d46:	425b      	neglt	r3, r3
 8004d48:	f042 0202 	orrlt.w	r2, r2, #2
 8004d4c:	9307      	strge	r3, [sp, #28]
 8004d4e:	9307      	strlt	r3, [sp, #28]
 8004d50:	bfb8      	it	lt
 8004d52:	9204      	strlt	r2, [sp, #16]
 8004d54:	7823      	ldrb	r3, [r4, #0]
 8004d56:	2b2e      	cmp	r3, #46	; 0x2e
 8004d58:	d10c      	bne.n	8004d74 <_svfiprintf_r+0x130>
 8004d5a:	7863      	ldrb	r3, [r4, #1]
 8004d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d5e:	d135      	bne.n	8004dcc <_svfiprintf_r+0x188>
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	3402      	adds	r4, #2
 8004d64:	1d1a      	adds	r2, r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	9203      	str	r2, [sp, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfb8      	it	lt
 8004d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d72:	9305      	str	r3, [sp, #20]
 8004d74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004e34 <_svfiprintf_r+0x1f0>
 8004d78:	2203      	movs	r2, #3
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	7821      	ldrb	r1, [r4, #0]
 8004d7e:	f000 fa07 	bl	8005190 <memchr>
 8004d82:	b140      	cbz	r0, 8004d96 <_svfiprintf_r+0x152>
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	eba0 000a 	sub.w	r0, r0, sl
 8004d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d8e:	9b04      	ldr	r3, [sp, #16]
 8004d90:	3401      	adds	r4, #1
 8004d92:	4303      	orrs	r3, r0
 8004d94:	9304      	str	r3, [sp, #16]
 8004d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9a:	2206      	movs	r2, #6
 8004d9c:	4826      	ldr	r0, [pc, #152]	; (8004e38 <_svfiprintf_r+0x1f4>)
 8004d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004da2:	f000 f9f5 	bl	8005190 <memchr>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d038      	beq.n	8004e1c <_svfiprintf_r+0x1d8>
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <_svfiprintf_r+0x1f8>)
 8004dac:	bb1b      	cbnz	r3, 8004df6 <_svfiprintf_r+0x1b2>
 8004dae:	9b03      	ldr	r3, [sp, #12]
 8004db0:	3307      	adds	r3, #7
 8004db2:	f023 0307 	bic.w	r3, r3, #7
 8004db6:	3308      	adds	r3, #8
 8004db8:	9303      	str	r3, [sp, #12]
 8004dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbc:	4433      	add	r3, r6
 8004dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc0:	e767      	b.n	8004c92 <_svfiprintf_r+0x4e>
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dca:	e7a5      	b.n	8004d18 <_svfiprintf_r+0xd4>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f04f 0c0a 	mov.w	ip, #10
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	3401      	adds	r4, #1
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dde:	3a30      	subs	r2, #48	; 0x30
 8004de0:	2a09      	cmp	r2, #9
 8004de2:	d903      	bls.n	8004dec <_svfiprintf_r+0x1a8>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0c5      	beq.n	8004d74 <_svfiprintf_r+0x130>
 8004de8:	9105      	str	r1, [sp, #20]
 8004dea:	e7c3      	b.n	8004d74 <_svfiprintf_r+0x130>
 8004dec:	4604      	mov	r4, r0
 8004dee:	2301      	movs	r3, #1
 8004df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004df4:	e7f0      	b.n	8004dd8 <_svfiprintf_r+0x194>
 8004df6:	ab03      	add	r3, sp, #12
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	462a      	mov	r2, r5
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <_svfiprintf_r+0x1fc>)
 8004e00:	a904      	add	r1, sp, #16
 8004e02:	f3af 8000 	nop.w
 8004e06:	1c42      	adds	r2, r0, #1
 8004e08:	4606      	mov	r6, r0
 8004e0a:	d1d6      	bne.n	8004dba <_svfiprintf_r+0x176>
 8004e0c:	89ab      	ldrh	r3, [r5, #12]
 8004e0e:	065b      	lsls	r3, r3, #25
 8004e10:	f53f af2c 	bmi.w	8004c6c <_svfiprintf_r+0x28>
 8004e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e16:	b01d      	add	sp, #116	; 0x74
 8004e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1c:	ab03      	add	r3, sp, #12
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	462a      	mov	r2, r5
 8004e22:	4638      	mov	r0, r7
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <_svfiprintf_r+0x1fc>)
 8004e26:	a904      	add	r1, sp, #16
 8004e28:	f000 f87c 	bl	8004f24 <_printf_i>
 8004e2c:	e7eb      	b.n	8004e06 <_svfiprintf_r+0x1c2>
 8004e2e:	bf00      	nop
 8004e30:	080057e4 	.word	0x080057e4
 8004e34:	080057ea 	.word	0x080057ea
 8004e38:	080057ee 	.word	0x080057ee
 8004e3c:	00000000 	.word	0x00000000
 8004e40:	08004b8d 	.word	0x08004b8d

08004e44 <_printf_common>:
 8004e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	4616      	mov	r6, r2
 8004e4a:	4699      	mov	r9, r3
 8004e4c:	688a      	ldr	r2, [r1, #8]
 8004e4e:	690b      	ldr	r3, [r1, #16]
 8004e50:	4607      	mov	r7, r0
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bfb8      	it	lt
 8004e56:	4613      	movlt	r3, r2
 8004e58:	6033      	str	r3, [r6, #0]
 8004e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e5e:	460c      	mov	r4, r1
 8004e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e64:	b10a      	cbz	r2, 8004e6a <_printf_common+0x26>
 8004e66:	3301      	adds	r3, #1
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	0699      	lsls	r1, r3, #26
 8004e6e:	bf42      	ittt	mi
 8004e70:	6833      	ldrmi	r3, [r6, #0]
 8004e72:	3302      	addmi	r3, #2
 8004e74:	6033      	strmi	r3, [r6, #0]
 8004e76:	6825      	ldr	r5, [r4, #0]
 8004e78:	f015 0506 	ands.w	r5, r5, #6
 8004e7c:	d106      	bne.n	8004e8c <_printf_common+0x48>
 8004e7e:	f104 0a19 	add.w	sl, r4, #25
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	6832      	ldr	r2, [r6, #0]
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dc28      	bgt.n	8004ede <_printf_common+0x9a>
 8004e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e90:	1e13      	subs	r3, r2, #0
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	bf18      	it	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	0692      	lsls	r2, r2, #26
 8004e9a:	d42d      	bmi.n	8004ef8 <_printf_common+0xb4>
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea4:	47c0      	blx	r8
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d020      	beq.n	8004eec <_printf_common+0xa8>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	68e5      	ldr	r5, [r4, #12]
 8004eae:	f003 0306 	and.w	r3, r3, #6
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf18      	it	ne
 8004eb6:	2500      	movne	r5, #0
 8004eb8:	6832      	ldr	r2, [r6, #0]
 8004eba:	f04f 0600 	mov.w	r6, #0
 8004ebe:	68a3      	ldr	r3, [r4, #8]
 8004ec0:	bf08      	it	eq
 8004ec2:	1aad      	subeq	r5, r5, r2
 8004ec4:	6922      	ldr	r2, [r4, #16]
 8004ec6:	bf08      	it	eq
 8004ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bfc4      	itt	gt
 8004ed0:	1a9b      	subgt	r3, r3, r2
 8004ed2:	18ed      	addgt	r5, r5, r3
 8004ed4:	341a      	adds	r4, #26
 8004ed6:	42b5      	cmp	r5, r6
 8004ed8:	d11a      	bne.n	8004f10 <_printf_common+0xcc>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e008      	b.n	8004ef0 <_printf_common+0xac>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4652      	mov	r2, sl
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	47c0      	blx	r8
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d103      	bne.n	8004ef4 <_printf_common+0xb0>
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	e7c4      	b.n	8004e82 <_printf_common+0x3e>
 8004ef8:	2030      	movs	r0, #48	; 0x30
 8004efa:	18e1      	adds	r1, r4, r3
 8004efc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f06:	4422      	add	r2, r4
 8004f08:	3302      	adds	r3, #2
 8004f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f0e:	e7c5      	b.n	8004e9c <_printf_common+0x58>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4622      	mov	r2, r4
 8004f14:	4649      	mov	r1, r9
 8004f16:	4638      	mov	r0, r7
 8004f18:	47c0      	blx	r8
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d0e6      	beq.n	8004eec <_printf_common+0xa8>
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7d9      	b.n	8004ed6 <_printf_common+0x92>
	...

08004f24 <_printf_i>:
 8004f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	7e0f      	ldrb	r7, [r1, #24]
 8004f2a:	4691      	mov	r9, r2
 8004f2c:	2f78      	cmp	r7, #120	; 0x78
 8004f2e:	4680      	mov	r8, r0
 8004f30:	460c      	mov	r4, r1
 8004f32:	469a      	mov	sl, r3
 8004f34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f3a:	d807      	bhi.n	8004f4c <_printf_i+0x28>
 8004f3c:	2f62      	cmp	r7, #98	; 0x62
 8004f3e:	d80a      	bhi.n	8004f56 <_printf_i+0x32>
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	f000 80d9 	beq.w	80050f8 <_printf_i+0x1d4>
 8004f46:	2f58      	cmp	r7, #88	; 0x58
 8004f48:	f000 80a4 	beq.w	8005094 <_printf_i+0x170>
 8004f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f54:	e03a      	b.n	8004fcc <_printf_i+0xa8>
 8004f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f5a:	2b15      	cmp	r3, #21
 8004f5c:	d8f6      	bhi.n	8004f4c <_printf_i+0x28>
 8004f5e:	a101      	add	r1, pc, #4	; (adr r1, 8004f64 <_printf_i+0x40>)
 8004f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	08004fd1 	.word	0x08004fd1
 8004f6c:	08004f4d 	.word	0x08004f4d
 8004f70:	08004f4d 	.word	0x08004f4d
 8004f74:	08004f4d 	.word	0x08004f4d
 8004f78:	08004f4d 	.word	0x08004f4d
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08004f4d 	.word	0x08004f4d
 8004f84:	08004f4d 	.word	0x08004f4d
 8004f88:	08004f4d 	.word	0x08004f4d
 8004f8c:	08004f4d 	.word	0x08004f4d
 8004f90:	080050df 	.word	0x080050df
 8004f94:	08005001 	.word	0x08005001
 8004f98:	080050c1 	.word	0x080050c1
 8004f9c:	08004f4d 	.word	0x08004f4d
 8004fa0:	08004f4d 	.word	0x08004f4d
 8004fa4:	08005101 	.word	0x08005101
 8004fa8:	08004f4d 	.word	0x08004f4d
 8004fac:	08005001 	.word	0x08005001
 8004fb0:	08004f4d 	.word	0x08004f4d
 8004fb4:	08004f4d 	.word	0x08004f4d
 8004fb8:	080050c9 	.word	0x080050c9
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	602a      	str	r2, [r5, #0]
 8004fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0a4      	b.n	800511a <_printf_i+0x1f6>
 8004fd0:	6820      	ldr	r0, [r4, #0]
 8004fd2:	6829      	ldr	r1, [r5, #0]
 8004fd4:	0606      	lsls	r6, r0, #24
 8004fd6:	f101 0304 	add.w	r3, r1, #4
 8004fda:	d50a      	bpl.n	8004ff2 <_printf_i+0xce>
 8004fdc:	680e      	ldr	r6, [r1, #0]
 8004fde:	602b      	str	r3, [r5, #0]
 8004fe0:	2e00      	cmp	r6, #0
 8004fe2:	da03      	bge.n	8004fec <_printf_i+0xc8>
 8004fe4:	232d      	movs	r3, #45	; 0x2d
 8004fe6:	4276      	negs	r6, r6
 8004fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fec:	230a      	movs	r3, #10
 8004fee:	485e      	ldr	r0, [pc, #376]	; (8005168 <_printf_i+0x244>)
 8004ff0:	e019      	b.n	8005026 <_printf_i+0x102>
 8004ff2:	680e      	ldr	r6, [r1, #0]
 8004ff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ff8:	602b      	str	r3, [r5, #0]
 8004ffa:	bf18      	it	ne
 8004ffc:	b236      	sxthne	r6, r6
 8004ffe:	e7ef      	b.n	8004fe0 <_printf_i+0xbc>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	6820      	ldr	r0, [r4, #0]
 8005004:	1d19      	adds	r1, r3, #4
 8005006:	6029      	str	r1, [r5, #0]
 8005008:	0601      	lsls	r1, r0, #24
 800500a:	d501      	bpl.n	8005010 <_printf_i+0xec>
 800500c:	681e      	ldr	r6, [r3, #0]
 800500e:	e002      	b.n	8005016 <_printf_i+0xf2>
 8005010:	0646      	lsls	r6, r0, #25
 8005012:	d5fb      	bpl.n	800500c <_printf_i+0xe8>
 8005014:	881e      	ldrh	r6, [r3, #0]
 8005016:	2f6f      	cmp	r7, #111	; 0x6f
 8005018:	bf0c      	ite	eq
 800501a:	2308      	moveq	r3, #8
 800501c:	230a      	movne	r3, #10
 800501e:	4852      	ldr	r0, [pc, #328]	; (8005168 <_printf_i+0x244>)
 8005020:	2100      	movs	r1, #0
 8005022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005026:	6865      	ldr	r5, [r4, #4]
 8005028:	2d00      	cmp	r5, #0
 800502a:	bfa8      	it	ge
 800502c:	6821      	ldrge	r1, [r4, #0]
 800502e:	60a5      	str	r5, [r4, #8]
 8005030:	bfa4      	itt	ge
 8005032:	f021 0104 	bicge.w	r1, r1, #4
 8005036:	6021      	strge	r1, [r4, #0]
 8005038:	b90e      	cbnz	r6, 800503e <_printf_i+0x11a>
 800503a:	2d00      	cmp	r5, #0
 800503c:	d04d      	beq.n	80050da <_printf_i+0x1b6>
 800503e:	4615      	mov	r5, r2
 8005040:	fbb6 f1f3 	udiv	r1, r6, r3
 8005044:	fb03 6711 	mls	r7, r3, r1, r6
 8005048:	5dc7      	ldrb	r7, [r0, r7]
 800504a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800504e:	4637      	mov	r7, r6
 8005050:	42bb      	cmp	r3, r7
 8005052:	460e      	mov	r6, r1
 8005054:	d9f4      	bls.n	8005040 <_printf_i+0x11c>
 8005056:	2b08      	cmp	r3, #8
 8005058:	d10b      	bne.n	8005072 <_printf_i+0x14e>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	07de      	lsls	r6, r3, #31
 800505e:	d508      	bpl.n	8005072 <_printf_i+0x14e>
 8005060:	6923      	ldr	r3, [r4, #16]
 8005062:	6861      	ldr	r1, [r4, #4]
 8005064:	4299      	cmp	r1, r3
 8005066:	bfde      	ittt	le
 8005068:	2330      	movle	r3, #48	; 0x30
 800506a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800506e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005072:	1b52      	subs	r2, r2, r5
 8005074:	6122      	str	r2, [r4, #16]
 8005076:	464b      	mov	r3, r9
 8005078:	4621      	mov	r1, r4
 800507a:	4640      	mov	r0, r8
 800507c:	f8cd a000 	str.w	sl, [sp]
 8005080:	aa03      	add	r2, sp, #12
 8005082:	f7ff fedf 	bl	8004e44 <_printf_common>
 8005086:	3001      	adds	r0, #1
 8005088:	d14c      	bne.n	8005124 <_printf_i+0x200>
 800508a:	f04f 30ff 	mov.w	r0, #4294967295
 800508e:	b004      	add	sp, #16
 8005090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005094:	4834      	ldr	r0, [pc, #208]	; (8005168 <_printf_i+0x244>)
 8005096:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800509a:	6829      	ldr	r1, [r5, #0]
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	f851 6b04 	ldr.w	r6, [r1], #4
 80050a2:	6029      	str	r1, [r5, #0]
 80050a4:	061d      	lsls	r5, r3, #24
 80050a6:	d514      	bpl.n	80050d2 <_printf_i+0x1ae>
 80050a8:	07df      	lsls	r7, r3, #31
 80050aa:	bf44      	itt	mi
 80050ac:	f043 0320 	orrmi.w	r3, r3, #32
 80050b0:	6023      	strmi	r3, [r4, #0]
 80050b2:	b91e      	cbnz	r6, 80050bc <_printf_i+0x198>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	2310      	movs	r3, #16
 80050be:	e7af      	b.n	8005020 <_printf_i+0xfc>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	f043 0320 	orr.w	r3, r3, #32
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	2378      	movs	r3, #120	; 0x78
 80050ca:	4828      	ldr	r0, [pc, #160]	; (800516c <_printf_i+0x248>)
 80050cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050d0:	e7e3      	b.n	800509a <_printf_i+0x176>
 80050d2:	0659      	lsls	r1, r3, #25
 80050d4:	bf48      	it	mi
 80050d6:	b2b6      	uxthmi	r6, r6
 80050d8:	e7e6      	b.n	80050a8 <_printf_i+0x184>
 80050da:	4615      	mov	r5, r2
 80050dc:	e7bb      	b.n	8005056 <_printf_i+0x132>
 80050de:	682b      	ldr	r3, [r5, #0]
 80050e0:	6826      	ldr	r6, [r4, #0]
 80050e2:	1d18      	adds	r0, r3, #4
 80050e4:	6961      	ldr	r1, [r4, #20]
 80050e6:	6028      	str	r0, [r5, #0]
 80050e8:	0635      	lsls	r5, r6, #24
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	d501      	bpl.n	80050f2 <_printf_i+0x1ce>
 80050ee:	6019      	str	r1, [r3, #0]
 80050f0:	e002      	b.n	80050f8 <_printf_i+0x1d4>
 80050f2:	0670      	lsls	r0, r6, #25
 80050f4:	d5fb      	bpl.n	80050ee <_printf_i+0x1ca>
 80050f6:	8019      	strh	r1, [r3, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	4615      	mov	r5, r2
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	e7ba      	b.n	8005076 <_printf_i+0x152>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	2100      	movs	r1, #0
 8005104:	1d1a      	adds	r2, r3, #4
 8005106:	602a      	str	r2, [r5, #0]
 8005108:	681d      	ldr	r5, [r3, #0]
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	4628      	mov	r0, r5
 800510e:	f000 f83f 	bl	8005190 <memchr>
 8005112:	b108      	cbz	r0, 8005118 <_printf_i+0x1f4>
 8005114:	1b40      	subs	r0, r0, r5
 8005116:	6060      	str	r0, [r4, #4]
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	2300      	movs	r3, #0
 800511e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005122:	e7a8      	b.n	8005076 <_printf_i+0x152>
 8005124:	462a      	mov	r2, r5
 8005126:	4649      	mov	r1, r9
 8005128:	4640      	mov	r0, r8
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	47d0      	blx	sl
 800512e:	3001      	adds	r0, #1
 8005130:	d0ab      	beq.n	800508a <_printf_i+0x166>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	079b      	lsls	r3, r3, #30
 8005136:	d413      	bmi.n	8005160 <_printf_i+0x23c>
 8005138:	68e0      	ldr	r0, [r4, #12]
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	4298      	cmp	r0, r3
 800513e:	bfb8      	it	lt
 8005140:	4618      	movlt	r0, r3
 8005142:	e7a4      	b.n	800508e <_printf_i+0x16a>
 8005144:	2301      	movs	r3, #1
 8005146:	4632      	mov	r2, r6
 8005148:	4649      	mov	r1, r9
 800514a:	4640      	mov	r0, r8
 800514c:	47d0      	blx	sl
 800514e:	3001      	adds	r0, #1
 8005150:	d09b      	beq.n	800508a <_printf_i+0x166>
 8005152:	3501      	adds	r5, #1
 8005154:	68e3      	ldr	r3, [r4, #12]
 8005156:	9903      	ldr	r1, [sp, #12]
 8005158:	1a5b      	subs	r3, r3, r1
 800515a:	42ab      	cmp	r3, r5
 800515c:	dcf2      	bgt.n	8005144 <_printf_i+0x220>
 800515e:	e7eb      	b.n	8005138 <_printf_i+0x214>
 8005160:	2500      	movs	r5, #0
 8005162:	f104 0619 	add.w	r6, r4, #25
 8005166:	e7f5      	b.n	8005154 <_printf_i+0x230>
 8005168:	080057f5 	.word	0x080057f5
 800516c:	08005806 	.word	0x08005806

08005170 <_sbrk_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	2300      	movs	r3, #0
 8005174:	4d05      	ldr	r5, [pc, #20]	; (800518c <_sbrk_r+0x1c>)
 8005176:	4604      	mov	r4, r0
 8005178:	4608      	mov	r0, r1
 800517a:	602b      	str	r3, [r5, #0]
 800517c:	f7fb fdd8 	bl	8000d30 <_sbrk>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d102      	bne.n	800518a <_sbrk_r+0x1a>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	b103      	cbz	r3, 800518a <_sbrk_r+0x1a>
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	bd38      	pop	{r3, r4, r5, pc}
 800518c:	200006ec 	.word	0x200006ec

08005190 <memchr>:
 8005190:	4603      	mov	r3, r0
 8005192:	b510      	push	{r4, lr}
 8005194:	b2c9      	uxtb	r1, r1
 8005196:	4402      	add	r2, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	4618      	mov	r0, r3
 800519c:	d101      	bne.n	80051a2 <memchr+0x12>
 800519e:	2000      	movs	r0, #0
 80051a0:	e003      	b.n	80051aa <memchr+0x1a>
 80051a2:	7804      	ldrb	r4, [r0, #0]
 80051a4:	3301      	adds	r3, #1
 80051a6:	428c      	cmp	r4, r1
 80051a8:	d1f6      	bne.n	8005198 <memchr+0x8>
 80051aa:	bd10      	pop	{r4, pc}

080051ac <memcpy>:
 80051ac:	440a      	add	r2, r1
 80051ae:	4291      	cmp	r1, r2
 80051b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80051b4:	d100      	bne.n	80051b8 <memcpy+0xc>
 80051b6:	4770      	bx	lr
 80051b8:	b510      	push	{r4, lr}
 80051ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051be:	4291      	cmp	r1, r2
 80051c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051c4:	d1f9      	bne.n	80051ba <memcpy+0xe>
 80051c6:	bd10      	pop	{r4, pc}

080051c8 <memmove>:
 80051c8:	4288      	cmp	r0, r1
 80051ca:	b510      	push	{r4, lr}
 80051cc:	eb01 0402 	add.w	r4, r1, r2
 80051d0:	d902      	bls.n	80051d8 <memmove+0x10>
 80051d2:	4284      	cmp	r4, r0
 80051d4:	4623      	mov	r3, r4
 80051d6:	d807      	bhi.n	80051e8 <memmove+0x20>
 80051d8:	1e43      	subs	r3, r0, #1
 80051da:	42a1      	cmp	r1, r4
 80051dc:	d008      	beq.n	80051f0 <memmove+0x28>
 80051de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051e6:	e7f8      	b.n	80051da <memmove+0x12>
 80051e8:	4601      	mov	r1, r0
 80051ea:	4402      	add	r2, r0
 80051ec:	428a      	cmp	r2, r1
 80051ee:	d100      	bne.n	80051f2 <memmove+0x2a>
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051fa:	e7f7      	b.n	80051ec <memmove+0x24>

080051fc <__malloc_lock>:
 80051fc:	4801      	ldr	r0, [pc, #4]	; (8005204 <__malloc_lock+0x8>)
 80051fe:	f7ff bc2f 	b.w	8004a60 <__retarget_lock_acquire_recursive>
 8005202:	bf00      	nop
 8005204:	200006e0 	.word	0x200006e0

08005208 <__malloc_unlock>:
 8005208:	4801      	ldr	r0, [pc, #4]	; (8005210 <__malloc_unlock+0x8>)
 800520a:	f7ff bc2a 	b.w	8004a62 <__retarget_lock_release_recursive>
 800520e:	bf00      	nop
 8005210:	200006e0 	.word	0x200006e0

08005214 <_free_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4605      	mov	r5, r0
 8005218:	2900      	cmp	r1, #0
 800521a:	d040      	beq.n	800529e <_free_r+0x8a>
 800521c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005220:	1f0c      	subs	r4, r1, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfb8      	it	lt
 8005226:	18e4      	addlt	r4, r4, r3
 8005228:	f7ff ffe8 	bl	80051fc <__malloc_lock>
 800522c:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <_free_r+0x8c>)
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	b933      	cbnz	r3, 8005240 <_free_r+0x2c>
 8005232:	6063      	str	r3, [r4, #4]
 8005234:	6014      	str	r4, [r2, #0]
 8005236:	4628      	mov	r0, r5
 8005238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800523c:	f7ff bfe4 	b.w	8005208 <__malloc_unlock>
 8005240:	42a3      	cmp	r3, r4
 8005242:	d908      	bls.n	8005256 <_free_r+0x42>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	1821      	adds	r1, r4, r0
 8005248:	428b      	cmp	r3, r1
 800524a:	bf01      	itttt	eq
 800524c:	6819      	ldreq	r1, [r3, #0]
 800524e:	685b      	ldreq	r3, [r3, #4]
 8005250:	1809      	addeq	r1, r1, r0
 8005252:	6021      	streq	r1, [r4, #0]
 8005254:	e7ed      	b.n	8005232 <_free_r+0x1e>
 8005256:	461a      	mov	r2, r3
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b10b      	cbz	r3, 8005260 <_free_r+0x4c>
 800525c:	42a3      	cmp	r3, r4
 800525e:	d9fa      	bls.n	8005256 <_free_r+0x42>
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	1850      	adds	r0, r2, r1
 8005264:	42a0      	cmp	r0, r4
 8005266:	d10b      	bne.n	8005280 <_free_r+0x6c>
 8005268:	6820      	ldr	r0, [r4, #0]
 800526a:	4401      	add	r1, r0
 800526c:	1850      	adds	r0, r2, r1
 800526e:	4283      	cmp	r3, r0
 8005270:	6011      	str	r1, [r2, #0]
 8005272:	d1e0      	bne.n	8005236 <_free_r+0x22>
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4401      	add	r1, r0
 800527a:	6011      	str	r1, [r2, #0]
 800527c:	6053      	str	r3, [r2, #4]
 800527e:	e7da      	b.n	8005236 <_free_r+0x22>
 8005280:	d902      	bls.n	8005288 <_free_r+0x74>
 8005282:	230c      	movs	r3, #12
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	e7d6      	b.n	8005236 <_free_r+0x22>
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	1821      	adds	r1, r4, r0
 800528c:	428b      	cmp	r3, r1
 800528e:	bf01      	itttt	eq
 8005290:	6819      	ldreq	r1, [r3, #0]
 8005292:	685b      	ldreq	r3, [r3, #4]
 8005294:	1809      	addeq	r1, r1, r0
 8005296:	6021      	streq	r1, [r4, #0]
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	6054      	str	r4, [r2, #4]
 800529c:	e7cb      	b.n	8005236 <_free_r+0x22>
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	200006e4 	.word	0x200006e4

080052a4 <_realloc_r>:
 80052a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a8:	4680      	mov	r8, r0
 80052aa:	4614      	mov	r4, r2
 80052ac:	460e      	mov	r6, r1
 80052ae:	b921      	cbnz	r1, 80052ba <_realloc_r+0x16>
 80052b0:	4611      	mov	r1, r2
 80052b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	f7ff bbf5 	b.w	8004aa4 <_malloc_r>
 80052ba:	b92a      	cbnz	r2, 80052c8 <_realloc_r+0x24>
 80052bc:	f7ff ffaa 	bl	8005214 <_free_r>
 80052c0:	4625      	mov	r5, r4
 80052c2:	4628      	mov	r0, r5
 80052c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c8:	f000 f81b 	bl	8005302 <_malloc_usable_size_r>
 80052cc:	4284      	cmp	r4, r0
 80052ce:	4607      	mov	r7, r0
 80052d0:	d802      	bhi.n	80052d8 <_realloc_r+0x34>
 80052d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052d6:	d812      	bhi.n	80052fe <_realloc_r+0x5a>
 80052d8:	4621      	mov	r1, r4
 80052da:	4640      	mov	r0, r8
 80052dc:	f7ff fbe2 	bl	8004aa4 <_malloc_r>
 80052e0:	4605      	mov	r5, r0
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d0ed      	beq.n	80052c2 <_realloc_r+0x1e>
 80052e6:	42bc      	cmp	r4, r7
 80052e8:	4622      	mov	r2, r4
 80052ea:	4631      	mov	r1, r6
 80052ec:	bf28      	it	cs
 80052ee:	463a      	movcs	r2, r7
 80052f0:	f7ff ff5c 	bl	80051ac <memcpy>
 80052f4:	4631      	mov	r1, r6
 80052f6:	4640      	mov	r0, r8
 80052f8:	f7ff ff8c 	bl	8005214 <_free_r>
 80052fc:	e7e1      	b.n	80052c2 <_realloc_r+0x1e>
 80052fe:	4635      	mov	r5, r6
 8005300:	e7df      	b.n	80052c2 <_realloc_r+0x1e>

08005302 <_malloc_usable_size_r>:
 8005302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005306:	1f18      	subs	r0, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	bfbc      	itt	lt
 800530c:	580b      	ldrlt	r3, [r1, r0]
 800530e:	18c0      	addlt	r0, r0, r3
 8005310:	4770      	bx	lr
	...

08005314 <_init>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr

08005320 <_fini>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr
