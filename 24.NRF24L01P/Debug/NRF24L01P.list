
NRF24L01P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e4  080035e4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080035e4  080035e4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035e4  080035e4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080035ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000014  08003600  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003600  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a383  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df2  00000000  00000000  0002a403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000785  00000000  00000000  0002cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017661  00000000  00000000  0002d355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b5a1  00000000  00000000  000449b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008419a  00000000  00000000  0004ff57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000273c  00000000  00000000  000d40f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d6830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080035a0 	.word	0x080035a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080035a0 	.word	0x080035a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb53 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f85d 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f901 	bl	8000360 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f89f 	bl	80002a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8d3 	bl	800030c <MX_USART1_UART_Init>
  nrf24l01p_rx_init(2500, _1Mbps,address);

  	#endif

#ifdef TRANSMITTER
	rxBufferInit(&uart_rx);
 8000166:	4827      	ldr	r0, [pc, #156]	; (8000204 <main+0xb8>)
 8000168:	f000 fa84 	bl	8000674 <rxBufferInit>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
 800016c:	4b26      	ldr	r3, [pc, #152]	; (8000208 <main+0xbc>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	695a      	ldr	r2, [r3, #20]
 8000172:	4b25      	ldr	r3, [pc, #148]	; (8000208 <main+0xbc>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	f042 0201 	orr.w	r2, r2, #1
 800017a:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800017c:	4b22      	ldr	r3, [pc, #136]	; (8000208 <main+0xbc>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	68da      	ldr	r2, [r3, #12]
 8000182:	4b21      	ldr	r3, [pc, #132]	; (8000208 <main+0xbc>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f042 0220 	orr.w	r2, r2, #32
 800018a:	60da      	str	r2, [r3, #12]

	nrf24l01p_tx_init(2500, _1Mbps,address);
 800018c:	4a1f      	ldr	r2, [pc, #124]	; (800020c <main+0xc0>)
 800018e:	2100      	movs	r1, #0
 8000190:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000194:	f002 ffa6 	bl	80030e4 <nrf24l01p_tx_init>
	  }
#endif

#ifdef TRANSMITTER

		memset(tx_data, 0, sizeof(tx_data));
 8000198:	2220      	movs	r2, #32
 800019a:	2100      	movs	r1, #0
 800019c:	481c      	ldr	r0, [pc, #112]	; (8000210 <main+0xc4>)
 800019e:	f003 f9d2 	bl	8003546 <memset>

		int num = uart_available(&uart_rx);
 80001a2:	4818      	ldr	r0, [pc, #96]	; (8000204 <main+0xb8>)
 80001a4:	f000 fac2 	bl	800072c <uart_available>
 80001a8:	4603      	mov	r3, r0
 80001aa:	60bb      	str	r3, [r7, #8]
		int i;
		if (num) {
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d023      	beq.n	80001fa <main+0xae>
			for (i = 0; i < num; i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	60fb      	str	r3, [r7, #12]
 80001b6:	e012      	b.n	80001de <main+0x92>

				int ch = pop(&uart_rx);
 80001b8:	4812      	ldr	r0, [pc, #72]	; (8000204 <main+0xb8>)
 80001ba:	f000 fa92 	bl	80006e2 <pop>
 80001be:	4603      	mov	r3, r0
 80001c0:	607b      	str	r3, [r7, #4]
				if (ch != -1) {
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001c8:	d006      	beq.n	80001d8 <main+0x8c>
					tx_data[i] = ch;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	b2d9      	uxtb	r1, r3
 80001ce:	4a10      	ldr	r2, [pc, #64]	; (8000210 <main+0xc4>)
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	4413      	add	r3, r2
 80001d4:	460a      	mov	r2, r1
 80001d6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < num; i++) {
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	3301      	adds	r3, #1
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	68fa      	ldr	r2, [r7, #12]
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	dbe8      	blt.n	80001b8 <main+0x6c>
				}
			}
			HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 500);
 80001e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001ea:	2220      	movs	r2, #32
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <main+0xc4>)
 80001ee:	4806      	ldr	r0, [pc, #24]	; (8000208 <main+0xbc>)
 80001f0:	f002 f8e6 	bl	80023c0 <HAL_UART_Transmit>
			nrf24l01p_tx_transmit(tx_data);
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <main+0xc4>)
 80001f6:	f002 ffa4 	bl	8003142 <nrf24l01p_tx_transmit>
		}


#endif

		HAL_Delay(100);
 80001fa:	2064      	movs	r0, #100	; 0x64
 80001fc:	f000 fb60 	bl	80008c0 <HAL_Delay>
  {
 8000200:	e7ca      	b.n	8000198 <main+0x4c>
 8000202:	bf00      	nop
 8000204:	200000f0 	.word	0x200000f0
 8000208:	20000088 	.word	0x20000088
 800020c:	20000000 	.word	0x20000000
 8000210:	200000d0 	.word	0x200000d0

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 f98f 	bl	8003546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000236:	2301      	movs	r3, #1
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000248:	2302      	movs	r3, #2
 800024a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000252:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000256:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fec7 	bl	8000ff0 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000268:	f000 f8ee 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2302      	movs	r3, #2
 8000272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f001 f934 	bl	80014f4 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000292:	f000 f8d9 	bl	8000448 <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3740      	adds	r7, #64	; 0x40
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_SPI1_Init+0x64>)
 80002a6:	4a18      	ldr	r2, [pc, #96]	; (8000308 <MX_SPI1_Init+0x68>)
 80002a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_SPI1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_SPI1_Init+0x64>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_SPI1_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_SPI1_Init+0x64>)
 80002cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_SPI1_Init+0x64>)
 80002d4:	2218      	movs	r2, #24
 80002d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <MX_SPI1_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_SPI1_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <MX_SPI1_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ec:	220a      	movs	r2, #10
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_SPI1_Init+0x64>)
 80002f2:	f001 fa8d 	bl	8001810 <HAL_SPI_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002fc:	f000 f8a4 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000030 	.word	0x20000030
 8000308:	40013000 	.word	0x40013000

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f001 ffec 	bl	8002320 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f87b 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000088 	.word	0x20000088
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000374:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <MX_GPIO_Init+0xc0>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a29      	ldr	r2, [pc, #164]	; (8000420 <MX_GPIO_Init+0xc0>)
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_GPIO_Init+0xc0>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0320 	and.w	r3, r3, #32
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b24      	ldr	r3, [pc, #144]	; (8000420 <MX_GPIO_Init+0xc0>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a23      	ldr	r2, [pc, #140]	; (8000420 <MX_GPIO_Init+0xc0>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b21      	ldr	r3, [pc, #132]	; (8000420 <MX_GPIO_Init+0xc0>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2108      	movs	r1, #8
 80003a8:	481e      	ldr	r0, [pc, #120]	; (8000424 <MX_GPIO_Init+0xc4>)
 80003aa:	f000 fdf1 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	481c      	ldr	r0, [pc, #112]	; (8000424 <MX_GPIO_Init+0xc4>)
 80003b4:	f000 fdec 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80003b8:	2304      	movs	r3, #4
 80003ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_GPIO_Init+0xc8>)
 80003be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 0308 	add.w	r3, r7, #8
 80003c8:	4619      	mov	r1, r3
 80003ca:	4816      	ldr	r0, [pc, #88]	; (8000424 <MX_GPIO_Init+0xc4>)
 80003cc:	f000 fc5c 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 80003d0:	2308      	movs	r3, #8
 80003d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d8:	2301      	movs	r3, #1
 80003da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003dc:	2303      	movs	r3, #3
 80003de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0308 	add.w	r3, r7, #8
 80003e4:	4619      	mov	r1, r3
 80003e6:	480f      	ldr	r0, [pc, #60]	; (8000424 <MX_GPIO_Init+0xc4>)
 80003e8:	f000 fc4e 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 80003ec:	2310      	movs	r3, #16
 80003ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003f4:	2302      	movs	r3, #2
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f8:	2303      	movs	r3, #3
 80003fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80003fc:	f107 0308 	add.w	r3, r7, #8
 8000400:	4619      	mov	r1, r3
 8000402:	4808      	ldr	r0, [pc, #32]	; (8000424 <MX_GPIO_Init+0xc4>)
 8000404:	f000 fc40 	bl	8000c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2100      	movs	r1, #0
 800040c:	2008      	movs	r0, #8
 800040e:	f000 fb52 	bl	8000ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000412:	2008      	movs	r0, #8
 8000414:	f000 fb6b 	bl	8000aee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800
 8000428:	10210000 	.word	0x10210000

0800042c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	2b04      	cmp	r3, #4
 800043a:	d101      	bne.n	8000440 <HAL_GPIO_EXTI_Callback+0x14>
		nrf24l01p_rx_flag=1;
	    nrf24l01p_rx_receive(rx_data);
#endif

#ifdef TRANSMITTER
		nrf24l01p_tx_irq();
 800043c:	f002 fe8c 	bl	8003158 <nrf24l01p_tx_irq>
#endif
	}

}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	e7fe      	b.n	8000450 <Error_Handler+0x8>
	...

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <HAL_MspInit+0x5c>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_MspInit+0x5c>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <HAL_MspInit+0x60>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <HAL_MspInit+0x60>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <HAL_SPI_MspInit+0x88>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d12f      	bne.n	8000538 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a19      	ldr	r2, [pc, #100]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050c:	2302      	movs	r3, #2
 800050e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	480b      	ldr	r0, [pc, #44]	; (8000548 <HAL_SPI_MspInit+0x90>)
 800051c:	f000 fbb4 	bl	8000c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000520:	2340      	movs	r3, #64	; 0x40
 8000522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <HAL_SPI_MspInit+0x90>)
 8000534:	f000 fba8 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40013000 	.word	0x40013000
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <HAL_UART_MspInit+0x9c>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d139      	bne.n	80005e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <HAL_UART_MspInit+0xa0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <HAL_UART_MspInit+0xa0>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <HAL_UART_MspInit+0xa0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <HAL_UART_MspInit+0xa0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a18      	ldr	r2, [pc, #96]	; (80005ec <HAL_UART_MspInit+0xa0>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <HAL_UART_MspInit+0xa0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <HAL_UART_MspInit+0xa4>)
 80005b2:	f000 fb69 	bl	8000c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <HAL_UART_MspInit+0xa4>)
 80005cc:	f000 fb5c 	bl	8000c88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	2025      	movs	r0, #37	; 0x25
 80005d6:	f000 fa6e 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005da:	2025      	movs	r0, #37	; 0x25
 80005dc:	f000 fa87 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40013800 	.word	0x40013800
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler+0x4>

08000606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler+0x4>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 f925 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}

08000642 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000646:	2004      	movs	r0, #4
 8000648:	f000 fcba 	bl	8000fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <USART1_IRQHandler+0x14>)
 8000656:	f000 f883 	bl	8000760 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800065a:	4802      	ldr	r0, [pc, #8]	; (8000664 <USART1_IRQHandler+0x14>)
 800065c:	f001 ff34 	bl	80024c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000088 	.word	0x20000088

08000668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart1;

void rxBufferInit(ring_buffer_t *uart) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	841a      	strh	r2, [r3, #32]
	uart->tail = 0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	845a      	strh	r2, [r3, #34]	; 0x22
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2204      	movs	r2, #4
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 ff59 	bl	8003546 <memset>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	8c1b      	ldrh	r3, [r3, #32]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	3301      	adds	r3, #1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f003 031f 	and.w	r3, r3, #31
 80006b6:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80006bc:	b29b      	uxth	r3, r3
 80006be:	89fa      	ldrh	r2, [r7, #14]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d009      	beq.n	80006d8 <push+0x3c>
		uart->buffer[uart->head] = ch;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	8c1b      	ldrh	r3, [r3, #32]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	78fa      	ldrb	r2, [r7, #3]
 80006d0:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	89fa      	ldrh	r2, [r7, #14]
 80006d6:	841a      	strh	r2, [r3, #32]
	}
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <pop>:

uint8_t pop(ring_buffer_t *uart) {
 80006e2:	b480      	push	{r7}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	8c1b      	ldrh	r3, [r3, #32]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d101      	bne.n	80006fe <pop+0x1c>
		return -1;
 80006fa:	23ff      	movs	r3, #255	; 0xff
 80006fc:	e011      	b.n	8000722 <pop+0x40>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000702:	b29b      	uxth	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	5c9b      	ldrb	r3, [r3, r2]
 800070a:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000710:	b29b      	uxth	r3, r3
 8000712:	3301      	adds	r3, #1
 8000714:	b29b      	uxth	r3, r3
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	845a      	strh	r2, [r3, #34]	; 0x22

		return cpop;
 8000720:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 8000722:	4618      	mov	r0, r3
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8c1b      	ldrh	r3, [r3, #32]
 8000738:	b29b      	uxth	r3, r3
 800073a:	b2da      	uxtb	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000740:	b29b      	uxth	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	3320      	adds	r3, #32
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 031f 	and.w	r3, r3, #31
 8000750:	73fb      	strb	r3, [r7, #15]
			% RX_BUFFER_SIZE;
	return n;
 8000752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	f003 0320 	and.w	r3, r3, #32
 800077e:	2b00      	cmp	r3, #0
 8000780:	d011      	beq.n	80007a6 <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	f003 0320 	and.w	r3, r3, #32
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00c      	beq.n	80007a6 <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <Uart_isr+0x4c>)
 80007a0:	f7ff ff7c 	bl	800069c <push>
		return;
 80007a4:	bf00      	nop
	}
}
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000f0 	.word	0x200000f0

080007b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b0:	f7ff ff5a 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007b6:	490c      	ldr	r1, [pc, #48]	; (80007e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007cc:	4c09      	ldr	r4, [pc, #36]	; (80007f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f002 febd 	bl	8003558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fcb5 	bl	800014c <main>
  bx lr
 80007e2:	4770      	bx	lr
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80007ec:	080035ec 	.word	0x080035ec
  ldr r2, =_sbss
 80007f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80007f4:	20000118 	.word	0x20000118

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f947 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	200f      	movs	r0, #15
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fe1c 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f95f 	bl	8000b0a <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f927 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000008 	.word	0x20000008
 8000880:	20000010 	.word	0x20000010
 8000884:	2000000c 	.word	0x2000000c

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x1c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x20>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <HAL_IncTick+0x20>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	20000010 	.word	0x20000010
 80008a8:	20000114 	.word	0x20000114

080008ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <HAL_GetTick+0x10>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000114 	.word	0x20000114

080008c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff fff0 	bl	80008ac <HAL_GetTick>
 80008cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d8:	d005      	beq.n	80008e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_Delay+0x44>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e6:	bf00      	nop
 80008e8:	f7ff ffe0 	bl	80008ac <HAL_GetTick>
 80008ec:	4602      	mov	r2, r0
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d8f7      	bhi.n	80008e8 <HAL_Delay+0x28>
  {
  }
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000010 	.word	0x20000010

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db0b      	blt.n	8000996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f003 021f 	and.w	r2, r3, #31
 8000984:	4906      	ldr	r1, [pc, #24]	; (80009a0 <__NVIC_EnableIRQ+0x34>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	2001      	movs	r0, #1
 800098e:	fa00 f202 	lsl.w	r2, r0, r2
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff90 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff2d 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff42 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff90 	bl	80009f8 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5f 	bl	80009a4 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff35 	bl	800096c <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d008      	beq.n	8000b4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e020      	b.n	8000b8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 020e 	bic.w	r2, r2, #14
 8000b5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0201 	bic.w	r2, r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d005      	beq.n	8000bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e051      	b.n	8000c60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 020e 	bic.w	r2, r2, #14
 8000bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0201 	bic.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <HAL_DMA_Abort_IT+0xd4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d029      	beq.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <HAL_DMA_Abort_IT+0xd8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d022      	beq.n	8000c36 <HAL_DMA_Abort_IT+0x9e>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_DMA_Abort_IT+0xdc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d01a      	beq.n	8000c30 <HAL_DMA_Abort_IT+0x98>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_DMA_Abort_IT+0xe0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d012      	beq.n	8000c2a <HAL_DMA_Abort_IT+0x92>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <HAL_DMA_Abort_IT+0xe4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00a      	beq.n	8000c24 <HAL_DMA_Abort_IT+0x8c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <HAL_DMA_Abort_IT+0xe8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d102      	bne.n	8000c1e <HAL_DMA_Abort_IT+0x86>
 8000c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c1c:	e00e      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c22:	e00b      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	e008      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	e005      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	e002      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c36:	2310      	movs	r3, #16
 8000c38:	e000      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <HAL_DMA_Abort_IT+0xec>)
 8000c3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	4798      	blx	r3
    } 
  }
  return status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40020008 	.word	0x40020008
 8000c70:	4002001c 	.word	0x4002001c
 8000c74:	40020030 	.word	0x40020030
 8000c78:	40020044 	.word	0x40020044
 8000c7c:	40020058 	.word	0x40020058
 8000c80:	4002006c 	.word	0x4002006c
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e169      	b.n	8000f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8158 	bne.w	8000f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4a9a      	ldr	r2, [pc, #616]	; (8000f28 <HAL_GPIO_Init+0x2a0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d05e      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cc4:	4a98      	ldr	r2, [pc, #608]	; (8000f28 <HAL_GPIO_Init+0x2a0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d875      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cca:	4a98      	ldr	r2, [pc, #608]	; (8000f2c <HAL_GPIO_Init+0x2a4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d058      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cd0:	4a96      	ldr	r2, [pc, #600]	; (8000f2c <HAL_GPIO_Init+0x2a4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d86f      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cd6:	4a96      	ldr	r2, [pc, #600]	; (8000f30 <HAL_GPIO_Init+0x2a8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d052      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cdc:	4a94      	ldr	r2, [pc, #592]	; (8000f30 <HAL_GPIO_Init+0x2a8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d869      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000ce2:	4a94      	ldr	r2, [pc, #592]	; (8000f34 <HAL_GPIO_Init+0x2ac>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d04c      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000ce8:	4a92      	ldr	r2, [pc, #584]	; (8000f34 <HAL_GPIO_Init+0x2ac>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d863      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cee:	4a92      	ldr	r2, [pc, #584]	; (8000f38 <HAL_GPIO_Init+0x2b0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d046      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cf4:	4a90      	ldr	r2, [pc, #576]	; (8000f38 <HAL_GPIO_Init+0x2b0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d85d      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d82a      	bhi.n	8000d54 <HAL_GPIO_Init+0xcc>
 8000cfe:	2b12      	cmp	r3, #18
 8000d00:	d859      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <HAL_GPIO_Init+0x80>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d83 	.word	0x08000d83
 8000d0c:	08000d5d 	.word	0x08000d5d
 8000d10:	08000d6f 	.word	0x08000d6f
 8000d14:	08000db1 	.word	0x08000db1
 8000d18:	08000db7 	.word	0x08000db7
 8000d1c:	08000db7 	.word	0x08000db7
 8000d20:	08000db7 	.word	0x08000db7
 8000d24:	08000db7 	.word	0x08000db7
 8000d28:	08000db7 	.word	0x08000db7
 8000d2c:	08000db7 	.word	0x08000db7
 8000d30:	08000db7 	.word	0x08000db7
 8000d34:	08000db7 	.word	0x08000db7
 8000d38:	08000db7 	.word	0x08000db7
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000db7 	.word	0x08000db7
 8000d44:	08000db7 	.word	0x08000db7
 8000d48:	08000db7 	.word	0x08000db7
 8000d4c:	08000d65 	.word	0x08000d65
 8000d50:	08000d79 	.word	0x08000d79
 8000d54:	4a79      	ldr	r2, [pc, #484]	; (8000f3c <HAL_GPIO_Init+0x2b4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5a:	e02c      	b.n	8000db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e029      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e024      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	3308      	adds	r3, #8
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e01f      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e01a      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e013      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d105      	bne.n	8000da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	611a      	str	r2, [r3, #16]
          break;
 8000da2:	e009      	b.n	8000db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	615a      	str	r2, [r3, #20]
          break;
 8000dae:	e003      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          break;
 8000db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2bff      	cmp	r3, #255	; 0xff
 8000dbc:	d801      	bhi.n	8000dc2 <HAL_GPIO_Init+0x13a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	e001      	b.n	8000dc6 <HAL_GPIO_Init+0x13e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2bff      	cmp	r3, #255	; 0xff
 8000dcc:	d802      	bhi.n	8000dd4 <HAL_GPIO_Init+0x14c>
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_Init+0x152>
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	3b08      	subs	r3, #8
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	210f      	movs	r1, #15
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	6a39      	ldr	r1, [r7, #32]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 80b1 	beq.w	8000f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e08:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e20:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <HAL_GPIO_Init+0x2bc>)
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a40      	ldr	r2, [pc, #256]	; (8000f48 <HAL_GPIO_Init+0x2c0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d013      	beq.n	8000e74 <HAL_GPIO_Init+0x1ec>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <HAL_GPIO_Init+0x2c4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00d      	beq.n	8000e70 <HAL_GPIO_Init+0x1e8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3e      	ldr	r2, [pc, #248]	; (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3d      	ldr	r2, [pc, #244]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e64:	2303      	movs	r3, #3
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e68:	2304      	movs	r3, #4
 8000e6a:	e004      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e74:	2300      	movs	r3, #0
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4093      	lsls	r3, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e86:	492f      	ldr	r1, [pc, #188]	; (8000f44 <HAL_GPIO_Init+0x2bc>)
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	492c      	ldr	r1, [pc, #176]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	608b      	str	r3, [r1, #8]
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4928      	ldr	r1, [pc, #160]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	4922      	ldr	r1, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60cb      	str	r3, [r1, #12]
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	491e      	ldr	r1, [pc, #120]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4918      	ldr	r1, [pc, #96]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4914      	ldr	r1, [pc, #80]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d021      	beq.n	8000f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e021      	b.n	8000f6a <HAL_GPIO_Init+0x2e2>
 8000f26:	bf00      	nop
 8000f28:	10320000 	.word	0x10320000
 8000f2c:	10310000 	.word	0x10310000
 8000f30:	10220000 	.word	0x10220000
 8000f34:	10210000 	.word	0x10210000
 8000f38:	10120000 	.word	0x10120000
 8000f3c:	10110000 	.word	0x10110000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4909      	ldr	r1, [pc, #36]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f ae8e 	bne.w	8000c9c <HAL_GPIO_Init+0x14>
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	372c      	adds	r7, #44	; 0x2c
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fa24 	bl	800042c <HAL_GPIO_EXTI_Callback>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010400 	.word	0x40010400

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e272      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8087 	beq.w	800111e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001010:	4b92      	ldr	r3, [pc, #584]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b04      	cmp	r3, #4
 800101a:	d00c      	beq.n	8001036 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800101c:	4b8f      	ldr	r3, [pc, #572]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d112      	bne.n	800104e <HAL_RCC_OscConfig+0x5e>
 8001028:	4b8c      	ldr	r3, [pc, #560]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001034:	d10b      	bne.n	800104e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001036:	4b89      	ldr	r3, [pc, #548]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d06c      	beq.n	800111c <HAL_RCC_OscConfig+0x12c>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d168      	bne.n	800111c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e24c      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x76>
 8001058:	4b80      	ldr	r3, [pc, #512]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a7f      	ldr	r2, [pc, #508]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 800105e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e02e      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x98>
 800106e:	4b7b      	ldr	r3, [pc, #492]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a7a      	ldr	r2, [pc, #488]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b78      	ldr	r3, [pc, #480]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a77      	ldr	r2, [pc, #476]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e01d      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0xbc>
 8001092:	4b72      	ldr	r3, [pc, #456]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a71      	ldr	r2, [pc, #452]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b6f      	ldr	r3, [pc, #444]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a6e      	ldr	r2, [pc, #440]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 80010ac:	4b6b      	ldr	r3, [pc, #428]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a6a      	ldr	r2, [pc, #424]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b68      	ldr	r3, [pc, #416]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a67      	ldr	r2, [pc, #412]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fbee 	bl	80008ac <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fbea 	bl	80008ac <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e200      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b5d      	ldr	r3, [pc, #372]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe4>
 80010f2:	e014      	b.n	800111e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fbda 	bl	80008ac <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fbd6 	bl	80008ac <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e1ec      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	4b53      	ldr	r3, [pc, #332]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x10c>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d063      	beq.n	80011f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b08      	cmp	r3, #8
 8001140:	d11c      	bne.n	800117c <HAL_RCC_OscConfig+0x18c>
 8001142:	4b46      	ldr	r3, [pc, #280]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d116      	bne.n	800117c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <HAL_RCC_OscConfig+0x176>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e1c0      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4939      	ldr	r1, [pc, #228]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	e03a      	b.n	80011f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_RCC_OscConfig+0x270>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fb8f 	bl	80008ac <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fb8b 	bl	80008ac <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e1a1      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4927      	ldr	r1, [pc, #156]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e015      	b.n	80011f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_RCC_OscConfig+0x270>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fb6e 	bl	80008ac <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fb6a 	bl	80008ac <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e180      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d03a      	beq.n	8001274 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d019      	beq.n	800123a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_RCC_OscConfig+0x274>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff fb4e 	bl	80008ac <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fb4a 	bl	80008ac <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e160      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_RCC_OscConfig+0x26c>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f000 face 	bl	80017d4 <RCC_Delay>
 8001238:	e01c      	b.n	8001274 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_RCC_OscConfig+0x274>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001240:	f7ff fb34 	bl	80008ac <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001246:	e00f      	b.n	8001268 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001248:	f7ff fb30 	bl	80008ac <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d908      	bls.n	8001268 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e146      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	42420000 	.word	0x42420000
 8001264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	4b92      	ldr	r3, [pc, #584]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e9      	bne.n	8001248 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a6 	beq.w	80013ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001286:	4b8b      	ldr	r3, [pc, #556]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a87      	ldr	r2, [pc, #540]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b85      	ldr	r3, [pc, #532]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012aa:	2301      	movs	r3, #1
 80012ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ae:	4b82      	ldr	r3, [pc, #520]	; (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d118      	bne.n	80012ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ba:	4b7f      	ldr	r3, [pc, #508]	; (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7e      	ldr	r2, [pc, #504]	; (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c6:	f7ff faf1 	bl	80008ac <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ce:	f7ff faed 	bl	80008ac <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b64      	cmp	r3, #100	; 0x64
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e103      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	4b75      	ldr	r3, [pc, #468]	; (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x312>
 80012f4:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4a6e      	ldr	r2, [pc, #440]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6213      	str	r3, [r2, #32]
 8001300:	e02d      	b.n	800135e <HAL_RCC_OscConfig+0x36e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x334>
 800130a:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	6213      	str	r3, [r2, #32]
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a66      	ldr	r2, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	e01c      	b.n	800135e <HAL_RCC_OscConfig+0x36e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x356>
 800132c:	4b61      	ldr	r3, [pc, #388]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4a5d      	ldr	r2, [pc, #372]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6213      	str	r3, [r2, #32]
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0x36e>
 8001346:	4b5b      	ldr	r3, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a5a      	ldr	r2, [pc, #360]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6213      	str	r3, [r2, #32]
 8001352:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d015      	beq.n	8001392 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff faa1 	bl	80008ac <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fa9d 	bl	80008ac <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e0b1      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ee      	beq.n	800136e <HAL_RCC_OscConfig+0x37e>
 8001390:	e014      	b.n	80013bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fa8b 	bl	80008ac <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fa87 	bl	80008ac <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e09b      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1ee      	bne.n	800139a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8087 	beq.w	80014e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d061      	beq.n	80014a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d146      	bne.n	800147a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b33      	ldr	r3, [pc, #204]	; (80014bc <HAL_RCC_OscConfig+0x4cc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fa5b 	bl	80008ac <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fa57 	bl	80008ac <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e06d      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d108      	bne.n	8001434 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4921      	ldr	r1, [pc, #132]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a19      	ldr	r1, [r3, #32]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	430b      	orrs	r3, r1
 8001446:	491b      	ldr	r1, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x4cc>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fa2b 	bl	80008ac <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fa27 	bl	80008ac <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e03d      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x46a>
 8001478:	e035      	b.n	80014e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_RCC_OscConfig+0x4cc>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fa14 	bl	80008ac <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fa10 	bl	80008ac <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e026      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x498>
 80014a6:	e01e      	b.n	80014e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e019      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40007000 	.word	0x40007000
 80014bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_RCC_OscConfig+0x500>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	429a      	cmp	r2, r3
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000

080014f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0d0      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001508:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d910      	bls.n	8001538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 0207 	bic.w	r2, r3, #7
 800151e:	4965      	ldr	r1, [pc, #404]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0b8      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800155a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001572:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	494d      	ldr	r1, [pc, #308]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d040      	beq.n	8001614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d115      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e073      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e06b      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d2:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f023 0203 	bic.w	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4936      	ldr	r1, [pc, #216]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff f962 	bl	80008ac <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ec:	f7ff f95e 	bl	80008ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e053      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 020c 	and.w	r2, r3, #12
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	429a      	cmp	r2, r3
 8001612:	d1eb      	bne.n	80015ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d210      	bcs.n	8001644 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 0207 	bic.w	r2, r3, #7
 800162a:	4922      	ldr	r1, [pc, #136]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e032      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4916      	ldr	r1, [pc, #88]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001682:	f000 f821 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <HAL_RCC_ClockConfig+0x1c8>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1cc>)
 800169c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_RCC_ClockConfig+0x1d0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f8c0 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	080035b8 	.word	0x080035b8
 80016c0:	20000008 	.word	0x20000008
 80016c4:	2000000c 	.word	0x2000000c

080016c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_RCC_GetSysClockFreq+0x94>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x30>
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x36>
 80016f6:	e027      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_GetSysClockFreq+0x98>)
 80016fa:	613b      	str	r3, [r7, #16]
      break;
 80016fc:	e027      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	0c9b      	lsrs	r3, r3, #18
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d010      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_RCC_GetSysClockFreq+0x94>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	0c5b      	lsrs	r3, r3, #17
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_RCC_GetSysClockFreq+0x98>)
 800172a:	fb03 f202 	mul.w	r2, r3, r2
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e004      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a0c      	ldr	r2, [pc, #48]	; (800176c <HAL_RCC_GetSysClockFreq+0xa4>)
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	613b      	str	r3, [r7, #16]
      break;
 8001746:	e002      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetSysClockFreq+0x98>)
 800174a:	613b      	str	r3, [r7, #16]
      break;
 800174c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800174e:	693b      	ldr	r3, [r7, #16]
}
 8001750:	4618      	mov	r0, r3
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	007a1200 	.word	0x007a1200
 8001764:	080035d0 	.word	0x080035d0
 8001768:	080035e0 	.word	0x080035e0
 800176c:	003d0900 	.word	0x003d0900

08001770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_RCC_GetHCLKFreq+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000008 	.word	0x20000008

08001784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001788:	f7ff fff2 	bl	8001770 <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4903      	ldr	r1, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	080035c8 	.word	0x080035c8

080017ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017b0:	f7ff ffde 	bl	8001770 <HAL_RCC_GetHCLKFreq>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	0adb      	lsrs	r3, r3, #11
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	4903      	ldr	r1, [pc, #12]	; (80017d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	080035c8 	.word	0x080035c8

080017d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <RCC_Delay+0x34>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <RCC_Delay+0x38>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0a5b      	lsrs	r3, r3, #9
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017f0:	bf00      	nop
  }
  while (Delay --);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	60fa      	str	r2, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f9      	bne.n	80017f0 <RCC_Delay+0x1c>
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000008 	.word	0x20000008
 800180c:	10624dd3 	.word	0x10624dd3

08001810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e076      	b.n	8001910 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	2b00      	cmp	r3, #0
 8001828:	d108      	bne.n	800183c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001832:	d009      	beq.n	8001848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
 800183a:	e005      	b.n	8001848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe fe28 	bl	80004b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800187e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	ea42 0103 	orr.w	r1, r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	0c1a      	lsrs	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f002 0204 	and.w	r2, r2, #4
 80018ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	69da      	ldr	r2, [r3, #28]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_SPI_Transmit+0x22>
 8001936:	2302      	movs	r3, #2
 8001938:	e12d      	b.n	8001b96 <HAL_SPI_Transmit+0x27e>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001942:	f7fe ffb3 	bl	80008ac <HAL_GetTick>
 8001946:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d002      	beq.n	800195e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001958:	2302      	movs	r3, #2
 800195a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800195c:	e116      	b.n	8001b8c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_SPI_Transmit+0x52>
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800196e:	e10d      	b.n	8001b8c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2203      	movs	r2, #3
 8001974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b6:	d10f      	bne.n	80019d8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e2:	2b40      	cmp	r3, #64	; 0x40
 80019e4:	d007      	beq.n	80019f6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019fe:	d14f      	bne.n	8001aa0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_SPI_Transmit+0xf6>
 8001a08:	8afb      	ldrh	r3, [r7, #22]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d142      	bne.n	8001a94 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	881a      	ldrh	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	1c9a      	adds	r2, r3, #2
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a32:	e02f      	b.n	8001a94 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d112      	bne.n	8001a68 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	881a      	ldrh	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	1c9a      	adds	r2, r3, #2
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a66:	e015      	b.n	8001a94 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a68:	f7fe ff20 	bl	80008ac <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d803      	bhi.n	8001a80 <HAL_SPI_Transmit+0x168>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7e:	d102      	bne.n	8001a86 <HAL_SPI_Transmit+0x16e>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001a92:	e07b      	b.n	8001b8c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ca      	bne.n	8001a34 <HAL_SPI_Transmit+0x11c>
 8001a9e:	e050      	b.n	8001b42 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_SPI_Transmit+0x196>
 8001aa8:	8afb      	ldrh	r3, [r7, #22]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d144      	bne.n	8001b38 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	330c      	adds	r3, #12
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ad4:	e030      	b.n	8001b38 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d113      	bne.n	8001b0c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	330c      	adds	r3, #12
 8001aee:	7812      	ldrb	r2, [r2, #0]
 8001af0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b0a:	e015      	b.n	8001b38 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b0c:	f7fe fece 	bl	80008ac <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d803      	bhi.n	8001b24 <HAL_SPI_Transmit+0x20c>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b22:	d102      	bne.n	8001b2a <HAL_SPI_Transmit+0x212>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001b36:	e029      	b.n	8001b8c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1c9      	bne.n	8001ad6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	6839      	ldr	r1, [r7, #0]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fbcc 	bl	80022e4 <SPI_EndRxTxTransaction>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2220      	movs	r2, #32
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10a      	bne.n	8001b76 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	77fb      	strb	r3, [r7, #31]
 8001b82:	e003      	b.n	8001b8c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b94:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b088      	sub	sp, #32
 8001ba2:	af02      	add	r7, sp, #8
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d002      	beq.n	8001bc4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bc2:	e0fb      	b.n	8001dbc <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bcc:	d112      	bne.n	8001bf4 <HAL_SPI_Receive+0x56>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f8ef 	bl	8001dce <HAL_SPI_TransmitReceive>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	e0e8      	b.n	8001dc6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_SPI_Receive+0x64>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0e1      	b.n	8001dc6 <HAL_SPI_Receive+0x228>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c0a:	f7fe fe4f 	bl	80008ac <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_SPI_Receive+0x7e>
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c20:	e0cc      	b.n	8001dbc <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2204      	movs	r2, #4
 8001c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c68:	d10f      	bne.n	8001c8a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	d007      	beq.n	8001ca8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d16a      	bne.n	8001d86 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cb0:	e032      	b.n	8001d18 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d115      	bne.n	8001cec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f103 020c 	add.w	r2, r3, #12
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cea:	e015      	b.n	8001d18 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cec:	f7fe fdde 	bl	80008ac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d803      	bhi.n	8001d04 <HAL_SPI_Receive+0x166>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d02:	d102      	bne.n	8001d0a <HAL_SPI_Receive+0x16c>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001d16:	e051      	b.n	8001dbc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1c7      	bne.n	8001cb2 <HAL_SPI_Receive+0x114>
 8001d22:	e035      	b.n	8001d90 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d113      	bne.n	8001d5a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	1c9a      	adds	r2, r3, #2
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d58:	e015      	b.n	8001d86 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d5a:	f7fe fda7 	bl	80008ac <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d803      	bhi.n	8001d72 <HAL_SPI_Receive+0x1d4>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d102      	bne.n	8001d78 <HAL_SPI_Receive+0x1da>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d106      	bne.n	8001d86 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001d84:	e01a      	b.n	8001dbc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1c9      	bne.n	8001d24 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	6839      	ldr	r1, [r7, #0]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fa53 	bl	8002240 <SPI_EndRxTransaction>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
 8001db2:	e003      	b.n	8001dbc <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b08c      	sub	sp, #48	; 0x30
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_SPI_TransmitReceive+0x26>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e198      	b.n	8002126 <HAL_SPI_TransmitReceive+0x358>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dfc:	f7fe fd56 	bl	80008ac <HAL_GetTick>
 8001e00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d00f      	beq.n	8001e3e <HAL_SPI_TransmitReceive+0x70>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e24:	d107      	bne.n	8001e36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_SPI_TransmitReceive+0x68>
 8001e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d003      	beq.n	8001e3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
 8001e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e3c:	e16d      	b.n	800211a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x82>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x82>
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d103      	bne.n	8001e58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e56:	e160      	b.n	800211a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d003      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2205      	movs	r2, #5
 8001e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	887a      	ldrh	r2, [r7, #2]
 8001e82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	887a      	ldrh	r2, [r7, #2]
 8001e8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	d007      	beq.n	8001ec0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec8:	d17c      	bne.n	8001fc4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x10a>
 8001ed2:	8b7b      	ldrh	r3, [r7, #26]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d16a      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	881a      	ldrh	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	1c9a      	adds	r2, r3, #2
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001efc:	e057      	b.n	8001fae <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d11b      	bne.n	8001f44 <HAL_SPI_TransmitReceive+0x176>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_SPI_TransmitReceive+0x176>
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d113      	bne.n	8001f44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	881a      	ldrh	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	1c9a      	adds	r2, r3, #2
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d119      	bne.n	8001f86 <HAL_SPI_TransmitReceive+0x1b8>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d014      	beq.n	8001f86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	b292      	uxth	r2, r2
 8001f68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	1c9a      	adds	r2, r3, #2
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f82:	2301      	movs	r3, #1
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f86:	f7fe fc91 	bl	80008ac <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d80b      	bhi.n	8001fae <HAL_SPI_TransmitReceive+0x1e0>
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d007      	beq.n	8001fae <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001fac:	e0b5      	b.n	800211a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1a2      	bne.n	8001efe <HAL_SPI_TransmitReceive+0x130>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d19d      	bne.n	8001efe <HAL_SPI_TransmitReceive+0x130>
 8001fc2:	e080      	b.n	80020c6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_SPI_TransmitReceive+0x204>
 8001fcc:	8b7b      	ldrh	r3, [r7, #26]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d16f      	bne.n	80020b2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ff8:	e05b      	b.n	80020b2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d11c      	bne.n	8002042 <HAL_SPI_TransmitReceive+0x274>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d017      	beq.n	8002042 <HAL_SPI_TransmitReceive+0x274>
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	2b01      	cmp	r3, #1
 8002016:	d114      	bne.n	8002042 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	330c      	adds	r3, #12
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d119      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x2b6>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d014      	beq.n	8002084 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002080:	2301      	movs	r3, #1
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002084:	f7fe fc12 	bl	80008ac <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002090:	429a      	cmp	r2, r3
 8002092:	d803      	bhi.n	800209c <HAL_SPI_TransmitReceive+0x2ce>
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d102      	bne.n	80020a2 <HAL_SPI_TransmitReceive+0x2d4>
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d107      	bne.n	80020b2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80020b0:	e033      	b.n	800211a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d19e      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x22c>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d199      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f90a 	bl	80022e4 <SPI_EndRxTxTransaction>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80020e2:	e01a      	b.n	800211a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002110:	e003      	b.n	800211a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002126:	4618      	mov	r0, r3
 8002128:	3730      	adds	r7, #48	; 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002140:	f7fe fbb4 	bl	80008ac <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002150:	f7fe fbac 	bl	80008ac <HAL_GetTick>
 8002154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	0d1b      	lsrs	r3, r3, #20
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002166:	e054      	b.n	8002212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216e:	d050      	beq.n	8002212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002170:	f7fe fb9c 	bl	80008ac <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	429a      	cmp	r2, r3
 800217e:	d902      	bls.n	8002186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d13d      	bne.n	8002202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800219e:	d111      	bne.n	80021c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a8:	d004      	beq.n	80021b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b2:	d107      	bne.n	80021c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021cc:	d10f      	bne.n	80021ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e017      	b.n	8002232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3b01      	subs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	429a      	cmp	r2, r3
 800222e:	d19b      	bne.n	8002168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008

08002240 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002254:	d111      	bne.n	800227a <SPI_EndRxTransaction+0x3a>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800225e:	d004      	beq.n	800226a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002268:	d107      	bne.n	800227a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002278:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002282:	d117      	bne.n	80022b4 <SPI_EndRxTransaction+0x74>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d112      	bne.n	80022b4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	2101      	movs	r1, #1
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff ff49 	bl	8002130 <SPI_WaitFlagStateUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01a      	beq.n	80022da <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e013      	b.n	80022dc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7ff ff36 	bl	8002130 <SPI_WaitFlagStateUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e000      	b.n	80022dc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff ff18 	bl	8002130 <SPI_WaitFlagStateUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e000      	b.n	8002318 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e042      	b.n	80023b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe f900 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fd71 	bl	8002e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d16d      	bne.n	80024bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_UART_Transmit+0x2c>
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e066      	b.n	80024be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2221      	movs	r2, #33	; 0x21
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023fe:	f7fe fa55 	bl	80008ac <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	88fa      	ldrh	r2, [r7, #6]
 800240e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002418:	d108      	bne.n	800242c <HAL_UART_Transmit+0x6c>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	e003      	b.n	8002434 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002434:	e02a      	b.n	800248c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2200      	movs	r2, #0
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 faf9 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e036      	b.n	80024be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10b      	bne.n	800246e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002464:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	3302      	adds	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	e007      	b.n	800247e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3301      	adds	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1cf      	bne.n	8002436 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2200      	movs	r2, #0
 800249e:	2140      	movs	r1, #64	; 0x40
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fac9 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e006      	b.n	80024be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
  }
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0ba      	sub	sp, #232	; 0xe8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_UART_IRQHandler+0x66>
 800251a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fbd1 	bl	8002cce <UART_Receive_IT>
      return;
 800252c:	e25b      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800252e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80de 	beq.w	80026f4 <HAL_UART_IRQHandler+0x22c>
 8002538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80d1 	beq.w	80026f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_UART_IRQHandler+0xae>
 800255e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_UART_IRQHandler+0xd2>
 8002582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_UART_IRQHandler+0xf6>
 80025a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0204 	orr.w	r2, r3, #4
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d011      	beq.n	80025ee <HAL_UART_IRQHandler+0x126>
 80025ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0208 	orr.w	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 81f2 	beq.w	80029dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_UART_IRQHandler+0x14e>
 8002604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fb5c 	bl	8002cce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <HAL_UART_IRQHandler+0x17a>
 800263a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d04f      	beq.n	80026e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa66 	bl	8002b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d041      	beq.n	80026da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3314      	adds	r3, #20
 800265c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800266c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3314      	adds	r3, #20
 800267e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800268e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800269a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1d9      	bne.n	8002656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d013      	beq.n	80026d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	4a7e      	ldr	r2, [pc, #504]	; (80028a8 <HAL_UART_IRQHandler+0x3e0>)
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fa6e 	bl	8000b98 <HAL_DMA_Abort_IT>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026cc:	4610      	mov	r0, r2
 80026ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	e00e      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f99c 	bl	8002a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e00a      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f998 	bl	8002a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e006      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f994 	bl	8002a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026ee:	e175      	b.n	80029dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	bf00      	nop
    return;
 80026f2:	e173      	b.n	80029dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 814f 	bne.w	800299c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8148 	beq.w	800299c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8141 	beq.w	800299c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80b6 	beq.w	80028ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800274c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8145 	beq.w	80029e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800275a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800275e:	429a      	cmp	r2, r3
 8002760:	f080 813e 	bcs.w	80029e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800276a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b20      	cmp	r3, #32
 8002774:	f000 8088 	beq.w	8002888 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800278e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027b4:	e841 2300 	strex	r3, r2, [r1]
 80027b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1d9      	bne.n	8002778 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027f4:	e841 2300 	strex	r3, r2, [r1]
 80027f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1e1      	bne.n	80027c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280a:	e853 3f00 	ldrex	r3, [r3]
 800280e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3314      	adds	r3, #20
 8002820:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002824:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002826:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002828:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800282a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800282c:	e841 2300 	strex	r3, r2, [r1]
 8002830:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e3      	bne.n	8002800 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	f023 0310 	bic.w	r3, r3, #16
 800285c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800286a:	65ba      	str	r2, [r7, #88]	; 0x58
 800286c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e3      	bne.n	8002846 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe f94d 	bl	8000b22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002896:	b29b      	uxth	r3, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8bf 	bl	8002a22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a4:	e09c      	b.n	80029e0 <HAL_UART_IRQHandler+0x518>
 80028a6:	bf00      	nop
 80028a8:	08002bd9 	.word	0x08002bd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 808e 	beq.w	80029e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8089 	beq.w	80029e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028f6:	647a      	str	r2, [r7, #68]	; 0x44
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e3      	bne.n	80028d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	623b      	str	r3, [r7, #32]
   return(result);
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800292e:	633a      	str	r2, [r7, #48]	; 0x30
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e3      	bne.n	800290a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0310 	bic.w	r3, r3, #16
 8002966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002974:	61fa      	str	r2, [r7, #28]
 8002976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	69b9      	ldr	r1, [r7, #24]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	617b      	str	r3, [r7, #20]
   return(result);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e3      	bne.n	8002950 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f844 	bl	8002a22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800299a:	e023      	b.n	80029e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800299c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <HAL_UART_IRQHandler+0x4f4>
 80029a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f923 	bl	8002c00 <UART_Transmit_IT>
    return;
 80029ba:	e014      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <HAL_UART_IRQHandler+0x51e>
 80029c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f962 	bl	8002c9e <UART_EndTransmit_IT>
    return;
 80029da:	e004      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029e4:	bf00      	nop
  }
}
 80029e6:	37e8      	adds	r7, #232	; 0xe8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b090      	sub	sp, #64	; 0x40
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a48:	e050      	b.n	8002aec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d04c      	beq.n	8002aec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a58:	f7fd ff28 	bl	80008ac <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d241      	bcs.n	8002aec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	e853 3f00 	ldrex	r3, [r3]
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a88:	637a      	str	r2, [r7, #52]	; 0x34
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e5      	bne.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3314      	adds	r3, #20
 8002aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002abc:	623a      	str	r2, [r7, #32]
 8002abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	69f9      	ldr	r1, [r7, #28]
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e5      	bne.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e00f      	b.n	8002b0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d09f      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3740      	adds	r7, #64	; 0x40
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b095      	sub	sp, #84	; 0x54
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b3c:	643a      	str	r2, [r7, #64]	; 0x40
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e5      	bne.n	8002b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3314      	adds	r3, #20
 8002b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b78:	e841 2300 	strex	r3, r2, [r1]
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e5      	bne.n	8002b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d119      	bne.n	8002bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f023 0310 	bic.w	r3, r3, #16
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bac:	61ba      	str	r2, [r7, #24]
 8002bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6979      	ldr	r1, [r7, #20]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bce:	bf00      	nop
 8002bd0:	3754      	adds	r7, #84	; 0x54
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff ff0c 	bl	8002a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b21      	cmp	r3, #33	; 0x21
 8002c12:	d13e      	bne.n	8002c92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d114      	bne.n	8002c48 <UART_Transmit_IT+0x48>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d110      	bne.n	8002c48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	1c9a      	adds	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	621a      	str	r2, [r3, #32]
 8002c46:	e008      	b.n	8002c5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	1c59      	adds	r1, r3, #1
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6211      	str	r1, [r2, #32]
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4619      	mov	r1, r3
 8002c68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e000      	b.n	8002c94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
  }
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fe94 	bl	80029ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08c      	sub	sp, #48	; 0x30
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b22      	cmp	r3, #34	; 0x22
 8002ce0:	f040 80ae 	bne.w	8002e40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cec:	d117      	bne.n	8002d1e <UART_Receive_IT+0x50>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d113      	bne.n	8002d1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d1c:	e026      	b.n	8002d6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d30:	d007      	beq.n	8002d42 <UART_Receive_IT+0x74>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <UART_Receive_IT+0x82>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e008      	b.n	8002d62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d15d      	bne.n	8002e3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0220 	bic.w	r2, r2, #32
 8002d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d135      	bne.n	8002e32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	e853 3f00 	ldrex	r3, [r3]
 8002dda:	613b      	str	r3, [r7, #16]
   return(result);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f023 0310 	bic.w	r3, r3, #16
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	623a      	str	r2, [r7, #32]
 8002dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df0:	69f9      	ldr	r1, [r7, #28]
 8002df2:	6a3a      	ldr	r2, [r7, #32]
 8002df4:	e841 2300 	strex	r3, r2, [r1]
 8002df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e5      	bne.n	8002dcc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d10a      	bne.n	8002e24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fdf9 	bl	8002a22 <HAL_UARTEx_RxEventCallback>
 8002e30:	e002      	b.n	8002e38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff fde3 	bl	80029fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e002      	b.n	8002e42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3730      	adds	r7, #48	; 0x30
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e86:	f023 030c 	bic.w	r3, r3, #12
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <UART_SetConfig+0x114>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d103      	bne.n	8002ebc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eb4:	f7fe fc7a 	bl	80017ac <HAL_RCC_GetPCLK2Freq>
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	e002      	b.n	8002ec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f7fe fc62 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8002ec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	009a      	lsls	r2, r3, #2
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <UART_SetConfig+0x118>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	0119      	lsls	r1, r3, #4
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	009a      	lsls	r2, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <UART_SetConfig+0x118>)
 8002efa:	fba3 0302 	umull	r0, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2064      	movs	r0, #100	; 0x64
 8002f02:	fb00 f303 	mul.w	r3, r0, r3
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	3332      	adds	r3, #50	; 0x32
 8002f0c:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <UART_SetConfig+0x118>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f18:	4419      	add	r1, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <UART_SetConfig+0x118>)
 8002f32:	fba3 0302 	umull	r0, r3, r3, r2
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2064      	movs	r0, #100	; 0x64
 8002f3a:	fb00 f303 	mul.w	r3, r0, r3
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	3332      	adds	r3, #50	; 0x32
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <UART_SetConfig+0x118>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	f003 020f 	and.w	r2, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	440a      	add	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40013800 	.word	0x40013800
 8002f64:	51eb851f 	.word	0x51eb851f

08002f68 <cs_high>:
 * 
 */

#include "nrf24l01p.h"

static void cs_high() {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	2108      	movs	r1, #8
 8002f70:	4802      	ldr	r0, [pc, #8]	; (8002f7c <cs_high+0x14>)
 8002f72:	f7fe f80d 	bl	8000f90 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40010800 	.word	0x40010800

08002f80 <cs_low>:

static void cs_low() {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8002f84:	2200      	movs	r2, #0
 8002f86:	2108      	movs	r1, #8
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <cs_low+0x14>)
 8002f8a:	f7fe f801 	bl	8000f90 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40010800 	.word	0x40010800

08002f98 <ce_high>:

static void ce_high() {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <ce_high+0x14>)
 8002fa2:	f7fd fff5 	bl	8000f90 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40010800 	.word	0x40010800

08002fb0 <ce_low>:

static void ce_low() {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <ce_low+0x14>)
 8002fba:	f7fd ffe9 	bl	8000f90 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40010800 	.word	0x40010800

08002fc8 <read_register>:

static uint8_t read_register(uint8_t reg) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t read_val;

	cs_low();
 8002fd6:	f7ff ffd3 	bl	8002f80 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002fda:	f107 020e 	add.w	r2, r7, #14
 8002fde:	f107 010f 	add.w	r1, r7, #15
 8002fe2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4809      	ldr	r0, [pc, #36]	; (8003010 <read_register+0x48>)
 8002fec:	f7fe feef 	bl	8001dce <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8002ff0:	f107 010d 	add.w	r1, r7, #13
 8002ff4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4805      	ldr	r0, [pc, #20]	; (8003010 <read_register+0x48>)
 8002ffc:	f7fe fdcf 	bl	8001b9e <HAL_SPI_Receive>
	cs_high();
 8003000:	f7ff ffb2 	bl	8002f68 <cs_high>

	return read_val;
 8003004:	7b7b      	ldrb	r3, [r7, #13]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000030 	.word	0x20000030

08003014 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af02      	add	r7, sp, #8
 800301a:	4603      	mov	r3, r0
 800301c:	460a      	mov	r2, r1
 800301e:	71fb      	strb	r3, [r7, #7]
 8003020:	4613      	mov	r3, r2
 8003022:	71bb      	strb	r3, [r7, #6]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f043 0320 	orr.w	r3, r3, #32
 800302a:	b2db      	uxtb	r3, r3
 800302c:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = value;
 800302e:	79bb      	ldrb	r3, [r7, #6]
 8003030:	737b      	strb	r3, [r7, #13]

	cs_low();
 8003032:	f7ff ffa5 	bl	8002f80 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003036:	f107 020e 	add.w	r2, r7, #14
 800303a:	f107 010f 	add.w	r1, r7, #15
 800303e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2301      	movs	r3, #1
 8003046:	4809      	ldr	r0, [pc, #36]	; (800306c <write_register+0x58>)
 8003048:	f7fe fec1 	bl	8001dce <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 800304c:	f107 010d 	add.w	r1, r7, #13
 8003050:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003054:	2201      	movs	r2, #1
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <write_register+0x58>)
 8003058:	f7fe fc5e 	bl	8001918 <HAL_SPI_Transmit>
	cs_high();
 800305c:	f7ff ff84 	bl	8002f68 <cs_high>

	return write_val;
 8003060:	7b7b      	ldrb	r3, [r7, #13]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000030 	.word	0x20000030

08003070 <write_register_multi>:

void write_register_multi(uint8_t reg, uint8_t *address) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af02      	add	r7, sp, #8
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	f043 0320 	orr.w	r3, r3, #32
 8003082:	b2db      	uxtb	r3, r3
 8003084:	73bb      	strb	r3, [r7, #14]
	uint8_t status;
	uint8_t bytes[5];
	for (uint8_t i = 0; i < 5; i++) {
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e00b      	b.n	80030a4 <write_register_multi+0x34>
		bytes[i] = address [i];
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	441a      	add	r2, r3
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	3310      	adds	r3, #16
 8003098:	443b      	add	r3, r7
 800309a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 5; i++) {
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	3301      	adds	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d9f0      	bls.n	800308c <write_register_multi+0x1c>
	}
	cs_low();
 80030aa:	f7ff ff69 	bl	8002f80 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80030ae:	f107 020d 	add.w	r2, r7, #13
 80030b2:	f107 010e 	add.w	r1, r7, #14
 80030b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2301      	movs	r3, #1
 80030be:	4808      	ldr	r0, [pc, #32]	; (80030e0 <write_register_multi+0x70>)
 80030c0:	f7fe fe85 	bl	8001dce <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, bytes, 5, 2000);
 80030c4:	f107 0108 	add.w	r1, r7, #8
 80030c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80030cc:	2205      	movs	r2, #5
 80030ce:	4804      	ldr	r0, [pc, #16]	; (80030e0 <write_register_multi+0x70>)
 80030d0:	f7fe fc22 	bl	8001918 <HAL_SPI_Transmit>
	cs_high();
 80030d4:	f7ff ff48 	bl	8002f68 <cs_high>

	// return address;
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000030 	.word	0x20000030

080030e4 <nrf24l01p_tx_init>:
	nrf24l01p_auto_retransmit_delay(250);

	ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps,uint8_t* address) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	603a      	str	r2, [r7, #0]
 80030ee:	80fb      	strh	r3, [r7, #6]
 80030f0:	460b      	mov	r3, r1
 80030f2:	717b      	strb	r3, [r7, #5]
	nrf24l01p_reset();
 80030f4:	f000 f847 	bl	8003186 <nrf24l01p_reset>

	nrf24l01p_ptx_mode();
 80030f8:	f000 f895 	bl	8003226 <nrf24l01p_ptx_mode>
	nrf24l01p_power_up();
 80030fc:	f000 f93e 	bl	800337c <nrf24l01p_power_up>

	nrf24l01p_set_rf_channel(MHz);
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f9c6 	bl	8003494 <nrf24l01p_set_rf_channel>
	nrf24l01p_set_rf_air_data_rate(bps);
 8003108:	797b      	ldrb	r3, [r7, #5]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f9f2 	bl	80034f4 <nrf24l01p_set_rf_air_data_rate>
	nrf24l01p_set_rf_tx_output_power(_0dBm);
 8003110:	2003      	movs	r0, #3
 8003112:	f000 f9d2 	bl	80034ba <nrf24l01p_set_rf_tx_output_power>

	nrf24l01p_set_crc_length(1);
 8003116:	2001      	movs	r0, #1
 8003118:	f000 f945 	bl	80033a6 <nrf24l01p_set_crc_length>
	nrf24l01p_set_address_widths(5);
 800311c:	2005      	movs	r0, #5
 800311e:	f000 f965 	bl	80033ec <nrf24l01p_set_address_widths>

	write_register_multi(NRF24L01P_REG_TX_ADDR,address);
 8003122:	6839      	ldr	r1, [r7, #0]
 8003124:	2010      	movs	r0, #16
 8003126:	f7ff ffa3 	bl	8003070 <write_register_multi>

	nrf24l01p_auto_retransmit_count(3);
 800312a:	2003      	movs	r0, #3
 800312c:	f000 f96e 	bl	800340c <nrf24l01p_auto_retransmit_count>
	nrf24l01p_auto_retransmit_delay(250);
 8003130:	20fa      	movs	r0, #250	; 0xfa
 8003132:	f000 f987 	bl	8003444 <nrf24l01p_auto_retransmit_delay>

	ce_high();
 8003136:	f7ff ff2f 	bl	8002f98 <ce_high>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <nrf24l01p_tx_transmit>:
	nrf24l01p_clear_rx_dr();

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t *tx_payload) {
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
	nrf24l01p_write_tx_fifo(tx_payload);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f880 	bl	8003250 <nrf24l01p_write_tx_fifo>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq() {
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
	uint8_t tx_ds = nrf24l01p_get_status();
 800315e:	f000 f8cb 	bl	80032f8 <nrf24l01p_get_status>
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
	tx_ds &= 0x20;
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	71fb      	strb	r3, [r7, #7]

	if (tx_ds) {
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <nrf24l01p_tx_irq+0x22>
		// TX_DS
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		nrf24l01p_clear_tx_ds();
 8003174:	f000 f8da 	bl	800332c <nrf24l01p_clear_tx_ds>
	else {
		// MAX_RT
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
		nrf24l01p_clear_max_rt();
	}
}
 8003178:	e001      	b.n	800317e <nrf24l01p_tx_irq+0x26>
		nrf24l01p_clear_max_rt();
 800317a:	f000 f8eb 	bl	8003354 <nrf24l01p_clear_max_rt>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset() {
 8003186:	b580      	push	{r7, lr}
 8003188:	af00      	add	r7, sp, #0
	// Reset pins
	cs_high();
 800318a:	f7ff feed 	bl	8002f68 <cs_high>
	ce_low();
 800318e:	f7ff ff0f 	bl	8002fb0 <ce_low>

	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 8003192:	2108      	movs	r1, #8
 8003194:	2000      	movs	r0, #0
 8003196:	f7ff ff3d 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_EN_AA, 0x3E);
 800319a:	213e      	movs	r1, #62	; 0x3e
 800319c:	2001      	movs	r0, #1
 800319e:	f7ff ff39 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x01);
 80031a2:	2101      	movs	r1, #1
 80031a4:	2002      	movs	r0, #2
 80031a6:	f7ff ff35 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80031aa:	2103      	movs	r1, #3
 80031ac:	2003      	movs	r0, #3
 80031ae:	f7ff ff31 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80031b2:	2103      	movs	r1, #3
 80031b4:	2004      	movs	r0, #4
 80031b6:	f7ff ff2d 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 80031ba:	2102      	movs	r1, #2
 80031bc:	2005      	movs	r0, #5
 80031be:	f7ff ff29 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80031c2:	2107      	movs	r1, #7
 80031c4:	2006      	movs	r0, #6
 80031c6:	f7ff ff25 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_STATUS, 0x7E);
 80031ca:	217e      	movs	r1, #126	; 0x7e
 80031cc:	2007      	movs	r0, #7
 80031ce:	f7ff ff21 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 80031d2:	2120      	movs	r1, #32
 80031d4:	2011      	movs	r0, #17
 80031d6:	f7ff ff1d 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 80031da:	2100      	movs	r1, #0
 80031dc:	2012      	movs	r0, #18
 80031de:	f7ff ff19 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 80031e2:	2100      	movs	r1, #0
 80031e4:	2013      	movs	r0, #19
 80031e6:	f7ff ff15 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 80031ea:	2100      	movs	r1, #0
 80031ec:	2014      	movs	r0, #20
 80031ee:	f7ff ff11 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 80031f2:	2100      	movs	r1, #0
 80031f4:	2015      	movs	r0, #21
 80031f6:	f7ff ff0d 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80031fa:	2100      	movs	r1, #0
 80031fc:	2016      	movs	r0, #22
 80031fe:	f7ff ff09 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8003202:	2111      	movs	r1, #17
 8003204:	2017      	movs	r0, #23
 8003206:	f7ff ff05 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_DYNPD, 0x00);
 800320a:	2100      	movs	r1, #0
 800320c:	201c      	movs	r0, #28
 800320e:	f7ff ff01 	bl	8003014 <write_register>
	write_register(NRF24L01P_REG_FEATURE, 0x00);
 8003212:	2100      	movs	r1, #0
 8003214:	201d      	movs	r0, #29
 8003216:	f7ff fefd 	bl	8003014 <write_register>

	// Reset FIFO
	nrf24l01p_flush_rx_fifo();
 800321a:	f000 f83d 	bl	8003298 <nrf24l01p_flush_rx_fifo>
	nrf24l01p_flush_tx_fifo();
 800321e:	f000 f853 	bl	80032c8 <nrf24l01p_flush_tx_fifo>
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}

08003226 <nrf24l01p_ptx_mode>:
	new_config |= 1 << 0;

	write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode() {
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800322c:	2000      	movs	r0, #0
 800322e:	f7ff fecb 	bl	8002fc8 <read_register>
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
	new_config &= 0xFE;
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	4619      	mov	r1, r3
 8003242:	2000      	movs	r0, #0
 8003244:	f7ff fee6 	bl	8003014 <write_register>
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <nrf24l01p_write_tx_fifo>:
	cs_high();

	return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t *tx_payload) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af02      	add	r7, sp, #8
 8003256:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8003258:	23a0      	movs	r3, #160	; 0xa0
 800325a:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 800325c:	f7ff fe90 	bl	8002f80 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003260:	f107 020e 	add.w	r2, r7, #14
 8003264:	f107 010f 	add.w	r1, r7, #15
 8003268:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2301      	movs	r3, #1
 8003270:	4808      	ldr	r0, [pc, #32]	; (8003294 <nrf24l01p_write_tx_fifo+0x44>)
 8003272:	f7fe fdac 	bl	8001dce <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8003276:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800327a:	2220      	movs	r2, #32
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4805      	ldr	r0, [pc, #20]	; (8003294 <nrf24l01p_write_tx_fifo+0x44>)
 8003280:	f7fe fb4a 	bl	8001918 <HAL_SPI_Transmit>
	cs_high();
 8003284:	f7ff fe70 	bl	8002f68 <cs_high>

	return status;
 8003288:	7bbb      	ldrb	r3, [r7, #14]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000030 	.word	0x20000030

08003298 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo() {
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800329e:	23e2      	movs	r3, #226	; 0xe2
 80032a0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80032a2:	f7ff fe6d 	bl	8002f80 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80032a6:	1dba      	adds	r2, r7, #6
 80032a8:	1df9      	adds	r1, r7, #7
 80032aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2301      	movs	r3, #1
 80032b2:	4804      	ldr	r0, [pc, #16]	; (80032c4 <nrf24l01p_flush_rx_fifo+0x2c>)
 80032b4:	f7fe fd8b 	bl	8001dce <HAL_SPI_TransmitReceive>
	cs_high();
 80032b8:	f7ff fe56 	bl	8002f68 <cs_high>
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000030 	.word	0x20000030

080032c8 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo() {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80032ce:	23e1      	movs	r3, #225	; 0xe1
 80032d0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80032d2:	f7ff fe55 	bl	8002f80 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80032d6:	1dba      	adds	r2, r7, #6
 80032d8:	1df9      	adds	r1, r7, #7
 80032da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2301      	movs	r3, #1
 80032e2:	4804      	ldr	r0, [pc, #16]	; (80032f4 <nrf24l01p_flush_tx_fifo+0x2c>)
 80032e4:	f7fe fd73 	bl	8001dce <HAL_SPI_TransmitReceive>
	cs_high();
 80032e8:	f7ff fe3e 	bl	8002f68 <cs_high>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000030 	.word	0x20000030

080032f8 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status() {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 80032fe:	23ff      	movs	r3, #255	; 0xff
 8003300:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8003302:	f7ff fe3d 	bl	8002f80 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003306:	1dba      	adds	r2, r7, #6
 8003308:	1df9      	adds	r1, r7, #7
 800330a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2301      	movs	r3, #1
 8003312:	4805      	ldr	r0, [pc, #20]	; (8003328 <nrf24l01p_get_status+0x30>)
 8003314:	f7fe fd5b 	bl	8001dce <HAL_SPI_TransmitReceive>
	cs_high();
 8003318:	f7ff fe26 	bl	8002f68 <cs_high>

	return status;
 800331c:	79bb      	ldrb	r3, [r7, #6]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000030 	.word	0x20000030

0800332c <nrf24l01p_clear_tx_ds>:
	new_status |= 0x40;

	write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds() {
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
	uint8_t new_status = nrf24l01p_get_status();
 8003332:	f7ff ffe1 	bl	80032f8 <nrf24l01p_get_status>
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
	new_status |= 0x20;
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f043 0320 	orr.w	r3, r3, #32
 8003340:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_STATUS, new_status);
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4619      	mov	r1, r3
 8003346:	2007      	movs	r0, #7
 8003348:	f7ff fe64 	bl	8003014 <write_register>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt() {
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
	uint8_t new_status = nrf24l01p_get_status();
 800335a:	f7ff ffcd 	bl	80032f8 <nrf24l01p_get_status>
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
	new_status |= 0x10;
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_STATUS, new_status);
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	4619      	mov	r1, r3
 800336e:	2007      	movs	r0, #7
 8003370:	f7ff fe50 	bl	8003014 <write_register>
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <nrf24l01p_power_up>:

void nrf24l01p_power_up() {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003382:	2000      	movs	r0, #0
 8003384:	f7ff fe20 	bl	8002fc8 <read_register>
 8003388:	4603      	mov	r3, r0
 800338a:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 1;
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f043 0302 	orr.w	r3, r3, #2
 8003392:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	4619      	mov	r1, r3
 8003398:	2000      	movs	r0, #0
 800339a:	f7ff fe3b 	bl	8003014 <write_register>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <nrf24l01p_set_crc_length>:
	new_config &= 0xFD;

	write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes) {
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	71fb      	strb	r3, [r7, #7]
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7ff fe09 	bl	8002fc8 <read_register>
 80033b6:	4603      	mov	r3, r0
 80033b8:	73fb      	strb	r3, [r7, #15]

	switch (bytes) {
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d002      	beq.n	80033c6 <nrf24l01p_set_crc_length+0x20>
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d005      	beq.n	80033d0 <nrf24l01p_set_crc_length+0x2a>
 80033c4:	e009      	b.n	80033da <nrf24l01p_set_crc_length+0x34>
	// CRCO bit in CONFIG resiger set 0
	case 1:
		new_config &= 0xFB;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	73fb      	strb	r3, [r7, #15]
		break;
 80033ce:	e004      	b.n	80033da <nrf24l01p_set_crc_length+0x34>
		// CRCO bit in CONFIG resiger set 1
	case 2:
		new_config |= 1 << 2;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	73fb      	strb	r3, [r7, #15]
		break;
 80033d8:	bf00      	nop
	}

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	4619      	mov	r1, r3
 80033de:	2000      	movs	r0, #0
 80033e0:	f7ff fe18 	bl	8003014 <write_register>
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	3b02      	subs	r3, #2
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	2003      	movs	r0, #3
 8003400:	f7ff fe08 	bl	8003014 <write_register>
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8003416:	2004      	movs	r0, #4
 8003418:	f7ff fdd6 	bl	8002fc8 <read_register>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]

	// Reset ARC register 0
	new_setup_retr |= 0xF0;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	f063 030f 	orn	r3, r3, #15
 8003426:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= cnt;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	4313      	orrs	r3, r2
 800342e:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	4619      	mov	r1, r3
 8003434:	2004      	movs	r0, #4
 8003436:	f7ff fded 	bl	8003014 <write_register>
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	80fb      	strh	r3, [r7, #6]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800344e:	2004      	movs	r0, #4
 8003450:	f7ff fdba 	bl	8002fc8 <read_register>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]

	// Reset ARD register 0
	new_setup_retr |= 0x0F;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	f043 030f 	orr.w	r3, r3, #15
 800345e:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= ((us / 250) - 1) << 4;
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	b25a      	sxtb	r2, r3
 8003472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003476:	4313      	orrs	r3, r2
 8003478:	b25b      	sxtb	r3, r3
 800347a:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	4619      	mov	r1, r3
 8003480:	2004      	movs	r0, #4
 8003482:	f7ff fdc7 	bl	8003014 <write_register>
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	10624dd3 	.word	0x10624dd3

08003494 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 80034a4:	81fb      	strh	r3, [r7, #14]
	write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80034a6:	89fb      	ldrh	r3, [r7, #14]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	4619      	mov	r1, r3
 80034ac:	2005      	movs	r0, #5
 80034ae:	f7ff fdb1 	bl	8003014 <write_register>
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm) {
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80034c4:	2006      	movs	r0, #6
 80034c6:	f7ff fd7f 	bl	8002fc8 <read_register>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f023 0306 	bic.w	r3, r3, #6
 80034d0:	73fb      	strb	r3, [r7, #15]
	new_rf_setup |= (dBm << 1);
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	b25a      	sxtb	r2, r3
 80034d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034dc:	4313      	orrs	r3, r2
 80034de:	b25b      	sxtb	r3, r3
 80034e0:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	4619      	mov	r1, r3
 80034e6:	2006      	movs	r0, #6
 80034e8:	f7ff fd94 	bl	8003014 <write_register>
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
	// Set value to 0
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80034fe:	2006      	movs	r0, #6
 8003500:	f7ff fd62 	bl	8002fc8 <read_register>
 8003504:	4603      	mov	r3, r0
 8003506:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800350a:	73fb      	strb	r3, [r7, #15]

	switch (bps) {
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d00a      	beq.n	8003528 <nrf24l01p_set_rf_air_data_rate+0x34>
 8003512:	2b02      	cmp	r3, #2
 8003514:	dc0e      	bgt.n	8003534 <nrf24l01p_set_rf_air_data_rate+0x40>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <nrf24l01p_set_rf_air_data_rate+0x3e>
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10a      	bne.n	8003534 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _1Mbps:
		break;
	case _2Mbps:
		new_rf_setup |= 1 << 3;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	f043 0308 	orr.w	r3, r3, #8
 8003524:	73fb      	strb	r3, [r7, #15]
		break;
 8003526:	e005      	b.n	8003534 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _250kbps:
		new_rf_setup |= 1 << 5;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	f043 0320 	orr.w	r3, r3, #32
 800352e:	73fb      	strb	r3, [r7, #15]
		break;
 8003530:	e000      	b.n	8003534 <nrf24l01p_set_rf_air_data_rate+0x40>
		break;
 8003532:	bf00      	nop
	}
	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	4619      	mov	r1, r3
 8003538:	2006      	movs	r0, #6
 800353a:	f7ff fd6b 	bl	8003014 <write_register>
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <memset>:
 8003546:	4603      	mov	r3, r0
 8003548:	4402      	add	r2, r0
 800354a:	4293      	cmp	r3, r2
 800354c:	d100      	bne.n	8003550 <memset+0xa>
 800354e:	4770      	bx	lr
 8003550:	f803 1b01 	strb.w	r1, [r3], #1
 8003554:	e7f9      	b.n	800354a <memset+0x4>
	...

08003558 <__libc_init_array>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	2600      	movs	r6, #0
 800355c:	4d0c      	ldr	r5, [pc, #48]	; (8003590 <__libc_init_array+0x38>)
 800355e:	4c0d      	ldr	r4, [pc, #52]	; (8003594 <__libc_init_array+0x3c>)
 8003560:	1b64      	subs	r4, r4, r5
 8003562:	10a4      	asrs	r4, r4, #2
 8003564:	42a6      	cmp	r6, r4
 8003566:	d109      	bne.n	800357c <__libc_init_array+0x24>
 8003568:	f000 f81a 	bl	80035a0 <_init>
 800356c:	2600      	movs	r6, #0
 800356e:	4d0a      	ldr	r5, [pc, #40]	; (8003598 <__libc_init_array+0x40>)
 8003570:	4c0a      	ldr	r4, [pc, #40]	; (800359c <__libc_init_array+0x44>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	42a6      	cmp	r6, r4
 8003578:	d105      	bne.n	8003586 <__libc_init_array+0x2e>
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003580:	4798      	blx	r3
 8003582:	3601      	adds	r6, #1
 8003584:	e7ee      	b.n	8003564 <__libc_init_array+0xc>
 8003586:	f855 3b04 	ldr.w	r3, [r5], #4
 800358a:	4798      	blx	r3
 800358c:	3601      	adds	r6, #1
 800358e:	e7f2      	b.n	8003576 <__libc_init_array+0x1e>
 8003590:	080035e4 	.word	0x080035e4
 8003594:	080035e4 	.word	0x080035e4
 8003598:	080035e4 	.word	0x080035e4
 800359c:	080035e8 	.word	0x080035e8

080035a0 <_init>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	bf00      	nop
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr

080035ac <_fini>:
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	bf00      	nop
 80035b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b2:	bc08      	pop	{r3}
 80035b4:	469e      	mov	lr, r3
 80035b6:	4770      	bx	lr
