
UART_polling_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004428  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004694  08004694  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800469c  0800469c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800469c  0800469c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000023c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a207  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001adc  00000000  00000000  0002a2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  0002c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236f5  00000000  00000000  0002ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009feb  00000000  00000000  000503e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d34fe  00000000  00000000  0005a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d8ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027ac  00000000  00000000  0012d920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080045c0 	.word	0x080045c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080045c0 	.word	0x080045c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
volatile int i=0;
//#define DMA_BUF_SIZE 100
//uint8_t rx_dma_buf[DMA_BUF_SIZE];

int __io_putchar (int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	2201      	movs	r2, #1
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <__io_putchar+0x20>)
 80005a4:	f001 ff4b 	bl	800243e <HAL_UART_Transmit>
  return ch;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000008c 	.word	0x2000008c

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fb5e 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f83a 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f908 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c8:	f000 f8ec 	bl	80007a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f8c0 	bl	8000750 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005d0:	f000 f8a2 	bl	8000718 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
 // init_uart(&uartBuffer);
  setbuf(stdout,NULL);
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <main+0x6c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 ffa3 	bl	8003528 <setbuf>
  //HAL_UART_Receive_DMA(&huart1, rx_dma_buf, DMA_BUF_SIZE);

  HAL_UART_Receive_IT(&huart1,RxBuffer+i,1);
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <main+0x70>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <main+0x74>)
 80005ea:	4413      	add	r3, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <main+0x78>)
 80005f2:	f001 ffb6 	bl	8002562 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(RxBuffer[i]=='\n')
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <main+0x70>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a0c      	ldr	r2, [pc, #48]	; (800062c <main+0x74>)
 80005fc:	5cd3      	ldrb	r3, [r2, r3]
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d107      	bne.n	8000612 <main+0x5a>
	  {
		  printf("%s",RxBuffer);
 8000602:	490a      	ldr	r1, [pc, #40]	; (800062c <main+0x74>)
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <main+0x7c>)
 8000606:	f002 ff77 	bl	80034f8 <iprintf>
		  i=0;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <main+0x70>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e7f1      	b.n	80005f6 <main+0x3e>
	  }
	  else if(i>0xff)
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <main+0x70>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2bff      	cmp	r3, #255	; 0xff
 8000618:	dded      	ble.n	80005f6 <main+0x3e>
	  {
		  i=0;
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <main+0x70>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
	  if(RxBuffer[i]=='\n')
 8000620:	e7e9      	b.n	80005f6 <main+0x3e>
 8000622:	bf00      	nop
 8000624:	2000000c 	.word	0x2000000c
 8000628:	20000290 	.word	0x20000290
 800062c:	20000190 	.word	0x20000190
 8000630:	2000008c 	.word	0x2000008c
 8000634:	080045d8 	.word	0x080045d8

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 ff4e 	bl	80034e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <SystemClock_Config+0xd8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <SystemClock_Config+0xd8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xd8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xdc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a24      	ldr	r2, [pc, #144]	; (8000714 <SystemClock_Config+0xdc>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xdc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006ac:	23b4      	movs	r3, #180	; 0xb4
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f9d9 	bl	8001a74 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f8d2 	bl	8000870 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006cc:	f001 f982 	bl	80019d4 <HAL_PWREx_EnableOverDrive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006d6:	f000 f8cb 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2105      	movs	r1, #5
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fc33 	bl	8001f64 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000704:	f000 f8b4 	bl	8000870 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	2025      	movs	r0, #37	; 0x25
 8000722:	f000 fbf8 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000726:	2025      	movs	r0, #37	; 0x25
 8000728:	f000 fc11 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	203a      	movs	r0, #58	; 0x3a
 8000732:	f000 fbf0 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000736:	203a      	movs	r0, #58	; 0x3a
 8000738:	f000 fc09 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2046      	movs	r0, #70	; 0x46
 8000742:	f000 fbe8 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000746:	2046      	movs	r0, #70	; 0x46
 8000748:	f000 fc01 	bl	8000f4e <HAL_NVIC_EnableIRQ>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART1_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_USART1_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USART1_UART_Init+0x4c>)
 800075c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART1_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART1_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART1_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART1_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART1_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART1_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART1_UART_Init+0x4c>)
 8000788:	f001 fe0c 	bl	80023a4 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f86d 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000008c 	.word	0x2000008c
 80007a0:	40011000 	.word	0x40011000

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x30>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <MX_DMA_Init+0x30>)
 80007b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_DMA_Init+0x30>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <MX_GPIO_Init+0x4c>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_GPIO_Init+0x4c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_GPIO_Init+0x4c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <MX_GPIO_Init+0x4c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_GPIO_Init+0x4c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == huart1.Instance) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_UART_RxCpltCallback+0x3c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	d10e      	bne.n	800085a <HAL_UART_RxCpltCallback+0x32>
	//    push(&uartBuffer, rxData);
		i++;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_UART_RxCpltCallback+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a09      	ldr	r2, [pc, #36]	; (8000868 <HAL_UART_RxCpltCallback+0x40>)
 8000844:	6013      	str	r3, [r2, #0]
	    HAL_UART_Receive_IT(&huart1, RxBuffer+i, 1);
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_UART_RxCpltCallback+0x40>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_UART_RxCpltCallback+0x44>)
 800084e:	4413      	add	r3, r2
 8000850:	2201      	movs	r2, #1
 8000852:	4619      	mov	r1, r3
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <HAL_UART_RxCpltCallback+0x3c>)
 8000856:	f001 fe84 	bl	8002562 <HAL_UART_Receive_IT>

	  }
	//HAL_UART_Transmit(&huart1,RxBuffer,10,5000);
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000008c 	.word	0x2000008c
 8000868:	20000290 	.word	0x20000290
 800086c:	20000190 	.word	0x20000190

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <HAL_UART_MspInit+0x144>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	f040 808b 	bne.w	8000a06 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	4b47      	ldr	r3, [pc, #284]	; (8000a14 <HAL_UART_MspInit+0x148>)
 80008f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f8:	4a46      	ldr	r2, [pc, #280]	; (8000a14 <HAL_UART_MspInit+0x148>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6453      	str	r3, [r2, #68]	; 0x44
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <HAL_UART_MspInit+0x148>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	f003 0310 	and.w	r3, r3, #16
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <HAL_UART_MspInit+0x148>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a3f      	ldr	r2, [pc, #252]	; (8000a14 <HAL_UART_MspInit+0x148>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <HAL_UART_MspInit+0x148>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000928:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800093a:	2307      	movs	r3, #7
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4834      	ldr	r0, [pc, #208]	; (8000a18 <HAL_UART_MspInit+0x14c>)
 8000946:	f000 fe99 	bl	800167c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <HAL_UART_MspInit+0x150>)
 800094c:	4a34      	ldr	r2, [pc, #208]	; (8000a20 <HAL_UART_MspInit+0x154>)
 800094e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <HAL_UART_MspInit+0x150>)
 8000952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000956:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <HAL_UART_MspInit+0x150>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <HAL_UART_MspInit+0x150>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <HAL_UART_MspInit+0x150>)
 8000966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <HAL_UART_MspInit+0x150>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <HAL_UART_MspInit+0x150>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <HAL_UART_MspInit+0x150>)
 800097a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800097e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000980:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <HAL_UART_MspInit+0x150>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <HAL_UART_MspInit+0x150>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800098c:	4823      	ldr	r0, [pc, #140]	; (8000a1c <HAL_UART_MspInit+0x150>)
 800098e:	f000 faf9 	bl	8000f84 <HAL_DMA_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000998:	f7ff ff6a 	bl	8000870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <HAL_UART_MspInit+0x150>)
 80009a0:	639a      	str	r2, [r3, #56]	; 0x38
 80009a2:	4a1e      	ldr	r2, [pc, #120]	; (8000a1c <HAL_UART_MspInit+0x150>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009aa:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <HAL_UART_MspInit+0x15c>)
 80009ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009b8:	2240      	movs	r2, #64	; 0x40
 80009ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009ec:	f000 faca 	bl	8000f84 <HAL_DMA_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80009f6:	f7ff ff3b 	bl	8000870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_UART_MspInit+0x158>)
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_UART_MspInit+0x158>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	200000d0 	.word	0x200000d0
 8000a20:	40026440 	.word	0x40026440
 8000a24:	20000130 	.word	0x20000130
 8000a28:	400264b8 	.word	0x400264b8

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f952 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <USART1_IRQHandler+0x10>)
 8000a86:	f001 fd9d 	bl	80025c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000008c 	.word	0x2000008c

08000a94 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <DMA2_Stream2_IRQHandler+0x10>)
 8000a9a:	f000 fbb3 	bl	8001204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000d0 	.word	0x200000d0

08000aa8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <DMA2_Stream7_IRQHandler+0x10>)
 8000aae:	f000 fba9 	bl	8001204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000130 	.word	0x20000130

08000abc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e00a      	b.n	8000ae4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ace:	f3af 8000 	nop.w
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf0      	blt.n	8000ace <_read+0x12>
	}

return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e009      	b.n	8000b1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fd3f 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf1      	blt.n	8000b08 <_write+0x12>
	}
	return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_close>:

int _close(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b56:	605a      	str	r2, [r3, #4]
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_isatty>:

int _isatty(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f002 fc64 	bl	8003494 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20030000 	.word	0x20030000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	20000294 	.word	0x20000294
 8000c00:	200002b0 	.word	0x200002b0

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0a:	490e      	ldr	r1, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c20:	4c0b      	ldr	r4, [pc, #44]	; (8000c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2e:	f000 f813 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f002 fc35 	bl	80034a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fcbf 	bl	80005b8 <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c48:	080046a4 	.word	0x080046a4
  ldr r2, =_sbss
 8000c4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c50:	200002ac 	.word	0x200002ac

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f92b 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	200f      	movs	r0, #15
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fde4 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f943 	bl	8000f6a <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f90b 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000298 	.word	0x20000298

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000298 	.word	0x20000298

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff29 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff3e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff31 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa2 	bl	8000ebc <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff feda 	bl	8000d48 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e099      	b.n	80010d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc0:	e00f      	b.n	8000fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fc2:	f7ff fec1 	bl	8000d48 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d908      	bls.n	8000fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e078      	b.n	80010d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e8      	bne.n	8000fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	4b38      	ldr	r3, [pc, #224]	; (80010dc <HAL_DMA_Init+0x158>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800100e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	2b04      	cmp	r3, #4
 800103a:	d107      	bne.n	800104c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	4313      	orrs	r3, r2
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f023 0307 	bic.w	r3, r3, #7
 8001062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4313      	orrs	r3, r2
 800106c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	2b04      	cmp	r3, #4
 8001074:	d117      	bne.n	80010a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4313      	orrs	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00e      	beq.n	80010a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 fa7b 	bl	8001584 <DMA_CheckFifoParam>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2240      	movs	r2, #64	; 0x40
 8001098:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010a2:	2301      	movs	r3, #1
 80010a4:	e016      	b.n	80010d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 fa32 	bl	8001518 <DMA_CalcBaseAndBitshift>
 80010b4:	4603      	mov	r3, r0
 80010b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010bc:	223f      	movs	r2, #63	; 0x3f
 80010be:	409a      	lsls	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	f010803f 	.word	0xf010803f

080010e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ee:	f7ff fe2b 	bl	8000d48 <HAL_GetTick>
 80010f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e052      	b.n	80011b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0216 	bic.w	r2, r2, #22
 8001120:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001130:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <HAL_DMA_Abort+0x62>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0208 	bic.w	r2, r2, #8
 8001150:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0201 	bic.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001162:	e013      	b.n	800118c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001164:	f7ff fdf0 	bl	8000d48 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b05      	cmp	r3, #5
 8001170:	d90c      	bls.n	800118c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2220      	movs	r2, #32
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e015      	b.n	80011b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e4      	bne.n	8001164 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119e:	223f      	movs	r2, #63	; 0x3f
 80011a0:	409a      	lsls	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d004      	beq.n	80011de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00c      	b.n	80011f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2205      	movs	r2, #5
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001210:	4b8e      	ldr	r3, [pc, #568]	; (800144c <HAL_DMA_IRQHandler+0x248>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a8e      	ldr	r2, [pc, #568]	; (8001450 <HAL_DMA_IRQHandler+0x24c>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0a9b      	lsrs	r3, r3, #10
 800121c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122e:	2208      	movs	r2, #8
 8001230:	409a      	lsls	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d01a      	beq.n	8001270 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d013      	beq.n	8001270 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0204 	bic.w	r2, r2, #4
 8001256:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2208      	movs	r2, #8
 800125e:	409a      	lsls	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001274:	2201      	movs	r2, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d012      	beq.n	80012a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001292:	2201      	movs	r2, #1
 8001294:	409a      	lsls	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129e:	f043 0202 	orr.w	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012aa:	2204      	movs	r2, #4
 80012ac:	409a      	lsls	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d012      	beq.n	80012dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00b      	beq.n	80012dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	2204      	movs	r2, #4
 80012ca:	409a      	lsls	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	f043 0204 	orr.w	r2, r3, #4
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	2210      	movs	r2, #16
 80012e2:	409a      	lsls	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d043      	beq.n	8001374 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d03c      	beq.n	8001374 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fe:	2210      	movs	r2, #16
 8001300:	409a      	lsls	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d018      	beq.n	8001346 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d108      	bne.n	8001334 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	2b00      	cmp	r3, #0
 8001328:	d024      	beq.n	8001374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	4798      	blx	r3
 8001332:	e01f      	b.n	8001374 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01b      	beq.n	8001374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	4798      	blx	r3
 8001344:	e016      	b.n	8001374 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d107      	bne.n	8001364 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0208 	bic.w	r2, r2, #8
 8001362:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001378:	2220      	movs	r2, #32
 800137a:	409a      	lsls	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 808f 	beq.w	80014a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8087 	beq.w	80014a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	2220      	movs	r2, #32
 800139c:	409a      	lsls	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d136      	bne.n	800141c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0216 	bic.w	r2, r2, #22
 80013bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695a      	ldr	r2, [r3, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <HAL_DMA_IRQHandler+0x1da>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0208 	bic.w	r2, r2, #8
 80013ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f2:	223f      	movs	r2, #63	; 0x3f
 80013f4:	409a      	lsls	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140e:	2b00      	cmp	r3, #0
 8001410:	d07e      	beq.n	8001510 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	4798      	blx	r3
        }
        return;
 800141a:	e079      	b.n	8001510 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d01d      	beq.n	8001466 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10d      	bne.n	8001454 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	2b00      	cmp	r3, #0
 800143e:	d031      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
 8001448:	e02c      	b.n	80014a4 <HAL_DMA_IRQHandler+0x2a0>
 800144a:	bf00      	nop
 800144c:	20000000 	.word	0x20000000
 8001450:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001458:	2b00      	cmp	r3, #0
 800145a:	d023      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	4798      	blx	r3
 8001464:	e01e      	b.n	80014a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10f      	bne.n	8001494 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0210 	bic.w	r2, r2, #16
 8001482:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d032      	beq.n	8001512 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d022      	beq.n	80014fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2205      	movs	r2, #5
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d307      	bcc.n	80014ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f2      	bne.n	80014d0 <HAL_DMA_IRQHandler+0x2cc>
 80014ea:	e000      	b.n	80014ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
 800150e:	e000      	b.n	8001512 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001510:	bf00      	nop
    }
  }
}
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	3b10      	subs	r3, #16
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <DMA_CalcBaseAndBitshift+0x64>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <DMA_CalcBaseAndBitshift+0x68>)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d909      	bls.n	800155a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	1d1a      	adds	r2, r3, #4
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	659a      	str	r2, [r3, #88]	; 0x58
 8001558:	e007      	b.n	800156a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	aaaaaaab 	.word	0xaaaaaaab
 8001580:	080045f4 	.word	0x080045f4

08001584 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d11f      	bne.n	80015de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d856      	bhi.n	8001652 <DMA_CheckFifoParam+0xce>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <DMA_CheckFifoParam+0x28>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015bd 	.word	0x080015bd
 80015b0:	080015cf 	.word	0x080015cf
 80015b4:	080015bd 	.word	0x080015bd
 80015b8:	08001653 	.word	0x08001653
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d046      	beq.n	8001656 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015cc:	e043      	b.n	8001656 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015d6:	d140      	bne.n	800165a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015dc:	e03d      	b.n	800165a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e6:	d121      	bne.n	800162c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d837      	bhi.n	800165e <DMA_CheckFifoParam+0xda>
 80015ee:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <DMA_CheckFifoParam+0x70>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	08001605 	.word	0x08001605
 80015f8:	0800160b 	.word	0x0800160b
 80015fc:	08001605 	.word	0x08001605
 8001600:	0800161d 	.word	0x0800161d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
      break;
 8001608:	e030      	b.n	800166c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d025      	beq.n	8001662 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800161a:	e022      	b.n	8001662 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001624:	d11f      	bne.n	8001666 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800162a:	e01c      	b.n	8001666 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d903      	bls.n	800163a <DMA_CheckFifoParam+0xb6>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d003      	beq.n	8001640 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001638:	e018      	b.n	800166c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
      break;
 800163e:	e015      	b.n	800166c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00e      	beq.n	800166a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
      break;
 8001650:	e00b      	b.n	800166a <DMA_CheckFifoParam+0xe6>
      break;
 8001652:	bf00      	nop
 8001654:	e00a      	b.n	800166c <DMA_CheckFifoParam+0xe8>
      break;
 8001656:	bf00      	nop
 8001658:	e008      	b.n	800166c <DMA_CheckFifoParam+0xe8>
      break;
 800165a:	bf00      	nop
 800165c:	e006      	b.n	800166c <DMA_CheckFifoParam+0xe8>
      break;
 800165e:	bf00      	nop
 8001660:	e004      	b.n	800166c <DMA_CheckFifoParam+0xe8>
      break;
 8001662:	bf00      	nop
 8001664:	e002      	b.n	800166c <DMA_CheckFifoParam+0xe8>
      break;   
 8001666:	bf00      	nop
 8001668:	e000      	b.n	800166c <DMA_CheckFifoParam+0xe8>
      break;
 800166a:	bf00      	nop
    }
  } 
  
  return status; 
 800166c:	7bfb      	ldrb	r3, [r7, #15]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e177      	b.n	8001988 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8166 	bne.w	8001982 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d005      	beq.n	80016ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d130      	bne.n	8001730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001704:	2201      	movs	r2, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 0201 	and.w	r2, r3, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b03      	cmp	r3, #3
 800173a:	d017      	beq.n	800176c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d123      	bne.n	80017c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80c0 	beq.w	8001982 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b66      	ldr	r3, [pc, #408]	; (80019a0 <HAL_GPIO_Init+0x324>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a65      	ldr	r2, [pc, #404]	; (80019a0 <HAL_GPIO_Init+0x324>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_GPIO_Init+0x324>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <HAL_GPIO_Init+0x328>)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_GPIO_Init+0x32c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d037      	beq.n	80018ba <HAL_GPIO_Init+0x23e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_GPIO_Init+0x330>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d031      	beq.n	80018b6 <HAL_GPIO_Init+0x23a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <HAL_GPIO_Init+0x334>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d02b      	beq.n	80018b2 <HAL_GPIO_Init+0x236>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a55      	ldr	r2, [pc, #340]	; (80019b4 <HAL_GPIO_Init+0x338>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d025      	beq.n	80018ae <HAL_GPIO_Init+0x232>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a54      	ldr	r2, [pc, #336]	; (80019b8 <HAL_GPIO_Init+0x33c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <HAL_GPIO_Init+0x22e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a53      	ldr	r2, [pc, #332]	; (80019bc <HAL_GPIO_Init+0x340>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <HAL_GPIO_Init+0x22a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <HAL_GPIO_Init+0x344>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x226>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a51      	ldr	r2, [pc, #324]	; (80019c4 <HAL_GPIO_Init+0x348>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x222>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a50      	ldr	r2, [pc, #320]	; (80019c8 <HAL_GPIO_Init+0x34c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x21e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_GPIO_Init+0x350>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x21a>
 8001892:	2309      	movs	r3, #9
 8001894:	e012      	b.n	80018bc <HAL_GPIO_Init+0x240>
 8001896:	230a      	movs	r3, #10
 8001898:	e010      	b.n	80018bc <HAL_GPIO_Init+0x240>
 800189a:	2308      	movs	r3, #8
 800189c:	e00e      	b.n	80018bc <HAL_GPIO_Init+0x240>
 800189e:	2307      	movs	r3, #7
 80018a0:	e00c      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018a2:	2306      	movs	r3, #6
 80018a4:	e00a      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018aa:	2304      	movs	r3, #4
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018ba:	2300      	movs	r3, #0
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018cc:	4935      	ldr	r1, [pc, #212]	; (80019a4 <HAL_GPIO_Init+0x328>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_GPIO_Init+0x354>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fe:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <HAL_GPIO_Init+0x354>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_GPIO_Init+0x354>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001928:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <HAL_GPIO_Init+0x354>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_GPIO_Init+0x354>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_GPIO_Init+0x354>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_GPIO_Init+0x354>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_GPIO_Init+0x354>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	f67f ae84 	bls.w	8001698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40021400 	.word	0x40021400
 80019c0:	40021800 	.word	0x40021800
 80019c4:	40021c00 	.word	0x40021c00
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40022400 	.word	0x40022400
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_PWREx_EnableOverDrive+0x90>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_PWREx_EnableOverDrive+0x90>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_PWREx_EnableOverDrive+0x90>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_PWREx_EnableOverDrive+0x94>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a00:	f7ff f9a2 	bl	8000d48 <HAL_GetTick>
 8001a04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a06:	e009      	b.n	8001a1c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a08:	f7ff f99e 	bl	8000d48 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a16:	d901      	bls.n	8001a1c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e01f      	b.n	8001a5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d1ee      	bne.n	8001a08 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a30:	f7ff f98a 	bl	8000d48 <HAL_GetTick>
 8001a34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a36:	e009      	b.n	8001a4c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a38:	f7ff f986 	bl	8000d48 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a46:	d901      	bls.n	8001a4c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e007      	b.n	8001a5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a58:	d1ee      	bne.n	8001a38 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	420e0040 	.word	0x420e0040
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	420e0044 	.word	0x420e0044

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e267      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d075      	beq.n	8001b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a92:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d00c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9e:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d112      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4b82      	ldr	r3, [pc, #520]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4b7e      	ldr	r3, [pc, #504]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d05b      	beq.n	8001b7c <HAL_RCC_OscConfig+0x108>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d157      	bne.n	8001b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e242      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x74>
 8001ada:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a75      	ldr	r2, [pc, #468]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x98>
 8001af2:	4b70      	ldr	r3, [pc, #448]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6f      	ldr	r2, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b6d      	ldr	r3, [pc, #436]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6c      	ldr	r2, [pc, #432]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	4b69      	ldr	r3, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a68      	ldr	r2, [pc, #416]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a65      	ldr	r2, [pc, #404]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f90c 	bl	8000d48 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f908 	bl	8000d48 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e207      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xc0>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f8f8 	bl	8000d48 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f8f4 	bl	8000d48 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1f3      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0xe8>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d063      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x152>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e1c7      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4937      	ldr	r1, [pc, #220]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	e03a      	b.n	8001c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be4:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <HAL_RCC_OscConfig+0x244>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f8ad 	bl	8000d48 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f8a9 	bl	8000d48 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1a8      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4925      	ldr	r1, [pc, #148]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_RCC_OscConfig+0x244>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f88c 	bl	8000d48 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff f888 	bl	8000d48 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e187      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d036      	beq.n	8001ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d016      	beq.n	8001c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_RCC_OscConfig+0x248>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f86c 	bl	8000d48 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff f868 	bl	8000d48 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e167      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_OscConfig+0x240>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x200>
 8001c92:	e01b      	b.n	8001ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x248>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f855 	bl	8000d48 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	e00e      	b.n	8001cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f851 	bl	8000d48 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d907      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e150      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	42470000 	.word	0x42470000
 8001cbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ea      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8097 	beq.w	8001e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b81      	ldr	r3, [pc, #516]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a7c      	ldr	r2, [pc, #496]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b7a      	ldr	r3, [pc, #488]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <HAL_RCC_OscConfig+0x474>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b74      	ldr	r3, [pc, #464]	; (8001ee8 <HAL_RCC_OscConfig+0x474>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a73      	ldr	r2, [pc, #460]	; (8001ee8 <HAL_RCC_OscConfig+0x474>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff f811 	bl	8000d48 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2a:	f7ff f80d 	bl	8000d48 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e10c      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x474>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2ea>
 8001d50:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a63      	ldr	r2, [pc, #396]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	e01c      	b.n	8001d98 <HAL_RCC_OscConfig+0x324>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x30c>
 8001d66:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a5e      	ldr	r2, [pc, #376]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0x324>
 8001d80:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	4a54      	ldr	r2, [pc, #336]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d015      	beq.n	8001dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7fe ffd2 	bl	8000d48 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7fe ffce 	bl	8000d48 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e0cb      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0ee      	beq.n	8001da8 <HAL_RCC_OscConfig+0x334>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dcc:	f7fe ffbc 	bl	8000d48 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7fe ffb8 	bl	8000d48 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0b5      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	4a38      	ldr	r2, [pc, #224]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80a1 	beq.w	8001f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e12:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d05c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d141      	bne.n	8001eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_RCC_OscConfig+0x478>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ff8c 	bl	8000d48 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe ff88 	bl	8000d48 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e087      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	019b      	lsls	r3, r3, #6
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	041b      	lsls	r3, r3, #16
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x478>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7fe ff61 	bl	8000d48 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe ff5d 	bl	8000d48 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e05c      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x416>
 8001ea8:	e054      	b.n	8001f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_OscConfig+0x478>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ff4a 	bl	8000d48 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe ff46 	bl	8000d48 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e045      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x444>
 8001ed6:	e03d      	b.n	8001f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e038      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x4ec>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d028      	beq.n	8001f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d121      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d11a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d111      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0cc      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b68      	ldr	r3, [pc, #416]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d90c      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b65      	ldr	r3, [pc, #404]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	494d      	ldr	r1, [pc, #308]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d044      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b47      	ldr	r3, [pc, #284]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d119      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d003      	beq.n	8002022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	2b03      	cmp	r3, #3
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e06f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e067      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b37      	ldr	r3, [pc, #220]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4934      	ldr	r1, [pc, #208]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7fe fe78 	bl	8000d48 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7fe fe74 	bl	8000d48 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e04f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d20c      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e032      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4916      	ldr	r1, [pc, #88]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490e      	ldr	r1, [pc, #56]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ea:	f000 f821 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490a      	ldr	r1, [pc, #40]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fdd8 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00
 8002120:	40023800 	.word	0x40023800
 8002124:	080045dc 	.word	0x080045dc
 8002128:	20000000 	.word	0x20000000
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002134:	b094      	sub	sp, #80	; 0x50
 8002136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
 800213c:	2300      	movs	r3, #0
 800213e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002140:	2300      	movs	r3, #0
 8002142:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002148:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_RCC_GetSysClockFreq+0x200>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d00d      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x40>
 8002154:	2b08      	cmp	r3, #8
 8002156:	f200 80e1 	bhi.w	800231c <HAL_RCC_GetSysClockFreq+0x1ec>
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x34>
 800215e:	2b04      	cmp	r3, #4
 8002160:	d003      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x3a>
 8002162:	e0db      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b73      	ldr	r3, [pc, #460]	; (8002334 <HAL_RCC_GetSysClockFreq+0x204>)
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002168:	e0db      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216a:	4b73      	ldr	r3, [pc, #460]	; (8002338 <HAL_RCC_GetSysClockFreq+0x208>)
 800216c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800216e:	e0d8      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_RCC_GetSysClockFreq+0x200>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002178:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217a:	4b6d      	ldr	r3, [pc, #436]	; (8002330 <HAL_RCC_GetSysClockFreq+0x200>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002186:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_GetSysClockFreq+0x200>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	2200      	movs	r2, #0
 800218e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002190:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
 800219a:	2300      	movs	r3, #0
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
 800219e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021a2:	4622      	mov	r2, r4
 80021a4:	462b      	mov	r3, r5
 80021a6:	f04f 0000 	mov.w	r0, #0
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	0159      	lsls	r1, r3, #5
 80021b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b4:	0150      	lsls	r0, r2, #5
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4621      	mov	r1, r4
 80021bc:	1a51      	subs	r1, r2, r1
 80021be:	6139      	str	r1, [r7, #16]
 80021c0:	4629      	mov	r1, r5
 80021c2:	eb63 0301 	sbc.w	r3, r3, r1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021d4:	4659      	mov	r1, fp
 80021d6:	018b      	lsls	r3, r1, #6
 80021d8:	4651      	mov	r1, sl
 80021da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021de:	4651      	mov	r1, sl
 80021e0:	018a      	lsls	r2, r1, #6
 80021e2:	4651      	mov	r1, sl
 80021e4:	ebb2 0801 	subs.w	r8, r2, r1
 80021e8:	4659      	mov	r1, fp
 80021ea:	eb63 0901 	sbc.w	r9, r3, r1
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002202:	4690      	mov	r8, r2
 8002204:	4699      	mov	r9, r3
 8002206:	4623      	mov	r3, r4
 8002208:	eb18 0303 	adds.w	r3, r8, r3
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	462b      	mov	r3, r5
 8002210:	eb49 0303 	adc.w	r3, r9, r3
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002222:	4629      	mov	r1, r5
 8002224:	024b      	lsls	r3, r1, #9
 8002226:	4621      	mov	r1, r4
 8002228:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800222c:	4621      	mov	r1, r4
 800222e:	024a      	lsls	r2, r1, #9
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002236:	2200      	movs	r2, #0
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
 800223a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800223c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002240:	f7fe f826 	bl	8000290 <__aeabi_uldivmod>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4613      	mov	r3, r2
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800224c:	e058      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224e:	4b38      	ldr	r3, [pc, #224]	; (8002330 <HAL_RCC_GetSysClockFreq+0x200>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	099b      	lsrs	r3, r3, #6
 8002254:	2200      	movs	r2, #0
 8002256:	4618      	mov	r0, r3
 8002258:	4611      	mov	r1, r2
 800225a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
 8002264:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002268:	4642      	mov	r2, r8
 800226a:	464b      	mov	r3, r9
 800226c:	f04f 0000 	mov.w	r0, #0
 8002270:	f04f 0100 	mov.w	r1, #0
 8002274:	0159      	lsls	r1, r3, #5
 8002276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227a:	0150      	lsls	r0, r2, #5
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4641      	mov	r1, r8
 8002282:	ebb2 0a01 	subs.w	sl, r2, r1
 8002286:	4649      	mov	r1, r9
 8002288:	eb63 0b01 	sbc.w	fp, r3, r1
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002298:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800229c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022a0:	ebb2 040a 	subs.w	r4, r2, sl
 80022a4:	eb63 050b 	sbc.w	r5, r3, fp
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	00eb      	lsls	r3, r5, #3
 80022b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b6:	00e2      	lsls	r2, r4, #3
 80022b8:	4614      	mov	r4, r2
 80022ba:	461d      	mov	r5, r3
 80022bc:	4643      	mov	r3, r8
 80022be:	18e3      	adds	r3, r4, r3
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	464b      	mov	r3, r9
 80022c4:	eb45 0303 	adc.w	r3, r5, r3
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022d6:	4629      	mov	r1, r5
 80022d8:	028b      	lsls	r3, r1, #10
 80022da:	4621      	mov	r1, r4
 80022dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022e0:	4621      	mov	r1, r4
 80022e2:	028a      	lsls	r2, r1, #10
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ea:	2200      	movs	r2, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	61fa      	str	r2, [r7, #28]
 80022f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f4:	f7fd ffcc 	bl	8000290 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4613      	mov	r3, r2
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_GetSysClockFreq+0x200>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	3301      	adds	r3, #1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800231a:	e002      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetSysClockFreq+0x204>)
 800231e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002324:	4618      	mov	r0, r3
 8002326:	3750      	adds	r7, #80	; 0x50
 8002328:	46bd      	mov	sp, r7
 800232a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	00f42400 	.word	0x00f42400
 8002338:	007a1200 	.word	0x007a1200

0800233c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_GetHCLKFreq+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002358:	f7ff fff0 	bl	800233c <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	080045ec 	.word	0x080045ec

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002380:	f7ff ffdc 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0b5b      	lsrs	r3, r3, #13
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	080045ec 	.word	0x080045ec

080023a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e03f      	b.n	8002436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fa7e 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fddf 	bl	8002fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800240c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800241c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b08a      	sub	sp, #40	; 0x28
 8002442:	af02      	add	r7, sp, #8
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	d17c      	bne.n	8002558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_UART_Transmit+0x2c>
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e075      	b.n	800255a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_UART_Transmit+0x3e>
 8002478:	2302      	movs	r3, #2
 800247a:	e06e      	b.n	800255a <HAL_UART_Transmit+0x11c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2221      	movs	r2, #33	; 0x21
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002492:	f7fe fc59 	bl	8000d48 <HAL_GetTick>
 8002496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	88fa      	ldrh	r2, [r7, #6]
 80024a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ac:	d108      	bne.n	80024c0 <HAL_UART_Transmit+0x82>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	e003      	b.n	80024c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024d0:	e02a      	b.n	8002528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fb1f 	bl	8002b20 <UART_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e036      	b.n	800255a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10b      	bne.n	800250a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	3302      	adds	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	e007      	b.n	800251a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3301      	adds	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1cf      	bne.n	80024d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2200      	movs	r2, #0
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 faef 	bl	8002b20 <UART_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e006      	b.n	800255a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	4618      	mov	r0, r3
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	4613      	mov	r3, r2
 800256e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b20      	cmp	r3, #32
 800257a:	d11d      	bne.n	80025b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_UART_Receive_IT+0x26>
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e016      	b.n	80025ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_UART_Receive_IT+0x38>
 8002596:	2302      	movs	r3, #2
 8002598:	e00f      	b.n	80025ba <HAL_UART_Receive_IT+0x58>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fb24 	bl	8002bfc <UART_Start_Receive_IT>
 80025b4:	4603      	mov	r3, r0
 80025b6:	e000      	b.n	80025ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0ba      	sub	sp, #232	; 0xe8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800260a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_UART_IRQHandler+0x66>
 8002616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fc07 	bl	8002e36 <UART_Receive_IT>
      return;
 8002628:	e256      	b.n	8002ad8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800262a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80de 	beq.w	80027f0 <HAL_UART_IRQHandler+0x22c>
 8002634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002644:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80d1 	beq.w	80027f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800264e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_UART_IRQHandler+0xae>
 800265a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_UART_IRQHandler+0xd2>
 800267e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f043 0202 	orr.w	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_UART_IRQHandler+0xf6>
 80026a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0204 	orr.w	r2, r3, #4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d011      	beq.n	80026ea <HAL_UART_IRQHandler+0x126>
 80026c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f043 0208 	orr.w	r2, r3, #8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 81ed 	beq.w	8002ace <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_UART_IRQHandler+0x14e>
 8002700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fb92 	bl	8002e36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <HAL_UART_IRQHandler+0x17a>
 8002736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d04f      	beq.n	80027de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa9a 	bl	8002c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	2b40      	cmp	r3, #64	; 0x40
 8002750:	d141      	bne.n	80027d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3314      	adds	r3, #20
 8002758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002760:	e853 3f00 	ldrex	r3, [r3]
 8002764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800276c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3314      	adds	r3, #20
 800277a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800277e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800278a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1d9      	bne.n	8002752 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d013      	beq.n	80027ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	4a7d      	ldr	r2, [pc, #500]	; (80029a0 <HAL_UART_IRQHandler+0x3dc>)
 80027ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fd04 	bl	80011c0 <HAL_DMA_Abort_IT>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027c8:	4610      	mov	r0, r2
 80027ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027cc:	e00e      	b.n	80027ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f990 	bl	8002af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d4:	e00a      	b.n	80027ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f98c 	bl	8002af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027dc:	e006      	b.n	80027ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f988 	bl	8002af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027ea:	e170      	b.n	8002ace <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ec:	bf00      	nop
    return;
 80027ee:	e16e      	b.n	8002ace <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	f040 814a 	bne.w	8002a8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8143 	beq.w	8002a8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 813c 	beq.w	8002a8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	f040 80b4 	bne.w	80029a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002848:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8140 	beq.w	8002ad2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800285a:	429a      	cmp	r2, r3
 800285c:	f080 8139 	bcs.w	8002ad2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002866:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002872:	f000 8088 	beq.w	8002986 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	330c      	adds	r3, #12
 800287c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800288c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1d9      	bne.n	8002876 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3314      	adds	r3, #20
 80028c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3314      	adds	r3, #20
 80028e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028f2:	e841 2300 	strex	r3, r2, [r1]
 80028f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e1      	bne.n	80028c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800290e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3314      	adds	r3, #20
 800291e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e3      	bne.n	80028fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002956:	f023 0310 	bic.w	r3, r3, #16
 800295a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002968:	65ba      	str	r2, [r7, #88]	; 0x58
 800296a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800296e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e3      	bne.n	8002944 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fbad 	bl	80010e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800298e:	b29b      	uxth	r3, r3
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	b29b      	uxth	r3, r3
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8b6 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800299c:	e099      	b.n	8002ad2 <HAL_UART_IRQHandler+0x50e>
 800299e:	bf00      	nop
 80029a0:	08002d3f 	.word	0x08002d3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 808b 	beq.w	8002ad6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8086 	beq.w	8002ad6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	330c      	adds	r3, #12
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	e853 3f00 	ldrex	r3, [r3]
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029ee:	647a      	str	r2, [r7, #68]	; 0x44
 80029f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e3      	bne.n	80029ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3314      	adds	r3, #20
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	623b      	str	r3, [r7, #32]
   return(result);
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3314      	adds	r3, #20
 8002a22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a26:	633a      	str	r2, [r7, #48]	; 0x30
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e3      	bne.n	8002a02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	e853 3f00 	ldrex	r3, [r3]
 8002a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0310 	bic.w	r3, r3, #16
 8002a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a6c:	61fa      	str	r2, [r7, #28]
 8002a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	69b9      	ldr	r1, [r7, #24]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	617b      	str	r3, [r7, #20]
   return(result);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e3      	bne.n	8002a48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f83e 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a8c:	e023      	b.n	8002ad6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_UART_IRQHandler+0x4ea>
 8002a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f95d 	bl	8002d66 <UART_Transmit_IT>
    return;
 8002aac:	e014      	b.n	8002ad8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x514>
 8002aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f99d 	bl	8002e06 <UART_EndTransmit_IT>
    return;
 8002acc:	e004      	b.n	8002ad8 <HAL_UART_IRQHandler+0x514>
    return;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ad6:	bf00      	nop
  }
}
 8002ad8:	37e8      	adds	r7, #232	; 0xe8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop

08002ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b090      	sub	sp, #64	; 0x40
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b30:	e050      	b.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d04c      	beq.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b40:	f7fe f902 	bl	8000d48 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d241      	bcs.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b70:	637a      	str	r2, [r7, #52]	; 0x34
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b78:	e841 2300 	strex	r3, r2, [r1]
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e5      	bne.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	e853 3f00 	ldrex	r3, [r3]
 8002b92:	613b      	str	r3, [r7, #16]
   return(result);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ba4:	623a      	str	r2, [r7, #32]
 8002ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	69f9      	ldr	r1, [r7, #28]
 8002baa:	6a3a      	ldr	r2, [r7, #32]
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e5      	bne.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e00f      	b.n	8002bf4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d09f      	beq.n	8002b32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3740      	adds	r7, #64	; 0x40
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2222      	movs	r2, #34	; 0x22
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0220 	orr.w	r2, r2, #32
 8002c68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b095      	sub	sp, #84	; 0x54
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca0:	643a      	str	r2, [r7, #64]	; 0x40
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e5      	bne.n	8002c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3314      	adds	r3, #20
 8002cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e5      	bne.n	8002cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d119      	bne.n	8002d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f023 0310 	bic.w	r3, r3, #16
 8002d06:	647b      	str	r3, [r7, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d10:	61ba      	str	r2, [r7, #24]
 8002d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6979      	ldr	r1, [r7, #20]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e5      	bne.n	8002cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d32:	bf00      	nop
 8002d34:	3754      	adds	r7, #84	; 0x54
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fecb 	bl	8002af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b21      	cmp	r3, #33	; 0x21
 8002d78:	d13e      	bne.n	8002df8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	d114      	bne.n	8002dae <UART_Transmit_IT+0x48>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d110      	bne.n	8002dae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	1c9a      	adds	r2, r3, #2
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	621a      	str	r2, [r3, #32]
 8002dac:	e008      	b.n	8002dc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	1c59      	adds	r1, r3, #1
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6211      	str	r1, [r2, #32]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10f      	bne.n	8002df4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fe5a 	bl	8002ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08c      	sub	sp, #48	; 0x30
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b22      	cmp	r3, #34	; 0x22
 8002e48:	f040 80ab 	bne.w	8002fa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e54:	d117      	bne.n	8002e86 <UART_Receive_IT+0x50>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
 8002e84:	e026      	b.n	8002ed4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e98:	d007      	beq.n	8002eaa <UART_Receive_IT+0x74>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <UART_Receive_IT+0x82>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e008      	b.n	8002eca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d15a      	bne.n	8002f9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0220 	bic.w	r2, r2, #32
 8002ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d135      	bne.n	8002f94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f023 0310 	bic.w	r3, r3, #16
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	330c      	adds	r3, #12
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	623a      	str	r2, [r7, #32]
 8002f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	69f9      	ldr	r1, [r7, #28]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e5      	bne.n	8002f2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d10a      	bne.n	8002f86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff fdbb 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
 8002f92:	e002      	b.n	8002f9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fd fc47 	bl	8000828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e002      	b.n	8002fa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3730      	adds	r7, #48	; 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b0c0      	sub	sp, #256	; 0x100
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	ea40 0301 	orr.w	r3, r0, r1
 8002fd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003004:	f021 010c 	bic.w	r1, r1, #12
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003012:	430b      	orrs	r3, r1
 8003014:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	6999      	ldr	r1, [r3, #24]
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	ea40 0301 	orr.w	r3, r0, r1
 8003032:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <UART_SetConfig+0x2cc>)
 800303c:	429a      	cmp	r2, r3
 800303e:	d005      	beq.n	800304c <UART_SetConfig+0xa0>
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b8d      	ldr	r3, [pc, #564]	; (800327c <UART_SetConfig+0x2d0>)
 8003048:	429a      	cmp	r2, r3
 800304a:	d104      	bne.n	8003056 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800304c:	f7ff f996 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003050:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003054:	e003      	b.n	800305e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003056:	f7ff f97d 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 800305a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	f040 810c 	bne.w	8003284 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800306c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003070:	2200      	movs	r2, #0
 8003072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003076:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800307a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	1891      	adds	r1, r2, r2
 8003084:	65b9      	str	r1, [r7, #88]	; 0x58
 8003086:	415b      	adcs	r3, r3
 8003088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800308a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800308e:	4621      	mov	r1, r4
 8003090:	eb12 0801 	adds.w	r8, r2, r1
 8003094:	4629      	mov	r1, r5
 8003096:	eb43 0901 	adc.w	r9, r3, r1
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ae:	4690      	mov	r8, r2
 80030b0:	4699      	mov	r9, r3
 80030b2:	4623      	mov	r3, r4
 80030b4:	eb18 0303 	adds.w	r3, r8, r3
 80030b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030bc:	462b      	mov	r3, r5
 80030be:	eb49 0303 	adc.w	r3, r9, r3
 80030c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030da:	460b      	mov	r3, r1
 80030dc:	18db      	adds	r3, r3, r3
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
 80030e0:	4613      	mov	r3, r2
 80030e2:	eb42 0303 	adc.w	r3, r2, r3
 80030e6:	657b      	str	r3, [r7, #84]	; 0x54
 80030e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030f0:	f7fd f8ce 	bl	8000290 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4b61      	ldr	r3, [pc, #388]	; (8003280 <UART_SetConfig+0x2d4>)
 80030fa:	fba3 2302 	umull	r2, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	011c      	lsls	r4, r3, #4
 8003102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003106:	2200      	movs	r2, #0
 8003108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800310c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003110:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003114:	4642      	mov	r2, r8
 8003116:	464b      	mov	r3, r9
 8003118:	1891      	adds	r1, r2, r2
 800311a:	64b9      	str	r1, [r7, #72]	; 0x48
 800311c:	415b      	adcs	r3, r3
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003120:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003124:	4641      	mov	r1, r8
 8003126:	eb12 0a01 	adds.w	sl, r2, r1
 800312a:	4649      	mov	r1, r9
 800312c:	eb43 0b01 	adc.w	fp, r3, r1
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800313c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003144:	4692      	mov	sl, r2
 8003146:	469b      	mov	fp, r3
 8003148:	4643      	mov	r3, r8
 800314a:	eb1a 0303 	adds.w	r3, sl, r3
 800314e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003152:	464b      	mov	r3, r9
 8003154:	eb4b 0303 	adc.w	r3, fp, r3
 8003158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003168:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800316c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003170:	460b      	mov	r3, r1
 8003172:	18db      	adds	r3, r3, r3
 8003174:	643b      	str	r3, [r7, #64]	; 0x40
 8003176:	4613      	mov	r3, r2
 8003178:	eb42 0303 	adc.w	r3, r2, r3
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
 800317e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003182:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003186:	f7fd f883 	bl	8000290 <__aeabi_uldivmod>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4611      	mov	r1, r2
 8003190:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <UART_SetConfig+0x2d4>)
 8003192:	fba3 2301 	umull	r2, r3, r3, r1
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2264      	movs	r2, #100	; 0x64
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	1acb      	subs	r3, r1, r3
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <UART_SetConfig+0x2d4>)
 80031a8:	fba3 2302 	umull	r2, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031b4:	441c      	add	r4, r3
 80031b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80031d0:	415b      	adcs	r3, r3
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031d8:	4641      	mov	r1, r8
 80031da:	1851      	adds	r1, r2, r1
 80031dc:	6339      	str	r1, [r7, #48]	; 0x30
 80031de:	4649      	mov	r1, r9
 80031e0:	414b      	adcs	r3, r1
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031f0:	4659      	mov	r1, fp
 80031f2:	00cb      	lsls	r3, r1, #3
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fa:	4651      	mov	r1, sl
 80031fc:	00ca      	lsls	r2, r1, #3
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	4603      	mov	r3, r0
 8003204:	4642      	mov	r2, r8
 8003206:	189b      	adds	r3, r3, r2
 8003208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800320c:	464b      	mov	r3, r9
 800320e:	460a      	mov	r2, r1
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003224:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003228:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800322c:	460b      	mov	r3, r1
 800322e:	18db      	adds	r3, r3, r3
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
 8003232:	4613      	mov	r3, r2
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800323e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003242:	f7fd f825 	bl	8000290 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <UART_SetConfig+0x2d4>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <UART_SetConfig+0x2d4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 0207 	and.w	r2, r3, #7
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4422      	add	r2, r4
 8003272:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003274:	e105      	b.n	8003482 <UART_SetConfig+0x4d6>
 8003276:	bf00      	nop
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003288:	2200      	movs	r2, #0
 800328a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800328e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003292:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003296:	4642      	mov	r2, r8
 8003298:	464b      	mov	r3, r9
 800329a:	1891      	adds	r1, r2, r2
 800329c:	6239      	str	r1, [r7, #32]
 800329e:	415b      	adcs	r3, r3
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032a6:	4641      	mov	r1, r8
 80032a8:	1854      	adds	r4, r2, r1
 80032aa:	4649      	mov	r1, r9
 80032ac:	eb43 0501 	adc.w	r5, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	00eb      	lsls	r3, r5, #3
 80032ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032be:	00e2      	lsls	r2, r4, #3
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	4643      	mov	r3, r8
 80032c6:	18e3      	adds	r3, r4, r3
 80032c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032cc:	464b      	mov	r3, r9
 80032ce:	eb45 0303 	adc.w	r3, r5, r3
 80032d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032f2:	4629      	mov	r1, r5
 80032f4:	008b      	lsls	r3, r1, #2
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fc:	4621      	mov	r1, r4
 80032fe:	008a      	lsls	r2, r1, #2
 8003300:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003304:	f7fc ffc4 	bl	8000290 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4b60      	ldr	r3, [pc, #384]	; (8003490 <UART_SetConfig+0x4e4>)
 800330e:	fba3 2302 	umull	r2, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	011c      	lsls	r4, r3, #4
 8003316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003320:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003324:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003328:	4642      	mov	r2, r8
 800332a:	464b      	mov	r3, r9
 800332c:	1891      	adds	r1, r2, r2
 800332e:	61b9      	str	r1, [r7, #24]
 8003330:	415b      	adcs	r3, r3
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003338:	4641      	mov	r1, r8
 800333a:	1851      	adds	r1, r2, r1
 800333c:	6139      	str	r1, [r7, #16]
 800333e:	4649      	mov	r1, r9
 8003340:	414b      	adcs	r3, r1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003350:	4659      	mov	r1, fp
 8003352:	00cb      	lsls	r3, r1, #3
 8003354:	4651      	mov	r1, sl
 8003356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800335a:	4651      	mov	r1, sl
 800335c:	00ca      	lsls	r2, r1, #3
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	4603      	mov	r3, r0
 8003364:	4642      	mov	r2, r8
 8003366:	189b      	adds	r3, r3, r2
 8003368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800336c:	464b      	mov	r3, r9
 800336e:	460a      	mov	r2, r1
 8003370:	eb42 0303 	adc.w	r3, r2, r3
 8003374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	67bb      	str	r3, [r7, #120]	; 0x78
 8003382:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003390:	4649      	mov	r1, r9
 8003392:	008b      	lsls	r3, r1, #2
 8003394:	4641      	mov	r1, r8
 8003396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800339a:	4641      	mov	r1, r8
 800339c:	008a      	lsls	r2, r1, #2
 800339e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033a2:	f7fc ff75 	bl	8000290 <__aeabi_uldivmod>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4b39      	ldr	r3, [pc, #228]	; (8003490 <UART_SetConfig+0x4e4>)
 80033ac:	fba3 1302 	umull	r1, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	2164      	movs	r1, #100	; 0x64
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	3332      	adds	r3, #50	; 0x32
 80033be:	4a34      	ldr	r2, [pc, #208]	; (8003490 <UART_SetConfig+0x4e4>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ca:	441c      	add	r4, r3
 80033cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d0:	2200      	movs	r2, #0
 80033d2:	673b      	str	r3, [r7, #112]	; 0x70
 80033d4:	677a      	str	r2, [r7, #116]	; 0x74
 80033d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033da:	4642      	mov	r2, r8
 80033dc:	464b      	mov	r3, r9
 80033de:	1891      	adds	r1, r2, r2
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	415b      	adcs	r3, r3
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ea:	4641      	mov	r1, r8
 80033ec:	1851      	adds	r1, r2, r1
 80033ee:	6039      	str	r1, [r7, #0]
 80033f0:	4649      	mov	r1, r9
 80033f2:	414b      	adcs	r3, r1
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003402:	4659      	mov	r1, fp
 8003404:	00cb      	lsls	r3, r1, #3
 8003406:	4651      	mov	r1, sl
 8003408:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340c:	4651      	mov	r1, sl
 800340e:	00ca      	lsls	r2, r1, #3
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	4603      	mov	r3, r0
 8003416:	4642      	mov	r2, r8
 8003418:	189b      	adds	r3, r3, r2
 800341a:	66bb      	str	r3, [r7, #104]	; 0x68
 800341c:	464b      	mov	r3, r9
 800341e:	460a      	mov	r2, r1
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	663b      	str	r3, [r7, #96]	; 0x60
 8003430:	667a      	str	r2, [r7, #100]	; 0x64
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800343e:	4649      	mov	r1, r9
 8003440:	008b      	lsls	r3, r1, #2
 8003442:	4641      	mov	r1, r8
 8003444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003448:	4641      	mov	r1, r8
 800344a:	008a      	lsls	r2, r1, #2
 800344c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003450:	f7fc ff1e 	bl	8000290 <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <UART_SetConfig+0x4e4>)
 800345a:	fba3 1302 	umull	r1, r3, r3, r2
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2164      	movs	r1, #100	; 0x64
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	3332      	adds	r3, #50	; 0x32
 800346c:	4a08      	ldr	r2, [pc, #32]	; (8003490 <UART_SetConfig+0x4e4>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	f003 020f 	and.w	r2, r3, #15
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4422      	add	r2, r4
 8003480:	609a      	str	r2, [r3, #8]
}
 8003482:	bf00      	nop
 8003484:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003488:	46bd      	mov	sp, r7
 800348a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348e:	bf00      	nop
 8003490:	51eb851f 	.word	0x51eb851f

08003494 <__errno>:
 8003494:	4b01      	ldr	r3, [pc, #4]	; (800349c <__errno+0x8>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	2000000c 	.word	0x2000000c

080034a0 <__libc_init_array>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4d0d      	ldr	r5, [pc, #52]	; (80034d8 <__libc_init_array+0x38>)
 80034a4:	4c0d      	ldr	r4, [pc, #52]	; (80034dc <__libc_init_array+0x3c>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	2600      	movs	r6, #0
 80034ac:	42a6      	cmp	r6, r4
 80034ae:	d109      	bne.n	80034c4 <__libc_init_array+0x24>
 80034b0:	4d0b      	ldr	r5, [pc, #44]	; (80034e0 <__libc_init_array+0x40>)
 80034b2:	4c0c      	ldr	r4, [pc, #48]	; (80034e4 <__libc_init_array+0x44>)
 80034b4:	f001 f884 	bl	80045c0 <_init>
 80034b8:	1b64      	subs	r4, r4, r5
 80034ba:	10a4      	asrs	r4, r4, #2
 80034bc:	2600      	movs	r6, #0
 80034be:	42a6      	cmp	r6, r4
 80034c0:	d105      	bne.n	80034ce <__libc_init_array+0x2e>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c8:	4798      	blx	r3
 80034ca:	3601      	adds	r6, #1
 80034cc:	e7ee      	b.n	80034ac <__libc_init_array+0xc>
 80034ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d2:	4798      	blx	r3
 80034d4:	3601      	adds	r6, #1
 80034d6:	e7f2      	b.n	80034be <__libc_init_array+0x1e>
 80034d8:	0800469c 	.word	0x0800469c
 80034dc:	0800469c 	.word	0x0800469c
 80034e0:	0800469c 	.word	0x0800469c
 80034e4:	080046a0 	.word	0x080046a0

080034e8 <memset>:
 80034e8:	4402      	add	r2, r0
 80034ea:	4603      	mov	r3, r0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d100      	bne.n	80034f2 <memset+0xa>
 80034f0:	4770      	bx	lr
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	e7f9      	b.n	80034ec <memset+0x4>

080034f8 <iprintf>:
 80034f8:	b40f      	push	{r0, r1, r2, r3}
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <iprintf+0x2c>)
 80034fc:	b513      	push	{r0, r1, r4, lr}
 80034fe:	681c      	ldr	r4, [r3, #0]
 8003500:	b124      	cbz	r4, 800350c <iprintf+0x14>
 8003502:	69a3      	ldr	r3, [r4, #24]
 8003504:	b913      	cbnz	r3, 800350c <iprintf+0x14>
 8003506:	4620      	mov	r0, r4
 8003508:	f000 f9f6 	bl	80038f8 <__sinit>
 800350c:	ab05      	add	r3, sp, #20
 800350e:	9a04      	ldr	r2, [sp, #16]
 8003510:	68a1      	ldr	r1, [r4, #8]
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	4620      	mov	r0, r4
 8003516:	f000 fc07 	bl	8003d28 <_vfiprintf_r>
 800351a:	b002      	add	sp, #8
 800351c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003520:	b004      	add	sp, #16
 8003522:	4770      	bx	lr
 8003524:	2000000c 	.word	0x2000000c

08003528 <setbuf>:
 8003528:	2900      	cmp	r1, #0
 800352a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352e:	bf0c      	ite	eq
 8003530:	2202      	moveq	r2, #2
 8003532:	2200      	movne	r2, #0
 8003534:	f000 b800 	b.w	8003538 <setvbuf>

08003538 <setvbuf>:
 8003538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800353c:	461d      	mov	r5, r3
 800353e:	4b5d      	ldr	r3, [pc, #372]	; (80036b4 <setvbuf+0x17c>)
 8003540:	681f      	ldr	r7, [r3, #0]
 8003542:	4604      	mov	r4, r0
 8003544:	460e      	mov	r6, r1
 8003546:	4690      	mov	r8, r2
 8003548:	b127      	cbz	r7, 8003554 <setvbuf+0x1c>
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	b913      	cbnz	r3, 8003554 <setvbuf+0x1c>
 800354e:	4638      	mov	r0, r7
 8003550:	f000 f9d2 	bl	80038f8 <__sinit>
 8003554:	4b58      	ldr	r3, [pc, #352]	; (80036b8 <setvbuf+0x180>)
 8003556:	429c      	cmp	r4, r3
 8003558:	d167      	bne.n	800362a <setvbuf+0xf2>
 800355a:	687c      	ldr	r4, [r7, #4]
 800355c:	f1b8 0f02 	cmp.w	r8, #2
 8003560:	d006      	beq.n	8003570 <setvbuf+0x38>
 8003562:	f1b8 0f01 	cmp.w	r8, #1
 8003566:	f200 809f 	bhi.w	80036a8 <setvbuf+0x170>
 800356a:	2d00      	cmp	r5, #0
 800356c:	f2c0 809c 	blt.w	80036a8 <setvbuf+0x170>
 8003570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003572:	07db      	lsls	r3, r3, #31
 8003574:	d405      	bmi.n	8003582 <setvbuf+0x4a>
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	0598      	lsls	r0, r3, #22
 800357a:	d402      	bmi.n	8003582 <setvbuf+0x4a>
 800357c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800357e:	f000 fa59 	bl	8003a34 <__retarget_lock_acquire_recursive>
 8003582:	4621      	mov	r1, r4
 8003584:	4638      	mov	r0, r7
 8003586:	f000 f923 	bl	80037d0 <_fflush_r>
 800358a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800358c:	b141      	cbz	r1, 80035a0 <setvbuf+0x68>
 800358e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003592:	4299      	cmp	r1, r3
 8003594:	d002      	beq.n	800359c <setvbuf+0x64>
 8003596:	4638      	mov	r0, r7
 8003598:	f000 fabc 	bl	8003b14 <_free_r>
 800359c:	2300      	movs	r3, #0
 800359e:	6363      	str	r3, [r4, #52]	; 0x34
 80035a0:	2300      	movs	r3, #0
 80035a2:	61a3      	str	r3, [r4, #24]
 80035a4:	6063      	str	r3, [r4, #4]
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	0619      	lsls	r1, r3, #24
 80035aa:	d503      	bpl.n	80035b4 <setvbuf+0x7c>
 80035ac:	6921      	ldr	r1, [r4, #16]
 80035ae:	4638      	mov	r0, r7
 80035b0:	f000 fab0 	bl	8003b14 <_free_r>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	f1b8 0f02 	cmp.w	r8, #2
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	d06c      	beq.n	80036a0 <setvbuf+0x168>
 80035c6:	ab01      	add	r3, sp, #4
 80035c8:	466a      	mov	r2, sp
 80035ca:	4621      	mov	r1, r4
 80035cc:	4638      	mov	r0, r7
 80035ce:	f000 fa33 	bl	8003a38 <__swhatbuf_r>
 80035d2:	89a3      	ldrh	r3, [r4, #12]
 80035d4:	4318      	orrs	r0, r3
 80035d6:	81a0      	strh	r0, [r4, #12]
 80035d8:	2d00      	cmp	r5, #0
 80035da:	d130      	bne.n	800363e <setvbuf+0x106>
 80035dc:	9d00      	ldr	r5, [sp, #0]
 80035de:	4628      	mov	r0, r5
 80035e0:	f000 fa90 	bl	8003b04 <malloc>
 80035e4:	4606      	mov	r6, r0
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d155      	bne.n	8003696 <setvbuf+0x15e>
 80035ea:	f8dd 9000 	ldr.w	r9, [sp]
 80035ee:	45a9      	cmp	r9, r5
 80035f0:	d14a      	bne.n	8003688 <setvbuf+0x150>
 80035f2:	f04f 35ff 	mov.w	r5, #4294967295
 80035f6:	2200      	movs	r2, #0
 80035f8:	60a2      	str	r2, [r4, #8]
 80035fa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80035fe:	6022      	str	r2, [r4, #0]
 8003600:	6122      	str	r2, [r4, #16]
 8003602:	2201      	movs	r2, #1
 8003604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003608:	6162      	str	r2, [r4, #20]
 800360a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	07d2      	lsls	r2, r2, #31
 8003612:	81a3      	strh	r3, [r4, #12]
 8003614:	d405      	bmi.n	8003622 <setvbuf+0xea>
 8003616:	f413 7f00 	tst.w	r3, #512	; 0x200
 800361a:	d102      	bne.n	8003622 <setvbuf+0xea>
 800361c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800361e:	f000 fa0a 	bl	8003a36 <__retarget_lock_release_recursive>
 8003622:	4628      	mov	r0, r5
 8003624:	b003      	add	sp, #12
 8003626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <setvbuf+0x184>)
 800362c:	429c      	cmp	r4, r3
 800362e:	d101      	bne.n	8003634 <setvbuf+0xfc>
 8003630:	68bc      	ldr	r4, [r7, #8]
 8003632:	e793      	b.n	800355c <setvbuf+0x24>
 8003634:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <setvbuf+0x188>)
 8003636:	429c      	cmp	r4, r3
 8003638:	bf08      	it	eq
 800363a:	68fc      	ldreq	r4, [r7, #12]
 800363c:	e78e      	b.n	800355c <setvbuf+0x24>
 800363e:	2e00      	cmp	r6, #0
 8003640:	d0cd      	beq.n	80035de <setvbuf+0xa6>
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	b913      	cbnz	r3, 800364c <setvbuf+0x114>
 8003646:	4638      	mov	r0, r7
 8003648:	f000 f956 	bl	80038f8 <__sinit>
 800364c:	f1b8 0f01 	cmp.w	r8, #1
 8003650:	bf08      	it	eq
 8003652:	89a3      	ldrheq	r3, [r4, #12]
 8003654:	6026      	str	r6, [r4, #0]
 8003656:	bf04      	itt	eq
 8003658:	f043 0301 	orreq.w	r3, r3, #1
 800365c:	81a3      	strheq	r3, [r4, #12]
 800365e:	89a2      	ldrh	r2, [r4, #12]
 8003660:	f012 0308 	ands.w	r3, r2, #8
 8003664:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003668:	d01c      	beq.n	80036a4 <setvbuf+0x16c>
 800366a:	07d3      	lsls	r3, r2, #31
 800366c:	bf41      	itttt	mi
 800366e:	2300      	movmi	r3, #0
 8003670:	426d      	negmi	r5, r5
 8003672:	60a3      	strmi	r3, [r4, #8]
 8003674:	61a5      	strmi	r5, [r4, #24]
 8003676:	bf58      	it	pl
 8003678:	60a5      	strpl	r5, [r4, #8]
 800367a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800367c:	f015 0501 	ands.w	r5, r5, #1
 8003680:	d115      	bne.n	80036ae <setvbuf+0x176>
 8003682:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003686:	e7c8      	b.n	800361a <setvbuf+0xe2>
 8003688:	4648      	mov	r0, r9
 800368a:	f000 fa3b 	bl	8003b04 <malloc>
 800368e:	4606      	mov	r6, r0
 8003690:	2800      	cmp	r0, #0
 8003692:	d0ae      	beq.n	80035f2 <setvbuf+0xba>
 8003694:	464d      	mov	r5, r9
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369c:	81a3      	strh	r3, [r4, #12]
 800369e:	e7d0      	b.n	8003642 <setvbuf+0x10a>
 80036a0:	2500      	movs	r5, #0
 80036a2:	e7a8      	b.n	80035f6 <setvbuf+0xbe>
 80036a4:	60a3      	str	r3, [r4, #8]
 80036a6:	e7e8      	b.n	800367a <setvbuf+0x142>
 80036a8:	f04f 35ff 	mov.w	r5, #4294967295
 80036ac:	e7b9      	b.n	8003622 <setvbuf+0xea>
 80036ae:	2500      	movs	r5, #0
 80036b0:	e7b7      	b.n	8003622 <setvbuf+0xea>
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c
 80036b8:	08004620 	.word	0x08004620
 80036bc:	08004640 	.word	0x08004640
 80036c0:	08004600 	.word	0x08004600

080036c4 <__sflush_r>:
 80036c4:	898a      	ldrh	r2, [r1, #12]
 80036c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	4605      	mov	r5, r0
 80036cc:	0710      	lsls	r0, r2, #28
 80036ce:	460c      	mov	r4, r1
 80036d0:	d458      	bmi.n	8003784 <__sflush_r+0xc0>
 80036d2:	684b      	ldr	r3, [r1, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	dc05      	bgt.n	80036e4 <__sflush_r+0x20>
 80036d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	dc02      	bgt.n	80036e4 <__sflush_r+0x20>
 80036de:	2000      	movs	r0, #0
 80036e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e6:	2e00      	cmp	r6, #0
 80036e8:	d0f9      	beq.n	80036de <__sflush_r+0x1a>
 80036ea:	2300      	movs	r3, #0
 80036ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036f0:	682f      	ldr	r7, [r5, #0]
 80036f2:	602b      	str	r3, [r5, #0]
 80036f4:	d032      	beq.n	800375c <__sflush_r+0x98>
 80036f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036f8:	89a3      	ldrh	r3, [r4, #12]
 80036fa:	075a      	lsls	r2, r3, #29
 80036fc:	d505      	bpl.n	800370a <__sflush_r+0x46>
 80036fe:	6863      	ldr	r3, [r4, #4]
 8003700:	1ac0      	subs	r0, r0, r3
 8003702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003704:	b10b      	cbz	r3, 800370a <__sflush_r+0x46>
 8003706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003708:	1ac0      	subs	r0, r0, r3
 800370a:	2300      	movs	r3, #0
 800370c:	4602      	mov	r2, r0
 800370e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003710:	6a21      	ldr	r1, [r4, #32]
 8003712:	4628      	mov	r0, r5
 8003714:	47b0      	blx	r6
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	d106      	bne.n	800372a <__sflush_r+0x66>
 800371c:	6829      	ldr	r1, [r5, #0]
 800371e:	291d      	cmp	r1, #29
 8003720:	d82c      	bhi.n	800377c <__sflush_r+0xb8>
 8003722:	4a2a      	ldr	r2, [pc, #168]	; (80037cc <__sflush_r+0x108>)
 8003724:	40ca      	lsrs	r2, r1
 8003726:	07d6      	lsls	r6, r2, #31
 8003728:	d528      	bpl.n	800377c <__sflush_r+0xb8>
 800372a:	2200      	movs	r2, #0
 800372c:	6062      	str	r2, [r4, #4]
 800372e:	04d9      	lsls	r1, r3, #19
 8003730:	6922      	ldr	r2, [r4, #16]
 8003732:	6022      	str	r2, [r4, #0]
 8003734:	d504      	bpl.n	8003740 <__sflush_r+0x7c>
 8003736:	1c42      	adds	r2, r0, #1
 8003738:	d101      	bne.n	800373e <__sflush_r+0x7a>
 800373a:	682b      	ldr	r3, [r5, #0]
 800373c:	b903      	cbnz	r3, 8003740 <__sflush_r+0x7c>
 800373e:	6560      	str	r0, [r4, #84]	; 0x54
 8003740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003742:	602f      	str	r7, [r5, #0]
 8003744:	2900      	cmp	r1, #0
 8003746:	d0ca      	beq.n	80036de <__sflush_r+0x1a>
 8003748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800374c:	4299      	cmp	r1, r3
 800374e:	d002      	beq.n	8003756 <__sflush_r+0x92>
 8003750:	4628      	mov	r0, r5
 8003752:	f000 f9df 	bl	8003b14 <_free_r>
 8003756:	2000      	movs	r0, #0
 8003758:	6360      	str	r0, [r4, #52]	; 0x34
 800375a:	e7c1      	b.n	80036e0 <__sflush_r+0x1c>
 800375c:	6a21      	ldr	r1, [r4, #32]
 800375e:	2301      	movs	r3, #1
 8003760:	4628      	mov	r0, r5
 8003762:	47b0      	blx	r6
 8003764:	1c41      	adds	r1, r0, #1
 8003766:	d1c7      	bne.n	80036f8 <__sflush_r+0x34>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0c4      	beq.n	80036f8 <__sflush_r+0x34>
 800376e:	2b1d      	cmp	r3, #29
 8003770:	d001      	beq.n	8003776 <__sflush_r+0xb2>
 8003772:	2b16      	cmp	r3, #22
 8003774:	d101      	bne.n	800377a <__sflush_r+0xb6>
 8003776:	602f      	str	r7, [r5, #0]
 8003778:	e7b1      	b.n	80036de <__sflush_r+0x1a>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	e7ad      	b.n	80036e0 <__sflush_r+0x1c>
 8003784:	690f      	ldr	r7, [r1, #16]
 8003786:	2f00      	cmp	r7, #0
 8003788:	d0a9      	beq.n	80036de <__sflush_r+0x1a>
 800378a:	0793      	lsls	r3, r2, #30
 800378c:	680e      	ldr	r6, [r1, #0]
 800378e:	bf08      	it	eq
 8003790:	694b      	ldreq	r3, [r1, #20]
 8003792:	600f      	str	r7, [r1, #0]
 8003794:	bf18      	it	ne
 8003796:	2300      	movne	r3, #0
 8003798:	eba6 0807 	sub.w	r8, r6, r7
 800379c:	608b      	str	r3, [r1, #8]
 800379e:	f1b8 0f00 	cmp.w	r8, #0
 80037a2:	dd9c      	ble.n	80036de <__sflush_r+0x1a>
 80037a4:	6a21      	ldr	r1, [r4, #32]
 80037a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037a8:	4643      	mov	r3, r8
 80037aa:	463a      	mov	r2, r7
 80037ac:	4628      	mov	r0, r5
 80037ae:	47b0      	blx	r6
 80037b0:	2800      	cmp	r0, #0
 80037b2:	dc06      	bgt.n	80037c2 <__sflush_r+0xfe>
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ba:	81a3      	strh	r3, [r4, #12]
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	e78e      	b.n	80036e0 <__sflush_r+0x1c>
 80037c2:	4407      	add	r7, r0
 80037c4:	eba8 0800 	sub.w	r8, r8, r0
 80037c8:	e7e9      	b.n	800379e <__sflush_r+0xda>
 80037ca:	bf00      	nop
 80037cc:	20400001 	.word	0x20400001

080037d0 <_fflush_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	690b      	ldr	r3, [r1, #16]
 80037d4:	4605      	mov	r5, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	b913      	cbnz	r3, 80037e0 <_fflush_r+0x10>
 80037da:	2500      	movs	r5, #0
 80037dc:	4628      	mov	r0, r5
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	b118      	cbz	r0, 80037ea <_fflush_r+0x1a>
 80037e2:	6983      	ldr	r3, [r0, #24]
 80037e4:	b90b      	cbnz	r3, 80037ea <_fflush_r+0x1a>
 80037e6:	f000 f887 	bl	80038f8 <__sinit>
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <_fflush_r+0x6c>)
 80037ec:	429c      	cmp	r4, r3
 80037ee:	d11b      	bne.n	8003828 <_fflush_r+0x58>
 80037f0:	686c      	ldr	r4, [r5, #4]
 80037f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0ef      	beq.n	80037da <_fflush_r+0xa>
 80037fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037fc:	07d0      	lsls	r0, r2, #31
 80037fe:	d404      	bmi.n	800380a <_fflush_r+0x3a>
 8003800:	0599      	lsls	r1, r3, #22
 8003802:	d402      	bmi.n	800380a <_fflush_r+0x3a>
 8003804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003806:	f000 f915 	bl	8003a34 <__retarget_lock_acquire_recursive>
 800380a:	4628      	mov	r0, r5
 800380c:	4621      	mov	r1, r4
 800380e:	f7ff ff59 	bl	80036c4 <__sflush_r>
 8003812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003814:	07da      	lsls	r2, r3, #31
 8003816:	4605      	mov	r5, r0
 8003818:	d4e0      	bmi.n	80037dc <_fflush_r+0xc>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	059b      	lsls	r3, r3, #22
 800381e:	d4dd      	bmi.n	80037dc <_fflush_r+0xc>
 8003820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003822:	f000 f908 	bl	8003a36 <__retarget_lock_release_recursive>
 8003826:	e7d9      	b.n	80037dc <_fflush_r+0xc>
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <_fflush_r+0x70>)
 800382a:	429c      	cmp	r4, r3
 800382c:	d101      	bne.n	8003832 <_fflush_r+0x62>
 800382e:	68ac      	ldr	r4, [r5, #8]
 8003830:	e7df      	b.n	80037f2 <_fflush_r+0x22>
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <_fflush_r+0x74>)
 8003834:	429c      	cmp	r4, r3
 8003836:	bf08      	it	eq
 8003838:	68ec      	ldreq	r4, [r5, #12]
 800383a:	e7da      	b.n	80037f2 <_fflush_r+0x22>
 800383c:	08004620 	.word	0x08004620
 8003840:	08004640 	.word	0x08004640
 8003844:	08004600 	.word	0x08004600

08003848 <std>:
 8003848:	2300      	movs	r3, #0
 800384a:	b510      	push	{r4, lr}
 800384c:	4604      	mov	r4, r0
 800384e:	e9c0 3300 	strd	r3, r3, [r0]
 8003852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003856:	6083      	str	r3, [r0, #8]
 8003858:	8181      	strh	r1, [r0, #12]
 800385a:	6643      	str	r3, [r0, #100]	; 0x64
 800385c:	81c2      	strh	r2, [r0, #14]
 800385e:	6183      	str	r3, [r0, #24]
 8003860:	4619      	mov	r1, r3
 8003862:	2208      	movs	r2, #8
 8003864:	305c      	adds	r0, #92	; 0x5c
 8003866:	f7ff fe3f 	bl	80034e8 <memset>
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <std+0x38>)
 800386c:	6263      	str	r3, [r4, #36]	; 0x24
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <std+0x3c>)
 8003870:	62a3      	str	r3, [r4, #40]	; 0x28
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <std+0x40>)
 8003874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <std+0x44>)
 8003878:	6224      	str	r4, [r4, #32]
 800387a:	6323      	str	r3, [r4, #48]	; 0x30
 800387c:	bd10      	pop	{r4, pc}
 800387e:	bf00      	nop
 8003880:	080042d1 	.word	0x080042d1
 8003884:	080042f3 	.word	0x080042f3
 8003888:	0800432b 	.word	0x0800432b
 800388c:	0800434f 	.word	0x0800434f

08003890 <_cleanup_r>:
 8003890:	4901      	ldr	r1, [pc, #4]	; (8003898 <_cleanup_r+0x8>)
 8003892:	f000 b8af 	b.w	80039f4 <_fwalk_reent>
 8003896:	bf00      	nop
 8003898:	080037d1 	.word	0x080037d1

0800389c <__sfmoreglue>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	2268      	movs	r2, #104	; 0x68
 80038a0:	1e4d      	subs	r5, r1, #1
 80038a2:	4355      	muls	r5, r2
 80038a4:	460e      	mov	r6, r1
 80038a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038aa:	f000 f99f 	bl	8003bec <_malloc_r>
 80038ae:	4604      	mov	r4, r0
 80038b0:	b140      	cbz	r0, 80038c4 <__sfmoreglue+0x28>
 80038b2:	2100      	movs	r1, #0
 80038b4:	e9c0 1600 	strd	r1, r6, [r0]
 80038b8:	300c      	adds	r0, #12
 80038ba:	60a0      	str	r0, [r4, #8]
 80038bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038c0:	f7ff fe12 	bl	80034e8 <memset>
 80038c4:	4620      	mov	r0, r4
 80038c6:	bd70      	pop	{r4, r5, r6, pc}

080038c8 <__sfp_lock_acquire>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__sfp_lock_acquire+0x8>)
 80038ca:	f000 b8b3 	b.w	8003a34 <__retarget_lock_acquire_recursive>
 80038ce:	bf00      	nop
 80038d0:	2000029d 	.word	0x2000029d

080038d4 <__sfp_lock_release>:
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <__sfp_lock_release+0x8>)
 80038d6:	f000 b8ae 	b.w	8003a36 <__retarget_lock_release_recursive>
 80038da:	bf00      	nop
 80038dc:	2000029d 	.word	0x2000029d

080038e0 <__sinit_lock_acquire>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__sinit_lock_acquire+0x8>)
 80038e2:	f000 b8a7 	b.w	8003a34 <__retarget_lock_acquire_recursive>
 80038e6:	bf00      	nop
 80038e8:	2000029e 	.word	0x2000029e

080038ec <__sinit_lock_release>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__sinit_lock_release+0x8>)
 80038ee:	f000 b8a2 	b.w	8003a36 <__retarget_lock_release_recursive>
 80038f2:	bf00      	nop
 80038f4:	2000029e 	.word	0x2000029e

080038f8 <__sinit>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
 80038fc:	f7ff fff0 	bl	80038e0 <__sinit_lock_acquire>
 8003900:	69a3      	ldr	r3, [r4, #24]
 8003902:	b11b      	cbz	r3, 800390c <__sinit+0x14>
 8003904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003908:	f7ff bff0 	b.w	80038ec <__sinit_lock_release>
 800390c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003910:	6523      	str	r3, [r4, #80]	; 0x50
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <__sinit+0x68>)
 8003914:	4a13      	ldr	r2, [pc, #76]	; (8003964 <__sinit+0x6c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	62a2      	str	r2, [r4, #40]	; 0x28
 800391a:	42a3      	cmp	r3, r4
 800391c:	bf04      	itt	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	61a3      	streq	r3, [r4, #24]
 8003922:	4620      	mov	r0, r4
 8003924:	f000 f820 	bl	8003968 <__sfp>
 8003928:	6060      	str	r0, [r4, #4]
 800392a:	4620      	mov	r0, r4
 800392c:	f000 f81c 	bl	8003968 <__sfp>
 8003930:	60a0      	str	r0, [r4, #8]
 8003932:	4620      	mov	r0, r4
 8003934:	f000 f818 	bl	8003968 <__sfp>
 8003938:	2200      	movs	r2, #0
 800393a:	60e0      	str	r0, [r4, #12]
 800393c:	2104      	movs	r1, #4
 800393e:	6860      	ldr	r0, [r4, #4]
 8003940:	f7ff ff82 	bl	8003848 <std>
 8003944:	68a0      	ldr	r0, [r4, #8]
 8003946:	2201      	movs	r2, #1
 8003948:	2109      	movs	r1, #9
 800394a:	f7ff ff7d 	bl	8003848 <std>
 800394e:	68e0      	ldr	r0, [r4, #12]
 8003950:	2202      	movs	r2, #2
 8003952:	2112      	movs	r1, #18
 8003954:	f7ff ff78 	bl	8003848 <std>
 8003958:	2301      	movs	r3, #1
 800395a:	61a3      	str	r3, [r4, #24]
 800395c:	e7d2      	b.n	8003904 <__sinit+0xc>
 800395e:	bf00      	nop
 8003960:	080045fc 	.word	0x080045fc
 8003964:	08003891 	.word	0x08003891

08003968 <__sfp>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	4607      	mov	r7, r0
 800396c:	f7ff ffac 	bl	80038c8 <__sfp_lock_acquire>
 8003970:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <__sfp+0x84>)
 8003972:	681e      	ldr	r6, [r3, #0]
 8003974:	69b3      	ldr	r3, [r6, #24]
 8003976:	b913      	cbnz	r3, 800397e <__sfp+0x16>
 8003978:	4630      	mov	r0, r6
 800397a:	f7ff ffbd 	bl	80038f8 <__sinit>
 800397e:	3648      	adds	r6, #72	; 0x48
 8003980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003984:	3b01      	subs	r3, #1
 8003986:	d503      	bpl.n	8003990 <__sfp+0x28>
 8003988:	6833      	ldr	r3, [r6, #0]
 800398a:	b30b      	cbz	r3, 80039d0 <__sfp+0x68>
 800398c:	6836      	ldr	r6, [r6, #0]
 800398e:	e7f7      	b.n	8003980 <__sfp+0x18>
 8003990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003994:	b9d5      	cbnz	r5, 80039cc <__sfp+0x64>
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <__sfp+0x88>)
 8003998:	60e3      	str	r3, [r4, #12]
 800399a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800399e:	6665      	str	r5, [r4, #100]	; 0x64
 80039a0:	f000 f847 	bl	8003a32 <__retarget_lock_init_recursive>
 80039a4:	f7ff ff96 	bl	80038d4 <__sfp_lock_release>
 80039a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039b0:	6025      	str	r5, [r4, #0]
 80039b2:	61a5      	str	r5, [r4, #24]
 80039b4:	2208      	movs	r2, #8
 80039b6:	4629      	mov	r1, r5
 80039b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039bc:	f7ff fd94 	bl	80034e8 <memset>
 80039c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039c8:	4620      	mov	r0, r4
 80039ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039cc:	3468      	adds	r4, #104	; 0x68
 80039ce:	e7d9      	b.n	8003984 <__sfp+0x1c>
 80039d0:	2104      	movs	r1, #4
 80039d2:	4638      	mov	r0, r7
 80039d4:	f7ff ff62 	bl	800389c <__sfmoreglue>
 80039d8:	4604      	mov	r4, r0
 80039da:	6030      	str	r0, [r6, #0]
 80039dc:	2800      	cmp	r0, #0
 80039de:	d1d5      	bne.n	800398c <__sfp+0x24>
 80039e0:	f7ff ff78 	bl	80038d4 <__sfp_lock_release>
 80039e4:	230c      	movs	r3, #12
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	e7ee      	b.n	80039c8 <__sfp+0x60>
 80039ea:	bf00      	nop
 80039ec:	080045fc 	.word	0x080045fc
 80039f0:	ffff0001 	.word	0xffff0001

080039f4 <_fwalk_reent>:
 80039f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f8:	4606      	mov	r6, r0
 80039fa:	4688      	mov	r8, r1
 80039fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a00:	2700      	movs	r7, #0
 8003a02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a06:	f1b9 0901 	subs.w	r9, r9, #1
 8003a0a:	d505      	bpl.n	8003a18 <_fwalk_reent+0x24>
 8003a0c:	6824      	ldr	r4, [r4, #0]
 8003a0e:	2c00      	cmp	r4, #0
 8003a10:	d1f7      	bne.n	8003a02 <_fwalk_reent+0xe>
 8003a12:	4638      	mov	r0, r7
 8003a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a18:	89ab      	ldrh	r3, [r5, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d907      	bls.n	8003a2e <_fwalk_reent+0x3a>
 8003a1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a22:	3301      	adds	r3, #1
 8003a24:	d003      	beq.n	8003a2e <_fwalk_reent+0x3a>
 8003a26:	4629      	mov	r1, r5
 8003a28:	4630      	mov	r0, r6
 8003a2a:	47c0      	blx	r8
 8003a2c:	4307      	orrs	r7, r0
 8003a2e:	3568      	adds	r5, #104	; 0x68
 8003a30:	e7e9      	b.n	8003a06 <_fwalk_reent+0x12>

08003a32 <__retarget_lock_init_recursive>:
 8003a32:	4770      	bx	lr

08003a34 <__retarget_lock_acquire_recursive>:
 8003a34:	4770      	bx	lr

08003a36 <__retarget_lock_release_recursive>:
 8003a36:	4770      	bx	lr

08003a38 <__swhatbuf_r>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	460e      	mov	r6, r1
 8003a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a40:	2900      	cmp	r1, #0
 8003a42:	b096      	sub	sp, #88	; 0x58
 8003a44:	4614      	mov	r4, r2
 8003a46:	461d      	mov	r5, r3
 8003a48:	da08      	bge.n	8003a5c <__swhatbuf_r+0x24>
 8003a4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	602a      	str	r2, [r5, #0]
 8003a52:	061a      	lsls	r2, r3, #24
 8003a54:	d410      	bmi.n	8003a78 <__swhatbuf_r+0x40>
 8003a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a5a:	e00e      	b.n	8003a7a <__swhatbuf_r+0x42>
 8003a5c:	466a      	mov	r2, sp
 8003a5e:	f000 fd5d 	bl	800451c <_fstat_r>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	dbf1      	blt.n	8003a4a <__swhatbuf_r+0x12>
 8003a66:	9a01      	ldr	r2, [sp, #4]
 8003a68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a70:	425a      	negs	r2, r3
 8003a72:	415a      	adcs	r2, r3
 8003a74:	602a      	str	r2, [r5, #0]
 8003a76:	e7ee      	b.n	8003a56 <__swhatbuf_r+0x1e>
 8003a78:	2340      	movs	r3, #64	; 0x40
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	b016      	add	sp, #88	; 0x58
 8003a80:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a84 <__smakebuf_r>:
 8003a84:	898b      	ldrh	r3, [r1, #12]
 8003a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a88:	079d      	lsls	r5, r3, #30
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	d507      	bpl.n	8003aa0 <__smakebuf_r+0x1c>
 8003a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	6123      	str	r3, [r4, #16]
 8003a98:	2301      	movs	r3, #1
 8003a9a:	6163      	str	r3, [r4, #20]
 8003a9c:	b002      	add	sp, #8
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	ab01      	add	r3, sp, #4
 8003aa2:	466a      	mov	r2, sp
 8003aa4:	f7ff ffc8 	bl	8003a38 <__swhatbuf_r>
 8003aa8:	9900      	ldr	r1, [sp, #0]
 8003aaa:	4605      	mov	r5, r0
 8003aac:	4630      	mov	r0, r6
 8003aae:	f000 f89d 	bl	8003bec <_malloc_r>
 8003ab2:	b948      	cbnz	r0, 8003ac8 <__smakebuf_r+0x44>
 8003ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab8:	059a      	lsls	r2, r3, #22
 8003aba:	d4ef      	bmi.n	8003a9c <__smakebuf_r+0x18>
 8003abc:	f023 0303 	bic.w	r3, r3, #3
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	81a3      	strh	r3, [r4, #12]
 8003ac6:	e7e3      	b.n	8003a90 <__smakebuf_r+0xc>
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <__smakebuf_r+0x7c>)
 8003aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	6020      	str	r0, [r4, #0]
 8003ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad4:	81a3      	strh	r3, [r4, #12]
 8003ad6:	9b00      	ldr	r3, [sp, #0]
 8003ad8:	6163      	str	r3, [r4, #20]
 8003ada:	9b01      	ldr	r3, [sp, #4]
 8003adc:	6120      	str	r0, [r4, #16]
 8003ade:	b15b      	cbz	r3, 8003af8 <__smakebuf_r+0x74>
 8003ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f000 fd2b 	bl	8004540 <_isatty_r>
 8003aea:	b128      	cbz	r0, 8003af8 <__smakebuf_r+0x74>
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	81a3      	strh	r3, [r4, #12]
 8003af8:	89a0      	ldrh	r0, [r4, #12]
 8003afa:	4305      	orrs	r5, r0
 8003afc:	81a5      	strh	r5, [r4, #12]
 8003afe:	e7cd      	b.n	8003a9c <__smakebuf_r+0x18>
 8003b00:	08003891 	.word	0x08003891

08003b04 <malloc>:
 8003b04:	4b02      	ldr	r3, [pc, #8]	; (8003b10 <malloc+0xc>)
 8003b06:	4601      	mov	r1, r0
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	f000 b86f 	b.w	8003bec <_malloc_r>
 8003b0e:	bf00      	nop
 8003b10:	2000000c 	.word	0x2000000c

08003b14 <_free_r>:
 8003b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b16:	2900      	cmp	r1, #0
 8003b18:	d044      	beq.n	8003ba4 <_free_r+0x90>
 8003b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b1e:	9001      	str	r0, [sp, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f1a1 0404 	sub.w	r4, r1, #4
 8003b26:	bfb8      	it	lt
 8003b28:	18e4      	addlt	r4, r4, r3
 8003b2a:	f000 fd2b 	bl	8004584 <__malloc_lock>
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <_free_r+0x94>)
 8003b30:	9801      	ldr	r0, [sp, #4]
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	b933      	cbnz	r3, 8003b44 <_free_r+0x30>
 8003b36:	6063      	str	r3, [r4, #4]
 8003b38:	6014      	str	r4, [r2, #0]
 8003b3a:	b003      	add	sp, #12
 8003b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b40:	f000 bd26 	b.w	8004590 <__malloc_unlock>
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	d908      	bls.n	8003b5a <_free_r+0x46>
 8003b48:	6825      	ldr	r5, [r4, #0]
 8003b4a:	1961      	adds	r1, r4, r5
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	bf01      	itttt	eq
 8003b50:	6819      	ldreq	r1, [r3, #0]
 8003b52:	685b      	ldreq	r3, [r3, #4]
 8003b54:	1949      	addeq	r1, r1, r5
 8003b56:	6021      	streq	r1, [r4, #0]
 8003b58:	e7ed      	b.n	8003b36 <_free_r+0x22>
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	b10b      	cbz	r3, 8003b64 <_free_r+0x50>
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	d9fa      	bls.n	8003b5a <_free_r+0x46>
 8003b64:	6811      	ldr	r1, [r2, #0]
 8003b66:	1855      	adds	r5, r2, r1
 8003b68:	42a5      	cmp	r5, r4
 8003b6a:	d10b      	bne.n	8003b84 <_free_r+0x70>
 8003b6c:	6824      	ldr	r4, [r4, #0]
 8003b6e:	4421      	add	r1, r4
 8003b70:	1854      	adds	r4, r2, r1
 8003b72:	42a3      	cmp	r3, r4
 8003b74:	6011      	str	r1, [r2, #0]
 8003b76:	d1e0      	bne.n	8003b3a <_free_r+0x26>
 8003b78:	681c      	ldr	r4, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	6053      	str	r3, [r2, #4]
 8003b7e:	4421      	add	r1, r4
 8003b80:	6011      	str	r1, [r2, #0]
 8003b82:	e7da      	b.n	8003b3a <_free_r+0x26>
 8003b84:	d902      	bls.n	8003b8c <_free_r+0x78>
 8003b86:	230c      	movs	r3, #12
 8003b88:	6003      	str	r3, [r0, #0]
 8003b8a:	e7d6      	b.n	8003b3a <_free_r+0x26>
 8003b8c:	6825      	ldr	r5, [r4, #0]
 8003b8e:	1961      	adds	r1, r4, r5
 8003b90:	428b      	cmp	r3, r1
 8003b92:	bf04      	itt	eq
 8003b94:	6819      	ldreq	r1, [r3, #0]
 8003b96:	685b      	ldreq	r3, [r3, #4]
 8003b98:	6063      	str	r3, [r4, #4]
 8003b9a:	bf04      	itt	eq
 8003b9c:	1949      	addeq	r1, r1, r5
 8003b9e:	6021      	streq	r1, [r4, #0]
 8003ba0:	6054      	str	r4, [r2, #4]
 8003ba2:	e7ca      	b.n	8003b3a <_free_r+0x26>
 8003ba4:	b003      	add	sp, #12
 8003ba6:	bd30      	pop	{r4, r5, pc}
 8003ba8:	200002a0 	.word	0x200002a0

08003bac <sbrk_aligned>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	4e0e      	ldr	r6, [pc, #56]	; (8003be8 <sbrk_aligned+0x3c>)
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	6831      	ldr	r1, [r6, #0]
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	b911      	cbnz	r1, 8003bbe <sbrk_aligned+0x12>
 8003bb8:	f000 fb7a 	bl	80042b0 <_sbrk_r>
 8003bbc:	6030      	str	r0, [r6, #0]
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f000 fb75 	bl	80042b0 <_sbrk_r>
 8003bc6:	1c43      	adds	r3, r0, #1
 8003bc8:	d00a      	beq.n	8003be0 <sbrk_aligned+0x34>
 8003bca:	1cc4      	adds	r4, r0, #3
 8003bcc:	f024 0403 	bic.w	r4, r4, #3
 8003bd0:	42a0      	cmp	r0, r4
 8003bd2:	d007      	beq.n	8003be4 <sbrk_aligned+0x38>
 8003bd4:	1a21      	subs	r1, r4, r0
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f000 fb6a 	bl	80042b0 <_sbrk_r>
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d101      	bne.n	8003be4 <sbrk_aligned+0x38>
 8003be0:	f04f 34ff 	mov.w	r4, #4294967295
 8003be4:	4620      	mov	r0, r4
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	200002a4 	.word	0x200002a4

08003bec <_malloc_r>:
 8003bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf0:	1ccd      	adds	r5, r1, #3
 8003bf2:	f025 0503 	bic.w	r5, r5, #3
 8003bf6:	3508      	adds	r5, #8
 8003bf8:	2d0c      	cmp	r5, #12
 8003bfa:	bf38      	it	cc
 8003bfc:	250c      	movcc	r5, #12
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	4607      	mov	r7, r0
 8003c02:	db01      	blt.n	8003c08 <_malloc_r+0x1c>
 8003c04:	42a9      	cmp	r1, r5
 8003c06:	d905      	bls.n	8003c14 <_malloc_r+0x28>
 8003c08:	230c      	movs	r3, #12
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	2600      	movs	r6, #0
 8003c0e:	4630      	mov	r0, r6
 8003c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c14:	4e2e      	ldr	r6, [pc, #184]	; (8003cd0 <_malloc_r+0xe4>)
 8003c16:	f000 fcb5 	bl	8004584 <__malloc_lock>
 8003c1a:	6833      	ldr	r3, [r6, #0]
 8003c1c:	461c      	mov	r4, r3
 8003c1e:	bb34      	cbnz	r4, 8003c6e <_malloc_r+0x82>
 8003c20:	4629      	mov	r1, r5
 8003c22:	4638      	mov	r0, r7
 8003c24:	f7ff ffc2 	bl	8003bac <sbrk_aligned>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	d14d      	bne.n	8003cca <_malloc_r+0xde>
 8003c2e:	6834      	ldr	r4, [r6, #0]
 8003c30:	4626      	mov	r6, r4
 8003c32:	2e00      	cmp	r6, #0
 8003c34:	d140      	bne.n	8003cb8 <_malloc_r+0xcc>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	4631      	mov	r1, r6
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	eb04 0803 	add.w	r8, r4, r3
 8003c40:	f000 fb36 	bl	80042b0 <_sbrk_r>
 8003c44:	4580      	cmp	r8, r0
 8003c46:	d13a      	bne.n	8003cbe <_malloc_r+0xd2>
 8003c48:	6821      	ldr	r1, [r4, #0]
 8003c4a:	3503      	adds	r5, #3
 8003c4c:	1a6d      	subs	r5, r5, r1
 8003c4e:	f025 0503 	bic.w	r5, r5, #3
 8003c52:	3508      	adds	r5, #8
 8003c54:	2d0c      	cmp	r5, #12
 8003c56:	bf38      	it	cc
 8003c58:	250c      	movcc	r5, #12
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	f7ff ffa5 	bl	8003bac <sbrk_aligned>
 8003c62:	3001      	adds	r0, #1
 8003c64:	d02b      	beq.n	8003cbe <_malloc_r+0xd2>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	442b      	add	r3, r5
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	e00e      	b.n	8003c8c <_malloc_r+0xa0>
 8003c6e:	6822      	ldr	r2, [r4, #0]
 8003c70:	1b52      	subs	r2, r2, r5
 8003c72:	d41e      	bmi.n	8003cb2 <_malloc_r+0xc6>
 8003c74:	2a0b      	cmp	r2, #11
 8003c76:	d916      	bls.n	8003ca6 <_malloc_r+0xba>
 8003c78:	1961      	adds	r1, r4, r5
 8003c7a:	42a3      	cmp	r3, r4
 8003c7c:	6025      	str	r5, [r4, #0]
 8003c7e:	bf18      	it	ne
 8003c80:	6059      	strne	r1, [r3, #4]
 8003c82:	6863      	ldr	r3, [r4, #4]
 8003c84:	bf08      	it	eq
 8003c86:	6031      	streq	r1, [r6, #0]
 8003c88:	5162      	str	r2, [r4, r5]
 8003c8a:	604b      	str	r3, [r1, #4]
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	f104 060b 	add.w	r6, r4, #11
 8003c92:	f000 fc7d 	bl	8004590 <__malloc_unlock>
 8003c96:	f026 0607 	bic.w	r6, r6, #7
 8003c9a:	1d23      	adds	r3, r4, #4
 8003c9c:	1af2      	subs	r2, r6, r3
 8003c9e:	d0b6      	beq.n	8003c0e <_malloc_r+0x22>
 8003ca0:	1b9b      	subs	r3, r3, r6
 8003ca2:	50a3      	str	r3, [r4, r2]
 8003ca4:	e7b3      	b.n	8003c0e <_malloc_r+0x22>
 8003ca6:	6862      	ldr	r2, [r4, #4]
 8003ca8:	42a3      	cmp	r3, r4
 8003caa:	bf0c      	ite	eq
 8003cac:	6032      	streq	r2, [r6, #0]
 8003cae:	605a      	strne	r2, [r3, #4]
 8003cb0:	e7ec      	b.n	8003c8c <_malloc_r+0xa0>
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	6864      	ldr	r4, [r4, #4]
 8003cb6:	e7b2      	b.n	8003c1e <_malloc_r+0x32>
 8003cb8:	4634      	mov	r4, r6
 8003cba:	6876      	ldr	r6, [r6, #4]
 8003cbc:	e7b9      	b.n	8003c32 <_malloc_r+0x46>
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	f000 fc64 	bl	8004590 <__malloc_unlock>
 8003cc8:	e7a1      	b.n	8003c0e <_malloc_r+0x22>
 8003cca:	6025      	str	r5, [r4, #0]
 8003ccc:	e7de      	b.n	8003c8c <_malloc_r+0xa0>
 8003cce:	bf00      	nop
 8003cd0:	200002a0 	.word	0x200002a0

08003cd4 <__sfputc_r>:
 8003cd4:	6893      	ldr	r3, [r2, #8]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	b410      	push	{r4}
 8003cdc:	6093      	str	r3, [r2, #8]
 8003cde:	da08      	bge.n	8003cf2 <__sfputc_r+0x1e>
 8003ce0:	6994      	ldr	r4, [r2, #24]
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	db01      	blt.n	8003cea <__sfputc_r+0x16>
 8003ce6:	290a      	cmp	r1, #10
 8003ce8:	d103      	bne.n	8003cf2 <__sfputc_r+0x1e>
 8003cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cee:	f000 bb33 	b.w	8004358 <__swbuf_r>
 8003cf2:	6813      	ldr	r3, [r2, #0]
 8003cf4:	1c58      	adds	r0, r3, #1
 8003cf6:	6010      	str	r0, [r2, #0]
 8003cf8:	7019      	strb	r1, [r3, #0]
 8003cfa:	4608      	mov	r0, r1
 8003cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <__sfputs_r>:
 8003d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d04:	4606      	mov	r6, r0
 8003d06:	460f      	mov	r7, r1
 8003d08:	4614      	mov	r4, r2
 8003d0a:	18d5      	adds	r5, r2, r3
 8003d0c:	42ac      	cmp	r4, r5
 8003d0e:	d101      	bne.n	8003d14 <__sfputs_r+0x12>
 8003d10:	2000      	movs	r0, #0
 8003d12:	e007      	b.n	8003d24 <__sfputs_r+0x22>
 8003d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d18:	463a      	mov	r2, r7
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f7ff ffda 	bl	8003cd4 <__sfputc_r>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	d1f3      	bne.n	8003d0c <__sfputs_r+0xa>
 8003d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d28 <_vfiprintf_r>:
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	460d      	mov	r5, r1
 8003d2e:	b09d      	sub	sp, #116	; 0x74
 8003d30:	4614      	mov	r4, r2
 8003d32:	4698      	mov	r8, r3
 8003d34:	4606      	mov	r6, r0
 8003d36:	b118      	cbz	r0, 8003d40 <_vfiprintf_r+0x18>
 8003d38:	6983      	ldr	r3, [r0, #24]
 8003d3a:	b90b      	cbnz	r3, 8003d40 <_vfiprintf_r+0x18>
 8003d3c:	f7ff fddc 	bl	80038f8 <__sinit>
 8003d40:	4b89      	ldr	r3, [pc, #548]	; (8003f68 <_vfiprintf_r+0x240>)
 8003d42:	429d      	cmp	r5, r3
 8003d44:	d11b      	bne.n	8003d7e <_vfiprintf_r+0x56>
 8003d46:	6875      	ldr	r5, [r6, #4]
 8003d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d4a:	07d9      	lsls	r1, r3, #31
 8003d4c:	d405      	bmi.n	8003d5a <_vfiprintf_r+0x32>
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	059a      	lsls	r2, r3, #22
 8003d52:	d402      	bmi.n	8003d5a <_vfiprintf_r+0x32>
 8003d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d56:	f7ff fe6d 	bl	8003a34 <__retarget_lock_acquire_recursive>
 8003d5a:	89ab      	ldrh	r3, [r5, #12]
 8003d5c:	071b      	lsls	r3, r3, #28
 8003d5e:	d501      	bpl.n	8003d64 <_vfiprintf_r+0x3c>
 8003d60:	692b      	ldr	r3, [r5, #16]
 8003d62:	b9eb      	cbnz	r3, 8003da0 <_vfiprintf_r+0x78>
 8003d64:	4629      	mov	r1, r5
 8003d66:	4630      	mov	r0, r6
 8003d68:	f000 fb5a 	bl	8004420 <__swsetup_r>
 8003d6c:	b1c0      	cbz	r0, 8003da0 <_vfiprintf_r+0x78>
 8003d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d70:	07dc      	lsls	r4, r3, #31
 8003d72:	d50e      	bpl.n	8003d92 <_vfiprintf_r+0x6a>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	b01d      	add	sp, #116	; 0x74
 8003d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <_vfiprintf_r+0x244>)
 8003d80:	429d      	cmp	r5, r3
 8003d82:	d101      	bne.n	8003d88 <_vfiprintf_r+0x60>
 8003d84:	68b5      	ldr	r5, [r6, #8]
 8003d86:	e7df      	b.n	8003d48 <_vfiprintf_r+0x20>
 8003d88:	4b79      	ldr	r3, [pc, #484]	; (8003f70 <_vfiprintf_r+0x248>)
 8003d8a:	429d      	cmp	r5, r3
 8003d8c:	bf08      	it	eq
 8003d8e:	68f5      	ldreq	r5, [r6, #12]
 8003d90:	e7da      	b.n	8003d48 <_vfiprintf_r+0x20>
 8003d92:	89ab      	ldrh	r3, [r5, #12]
 8003d94:	0598      	lsls	r0, r3, #22
 8003d96:	d4ed      	bmi.n	8003d74 <_vfiprintf_r+0x4c>
 8003d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d9a:	f7ff fe4c 	bl	8003a36 <__retarget_lock_release_recursive>
 8003d9e:	e7e9      	b.n	8003d74 <_vfiprintf_r+0x4c>
 8003da0:	2300      	movs	r3, #0
 8003da2:	9309      	str	r3, [sp, #36]	; 0x24
 8003da4:	2320      	movs	r3, #32
 8003da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dae:	2330      	movs	r3, #48	; 0x30
 8003db0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f74 <_vfiprintf_r+0x24c>
 8003db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003db8:	f04f 0901 	mov.w	r9, #1
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	469a      	mov	sl, r3
 8003dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dc4:	b10a      	cbz	r2, 8003dca <_vfiprintf_r+0xa2>
 8003dc6:	2a25      	cmp	r2, #37	; 0x25
 8003dc8:	d1f9      	bne.n	8003dbe <_vfiprintf_r+0x96>
 8003dca:	ebba 0b04 	subs.w	fp, sl, r4
 8003dce:	d00b      	beq.n	8003de8 <_vfiprintf_r+0xc0>
 8003dd0:	465b      	mov	r3, fp
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f7ff ff93 	bl	8003d02 <__sfputs_r>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	f000 80aa 	beq.w	8003f36 <_vfiprintf_r+0x20e>
 8003de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003de4:	445a      	add	r2, fp
 8003de6:	9209      	str	r2, [sp, #36]	; 0x24
 8003de8:	f89a 3000 	ldrb.w	r3, [sl]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a2 	beq.w	8003f36 <_vfiprintf_r+0x20e>
 8003df2:	2300      	movs	r3, #0
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dfc:	f10a 0a01 	add.w	sl, sl, #1
 8003e00:	9304      	str	r3, [sp, #16]
 8003e02:	9307      	str	r3, [sp, #28]
 8003e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e08:	931a      	str	r3, [sp, #104]	; 0x68
 8003e0a:	4654      	mov	r4, sl
 8003e0c:	2205      	movs	r2, #5
 8003e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e12:	4858      	ldr	r0, [pc, #352]	; (8003f74 <_vfiprintf_r+0x24c>)
 8003e14:	f7fc f9ec 	bl	80001f0 <memchr>
 8003e18:	9a04      	ldr	r2, [sp, #16]
 8003e1a:	b9d8      	cbnz	r0, 8003e54 <_vfiprintf_r+0x12c>
 8003e1c:	06d1      	lsls	r1, r2, #27
 8003e1e:	bf44      	itt	mi
 8003e20:	2320      	movmi	r3, #32
 8003e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e26:	0713      	lsls	r3, r2, #28
 8003e28:	bf44      	itt	mi
 8003e2a:	232b      	movmi	r3, #43	; 0x2b
 8003e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e30:	f89a 3000 	ldrb.w	r3, [sl]
 8003e34:	2b2a      	cmp	r3, #42	; 0x2a
 8003e36:	d015      	beq.n	8003e64 <_vfiprintf_r+0x13c>
 8003e38:	9a07      	ldr	r2, [sp, #28]
 8003e3a:	4654      	mov	r4, sl
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f04f 0c0a 	mov.w	ip, #10
 8003e42:	4621      	mov	r1, r4
 8003e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e48:	3b30      	subs	r3, #48	; 0x30
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	d94e      	bls.n	8003eec <_vfiprintf_r+0x1c4>
 8003e4e:	b1b0      	cbz	r0, 8003e7e <_vfiprintf_r+0x156>
 8003e50:	9207      	str	r2, [sp, #28]
 8003e52:	e014      	b.n	8003e7e <_vfiprintf_r+0x156>
 8003e54:	eba0 0308 	sub.w	r3, r0, r8
 8003e58:	fa09 f303 	lsl.w	r3, r9, r3
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	46a2      	mov	sl, r4
 8003e62:	e7d2      	b.n	8003e0a <_vfiprintf_r+0xe2>
 8003e64:	9b03      	ldr	r3, [sp, #12]
 8003e66:	1d19      	adds	r1, r3, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	9103      	str	r1, [sp, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bfbb      	ittet	lt
 8003e70:	425b      	neglt	r3, r3
 8003e72:	f042 0202 	orrlt.w	r2, r2, #2
 8003e76:	9307      	strge	r3, [sp, #28]
 8003e78:	9307      	strlt	r3, [sp, #28]
 8003e7a:	bfb8      	it	lt
 8003e7c:	9204      	strlt	r2, [sp, #16]
 8003e7e:	7823      	ldrb	r3, [r4, #0]
 8003e80:	2b2e      	cmp	r3, #46	; 0x2e
 8003e82:	d10c      	bne.n	8003e9e <_vfiprintf_r+0x176>
 8003e84:	7863      	ldrb	r3, [r4, #1]
 8003e86:	2b2a      	cmp	r3, #42	; 0x2a
 8003e88:	d135      	bne.n	8003ef6 <_vfiprintf_r+0x1ce>
 8003e8a:	9b03      	ldr	r3, [sp, #12]
 8003e8c:	1d1a      	adds	r2, r3, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	9203      	str	r2, [sp, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfb8      	it	lt
 8003e96:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e9a:	3402      	adds	r4, #2
 8003e9c:	9305      	str	r3, [sp, #20]
 8003e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f84 <_vfiprintf_r+0x25c>
 8003ea2:	7821      	ldrb	r1, [r4, #0]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	f7fc f9a2 	bl	80001f0 <memchr>
 8003eac:	b140      	cbz	r0, 8003ec0 <_vfiprintf_r+0x198>
 8003eae:	2340      	movs	r3, #64	; 0x40
 8003eb0:	eba0 000a 	sub.w	r0, r0, sl
 8003eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb8:	9b04      	ldr	r3, [sp, #16]
 8003eba:	4303      	orrs	r3, r0
 8003ebc:	3401      	adds	r4, #1
 8003ebe:	9304      	str	r3, [sp, #16]
 8003ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec4:	482c      	ldr	r0, [pc, #176]	; (8003f78 <_vfiprintf_r+0x250>)
 8003ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eca:	2206      	movs	r2, #6
 8003ecc:	f7fc f990 	bl	80001f0 <memchr>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d03f      	beq.n	8003f54 <_vfiprintf_r+0x22c>
 8003ed4:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <_vfiprintf_r+0x254>)
 8003ed6:	bb1b      	cbnz	r3, 8003f20 <_vfiprintf_r+0x1f8>
 8003ed8:	9b03      	ldr	r3, [sp, #12]
 8003eda:	3307      	adds	r3, #7
 8003edc:	f023 0307 	bic.w	r3, r3, #7
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	9303      	str	r3, [sp, #12]
 8003ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee6:	443b      	add	r3, r7
 8003ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eea:	e767      	b.n	8003dbc <_vfiprintf_r+0x94>
 8003eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	e7a5      	b.n	8003e42 <_vfiprintf_r+0x11a>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	3401      	adds	r4, #1
 8003efa:	9305      	str	r3, [sp, #20]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f04f 0c0a 	mov.w	ip, #10
 8003f02:	4620      	mov	r0, r4
 8003f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f08:	3a30      	subs	r2, #48	; 0x30
 8003f0a:	2a09      	cmp	r2, #9
 8003f0c:	d903      	bls.n	8003f16 <_vfiprintf_r+0x1ee>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0c5      	beq.n	8003e9e <_vfiprintf_r+0x176>
 8003f12:	9105      	str	r1, [sp, #20]
 8003f14:	e7c3      	b.n	8003e9e <_vfiprintf_r+0x176>
 8003f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e7f0      	b.n	8003f02 <_vfiprintf_r+0x1da>
 8003f20:	ab03      	add	r3, sp, #12
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	462a      	mov	r2, r5
 8003f26:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <_vfiprintf_r+0x258>)
 8003f28:	a904      	add	r1, sp, #16
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f3af 8000 	nop.w
 8003f30:	4607      	mov	r7, r0
 8003f32:	1c78      	adds	r0, r7, #1
 8003f34:	d1d6      	bne.n	8003ee4 <_vfiprintf_r+0x1bc>
 8003f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f38:	07d9      	lsls	r1, r3, #31
 8003f3a:	d405      	bmi.n	8003f48 <_vfiprintf_r+0x220>
 8003f3c:	89ab      	ldrh	r3, [r5, #12]
 8003f3e:	059a      	lsls	r2, r3, #22
 8003f40:	d402      	bmi.n	8003f48 <_vfiprintf_r+0x220>
 8003f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f44:	f7ff fd77 	bl	8003a36 <__retarget_lock_release_recursive>
 8003f48:	89ab      	ldrh	r3, [r5, #12]
 8003f4a:	065b      	lsls	r3, r3, #25
 8003f4c:	f53f af12 	bmi.w	8003d74 <_vfiprintf_r+0x4c>
 8003f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f52:	e711      	b.n	8003d78 <_vfiprintf_r+0x50>
 8003f54:	ab03      	add	r3, sp, #12
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	462a      	mov	r2, r5
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <_vfiprintf_r+0x258>)
 8003f5c:	a904      	add	r1, sp, #16
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f000 f880 	bl	8004064 <_printf_i>
 8003f64:	e7e4      	b.n	8003f30 <_vfiprintf_r+0x208>
 8003f66:	bf00      	nop
 8003f68:	08004620 	.word	0x08004620
 8003f6c:	08004640 	.word	0x08004640
 8003f70:	08004600 	.word	0x08004600
 8003f74:	08004660 	.word	0x08004660
 8003f78:	0800466a 	.word	0x0800466a
 8003f7c:	00000000 	.word	0x00000000
 8003f80:	08003d03 	.word	0x08003d03
 8003f84:	08004666 	.word	0x08004666

08003f88 <_printf_common>:
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	4699      	mov	r9, r3
 8003f90:	688a      	ldr	r2, [r1, #8]
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	bfb8      	it	lt
 8003f9c:	4613      	movlt	r3, r2
 8003f9e:	6033      	str	r3, [r6, #0]
 8003fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa4:	4607      	mov	r7, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	b10a      	cbz	r2, 8003fae <_printf_common+0x26>
 8003faa:	3301      	adds	r3, #1
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	0699      	lsls	r1, r3, #26
 8003fb2:	bf42      	ittt	mi
 8003fb4:	6833      	ldrmi	r3, [r6, #0]
 8003fb6:	3302      	addmi	r3, #2
 8003fb8:	6033      	strmi	r3, [r6, #0]
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	f015 0506 	ands.w	r5, r5, #6
 8003fc0:	d106      	bne.n	8003fd0 <_printf_common+0x48>
 8003fc2:	f104 0a19 	add.w	sl, r4, #25
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	6832      	ldr	r2, [r6, #0]
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	42ab      	cmp	r3, r5
 8003fce:	dc26      	bgt.n	800401e <_printf_common+0x96>
 8003fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fd4:	1e13      	subs	r3, r2, #0
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	bf18      	it	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	0692      	lsls	r2, r2, #26
 8003fde:	d42b      	bmi.n	8004038 <_printf_common+0xb0>
 8003fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	47c0      	blx	r8
 8003fea:	3001      	adds	r0, #1
 8003fec:	d01e      	beq.n	800402c <_printf_common+0xa4>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	68e5      	ldr	r5, [r4, #12]
 8003ff2:	6832      	ldr	r2, [r6, #0]
 8003ff4:	f003 0306 	and.w	r3, r3, #6
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	bf08      	it	eq
 8003ffc:	1aad      	subeq	r5, r5, r2
 8003ffe:	68a3      	ldr	r3, [r4, #8]
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	bf0c      	ite	eq
 8004004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004008:	2500      	movne	r5, #0
 800400a:	4293      	cmp	r3, r2
 800400c:	bfc4      	itt	gt
 800400e:	1a9b      	subgt	r3, r3, r2
 8004010:	18ed      	addgt	r5, r5, r3
 8004012:	2600      	movs	r6, #0
 8004014:	341a      	adds	r4, #26
 8004016:	42b5      	cmp	r5, r6
 8004018:	d11a      	bne.n	8004050 <_printf_common+0xc8>
 800401a:	2000      	movs	r0, #0
 800401c:	e008      	b.n	8004030 <_printf_common+0xa8>
 800401e:	2301      	movs	r3, #1
 8004020:	4652      	mov	r2, sl
 8004022:	4649      	mov	r1, r9
 8004024:	4638      	mov	r0, r7
 8004026:	47c0      	blx	r8
 8004028:	3001      	adds	r0, #1
 800402a:	d103      	bne.n	8004034 <_printf_common+0xac>
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004034:	3501      	adds	r5, #1
 8004036:	e7c6      	b.n	8003fc6 <_printf_common+0x3e>
 8004038:	18e1      	adds	r1, r4, r3
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	2030      	movs	r0, #48	; 0x30
 800403e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004042:	4422      	add	r2, r4
 8004044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800404c:	3302      	adds	r3, #2
 800404e:	e7c7      	b.n	8003fe0 <_printf_common+0x58>
 8004050:	2301      	movs	r3, #1
 8004052:	4622      	mov	r2, r4
 8004054:	4649      	mov	r1, r9
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	3001      	adds	r0, #1
 800405c:	d0e6      	beq.n	800402c <_printf_common+0xa4>
 800405e:	3601      	adds	r6, #1
 8004060:	e7d9      	b.n	8004016 <_printf_common+0x8e>
	...

08004064 <_printf_i>:
 8004064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	7e0f      	ldrb	r7, [r1, #24]
 800406a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800406c:	2f78      	cmp	r7, #120	; 0x78
 800406e:	4691      	mov	r9, r2
 8004070:	4680      	mov	r8, r0
 8004072:	460c      	mov	r4, r1
 8004074:	469a      	mov	sl, r3
 8004076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800407a:	d807      	bhi.n	800408c <_printf_i+0x28>
 800407c:	2f62      	cmp	r7, #98	; 0x62
 800407e:	d80a      	bhi.n	8004096 <_printf_i+0x32>
 8004080:	2f00      	cmp	r7, #0
 8004082:	f000 80d8 	beq.w	8004236 <_printf_i+0x1d2>
 8004086:	2f58      	cmp	r7, #88	; 0x58
 8004088:	f000 80a3 	beq.w	80041d2 <_printf_i+0x16e>
 800408c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004094:	e03a      	b.n	800410c <_printf_i+0xa8>
 8004096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800409a:	2b15      	cmp	r3, #21
 800409c:	d8f6      	bhi.n	800408c <_printf_i+0x28>
 800409e:	a101      	add	r1, pc, #4	; (adr r1, 80040a4 <_printf_i+0x40>)
 80040a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040a4:	080040fd 	.word	0x080040fd
 80040a8:	08004111 	.word	0x08004111
 80040ac:	0800408d 	.word	0x0800408d
 80040b0:	0800408d 	.word	0x0800408d
 80040b4:	0800408d 	.word	0x0800408d
 80040b8:	0800408d 	.word	0x0800408d
 80040bc:	08004111 	.word	0x08004111
 80040c0:	0800408d 	.word	0x0800408d
 80040c4:	0800408d 	.word	0x0800408d
 80040c8:	0800408d 	.word	0x0800408d
 80040cc:	0800408d 	.word	0x0800408d
 80040d0:	0800421d 	.word	0x0800421d
 80040d4:	08004141 	.word	0x08004141
 80040d8:	080041ff 	.word	0x080041ff
 80040dc:	0800408d 	.word	0x0800408d
 80040e0:	0800408d 	.word	0x0800408d
 80040e4:	0800423f 	.word	0x0800423f
 80040e8:	0800408d 	.word	0x0800408d
 80040ec:	08004141 	.word	0x08004141
 80040f0:	0800408d 	.word	0x0800408d
 80040f4:	0800408d 	.word	0x0800408d
 80040f8:	08004207 	.word	0x08004207
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	602a      	str	r2, [r5, #0]
 8004104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800410c:	2301      	movs	r3, #1
 800410e:	e0a3      	b.n	8004258 <_printf_i+0x1f4>
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	6829      	ldr	r1, [r5, #0]
 8004114:	0606      	lsls	r6, r0, #24
 8004116:	f101 0304 	add.w	r3, r1, #4
 800411a:	d50a      	bpl.n	8004132 <_printf_i+0xce>
 800411c:	680e      	ldr	r6, [r1, #0]
 800411e:	602b      	str	r3, [r5, #0]
 8004120:	2e00      	cmp	r6, #0
 8004122:	da03      	bge.n	800412c <_printf_i+0xc8>
 8004124:	232d      	movs	r3, #45	; 0x2d
 8004126:	4276      	negs	r6, r6
 8004128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412c:	485e      	ldr	r0, [pc, #376]	; (80042a8 <_printf_i+0x244>)
 800412e:	230a      	movs	r3, #10
 8004130:	e019      	b.n	8004166 <_printf_i+0x102>
 8004132:	680e      	ldr	r6, [r1, #0]
 8004134:	602b      	str	r3, [r5, #0]
 8004136:	f010 0f40 	tst.w	r0, #64	; 0x40
 800413a:	bf18      	it	ne
 800413c:	b236      	sxthne	r6, r6
 800413e:	e7ef      	b.n	8004120 <_printf_i+0xbc>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	6820      	ldr	r0, [r4, #0]
 8004144:	1d19      	adds	r1, r3, #4
 8004146:	6029      	str	r1, [r5, #0]
 8004148:	0601      	lsls	r1, r0, #24
 800414a:	d501      	bpl.n	8004150 <_printf_i+0xec>
 800414c:	681e      	ldr	r6, [r3, #0]
 800414e:	e002      	b.n	8004156 <_printf_i+0xf2>
 8004150:	0646      	lsls	r6, r0, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0xe8>
 8004154:	881e      	ldrh	r6, [r3, #0]
 8004156:	4854      	ldr	r0, [pc, #336]	; (80042a8 <_printf_i+0x244>)
 8004158:	2f6f      	cmp	r7, #111	; 0x6f
 800415a:	bf0c      	ite	eq
 800415c:	2308      	moveq	r3, #8
 800415e:	230a      	movne	r3, #10
 8004160:	2100      	movs	r1, #0
 8004162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004166:	6865      	ldr	r5, [r4, #4]
 8004168:	60a5      	str	r5, [r4, #8]
 800416a:	2d00      	cmp	r5, #0
 800416c:	bfa2      	ittt	ge
 800416e:	6821      	ldrge	r1, [r4, #0]
 8004170:	f021 0104 	bicge.w	r1, r1, #4
 8004174:	6021      	strge	r1, [r4, #0]
 8004176:	b90e      	cbnz	r6, 800417c <_printf_i+0x118>
 8004178:	2d00      	cmp	r5, #0
 800417a:	d04d      	beq.n	8004218 <_printf_i+0x1b4>
 800417c:	4615      	mov	r5, r2
 800417e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004182:	fb03 6711 	mls	r7, r3, r1, r6
 8004186:	5dc7      	ldrb	r7, [r0, r7]
 8004188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800418c:	4637      	mov	r7, r6
 800418e:	42bb      	cmp	r3, r7
 8004190:	460e      	mov	r6, r1
 8004192:	d9f4      	bls.n	800417e <_printf_i+0x11a>
 8004194:	2b08      	cmp	r3, #8
 8004196:	d10b      	bne.n	80041b0 <_printf_i+0x14c>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	07de      	lsls	r6, r3, #31
 800419c:	d508      	bpl.n	80041b0 <_printf_i+0x14c>
 800419e:	6923      	ldr	r3, [r4, #16]
 80041a0:	6861      	ldr	r1, [r4, #4]
 80041a2:	4299      	cmp	r1, r3
 80041a4:	bfde      	ittt	le
 80041a6:	2330      	movle	r3, #48	; 0x30
 80041a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041b0:	1b52      	subs	r2, r2, r5
 80041b2:	6122      	str	r2, [r4, #16]
 80041b4:	f8cd a000 	str.w	sl, [sp]
 80041b8:	464b      	mov	r3, r9
 80041ba:	aa03      	add	r2, sp, #12
 80041bc:	4621      	mov	r1, r4
 80041be:	4640      	mov	r0, r8
 80041c0:	f7ff fee2 	bl	8003f88 <_printf_common>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d14c      	bne.n	8004262 <_printf_i+0x1fe>
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	b004      	add	sp, #16
 80041ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d2:	4835      	ldr	r0, [pc, #212]	; (80042a8 <_printf_i+0x244>)
 80041d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041d8:	6829      	ldr	r1, [r5, #0]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80041e0:	6029      	str	r1, [r5, #0]
 80041e2:	061d      	lsls	r5, r3, #24
 80041e4:	d514      	bpl.n	8004210 <_printf_i+0x1ac>
 80041e6:	07df      	lsls	r7, r3, #31
 80041e8:	bf44      	itt	mi
 80041ea:	f043 0320 	orrmi.w	r3, r3, #32
 80041ee:	6023      	strmi	r3, [r4, #0]
 80041f0:	b91e      	cbnz	r6, 80041fa <_printf_i+0x196>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	f023 0320 	bic.w	r3, r3, #32
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	2310      	movs	r3, #16
 80041fc:	e7b0      	b.n	8004160 <_printf_i+0xfc>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	f043 0320 	orr.w	r3, r3, #32
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	2378      	movs	r3, #120	; 0x78
 8004208:	4828      	ldr	r0, [pc, #160]	; (80042ac <_printf_i+0x248>)
 800420a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800420e:	e7e3      	b.n	80041d8 <_printf_i+0x174>
 8004210:	0659      	lsls	r1, r3, #25
 8004212:	bf48      	it	mi
 8004214:	b2b6      	uxthmi	r6, r6
 8004216:	e7e6      	b.n	80041e6 <_printf_i+0x182>
 8004218:	4615      	mov	r5, r2
 800421a:	e7bb      	b.n	8004194 <_printf_i+0x130>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	6826      	ldr	r6, [r4, #0]
 8004220:	6961      	ldr	r1, [r4, #20]
 8004222:	1d18      	adds	r0, r3, #4
 8004224:	6028      	str	r0, [r5, #0]
 8004226:	0635      	lsls	r5, r6, #24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	d501      	bpl.n	8004230 <_printf_i+0x1cc>
 800422c:	6019      	str	r1, [r3, #0]
 800422e:	e002      	b.n	8004236 <_printf_i+0x1d2>
 8004230:	0670      	lsls	r0, r6, #25
 8004232:	d5fb      	bpl.n	800422c <_printf_i+0x1c8>
 8004234:	8019      	strh	r1, [r3, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	4615      	mov	r5, r2
 800423c:	e7ba      	b.n	80041b4 <_printf_i+0x150>
 800423e:	682b      	ldr	r3, [r5, #0]
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	602a      	str	r2, [r5, #0]
 8004244:	681d      	ldr	r5, [r3, #0]
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	2100      	movs	r1, #0
 800424a:	4628      	mov	r0, r5
 800424c:	f7fb ffd0 	bl	80001f0 <memchr>
 8004250:	b108      	cbz	r0, 8004256 <_printf_i+0x1f2>
 8004252:	1b40      	subs	r0, r0, r5
 8004254:	6060      	str	r0, [r4, #4]
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	6123      	str	r3, [r4, #16]
 800425a:	2300      	movs	r3, #0
 800425c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004260:	e7a8      	b.n	80041b4 <_printf_i+0x150>
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	462a      	mov	r2, r5
 8004266:	4649      	mov	r1, r9
 8004268:	4640      	mov	r0, r8
 800426a:	47d0      	blx	sl
 800426c:	3001      	adds	r0, #1
 800426e:	d0ab      	beq.n	80041c8 <_printf_i+0x164>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	079b      	lsls	r3, r3, #30
 8004274:	d413      	bmi.n	800429e <_printf_i+0x23a>
 8004276:	68e0      	ldr	r0, [r4, #12]
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	4298      	cmp	r0, r3
 800427c:	bfb8      	it	lt
 800427e:	4618      	movlt	r0, r3
 8004280:	e7a4      	b.n	80041cc <_printf_i+0x168>
 8004282:	2301      	movs	r3, #1
 8004284:	4632      	mov	r2, r6
 8004286:	4649      	mov	r1, r9
 8004288:	4640      	mov	r0, r8
 800428a:	47d0      	blx	sl
 800428c:	3001      	adds	r0, #1
 800428e:	d09b      	beq.n	80041c8 <_printf_i+0x164>
 8004290:	3501      	adds	r5, #1
 8004292:	68e3      	ldr	r3, [r4, #12]
 8004294:	9903      	ldr	r1, [sp, #12]
 8004296:	1a5b      	subs	r3, r3, r1
 8004298:	42ab      	cmp	r3, r5
 800429a:	dcf2      	bgt.n	8004282 <_printf_i+0x21e>
 800429c:	e7eb      	b.n	8004276 <_printf_i+0x212>
 800429e:	2500      	movs	r5, #0
 80042a0:	f104 0619 	add.w	r6, r4, #25
 80042a4:	e7f5      	b.n	8004292 <_printf_i+0x22e>
 80042a6:	bf00      	nop
 80042a8:	08004671 	.word	0x08004671
 80042ac:	08004682 	.word	0x08004682

080042b0 <_sbrk_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4d06      	ldr	r5, [pc, #24]	; (80042cc <_sbrk_r+0x1c>)
 80042b4:	2300      	movs	r3, #0
 80042b6:	4604      	mov	r4, r0
 80042b8:	4608      	mov	r0, r1
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	f7fc fc6c 	bl	8000b98 <_sbrk>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_sbrk_r+0x1a>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_sbrk_r+0x1a>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	200002a8 	.word	0x200002a8

080042d0 <__sread>:
 80042d0:	b510      	push	{r4, lr}
 80042d2:	460c      	mov	r4, r1
 80042d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d8:	f000 f960 	bl	800459c <_read_r>
 80042dc:	2800      	cmp	r0, #0
 80042de:	bfab      	itete	ge
 80042e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042e2:	89a3      	ldrhlt	r3, [r4, #12]
 80042e4:	181b      	addge	r3, r3, r0
 80042e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042ea:	bfac      	ite	ge
 80042ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ee:	81a3      	strhlt	r3, [r4, #12]
 80042f0:	bd10      	pop	{r4, pc}

080042f2 <__swrite>:
 80042f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f6:	461f      	mov	r7, r3
 80042f8:	898b      	ldrh	r3, [r1, #12]
 80042fa:	05db      	lsls	r3, r3, #23
 80042fc:	4605      	mov	r5, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	4616      	mov	r6, r2
 8004302:	d505      	bpl.n	8004310 <__swrite+0x1e>
 8004304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004308:	2302      	movs	r3, #2
 800430a:	2200      	movs	r2, #0
 800430c:	f000 f928 	bl	8004560 <_lseek_r>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800431a:	81a3      	strh	r3, [r4, #12]
 800431c:	4632      	mov	r2, r6
 800431e:	463b      	mov	r3, r7
 8004320:	4628      	mov	r0, r5
 8004322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004326:	f000 b869 	b.w	80043fc <_write_r>

0800432a <__sseek>:
 800432a:	b510      	push	{r4, lr}
 800432c:	460c      	mov	r4, r1
 800432e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004332:	f000 f915 	bl	8004560 <_lseek_r>
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	bf15      	itete	ne
 800433c:	6560      	strne	r0, [r4, #84]	; 0x54
 800433e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004346:	81a3      	strheq	r3, [r4, #12]
 8004348:	bf18      	it	ne
 800434a:	81a3      	strhne	r3, [r4, #12]
 800434c:	bd10      	pop	{r4, pc}

0800434e <__sclose>:
 800434e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004352:	f000 b8d3 	b.w	80044fc <_close_r>
	...

08004358 <__swbuf_r>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	460e      	mov	r6, r1
 800435c:	4614      	mov	r4, r2
 800435e:	4605      	mov	r5, r0
 8004360:	b118      	cbz	r0, 800436a <__swbuf_r+0x12>
 8004362:	6983      	ldr	r3, [r0, #24]
 8004364:	b90b      	cbnz	r3, 800436a <__swbuf_r+0x12>
 8004366:	f7ff fac7 	bl	80038f8 <__sinit>
 800436a:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <__swbuf_r+0x98>)
 800436c:	429c      	cmp	r4, r3
 800436e:	d12b      	bne.n	80043c8 <__swbuf_r+0x70>
 8004370:	686c      	ldr	r4, [r5, #4]
 8004372:	69a3      	ldr	r3, [r4, #24]
 8004374:	60a3      	str	r3, [r4, #8]
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	071a      	lsls	r2, r3, #28
 800437a:	d52f      	bpl.n	80043dc <__swbuf_r+0x84>
 800437c:	6923      	ldr	r3, [r4, #16]
 800437e:	b36b      	cbz	r3, 80043dc <__swbuf_r+0x84>
 8004380:	6923      	ldr	r3, [r4, #16]
 8004382:	6820      	ldr	r0, [r4, #0]
 8004384:	1ac0      	subs	r0, r0, r3
 8004386:	6963      	ldr	r3, [r4, #20]
 8004388:	b2f6      	uxtb	r6, r6
 800438a:	4283      	cmp	r3, r0
 800438c:	4637      	mov	r7, r6
 800438e:	dc04      	bgt.n	800439a <__swbuf_r+0x42>
 8004390:	4621      	mov	r1, r4
 8004392:	4628      	mov	r0, r5
 8004394:	f7ff fa1c 	bl	80037d0 <_fflush_r>
 8004398:	bb30      	cbnz	r0, 80043e8 <__swbuf_r+0x90>
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	3b01      	subs	r3, #1
 800439e:	60a3      	str	r3, [r4, #8]
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	6022      	str	r2, [r4, #0]
 80043a6:	701e      	strb	r6, [r3, #0]
 80043a8:	6963      	ldr	r3, [r4, #20]
 80043aa:	3001      	adds	r0, #1
 80043ac:	4283      	cmp	r3, r0
 80043ae:	d004      	beq.n	80043ba <__swbuf_r+0x62>
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	07db      	lsls	r3, r3, #31
 80043b4:	d506      	bpl.n	80043c4 <__swbuf_r+0x6c>
 80043b6:	2e0a      	cmp	r6, #10
 80043b8:	d104      	bne.n	80043c4 <__swbuf_r+0x6c>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	f7ff fa07 	bl	80037d0 <_fflush_r>
 80043c2:	b988      	cbnz	r0, 80043e8 <__swbuf_r+0x90>
 80043c4:	4638      	mov	r0, r7
 80043c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <__swbuf_r+0x9c>)
 80043ca:	429c      	cmp	r4, r3
 80043cc:	d101      	bne.n	80043d2 <__swbuf_r+0x7a>
 80043ce:	68ac      	ldr	r4, [r5, #8]
 80043d0:	e7cf      	b.n	8004372 <__swbuf_r+0x1a>
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <__swbuf_r+0xa0>)
 80043d4:	429c      	cmp	r4, r3
 80043d6:	bf08      	it	eq
 80043d8:	68ec      	ldreq	r4, [r5, #12]
 80043da:	e7ca      	b.n	8004372 <__swbuf_r+0x1a>
 80043dc:	4621      	mov	r1, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 f81e 	bl	8004420 <__swsetup_r>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d0cb      	beq.n	8004380 <__swbuf_r+0x28>
 80043e8:	f04f 37ff 	mov.w	r7, #4294967295
 80043ec:	e7ea      	b.n	80043c4 <__swbuf_r+0x6c>
 80043ee:	bf00      	nop
 80043f0:	08004620 	.word	0x08004620
 80043f4:	08004640 	.word	0x08004640
 80043f8:	08004600 	.word	0x08004600

080043fc <_write_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4d07      	ldr	r5, [pc, #28]	; (800441c <_write_r+0x20>)
 8004400:	4604      	mov	r4, r0
 8004402:	4608      	mov	r0, r1
 8004404:	4611      	mov	r1, r2
 8004406:	2200      	movs	r2, #0
 8004408:	602a      	str	r2, [r5, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	f7fc fb73 	bl	8000af6 <_write>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_write_r+0x1e>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	b103      	cbz	r3, 800441a <_write_r+0x1e>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	200002a8 	.word	0x200002a8

08004420 <__swsetup_r>:
 8004420:	4b32      	ldr	r3, [pc, #200]	; (80044ec <__swsetup_r+0xcc>)
 8004422:	b570      	push	{r4, r5, r6, lr}
 8004424:	681d      	ldr	r5, [r3, #0]
 8004426:	4606      	mov	r6, r0
 8004428:	460c      	mov	r4, r1
 800442a:	b125      	cbz	r5, 8004436 <__swsetup_r+0x16>
 800442c:	69ab      	ldr	r3, [r5, #24]
 800442e:	b913      	cbnz	r3, 8004436 <__swsetup_r+0x16>
 8004430:	4628      	mov	r0, r5
 8004432:	f7ff fa61 	bl	80038f8 <__sinit>
 8004436:	4b2e      	ldr	r3, [pc, #184]	; (80044f0 <__swsetup_r+0xd0>)
 8004438:	429c      	cmp	r4, r3
 800443a:	d10f      	bne.n	800445c <__swsetup_r+0x3c>
 800443c:	686c      	ldr	r4, [r5, #4]
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004444:	0719      	lsls	r1, r3, #28
 8004446:	d42c      	bmi.n	80044a2 <__swsetup_r+0x82>
 8004448:	06dd      	lsls	r5, r3, #27
 800444a:	d411      	bmi.n	8004470 <__swsetup_r+0x50>
 800444c:	2309      	movs	r3, #9
 800444e:	6033      	str	r3, [r6, #0]
 8004450:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	f04f 30ff 	mov.w	r0, #4294967295
 800445a:	e03e      	b.n	80044da <__swsetup_r+0xba>
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <__swsetup_r+0xd4>)
 800445e:	429c      	cmp	r4, r3
 8004460:	d101      	bne.n	8004466 <__swsetup_r+0x46>
 8004462:	68ac      	ldr	r4, [r5, #8]
 8004464:	e7eb      	b.n	800443e <__swsetup_r+0x1e>
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <__swsetup_r+0xd8>)
 8004468:	429c      	cmp	r4, r3
 800446a:	bf08      	it	eq
 800446c:	68ec      	ldreq	r4, [r5, #12]
 800446e:	e7e6      	b.n	800443e <__swsetup_r+0x1e>
 8004470:	0758      	lsls	r0, r3, #29
 8004472:	d512      	bpl.n	800449a <__swsetup_r+0x7a>
 8004474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004476:	b141      	cbz	r1, 800448a <__swsetup_r+0x6a>
 8004478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800447c:	4299      	cmp	r1, r3
 800447e:	d002      	beq.n	8004486 <__swsetup_r+0x66>
 8004480:	4630      	mov	r0, r6
 8004482:	f7ff fb47 	bl	8003b14 <_free_r>
 8004486:	2300      	movs	r3, #0
 8004488:	6363      	str	r3, [r4, #52]	; 0x34
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004490:	81a3      	strh	r3, [r4, #12]
 8004492:	2300      	movs	r3, #0
 8004494:	6063      	str	r3, [r4, #4]
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	f043 0308 	orr.w	r3, r3, #8
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	b94b      	cbnz	r3, 80044ba <__swsetup_r+0x9a>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b0:	d003      	beq.n	80044ba <__swsetup_r+0x9a>
 80044b2:	4621      	mov	r1, r4
 80044b4:	4630      	mov	r0, r6
 80044b6:	f7ff fae5 	bl	8003a84 <__smakebuf_r>
 80044ba:	89a0      	ldrh	r0, [r4, #12]
 80044bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044c0:	f010 0301 	ands.w	r3, r0, #1
 80044c4:	d00a      	beq.n	80044dc <__swsetup_r+0xbc>
 80044c6:	2300      	movs	r3, #0
 80044c8:	60a3      	str	r3, [r4, #8]
 80044ca:	6963      	ldr	r3, [r4, #20]
 80044cc:	425b      	negs	r3, r3
 80044ce:	61a3      	str	r3, [r4, #24]
 80044d0:	6923      	ldr	r3, [r4, #16]
 80044d2:	b943      	cbnz	r3, 80044e6 <__swsetup_r+0xc6>
 80044d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044d8:	d1ba      	bne.n	8004450 <__swsetup_r+0x30>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	0781      	lsls	r1, r0, #30
 80044de:	bf58      	it	pl
 80044e0:	6963      	ldrpl	r3, [r4, #20]
 80044e2:	60a3      	str	r3, [r4, #8]
 80044e4:	e7f4      	b.n	80044d0 <__swsetup_r+0xb0>
 80044e6:	2000      	movs	r0, #0
 80044e8:	e7f7      	b.n	80044da <__swsetup_r+0xba>
 80044ea:	bf00      	nop
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	08004620 	.word	0x08004620
 80044f4:	08004640 	.word	0x08004640
 80044f8:	08004600 	.word	0x08004600

080044fc <_close_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d06      	ldr	r5, [pc, #24]	; (8004518 <_close_r+0x1c>)
 8004500:	2300      	movs	r3, #0
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	602b      	str	r3, [r5, #0]
 8004508:	f7fc fb11 	bl	8000b2e <_close>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d102      	bne.n	8004516 <_close_r+0x1a>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	b103      	cbz	r3, 8004516 <_close_r+0x1a>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	200002a8 	.word	0x200002a8

0800451c <_fstat_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4d07      	ldr	r5, [pc, #28]	; (800453c <_fstat_r+0x20>)
 8004520:	2300      	movs	r3, #0
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	f7fc fb0c 	bl	8000b46 <_fstat>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	d102      	bne.n	8004538 <_fstat_r+0x1c>
 8004532:	682b      	ldr	r3, [r5, #0]
 8004534:	b103      	cbz	r3, 8004538 <_fstat_r+0x1c>
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	bd38      	pop	{r3, r4, r5, pc}
 800453a:	bf00      	nop
 800453c:	200002a8 	.word	0x200002a8

08004540 <_isatty_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4d06      	ldr	r5, [pc, #24]	; (800455c <_isatty_r+0x1c>)
 8004544:	2300      	movs	r3, #0
 8004546:	4604      	mov	r4, r0
 8004548:	4608      	mov	r0, r1
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	f7fc fb0b 	bl	8000b66 <_isatty>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_isatty_r+0x1a>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b103      	cbz	r3, 800455a <_isatty_r+0x1a>
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	200002a8 	.word	0x200002a8

08004560 <_lseek_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d07      	ldr	r5, [pc, #28]	; (8004580 <_lseek_r+0x20>)
 8004564:	4604      	mov	r4, r0
 8004566:	4608      	mov	r0, r1
 8004568:	4611      	mov	r1, r2
 800456a:	2200      	movs	r2, #0
 800456c:	602a      	str	r2, [r5, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	f7fc fb04 	bl	8000b7c <_lseek>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_lseek_r+0x1e>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_lseek_r+0x1e>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	200002a8 	.word	0x200002a8

08004584 <__malloc_lock>:
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <__malloc_lock+0x8>)
 8004586:	f7ff ba55 	b.w	8003a34 <__retarget_lock_acquire_recursive>
 800458a:	bf00      	nop
 800458c:	2000029c 	.word	0x2000029c

08004590 <__malloc_unlock>:
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <__malloc_unlock+0x8>)
 8004592:	f7ff ba50 	b.w	8003a36 <__retarget_lock_release_recursive>
 8004596:	bf00      	nop
 8004598:	2000029c 	.word	0x2000029c

0800459c <_read_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d07      	ldr	r5, [pc, #28]	; (80045bc <_read_r+0x20>)
 80045a0:	4604      	mov	r4, r0
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	602a      	str	r2, [r5, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7fc fa86 	bl	8000abc <_read>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_read_r+0x1e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_read_r+0x1e>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	200002a8 	.word	0x200002a8

080045c0 <_init>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr

080045cc <_fini>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr
