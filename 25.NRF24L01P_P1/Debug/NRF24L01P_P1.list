
NRF24L01P_P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009134  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009248  08009248  00019248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a0  080096a0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080096a0  080096a0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096a0  080096a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080096a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001e4  0800988c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  0800988c  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c281  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002422  00000000  00000000  0002c4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000900  00000000  00000000  0002f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019097  00000000  00000000  0002fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e04c  00000000  00000000  00048e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b218  00000000  00000000  00056eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004410  00000000  00000000  000e20cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e64dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800922c 	.word	0x0800922c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800922c 	.word	0x0800922c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bde:	f000 fcd5 	bl	800158c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000be2:	f000 f88b 	bl	8000cfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000be6:	f000 f983 	bl	8000ef0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000bea:	f000 f921 	bl	8000e30 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000bee:	f000 f955 	bl	8000e9c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8000bf2:	f000 f8df 	bl	8000db4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	nrf24l01p_rx_init(2500, _1Mbps, P1_address, P0_address);
 8000bf6:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <main+0x104>)
 8000bf8:	4a39      	ldr	r2, [pc, #228]	; (8000ce0 <main+0x108>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000c00:	f003 fd08 	bl	8004614 <nrf24l01p_rx_init>

	rxBufferInit(&uart_rx);
 8000c04:	4837      	ldr	r0, [pc, #220]	; (8000ce4 <main+0x10c>)
 8000c06:	f000 fbfd 	bl	8001404 <rxBufferInit>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <main+0x110>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <main+0x110>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f042 0201 	orr.w	r2, r2, #1
 8000c18:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <main+0x110>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <main+0x110>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0220 	orr.w	r2, r2, #32
 8000c28:	60da      	str	r2, [r3, #12]

	HAL_ADC_Start(&hadc1);
 8000c2a:	4830      	ldr	r0, [pc, #192]	; (8000cec <main+0x114>)
 8000c2c:	f000 fe0c 	bl	8001848 <HAL_ADC_Start>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (nrf24l01p_rx_flag == 1) {
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <main+0x118>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d118      	bne.n	8000c6a <main+0x92>
			nrf24l01p_rx_flag =0;
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <main+0x118>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
			uint8_t stat = read_register(NRF24L01P_REG_CONFIG);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f003 fc5a 	bl	80044f8 <read_register>
 8000c44:	4603      	mov	r3, r0
 8000c46:	72fb      	strb	r3, [r7, #11]
			if (!(stat & (1 << 0))) {
 8000c48:	7afb      	ldrb	r3, [r7, #11]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <main+0x7e>

				nrf24l01p_prx_mode();
 8000c52:	f003 fd7e 	bl	8004752 <nrf24l01p_prx_mode>
			}

			//nrf24l01p_flush_rx_fifo();
			nrf24l01p_rx_receive(rx_data);
 8000c56:	4827      	ldr	r0, [pc, #156]	; (8000cf4 <main+0x11c>)
 8000c58:	f003 fd13 	bl	8004682 <nrf24l01p_rx_receive>
			HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 500);
 8000c5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c60:	2220      	movs	r2, #32
 8000c62:	4924      	ldr	r1, [pc, #144]	; (8000cf4 <main+0x11c>)
 8000c64:	4820      	ldr	r0, [pc, #128]	; (8000ce8 <main+0x110>)
 8000c66:	f002 fe43 	bl	80038f0 <HAL_UART_Transmit>
		 nrf24l01p_tx_transmit(tx_data);
		 HAL_Delay(10);
		 nrf24l01p_prx_mode();
		 */

		memset(tx_data, 0, sizeof(tx_data));
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4822      	ldr	r0, [pc, #136]	; (8000cf8 <main+0x120>)
 8000c70:	f004 febb 	bl	80059ea <memset>

		int num = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
		if (num = uart_available(&uart_rx)) {
 8000c78:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <main+0x10c>)
 8000c7a:	f000 fc1f 	bl	80014bc <uart_available>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d025      	beq.n	8000cd4 <main+0xfc>

			nrf24l01p_ptx_mode();
 8000c88:	f003 fd7c 	bl	8004784 <nrf24l01p_ptx_mode>

			for (int i = 0; i < num; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e012      	b.n	8000cb8 <main+0xe0>

				int ch = pop(&uart_rx);
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <main+0x10c>)
 8000c94:	f000 fbed 	bl	8001472 <pop>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	603b      	str	r3, [r7, #0]
				if (ch != -1) {
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca2:	d006      	beq.n	8000cb2 <main+0xda>
					tx_data[i] = ch;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2d9      	uxtb	r1, r3
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <main+0x120>)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	460a      	mov	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < num; i++) {
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbe8      	blt.n	8000c92 <main+0xba>
				}
			}

			nrf24l01p_flush_tx_fifo();
 8000cc0:	f003 fdda 	bl	8004878 <nrf24l01p_flush_tx_fifo>
			nrf24l01p_tx_transmit(tx_data);
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <main+0x120>)
 8000cc6:	f003 fce9 	bl	800469c <nrf24l01p_tx_transmit>
			HAL_Delay(100);
 8000cca:	2064      	movs	r0, #100	; 0x64
 8000ccc:	f000 fcc0 	bl	8001650 <HAL_Delay>

			nrf24l01p_prx_mode();
 8000cd0:	f003 fd3f 	bl	8004752 <nrf24l01p_prx_mode>
			//nrf24l01p_rx_init(2500, _1Mbps, P0_address);
		}

		HAL_Delay(100);
 8000cd4:	2064      	movs	r0, #100	; 0x64
 8000cd6:	f000 fcbb 	bl	8001650 <HAL_Delay>
	while (1) {
 8000cda:	e7a9      	b.n	8000c30 <main+0x58>
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000318 	.word	0x20000318
 8000ce8:	20000288 	.word	0x20000288
 8000cec:	20000200 	.word	0x20000200
 8000cf0:	200002d0 	.word	0x200002d0
 8000cf4:	200002d4 	.word	0x200002d4
 8000cf8:	200002f4 	.word	0x200002f4

08000cfc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	; 0x50
 8000d00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d06:	2228      	movs	r2, #40	; 0x28
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 fe6d 	bl	80059ea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 fb2e 	bl	80023b4 <HAL_RCC_OscConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x66>
		Error_Handler();
 8000d5e:	f000 f93f 	bl	8000fe0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d62:	230f      	movs	r3, #15
 8000d64:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d72:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fd9a 	bl	80028b8 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x92>
		Error_Handler();
 8000d8a:	f000 f929 	bl	8000fe0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d96:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 ff1a 	bl	8002bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xae>
		Error_Handler();
 8000da6:	f000 f91b 	bl	8000fe0 <Error_Handler>
	}
}
 8000daa:	bf00      	nop
 8000dac:	3750      	adds	r7, #80	; 0x50
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000dc6:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <MX_ADC1_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000dde:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000de2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000df2:	f000 fc51 	bl	8001698 <HAL_ADC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000dfc:	f000 f8f0 	bl	8000fe0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_ADC1_Init+0x74>)
 8000e12:	f000 fdc7 	bl	80019a4 <HAL_ADC_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000e1c:	f000 f8e0 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000200 	.word	0x20000200
 8000e2c:	40012400 	.word	0x40012400

08000e30 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_SPI1_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e64:	2218      	movs	r2, #24
 8000e66:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e82:	f001 ff5d 	bl	8002d40 <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000e8c:	f000 f8a8 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000230 	.word	0x20000230
 8000e98:	40013000 	.word	0x40013000

08000e9c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_USART1_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	f002 fcbc 	bl	8003850 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000ede:	f000 f87f 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000288 	.word	0x20000288
 8000eec:	40013800 	.word	0x40013800

08000ef0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_GPIO_Init+0xc0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <MX_GPIO_Init+0xc0>)
 8000f0a:	f043 0320 	orr.w	r3, r3, #32
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_GPIO_Init+0xc0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0320 	and.w	r3, r3, #32
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_GPIO_Init+0xc0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0xc0>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_GPIO_Init+0xc0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2108      	movs	r1, #8
 8000f38:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <MX_GPIO_Init+0xc4>)
 8000f3a:	f001 fa0b 	bl	8002354 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2110      	movs	r1, #16
 8000f42:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <MX_GPIO_Init+0xc4>)
 8000f44:	f001 fa06 	bl	8002354 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <MX_GPIO_Init+0xc4>)
 8000f5c:	f001 f876 	bl	800204c <HAL_GPIO_Init>

	/*Configure GPIO pin : CSN_Pin */
	GPIO_InitStruct.Pin = CSN_Pin;
 8000f60:	2308      	movs	r3, #8
 8000f62:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4619      	mov	r1, r3
 8000f76:	480f      	ldr	r0, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0xc4>)
 8000f78:	f001 f868 	bl	800204c <HAL_GPIO_Init>

	/*Configure GPIO pin : CE_Pin */
	GPIO_InitStruct.Pin = CE_Pin;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <MX_GPIO_Init+0xc4>)
 8000f94:	f001 f85a 	bl	800204c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2008      	movs	r0, #8
 8000f9e:	f000 ff6c 	bl	8001e7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fa2:	2008      	movs	r0, #8
 8000fa4:	f000 ff85 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	10210000 	.word	0x10210000

08000fbc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d102      	bne.n	8000fd2 <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_rx_flag = 1;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x20>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
	}

}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	200002d0 	.word	0x200002d0

08000fe0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_MspInit+0x5c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <HAL_MspInit+0x5c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_MspInit+0x5c>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_MspInit+0x5c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_MspInit+0x5c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_MspInit+0x5c>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_MspInit+0x60>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_MspInit+0x60>)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000

08001050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <HAL_ADC_MspInit+0x6c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d121      	bne.n	80010b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x70>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0x70>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0x70>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_ADC_MspInit+0x70>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_ADC_MspInit+0x70>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_ADC_MspInit+0x70>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010a0:	2302      	movs	r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a4:	2303      	movs	r3, #3
 80010a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_ADC_MspInit+0x74>)
 80010b0:	f000 ffcc 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40012400 	.word	0x40012400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010800 	.word	0x40010800

080010c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_SPI_MspInit+0x88>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d12f      	bne.n	8001148 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_SPI_MspInit+0x8c>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_SPI_MspInit+0x8c>)
 80010ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_SPI_MspInit+0x8c>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_SPI_MspInit+0x8c>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a13      	ldr	r2, [pc, #76]	; (8001154 <HAL_SPI_MspInit+0x8c>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_SPI_MspInit+0x8c>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001118:	23a0      	movs	r3, #160	; 0xa0
 800111a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <HAL_SPI_MspInit+0x90>)
 800112c:	f000 ff8e 	bl	800204c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001130:	2340      	movs	r3, #64	; 0x40
 8001132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <HAL_SPI_MspInit+0x90>)
 8001144:	f000 ff82 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d139      	bne.n	80011f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <HAL_UART_MspInit+0xa0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_UART_MspInit+0xa0>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_UART_MspInit+0xa0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0xa0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <HAL_UART_MspInit+0xa0>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_UART_MspInit+0xa0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <HAL_UART_MspInit+0xa4>)
 80011c2:	f000 ff43 	bl	800204c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4809      	ldr	r0, [pc, #36]	; (8001200 <HAL_UART_MspInit+0xa4>)
 80011dc:	f000 ff36 	bl	800204c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2025      	movs	r0, #37	; 0x25
 80011e6:	f000 fe48 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ea:	2025      	movs	r0, #37	; 0x25
 80011ec:	f000 fe61 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124a:	f000 f9e5 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}

08001252 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001256:	2004      	movs	r0, #4
 8001258:	f001 f894 	bl	8002384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <USART1_IRQHandler+0x14>)
 8001266:	f000 f943 	bl	80014f0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800126a:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART1_IRQHandler+0x14>)
 800126c:	f002 fbc4 	bl	80039f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000288 	.word	0x20000288

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <_kill>:

int _kill(int pid, int sig)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001290:	f004 fbfe 	bl	8005a90 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	2216      	movs	r2, #22
 8001298:	601a      	str	r2, [r3, #0]
  return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_exit>:

void _exit (int status)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ae:	f04f 31ff 	mov.w	r1, #4294967295
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffe7 	bl	8001286 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b8:	e7fe      	b.n	80012b8 <_exit+0x12>

080012ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e00a      	b.n	80012e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012cc:	f3af 8000 	nop.w
 80012d0:	4601      	mov	r1, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	60ba      	str	r2, [r7, #8]
 80012d8:	b2ca      	uxtb	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbf0      	blt.n	80012cc <_read+0x12>
  }

  return len;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e009      	b.n	800131a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	dbf1      	blt.n	8001306 <_write+0x12>
  }
  return len;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_close>:

int _close(int file)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	605a      	str	r2, [r3, #4]
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <_isatty>:

int _isatty(int file)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f004 fb68 	bl	8005a90 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20005000 	.word	0x20005000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	20000314 	.word	0x20000314
 80013f4:	20000490 	.word	0x20000490

080013f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart1;

void rxBufferInit(ring_buffer_t *uart) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	841a      	strh	r2, [r3, #32]
	uart->tail = 0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	845a      	strh	r2, [r3, #34]	; 0x22
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2204      	movs	r2, #4
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f004 fae3 	bl	80059ea <memset>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	8c1b      	ldrh	r3, [r3, #32]
 800143c:	b29b      	uxth	r3, r3
 800143e:	3301      	adds	r3, #1
 8001440:	b29b      	uxth	r3, r3
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800144c:	b29b      	uxth	r3, r3
 800144e:	89fa      	ldrh	r2, [r7, #14]
 8001450:	429a      	cmp	r2, r3
 8001452:	d009      	beq.n	8001468 <push+0x3c>
		uart->buffer[uart->head] = ch;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	8c1b      	ldrh	r3, [r3, #32]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4619      	mov	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	89fa      	ldrh	r2, [r7, #14]
 8001466:	841a      	strh	r2, [r3, #32]
	}
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <pop>:

uint8_t pop(ring_buffer_t *uart) {
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	8c1b      	ldrh	r3, [r3, #32]
 800147e:	b29a      	uxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001484:	b29b      	uxth	r3, r3
 8001486:	429a      	cmp	r2, r3
 8001488:	d101      	bne.n	800148e <pop+0x1c>
		return -1;
 800148a:	23ff      	movs	r3, #255	; 0xff
 800148c:	e011      	b.n	80014b2 <pop+0x40>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	5c9b      	ldrb	r3, [r3, r2]
 800149a:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	845a      	strh	r2, [r3, #34]	; 0x22

		return cpop;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	8c1b      	ldrh	r3, [r3, #32]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	3320      	adds	r3, #32
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	73fb      	strb	r3, [r7, #15]
			% RX_BUFFER_SIZE;
	return n;
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	2b00      	cmp	r3, #0
 8001510:	d011      	beq.n	8001536 <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00c      	beq.n	8001536 <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	4619      	mov	r1, r3
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <Uart_isr+0x4c>)
 8001530:	f7ff ff7c 	bl	800142c <push>
		return;
 8001534:	bf00      	nop
	}
}
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000318 	.word	0x20000318

08001540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001540:	f7ff ff5a 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001546:	490c      	ldr	r1, [pc, #48]	; (8001578 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <LoopFillZerobss+0x16>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800155c:	4c09      	ldr	r4, [pc, #36]	; (8001584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156a:	f004 fa97 	bl	8005a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156e:	f7ff fb33 	bl	8000bd8 <main>
  bx lr
 8001572:	4770      	bx	lr
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800157c:	080096a8 	.word	0x080096a8
  ldr r2, =_sbss
 8001580:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001584:	2000048c 	.word	0x2000048c

08001588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC1_2_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_Init+0x28>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_Init+0x28>)
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 fc61 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fd20 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40022000 	.word	0x40022000

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fc79 	bl	8001ece <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 fc41 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000010 	.word	0x20000010
 8001610:	20000018 	.word	0x20000018
 8001614:	20000014 	.word	0x20000014

08001618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x1c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_IncTick+0x20>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_IncTick+0x20>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000018 	.word	0x20000018
 8001638:	2000033c 	.word	0x2000033c

0800163c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <HAL_GetTick+0x10>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	2000033c 	.word	0x2000033c

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff fff0 	bl	800163c <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffe0 	bl	800163c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000018 	.word	0x20000018

08001698 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e0be      	b.n	8001838 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fcba 	bl	8001050 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fab3 	bl	8001c48 <ADC_ConversionStop_Disable>
 80016e2:	4603      	mov	r3, r0
 80016e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 8099 	bne.w	8001826 <HAL_ADC_Init+0x18e>
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 8095 	bne.w	8001826 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001704:	f023 0302 	bic.w	r3, r3, #2
 8001708:	f043 0202 	orr.w	r2, r3, #2
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001718:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7b1b      	ldrb	r3, [r3, #12]
 800171e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001720:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4313      	orrs	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001730:	d003      	beq.n	800173a <HAL_ADC_Init+0xa2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d102      	bne.n	8001740 <HAL_ADC_Init+0xa8>
 800173a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173e:	e000      	b.n	8001742 <HAL_ADC_Init+0xaa>
 8001740:	2300      	movs	r3, #0
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7d1b      	ldrb	r3, [r3, #20]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d119      	bne.n	8001784 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7b1b      	ldrb	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	3b01      	subs	r3, #1
 800175e:	035a      	lsls	r2, r3, #13
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	e00b      	b.n	8001784 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_ADC_Init+0x1a8>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b4:	d003      	beq.n	80017be <HAL_ADC_Init+0x126>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d104      	bne.n	80017c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	051b      	lsls	r3, r3, #20
 80017c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	430a      	orrs	r2, r1
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_ADC_Init+0x1ac>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d10b      	bne.n	8001804 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001802:	e018      	b.n	8001836 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	f023 0312 	bic.w	r3, r3, #18
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001824:	e007      	b.n	8001836 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	f043 0210 	orr.w	r2, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001836:	7dfb      	ldrb	r3, [r7, #23]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	ffe1f7fd 	.word	0xffe1f7fd
 8001844:	ff1f0efe 	.word	0xff1f0efe

08001848 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Start+0x1a>
 800185e:	2302      	movs	r3, #2
 8001860:	e098      	b.n	8001994 <HAL_ADC_Start+0x14c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f992 	bl	8001b94 <ADC_Enable>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 8087 	bne.w	800198a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a41      	ldr	r2, [pc, #260]	; (800199c <HAL_ADC_Start+0x154>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d105      	bne.n	80018a6 <HAL_ADC_Start+0x5e>
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_ADC_Start+0x158>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d115      	bne.n	80018d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d026      	beq.n	800190e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018d0:	e01d      	b.n	800190e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <HAL_ADC_Start+0x158>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d004      	beq.n	80018f2 <HAL_ADC_Start+0xaa>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a2b      	ldr	r2, [pc, #172]	; (800199c <HAL_ADC_Start+0x154>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10d      	bne.n	800190e <HAL_ADC_Start+0xc6>
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_ADC_Start+0x158>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001906:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f023 0206 	bic.w	r2, r3, #6
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
 8001926:	e002      	b.n	800192e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f06f 0202 	mvn.w	r2, #2
 800193e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800194a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800194e:	d113      	bne.n	8001978 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_ADC_Start+0x154>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d105      	bne.n	8001966 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_ADC_Start+0x158>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001962:	2b00      	cmp	r3, #0
 8001964:	d108      	bne.n	8001978 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	e00c      	b.n	8001992 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	e003      	b.n	8001992 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40012800 	.word	0x40012800
 80019a0:	40012400 	.word	0x40012400

080019a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x20>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e0dc      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x1da>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d81c      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	3b05      	subs	r3, #5
 80019e6:	221f      	movs	r2, #31
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b05      	subs	r3, #5
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0c:	e03c      	b.n	8001a88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d81c      	bhi.n	8001a50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	3b23      	subs	r3, #35	; 0x23
 8001a28:	221f      	movs	r2, #31
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	4019      	ands	r1, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b23      	subs	r3, #35	; 0x23
 8001a42:	fa00 f203 	lsl.w	r2, r0, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a4e:	e01b      	b.n	8001a88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b41      	subs	r3, #65	; 0x41
 8001a62:	221f      	movs	r2, #31
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4019      	ands	r1, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b41      	subs	r3, #65	; 0x41
 8001a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d91c      	bls.n	8001aca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68d9      	ldr	r1, [r3, #12]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b1e      	subs	r3, #30
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4019      	ands	r1, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6898      	ldr	r0, [r3, #8]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b1e      	subs	r3, #30
 8001abc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	e019      	b.n	8001afe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6919      	ldr	r1, [r3, #16]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	2207      	movs	r2, #7
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4019      	ands	r1, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6898      	ldr	r0, [r3, #8]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	fa00 f203 	lsl.w	r2, r0, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d003      	beq.n	8001b0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b0a:	2b11      	cmp	r3, #17
 8001b0c:	d132      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d125      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d126      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d11a      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_ADC_ConfigChannel+0x1e8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	0c9a      	lsrs	r2, r3, #18
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b54:	e002      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f9      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x1b2>
 8001b62:	e007      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	f043 0220 	orr.w	r2, r3, #32
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	40012400 	.word	0x40012400
 8001b8c:	20000010 	.word	0x20000010
 8001b90:	431bde83 	.word	0x431bde83

08001b94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d040      	beq.n	8001c34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <ADC_Enable+0xac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <ADC_Enable+0xb0>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9b      	lsrs	r3, r3, #18
 8001bce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bd0:	e002      	b.n	8001bd8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f9      	bne.n	8001bd2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bde:	f7ff fd2d 	bl	800163c <HAL_GetTick>
 8001be2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001be4:	e01f      	b.n	8001c26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001be6:	f7ff fd29 	bl	800163c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d918      	bls.n	8001c26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d011      	beq.n	8001c26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	f043 0210 	orr.w	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e007      	b.n	8001c36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d1d8      	bne.n	8001be6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000010 	.word	0x20000010
 8001c44:	431bde83 	.word	0x431bde83

08001c48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d12e      	bne.n	8001cc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c72:	f7ff fce3 	bl	800163c <HAL_GetTick>
 8001c76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c78:	e01b      	b.n	8001cb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c7a:	f7ff fcdf 	bl	800163c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d914      	bls.n	8001cb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10d      	bne.n	8001cb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f043 0210 	orr.w	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e007      	b.n	8001cc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d0dc      	beq.n	8001c7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <__NVIC_EnableIRQ+0x34>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	; (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	; (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff90 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff2d 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff42 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff90 	bl	8001dbc <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5f 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff35 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffa2 	bl	8001e20 <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d008      	beq.n	8001f10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2204      	movs	r2, #4
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e020      	b.n	8001f52 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 020e 	bic.w	r2, r2, #14
 8001f1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d005      	beq.n	8001f80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2204      	movs	r2, #4
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	e051      	b.n	8002024 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 020e 	bic.w	r2, r2, #14
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	; (8002030 <HAL_DMA_Abort_IT+0xd4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d029      	beq.n	8001ffe <HAL_DMA_Abort_IT+0xa2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a21      	ldr	r2, [pc, #132]	; (8002034 <HAL_DMA_Abort_IT+0xd8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x9e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_DMA_Abort_IT+0xdc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01a      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x98>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_DMA_Abort_IT+0xe0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d012      	beq.n	8001fee <HAL_DMA_Abort_IT+0x92>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_DMA_Abort_IT+0xe4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x8c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_DMA_Abort_IT+0xe8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d102      	bne.n	8001fe2 <HAL_DMA_Abort_IT+0x86>
 8001fdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fe0:	e00e      	b.n	8002000 <HAL_DMA_Abort_IT+0xa4>
 8001fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe6:	e00b      	b.n	8002000 <HAL_DMA_Abort_IT+0xa4>
 8001fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fec:	e008      	b.n	8002000 <HAL_DMA_Abort_IT+0xa4>
 8001fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff2:	e005      	b.n	8002000 <HAL_DMA_Abort_IT+0xa4>
 8001ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff8:	e002      	b.n	8002000 <HAL_DMA_Abort_IT+0xa4>
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	e000      	b.n	8002000 <HAL_DMA_Abort_IT+0xa4>
 8001ffe:	2301      	movs	r3, #1
 8002000:	4a11      	ldr	r2, [pc, #68]	; (8002048 <HAL_DMA_Abort_IT+0xec>)
 8002002:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
    } 
  }
  return status;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020008 	.word	0x40020008
 8002034:	4002001c 	.word	0x4002001c
 8002038:	40020030 	.word	0x40020030
 800203c:	40020044 	.word	0x40020044
 8002040:	40020058 	.word	0x40020058
 8002044:	4002006c 	.word	0x4002006c
 8002048:	40020000 	.word	0x40020000

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	; 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e169      	b.n	8002334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002060:	2201      	movs	r2, #1
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8158 	bne.w	800232e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a9a      	ldr	r2, [pc, #616]	; (80022ec <HAL_GPIO_Init+0x2a0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d05e      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 8002088:	4a98      	ldr	r2, [pc, #608]	; (80022ec <HAL_GPIO_Init+0x2a0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d875      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 800208e:	4a98      	ldr	r2, [pc, #608]	; (80022f0 <HAL_GPIO_Init+0x2a4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d058      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 8002094:	4a96      	ldr	r2, [pc, #600]	; (80022f0 <HAL_GPIO_Init+0x2a4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d86f      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 800209a:	4a96      	ldr	r2, [pc, #600]	; (80022f4 <HAL_GPIO_Init+0x2a8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d052      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020a0:	4a94      	ldr	r2, [pc, #592]	; (80022f4 <HAL_GPIO_Init+0x2a8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d869      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020a6:	4a94      	ldr	r2, [pc, #592]	; (80022f8 <HAL_GPIO_Init+0x2ac>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d04c      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020ac:	4a92      	ldr	r2, [pc, #584]	; (80022f8 <HAL_GPIO_Init+0x2ac>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d863      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020b2:	4a92      	ldr	r2, [pc, #584]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d046      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020b8:	4a90      	ldr	r2, [pc, #576]	; (80022fc <HAL_GPIO_Init+0x2b0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d85d      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d82a      	bhi.n	8002118 <HAL_GPIO_Init+0xcc>
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d859      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <HAL_GPIO_Init+0x80>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	08002147 	.word	0x08002147
 80020d0:	08002121 	.word	0x08002121
 80020d4:	08002133 	.word	0x08002133
 80020d8:	08002175 	.word	0x08002175
 80020dc:	0800217b 	.word	0x0800217b
 80020e0:	0800217b 	.word	0x0800217b
 80020e4:	0800217b 	.word	0x0800217b
 80020e8:	0800217b 	.word	0x0800217b
 80020ec:	0800217b 	.word	0x0800217b
 80020f0:	0800217b 	.word	0x0800217b
 80020f4:	0800217b 	.word	0x0800217b
 80020f8:	0800217b 	.word	0x0800217b
 80020fc:	0800217b 	.word	0x0800217b
 8002100:	0800217b 	.word	0x0800217b
 8002104:	0800217b 	.word	0x0800217b
 8002108:	0800217b 	.word	0x0800217b
 800210c:	0800217b 	.word	0x0800217b
 8002110:	08002129 	.word	0x08002129
 8002114:	0800213d 	.word	0x0800213d
 8002118:	4a79      	ldr	r2, [pc, #484]	; (8002300 <HAL_GPIO_Init+0x2b4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800211e:	e02c      	b.n	800217a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e029      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	3304      	adds	r3, #4
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e024      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	3308      	adds	r3, #8
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e01f      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	330c      	adds	r3, #12
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e01a      	b.n	800217c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800214e:	2304      	movs	r3, #4
 8002150:	623b      	str	r3, [r7, #32]
          break;
 8002152:	e013      	b.n	800217c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800215c:	2308      	movs	r3, #8
 800215e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	611a      	str	r2, [r3, #16]
          break;
 8002166:	e009      	b.n	800217c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	615a      	str	r2, [r3, #20]
          break;
 8002172:	e003      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
          break;
 8002178:	e000      	b.n	800217c <HAL_GPIO_Init+0x130>
          break;
 800217a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d801      	bhi.n	8002186 <HAL_GPIO_Init+0x13a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	e001      	b.n	800218a <HAL_GPIO_Init+0x13e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d802      	bhi.n	8002198 <HAL_GPIO_Init+0x14c>
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x152>
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	3b08      	subs	r3, #8
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	210f      	movs	r1, #15
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	431a      	orrs	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80b1 	beq.w	800232e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021cc:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <HAL_GPIO_Init+0x2b8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a4c      	ldr	r2, [pc, #304]	; (8002304 <HAL_GPIO_Init+0x2b8>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <HAL_GPIO_Init+0x2b8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e4:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_GPIO_Init+0x2bc>)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a40      	ldr	r2, [pc, #256]	; (800230c <HAL_GPIO_Init+0x2c0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <HAL_GPIO_Init+0x1ec>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3f      	ldr	r2, [pc, #252]	; (8002310 <HAL_GPIO_Init+0x2c4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00d      	beq.n	8002234 <HAL_GPIO_Init+0x1e8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3e      	ldr	r2, [pc, #248]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d007      	beq.n	8002230 <HAL_GPIO_Init+0x1e4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3d      	ldr	r2, [pc, #244]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d101      	bne.n	800222c <HAL_GPIO_Init+0x1e0>
 8002228:	2303      	movs	r3, #3
 800222a:	e006      	b.n	800223a <HAL_GPIO_Init+0x1ee>
 800222c:	2304      	movs	r3, #4
 800222e:	e004      	b.n	800223a <HAL_GPIO_Init+0x1ee>
 8002230:	2302      	movs	r3, #2
 8002232:	e002      	b.n	800223a <HAL_GPIO_Init+0x1ee>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_GPIO_Init+0x1ee>
 8002238:	2300      	movs	r3, #0
 800223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223c:	f002 0203 	and.w	r2, r2, #3
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	4093      	lsls	r3, r2
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800224a:	492f      	ldr	r1, [pc, #188]	; (8002308 <HAL_GPIO_Init+0x2bc>)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d006      	beq.n	8002272 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_GPIO_Init+0x2d0>)
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	492c      	ldr	r1, [pc, #176]	; (800231c <HAL_GPIO_Init+0x2d0>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
 8002270:	e006      	b.n	8002280 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_GPIO_Init+0x2d0>)
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	43db      	mvns	r3, r3
 800227a:	4928      	ldr	r1, [pc, #160]	; (800231c <HAL_GPIO_Init+0x2d0>)
 800227c:	4013      	ands	r3, r2
 800227e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_GPIO_Init+0x2d0>)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4922      	ldr	r1, [pc, #136]	; (800231c <HAL_GPIO_Init+0x2d0>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_GPIO_Init+0x2d0>)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	491e      	ldr	r1, [pc, #120]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4918      	ldr	r1, [pc, #96]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	4914      	ldr	r1, [pc, #80]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d021      	beq.n	8002320 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	490e      	ldr	r1, [pc, #56]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
 80022e8:	e021      	b.n	800232e <HAL_GPIO_Init+0x2e2>
 80022ea:	bf00      	nop
 80022ec:	10320000 	.word	0x10320000
 80022f0:	10310000 	.word	0x10310000
 80022f4:	10220000 	.word	0x10220000
 80022f8:	10210000 	.word	0x10210000
 80022fc:	10120000 	.word	0x10120000
 8002300:	10110000 	.word	0x10110000
 8002304:	40021000 	.word	0x40021000
 8002308:	40010000 	.word	0x40010000
 800230c:	40010800 	.word	0x40010800
 8002310:	40010c00 	.word	0x40010c00
 8002314:	40011000 	.word	0x40011000
 8002318:	40011400 	.word	0x40011400
 800231c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_GPIO_Init+0x304>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	43db      	mvns	r3, r3
 8002328:	4909      	ldr	r1, [pc, #36]	; (8002350 <HAL_GPIO_Init+0x304>)
 800232a:	4013      	ands	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	3301      	adds	r3, #1
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	f47f ae8e 	bne.w	8002060 <HAL_GPIO_Init+0x14>
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	372c      	adds	r7, #44	; 0x2c
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002364:	787b      	ldrb	r3, [r7, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002370:	e003      	b.n	800237a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	041a      	lsls	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fe0a 	bl	8000fbc <HAL_GPIO_EXTI_Callback>
  }
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40010400 	.word	0x40010400

080023b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e272      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8087 	beq.w	80024e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d4:	4b92      	ldr	r3, [pc, #584]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d00c      	beq.n	80023fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e0:	4b8f      	ldr	r3, [pc, #572]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d112      	bne.n	8002412 <HAL_RCC_OscConfig+0x5e>
 80023ec:	4b8c      	ldr	r3, [pc, #560]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d10b      	bne.n	8002412 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fa:	4b89      	ldr	r3, [pc, #548]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d06c      	beq.n	80024e0 <HAL_RCC_OscConfig+0x12c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d168      	bne.n	80024e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e24c      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x76>
 800241c:	4b80      	ldr	r3, [pc, #512]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a7f      	ldr	r2, [pc, #508]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e02e      	b.n	8002488 <HAL_RCC_OscConfig+0xd4>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x98>
 8002432:	4b7b      	ldr	r3, [pc, #492]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7a      	ldr	r2, [pc, #488]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b78      	ldr	r3, [pc, #480]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a77      	ldr	r2, [pc, #476]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xd4>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0xbc>
 8002456:	4b72      	ldr	r3, [pc, #456]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a71      	ldr	r2, [pc, #452]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6e      	ldr	r2, [pc, #440]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xd4>
 8002470:	4b6b      	ldr	r3, [pc, #428]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6a      	ldr	r2, [pc, #424]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b68      	ldr	r3, [pc, #416]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a67      	ldr	r2, [pc, #412]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff f8d4 	bl	800163c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff f8d0 	bl	800163c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e200      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xe4>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff f8c0 	bl	800163c <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f8bc 	bl	800163c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e1ec      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x10c>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d063      	beq.n	80025b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ee:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024fa:	4b49      	ldr	r3, [pc, #292]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b08      	cmp	r3, #8
 8002504:	d11c      	bne.n	8002540 <HAL_RCC_OscConfig+0x18c>
 8002506:	4b46      	ldr	r3, [pc, #280]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d116      	bne.n	8002540 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_RCC_OscConfig+0x176>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e1c0      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4939      	ldr	r1, [pc, #228]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	e03a      	b.n	80025b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002548:	4b36      	ldr	r3, [pc, #216]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff f875 	bl	800163c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002556:	f7ff f871 	bl	800163c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1a1      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4927      	ldr	r1, [pc, #156]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <HAL_RCC_OscConfig+0x270>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff f854 	bl	800163c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002598:	f7ff f850 	bl	800163c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e180      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d03a      	beq.n	8002638 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d019      	beq.n	80025fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_RCC_OscConfig+0x274>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7ff f834 	bl	800163c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d8:	f7ff f830 	bl	800163c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e160      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f000 face 	bl	8002b98 <RCC_Delay>
 80025fc:	e01c      	b.n	8002638 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_RCC_OscConfig+0x274>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002604:	f7ff f81a 	bl	800163c <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260a:	e00f      	b.n	800262c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260c:	f7ff f816 	bl	800163c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d908      	bls.n	800262c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e146      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	42420000 	.word	0x42420000
 8002628:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b92      	ldr	r3, [pc, #584]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e9      	bne.n	800260c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a6 	beq.w	8002792 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4a87      	ldr	r2, [pc, #540]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002660:	61d3      	str	r3, [r2, #28]
 8002662:	4b85      	ldr	r3, [pc, #532]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266e:	2301      	movs	r3, #1
 8002670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b82      	ldr	r3, [pc, #520]	; (800287c <HAL_RCC_OscConfig+0x4c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d118      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267e:	4b7f      	ldr	r3, [pc, #508]	; (800287c <HAL_RCC_OscConfig+0x4c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7e      	ldr	r2, [pc, #504]	; (800287c <HAL_RCC_OscConfig+0x4c8>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268a:	f7fe ffd7 	bl	800163c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002692:	f7fe ffd3 	bl	800163c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b64      	cmp	r3, #100	; 0x64
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e103      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	4b75      	ldr	r3, [pc, #468]	; (800287c <HAL_RCC_OscConfig+0x4c8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x312>
 80026b8:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a6e      	ldr	r2, [pc, #440]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6213      	str	r3, [r2, #32]
 80026c4:	e02d      	b.n	8002722 <HAL_RCC_OscConfig+0x36e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x334>
 80026ce:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a69      	ldr	r2, [pc, #420]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6213      	str	r3, [r2, #32]
 80026da:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4a66      	ldr	r2, [pc, #408]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f023 0304 	bic.w	r3, r3, #4
 80026e4:	6213      	str	r3, [r2, #32]
 80026e6:	e01c      	b.n	8002722 <HAL_RCC_OscConfig+0x36e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d10c      	bne.n	800270a <HAL_RCC_OscConfig+0x356>
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4a60      	ldr	r2, [pc, #384]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4a5d      	ldr	r2, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6213      	str	r3, [r2, #32]
 8002708:	e00b      	b.n	8002722 <HAL_RCC_OscConfig+0x36e>
 800270a:	4b5b      	ldr	r3, [pc, #364]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a5a      	ldr	r2, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	4b58      	ldr	r3, [pc, #352]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a57      	ldr	r2, [pc, #348]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d015      	beq.n	8002756 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272a:	f7fe ff87 	bl	800163c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe ff83 	bl	800163c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0b1      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002748:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ee      	beq.n	8002732 <HAL_RCC_OscConfig+0x37e>
 8002754:	e014      	b.n	8002780 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7fe ff71 	bl	800163c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7fe ff6d 	bl	800163c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e09b      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	4b40      	ldr	r3, [pc, #256]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ee      	bne.n	800275e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d105      	bne.n	8002792 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002786:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a3b      	ldr	r2, [pc, #236]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002790:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8087 	beq.w	80028aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d061      	beq.n	800286c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d146      	bne.n	800283e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b0:	4b33      	ldr	r3, [pc, #204]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fe ff41 	bl	800163c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe ff3d 	bl	800163c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e06d      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d0:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e4:	d108      	bne.n	80027f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4921      	ldr	r1, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a19      	ldr	r1, [r3, #32]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	430b      	orrs	r3, r1
 800280a:	491b      	ldr	r1, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe ff11 	bl	800163c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe ff0d 	bl	800163c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e03d      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x46a>
 800283c:	e035      	b.n	80028aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fefa 	bl	800163c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe fef6 	bl	800163c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e026      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x498>
 800286a:	e01e      	b.n	80028aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d107      	bne.n	8002884 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e019      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
 8002880:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x500>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	429a      	cmp	r2, r3
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0d0      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d910      	bls.n	80028fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0207 	bic.w	r2, r3, #7
 80028e2:	4965      	ldr	r1, [pc, #404]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800291e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002936:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	494d      	ldr	r1, [pc, #308]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d040      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d115      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e073      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002986:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06b      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002996:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f023 0203 	bic.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4936      	ldr	r1, [pc, #216]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fe48 	bl	800163c <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b0:	f7fe fe44 	bl	800163c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e053      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 020c 	and.w	r2, r3, #12
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1eb      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d210      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4922      	ldr	r1, [pc, #136]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4916      	ldr	r1, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a46:	f000 f821 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1cc>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1d0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fda6 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08009248 	.word	0x08009248
 8002a84:	20000010 	.word	0x20000010
 8002a88:	20000014 	.word	0x20000014

08002a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d002      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x30>
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aba:	e027      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002abe:	613b      	str	r3, [r7, #16]
      break;
 8002ac0:	e027      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	0c9b      	lsrs	r3, r3, #18
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002acc:	5cd3      	ldrb	r3, [r2, r3]
 8002ace:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d010      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	0c5b      	lsrs	r3, r3, #17
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ae6:	5cd3      	ldrb	r3, [r2, r3]
 8002ae8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aee:	fb03 f202 	mul.w	r2, r3, r2
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e004      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	613b      	str	r3, [r7, #16]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b0e:	613b      	str	r3, [r7, #16]
      break;
 8002b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b12:	693b      	ldr	r3, [r7, #16]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	007a1200 	.word	0x007a1200
 8002b28:	08009260 	.word	0x08009260
 8002b2c:	08009270 	.word	0x08009270
 8002b30:	003d0900 	.word	0x003d0900

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	20000010 	.word	0x20000010

08002b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b4c:	f7ff fff2 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4903      	ldr	r1, [pc, #12]	; (8002b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08009258 	.word	0x08009258

08002b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b74:	f7ff ffde 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0adb      	lsrs	r3, r3, #11
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	4903      	ldr	r1, [pc, #12]	; (8002b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08009258 	.word	0x08009258

08002b98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <RCC_Delay+0x34>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <RCC_Delay+0x38>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0a5b      	lsrs	r3, r3, #9
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb4:	bf00      	nop
  }
  while (Delay --);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	60fa      	str	r2, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f9      	bne.n	8002bb4 <RCC_Delay+0x1c>
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	20000010 	.word	0x20000010
 8002bd0:	10624dd3 	.word	0x10624dd3

08002bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d07d      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf4:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	4a4b      	ldr	r2, [pc, #300]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	61d3      	str	r3, [r2, #28]
 8002c0c:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d118      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c28:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a42      	ldr	r2, [pc, #264]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c34:	f7fe fd02 	bl	800163c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	e008      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fe fcfe 	bl	800163c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e06d      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c5a:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02e      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d027      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c78:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c88:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c8e:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d014      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fccd 	bl	800163c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe fcc9 	bl	800163c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e036      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ee      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4917      	ldr	r1, [pc, #92]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	490b      	ldr	r1, [pc, #44]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4904      	ldr	r1, [pc, #16]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	42420440 	.word	0x42420440

08002d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e076      	b.n	8002e40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d62:	d009      	beq.n	8002d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
 8002d6a:	e005      	b.n	8002d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe f998 	bl	80010c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	ea42 0103 	orr.w	r1, r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	0c1a      	lsrs	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f002 0204 	and.w	r2, r2, #4
 8002e1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_SPI_Transmit+0x22>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e12d      	b.n	80030c6 <HAL_SPI_Transmit+0x27e>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e72:	f7fe fbe3 	bl	800163c <HAL_GetTick>
 8002e76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e8c:	e116      	b.n	80030bc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0x52>
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e9e:	e10d      	b.n	80030bc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee6:	d10f      	bne.n	8002f08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f2e:	d14f      	bne.n	8002fd0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_SPI_Transmit+0xf6>
 8002f38:	8afb      	ldrh	r3, [r7, #22]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d142      	bne.n	8002fc4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	1c9a      	adds	r2, r3, #2
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f62:	e02f      	b.n	8002fc4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d112      	bne.n	8002f98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	881a      	ldrh	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	1c9a      	adds	r2, r3, #2
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f96:	e015      	b.n	8002fc4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f98:	f7fe fb50 	bl	800163c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d803      	bhi.n	8002fb0 <HAL_SPI_Transmit+0x168>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Transmit+0x16e>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002fc2:	e07b      	b.n	80030bc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ca      	bne.n	8002f64 <HAL_SPI_Transmit+0x11c>
 8002fce:	e050      	b.n	8003072 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_SPI_Transmit+0x196>
 8002fd8:	8afb      	ldrh	r3, [r7, #22]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d144      	bne.n	8003068 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003004:	e030      	b.n	8003068 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b02      	cmp	r3, #2
 8003012:	d113      	bne.n	800303c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	86da      	strh	r2, [r3, #54]	; 0x36
 800303a:	e015      	b.n	8003068 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303c:	f7fe fafe 	bl	800163c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d803      	bhi.n	8003054 <HAL_SPI_Transmit+0x20c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d102      	bne.n	800305a <HAL_SPI_Transmit+0x212>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003066:	e029      	b.n	80030bc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1c9      	bne.n	8003006 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	6839      	ldr	r1, [r7, #0]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fbcc 	bl	8003814 <SPI_EndRxTxTransaction>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e003      	b.n	80030bc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b088      	sub	sp, #32
 80030d2:	af02      	add	r7, sp, #8
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d002      	beq.n	80030f4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
 80030f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030f2:	e0fb      	b.n	80032ec <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030fc:	d112      	bne.n	8003124 <HAL_SPI_Receive+0x56>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2204      	movs	r2, #4
 800310a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8ef 	bl	80032fe <HAL_SPI_TransmitReceive>
 8003120:	4603      	mov	r3, r0
 8003122:	e0e8      	b.n	80032f6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_SPI_Receive+0x64>
 800312e:	2302      	movs	r3, #2
 8003130:	e0e1      	b.n	80032f6 <HAL_SPI_Receive+0x228>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800313a:	f7fe fa7f 	bl	800163c <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_Receive+0x7e>
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003150:	e0cc      	b.n	80032ec <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2204      	movs	r2, #4
 8003156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	88fa      	ldrh	r2, [r7, #6]
 800316a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003198:	d10f      	bne.n	80031ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d007      	beq.n	80031d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d16a      	bne.n	80032b6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031e0:	e032      	b.n	8003248 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d115      	bne.n	800321c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f103 020c 	add.w	r2, r3, #12
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800321a:	e015      	b.n	8003248 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800321c:	f7fe fa0e 	bl	800163c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d803      	bhi.n	8003234 <HAL_SPI_Receive+0x166>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d102      	bne.n	800323a <HAL_SPI_Receive+0x16c>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003246:	e051      	b.n	80032ec <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1c7      	bne.n	80031e2 <HAL_SPI_Receive+0x114>
 8003252:	e035      	b.n	80032c0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d113      	bne.n	800328a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	b292      	uxth	r2, r2
 800326e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	1c9a      	adds	r2, r3, #2
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003288:	e015      	b.n	80032b6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800328a:	f7fe f9d7 	bl	800163c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d803      	bhi.n	80032a2 <HAL_SPI_Receive+0x1d4>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_Receive+0x1da>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80032b4:	e01a      	b.n	80032ec <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1c9      	bne.n	8003254 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fa53 	bl	8003770 <SPI_EndRxTransaction>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
 80032e2:	e003      	b.n	80032ec <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b08c      	sub	sp, #48	; 0x30
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800330c:	2301      	movs	r3, #1
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x26>
 8003320:	2302      	movs	r3, #2
 8003322:	e198      	b.n	8003656 <HAL_SPI_TransmitReceive+0x358>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800332c:	f7fe f986 	bl	800163c <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800334a:	2b01      	cmp	r3, #1
 800334c:	d00f      	beq.n	800336e <HAL_SPI_TransmitReceive+0x70>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003354:	d107      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x68>
 800335e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003362:	2b04      	cmp	r3, #4
 8003364:	d003      	beq.n	800336e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800336c:	e16d      	b.n	800364a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x82>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x82>
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003386:	e160      	b.n	800364a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b04      	cmp	r3, #4
 8003392:	d003      	beq.n	800339c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2205      	movs	r2, #5
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	887a      	ldrh	r2, [r7, #2]
 80033b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	887a      	ldrh	r2, [r7, #2]
 80033be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	d007      	beq.n	80033f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f8:	d17c      	bne.n	80034f4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_SPI_TransmitReceive+0x10a>
 8003402:	8b7b      	ldrh	r3, [r7, #26]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d16a      	bne.n	80034de <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800342c:	e057      	b.n	80034de <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b02      	cmp	r3, #2
 800343a:	d11b      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x176>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x176>
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d113      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d119      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x1b8>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d014      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	b292      	uxth	r2, r2
 8003498:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	1c9a      	adds	r2, r3, #2
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034b2:	2301      	movs	r3, #1
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034b6:	f7fe f8c1 	bl	800163c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d80b      	bhi.n	80034de <HAL_SPI_TransmitReceive+0x1e0>
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d007      	beq.n	80034de <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80034dc:	e0b5      	b.n	800364a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1a2      	bne.n	800342e <HAL_SPI_TransmitReceive+0x130>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d19d      	bne.n	800342e <HAL_SPI_TransmitReceive+0x130>
 80034f2:	e080      	b.n	80035f6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_SPI_TransmitReceive+0x204>
 80034fc:	8b7b      	ldrh	r3, [r7, #26]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d16f      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	330c      	adds	r3, #12
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003528:	e05b      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b02      	cmp	r3, #2
 8003536:	d11c      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x274>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d017      	beq.n	8003572 <HAL_SPI_TransmitReceive+0x274>
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d114      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d119      	bne.n	80035b4 <HAL_SPI_TransmitReceive+0x2b6>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d014      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035b0:	2301      	movs	r3, #1
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035b4:	f7fe f842 	bl	800163c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d803      	bhi.n	80035cc <HAL_SPI_TransmitReceive+0x2ce>
 80035c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x2d4>
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80035e0:	e033      	b.n	800364a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d19e      	bne.n	800352a <HAL_SPI_TransmitReceive+0x22c>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d199      	bne.n	800352a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f90a 	bl	8003814 <SPI_EndRxTxTransaction>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003612:	e01a      	b.n	800364a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003640:	e003      	b.n	800364a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003656:	4618      	mov	r0, r3
 8003658:	3730      	adds	r7, #48	; 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003670:	f7fd ffe4 	bl	800163c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	4413      	add	r3, r2
 800367e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003680:	f7fd ffdc 	bl	800163c <HAL_GetTick>
 8003684:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003686:	4b39      	ldr	r3, [pc, #228]	; (800376c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	015b      	lsls	r3, r3, #5
 800368c:	0d1b      	lsrs	r3, r3, #20
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003696:	e054      	b.n	8003742 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d050      	beq.n	8003742 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036a0:	f7fd ffcc 	bl	800163c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d902      	bls.n	80036b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d13d      	bne.n	8003732 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ce:	d111      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d8:	d004      	beq.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e2:	d107      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fc:	d10f      	bne.n	800371e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e017      	b.n	8003762 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3b01      	subs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d19b      	bne.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000010 	.word	0x20000010

08003770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003784:	d111      	bne.n	80037aa <SPI_EndRxTransaction+0x3a>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378e:	d004      	beq.n	800379a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003798:	d107      	bne.n	80037aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b2:	d117      	bne.n	80037e4 <SPI_EndRxTransaction+0x74>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037bc:	d112      	bne.n	80037e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2101      	movs	r1, #1
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ff49 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01a      	beq.n	800380a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e013      	b.n	800380c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff ff36 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e000      	b.n	800380c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff ff18 	bl	8003660 <SPI_WaitFlagStateUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e000      	b.n	8003848 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e042      	b.n	80038e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd fc70 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	; 0x24
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fd71 	bl	800437c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	d16d      	bne.n	80039ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Transmit+0x2c>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e066      	b.n	80039ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fd fe85 	bl	800163c <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d108      	bne.n	800395c <HAL_UART_Transmit+0x6c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e003      	b.n	8003964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003964:	e02a      	b.n	80039bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 faf9 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e036      	b.n	80039ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	3302      	adds	r3, #2
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e007      	b.n	80039ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3301      	adds	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1cf      	bne.n	8003966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2140      	movs	r1, #64	; 0x40
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fac9 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b0ba      	sub	sp, #232	; 0xe8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_UART_IRQHandler+0x66>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fbd1 	bl	80041fe <UART_Receive_IT>
      return;
 8003a5c:	e25b      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80de 	beq.w	8003c24 <HAL_UART_IRQHandler+0x22c>
 8003a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80d1 	beq.w	8003c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xae>
 8003a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_UART_IRQHandler+0xd2>
 8003ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f043 0202 	orr.w	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_UART_IRQHandler+0xf6>
 8003ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f043 0204 	orr.w	r2, r3, #4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d011      	beq.n	8003b1e <HAL_UART_IRQHandler+0x126>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f043 0208 	orr.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 81f2 	beq.w	8003f0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_UART_IRQHandler+0x14e>
 8003b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fb5c 	bl	80041fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <HAL_UART_IRQHandler+0x17a>
 8003b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d04f      	beq.n	8003c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa66 	bl	8004044 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d041      	beq.n	8003c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3314      	adds	r3, #20
 8003b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1d9      	bne.n	8003b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d013      	beq.n	8003c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	4a7e      	ldr	r2, [pc, #504]	; (8003dd8 <HAL_UART_IRQHandler+0x3e0>)
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe f9b8 	bl	8001f5c <HAL_DMA_Abort_IT>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	e00e      	b.n	8003c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f99c 	bl	8003f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e00a      	b.n	8003c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f998 	bl	8003f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c10:	e006      	b.n	8003c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f994 	bl	8003f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c1e:	e175      	b.n	8003f0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	bf00      	nop
    return;
 8003c22:	e173      	b.n	8003f0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	f040 814f 	bne.w	8003ecc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8148 	beq.w	8003ecc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8141 	beq.w	8003ecc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80b6 	beq.w	8003ddc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8145 	beq.w	8003f10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	f080 813e 	bcs.w	8003f10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	f000 8088 	beq.w	8003db8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cd4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ce0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1d9      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d18:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e1      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d54:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e3      	bne.n	8003d30 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d88:	f023 0310 	bic.w	r3, r3, #16
 8003d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e3      	bne.n	8003d76 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe f897 	bl	8001ee6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f8bf 	bl	8003f52 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dd4:	e09c      	b.n	8003f10 <HAL_UART_IRQHandler+0x518>
 8003dd6:	bf00      	nop
 8003dd8:	08004109 	.word	0x08004109
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 808e 	beq.w	8003f14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8089 	beq.w	8003f14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e26:	647a      	str	r2, [r7, #68]	; 0x44
 8003e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e3      	bne.n	8003e02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	623b      	str	r3, [r7, #32]
   return(result);
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e5e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e3      	bne.n	8003e3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ea4:	61fa      	str	r2, [r7, #28]
 8003ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e3      	bne.n	8003e80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f844 	bl	8003f52 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eca:	e023      	b.n	8003f14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <HAL_UART_IRQHandler+0x4f4>
 8003ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f923 	bl	8004130 <UART_Transmit_IT>
    return;
 8003eea:	e014      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <HAL_UART_IRQHandler+0x51e>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f962 	bl	80041ce <UART_EndTransmit_IT>
    return;
 8003f0a:	e004      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f0c:	bf00      	nop
 8003f0e:	e002      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f14:	bf00      	nop
  }
}
 8003f16:	37e8      	adds	r7, #232	; 0xe8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b090      	sub	sp, #64	; 0x40
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f78:	e050      	b.n	800401c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d04c      	beq.n	800401c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f88:	f7fd fb58 	bl	800163c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d241      	bcs.n	800401c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fb8:	637a      	str	r2, [r7, #52]	; 0x34
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e5      	bne.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	613b      	str	r3, [r7, #16]
   return(result);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fec:	623a      	str	r2, [r7, #32]
 8003fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	69f9      	ldr	r1, [r7, #28]
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e00f      	b.n	800403c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4013      	ands	r3, r2
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	429a      	cmp	r2, r3
 8004038:	d09f      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3740      	adds	r7, #64	; 0x40
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b095      	sub	sp, #84	; 0x54
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800406c:	643a      	str	r2, [r7, #64]	; 0x40
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	64bb      	str	r3, [r7, #72]	; 0x48
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e5      	bne.n	8004080 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d119      	bne.n	80040f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f023 0310 	bic.w	r3, r3, #16
 80040d2:	647b      	str	r3, [r7, #68]	; 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040dc:	61ba      	str	r2, [r7, #24]
 80040de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040fe:	bf00      	nop
 8004100:	3754      	adds	r7, #84	; 0x54
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff ff0c 	bl	8003f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b21      	cmp	r3, #33	; 0x21
 8004142:	d13e      	bne.n	80041c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d114      	bne.n	8004178 <UART_Transmit_IT+0x48>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d110      	bne.n	8004178 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	1c9a      	adds	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]
 8004176:	e008      	b.n	800418a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	1c59      	adds	r1, r3, #1
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6211      	str	r1, [r2, #32]
 8004182:	781a      	ldrb	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29b      	uxth	r3, r3
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4619      	mov	r1, r3
 8004198:	84d1      	strh	r1, [r2, #38]	; 0x26
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e000      	b.n	80041c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
  }
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fe94 	bl	8003f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b08c      	sub	sp, #48	; 0x30
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b22      	cmp	r3, #34	; 0x22
 8004210:	f040 80ae 	bne.w	8004370 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	d117      	bne.n	800424e <UART_Receive_IT+0x50>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d113      	bne.n	800424e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423c:	b29a      	uxth	r2, r3
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	1c9a      	adds	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
 800424c:	e026      	b.n	800429c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d007      	beq.n	8004272 <UART_Receive_IT+0x74>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <UART_Receive_IT+0x82>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e008      	b.n	8004292 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800428c:	b2da      	uxtb	r2, r3
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4619      	mov	r1, r3
 80042aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d15d      	bne.n	800436c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0220 	bic.w	r2, r2, #32
 80042be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d135      	bne.n	8004362 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	613b      	str	r3, [r7, #16]
   return(result);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f023 0310 	bic.w	r3, r3, #16
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431c:	623a      	str	r2, [r7, #32]
 800431e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	69f9      	ldr	r1, [r7, #28]
 8004322:	6a3a      	ldr	r2, [r7, #32]
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	61bb      	str	r3, [r7, #24]
   return(result);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b10      	cmp	r3, #16
 800433c:	d10a      	bne.n	8004354 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fdf9 	bl	8003f52 <HAL_UARTEx_RxEventCallback>
 8004360:	e002      	b.n	8004368 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fde3 	bl	8003f2e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e002      	b.n	8004372 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3730      	adds	r7, #48	; 0x30
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043b6:	f023 030c 	bic.w	r3, r3, #12
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2c      	ldr	r2, [pc, #176]	; (8004490 <UART_SetConfig+0x114>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043e4:	f7fe fbc4 	bl	8002b70 <HAL_RCC_GetPCLK2Freq>
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	e002      	b.n	80043f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7fe fbac 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 80043f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009a      	lsls	r2, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	4a22      	ldr	r2, [pc, #136]	; (8004494 <UART_SetConfig+0x118>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	0119      	lsls	r1, r3, #4
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009a      	lsls	r2, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fbb2 f2f3 	udiv	r2, r2, r3
 8004428:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <UART_SetConfig+0x118>)
 800442a:	fba3 0302 	umull	r0, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2064      	movs	r0, #100	; 0x64
 8004432:	fb00 f303 	mul.w	r3, r0, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	3332      	adds	r3, #50	; 0x32
 800443c:	4a15      	ldr	r2, [pc, #84]	; (8004494 <UART_SetConfig+0x118>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004448:	4419      	add	r1, r3
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <UART_SetConfig+0x118>)
 8004462:	fba3 0302 	umull	r0, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2064      	movs	r0, #100	; 0x64
 800446a:	fb00 f303 	mul.w	r3, r0, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <UART_SetConfig+0x118>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 020f 	and.w	r2, r3, #15
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	440a      	add	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40013800 	.word	0x40013800
 8004494:	51eb851f 	.word	0x51eb851f

08004498 <cs_high>:
 * 
 */

#include "nrf24l01p.h"

static void cs_high() {
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 800449c:	2201      	movs	r2, #1
 800449e:	2108      	movs	r1, #8
 80044a0:	4802      	ldr	r0, [pc, #8]	; (80044ac <cs_high+0x14>)
 80044a2:	f7fd ff57 	bl	8002354 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40010800 	.word	0x40010800

080044b0 <cs_low>:

static void cs_low() {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 80044b4:	2200      	movs	r2, #0
 80044b6:	2108      	movs	r1, #8
 80044b8:	4802      	ldr	r0, [pc, #8]	; (80044c4 <cs_low+0x14>)
 80044ba:	f7fd ff4b 	bl	8002354 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40010800 	.word	0x40010800

080044c8 <ce_high>:

static void ce_high() {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 80044cc:	2201      	movs	r2, #1
 80044ce:	2110      	movs	r1, #16
 80044d0:	4802      	ldr	r0, [pc, #8]	; (80044dc <ce_high+0x14>)
 80044d2:	f7fd ff3f 	bl	8002354 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40010800 	.word	0x40010800

080044e0 <ce_low>:

static void ce_low() {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 80044e4:	2200      	movs	r2, #0
 80044e6:	2110      	movs	r1, #16
 80044e8:	4802      	ldr	r0, [pc, #8]	; (80044f4 <ce_low+0x14>)
 80044ea:	f7fd ff33 	bl	8002354 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40010800 	.word	0x40010800

080044f8 <read_register>:

uint8_t read_register(uint8_t reg) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t read_val;

	cs_low();
 8004506:	f7ff ffd3 	bl	80044b0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800450a:	f107 020e 	add.w	r2, r7, #14
 800450e:	f107 010f 	add.w	r1, r7, #15
 8004512:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2301      	movs	r3, #1
 800451a:	4809      	ldr	r0, [pc, #36]	; (8004540 <read_register+0x48>)
 800451c:	f7fe feef 	bl	80032fe <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8004520:	f107 010d 	add.w	r1, r7, #13
 8004524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004528:	2201      	movs	r2, #1
 800452a:	4805      	ldr	r0, [pc, #20]	; (8004540 <read_register+0x48>)
 800452c:	f7fe fdcf 	bl	80030ce <HAL_SPI_Receive>
	cs_high();
 8004530:	f7ff ffb2 	bl	8004498 <cs_high>

	return read_val;
 8004534:	7b7b      	ldrb	r3, [r7, #13]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000230 	.word	0x20000230

08004544 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	4603      	mov	r3, r0
 800454c:	460a      	mov	r2, r1
 800454e:	71fb      	strb	r3, [r7, #7]
 8004550:	4613      	mov	r3, r2
 8004552:	71bb      	strb	r3, [r7, #6]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f043 0320 	orr.w	r3, r3, #32
 800455a:	b2db      	uxtb	r3, r3
 800455c:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = value;
 800455e:	79bb      	ldrb	r3, [r7, #6]
 8004560:	737b      	strb	r3, [r7, #13]

	cs_low();
 8004562:	f7ff ffa5 	bl	80044b0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004566:	f107 020e 	add.w	r2, r7, #14
 800456a:	f107 010f 	add.w	r1, r7, #15
 800456e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2301      	movs	r3, #1
 8004576:	4809      	ldr	r0, [pc, #36]	; (800459c <write_register+0x58>)
 8004578:	f7fe fec1 	bl	80032fe <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 800457c:	f107 010d 	add.w	r1, r7, #13
 8004580:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004584:	2201      	movs	r2, #1
 8004586:	4805      	ldr	r0, [pc, #20]	; (800459c <write_register+0x58>)
 8004588:	f7fe fc5e 	bl	8002e48 <HAL_SPI_Transmit>
	cs_high();
 800458c:	f7ff ff84 	bl	8004498 <cs_high>

	return write_val;
 8004590:	7b7b      	ldrb	r3, [r7, #13]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000230 	.word	0x20000230

080045a0 <write_register_multi>:

void write_register_multi(uint8_t reg, uint8_t *address) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	f043 0320 	orr.w	r3, r3, #32
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	73bb      	strb	r3, [r7, #14]
	uint8_t status;
	uint8_t bytes[5];
	for (uint8_t i = 0; i < 5; i++) {
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e00b      	b.n	80045d4 <write_register_multi+0x34>
		bytes[i] = address [i];
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	441a      	add	r2, r3
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	3310      	adds	r3, #16
 80045c8:	443b      	add	r3, r7
 80045ca:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 5; i++) {
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	3301      	adds	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d9f0      	bls.n	80045bc <write_register_multi+0x1c>
	}
	cs_low();
 80045da:	f7ff ff69 	bl	80044b0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80045de:	f107 020d 	add.w	r2, r7, #13
 80045e2:	f107 010e 	add.w	r1, r7, #14
 80045e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2301      	movs	r3, #1
 80045ee:	4808      	ldr	r0, [pc, #32]	; (8004610 <write_register_multi+0x70>)
 80045f0:	f7fe fe85 	bl	80032fe <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, bytes, 5, 2000);
 80045f4:	f107 0108 	add.w	r1, r7, #8
 80045f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80045fc:	2205      	movs	r2, #5
 80045fe:	4804      	ldr	r0, [pc, #16]	; (8004610 <write_register_multi+0x70>)
 8004600:	f7fe fc22 	bl	8002e48 <HAL_SPI_Transmit>
	cs_high();
 8004604:	f7ff ff48 	bl	8004498 <cs_high>

	// return address;
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000230 	.word	0x20000230

08004614 <nrf24l01p_rx_init>:

/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps,uint8_t* address1,uint8_t* address2) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60ba      	str	r2, [r7, #8]
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	4603      	mov	r3, r0
 8004620:	81fb      	strh	r3, [r7, #14]
 8004622:	460b      	mov	r3, r1
 8004624:	737b      	strb	r3, [r7, #13]
	nrf24l01p_reset();
 8004626:	f000 f844 	bl	80046b2 <nrf24l01p_reset>

	nrf24l01p_prx_mode();
 800462a:	f000 f892 	bl	8004752 <nrf24l01p_prx_mode>
	nrf24l01p_power_up();
 800462e:	f000 f977 	bl	8004920 <nrf24l01p_power_up>

	nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8004632:	2020      	movs	r0, #32
 8004634:	f000 f952 	bl	80048dc <nrf24l01p_rx_set_payload_widths>

	nrf24l01p_set_rf_channel(MHz);
 8004638:	89fb      	ldrh	r3, [r7, #14]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f9fc 	bl	8004a38 <nrf24l01p_set_rf_channel>
	nrf24l01p_set_rf_air_data_rate(bps);
 8004640:	7b7b      	ldrb	r3, [r7, #13]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fa28 	bl	8004a98 <nrf24l01p_set_rf_air_data_rate>
	nrf24l01p_set_rf_tx_output_power(_0dBm);
 8004648:	2003      	movs	r0, #3
 800464a:	f000 fa08 	bl	8004a5e <nrf24l01p_set_rf_tx_output_power>

	nrf24l01p_set_crc_length(1);
 800464e:	2001      	movs	r0, #1
 8004650:	f000 f97b 	bl	800494a <nrf24l01p_set_crc_length>
	nrf24l01p_set_address_widths(5);
 8004654:	2005      	movs	r0, #5
 8004656:	f000 f99b 	bl	8004990 <nrf24l01p_set_address_widths>

	write_register_multi(NRF24L01P_REG_RX_ADDR_P1,address1);
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	200b      	movs	r0, #11
 800465e:	f7ff ff9f 	bl	80045a0 <write_register_multi>
	write_register_multi(NRF24L01P_REG_TX_ADDR,address2);
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	2010      	movs	r0, #16
 8004666:	f7ff ff9b 	bl	80045a0 <write_register_multi>

	nrf24l01p_auto_retransmit_count(3);
 800466a:	2003      	movs	r0, #3
 800466c:	f000 f9a0 	bl	80049b0 <nrf24l01p_auto_retransmit_count>
	nrf24l01p_auto_retransmit_delay(250);
 8004670:	20fa      	movs	r0, #250	; 0xfa
 8004672:	f000 f9b9 	bl	80049e8 <nrf24l01p_auto_retransmit_delay>

	ce_high();
 8004676:	f7ff ff27 	bl	80044c8 <ce_high>
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <nrf24l01p_rx_receive>:
	nrf24l01p_auto_retransmit_delay(250);

	ce_high();
}

void nrf24l01p_rx_receive(uint8_t *rx_payload) {
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
	nrf24l01p_read_rx_fifo(rx_payload);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f894 	bl	80047b8 <nrf24l01p_read_rx_fifo>
	nrf24l01p_clear_rx_dr();
 8004690:	f000 f932 	bl	80048f8 <nrf24l01p_clear_rx_dr>

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit(uint8_t *tx_payload) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	nrf24l01p_write_tx_fifo(tx_payload);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8ab 	bl	8004800 <nrf24l01p_write_tx_fifo>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <nrf24l01p_reset>:
		nrf24l01p_clear_max_rt();
	}
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset() {
 80046b2:	b580      	push	{r7, lr}
 80046b4:	af00      	add	r7, sp, #0
	// Reset pins
	cs_high();
 80046b6:	f7ff feef 	bl	8004498 <cs_high>
	ce_low();
 80046ba:	f7ff ff11 	bl	80044e0 <ce_low>

	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 80046be:	2108      	movs	r1, #8
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7ff ff3f 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80046c6:	213f      	movs	r1, #63	; 0x3f
 80046c8:	2001      	movs	r0, #1
 80046ca:	f7ff ff3b 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80046ce:	2103      	movs	r1, #3
 80046d0:	2002      	movs	r0, #2
 80046d2:	f7ff ff37 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80046d6:	2103      	movs	r1, #3
 80046d8:	2003      	movs	r0, #3
 80046da:	f7ff ff33 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80046de:	2103      	movs	r1, #3
 80046e0:	2004      	movs	r0, #4
 80046e2:	f7ff ff2f 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 80046e6:	2102      	movs	r1, #2
 80046e8:	2005      	movs	r0, #5
 80046ea:	f7ff ff2b 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80046ee:	2107      	movs	r1, #7
 80046f0:	2006      	movs	r0, #6
 80046f2:	f7ff ff27 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_STATUS, 0x7E);
 80046f6:	217e      	movs	r1, #126	; 0x7e
 80046f8:	2007      	movs	r0, #7
 80046fa:	f7ff ff23 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 80046fe:	2120      	movs	r1, #32
 8004700:	2011      	movs	r0, #17
 8004702:	f7ff ff1f 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P1, 0x20);
 8004706:	2120      	movs	r1, #32
 8004708:	2012      	movs	r0, #18
 800470a:	f7ff ff1b 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800470e:	2100      	movs	r1, #0
 8004710:	2013      	movs	r0, #19
 8004712:	f7ff ff17 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8004716:	2100      	movs	r1, #0
 8004718:	2014      	movs	r0, #20
 800471a:	f7ff ff13 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800471e:	2100      	movs	r1, #0
 8004720:	2015      	movs	r0, #21
 8004722:	f7ff ff0f 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8004726:	2100      	movs	r1, #0
 8004728:	2016      	movs	r0, #22
 800472a:	f7ff ff0b 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800472e:	2111      	movs	r1, #17
 8004730:	2017      	movs	r0, #23
 8004732:	f7ff ff07 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_DYNPD, 0x00);
 8004736:	2100      	movs	r1, #0
 8004738:	201c      	movs	r0, #28
 800473a:	f7ff ff03 	bl	8004544 <write_register>
	write_register(NRF24L01P_REG_FEATURE, 0x00);
 800473e:	2100      	movs	r1, #0
 8004740:	201d      	movs	r0, #29
 8004742:	f7ff feff 	bl	8004544 <write_register>

	// Reset FIFO
	nrf24l01p_flush_rx_fifo();
 8004746:	f000 f87f 	bl	8004848 <nrf24l01p_flush_rx_fifo>
	nrf24l01p_flush_tx_fifo();
 800474a:	f000 f895 	bl	8004878 <nrf24l01p_flush_tx_fifo>
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}

08004752 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode() {
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
	ce_low();
 8004758:	f7ff fec2 	bl	80044e0 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800475c:	2000      	movs	r0, #0
 800475e:	f7ff fecb 	bl	80044f8 <read_register>
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 0;
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	4619      	mov	r1, r3
 8004772:	2000      	movs	r0, #0
 8004774:	f7ff fee6 	bl	8004544 <write_register>

	ce_high();
 8004778:	f7ff fea6 	bl	80044c8 <ce_high>
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <nrf24l01p_ptx_mode>:

void nrf24l01p_ptx_mode() {
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
	ce_low();
 800478a:	f7ff fea9 	bl	80044e0 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800478e:	2000      	movs	r0, #0
 8004790:	f7ff feb2 	bl	80044f8 <read_register>
 8004794:	4603      	mov	r3, r0
 8004796:	71fb      	strb	r3, [r7, #7]
	new_config &= 0xFE;
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	4619      	mov	r1, r3
 80047a4:	2000      	movs	r0, #0
 80047a6:	f7ff fecd 	bl	8004544 <write_register>

	ce_high();
 80047aa:	f7ff fe8d 	bl	80044c8 <ce_high>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <nrf24l01p_read_rx_fifo>:

uint8_t nrf24l01p_read_rx_fifo(uint8_t *rx_payload) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af02      	add	r7, sp, #8
 80047be:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 80047c0:	2361      	movs	r3, #97	; 0x61
 80047c2:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 80047c4:	f7ff fe74 	bl	80044b0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80047c8:	f107 020e 	add.w	r2, r7, #14
 80047cc:	f107 010f 	add.w	r1, r7, #15
 80047d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2301      	movs	r3, #1
 80047d8:	4808      	ldr	r0, [pc, #32]	; (80047fc <nrf24l01p_read_rx_fifo+0x44>)
 80047da:	f7fe fd90 	bl	80032fe <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80047de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80047e2:	2220      	movs	r2, #32
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4805      	ldr	r0, [pc, #20]	; (80047fc <nrf24l01p_read_rx_fifo+0x44>)
 80047e8:	f7fe fc71 	bl	80030ce <HAL_SPI_Receive>
	cs_high();
 80047ec:	f7ff fe54 	bl	8004498 <cs_high>

	return status;
 80047f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000230 	.word	0x20000230

08004800 <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t *tx_payload) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8004808:	23a0      	movs	r3, #160	; 0xa0
 800480a:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 800480c:	f7ff fe50 	bl	80044b0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004810:	f107 020e 	add.w	r2, r7, #14
 8004814:	f107 010f 	add.w	r1, r7, #15
 8004818:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2301      	movs	r3, #1
 8004820:	4808      	ldr	r0, [pc, #32]	; (8004844 <nrf24l01p_write_tx_fifo+0x44>)
 8004822:	f7fe fd6c 	bl	80032fe <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8004826:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800482a:	2220      	movs	r2, #32
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <nrf24l01p_write_tx_fifo+0x44>)
 8004830:	f7fe fb0a 	bl	8002e48 <HAL_SPI_Transmit>
	cs_high();
 8004834:	f7ff fe30 	bl	8004498 <cs_high>

	return status;
 8004838:	7bbb      	ldrb	r3, [r7, #14]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000230 	.word	0x20000230

08004848 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo() {
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800484e:	23e2      	movs	r3, #226	; 0xe2
 8004850:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8004852:	f7ff fe2d 	bl	80044b0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004856:	1dba      	adds	r2, r7, #6
 8004858:	1df9      	adds	r1, r7, #7
 800485a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2301      	movs	r3, #1
 8004862:	4804      	ldr	r0, [pc, #16]	; (8004874 <nrf24l01p_flush_rx_fifo+0x2c>)
 8004864:	f7fe fd4b 	bl	80032fe <HAL_SPI_TransmitReceive>
	cs_high();
 8004868:	f7ff fe16 	bl	8004498 <cs_high>
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000230 	.word	0x20000230

08004878 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo() {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800487e:	23e1      	movs	r3, #225	; 0xe1
 8004880:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8004882:	f7ff fe15 	bl	80044b0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004886:	1dba      	adds	r2, r7, #6
 8004888:	1df9      	adds	r1, r7, #7
 800488a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2301      	movs	r3, #1
 8004892:	4804      	ldr	r0, [pc, #16]	; (80048a4 <nrf24l01p_flush_tx_fifo+0x2c>)
 8004894:	f7fe fd33 	bl	80032fe <HAL_SPI_TransmitReceive>
	cs_high();
 8004898:	f7ff fdfe 	bl	8004498 <cs_high>
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000230 	.word	0x20000230

080048a8 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status() {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 80048ae:	23ff      	movs	r3, #255	; 0xff
 80048b0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80048b2:	f7ff fdfd 	bl	80044b0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80048b6:	1dba      	adds	r2, r7, #6
 80048b8:	1df9      	adds	r1, r7, #7
 80048ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2301      	movs	r3, #1
 80048c2:	4805      	ldr	r0, [pc, #20]	; (80048d8 <nrf24l01p_get_status+0x30>)
 80048c4:	f7fe fd1b 	bl	80032fe <HAL_SPI_TransmitReceive>
	cs_high();
 80048c8:	f7ff fde6 	bl	8004498 <cs_high>

	return status;
 80048cc:	79bb      	ldrb	r3, [r7, #6]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000230 	.word	0x20000230

080048dc <nrf24l01p_rx_set_payload_widths>:

uint8_t nrf24l01p_get_fifo_status() {
	return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	4619      	mov	r1, r3
 80048ea:	2011      	movs	r0, #17
 80048ec:	f7ff fe2a 	bl	8004544 <write_register>
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr() {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
	uint8_t new_status = nrf24l01p_get_status();
 80048fe:	f7ff ffd3 	bl	80048a8 <nrf24l01p_get_status>
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
	new_status |= 0x40;
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490c:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_STATUS, new_status);
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	4619      	mov	r1, r3
 8004912:	2007      	movs	r0, #7
 8004914:	f7ff fe16 	bl	8004544 <write_register>
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <nrf24l01p_power_up>:
	new_status |= 0x10;

	write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up() {
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8004926:	2000      	movs	r0, #0
 8004928:	f7ff fde6 	bl	80044f8 <read_register>
 800492c:	4603      	mov	r3, r0
 800492e:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 1;
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	f043 0302 	orr.w	r3, r3, #2
 8004936:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	4619      	mov	r1, r3
 800493c:	2000      	movs	r0, #0
 800493e:	f7ff fe01 	bl	8004544 <write_register>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <nrf24l01p_set_crc_length>:
	new_config &= 0xFD;

	write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes) {
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	4603      	mov	r3, r0
 8004952:	71fb      	strb	r3, [r7, #7]
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8004954:	2000      	movs	r0, #0
 8004956:	f7ff fdcf 	bl	80044f8 <read_register>
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]

	switch (bytes) {
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d002      	beq.n	800496a <nrf24l01p_set_crc_length+0x20>
 8004964:	2b02      	cmp	r3, #2
 8004966:	d005      	beq.n	8004974 <nrf24l01p_set_crc_length+0x2a>
 8004968:	e009      	b.n	800497e <nrf24l01p_set_crc_length+0x34>
	// CRCO bit in CONFIG resiger set 0
	case 1:
		new_config &= 0xFB;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	f023 0304 	bic.w	r3, r3, #4
 8004970:	73fb      	strb	r3, [r7, #15]
		break;
 8004972:	e004      	b.n	800497e <nrf24l01p_set_crc_length+0x34>
		// CRCO bit in CONFIG resiger set 1
	case 2:
		new_config |= 1 << 2;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	73fb      	strb	r3, [r7, #15]
		break;
 800497c:	bf00      	nop
	}

	write_register(NRF24L01P_REG_CONFIG, new_config);
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	4619      	mov	r1, r3
 8004982:	2000      	movs	r0, #0
 8004984:	f7ff fdde 	bl	8004544 <write_register>
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	3b02      	subs	r3, #2
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4619      	mov	r1, r3
 80049a2:	2003      	movs	r0, #3
 80049a4:	f7ff fdce 	bl	8004544 <write_register>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80049ba:	2004      	movs	r0, #4
 80049bc:	f7ff fd9c 	bl	80044f8 <read_register>
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]

	// Reset ARC register 0
	new_setup_retr |= 0xF0;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	f063 030f 	orn	r3, r3, #15
 80049ca:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= cnt;
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	4619      	mov	r1, r3
 80049d8:	2004      	movs	r0, #4
 80049da:	f7ff fdb3 	bl	8004544 <write_register>
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80049f2:	2004      	movs	r0, #4
 80049f4:	f7ff fd80 	bl	80044f8 <read_register>
 80049f8:	4603      	mov	r3, r0
 80049fa:	73fb      	strb	r3, [r7, #15]

	// Reset ARD register 0
	new_setup_retr |= 0x0F;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	f043 030f 	orr.w	r3, r3, #15
 8004a02:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= ((us / 250) - 1) << 4;
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	b25a      	sxtb	r2, r3
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b25b      	sxtb	r3, r3
 8004a1e:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	4619      	mov	r1, r3
 8004a24:	2004      	movs	r0, #4
 8004a26:	f7ff fd8d 	bl	8004544 <write_register>
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	10624dd3 	.word	0x10624dd3

08004a38 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8004a48:	81fb      	strh	r3, [r7, #14]
	write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8004a4a:	89fb      	ldrh	r3, [r7, #14]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	4619      	mov	r1, r3
 8004a50:	2005      	movs	r0, #5
 8004a52:	f7ff fd77 	bl	8004544 <write_register>
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm) {
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8004a68:	2006      	movs	r0, #6
 8004a6a:	f7ff fd45 	bl	80044f8 <read_register>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f023 0306 	bic.w	r3, r3, #6
 8004a74:	73fb      	strb	r3, [r7, #15]
	new_rf_setup |= (dBm << 1);
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	b25a      	sxtb	r2, r3
 8004a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	2006      	movs	r0, #6
 8004a8c:	f7ff fd5a 	bl	8004544 <write_register>
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
	// Set value to 0
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8004aa2:	2006      	movs	r0, #6
 8004aa4:	f7ff fd28 	bl	80044f8 <read_register>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004aae:	73fb      	strb	r3, [r7, #15]

	switch (bps) {
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d00a      	beq.n	8004acc <nrf24l01p_set_rf_air_data_rate+0x34>
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	dc0e      	bgt.n	8004ad8 <nrf24l01p_set_rf_air_data_rate+0x40>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10a      	bne.n	8004ad8 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _1Mbps:
		break;
	case _2Mbps:
		new_rf_setup |= 1 << 3;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	f043 0308 	orr.w	r3, r3, #8
 8004ac8:	73fb      	strb	r3, [r7, #15]
		break;
 8004aca:	e005      	b.n	8004ad8 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _250kbps:
		new_rf_setup |= 1 << 5;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	f043 0320 	orr.w	r3, r3, #32
 8004ad2:	73fb      	strb	r3, [r7, #15]
		break;
 8004ad4:	e000      	b.n	8004ad8 <nrf24l01p_set_rf_air_data_rate+0x40>
		break;
 8004ad6:	bf00      	nop
	}
	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	4619      	mov	r1, r3
 8004adc:	2006      	movs	r0, #6
 8004ade:	f7ff fd31 	bl	8004544 <write_register>
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <__cvt>:
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	461f      	mov	r7, r3
 8004af2:	bfbb      	ittet	lt
 8004af4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004af8:	461f      	movlt	r7, r3
 8004afa:	2300      	movge	r3, #0
 8004afc:	232d      	movlt	r3, #45	; 0x2d
 8004afe:	b088      	sub	sp, #32
 8004b00:	4614      	mov	r4, r2
 8004b02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b04:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b06:	7013      	strb	r3, [r2, #0]
 8004b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b0a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004b0e:	f023 0820 	bic.w	r8, r3, #32
 8004b12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b16:	d005      	beq.n	8004b24 <__cvt+0x3a>
 8004b18:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b1c:	d100      	bne.n	8004b20 <__cvt+0x36>
 8004b1e:	3501      	adds	r5, #1
 8004b20:	2302      	movs	r3, #2
 8004b22:	e000      	b.n	8004b26 <__cvt+0x3c>
 8004b24:	2303      	movs	r3, #3
 8004b26:	aa07      	add	r2, sp, #28
 8004b28:	9204      	str	r2, [sp, #16]
 8004b2a:	aa06      	add	r2, sp, #24
 8004b2c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b30:	e9cd 3500 	strd	r3, r5, [sp]
 8004b34:	4622      	mov	r2, r4
 8004b36:	463b      	mov	r3, r7
 8004b38:	f001 f872 	bl	8005c20 <_dtoa_r>
 8004b3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b40:	4606      	mov	r6, r0
 8004b42:	d102      	bne.n	8004b4a <__cvt+0x60>
 8004b44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b46:	07db      	lsls	r3, r3, #31
 8004b48:	d522      	bpl.n	8004b90 <__cvt+0xa6>
 8004b4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b4e:	eb06 0905 	add.w	r9, r6, r5
 8004b52:	d110      	bne.n	8004b76 <__cvt+0x8c>
 8004b54:	7833      	ldrb	r3, [r6, #0]
 8004b56:	2b30      	cmp	r3, #48	; 0x30
 8004b58:	d10a      	bne.n	8004b70 <__cvt+0x86>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4639      	mov	r1, r7
 8004b62:	f7fb ff21 	bl	80009a8 <__aeabi_dcmpeq>
 8004b66:	b918      	cbnz	r0, 8004b70 <__cvt+0x86>
 8004b68:	f1c5 0501 	rsb	r5, r5, #1
 8004b6c:	f8ca 5000 	str.w	r5, [sl]
 8004b70:	f8da 3000 	ldr.w	r3, [sl]
 8004b74:	4499      	add	r9, r3
 8004b76:	2200      	movs	r2, #0
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	f7fb ff13 	bl	80009a8 <__aeabi_dcmpeq>
 8004b82:	b108      	cbz	r0, 8004b88 <__cvt+0x9e>
 8004b84:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b88:	2230      	movs	r2, #48	; 0x30
 8004b8a:	9b07      	ldr	r3, [sp, #28]
 8004b8c:	454b      	cmp	r3, r9
 8004b8e:	d307      	bcc.n	8004ba0 <__cvt+0xb6>
 8004b90:	4630      	mov	r0, r6
 8004b92:	9b07      	ldr	r3, [sp, #28]
 8004b94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b96:	1b9b      	subs	r3, r3, r6
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	b008      	add	sp, #32
 8004b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba0:	1c59      	adds	r1, r3, #1
 8004ba2:	9107      	str	r1, [sp, #28]
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e7f0      	b.n	8004b8a <__cvt+0xa0>

08004ba8 <__exponent>:
 8004ba8:	4603      	mov	r3, r0
 8004baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bac:	2900      	cmp	r1, #0
 8004bae:	f803 2b02 	strb.w	r2, [r3], #2
 8004bb2:	bfb6      	itet	lt
 8004bb4:	222d      	movlt	r2, #45	; 0x2d
 8004bb6:	222b      	movge	r2, #43	; 0x2b
 8004bb8:	4249      	neglt	r1, r1
 8004bba:	2909      	cmp	r1, #9
 8004bbc:	7042      	strb	r2, [r0, #1]
 8004bbe:	dd2a      	ble.n	8004c16 <__exponent+0x6e>
 8004bc0:	f10d 0207 	add.w	r2, sp, #7
 8004bc4:	4617      	mov	r7, r2
 8004bc6:	260a      	movs	r6, #10
 8004bc8:	fb91 f5f6 	sdiv	r5, r1, r6
 8004bcc:	4694      	mov	ip, r2
 8004bce:	fb06 1415 	mls	r4, r6, r5, r1
 8004bd2:	3430      	adds	r4, #48	; 0x30
 8004bd4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004bd8:	460c      	mov	r4, r1
 8004bda:	2c63      	cmp	r4, #99	; 0x63
 8004bdc:	4629      	mov	r1, r5
 8004bde:	f102 32ff 	add.w	r2, r2, #4294967295
 8004be2:	dcf1      	bgt.n	8004bc8 <__exponent+0x20>
 8004be4:	3130      	adds	r1, #48	; 0x30
 8004be6:	f1ac 0402 	sub.w	r4, ip, #2
 8004bea:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004bee:	4622      	mov	r2, r4
 8004bf0:	1c41      	adds	r1, r0, #1
 8004bf2:	42ba      	cmp	r2, r7
 8004bf4:	d30a      	bcc.n	8004c0c <__exponent+0x64>
 8004bf6:	f10d 0209 	add.w	r2, sp, #9
 8004bfa:	eba2 020c 	sub.w	r2, r2, ip
 8004bfe:	42bc      	cmp	r4, r7
 8004c00:	bf88      	it	hi
 8004c02:	2200      	movhi	r2, #0
 8004c04:	4413      	add	r3, r2
 8004c06:	1a18      	subs	r0, r3, r0
 8004c08:	b003      	add	sp, #12
 8004c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c0c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004c10:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004c14:	e7ed      	b.n	8004bf2 <__exponent+0x4a>
 8004c16:	2330      	movs	r3, #48	; 0x30
 8004c18:	3130      	adds	r1, #48	; 0x30
 8004c1a:	7083      	strb	r3, [r0, #2]
 8004c1c:	70c1      	strb	r1, [r0, #3]
 8004c1e:	1d03      	adds	r3, r0, #4
 8004c20:	e7f1      	b.n	8004c06 <__exponent+0x5e>
	...

08004c24 <_printf_float>:
 8004c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c28:	b091      	sub	sp, #68	; 0x44
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004c30:	4616      	mov	r6, r2
 8004c32:	461f      	mov	r7, r3
 8004c34:	4605      	mov	r5, r0
 8004c36:	f000 fee1 	bl	80059fc <_localeconv_r>
 8004c3a:	6803      	ldr	r3, [r0, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c40:	f7fb fa86 	bl	8000150 <strlen>
 8004c44:	2300      	movs	r3, #0
 8004c46:	930e      	str	r3, [sp, #56]	; 0x38
 8004c48:	f8d8 3000 	ldr.w	r3, [r8]
 8004c4c:	900a      	str	r0, [sp, #40]	; 0x28
 8004c4e:	3307      	adds	r3, #7
 8004c50:	f023 0307 	bic.w	r3, r3, #7
 8004c54:	f103 0208 	add.w	r2, r3, #8
 8004c58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004c5c:	f8d4 b000 	ldr.w	fp, [r4]
 8004c60:	f8c8 2000 	str.w	r2, [r8]
 8004c64:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4643      	mov	r3, r8
 8004c6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c70:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004c74:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7a:	4650      	mov	r0, sl
 8004c7c:	4b9c      	ldr	r3, [pc, #624]	; (8004ef0 <_printf_float+0x2cc>)
 8004c7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c80:	f7fb fec4 	bl	8000a0c <__aeabi_dcmpun>
 8004c84:	bb70      	cbnz	r0, 8004ce4 <_printf_float+0xc0>
 8004c86:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	4b98      	ldr	r3, [pc, #608]	; (8004ef0 <_printf_float+0x2cc>)
 8004c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c90:	f7fb fe9e 	bl	80009d0 <__aeabi_dcmple>
 8004c94:	bb30      	cbnz	r0, 8004ce4 <_printf_float+0xc0>
 8004c96:	2200      	movs	r2, #0
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	f7fb fe8d 	bl	80009bc <__aeabi_dcmplt>
 8004ca2:	b110      	cbz	r0, 8004caa <_printf_float+0x86>
 8004ca4:	232d      	movs	r3, #45	; 0x2d
 8004ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004caa:	4a92      	ldr	r2, [pc, #584]	; (8004ef4 <_printf_float+0x2d0>)
 8004cac:	4b92      	ldr	r3, [pc, #584]	; (8004ef8 <_printf_float+0x2d4>)
 8004cae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004cb2:	bf94      	ite	ls
 8004cb4:	4690      	movls	r8, r2
 8004cb6:	4698      	movhi	r8, r3
 8004cb8:	2303      	movs	r3, #3
 8004cba:	f04f 0a00 	mov.w	sl, #0
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	f02b 0304 	bic.w	r3, fp, #4
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	4633      	mov	r3, r6
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4628      	mov	r0, r5
 8004ccc:	9700      	str	r7, [sp, #0]
 8004cce:	aa0f      	add	r2, sp, #60	; 0x3c
 8004cd0:	f000 f9d6 	bl	8005080 <_printf_common>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f040 8090 	bne.w	8004dfa <_printf_float+0x1d6>
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	b011      	add	sp, #68	; 0x44
 8004ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	4652      	mov	r2, sl
 8004ce6:	4643      	mov	r3, r8
 8004ce8:	4650      	mov	r0, sl
 8004cea:	4641      	mov	r1, r8
 8004cec:	f7fb fe8e 	bl	8000a0c <__aeabi_dcmpun>
 8004cf0:	b148      	cbz	r0, 8004d06 <_printf_float+0xe2>
 8004cf2:	f1b8 0f00 	cmp.w	r8, #0
 8004cf6:	bfb8      	it	lt
 8004cf8:	232d      	movlt	r3, #45	; 0x2d
 8004cfa:	4a80      	ldr	r2, [pc, #512]	; (8004efc <_printf_float+0x2d8>)
 8004cfc:	bfb8      	it	lt
 8004cfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d02:	4b7f      	ldr	r3, [pc, #508]	; (8004f00 <_printf_float+0x2dc>)
 8004d04:	e7d3      	b.n	8004cae <_printf_float+0x8a>
 8004d06:	6863      	ldr	r3, [r4, #4]
 8004d08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	d142      	bne.n	8004d96 <_printf_float+0x172>
 8004d10:	2306      	movs	r3, #6
 8004d12:	6063      	str	r3, [r4, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	9206      	str	r2, [sp, #24]
 8004d18:	aa0e      	add	r2, sp, #56	; 0x38
 8004d1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004d1e:	aa0d      	add	r2, sp, #52	; 0x34
 8004d20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004d24:	9203      	str	r2, [sp, #12]
 8004d26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004d2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004d2e:	6023      	str	r3, [r4, #0]
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	4652      	mov	r2, sl
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	4628      	mov	r0, r5
 8004d38:	4643      	mov	r3, r8
 8004d3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004d3c:	f7ff fed5 	bl	8004aea <__cvt>
 8004d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d42:	4680      	mov	r8, r0
 8004d44:	2947      	cmp	r1, #71	; 0x47
 8004d46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d48:	d108      	bne.n	8004d5c <_printf_float+0x138>
 8004d4a:	1cc8      	adds	r0, r1, #3
 8004d4c:	db02      	blt.n	8004d54 <_printf_float+0x130>
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	4299      	cmp	r1, r3
 8004d52:	dd40      	ble.n	8004dd6 <_printf_float+0x1b2>
 8004d54:	f1a9 0902 	sub.w	r9, r9, #2
 8004d58:	fa5f f989 	uxtb.w	r9, r9
 8004d5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d60:	d81f      	bhi.n	8004da2 <_printf_float+0x17e>
 8004d62:	464a      	mov	r2, r9
 8004d64:	3901      	subs	r1, #1
 8004d66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d6a:	910d      	str	r1, [sp, #52]	; 0x34
 8004d6c:	f7ff ff1c 	bl	8004ba8 <__exponent>
 8004d70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d72:	4682      	mov	sl, r0
 8004d74:	1813      	adds	r3, r2, r0
 8004d76:	2a01      	cmp	r2, #1
 8004d78:	6123      	str	r3, [r4, #16]
 8004d7a:	dc02      	bgt.n	8004d82 <_printf_float+0x15e>
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	07d2      	lsls	r2, r2, #31
 8004d80:	d501      	bpl.n	8004d86 <_printf_float+0x162>
 8004d82:	3301      	adds	r3, #1
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d09b      	beq.n	8004cc6 <_printf_float+0xa2>
 8004d8e:	232d      	movs	r3, #45	; 0x2d
 8004d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d94:	e797      	b.n	8004cc6 <_printf_float+0xa2>
 8004d96:	2947      	cmp	r1, #71	; 0x47
 8004d98:	d1bc      	bne.n	8004d14 <_printf_float+0xf0>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ba      	bne.n	8004d14 <_printf_float+0xf0>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e7b7      	b.n	8004d12 <_printf_float+0xee>
 8004da2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004da6:	d118      	bne.n	8004dda <_printf_float+0x1b6>
 8004da8:	2900      	cmp	r1, #0
 8004daa:	6863      	ldr	r3, [r4, #4]
 8004dac:	dd0b      	ble.n	8004dc6 <_printf_float+0x1a2>
 8004dae:	6121      	str	r1, [r4, #16]
 8004db0:	b913      	cbnz	r3, 8004db8 <_printf_float+0x194>
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	07d0      	lsls	r0, r2, #31
 8004db6:	d502      	bpl.n	8004dbe <_printf_float+0x19a>
 8004db8:	3301      	adds	r3, #1
 8004dba:	440b      	add	r3, r1
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	f04f 0a00 	mov.w	sl, #0
 8004dc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004dc4:	e7df      	b.n	8004d86 <_printf_float+0x162>
 8004dc6:	b913      	cbnz	r3, 8004dce <_printf_float+0x1aa>
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	07d2      	lsls	r2, r2, #31
 8004dcc:	d501      	bpl.n	8004dd2 <_printf_float+0x1ae>
 8004dce:	3302      	adds	r3, #2
 8004dd0:	e7f4      	b.n	8004dbc <_printf_float+0x198>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e7f2      	b.n	8004dbc <_printf_float+0x198>
 8004dd6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ddc:	4299      	cmp	r1, r3
 8004dde:	db05      	blt.n	8004dec <_printf_float+0x1c8>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	6121      	str	r1, [r4, #16]
 8004de4:	07d8      	lsls	r0, r3, #31
 8004de6:	d5ea      	bpl.n	8004dbe <_printf_float+0x19a>
 8004de8:	1c4b      	adds	r3, r1, #1
 8004dea:	e7e7      	b.n	8004dbc <_printf_float+0x198>
 8004dec:	2900      	cmp	r1, #0
 8004dee:	bfcc      	ite	gt
 8004df0:	2201      	movgt	r2, #1
 8004df2:	f1c1 0202 	rsble	r2, r1, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	e7e0      	b.n	8004dbc <_printf_float+0x198>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	055a      	lsls	r2, r3, #21
 8004dfe:	d407      	bmi.n	8004e10 <_printf_float+0x1ec>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	4642      	mov	r2, r8
 8004e04:	4631      	mov	r1, r6
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b8      	blx	r7
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d12b      	bne.n	8004e66 <_printf_float+0x242>
 8004e0e:	e764      	b.n	8004cda <_printf_float+0xb6>
 8004e10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e14:	f240 80dd 	bls.w	8004fd2 <_printf_float+0x3ae>
 8004e18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f7fb fdc2 	bl	80009a8 <__aeabi_dcmpeq>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d033      	beq.n	8004e90 <_printf_float+0x26c>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	4a35      	ldr	r2, [pc, #212]	; (8004f04 <_printf_float+0x2e0>)
 8004e30:	47b8      	blx	r7
 8004e32:	3001      	adds	r0, #1
 8004e34:	f43f af51 	beq.w	8004cda <_printf_float+0xb6>
 8004e38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	db02      	blt.n	8004e46 <_printf_float+0x222>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	07d8      	lsls	r0, r3, #31
 8004e44:	d50f      	bpl.n	8004e66 <_printf_float+0x242>
 8004e46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	f43f af42 	beq.w	8004cda <_printf_float+0xb6>
 8004e56:	f04f 0800 	mov.w	r8, #0
 8004e5a:	f104 091a 	add.w	r9, r4, #26
 8004e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e60:	3b01      	subs	r3, #1
 8004e62:	4543      	cmp	r3, r8
 8004e64:	dc09      	bgt.n	8004e7a <_printf_float+0x256>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	079b      	lsls	r3, r3, #30
 8004e6a:	f100 8104 	bmi.w	8005076 <_printf_float+0x452>
 8004e6e:	68e0      	ldr	r0, [r4, #12]
 8004e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e72:	4298      	cmp	r0, r3
 8004e74:	bfb8      	it	lt
 8004e76:	4618      	movlt	r0, r3
 8004e78:	e731      	b.n	8004cde <_printf_float+0xba>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	464a      	mov	r2, r9
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	f43f af28 	beq.w	8004cda <_printf_float+0xb6>
 8004e8a:	f108 0801 	add.w	r8, r8, #1
 8004e8e:	e7e6      	b.n	8004e5e <_printf_float+0x23a>
 8004e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dc38      	bgt.n	8004f08 <_printf_float+0x2e4>
 8004e96:	2301      	movs	r3, #1
 8004e98:	4631      	mov	r1, r6
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <_printf_float+0x2e0>)
 8004e9e:	47b8      	blx	r7
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	f43f af1a 	beq.w	8004cda <_printf_float+0xb6>
 8004ea6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	d102      	bne.n	8004eb4 <_printf_float+0x290>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	07d9      	lsls	r1, r3, #31
 8004eb2:	d5d8      	bpl.n	8004e66 <_printf_float+0x242>
 8004eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b8      	blx	r7
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f43f af0b 	beq.w	8004cda <_printf_float+0xb6>
 8004ec4:	f04f 0900 	mov.w	r9, #0
 8004ec8:	f104 0a1a 	add.w	sl, r4, #26
 8004ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ece:	425b      	negs	r3, r3
 8004ed0:	454b      	cmp	r3, r9
 8004ed2:	dc01      	bgt.n	8004ed8 <_printf_float+0x2b4>
 8004ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ed6:	e794      	b.n	8004e02 <_printf_float+0x1de>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4652      	mov	r2, sl
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f aef9 	beq.w	8004cda <_printf_float+0xb6>
 8004ee8:	f109 0901 	add.w	r9, r9, #1
 8004eec:	e7ee      	b.n	8004ecc <_printf_float+0x2a8>
 8004eee:	bf00      	nop
 8004ef0:	7fefffff 	.word	0x7fefffff
 8004ef4:	08009272 	.word	0x08009272
 8004ef8:	08009276 	.word	0x08009276
 8004efc:	0800927a 	.word	0x0800927a
 8004f00:	0800927e 	.word	0x0800927e
 8004f04:	08009282 	.word	0x08009282
 8004f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	bfa8      	it	ge
 8004f10:	461a      	movge	r2, r3
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	4691      	mov	r9, r2
 8004f16:	dc37      	bgt.n	8004f88 <_printf_float+0x364>
 8004f18:	f04f 0b00 	mov.w	fp, #0
 8004f1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f20:	f104 021a 	add.w	r2, r4, #26
 8004f24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f28:	ebaa 0309 	sub.w	r3, sl, r9
 8004f2c:	455b      	cmp	r3, fp
 8004f2e:	dc33      	bgt.n	8004f98 <_printf_float+0x374>
 8004f30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f34:	429a      	cmp	r2, r3
 8004f36:	db3b      	blt.n	8004fb0 <_printf_float+0x38c>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	07da      	lsls	r2, r3, #31
 8004f3c:	d438      	bmi.n	8004fb0 <_printf_float+0x38c>
 8004f3e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004f42:	eba2 0903 	sub.w	r9, r2, r3
 8004f46:	eba2 020a 	sub.w	r2, r2, sl
 8004f4a:	4591      	cmp	r9, r2
 8004f4c:	bfa8      	it	ge
 8004f4e:	4691      	movge	r9, r2
 8004f50:	f1b9 0f00 	cmp.w	r9, #0
 8004f54:	dc34      	bgt.n	8004fc0 <_printf_float+0x39c>
 8004f56:	f04f 0800 	mov.w	r8, #0
 8004f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f5e:	f104 0a1a 	add.w	sl, r4, #26
 8004f62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	eba3 0309 	sub.w	r3, r3, r9
 8004f6c:	4543      	cmp	r3, r8
 8004f6e:	f77f af7a 	ble.w	8004e66 <_printf_float+0x242>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4652      	mov	r2, sl
 8004f76:	4631      	mov	r1, r6
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b8      	blx	r7
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f43f aeac 	beq.w	8004cda <_printf_float+0xb6>
 8004f82:	f108 0801 	add.w	r8, r8, #1
 8004f86:	e7ec      	b.n	8004f62 <_printf_float+0x33e>
 8004f88:	4613      	mov	r3, r2
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	d1c0      	bne.n	8004f18 <_printf_float+0x2f4>
 8004f96:	e6a0      	b.n	8004cda <_printf_float+0xb6>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f43f ae99 	beq.w	8004cda <_printf_float+0xb6>
 8004fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004faa:	f10b 0b01 	add.w	fp, fp, #1
 8004fae:	e7b9      	b.n	8004f24 <_printf_float+0x300>
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	47b8      	blx	r7
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d1bf      	bne.n	8004f3e <_printf_float+0x31a>
 8004fbe:	e68c      	b.n	8004cda <_printf_float+0xb6>
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	eb08 020a 	add.w	r2, r8, sl
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d1c2      	bne.n	8004f56 <_printf_float+0x332>
 8004fd0:	e683      	b.n	8004cda <_printf_float+0xb6>
 8004fd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fd4:	2a01      	cmp	r2, #1
 8004fd6:	dc01      	bgt.n	8004fdc <_printf_float+0x3b8>
 8004fd8:	07db      	lsls	r3, r3, #31
 8004fda:	d539      	bpl.n	8005050 <_printf_float+0x42c>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4642      	mov	r2, r8
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b8      	blx	r7
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f43f ae77 	beq.w	8004cda <_printf_float+0xb6>
 8004fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f ae6f 	beq.w	8004cda <_printf_float+0xb6>
 8004ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005000:	2200      	movs	r2, #0
 8005002:	2300      	movs	r3, #0
 8005004:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005008:	f7fb fcce 	bl	80009a8 <__aeabi_dcmpeq>
 800500c:	b9d8      	cbnz	r0, 8005046 <_printf_float+0x422>
 800500e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005012:	f108 0201 	add.w	r2, r8, #1
 8005016:	4631      	mov	r1, r6
 8005018:	4628      	mov	r0, r5
 800501a:	47b8      	blx	r7
 800501c:	3001      	adds	r0, #1
 800501e:	d10e      	bne.n	800503e <_printf_float+0x41a>
 8005020:	e65b      	b.n	8004cda <_printf_float+0xb6>
 8005022:	2301      	movs	r3, #1
 8005024:	464a      	mov	r2, r9
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	f43f ae54 	beq.w	8004cda <_printf_float+0xb6>
 8005032:	f108 0801 	add.w	r8, r8, #1
 8005036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005038:	3b01      	subs	r3, #1
 800503a:	4543      	cmp	r3, r8
 800503c:	dcf1      	bgt.n	8005022 <_printf_float+0x3fe>
 800503e:	4653      	mov	r3, sl
 8005040:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005044:	e6de      	b.n	8004e04 <_printf_float+0x1e0>
 8005046:	f04f 0800 	mov.w	r8, #0
 800504a:	f104 091a 	add.w	r9, r4, #26
 800504e:	e7f2      	b.n	8005036 <_printf_float+0x412>
 8005050:	2301      	movs	r3, #1
 8005052:	4642      	mov	r2, r8
 8005054:	e7df      	b.n	8005016 <_printf_float+0x3f2>
 8005056:	2301      	movs	r3, #1
 8005058:	464a      	mov	r2, r9
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	f43f ae3a 	beq.w	8004cda <_printf_float+0xb6>
 8005066:	f108 0801 	add.w	r8, r8, #1
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800506e:	1a5b      	subs	r3, r3, r1
 8005070:	4543      	cmp	r3, r8
 8005072:	dcf0      	bgt.n	8005056 <_printf_float+0x432>
 8005074:	e6fb      	b.n	8004e6e <_printf_float+0x24a>
 8005076:	f04f 0800 	mov.w	r8, #0
 800507a:	f104 0919 	add.w	r9, r4, #25
 800507e:	e7f4      	b.n	800506a <_printf_float+0x446>

08005080 <_printf_common>:
 8005080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005084:	4616      	mov	r6, r2
 8005086:	4699      	mov	r9, r3
 8005088:	688a      	ldr	r2, [r1, #8]
 800508a:	690b      	ldr	r3, [r1, #16]
 800508c:	4607      	mov	r7, r0
 800508e:	4293      	cmp	r3, r2
 8005090:	bfb8      	it	lt
 8005092:	4613      	movlt	r3, r2
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800509a:	460c      	mov	r4, r1
 800509c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050a0:	b10a      	cbz	r2, 80050a6 <_printf_common+0x26>
 80050a2:	3301      	adds	r3, #1
 80050a4:	6033      	str	r3, [r6, #0]
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	0699      	lsls	r1, r3, #26
 80050aa:	bf42      	ittt	mi
 80050ac:	6833      	ldrmi	r3, [r6, #0]
 80050ae:	3302      	addmi	r3, #2
 80050b0:	6033      	strmi	r3, [r6, #0]
 80050b2:	6825      	ldr	r5, [r4, #0]
 80050b4:	f015 0506 	ands.w	r5, r5, #6
 80050b8:	d106      	bne.n	80050c8 <_printf_common+0x48>
 80050ba:	f104 0a19 	add.w	sl, r4, #25
 80050be:	68e3      	ldr	r3, [r4, #12]
 80050c0:	6832      	ldr	r2, [r6, #0]
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	42ab      	cmp	r3, r5
 80050c6:	dc2b      	bgt.n	8005120 <_printf_common+0xa0>
 80050c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050cc:	1e13      	subs	r3, r2, #0
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	bf18      	it	ne
 80050d2:	2301      	movne	r3, #1
 80050d4:	0692      	lsls	r2, r2, #26
 80050d6:	d430      	bmi.n	800513a <_printf_common+0xba>
 80050d8:	4649      	mov	r1, r9
 80050da:	4638      	mov	r0, r7
 80050dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050e0:	47c0      	blx	r8
 80050e2:	3001      	adds	r0, #1
 80050e4:	d023      	beq.n	800512e <_printf_common+0xae>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	6922      	ldr	r2, [r4, #16]
 80050ea:	f003 0306 	and.w	r3, r3, #6
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	bf14      	ite	ne
 80050f2:	2500      	movne	r5, #0
 80050f4:	6833      	ldreq	r3, [r6, #0]
 80050f6:	f04f 0600 	mov.w	r6, #0
 80050fa:	bf08      	it	eq
 80050fc:	68e5      	ldreq	r5, [r4, #12]
 80050fe:	f104 041a 	add.w	r4, r4, #26
 8005102:	bf08      	it	eq
 8005104:	1aed      	subeq	r5, r5, r3
 8005106:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800510a:	bf08      	it	eq
 800510c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005110:	4293      	cmp	r3, r2
 8005112:	bfc4      	itt	gt
 8005114:	1a9b      	subgt	r3, r3, r2
 8005116:	18ed      	addgt	r5, r5, r3
 8005118:	42b5      	cmp	r5, r6
 800511a:	d11a      	bne.n	8005152 <_printf_common+0xd2>
 800511c:	2000      	movs	r0, #0
 800511e:	e008      	b.n	8005132 <_printf_common+0xb2>
 8005120:	2301      	movs	r3, #1
 8005122:	4652      	mov	r2, sl
 8005124:	4649      	mov	r1, r9
 8005126:	4638      	mov	r0, r7
 8005128:	47c0      	blx	r8
 800512a:	3001      	adds	r0, #1
 800512c:	d103      	bne.n	8005136 <_printf_common+0xb6>
 800512e:	f04f 30ff 	mov.w	r0, #4294967295
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	3501      	adds	r5, #1
 8005138:	e7c1      	b.n	80050be <_printf_common+0x3e>
 800513a:	2030      	movs	r0, #48	; 0x30
 800513c:	18e1      	adds	r1, r4, r3
 800513e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005148:	4422      	add	r2, r4
 800514a:	3302      	adds	r3, #2
 800514c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005150:	e7c2      	b.n	80050d8 <_printf_common+0x58>
 8005152:	2301      	movs	r3, #1
 8005154:	4622      	mov	r2, r4
 8005156:	4649      	mov	r1, r9
 8005158:	4638      	mov	r0, r7
 800515a:	47c0      	blx	r8
 800515c:	3001      	adds	r0, #1
 800515e:	d0e6      	beq.n	800512e <_printf_common+0xae>
 8005160:	3601      	adds	r6, #1
 8005162:	e7d9      	b.n	8005118 <_printf_common+0x98>

08005164 <_printf_i>:
 8005164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	7e0f      	ldrb	r7, [r1, #24]
 800516a:	4691      	mov	r9, r2
 800516c:	2f78      	cmp	r7, #120	; 0x78
 800516e:	4680      	mov	r8, r0
 8005170:	460c      	mov	r4, r1
 8005172:	469a      	mov	sl, r3
 8005174:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800517a:	d807      	bhi.n	800518c <_printf_i+0x28>
 800517c:	2f62      	cmp	r7, #98	; 0x62
 800517e:	d80a      	bhi.n	8005196 <_printf_i+0x32>
 8005180:	2f00      	cmp	r7, #0
 8005182:	f000 80d5 	beq.w	8005330 <_printf_i+0x1cc>
 8005186:	2f58      	cmp	r7, #88	; 0x58
 8005188:	f000 80c1 	beq.w	800530e <_printf_i+0x1aa>
 800518c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005194:	e03a      	b.n	800520c <_printf_i+0xa8>
 8005196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800519a:	2b15      	cmp	r3, #21
 800519c:	d8f6      	bhi.n	800518c <_printf_i+0x28>
 800519e:	a101      	add	r1, pc, #4	; (adr r1, 80051a4 <_printf_i+0x40>)
 80051a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051a4:	080051fd 	.word	0x080051fd
 80051a8:	08005211 	.word	0x08005211
 80051ac:	0800518d 	.word	0x0800518d
 80051b0:	0800518d 	.word	0x0800518d
 80051b4:	0800518d 	.word	0x0800518d
 80051b8:	0800518d 	.word	0x0800518d
 80051bc:	08005211 	.word	0x08005211
 80051c0:	0800518d 	.word	0x0800518d
 80051c4:	0800518d 	.word	0x0800518d
 80051c8:	0800518d 	.word	0x0800518d
 80051cc:	0800518d 	.word	0x0800518d
 80051d0:	08005317 	.word	0x08005317
 80051d4:	0800523d 	.word	0x0800523d
 80051d8:	080052d1 	.word	0x080052d1
 80051dc:	0800518d 	.word	0x0800518d
 80051e0:	0800518d 	.word	0x0800518d
 80051e4:	08005339 	.word	0x08005339
 80051e8:	0800518d 	.word	0x0800518d
 80051ec:	0800523d 	.word	0x0800523d
 80051f0:	0800518d 	.word	0x0800518d
 80051f4:	0800518d 	.word	0x0800518d
 80051f8:	080052d9 	.word	0x080052d9
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	1d1a      	adds	r2, r3, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	602a      	str	r2, [r5, #0]
 8005204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800520c:	2301      	movs	r3, #1
 800520e:	e0a0      	b.n	8005352 <_printf_i+0x1ee>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	0607      	lsls	r7, r0, #24
 8005216:	f103 0104 	add.w	r1, r3, #4
 800521a:	6029      	str	r1, [r5, #0]
 800521c:	d501      	bpl.n	8005222 <_printf_i+0xbe>
 800521e:	681e      	ldr	r6, [r3, #0]
 8005220:	e003      	b.n	800522a <_printf_i+0xc6>
 8005222:	0646      	lsls	r6, r0, #25
 8005224:	d5fb      	bpl.n	800521e <_printf_i+0xba>
 8005226:	f9b3 6000 	ldrsh.w	r6, [r3]
 800522a:	2e00      	cmp	r6, #0
 800522c:	da03      	bge.n	8005236 <_printf_i+0xd2>
 800522e:	232d      	movs	r3, #45	; 0x2d
 8005230:	4276      	negs	r6, r6
 8005232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005236:	230a      	movs	r3, #10
 8005238:	4859      	ldr	r0, [pc, #356]	; (80053a0 <_printf_i+0x23c>)
 800523a:	e012      	b.n	8005262 <_printf_i+0xfe>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	1d19      	adds	r1, r3, #4
 8005242:	6029      	str	r1, [r5, #0]
 8005244:	0605      	lsls	r5, r0, #24
 8005246:	d501      	bpl.n	800524c <_printf_i+0xe8>
 8005248:	681e      	ldr	r6, [r3, #0]
 800524a:	e002      	b.n	8005252 <_printf_i+0xee>
 800524c:	0641      	lsls	r1, r0, #25
 800524e:	d5fb      	bpl.n	8005248 <_printf_i+0xe4>
 8005250:	881e      	ldrh	r6, [r3, #0]
 8005252:	2f6f      	cmp	r7, #111	; 0x6f
 8005254:	bf0c      	ite	eq
 8005256:	2308      	moveq	r3, #8
 8005258:	230a      	movne	r3, #10
 800525a:	4851      	ldr	r0, [pc, #324]	; (80053a0 <_printf_i+0x23c>)
 800525c:	2100      	movs	r1, #0
 800525e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005262:	6865      	ldr	r5, [r4, #4]
 8005264:	2d00      	cmp	r5, #0
 8005266:	bfa8      	it	ge
 8005268:	6821      	ldrge	r1, [r4, #0]
 800526a:	60a5      	str	r5, [r4, #8]
 800526c:	bfa4      	itt	ge
 800526e:	f021 0104 	bicge.w	r1, r1, #4
 8005272:	6021      	strge	r1, [r4, #0]
 8005274:	b90e      	cbnz	r6, 800527a <_printf_i+0x116>
 8005276:	2d00      	cmp	r5, #0
 8005278:	d04b      	beq.n	8005312 <_printf_i+0x1ae>
 800527a:	4615      	mov	r5, r2
 800527c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005280:	fb03 6711 	mls	r7, r3, r1, r6
 8005284:	5dc7      	ldrb	r7, [r0, r7]
 8005286:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800528a:	4637      	mov	r7, r6
 800528c:	42bb      	cmp	r3, r7
 800528e:	460e      	mov	r6, r1
 8005290:	d9f4      	bls.n	800527c <_printf_i+0x118>
 8005292:	2b08      	cmp	r3, #8
 8005294:	d10b      	bne.n	80052ae <_printf_i+0x14a>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	07de      	lsls	r6, r3, #31
 800529a:	d508      	bpl.n	80052ae <_printf_i+0x14a>
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	6861      	ldr	r1, [r4, #4]
 80052a0:	4299      	cmp	r1, r3
 80052a2:	bfde      	ittt	le
 80052a4:	2330      	movle	r3, #48	; 0x30
 80052a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ae:	1b52      	subs	r2, r2, r5
 80052b0:	6122      	str	r2, [r4, #16]
 80052b2:	464b      	mov	r3, r9
 80052b4:	4621      	mov	r1, r4
 80052b6:	4640      	mov	r0, r8
 80052b8:	f8cd a000 	str.w	sl, [sp]
 80052bc:	aa03      	add	r2, sp, #12
 80052be:	f7ff fedf 	bl	8005080 <_printf_common>
 80052c2:	3001      	adds	r0, #1
 80052c4:	d14a      	bne.n	800535c <_printf_i+0x1f8>
 80052c6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ca:	b004      	add	sp, #16
 80052cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	f043 0320 	orr.w	r3, r3, #32
 80052d6:	6023      	str	r3, [r4, #0]
 80052d8:	2778      	movs	r7, #120	; 0x78
 80052da:	4832      	ldr	r0, [pc, #200]	; (80053a4 <_printf_i+0x240>)
 80052dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	6829      	ldr	r1, [r5, #0]
 80052e4:	061f      	lsls	r7, r3, #24
 80052e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80052ea:	d402      	bmi.n	80052f2 <_printf_i+0x18e>
 80052ec:	065f      	lsls	r7, r3, #25
 80052ee:	bf48      	it	mi
 80052f0:	b2b6      	uxthmi	r6, r6
 80052f2:	07df      	lsls	r7, r3, #31
 80052f4:	bf48      	it	mi
 80052f6:	f043 0320 	orrmi.w	r3, r3, #32
 80052fa:	6029      	str	r1, [r5, #0]
 80052fc:	bf48      	it	mi
 80052fe:	6023      	strmi	r3, [r4, #0]
 8005300:	b91e      	cbnz	r6, 800530a <_printf_i+0x1a6>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	f023 0320 	bic.w	r3, r3, #32
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	2310      	movs	r3, #16
 800530c:	e7a6      	b.n	800525c <_printf_i+0xf8>
 800530e:	4824      	ldr	r0, [pc, #144]	; (80053a0 <_printf_i+0x23c>)
 8005310:	e7e4      	b.n	80052dc <_printf_i+0x178>
 8005312:	4615      	mov	r5, r2
 8005314:	e7bd      	b.n	8005292 <_printf_i+0x12e>
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	6826      	ldr	r6, [r4, #0]
 800531a:	1d18      	adds	r0, r3, #4
 800531c:	6961      	ldr	r1, [r4, #20]
 800531e:	6028      	str	r0, [r5, #0]
 8005320:	0635      	lsls	r5, r6, #24
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	d501      	bpl.n	800532a <_printf_i+0x1c6>
 8005326:	6019      	str	r1, [r3, #0]
 8005328:	e002      	b.n	8005330 <_printf_i+0x1cc>
 800532a:	0670      	lsls	r0, r6, #25
 800532c:	d5fb      	bpl.n	8005326 <_printf_i+0x1c2>
 800532e:	8019      	strh	r1, [r3, #0]
 8005330:	2300      	movs	r3, #0
 8005332:	4615      	mov	r5, r2
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	e7bc      	b.n	80052b2 <_printf_i+0x14e>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	2100      	movs	r1, #0
 800533c:	1d1a      	adds	r2, r3, #4
 800533e:	602a      	str	r2, [r5, #0]
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	6862      	ldr	r2, [r4, #4]
 8005344:	4628      	mov	r0, r5
 8005346:	f000 fbcf 	bl	8005ae8 <memchr>
 800534a:	b108      	cbz	r0, 8005350 <_printf_i+0x1ec>
 800534c:	1b40      	subs	r0, r0, r5
 800534e:	6060      	str	r0, [r4, #4]
 8005350:	6863      	ldr	r3, [r4, #4]
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	2300      	movs	r3, #0
 8005356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800535a:	e7aa      	b.n	80052b2 <_printf_i+0x14e>
 800535c:	462a      	mov	r2, r5
 800535e:	4649      	mov	r1, r9
 8005360:	4640      	mov	r0, r8
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	47d0      	blx	sl
 8005366:	3001      	adds	r0, #1
 8005368:	d0ad      	beq.n	80052c6 <_printf_i+0x162>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	079b      	lsls	r3, r3, #30
 800536e:	d413      	bmi.n	8005398 <_printf_i+0x234>
 8005370:	68e0      	ldr	r0, [r4, #12]
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	4298      	cmp	r0, r3
 8005376:	bfb8      	it	lt
 8005378:	4618      	movlt	r0, r3
 800537a:	e7a6      	b.n	80052ca <_printf_i+0x166>
 800537c:	2301      	movs	r3, #1
 800537e:	4632      	mov	r2, r6
 8005380:	4649      	mov	r1, r9
 8005382:	4640      	mov	r0, r8
 8005384:	47d0      	blx	sl
 8005386:	3001      	adds	r0, #1
 8005388:	d09d      	beq.n	80052c6 <_printf_i+0x162>
 800538a:	3501      	adds	r5, #1
 800538c:	68e3      	ldr	r3, [r4, #12]
 800538e:	9903      	ldr	r1, [sp, #12]
 8005390:	1a5b      	subs	r3, r3, r1
 8005392:	42ab      	cmp	r3, r5
 8005394:	dcf2      	bgt.n	800537c <_printf_i+0x218>
 8005396:	e7eb      	b.n	8005370 <_printf_i+0x20c>
 8005398:	2500      	movs	r5, #0
 800539a:	f104 0619 	add.w	r6, r4, #25
 800539e:	e7f5      	b.n	800538c <_printf_i+0x228>
 80053a0:	08009284 	.word	0x08009284
 80053a4:	08009295 	.word	0x08009295

080053a8 <_scanf_float>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	b087      	sub	sp, #28
 80053ae:	9303      	str	r3, [sp, #12]
 80053b0:	688b      	ldr	r3, [r1, #8]
 80053b2:	4617      	mov	r7, r2
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80053ba:	bf85      	ittet	hi
 80053bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80053c0:	195b      	addhi	r3, r3, r5
 80053c2:	2300      	movls	r3, #0
 80053c4:	9302      	strhi	r3, [sp, #8]
 80053c6:	bf88      	it	hi
 80053c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80053cc:	468b      	mov	fp, r1
 80053ce:	f04f 0500 	mov.w	r5, #0
 80053d2:	bf8c      	ite	hi
 80053d4:	608b      	strhi	r3, [r1, #8]
 80053d6:	9302      	strls	r3, [sp, #8]
 80053d8:	680b      	ldr	r3, [r1, #0]
 80053da:	4680      	mov	r8, r0
 80053dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80053e0:	f84b 3b1c 	str.w	r3, [fp], #28
 80053e4:	460c      	mov	r4, r1
 80053e6:	465e      	mov	r6, fp
 80053e8:	46aa      	mov	sl, r5
 80053ea:	46a9      	mov	r9, r5
 80053ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80053f0:	9501      	str	r5, [sp, #4]
 80053f2:	68a2      	ldr	r2, [r4, #8]
 80053f4:	b152      	cbz	r2, 800540c <_scanf_float+0x64>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b4e      	cmp	r3, #78	; 0x4e
 80053fc:	d864      	bhi.n	80054c8 <_scanf_float+0x120>
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d83c      	bhi.n	800547c <_scanf_float+0xd4>
 8005402:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005406:	b2c8      	uxtb	r0, r1
 8005408:	280e      	cmp	r0, #14
 800540a:	d93a      	bls.n	8005482 <_scanf_float+0xda>
 800540c:	f1b9 0f00 	cmp.w	r9, #0
 8005410:	d003      	beq.n	800541a <_scanf_float+0x72>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800541e:	f1ba 0f01 	cmp.w	sl, #1
 8005422:	f200 8113 	bhi.w	800564c <_scanf_float+0x2a4>
 8005426:	455e      	cmp	r6, fp
 8005428:	f200 8105 	bhi.w	8005636 <_scanf_float+0x28e>
 800542c:	2501      	movs	r5, #1
 800542e:	4628      	mov	r0, r5
 8005430:	b007      	add	sp, #28
 8005432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005436:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800543a:	2a0d      	cmp	r2, #13
 800543c:	d8e6      	bhi.n	800540c <_scanf_float+0x64>
 800543e:	a101      	add	r1, pc, #4	; (adr r1, 8005444 <_scanf_float+0x9c>)
 8005440:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005444:	08005583 	.word	0x08005583
 8005448:	0800540d 	.word	0x0800540d
 800544c:	0800540d 	.word	0x0800540d
 8005450:	0800540d 	.word	0x0800540d
 8005454:	080055e3 	.word	0x080055e3
 8005458:	080055bb 	.word	0x080055bb
 800545c:	0800540d 	.word	0x0800540d
 8005460:	0800540d 	.word	0x0800540d
 8005464:	08005591 	.word	0x08005591
 8005468:	0800540d 	.word	0x0800540d
 800546c:	0800540d 	.word	0x0800540d
 8005470:	0800540d 	.word	0x0800540d
 8005474:	0800540d 	.word	0x0800540d
 8005478:	08005549 	.word	0x08005549
 800547c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005480:	e7db      	b.n	800543a <_scanf_float+0x92>
 8005482:	290e      	cmp	r1, #14
 8005484:	d8c2      	bhi.n	800540c <_scanf_float+0x64>
 8005486:	a001      	add	r0, pc, #4	; (adr r0, 800548c <_scanf_float+0xe4>)
 8005488:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800548c:	0800553b 	.word	0x0800553b
 8005490:	0800540d 	.word	0x0800540d
 8005494:	0800553b 	.word	0x0800553b
 8005498:	080055cf 	.word	0x080055cf
 800549c:	0800540d 	.word	0x0800540d
 80054a0:	080054e9 	.word	0x080054e9
 80054a4:	08005525 	.word	0x08005525
 80054a8:	08005525 	.word	0x08005525
 80054ac:	08005525 	.word	0x08005525
 80054b0:	08005525 	.word	0x08005525
 80054b4:	08005525 	.word	0x08005525
 80054b8:	08005525 	.word	0x08005525
 80054bc:	08005525 	.word	0x08005525
 80054c0:	08005525 	.word	0x08005525
 80054c4:	08005525 	.word	0x08005525
 80054c8:	2b6e      	cmp	r3, #110	; 0x6e
 80054ca:	d809      	bhi.n	80054e0 <_scanf_float+0x138>
 80054cc:	2b60      	cmp	r3, #96	; 0x60
 80054ce:	d8b2      	bhi.n	8005436 <_scanf_float+0x8e>
 80054d0:	2b54      	cmp	r3, #84	; 0x54
 80054d2:	d077      	beq.n	80055c4 <_scanf_float+0x21c>
 80054d4:	2b59      	cmp	r3, #89	; 0x59
 80054d6:	d199      	bne.n	800540c <_scanf_float+0x64>
 80054d8:	2d07      	cmp	r5, #7
 80054da:	d197      	bne.n	800540c <_scanf_float+0x64>
 80054dc:	2508      	movs	r5, #8
 80054de:	e029      	b.n	8005534 <_scanf_float+0x18c>
 80054e0:	2b74      	cmp	r3, #116	; 0x74
 80054e2:	d06f      	beq.n	80055c4 <_scanf_float+0x21c>
 80054e4:	2b79      	cmp	r3, #121	; 0x79
 80054e6:	e7f6      	b.n	80054d6 <_scanf_float+0x12e>
 80054e8:	6821      	ldr	r1, [r4, #0]
 80054ea:	05c8      	lsls	r0, r1, #23
 80054ec:	d51a      	bpl.n	8005524 <_scanf_float+0x17c>
 80054ee:	9b02      	ldr	r3, [sp, #8]
 80054f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80054f4:	6021      	str	r1, [r4, #0]
 80054f6:	f109 0901 	add.w	r9, r9, #1
 80054fa:	b11b      	cbz	r3, 8005504 <_scanf_float+0x15c>
 80054fc:	3b01      	subs	r3, #1
 80054fe:	3201      	adds	r2, #1
 8005500:	9302      	str	r3, [sp, #8]
 8005502:	60a2      	str	r2, [r4, #8]
 8005504:	68a3      	ldr	r3, [r4, #8]
 8005506:	3b01      	subs	r3, #1
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	3301      	adds	r3, #1
 800550e:	6123      	str	r3, [r4, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	f340 8084 	ble.w	8005624 <_scanf_float+0x27c>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	e766      	b.n	80053f2 <_scanf_float+0x4a>
 8005524:	eb1a 0f05 	cmn.w	sl, r5
 8005528:	f47f af70 	bne.w	800540c <_scanf_float+0x64>
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005532:	6022      	str	r2, [r4, #0]
 8005534:	f806 3b01 	strb.w	r3, [r6], #1
 8005538:	e7e4      	b.n	8005504 <_scanf_float+0x15c>
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	0610      	lsls	r0, r2, #24
 800553e:	f57f af65 	bpl.w	800540c <_scanf_float+0x64>
 8005542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005546:	e7f4      	b.n	8005532 <_scanf_float+0x18a>
 8005548:	f1ba 0f00 	cmp.w	sl, #0
 800554c:	d10e      	bne.n	800556c <_scanf_float+0x1c4>
 800554e:	f1b9 0f00 	cmp.w	r9, #0
 8005552:	d10e      	bne.n	8005572 <_scanf_float+0x1ca>
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800555a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800555e:	d108      	bne.n	8005572 <_scanf_float+0x1ca>
 8005560:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005564:	f04f 0a01 	mov.w	sl, #1
 8005568:	6022      	str	r2, [r4, #0]
 800556a:	e7e3      	b.n	8005534 <_scanf_float+0x18c>
 800556c:	f1ba 0f02 	cmp.w	sl, #2
 8005570:	d055      	beq.n	800561e <_scanf_float+0x276>
 8005572:	2d01      	cmp	r5, #1
 8005574:	d002      	beq.n	800557c <_scanf_float+0x1d4>
 8005576:	2d04      	cmp	r5, #4
 8005578:	f47f af48 	bne.w	800540c <_scanf_float+0x64>
 800557c:	3501      	adds	r5, #1
 800557e:	b2ed      	uxtb	r5, r5
 8005580:	e7d8      	b.n	8005534 <_scanf_float+0x18c>
 8005582:	f1ba 0f01 	cmp.w	sl, #1
 8005586:	f47f af41 	bne.w	800540c <_scanf_float+0x64>
 800558a:	f04f 0a02 	mov.w	sl, #2
 800558e:	e7d1      	b.n	8005534 <_scanf_float+0x18c>
 8005590:	b97d      	cbnz	r5, 80055b2 <_scanf_float+0x20a>
 8005592:	f1b9 0f00 	cmp.w	r9, #0
 8005596:	f47f af3c 	bne.w	8005412 <_scanf_float+0x6a>
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055a4:	f47f af39 	bne.w	800541a <_scanf_float+0x72>
 80055a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055ac:	2501      	movs	r5, #1
 80055ae:	6022      	str	r2, [r4, #0]
 80055b0:	e7c0      	b.n	8005534 <_scanf_float+0x18c>
 80055b2:	2d03      	cmp	r5, #3
 80055b4:	d0e2      	beq.n	800557c <_scanf_float+0x1d4>
 80055b6:	2d05      	cmp	r5, #5
 80055b8:	e7de      	b.n	8005578 <_scanf_float+0x1d0>
 80055ba:	2d02      	cmp	r5, #2
 80055bc:	f47f af26 	bne.w	800540c <_scanf_float+0x64>
 80055c0:	2503      	movs	r5, #3
 80055c2:	e7b7      	b.n	8005534 <_scanf_float+0x18c>
 80055c4:	2d06      	cmp	r5, #6
 80055c6:	f47f af21 	bne.w	800540c <_scanf_float+0x64>
 80055ca:	2507      	movs	r5, #7
 80055cc:	e7b2      	b.n	8005534 <_scanf_float+0x18c>
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	0591      	lsls	r1, r2, #22
 80055d2:	f57f af1b 	bpl.w	800540c <_scanf_float+0x64>
 80055d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80055da:	6022      	str	r2, [r4, #0]
 80055dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80055e0:	e7a8      	b.n	8005534 <_scanf_float+0x18c>
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80055e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80055ec:	d006      	beq.n	80055fc <_scanf_float+0x254>
 80055ee:	0550      	lsls	r0, r2, #21
 80055f0:	f57f af0c 	bpl.w	800540c <_scanf_float+0x64>
 80055f4:	f1b9 0f00 	cmp.w	r9, #0
 80055f8:	f43f af0f 	beq.w	800541a <_scanf_float+0x72>
 80055fc:	0591      	lsls	r1, r2, #22
 80055fe:	bf58      	it	pl
 8005600:	9901      	ldrpl	r1, [sp, #4]
 8005602:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005606:	bf58      	it	pl
 8005608:	eba9 0101 	subpl.w	r1, r9, r1
 800560c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005610:	f04f 0900 	mov.w	r9, #0
 8005614:	bf58      	it	pl
 8005616:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800561a:	6022      	str	r2, [r4, #0]
 800561c:	e78a      	b.n	8005534 <_scanf_float+0x18c>
 800561e:	f04f 0a03 	mov.w	sl, #3
 8005622:	e787      	b.n	8005534 <_scanf_float+0x18c>
 8005624:	4639      	mov	r1, r7
 8005626:	4640      	mov	r0, r8
 8005628:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800562c:	4798      	blx	r3
 800562e:	2800      	cmp	r0, #0
 8005630:	f43f aedf 	beq.w	80053f2 <_scanf_float+0x4a>
 8005634:	e6ea      	b.n	800540c <_scanf_float+0x64>
 8005636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800563a:	463a      	mov	r2, r7
 800563c:	4640      	mov	r0, r8
 800563e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005642:	4798      	blx	r3
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	3b01      	subs	r3, #1
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	e6ec      	b.n	8005426 <_scanf_float+0x7e>
 800564c:	1e6b      	subs	r3, r5, #1
 800564e:	2b06      	cmp	r3, #6
 8005650:	d825      	bhi.n	800569e <_scanf_float+0x2f6>
 8005652:	2d02      	cmp	r5, #2
 8005654:	d836      	bhi.n	80056c4 <_scanf_float+0x31c>
 8005656:	455e      	cmp	r6, fp
 8005658:	f67f aee8 	bls.w	800542c <_scanf_float+0x84>
 800565c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005660:	463a      	mov	r2, r7
 8005662:	4640      	mov	r0, r8
 8005664:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005668:	4798      	blx	r3
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	3b01      	subs	r3, #1
 800566e:	6123      	str	r3, [r4, #16]
 8005670:	e7f1      	b.n	8005656 <_scanf_float+0x2ae>
 8005672:	9802      	ldr	r0, [sp, #8]
 8005674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005678:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800567c:	463a      	mov	r2, r7
 800567e:	9002      	str	r0, [sp, #8]
 8005680:	4640      	mov	r0, r8
 8005682:	4798      	blx	r3
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	3b01      	subs	r3, #1
 8005688:	6123      	str	r3, [r4, #16]
 800568a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800568e:	fa5f fa8a 	uxtb.w	sl, sl
 8005692:	f1ba 0f02 	cmp.w	sl, #2
 8005696:	d1ec      	bne.n	8005672 <_scanf_float+0x2ca>
 8005698:	3d03      	subs	r5, #3
 800569a:	b2ed      	uxtb	r5, r5
 800569c:	1b76      	subs	r6, r6, r5
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	05da      	lsls	r2, r3, #23
 80056a2:	d52f      	bpl.n	8005704 <_scanf_float+0x35c>
 80056a4:	055b      	lsls	r3, r3, #21
 80056a6:	d510      	bpl.n	80056ca <_scanf_float+0x322>
 80056a8:	455e      	cmp	r6, fp
 80056aa:	f67f aebf 	bls.w	800542c <_scanf_float+0x84>
 80056ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056b2:	463a      	mov	r2, r7
 80056b4:	4640      	mov	r0, r8
 80056b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056ba:	4798      	blx	r3
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	3b01      	subs	r3, #1
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	e7f1      	b.n	80056a8 <_scanf_float+0x300>
 80056c4:	46aa      	mov	sl, r5
 80056c6:	9602      	str	r6, [sp, #8]
 80056c8:	e7df      	b.n	800568a <_scanf_float+0x2e2>
 80056ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056ce:	6923      	ldr	r3, [r4, #16]
 80056d0:	2965      	cmp	r1, #101	; 0x65
 80056d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80056d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	d00c      	beq.n	80056f8 <_scanf_float+0x350>
 80056de:	2945      	cmp	r1, #69	; 0x45
 80056e0:	d00a      	beq.n	80056f8 <_scanf_float+0x350>
 80056e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056e6:	463a      	mov	r2, r7
 80056e8:	4640      	mov	r0, r8
 80056ea:	4798      	blx	r3
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	1eb5      	subs	r5, r6, #2
 80056f6:	6123      	str	r3, [r4, #16]
 80056f8:	463a      	mov	r2, r7
 80056fa:	4640      	mov	r0, r8
 80056fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005700:	4798      	blx	r3
 8005702:	462e      	mov	r6, r5
 8005704:	6825      	ldr	r5, [r4, #0]
 8005706:	f015 0510 	ands.w	r5, r5, #16
 800570a:	d155      	bne.n	80057b8 <_scanf_float+0x410>
 800570c:	7035      	strb	r5, [r6, #0]
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005718:	d11d      	bne.n	8005756 <_scanf_float+0x3ae>
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	454b      	cmp	r3, r9
 800571e:	eba3 0209 	sub.w	r2, r3, r9
 8005722:	d125      	bne.n	8005770 <_scanf_float+0x3c8>
 8005724:	2200      	movs	r2, #0
 8005726:	4659      	mov	r1, fp
 8005728:	4640      	mov	r0, r8
 800572a:	f002 fc0d 	bl	8007f48 <_strtod_r>
 800572e:	9b03      	ldr	r3, [sp, #12]
 8005730:	f8d4 c000 	ldr.w	ip, [r4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f01c 0f02 	tst.w	ip, #2
 800573a:	4606      	mov	r6, r0
 800573c:	460f      	mov	r7, r1
 800573e:	f103 0204 	add.w	r2, r3, #4
 8005742:	d020      	beq.n	8005786 <_scanf_float+0x3de>
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	600a      	str	r2, [r1, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	e9c3 6700 	strd	r6, r7, [r3]
 800574e:	68e3      	ldr	r3, [r4, #12]
 8005750:	3301      	adds	r3, #1
 8005752:	60e3      	str	r3, [r4, #12]
 8005754:	e66b      	b.n	800542e <_scanf_float+0x86>
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0e3      	beq.n	8005724 <_scanf_float+0x37c>
 800575c:	9905      	ldr	r1, [sp, #20]
 800575e:	230a      	movs	r3, #10
 8005760:	462a      	mov	r2, r5
 8005762:	4640      	mov	r0, r8
 8005764:	3101      	adds	r1, #1
 8005766:	f002 fc73 	bl	8008050 <_strtol_r>
 800576a:	9b04      	ldr	r3, [sp, #16]
 800576c:	9e05      	ldr	r6, [sp, #20]
 800576e:	1ac2      	subs	r2, r0, r3
 8005770:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005774:	429e      	cmp	r6, r3
 8005776:	bf28      	it	cs
 8005778:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800577c:	4630      	mov	r0, r6
 800577e:	490f      	ldr	r1, [pc, #60]	; (80057bc <_scanf_float+0x414>)
 8005780:	f000 f8d0 	bl	8005924 <siprintf>
 8005784:	e7ce      	b.n	8005724 <_scanf_float+0x37c>
 8005786:	f01c 0f04 	tst.w	ip, #4
 800578a:	d1db      	bne.n	8005744 <_scanf_float+0x39c>
 800578c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005790:	f8cc 2000 	str.w	r2, [ip]
 8005794:	f8d3 8000 	ldr.w	r8, [r3]
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	f7fb f936 	bl	8000a0c <__aeabi_dcmpun>
 80057a0:	b128      	cbz	r0, 80057ae <_scanf_float+0x406>
 80057a2:	4807      	ldr	r0, [pc, #28]	; (80057c0 <_scanf_float+0x418>)
 80057a4:	f000 f9ae 	bl	8005b04 <nanf>
 80057a8:	f8c8 0000 	str.w	r0, [r8]
 80057ac:	e7cf      	b.n	800574e <_scanf_float+0x3a6>
 80057ae:	4630      	mov	r0, r6
 80057b0:	4639      	mov	r1, r7
 80057b2:	f7fb f989 	bl	8000ac8 <__aeabi_d2f>
 80057b6:	e7f7      	b.n	80057a8 <_scanf_float+0x400>
 80057b8:	2500      	movs	r5, #0
 80057ba:	e638      	b.n	800542e <_scanf_float+0x86>
 80057bc:	080092a6 	.word	0x080092a6
 80057c0:	0800963d 	.word	0x0800963d

080057c4 <std>:
 80057c4:	2300      	movs	r3, #0
 80057c6:	b510      	push	{r4, lr}
 80057c8:	4604      	mov	r4, r0
 80057ca:	e9c0 3300 	strd	r3, r3, [r0]
 80057ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057d2:	6083      	str	r3, [r0, #8]
 80057d4:	8181      	strh	r1, [r0, #12]
 80057d6:	6643      	str	r3, [r0, #100]	; 0x64
 80057d8:	81c2      	strh	r2, [r0, #14]
 80057da:	6183      	str	r3, [r0, #24]
 80057dc:	4619      	mov	r1, r3
 80057de:	2208      	movs	r2, #8
 80057e0:	305c      	adds	r0, #92	; 0x5c
 80057e2:	f000 f902 	bl	80059ea <memset>
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <std+0x38>)
 80057e8:	6224      	str	r4, [r4, #32]
 80057ea:	6263      	str	r3, [r4, #36]	; 0x24
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <std+0x3c>)
 80057ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <std+0x40>)
 80057f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <std+0x44>)
 80057f6:	6323      	str	r3, [r4, #48]	; 0x30
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	bf00      	nop
 80057fc:	08005965 	.word	0x08005965
 8005800:	08005987 	.word	0x08005987
 8005804:	080059bf 	.word	0x080059bf
 8005808:	080059e3 	.word	0x080059e3

0800580c <stdio_exit_handler>:
 800580c:	4a02      	ldr	r2, [pc, #8]	; (8005818 <stdio_exit_handler+0xc>)
 800580e:	4903      	ldr	r1, [pc, #12]	; (800581c <stdio_exit_handler+0x10>)
 8005810:	4803      	ldr	r0, [pc, #12]	; (8005820 <stdio_exit_handler+0x14>)
 8005812:	f000 b869 	b.w	80058e8 <_fwalk_sglue>
 8005816:	bf00      	nop
 8005818:	2000001c 	.word	0x2000001c
 800581c:	08008409 	.word	0x08008409
 8005820:	20000028 	.word	0x20000028

08005824 <cleanup_stdio>:
 8005824:	6841      	ldr	r1, [r0, #4]
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <cleanup_stdio+0x34>)
 8005828:	b510      	push	{r4, lr}
 800582a:	4299      	cmp	r1, r3
 800582c:	4604      	mov	r4, r0
 800582e:	d001      	beq.n	8005834 <cleanup_stdio+0x10>
 8005830:	f002 fdea 	bl	8008408 <_fflush_r>
 8005834:	68a1      	ldr	r1, [r4, #8]
 8005836:	4b09      	ldr	r3, [pc, #36]	; (800585c <cleanup_stdio+0x38>)
 8005838:	4299      	cmp	r1, r3
 800583a:	d002      	beq.n	8005842 <cleanup_stdio+0x1e>
 800583c:	4620      	mov	r0, r4
 800583e:	f002 fde3 	bl	8008408 <_fflush_r>
 8005842:	68e1      	ldr	r1, [r4, #12]
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <cleanup_stdio+0x3c>)
 8005846:	4299      	cmp	r1, r3
 8005848:	d004      	beq.n	8005854 <cleanup_stdio+0x30>
 800584a:	4620      	mov	r0, r4
 800584c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005850:	f002 bdda 	b.w	8008408 <_fflush_r>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	bf00      	nop
 8005858:	20000340 	.word	0x20000340
 800585c:	200003a8 	.word	0x200003a8
 8005860:	20000410 	.word	0x20000410

08005864 <global_stdio_init.part.0>:
 8005864:	b510      	push	{r4, lr}
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <global_stdio_init.part.0+0x30>)
 8005868:	4c0b      	ldr	r4, [pc, #44]	; (8005898 <global_stdio_init.part.0+0x34>)
 800586a:	4a0c      	ldr	r2, [pc, #48]	; (800589c <global_stdio_init.part.0+0x38>)
 800586c:	4620      	mov	r0, r4
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	2104      	movs	r1, #4
 8005872:	2200      	movs	r2, #0
 8005874:	f7ff ffa6 	bl	80057c4 <std>
 8005878:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800587c:	2201      	movs	r2, #1
 800587e:	2109      	movs	r1, #9
 8005880:	f7ff ffa0 	bl	80057c4 <std>
 8005884:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005888:	2202      	movs	r2, #2
 800588a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588e:	2112      	movs	r1, #18
 8005890:	f7ff bf98 	b.w	80057c4 <std>
 8005894:	20000478 	.word	0x20000478
 8005898:	20000340 	.word	0x20000340
 800589c:	0800580d 	.word	0x0800580d

080058a0 <__sfp_lock_acquire>:
 80058a0:	4801      	ldr	r0, [pc, #4]	; (80058a8 <__sfp_lock_acquire+0x8>)
 80058a2:	f000 b91f 	b.w	8005ae4 <__retarget_lock_acquire_recursive>
 80058a6:	bf00      	nop
 80058a8:	20000481 	.word	0x20000481

080058ac <__sfp_lock_release>:
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <__sfp_lock_release+0x8>)
 80058ae:	f000 b91a 	b.w	8005ae6 <__retarget_lock_release_recursive>
 80058b2:	bf00      	nop
 80058b4:	20000481 	.word	0x20000481

080058b8 <__sinit>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	f7ff fff0 	bl	80058a0 <__sfp_lock_acquire>
 80058c0:	6a23      	ldr	r3, [r4, #32]
 80058c2:	b11b      	cbz	r3, 80058cc <__sinit+0x14>
 80058c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c8:	f7ff bff0 	b.w	80058ac <__sfp_lock_release>
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <__sinit+0x28>)
 80058ce:	6223      	str	r3, [r4, #32]
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <__sinit+0x2c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f5      	bne.n	80058c4 <__sinit+0xc>
 80058d8:	f7ff ffc4 	bl	8005864 <global_stdio_init.part.0>
 80058dc:	e7f2      	b.n	80058c4 <__sinit+0xc>
 80058de:	bf00      	nop
 80058e0:	08005825 	.word	0x08005825
 80058e4:	20000478 	.word	0x20000478

080058e8 <_fwalk_sglue>:
 80058e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ec:	4607      	mov	r7, r0
 80058ee:	4688      	mov	r8, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	2600      	movs	r6, #0
 80058f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058f8:	f1b9 0901 	subs.w	r9, r9, #1
 80058fc:	d505      	bpl.n	800590a <_fwalk_sglue+0x22>
 80058fe:	6824      	ldr	r4, [r4, #0]
 8005900:	2c00      	cmp	r4, #0
 8005902:	d1f7      	bne.n	80058f4 <_fwalk_sglue+0xc>
 8005904:	4630      	mov	r0, r6
 8005906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590a:	89ab      	ldrh	r3, [r5, #12]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d907      	bls.n	8005920 <_fwalk_sglue+0x38>
 8005910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005914:	3301      	adds	r3, #1
 8005916:	d003      	beq.n	8005920 <_fwalk_sglue+0x38>
 8005918:	4629      	mov	r1, r5
 800591a:	4638      	mov	r0, r7
 800591c:	47c0      	blx	r8
 800591e:	4306      	orrs	r6, r0
 8005920:	3568      	adds	r5, #104	; 0x68
 8005922:	e7e9      	b.n	80058f8 <_fwalk_sglue+0x10>

08005924 <siprintf>:
 8005924:	b40e      	push	{r1, r2, r3}
 8005926:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800592a:	b500      	push	{lr}
 800592c:	b09c      	sub	sp, #112	; 0x70
 800592e:	ab1d      	add	r3, sp, #116	; 0x74
 8005930:	9002      	str	r0, [sp, #8]
 8005932:	9006      	str	r0, [sp, #24]
 8005934:	9107      	str	r1, [sp, #28]
 8005936:	9104      	str	r1, [sp, #16]
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <siprintf+0x38>)
 800593a:	4909      	ldr	r1, [pc, #36]	; (8005960 <siprintf+0x3c>)
 800593c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005940:	9105      	str	r1, [sp, #20]
 8005942:	6800      	ldr	r0, [r0, #0]
 8005944:	a902      	add	r1, sp, #8
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	f002 fbde 	bl	8008108 <_svfiprintf_r>
 800594c:	2200      	movs	r2, #0
 800594e:	9b02      	ldr	r3, [sp, #8]
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	b01c      	add	sp, #112	; 0x70
 8005954:	f85d eb04 	ldr.w	lr, [sp], #4
 8005958:	b003      	add	sp, #12
 800595a:	4770      	bx	lr
 800595c:	20000074 	.word	0x20000074
 8005960:	ffff0208 	.word	0xffff0208

08005964 <__sread>:
 8005964:	b510      	push	{r4, lr}
 8005966:	460c      	mov	r4, r1
 8005968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596c:	f000 f86c 	bl	8005a48 <_read_r>
 8005970:	2800      	cmp	r0, #0
 8005972:	bfab      	itete	ge
 8005974:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005976:	89a3      	ldrhlt	r3, [r4, #12]
 8005978:	181b      	addge	r3, r3, r0
 800597a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800597e:	bfac      	ite	ge
 8005980:	6563      	strge	r3, [r4, #84]	; 0x54
 8005982:	81a3      	strhlt	r3, [r4, #12]
 8005984:	bd10      	pop	{r4, pc}

08005986 <__swrite>:
 8005986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598a:	461f      	mov	r7, r3
 800598c:	898b      	ldrh	r3, [r1, #12]
 800598e:	4605      	mov	r5, r0
 8005990:	05db      	lsls	r3, r3, #23
 8005992:	460c      	mov	r4, r1
 8005994:	4616      	mov	r6, r2
 8005996:	d505      	bpl.n	80059a4 <__swrite+0x1e>
 8005998:	2302      	movs	r3, #2
 800599a:	2200      	movs	r2, #0
 800599c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a0:	f000 f840 	bl	8005a24 <_lseek_r>
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	4632      	mov	r2, r6
 80059a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	4628      	mov	r0, r5
 80059b0:	463b      	mov	r3, r7
 80059b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ba:	f000 b857 	b.w	8005a6c <_write_r>

080059be <__sseek>:
 80059be:	b510      	push	{r4, lr}
 80059c0:	460c      	mov	r4, r1
 80059c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c6:	f000 f82d 	bl	8005a24 <_lseek_r>
 80059ca:	1c43      	adds	r3, r0, #1
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	bf15      	itete	ne
 80059d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80059d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059da:	81a3      	strheq	r3, [r4, #12]
 80059dc:	bf18      	it	ne
 80059de:	81a3      	strhne	r3, [r4, #12]
 80059e0:	bd10      	pop	{r4, pc}

080059e2 <__sclose>:
 80059e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e6:	f000 b80d 	b.w	8005a04 <_close_r>

080059ea <memset>:
 80059ea:	4603      	mov	r3, r0
 80059ec:	4402      	add	r2, r0
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d100      	bne.n	80059f4 <memset+0xa>
 80059f2:	4770      	bx	lr
 80059f4:	f803 1b01 	strb.w	r1, [r3], #1
 80059f8:	e7f9      	b.n	80059ee <memset+0x4>
	...

080059fc <_localeconv_r>:
 80059fc:	4800      	ldr	r0, [pc, #0]	; (8005a00 <_localeconv_r+0x4>)
 80059fe:	4770      	bx	lr
 8005a00:	20000168 	.word	0x20000168

08005a04 <_close_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	2300      	movs	r3, #0
 8005a08:	4d05      	ldr	r5, [pc, #20]	; (8005a20 <_close_r+0x1c>)
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	f7fb fc8c 	bl	800132c <_close>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_close_r+0x1a>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_close_r+0x1a>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	2000047c 	.word	0x2000047c

08005a24 <_lseek_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4d05      	ldr	r5, [pc, #20]	; (8005a44 <_lseek_r+0x20>)
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fb fc9e 	bl	8001374 <_lseek>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_lseek_r+0x1e>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_lseek_r+0x1e>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	2000047c 	.word	0x2000047c

08005a48 <_read_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	4611      	mov	r1, r2
 8005a50:	2200      	movs	r2, #0
 8005a52:	4d05      	ldr	r5, [pc, #20]	; (8005a68 <_read_r+0x20>)
 8005a54:	602a      	str	r2, [r5, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f7fb fc2f 	bl	80012ba <_read>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d102      	bne.n	8005a66 <_read_r+0x1e>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	b103      	cbz	r3, 8005a66 <_read_r+0x1e>
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
 8005a68:	2000047c 	.word	0x2000047c

08005a6c <_write_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4608      	mov	r0, r1
 8005a72:	4611      	mov	r1, r2
 8005a74:	2200      	movs	r2, #0
 8005a76:	4d05      	ldr	r5, [pc, #20]	; (8005a8c <_write_r+0x20>)
 8005a78:	602a      	str	r2, [r5, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f7fb fc3a 	bl	80012f4 <_write>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_write_r+0x1e>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_write_r+0x1e>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	2000047c 	.word	0x2000047c

08005a90 <__errno>:
 8005a90:	4b01      	ldr	r3, [pc, #4]	; (8005a98 <__errno+0x8>)
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000074 	.word	0x20000074

08005a9c <__libc_init_array>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	4d0c      	ldr	r5, [pc, #48]	; (8005ad4 <__libc_init_array+0x38>)
 8005aa2:	4c0d      	ldr	r4, [pc, #52]	; (8005ad8 <__libc_init_array+0x3c>)
 8005aa4:	1b64      	subs	r4, r4, r5
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	42a6      	cmp	r6, r4
 8005aaa:	d109      	bne.n	8005ac0 <__libc_init_array+0x24>
 8005aac:	f003 fbbe 	bl	800922c <_init>
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	4d0a      	ldr	r5, [pc, #40]	; (8005adc <__libc_init_array+0x40>)
 8005ab4:	4c0a      	ldr	r4, [pc, #40]	; (8005ae0 <__libc_init_array+0x44>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	42a6      	cmp	r6, r4
 8005abc:	d105      	bne.n	8005aca <__libc_init_array+0x2e>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac4:	4798      	blx	r3
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7ee      	b.n	8005aa8 <__libc_init_array+0xc>
 8005aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ace:	4798      	blx	r3
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	e7f2      	b.n	8005aba <__libc_init_array+0x1e>
 8005ad4:	080096a0 	.word	0x080096a0
 8005ad8:	080096a0 	.word	0x080096a0
 8005adc:	080096a0 	.word	0x080096a0
 8005ae0:	080096a4 	.word	0x080096a4

08005ae4 <__retarget_lock_acquire_recursive>:
 8005ae4:	4770      	bx	lr

08005ae6 <__retarget_lock_release_recursive>:
 8005ae6:	4770      	bx	lr

08005ae8 <memchr>:
 8005ae8:	4603      	mov	r3, r0
 8005aea:	b510      	push	{r4, lr}
 8005aec:	b2c9      	uxtb	r1, r1
 8005aee:	4402      	add	r2, r0
 8005af0:	4293      	cmp	r3, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	d101      	bne.n	8005afa <memchr+0x12>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e003      	b.n	8005b02 <memchr+0x1a>
 8005afa:	7804      	ldrb	r4, [r0, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	428c      	cmp	r4, r1
 8005b00:	d1f6      	bne.n	8005af0 <memchr+0x8>
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <nanf>:
 8005b04:	4800      	ldr	r0, [pc, #0]	; (8005b08 <nanf+0x4>)
 8005b06:	4770      	bx	lr
 8005b08:	7fc00000 	.word	0x7fc00000

08005b0c <quorem>:
 8005b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	6903      	ldr	r3, [r0, #16]
 8005b12:	690c      	ldr	r4, [r1, #16]
 8005b14:	4607      	mov	r7, r0
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	db7f      	blt.n	8005c1a <quorem+0x10e>
 8005b1a:	3c01      	subs	r4, #1
 8005b1c:	f100 0514 	add.w	r5, r0, #20
 8005b20:	f101 0814 	add.w	r8, r1, #20
 8005b24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b32:	3301      	adds	r3, #1
 8005b34:	429a      	cmp	r2, r3
 8005b36:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b3a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b42:	d331      	bcc.n	8005ba8 <quorem+0x9c>
 8005b44:	f04f 0e00 	mov.w	lr, #0
 8005b48:	4640      	mov	r0, r8
 8005b4a:	46ac      	mov	ip, r5
 8005b4c:	46f2      	mov	sl, lr
 8005b4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b52:	b293      	uxth	r3, r2
 8005b54:	fb06 e303 	mla	r3, r6, r3, lr
 8005b58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b5c:	0c1a      	lsrs	r2, r3, #16
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	fb06 220e 	mla	r2, r6, lr, r2
 8005b64:	ebaa 0303 	sub.w	r3, sl, r3
 8005b68:	f8dc a000 	ldr.w	sl, [ip]
 8005b6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b70:	fa1f fa8a 	uxth.w	sl, sl
 8005b74:	4453      	add	r3, sl
 8005b76:	f8dc a000 	ldr.w	sl, [ip]
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b8a:	4581      	cmp	r9, r0
 8005b8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b90:	f84c 3b04 	str.w	r3, [ip], #4
 8005b94:	d2db      	bcs.n	8005b4e <quorem+0x42>
 8005b96:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b9a:	b92b      	cbnz	r3, 8005ba8 <quorem+0x9c>
 8005b9c:	9b01      	ldr	r3, [sp, #4]
 8005b9e:	3b04      	subs	r3, #4
 8005ba0:	429d      	cmp	r5, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	d32d      	bcc.n	8005c02 <quorem+0xf6>
 8005ba6:	613c      	str	r4, [r7, #16]
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f001 f9dd 	bl	8006f68 <__mcmp>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	db23      	blt.n	8005bfa <quorem+0xee>
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	3601      	adds	r6, #1
 8005bb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bbc:	f8d1 c000 	ldr.w	ip, [r1]
 8005bc0:	b293      	uxth	r3, r2
 8005bc2:	1ac3      	subs	r3, r0, r3
 8005bc4:	0c12      	lsrs	r2, r2, #16
 8005bc6:	fa1f f08c 	uxth.w	r0, ip
 8005bca:	4403      	add	r3, r0
 8005bcc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bda:	45c1      	cmp	r9, r8
 8005bdc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005be0:	f841 3b04 	str.w	r3, [r1], #4
 8005be4:	d2e8      	bcs.n	8005bb8 <quorem+0xac>
 8005be6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bee:	b922      	cbnz	r2, 8005bfa <quorem+0xee>
 8005bf0:	3b04      	subs	r3, #4
 8005bf2:	429d      	cmp	r5, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	d30a      	bcc.n	8005c0e <quorem+0x102>
 8005bf8:	613c      	str	r4, [r7, #16]
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	b003      	add	sp, #12
 8005bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	3b04      	subs	r3, #4
 8005c06:	2a00      	cmp	r2, #0
 8005c08:	d1cd      	bne.n	8005ba6 <quorem+0x9a>
 8005c0a:	3c01      	subs	r4, #1
 8005c0c:	e7c8      	b.n	8005ba0 <quorem+0x94>
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	3b04      	subs	r3, #4
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	d1f0      	bne.n	8005bf8 <quorem+0xec>
 8005c16:	3c01      	subs	r4, #1
 8005c18:	e7eb      	b.n	8005bf2 <quorem+0xe6>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e7ee      	b.n	8005bfc <quorem+0xf0>
	...

08005c20 <_dtoa_r>:
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	4616      	mov	r6, r2
 8005c26:	461f      	mov	r7, r3
 8005c28:	69c4      	ldr	r4, [r0, #28]
 8005c2a:	b099      	sub	sp, #100	; 0x64
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005c32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005c36:	b974      	cbnz	r4, 8005c56 <_dtoa_r+0x36>
 8005c38:	2010      	movs	r0, #16
 8005c3a:	f000 fe1d 	bl	8006878 <malloc>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	61e8      	str	r0, [r5, #28]
 8005c42:	b920      	cbnz	r0, 8005c4e <_dtoa_r+0x2e>
 8005c44:	21ef      	movs	r1, #239	; 0xef
 8005c46:	4bac      	ldr	r3, [pc, #688]	; (8005ef8 <_dtoa_r+0x2d8>)
 8005c48:	48ac      	ldr	r0, [pc, #688]	; (8005efc <_dtoa_r+0x2dc>)
 8005c4a:	f002 fc55 	bl	80084f8 <__assert_func>
 8005c4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c52:	6004      	str	r4, [r0, #0]
 8005c54:	60c4      	str	r4, [r0, #12]
 8005c56:	69eb      	ldr	r3, [r5, #28]
 8005c58:	6819      	ldr	r1, [r3, #0]
 8005c5a:	b151      	cbz	r1, 8005c72 <_dtoa_r+0x52>
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4093      	lsls	r3, r2
 8005c62:	604a      	str	r2, [r1, #4]
 8005c64:	608b      	str	r3, [r1, #8]
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 fefa 	bl	8006a60 <_Bfree>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	69eb      	ldr	r3, [r5, #28]
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	1e3b      	subs	r3, r7, #0
 8005c74:	bfaf      	iteee	ge
 8005c76:	2300      	movge	r3, #0
 8005c78:	2201      	movlt	r2, #1
 8005c7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c7e:	9305      	strlt	r3, [sp, #20]
 8005c80:	bfa8      	it	ge
 8005c82:	f8c8 3000 	strge.w	r3, [r8]
 8005c86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005c8a:	4b9d      	ldr	r3, [pc, #628]	; (8005f00 <_dtoa_r+0x2e0>)
 8005c8c:	bfb8      	it	lt
 8005c8e:	f8c8 2000 	strlt.w	r2, [r8]
 8005c92:	ea33 0309 	bics.w	r3, r3, r9
 8005c96:	d119      	bne.n	8005ccc <_dtoa_r+0xac>
 8005c98:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ca4:	4333      	orrs	r3, r6
 8005ca6:	f000 8589 	beq.w	80067bc <_dtoa_r+0xb9c>
 8005caa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cac:	b953      	cbnz	r3, 8005cc4 <_dtoa_r+0xa4>
 8005cae:	4b95      	ldr	r3, [pc, #596]	; (8005f04 <_dtoa_r+0x2e4>)
 8005cb0:	e023      	b.n	8005cfa <_dtoa_r+0xda>
 8005cb2:	4b95      	ldr	r3, [pc, #596]	; (8005f08 <_dtoa_r+0x2e8>)
 8005cb4:	9303      	str	r3, [sp, #12]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	9803      	ldr	r0, [sp, #12]
 8005cbe:	b019      	add	sp, #100	; 0x64
 8005cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc4:	4b8f      	ldr	r3, [pc, #572]	; (8005f04 <_dtoa_r+0x2e4>)
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	3303      	adds	r3, #3
 8005cca:	e7f5      	b.n	8005cb8 <_dtoa_r+0x98>
 8005ccc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005cd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f7fa fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	b160      	cbz	r0, 8005cfe <_dtoa_r+0xde>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8562 	beq.w	80067b6 <_dtoa_r+0xb96>
 8005cf2:	4b86      	ldr	r3, [pc, #536]	; (8005f0c <_dtoa_r+0x2ec>)
 8005cf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	9303      	str	r3, [sp, #12]
 8005cfc:	e7de      	b.n	8005cbc <_dtoa_r+0x9c>
 8005cfe:	ab16      	add	r3, sp, #88	; 0x58
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	ab17      	add	r3, sp, #92	; 0x5c
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4628      	mov	r0, r5
 8005d08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d0c:	f001 fa3c 	bl	8007188 <__d2b>
 8005d10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005d14:	4682      	mov	sl, r0
 8005d16:	2c00      	cmp	r4, #0
 8005d18:	d07e      	beq.n	8005e18 <_dtoa_r+0x1f8>
 8005d1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d28:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005d2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005d30:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005d34:	4619      	mov	r1, r3
 8005d36:	2200      	movs	r2, #0
 8005d38:	4b75      	ldr	r3, [pc, #468]	; (8005f10 <_dtoa_r+0x2f0>)
 8005d3a:	f7fa fa15 	bl	8000168 <__aeabi_dsub>
 8005d3e:	a368      	add	r3, pc, #416	; (adr r3, 8005ee0 <_dtoa_r+0x2c0>)
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f7fa fbc8 	bl	80004d8 <__aeabi_dmul>
 8005d48:	a367      	add	r3, pc, #412	; (adr r3, 8005ee8 <_dtoa_r+0x2c8>)
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fa0d 	bl	800016c <__adddf3>
 8005d52:	4606      	mov	r6, r0
 8005d54:	4620      	mov	r0, r4
 8005d56:	460f      	mov	r7, r1
 8005d58:	f7fa fb54 	bl	8000404 <__aeabi_i2d>
 8005d5c:	a364      	add	r3, pc, #400	; (adr r3, 8005ef0 <_dtoa_r+0x2d0>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f7fa fbb9 	bl	80004d8 <__aeabi_dmul>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	f7fa f9fd 	bl	800016c <__adddf3>
 8005d72:	4606      	mov	r6, r0
 8005d74:	460f      	mov	r7, r1
 8005d76:	f7fa fe5f 	bl	8000a38 <__aeabi_d2iz>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	4683      	mov	fp, r0
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa fe1a 	bl	80009bc <__aeabi_dcmplt>
 8005d88:	b148      	cbz	r0, 8005d9e <_dtoa_r+0x17e>
 8005d8a:	4658      	mov	r0, fp
 8005d8c:	f7fa fb3a 	bl	8000404 <__aeabi_i2d>
 8005d90:	4632      	mov	r2, r6
 8005d92:	463b      	mov	r3, r7
 8005d94:	f7fa fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8005d98:	b908      	cbnz	r0, 8005d9e <_dtoa_r+0x17e>
 8005d9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d9e:	f1bb 0f16 	cmp.w	fp, #22
 8005da2:	d857      	bhi.n	8005e54 <_dtoa_r+0x234>
 8005da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005da8:	4b5a      	ldr	r3, [pc, #360]	; (8005f14 <_dtoa_r+0x2f4>)
 8005daa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f7fa fe03 	bl	80009bc <__aeabi_dcmplt>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d04e      	beq.n	8005e58 <_dtoa_r+0x238>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005dc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005dc4:	1b1b      	subs	r3, r3, r4
 8005dc6:	1e5a      	subs	r2, r3, #1
 8005dc8:	bf46      	itte	mi
 8005dca:	f1c3 0901 	rsbmi	r9, r3, #1
 8005dce:	2300      	movmi	r3, #0
 8005dd0:	f04f 0900 	movpl.w	r9, #0
 8005dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8005dd6:	bf48      	it	mi
 8005dd8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005dda:	f1bb 0f00 	cmp.w	fp, #0
 8005dde:	db3d      	blt.n	8005e5c <_dtoa_r+0x23c>
 8005de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005de6:	445b      	add	r3, fp
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dea:	2300      	movs	r3, #0
 8005dec:	930a      	str	r3, [sp, #40]	; 0x28
 8005dee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005df0:	2b09      	cmp	r3, #9
 8005df2:	d867      	bhi.n	8005ec4 <_dtoa_r+0x2a4>
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	bfc4      	itt	gt
 8005df8:	3b04      	subgt	r3, #4
 8005dfa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dfe:	bfc8      	it	gt
 8005e00:	2400      	movgt	r4, #0
 8005e02:	f1a3 0302 	sub.w	r3, r3, #2
 8005e06:	bfd8      	it	le
 8005e08:	2401      	movle	r4, #1
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	f200 8086 	bhi.w	8005f1c <_dtoa_r+0x2fc>
 8005e10:	e8df f003 	tbb	[pc, r3]
 8005e14:	5637392c 	.word	0x5637392c
 8005e18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005e1c:	441c      	add	r4, r3
 8005e1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	bfc1      	itttt	gt
 8005e26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e2a:	fa09 f903 	lslgt.w	r9, r9, r3
 8005e2e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005e32:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005e36:	bfd6      	itet	le
 8005e38:	f1c3 0320 	rsble	r3, r3, #32
 8005e3c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005e40:	fa06 f003 	lslle.w	r0, r6, r3
 8005e44:	f7fa face 	bl	80003e4 <__aeabi_ui2d>
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005e4e:	3c01      	subs	r4, #1
 8005e50:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e52:	e76f      	b.n	8005d34 <_dtoa_r+0x114>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e7b3      	b.n	8005dc0 <_dtoa_r+0x1a0>
 8005e58:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e5a:	e7b2      	b.n	8005dc2 <_dtoa_r+0x1a2>
 8005e5c:	f1cb 0300 	rsb	r3, fp, #0
 8005e60:	930a      	str	r3, [sp, #40]	; 0x28
 8005e62:	2300      	movs	r3, #0
 8005e64:	eba9 090b 	sub.w	r9, r9, fp
 8005e68:	930e      	str	r3, [sp, #56]	; 0x38
 8005e6a:	e7c0      	b.n	8005dee <_dtoa_r+0x1ce>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	dc55      	bgt.n	8005f22 <_dtoa_r+0x302>
 8005e76:	2301      	movs	r3, #1
 8005e78:	461a      	mov	r2, r3
 8005e7a:	9306      	str	r3, [sp, #24]
 8005e7c:	9308      	str	r3, [sp, #32]
 8005e7e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005e80:	e00b      	b.n	8005e9a <_dtoa_r+0x27a>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e7f3      	b.n	8005e6e <_dtoa_r+0x24e>
 8005e86:	2300      	movs	r3, #0
 8005e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e8c:	445b      	add	r3, fp
 8005e8e:	9306      	str	r3, [sp, #24]
 8005e90:	3301      	adds	r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	9308      	str	r3, [sp, #32]
 8005e96:	bfb8      	it	lt
 8005e98:	2301      	movlt	r3, #1
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	69e8      	ldr	r0, [r5, #28]
 8005ea0:	f102 0614 	add.w	r6, r2, #20
 8005ea4:	429e      	cmp	r6, r3
 8005ea6:	d940      	bls.n	8005f2a <_dtoa_r+0x30a>
 8005ea8:	6041      	str	r1, [r0, #4]
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 fd98 	bl	80069e0 <_Balloc>
 8005eb0:	9003      	str	r0, [sp, #12]
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d13c      	bne.n	8005f30 <_dtoa_r+0x310>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	f240 11af 	movw	r1, #431	; 0x1af
 8005ebc:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <_dtoa_r+0x2f8>)
 8005ebe:	e6c3      	b.n	8005c48 <_dtoa_r+0x28>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e7e1      	b.n	8005e88 <_dtoa_r+0x268>
 8005ec4:	2401      	movs	r4, #1
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005eca:	9322      	str	r3, [sp, #136]	; 0x88
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	9306      	str	r3, [sp, #24]
 8005ed4:	9308      	str	r3, [sp, #32]
 8005ed6:	2312      	movs	r3, #18
 8005ed8:	e7d1      	b.n	8005e7e <_dtoa_r+0x25e>
 8005eda:	bf00      	nop
 8005edc:	f3af 8000 	nop.w
 8005ee0:	636f4361 	.word	0x636f4361
 8005ee4:	3fd287a7 	.word	0x3fd287a7
 8005ee8:	8b60c8b3 	.word	0x8b60c8b3
 8005eec:	3fc68a28 	.word	0x3fc68a28
 8005ef0:	509f79fb 	.word	0x509f79fb
 8005ef4:	3fd34413 	.word	0x3fd34413
 8005ef8:	080092b8 	.word	0x080092b8
 8005efc:	080092cf 	.word	0x080092cf
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	080092b4 	.word	0x080092b4
 8005f08:	080092ab 	.word	0x080092ab
 8005f0c:	08009283 	.word	0x08009283
 8005f10:	3ff80000 	.word	0x3ff80000
 8005f14:	080093c0 	.word	0x080093c0
 8005f18:	08009327 	.word	0x08009327
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f20:	e7d4      	b.n	8005ecc <_dtoa_r+0x2ac>
 8005f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f24:	9306      	str	r3, [sp, #24]
 8005f26:	9308      	str	r3, [sp, #32]
 8005f28:	e7b7      	b.n	8005e9a <_dtoa_r+0x27a>
 8005f2a:	3101      	adds	r1, #1
 8005f2c:	0052      	lsls	r2, r2, #1
 8005f2e:	e7b7      	b.n	8005ea0 <_dtoa_r+0x280>
 8005f30:	69eb      	ldr	r3, [r5, #28]
 8005f32:	9a03      	ldr	r2, [sp, #12]
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	9b08      	ldr	r3, [sp, #32]
 8005f38:	2b0e      	cmp	r3, #14
 8005f3a:	f200 80a8 	bhi.w	800608e <_dtoa_r+0x46e>
 8005f3e:	2c00      	cmp	r4, #0
 8005f40:	f000 80a5 	beq.w	800608e <_dtoa_r+0x46e>
 8005f44:	f1bb 0f00 	cmp.w	fp, #0
 8005f48:	dd34      	ble.n	8005fb4 <_dtoa_r+0x394>
 8005f4a:	4b9a      	ldr	r3, [pc, #616]	; (80061b4 <_dtoa_r+0x594>)
 8005f4c:	f00b 020f 	and.w	r2, fp, #15
 8005f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f60:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005f64:	d016      	beq.n	8005f94 <_dtoa_r+0x374>
 8005f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f6a:	4b93      	ldr	r3, [pc, #588]	; (80061b8 <_dtoa_r+0x598>)
 8005f6c:	2703      	movs	r7, #3
 8005f6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f72:	f7fa fbdb 	bl	800072c <__aeabi_ddiv>
 8005f76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f7a:	f004 040f 	and.w	r4, r4, #15
 8005f7e:	4e8e      	ldr	r6, [pc, #568]	; (80061b8 <_dtoa_r+0x598>)
 8005f80:	b954      	cbnz	r4, 8005f98 <_dtoa_r+0x378>
 8005f82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f8a:	f7fa fbcf 	bl	800072c <__aeabi_ddiv>
 8005f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f92:	e029      	b.n	8005fe8 <_dtoa_r+0x3c8>
 8005f94:	2702      	movs	r7, #2
 8005f96:	e7f2      	b.n	8005f7e <_dtoa_r+0x35e>
 8005f98:	07e1      	lsls	r1, r4, #31
 8005f9a:	d508      	bpl.n	8005fae <_dtoa_r+0x38e>
 8005f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fa0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fa4:	f7fa fa98 	bl	80004d8 <__aeabi_dmul>
 8005fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fac:	3701      	adds	r7, #1
 8005fae:	1064      	asrs	r4, r4, #1
 8005fb0:	3608      	adds	r6, #8
 8005fb2:	e7e5      	b.n	8005f80 <_dtoa_r+0x360>
 8005fb4:	f000 80a5 	beq.w	8006102 <_dtoa_r+0x4e2>
 8005fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fbc:	f1cb 0400 	rsb	r4, fp, #0
 8005fc0:	4b7c      	ldr	r3, [pc, #496]	; (80061b4 <_dtoa_r+0x594>)
 8005fc2:	f004 020f 	and.w	r2, r4, #15
 8005fc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa fa83 	bl	80004d8 <__aeabi_dmul>
 8005fd2:	2702      	movs	r7, #2
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fda:	4e77      	ldr	r6, [pc, #476]	; (80061b8 <_dtoa_r+0x598>)
 8005fdc:	1124      	asrs	r4, r4, #4
 8005fde:	2c00      	cmp	r4, #0
 8005fe0:	f040 8084 	bne.w	80060ec <_dtoa_r+0x4cc>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1d2      	bne.n	8005f8e <_dtoa_r+0x36e>
 8005fe8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 8087 	beq.w	8006106 <_dtoa_r+0x4e6>
 8005ff8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	; (80061bc <_dtoa_r+0x59c>)
 8006000:	f7fa fcdc 	bl	80009bc <__aeabi_dcmplt>
 8006004:	2800      	cmp	r0, #0
 8006006:	d07e      	beq.n	8006106 <_dtoa_r+0x4e6>
 8006008:	9b08      	ldr	r3, [sp, #32]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d07b      	beq.n	8006106 <_dtoa_r+0x4e6>
 800600e:	9b06      	ldr	r3, [sp, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	dd38      	ble.n	8006086 <_dtoa_r+0x466>
 8006014:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006018:	2200      	movs	r2, #0
 800601a:	4b69      	ldr	r3, [pc, #420]	; (80061c0 <_dtoa_r+0x5a0>)
 800601c:	f7fa fa5c 	bl	80004d8 <__aeabi_dmul>
 8006020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006024:	9c06      	ldr	r4, [sp, #24]
 8006026:	f10b 38ff 	add.w	r8, fp, #4294967295
 800602a:	3701      	adds	r7, #1
 800602c:	4638      	mov	r0, r7
 800602e:	f7fa f9e9 	bl	8000404 <__aeabi_i2d>
 8006032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006036:	f7fa fa4f 	bl	80004d8 <__aeabi_dmul>
 800603a:	2200      	movs	r2, #0
 800603c:	4b61      	ldr	r3, [pc, #388]	; (80061c4 <_dtoa_r+0x5a4>)
 800603e:	f7fa f895 	bl	800016c <__adddf3>
 8006042:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006046:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800604a:	9611      	str	r6, [sp, #68]	; 0x44
 800604c:	2c00      	cmp	r4, #0
 800604e:	d15d      	bne.n	800610c <_dtoa_r+0x4ec>
 8006050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006054:	2200      	movs	r2, #0
 8006056:	4b5c      	ldr	r3, [pc, #368]	; (80061c8 <_dtoa_r+0x5a8>)
 8006058:	f7fa f886 	bl	8000168 <__aeabi_dsub>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006064:	4633      	mov	r3, r6
 8006066:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006068:	f7fa fcc6 	bl	80009f8 <__aeabi_dcmpgt>
 800606c:	2800      	cmp	r0, #0
 800606e:	f040 8295 	bne.w	800659c <_dtoa_r+0x97c>
 8006072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006076:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006078:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800607c:	f7fa fc9e 	bl	80009bc <__aeabi_dcmplt>
 8006080:	2800      	cmp	r0, #0
 8006082:	f040 8289 	bne.w	8006598 <_dtoa_r+0x978>
 8006086:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800608a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800608e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006090:	2b00      	cmp	r3, #0
 8006092:	f2c0 8151 	blt.w	8006338 <_dtoa_r+0x718>
 8006096:	f1bb 0f0e 	cmp.w	fp, #14
 800609a:	f300 814d 	bgt.w	8006338 <_dtoa_r+0x718>
 800609e:	4b45      	ldr	r3, [pc, #276]	; (80061b4 <_dtoa_r+0x594>)
 80060a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80060ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f280 80da 	bge.w	8006268 <_dtoa_r+0x648>
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f300 80d6 	bgt.w	8006268 <_dtoa_r+0x648>
 80060bc:	f040 826b 	bne.w	8006596 <_dtoa_r+0x976>
 80060c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060c4:	2200      	movs	r2, #0
 80060c6:	4b40      	ldr	r3, [pc, #256]	; (80061c8 <_dtoa_r+0x5a8>)
 80060c8:	f7fa fa06 	bl	80004d8 <__aeabi_dmul>
 80060cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060d0:	f7fa fc88 	bl	80009e4 <__aeabi_dcmpge>
 80060d4:	9c08      	ldr	r4, [sp, #32]
 80060d6:	4626      	mov	r6, r4
 80060d8:	2800      	cmp	r0, #0
 80060da:	f040 8241 	bne.w	8006560 <_dtoa_r+0x940>
 80060de:	2331      	movs	r3, #49	; 0x31
 80060e0:	9f03      	ldr	r7, [sp, #12]
 80060e2:	f10b 0b01 	add.w	fp, fp, #1
 80060e6:	f807 3b01 	strb.w	r3, [r7], #1
 80060ea:	e23d      	b.n	8006568 <_dtoa_r+0x948>
 80060ec:	07e2      	lsls	r2, r4, #31
 80060ee:	d505      	bpl.n	80060fc <_dtoa_r+0x4dc>
 80060f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060f4:	f7fa f9f0 	bl	80004d8 <__aeabi_dmul>
 80060f8:	2301      	movs	r3, #1
 80060fa:	3701      	adds	r7, #1
 80060fc:	1064      	asrs	r4, r4, #1
 80060fe:	3608      	adds	r6, #8
 8006100:	e76d      	b.n	8005fde <_dtoa_r+0x3be>
 8006102:	2702      	movs	r7, #2
 8006104:	e770      	b.n	8005fe8 <_dtoa_r+0x3c8>
 8006106:	46d8      	mov	r8, fp
 8006108:	9c08      	ldr	r4, [sp, #32]
 800610a:	e78f      	b.n	800602c <_dtoa_r+0x40c>
 800610c:	9903      	ldr	r1, [sp, #12]
 800610e:	4b29      	ldr	r3, [pc, #164]	; (80061b4 <_dtoa_r+0x594>)
 8006110:	4421      	add	r1, r4
 8006112:	9112      	str	r1, [sp, #72]	; 0x48
 8006114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006116:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800611a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800611e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006122:	2900      	cmp	r1, #0
 8006124:	d054      	beq.n	80061d0 <_dtoa_r+0x5b0>
 8006126:	2000      	movs	r0, #0
 8006128:	4928      	ldr	r1, [pc, #160]	; (80061cc <_dtoa_r+0x5ac>)
 800612a:	f7fa faff 	bl	800072c <__aeabi_ddiv>
 800612e:	463b      	mov	r3, r7
 8006130:	4632      	mov	r2, r6
 8006132:	f7fa f819 	bl	8000168 <__aeabi_dsub>
 8006136:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800613a:	9f03      	ldr	r7, [sp, #12]
 800613c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006140:	f7fa fc7a 	bl	8000a38 <__aeabi_d2iz>
 8006144:	4604      	mov	r4, r0
 8006146:	f7fa f95d 	bl	8000404 <__aeabi_i2d>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006152:	f7fa f809 	bl	8000168 <__aeabi_dsub>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	3430      	adds	r4, #48	; 0x30
 800615c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006164:	f807 4b01 	strb.w	r4, [r7], #1
 8006168:	f7fa fc28 	bl	80009bc <__aeabi_dcmplt>
 800616c:	2800      	cmp	r0, #0
 800616e:	d173      	bne.n	8006258 <_dtoa_r+0x638>
 8006170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006174:	2000      	movs	r0, #0
 8006176:	4911      	ldr	r1, [pc, #68]	; (80061bc <_dtoa_r+0x59c>)
 8006178:	f7f9 fff6 	bl	8000168 <__aeabi_dsub>
 800617c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006180:	f7fa fc1c 	bl	80009bc <__aeabi_dcmplt>
 8006184:	2800      	cmp	r0, #0
 8006186:	f040 80b6 	bne.w	80062f6 <_dtoa_r+0x6d6>
 800618a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800618c:	429f      	cmp	r7, r3
 800618e:	f43f af7a 	beq.w	8006086 <_dtoa_r+0x466>
 8006192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006196:	2200      	movs	r2, #0
 8006198:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <_dtoa_r+0x5a0>)
 800619a:	f7fa f99d 	bl	80004d8 <__aeabi_dmul>
 800619e:	2200      	movs	r2, #0
 80061a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <_dtoa_r+0x5a0>)
 80061aa:	f7fa f995 	bl	80004d8 <__aeabi_dmul>
 80061ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061b2:	e7c3      	b.n	800613c <_dtoa_r+0x51c>
 80061b4:	080093c0 	.word	0x080093c0
 80061b8:	08009398 	.word	0x08009398
 80061bc:	3ff00000 	.word	0x3ff00000
 80061c0:	40240000 	.word	0x40240000
 80061c4:	401c0000 	.word	0x401c0000
 80061c8:	40140000 	.word	0x40140000
 80061cc:	3fe00000 	.word	0x3fe00000
 80061d0:	4630      	mov	r0, r6
 80061d2:	4639      	mov	r1, r7
 80061d4:	f7fa f980 	bl	80004d8 <__aeabi_dmul>
 80061d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061de:	9c03      	ldr	r4, [sp, #12]
 80061e0:	9314      	str	r3, [sp, #80]	; 0x50
 80061e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061e6:	f7fa fc27 	bl	8000a38 <__aeabi_d2iz>
 80061ea:	9015      	str	r0, [sp, #84]	; 0x54
 80061ec:	f7fa f90a 	bl	8000404 <__aeabi_i2d>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f8:	f7f9 ffb6 	bl	8000168 <__aeabi_dsub>
 80061fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061fe:	4606      	mov	r6, r0
 8006200:	3330      	adds	r3, #48	; 0x30
 8006202:	f804 3b01 	strb.w	r3, [r4], #1
 8006206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006208:	460f      	mov	r7, r1
 800620a:	429c      	cmp	r4, r3
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	d124      	bne.n	800625c <_dtoa_r+0x63c>
 8006212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006216:	4baf      	ldr	r3, [pc, #700]	; (80064d4 <_dtoa_r+0x8b4>)
 8006218:	f7f9 ffa8 	bl	800016c <__adddf3>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4630      	mov	r0, r6
 8006222:	4639      	mov	r1, r7
 8006224:	f7fa fbe8 	bl	80009f8 <__aeabi_dcmpgt>
 8006228:	2800      	cmp	r0, #0
 800622a:	d163      	bne.n	80062f4 <_dtoa_r+0x6d4>
 800622c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006230:	2000      	movs	r0, #0
 8006232:	49a8      	ldr	r1, [pc, #672]	; (80064d4 <_dtoa_r+0x8b4>)
 8006234:	f7f9 ff98 	bl	8000168 <__aeabi_dsub>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4630      	mov	r0, r6
 800623e:	4639      	mov	r1, r7
 8006240:	f7fa fbbc 	bl	80009bc <__aeabi_dcmplt>
 8006244:	2800      	cmp	r0, #0
 8006246:	f43f af1e 	beq.w	8006086 <_dtoa_r+0x466>
 800624a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800624c:	1e7b      	subs	r3, r7, #1
 800624e:	9314      	str	r3, [sp, #80]	; 0x50
 8006250:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006254:	2b30      	cmp	r3, #48	; 0x30
 8006256:	d0f8      	beq.n	800624a <_dtoa_r+0x62a>
 8006258:	46c3      	mov	fp, r8
 800625a:	e03b      	b.n	80062d4 <_dtoa_r+0x6b4>
 800625c:	4b9e      	ldr	r3, [pc, #632]	; (80064d8 <_dtoa_r+0x8b8>)
 800625e:	f7fa f93b 	bl	80004d8 <__aeabi_dmul>
 8006262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006266:	e7bc      	b.n	80061e2 <_dtoa_r+0x5c2>
 8006268:	9f03      	ldr	r7, [sp, #12]
 800626a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800626e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006272:	4640      	mov	r0, r8
 8006274:	4649      	mov	r1, r9
 8006276:	f7fa fa59 	bl	800072c <__aeabi_ddiv>
 800627a:	f7fa fbdd 	bl	8000a38 <__aeabi_d2iz>
 800627e:	4604      	mov	r4, r0
 8006280:	f7fa f8c0 	bl	8000404 <__aeabi_i2d>
 8006284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006288:	f7fa f926 	bl	80004d8 <__aeabi_dmul>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	f7f9 ff68 	bl	8000168 <__aeabi_dsub>
 8006298:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800629c:	f807 6b01 	strb.w	r6, [r7], #1
 80062a0:	9e03      	ldr	r6, [sp, #12]
 80062a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80062a6:	1bbe      	subs	r6, r7, r6
 80062a8:	45b4      	cmp	ip, r6
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	d136      	bne.n	800631e <_dtoa_r+0x6fe>
 80062b0:	f7f9 ff5c 	bl	800016c <__adddf3>
 80062b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062b8:	4680      	mov	r8, r0
 80062ba:	4689      	mov	r9, r1
 80062bc:	f7fa fb9c 	bl	80009f8 <__aeabi_dcmpgt>
 80062c0:	bb58      	cbnz	r0, 800631a <_dtoa_r+0x6fa>
 80062c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062c6:	4640      	mov	r0, r8
 80062c8:	4649      	mov	r1, r9
 80062ca:	f7fa fb6d 	bl	80009a8 <__aeabi_dcmpeq>
 80062ce:	b108      	cbz	r0, 80062d4 <_dtoa_r+0x6b4>
 80062d0:	07e3      	lsls	r3, r4, #31
 80062d2:	d422      	bmi.n	800631a <_dtoa_r+0x6fa>
 80062d4:	4651      	mov	r1, sl
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 fbc2 	bl	8006a60 <_Bfree>
 80062dc:	2300      	movs	r3, #0
 80062de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062e0:	703b      	strb	r3, [r7, #0]
 80062e2:	f10b 0301 	add.w	r3, fp, #1
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f43f ace6 	beq.w	8005cbc <_dtoa_r+0x9c>
 80062f0:	601f      	str	r7, [r3, #0]
 80062f2:	e4e3      	b.n	8005cbc <_dtoa_r+0x9c>
 80062f4:	4627      	mov	r7, r4
 80062f6:	463b      	mov	r3, r7
 80062f8:	461f      	mov	r7, r3
 80062fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062fe:	2a39      	cmp	r2, #57	; 0x39
 8006300:	d107      	bne.n	8006312 <_dtoa_r+0x6f2>
 8006302:	9a03      	ldr	r2, [sp, #12]
 8006304:	429a      	cmp	r2, r3
 8006306:	d1f7      	bne.n	80062f8 <_dtoa_r+0x6d8>
 8006308:	2230      	movs	r2, #48	; 0x30
 800630a:	9903      	ldr	r1, [sp, #12]
 800630c:	f108 0801 	add.w	r8, r8, #1
 8006310:	700a      	strb	r2, [r1, #0]
 8006312:	781a      	ldrb	r2, [r3, #0]
 8006314:	3201      	adds	r2, #1
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	e79e      	b.n	8006258 <_dtoa_r+0x638>
 800631a:	46d8      	mov	r8, fp
 800631c:	e7eb      	b.n	80062f6 <_dtoa_r+0x6d6>
 800631e:	2200      	movs	r2, #0
 8006320:	4b6d      	ldr	r3, [pc, #436]	; (80064d8 <_dtoa_r+0x8b8>)
 8006322:	f7fa f8d9 	bl	80004d8 <__aeabi_dmul>
 8006326:	2200      	movs	r2, #0
 8006328:	2300      	movs	r3, #0
 800632a:	4680      	mov	r8, r0
 800632c:	4689      	mov	r9, r1
 800632e:	f7fa fb3b 	bl	80009a8 <__aeabi_dcmpeq>
 8006332:	2800      	cmp	r0, #0
 8006334:	d09b      	beq.n	800626e <_dtoa_r+0x64e>
 8006336:	e7cd      	b.n	80062d4 <_dtoa_r+0x6b4>
 8006338:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800633a:	2a00      	cmp	r2, #0
 800633c:	f000 80c4 	beq.w	80064c8 <_dtoa_r+0x8a8>
 8006340:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006342:	2a01      	cmp	r2, #1
 8006344:	f300 80a8 	bgt.w	8006498 <_dtoa_r+0x878>
 8006348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800634a:	2a00      	cmp	r2, #0
 800634c:	f000 80a0 	beq.w	8006490 <_dtoa_r+0x870>
 8006350:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006354:	464f      	mov	r7, r9
 8006356:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800635a:	2101      	movs	r1, #1
 800635c:	441a      	add	r2, r3
 800635e:	4628      	mov	r0, r5
 8006360:	4499      	add	r9, r3
 8006362:	9209      	str	r2, [sp, #36]	; 0x24
 8006364:	f000 fc7c 	bl	8006c60 <__i2b>
 8006368:	4606      	mov	r6, r0
 800636a:	b15f      	cbz	r7, 8006384 <_dtoa_r+0x764>
 800636c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	dd08      	ble.n	8006384 <_dtoa_r+0x764>
 8006372:	42bb      	cmp	r3, r7
 8006374:	bfa8      	it	ge
 8006376:	463b      	movge	r3, r7
 8006378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800637a:	eba9 0903 	sub.w	r9, r9, r3
 800637e:	1aff      	subs	r7, r7, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	9309      	str	r3, [sp, #36]	; 0x24
 8006384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006386:	b1f3      	cbz	r3, 80063c6 <_dtoa_r+0x7a6>
 8006388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80a0 	beq.w	80064d0 <_dtoa_r+0x8b0>
 8006390:	2c00      	cmp	r4, #0
 8006392:	dd10      	ble.n	80063b6 <_dtoa_r+0x796>
 8006394:	4631      	mov	r1, r6
 8006396:	4622      	mov	r2, r4
 8006398:	4628      	mov	r0, r5
 800639a:	f000 fd1f 	bl	8006ddc <__pow5mult>
 800639e:	4652      	mov	r2, sl
 80063a0:	4601      	mov	r1, r0
 80063a2:	4606      	mov	r6, r0
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 fc71 	bl	8006c8c <__multiply>
 80063aa:	4680      	mov	r8, r0
 80063ac:	4651      	mov	r1, sl
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 fb56 	bl	8006a60 <_Bfree>
 80063b4:	46c2      	mov	sl, r8
 80063b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b8:	1b1a      	subs	r2, r3, r4
 80063ba:	d004      	beq.n	80063c6 <_dtoa_r+0x7a6>
 80063bc:	4651      	mov	r1, sl
 80063be:	4628      	mov	r0, r5
 80063c0:	f000 fd0c 	bl	8006ddc <__pow5mult>
 80063c4:	4682      	mov	sl, r0
 80063c6:	2101      	movs	r1, #1
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 fc49 	bl	8006c60 <__i2b>
 80063ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063d0:	4604      	mov	r4, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f340 8082 	ble.w	80064dc <_dtoa_r+0x8bc>
 80063d8:	461a      	mov	r2, r3
 80063da:	4601      	mov	r1, r0
 80063dc:	4628      	mov	r0, r5
 80063de:	f000 fcfd 	bl	8006ddc <__pow5mult>
 80063e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063e4:	4604      	mov	r4, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	dd7b      	ble.n	80064e2 <_dtoa_r+0x8c2>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063f4:	6918      	ldr	r0, [r3, #16]
 80063f6:	f000 fbe5 	bl	8006bc4 <__hi0bits>
 80063fa:	f1c0 0020 	rsb	r0, r0, #32
 80063fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006400:	4418      	add	r0, r3
 8006402:	f010 001f 	ands.w	r0, r0, #31
 8006406:	f000 8092 	beq.w	800652e <_dtoa_r+0x90e>
 800640a:	f1c0 0320 	rsb	r3, r0, #32
 800640e:	2b04      	cmp	r3, #4
 8006410:	f340 8085 	ble.w	800651e <_dtoa_r+0x8fe>
 8006414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006416:	f1c0 001c 	rsb	r0, r0, #28
 800641a:	4403      	add	r3, r0
 800641c:	4481      	add	r9, r0
 800641e:	4407      	add	r7, r0
 8006420:	9309      	str	r3, [sp, #36]	; 0x24
 8006422:	f1b9 0f00 	cmp.w	r9, #0
 8006426:	dd05      	ble.n	8006434 <_dtoa_r+0x814>
 8006428:	4651      	mov	r1, sl
 800642a:	464a      	mov	r2, r9
 800642c:	4628      	mov	r0, r5
 800642e:	f000 fd2f 	bl	8006e90 <__lshift>
 8006432:	4682      	mov	sl, r0
 8006434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	dd05      	ble.n	8006446 <_dtoa_r+0x826>
 800643a:	4621      	mov	r1, r4
 800643c:	461a      	mov	r2, r3
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fd26 	bl	8006e90 <__lshift>
 8006444:	4604      	mov	r4, r0
 8006446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d072      	beq.n	8006532 <_dtoa_r+0x912>
 800644c:	4621      	mov	r1, r4
 800644e:	4650      	mov	r0, sl
 8006450:	f000 fd8a 	bl	8006f68 <__mcmp>
 8006454:	2800      	cmp	r0, #0
 8006456:	da6c      	bge.n	8006532 <_dtoa_r+0x912>
 8006458:	2300      	movs	r3, #0
 800645a:	4651      	mov	r1, sl
 800645c:	220a      	movs	r2, #10
 800645e:	4628      	mov	r0, r5
 8006460:	f000 fb20 	bl	8006aa4 <__multadd>
 8006464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006466:	4682      	mov	sl, r0
 8006468:	f10b 3bff 	add.w	fp, fp, #4294967295
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 81ac 	beq.w	80067ca <_dtoa_r+0xbaa>
 8006472:	2300      	movs	r3, #0
 8006474:	4631      	mov	r1, r6
 8006476:	220a      	movs	r2, #10
 8006478:	4628      	mov	r0, r5
 800647a:	f000 fb13 	bl	8006aa4 <__multadd>
 800647e:	9b06      	ldr	r3, [sp, #24]
 8006480:	4606      	mov	r6, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f300 8093 	bgt.w	80065ae <_dtoa_r+0x98e>
 8006488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800648a:	2b02      	cmp	r3, #2
 800648c:	dc59      	bgt.n	8006542 <_dtoa_r+0x922>
 800648e:	e08e      	b.n	80065ae <_dtoa_r+0x98e>
 8006490:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006492:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006496:	e75d      	b.n	8006354 <_dtoa_r+0x734>
 8006498:	9b08      	ldr	r3, [sp, #32]
 800649a:	1e5c      	subs	r4, r3, #1
 800649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649e:	42a3      	cmp	r3, r4
 80064a0:	bfbf      	itttt	lt
 80064a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80064a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80064a6:	1ae3      	sublt	r3, r4, r3
 80064a8:	18d2      	addlt	r2, r2, r3
 80064aa:	bfa8      	it	ge
 80064ac:	1b1c      	subge	r4, r3, r4
 80064ae:	9b08      	ldr	r3, [sp, #32]
 80064b0:	bfbe      	ittt	lt
 80064b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80064b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80064b6:	2400      	movlt	r4, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bfb5      	itete	lt
 80064bc:	eba9 0703 	sublt.w	r7, r9, r3
 80064c0:	464f      	movge	r7, r9
 80064c2:	2300      	movlt	r3, #0
 80064c4:	9b08      	ldrge	r3, [sp, #32]
 80064c6:	e747      	b.n	8006358 <_dtoa_r+0x738>
 80064c8:	464f      	mov	r7, r9
 80064ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80064ce:	e74c      	b.n	800636a <_dtoa_r+0x74a>
 80064d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064d2:	e773      	b.n	80063bc <_dtoa_r+0x79c>
 80064d4:	3fe00000 	.word	0x3fe00000
 80064d8:	40240000 	.word	0x40240000
 80064dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064de:	2b01      	cmp	r3, #1
 80064e0:	dc18      	bgt.n	8006514 <_dtoa_r+0x8f4>
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	b9b3      	cbnz	r3, 8006514 <_dtoa_r+0x8f4>
 80064e6:	9b05      	ldr	r3, [sp, #20]
 80064e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064ec:	b993      	cbnz	r3, 8006514 <_dtoa_r+0x8f4>
 80064ee:	9b05      	ldr	r3, [sp, #20]
 80064f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	0d1b      	lsrs	r3, r3, #20
 80064f6:	051b      	lsls	r3, r3, #20
 80064f8:	b17b      	cbz	r3, 800651a <_dtoa_r+0x8fa>
 80064fa:	f04f 0801 	mov.w	r8, #1
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	f109 0901 	add.w	r9, r9, #1
 8006504:	3301      	adds	r3, #1
 8006506:	9309      	str	r3, [sp, #36]	; 0x24
 8006508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800650a:	2b00      	cmp	r3, #0
 800650c:	f47f af6f 	bne.w	80063ee <_dtoa_r+0x7ce>
 8006510:	2001      	movs	r0, #1
 8006512:	e774      	b.n	80063fe <_dtoa_r+0x7de>
 8006514:	f04f 0800 	mov.w	r8, #0
 8006518:	e7f6      	b.n	8006508 <_dtoa_r+0x8e8>
 800651a:	4698      	mov	r8, r3
 800651c:	e7f4      	b.n	8006508 <_dtoa_r+0x8e8>
 800651e:	d080      	beq.n	8006422 <_dtoa_r+0x802>
 8006520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006522:	331c      	adds	r3, #28
 8006524:	441a      	add	r2, r3
 8006526:	4499      	add	r9, r3
 8006528:	441f      	add	r7, r3
 800652a:	9209      	str	r2, [sp, #36]	; 0x24
 800652c:	e779      	b.n	8006422 <_dtoa_r+0x802>
 800652e:	4603      	mov	r3, r0
 8006530:	e7f6      	b.n	8006520 <_dtoa_r+0x900>
 8006532:	9b08      	ldr	r3, [sp, #32]
 8006534:	2b00      	cmp	r3, #0
 8006536:	dc34      	bgt.n	80065a2 <_dtoa_r+0x982>
 8006538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800653a:	2b02      	cmp	r3, #2
 800653c:	dd31      	ble.n	80065a2 <_dtoa_r+0x982>
 800653e:	9b08      	ldr	r3, [sp, #32]
 8006540:	9306      	str	r3, [sp, #24]
 8006542:	9b06      	ldr	r3, [sp, #24]
 8006544:	b963      	cbnz	r3, 8006560 <_dtoa_r+0x940>
 8006546:	4621      	mov	r1, r4
 8006548:	2205      	movs	r2, #5
 800654a:	4628      	mov	r0, r5
 800654c:	f000 faaa 	bl	8006aa4 <__multadd>
 8006550:	4601      	mov	r1, r0
 8006552:	4604      	mov	r4, r0
 8006554:	4650      	mov	r0, sl
 8006556:	f000 fd07 	bl	8006f68 <__mcmp>
 800655a:	2800      	cmp	r0, #0
 800655c:	f73f adbf 	bgt.w	80060de <_dtoa_r+0x4be>
 8006560:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006562:	9f03      	ldr	r7, [sp, #12]
 8006564:	ea6f 0b03 	mvn.w	fp, r3
 8006568:	f04f 0800 	mov.w	r8, #0
 800656c:	4621      	mov	r1, r4
 800656e:	4628      	mov	r0, r5
 8006570:	f000 fa76 	bl	8006a60 <_Bfree>
 8006574:	2e00      	cmp	r6, #0
 8006576:	f43f aead 	beq.w	80062d4 <_dtoa_r+0x6b4>
 800657a:	f1b8 0f00 	cmp.w	r8, #0
 800657e:	d005      	beq.n	800658c <_dtoa_r+0x96c>
 8006580:	45b0      	cmp	r8, r6
 8006582:	d003      	beq.n	800658c <_dtoa_r+0x96c>
 8006584:	4641      	mov	r1, r8
 8006586:	4628      	mov	r0, r5
 8006588:	f000 fa6a 	bl	8006a60 <_Bfree>
 800658c:	4631      	mov	r1, r6
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fa66 	bl	8006a60 <_Bfree>
 8006594:	e69e      	b.n	80062d4 <_dtoa_r+0x6b4>
 8006596:	2400      	movs	r4, #0
 8006598:	4626      	mov	r6, r4
 800659a:	e7e1      	b.n	8006560 <_dtoa_r+0x940>
 800659c:	46c3      	mov	fp, r8
 800659e:	4626      	mov	r6, r4
 80065a0:	e59d      	b.n	80060de <_dtoa_r+0x4be>
 80065a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80c8 	beq.w	800673a <_dtoa_r+0xb1a>
 80065aa:	9b08      	ldr	r3, [sp, #32]
 80065ac:	9306      	str	r3, [sp, #24]
 80065ae:	2f00      	cmp	r7, #0
 80065b0:	dd05      	ble.n	80065be <_dtoa_r+0x99e>
 80065b2:	4631      	mov	r1, r6
 80065b4:	463a      	mov	r2, r7
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 fc6a 	bl	8006e90 <__lshift>
 80065bc:	4606      	mov	r6, r0
 80065be:	f1b8 0f00 	cmp.w	r8, #0
 80065c2:	d05b      	beq.n	800667c <_dtoa_r+0xa5c>
 80065c4:	4628      	mov	r0, r5
 80065c6:	6871      	ldr	r1, [r6, #4]
 80065c8:	f000 fa0a 	bl	80069e0 <_Balloc>
 80065cc:	4607      	mov	r7, r0
 80065ce:	b928      	cbnz	r0, 80065dc <_dtoa_r+0x9bc>
 80065d0:	4602      	mov	r2, r0
 80065d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80065d6:	4b81      	ldr	r3, [pc, #516]	; (80067dc <_dtoa_r+0xbbc>)
 80065d8:	f7ff bb36 	b.w	8005c48 <_dtoa_r+0x28>
 80065dc:	6932      	ldr	r2, [r6, #16]
 80065de:	f106 010c 	add.w	r1, r6, #12
 80065e2:	3202      	adds	r2, #2
 80065e4:	0092      	lsls	r2, r2, #2
 80065e6:	300c      	adds	r0, #12
 80065e8:	f001 ff72 	bl	80084d0 <memcpy>
 80065ec:	2201      	movs	r2, #1
 80065ee:	4639      	mov	r1, r7
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 fc4d 	bl	8006e90 <__lshift>
 80065f6:	46b0      	mov	r8, r6
 80065f8:	4606      	mov	r6, r0
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	9a03      	ldr	r2, [sp, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	9b06      	ldr	r3, [sp, #24]
 8006604:	4413      	add	r3, r2
 8006606:	930b      	str	r3, [sp, #44]	; 0x2c
 8006608:	9b04      	ldr	r3, [sp, #16]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	930a      	str	r3, [sp, #40]	; 0x28
 8006610:	9b08      	ldr	r3, [sp, #32]
 8006612:	4621      	mov	r1, r4
 8006614:	3b01      	subs	r3, #1
 8006616:	4650      	mov	r0, sl
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	f7ff fa77 	bl	8005b0c <quorem>
 800661e:	4641      	mov	r1, r8
 8006620:	9006      	str	r0, [sp, #24]
 8006622:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006626:	4650      	mov	r0, sl
 8006628:	f000 fc9e 	bl	8006f68 <__mcmp>
 800662c:	4632      	mov	r2, r6
 800662e:	9009      	str	r0, [sp, #36]	; 0x24
 8006630:	4621      	mov	r1, r4
 8006632:	4628      	mov	r0, r5
 8006634:	f000 fcb4 	bl	8006fa0 <__mdiff>
 8006638:	68c2      	ldr	r2, [r0, #12]
 800663a:	4607      	mov	r7, r0
 800663c:	bb02      	cbnz	r2, 8006680 <_dtoa_r+0xa60>
 800663e:	4601      	mov	r1, r0
 8006640:	4650      	mov	r0, sl
 8006642:	f000 fc91 	bl	8006f68 <__mcmp>
 8006646:	4602      	mov	r2, r0
 8006648:	4639      	mov	r1, r7
 800664a:	4628      	mov	r0, r5
 800664c:	920c      	str	r2, [sp, #48]	; 0x30
 800664e:	f000 fa07 	bl	8006a60 <_Bfree>
 8006652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006656:	9f08      	ldr	r7, [sp, #32]
 8006658:	ea43 0102 	orr.w	r1, r3, r2
 800665c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665e:	4319      	orrs	r1, r3
 8006660:	d110      	bne.n	8006684 <_dtoa_r+0xa64>
 8006662:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006666:	d029      	beq.n	80066bc <_dtoa_r+0xa9c>
 8006668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd02      	ble.n	8006674 <_dtoa_r+0xa54>
 800666e:	9b06      	ldr	r3, [sp, #24]
 8006670:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	f883 9000 	strb.w	r9, [r3]
 800667a:	e777      	b.n	800656c <_dtoa_r+0x94c>
 800667c:	4630      	mov	r0, r6
 800667e:	e7ba      	b.n	80065f6 <_dtoa_r+0x9d6>
 8006680:	2201      	movs	r2, #1
 8006682:	e7e1      	b.n	8006648 <_dtoa_r+0xa28>
 8006684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006686:	2b00      	cmp	r3, #0
 8006688:	db04      	blt.n	8006694 <_dtoa_r+0xa74>
 800668a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800668c:	430b      	orrs	r3, r1
 800668e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006690:	430b      	orrs	r3, r1
 8006692:	d120      	bne.n	80066d6 <_dtoa_r+0xab6>
 8006694:	2a00      	cmp	r2, #0
 8006696:	dded      	ble.n	8006674 <_dtoa_r+0xa54>
 8006698:	4651      	mov	r1, sl
 800669a:	2201      	movs	r2, #1
 800669c:	4628      	mov	r0, r5
 800669e:	f000 fbf7 	bl	8006e90 <__lshift>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4682      	mov	sl, r0
 80066a6:	f000 fc5f 	bl	8006f68 <__mcmp>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	dc03      	bgt.n	80066b6 <_dtoa_r+0xa96>
 80066ae:	d1e1      	bne.n	8006674 <_dtoa_r+0xa54>
 80066b0:	f019 0f01 	tst.w	r9, #1
 80066b4:	d0de      	beq.n	8006674 <_dtoa_r+0xa54>
 80066b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066ba:	d1d8      	bne.n	800666e <_dtoa_r+0xa4e>
 80066bc:	2339      	movs	r3, #57	; 0x39
 80066be:	9a04      	ldr	r2, [sp, #16]
 80066c0:	7013      	strb	r3, [r2, #0]
 80066c2:	463b      	mov	r3, r7
 80066c4:	461f      	mov	r7, r3
 80066c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2a39      	cmp	r2, #57	; 0x39
 80066ce:	d06b      	beq.n	80067a8 <_dtoa_r+0xb88>
 80066d0:	3201      	adds	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e74a      	b.n	800656c <_dtoa_r+0x94c>
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	dd07      	ble.n	80066ea <_dtoa_r+0xaca>
 80066da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066de:	d0ed      	beq.n	80066bc <_dtoa_r+0xa9c>
 80066e0:	9a04      	ldr	r2, [sp, #16]
 80066e2:	f109 0301 	add.w	r3, r9, #1
 80066e6:	7013      	strb	r3, [r2, #0]
 80066e8:	e740      	b.n	800656c <_dtoa_r+0x94c>
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d042      	beq.n	800677c <_dtoa_r+0xb5c>
 80066f6:	4651      	mov	r1, sl
 80066f8:	2300      	movs	r3, #0
 80066fa:	220a      	movs	r2, #10
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 f9d1 	bl	8006aa4 <__multadd>
 8006702:	45b0      	cmp	r8, r6
 8006704:	4682      	mov	sl, r0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	f04f 020a 	mov.w	r2, #10
 800670e:	4641      	mov	r1, r8
 8006710:	4628      	mov	r0, r5
 8006712:	d107      	bne.n	8006724 <_dtoa_r+0xb04>
 8006714:	f000 f9c6 	bl	8006aa4 <__multadd>
 8006718:	4680      	mov	r8, r0
 800671a:	4606      	mov	r6, r0
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	3301      	adds	r3, #1
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	e775      	b.n	8006610 <_dtoa_r+0x9f0>
 8006724:	f000 f9be 	bl	8006aa4 <__multadd>
 8006728:	4631      	mov	r1, r6
 800672a:	4680      	mov	r8, r0
 800672c:	2300      	movs	r3, #0
 800672e:	220a      	movs	r2, #10
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f9b7 	bl	8006aa4 <__multadd>
 8006736:	4606      	mov	r6, r0
 8006738:	e7f0      	b.n	800671c <_dtoa_r+0xafc>
 800673a:	9b08      	ldr	r3, [sp, #32]
 800673c:	9306      	str	r3, [sp, #24]
 800673e:	9f03      	ldr	r7, [sp, #12]
 8006740:	4621      	mov	r1, r4
 8006742:	4650      	mov	r0, sl
 8006744:	f7ff f9e2 	bl	8005b0c <quorem>
 8006748:	9b03      	ldr	r3, [sp, #12]
 800674a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800674e:	f807 9b01 	strb.w	r9, [r7], #1
 8006752:	1afa      	subs	r2, r7, r3
 8006754:	9b06      	ldr	r3, [sp, #24]
 8006756:	4293      	cmp	r3, r2
 8006758:	dd07      	ble.n	800676a <_dtoa_r+0xb4a>
 800675a:	4651      	mov	r1, sl
 800675c:	2300      	movs	r3, #0
 800675e:	220a      	movs	r2, #10
 8006760:	4628      	mov	r0, r5
 8006762:	f000 f99f 	bl	8006aa4 <__multadd>
 8006766:	4682      	mov	sl, r0
 8006768:	e7ea      	b.n	8006740 <_dtoa_r+0xb20>
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	f04f 0800 	mov.w	r8, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	bfcc      	ite	gt
 8006774:	461f      	movgt	r7, r3
 8006776:	2701      	movle	r7, #1
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	441f      	add	r7, r3
 800677c:	4651      	mov	r1, sl
 800677e:	2201      	movs	r2, #1
 8006780:	4628      	mov	r0, r5
 8006782:	f000 fb85 	bl	8006e90 <__lshift>
 8006786:	4621      	mov	r1, r4
 8006788:	4682      	mov	sl, r0
 800678a:	f000 fbed 	bl	8006f68 <__mcmp>
 800678e:	2800      	cmp	r0, #0
 8006790:	dc97      	bgt.n	80066c2 <_dtoa_r+0xaa2>
 8006792:	d102      	bne.n	800679a <_dtoa_r+0xb7a>
 8006794:	f019 0f01 	tst.w	r9, #1
 8006798:	d193      	bne.n	80066c2 <_dtoa_r+0xaa2>
 800679a:	463b      	mov	r3, r7
 800679c:	461f      	mov	r7, r3
 800679e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067a2:	2a30      	cmp	r2, #48	; 0x30
 80067a4:	d0fa      	beq.n	800679c <_dtoa_r+0xb7c>
 80067a6:	e6e1      	b.n	800656c <_dtoa_r+0x94c>
 80067a8:	9a03      	ldr	r2, [sp, #12]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d18a      	bne.n	80066c4 <_dtoa_r+0xaa4>
 80067ae:	2331      	movs	r3, #49	; 0x31
 80067b0:	f10b 0b01 	add.w	fp, fp, #1
 80067b4:	e797      	b.n	80066e6 <_dtoa_r+0xac6>
 80067b6:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <_dtoa_r+0xbc0>)
 80067b8:	f7ff ba9f 	b.w	8005cfa <_dtoa_r+0xda>
 80067bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f47f aa77 	bne.w	8005cb2 <_dtoa_r+0x92>
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <_dtoa_r+0xbc4>)
 80067c6:	f7ff ba98 	b.w	8005cfa <_dtoa_r+0xda>
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	dcb6      	bgt.n	800673e <_dtoa_r+0xb1e>
 80067d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	f73f aeb5 	bgt.w	8006542 <_dtoa_r+0x922>
 80067d8:	e7b1      	b.n	800673e <_dtoa_r+0xb1e>
 80067da:	bf00      	nop
 80067dc:	08009327 	.word	0x08009327
 80067e0:	08009282 	.word	0x08009282
 80067e4:	080092ab 	.word	0x080092ab

080067e8 <_free_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4605      	mov	r5, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d040      	beq.n	8006872 <_free_r+0x8a>
 80067f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f4:	1f0c      	subs	r4, r1, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfb8      	it	lt
 80067fa:	18e4      	addlt	r4, r4, r3
 80067fc:	f000 f8e4 	bl	80069c8 <__malloc_lock>
 8006800:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <_free_r+0x8c>)
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	b933      	cbnz	r3, 8006814 <_free_r+0x2c>
 8006806:	6063      	str	r3, [r4, #4]
 8006808:	6014      	str	r4, [r2, #0]
 800680a:	4628      	mov	r0, r5
 800680c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006810:	f000 b8e0 	b.w	80069d4 <__malloc_unlock>
 8006814:	42a3      	cmp	r3, r4
 8006816:	d908      	bls.n	800682a <_free_r+0x42>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	1821      	adds	r1, r4, r0
 800681c:	428b      	cmp	r3, r1
 800681e:	bf01      	itttt	eq
 8006820:	6819      	ldreq	r1, [r3, #0]
 8006822:	685b      	ldreq	r3, [r3, #4]
 8006824:	1809      	addeq	r1, r1, r0
 8006826:	6021      	streq	r1, [r4, #0]
 8006828:	e7ed      	b.n	8006806 <_free_r+0x1e>
 800682a:	461a      	mov	r2, r3
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	b10b      	cbz	r3, 8006834 <_free_r+0x4c>
 8006830:	42a3      	cmp	r3, r4
 8006832:	d9fa      	bls.n	800682a <_free_r+0x42>
 8006834:	6811      	ldr	r1, [r2, #0]
 8006836:	1850      	adds	r0, r2, r1
 8006838:	42a0      	cmp	r0, r4
 800683a:	d10b      	bne.n	8006854 <_free_r+0x6c>
 800683c:	6820      	ldr	r0, [r4, #0]
 800683e:	4401      	add	r1, r0
 8006840:	1850      	adds	r0, r2, r1
 8006842:	4283      	cmp	r3, r0
 8006844:	6011      	str	r1, [r2, #0]
 8006846:	d1e0      	bne.n	800680a <_free_r+0x22>
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4408      	add	r0, r1
 800684e:	6010      	str	r0, [r2, #0]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	e7da      	b.n	800680a <_free_r+0x22>
 8006854:	d902      	bls.n	800685c <_free_r+0x74>
 8006856:	230c      	movs	r3, #12
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	e7d6      	b.n	800680a <_free_r+0x22>
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	1821      	adds	r1, r4, r0
 8006860:	428b      	cmp	r3, r1
 8006862:	bf01      	itttt	eq
 8006864:	6819      	ldreq	r1, [r3, #0]
 8006866:	685b      	ldreq	r3, [r3, #4]
 8006868:	1809      	addeq	r1, r1, r0
 800686a:	6021      	streq	r1, [r4, #0]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	6054      	str	r4, [r2, #4]
 8006870:	e7cb      	b.n	800680a <_free_r+0x22>
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	20000484 	.word	0x20000484

08006878 <malloc>:
 8006878:	4b02      	ldr	r3, [pc, #8]	; (8006884 <malloc+0xc>)
 800687a:	4601      	mov	r1, r0
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f000 b823 	b.w	80068c8 <_malloc_r>
 8006882:	bf00      	nop
 8006884:	20000074 	.word	0x20000074

08006888 <sbrk_aligned>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	4e0e      	ldr	r6, [pc, #56]	; (80068c4 <sbrk_aligned+0x3c>)
 800688c:	460c      	mov	r4, r1
 800688e:	6831      	ldr	r1, [r6, #0]
 8006890:	4605      	mov	r5, r0
 8006892:	b911      	cbnz	r1, 800689a <sbrk_aligned+0x12>
 8006894:	f001 fe0c 	bl	80084b0 <_sbrk_r>
 8006898:	6030      	str	r0, [r6, #0]
 800689a:	4621      	mov	r1, r4
 800689c:	4628      	mov	r0, r5
 800689e:	f001 fe07 	bl	80084b0 <_sbrk_r>
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	d00a      	beq.n	80068bc <sbrk_aligned+0x34>
 80068a6:	1cc4      	adds	r4, r0, #3
 80068a8:	f024 0403 	bic.w	r4, r4, #3
 80068ac:	42a0      	cmp	r0, r4
 80068ae:	d007      	beq.n	80068c0 <sbrk_aligned+0x38>
 80068b0:	1a21      	subs	r1, r4, r0
 80068b2:	4628      	mov	r0, r5
 80068b4:	f001 fdfc 	bl	80084b0 <_sbrk_r>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d101      	bne.n	80068c0 <sbrk_aligned+0x38>
 80068bc:	f04f 34ff 	mov.w	r4, #4294967295
 80068c0:	4620      	mov	r0, r4
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	20000488 	.word	0x20000488

080068c8 <_malloc_r>:
 80068c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	1ccd      	adds	r5, r1, #3
 80068ce:	f025 0503 	bic.w	r5, r5, #3
 80068d2:	3508      	adds	r5, #8
 80068d4:	2d0c      	cmp	r5, #12
 80068d6:	bf38      	it	cc
 80068d8:	250c      	movcc	r5, #12
 80068da:	2d00      	cmp	r5, #0
 80068dc:	4607      	mov	r7, r0
 80068de:	db01      	blt.n	80068e4 <_malloc_r+0x1c>
 80068e0:	42a9      	cmp	r1, r5
 80068e2:	d905      	bls.n	80068f0 <_malloc_r+0x28>
 80068e4:	230c      	movs	r3, #12
 80068e6:	2600      	movs	r6, #0
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	4630      	mov	r0, r6
 80068ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80069c4 <_malloc_r+0xfc>
 80068f4:	f000 f868 	bl	80069c8 <__malloc_lock>
 80068f8:	f8d8 3000 	ldr.w	r3, [r8]
 80068fc:	461c      	mov	r4, r3
 80068fe:	bb5c      	cbnz	r4, 8006958 <_malloc_r+0x90>
 8006900:	4629      	mov	r1, r5
 8006902:	4638      	mov	r0, r7
 8006904:	f7ff ffc0 	bl	8006888 <sbrk_aligned>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	4604      	mov	r4, r0
 800690c:	d155      	bne.n	80069ba <_malloc_r+0xf2>
 800690e:	f8d8 4000 	ldr.w	r4, [r8]
 8006912:	4626      	mov	r6, r4
 8006914:	2e00      	cmp	r6, #0
 8006916:	d145      	bne.n	80069a4 <_malloc_r+0xdc>
 8006918:	2c00      	cmp	r4, #0
 800691a:	d048      	beq.n	80069ae <_malloc_r+0xe6>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	4631      	mov	r1, r6
 8006920:	4638      	mov	r0, r7
 8006922:	eb04 0903 	add.w	r9, r4, r3
 8006926:	f001 fdc3 	bl	80084b0 <_sbrk_r>
 800692a:	4581      	cmp	r9, r0
 800692c:	d13f      	bne.n	80069ae <_malloc_r+0xe6>
 800692e:	6821      	ldr	r1, [r4, #0]
 8006930:	4638      	mov	r0, r7
 8006932:	1a6d      	subs	r5, r5, r1
 8006934:	4629      	mov	r1, r5
 8006936:	f7ff ffa7 	bl	8006888 <sbrk_aligned>
 800693a:	3001      	adds	r0, #1
 800693c:	d037      	beq.n	80069ae <_malloc_r+0xe6>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	442b      	add	r3, r5
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	f8d8 3000 	ldr.w	r3, [r8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d038      	beq.n	80069be <_malloc_r+0xf6>
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	42a2      	cmp	r2, r4
 8006950:	d12b      	bne.n	80069aa <_malloc_r+0xe2>
 8006952:	2200      	movs	r2, #0
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	e00f      	b.n	8006978 <_malloc_r+0xb0>
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	1b52      	subs	r2, r2, r5
 800695c:	d41f      	bmi.n	800699e <_malloc_r+0xd6>
 800695e:	2a0b      	cmp	r2, #11
 8006960:	d917      	bls.n	8006992 <_malloc_r+0xca>
 8006962:	1961      	adds	r1, r4, r5
 8006964:	42a3      	cmp	r3, r4
 8006966:	6025      	str	r5, [r4, #0]
 8006968:	bf18      	it	ne
 800696a:	6059      	strne	r1, [r3, #4]
 800696c:	6863      	ldr	r3, [r4, #4]
 800696e:	bf08      	it	eq
 8006970:	f8c8 1000 	streq.w	r1, [r8]
 8006974:	5162      	str	r2, [r4, r5]
 8006976:	604b      	str	r3, [r1, #4]
 8006978:	4638      	mov	r0, r7
 800697a:	f104 060b 	add.w	r6, r4, #11
 800697e:	f000 f829 	bl	80069d4 <__malloc_unlock>
 8006982:	f026 0607 	bic.w	r6, r6, #7
 8006986:	1d23      	adds	r3, r4, #4
 8006988:	1af2      	subs	r2, r6, r3
 800698a:	d0ae      	beq.n	80068ea <_malloc_r+0x22>
 800698c:	1b9b      	subs	r3, r3, r6
 800698e:	50a3      	str	r3, [r4, r2]
 8006990:	e7ab      	b.n	80068ea <_malloc_r+0x22>
 8006992:	42a3      	cmp	r3, r4
 8006994:	6862      	ldr	r2, [r4, #4]
 8006996:	d1dd      	bne.n	8006954 <_malloc_r+0x8c>
 8006998:	f8c8 2000 	str.w	r2, [r8]
 800699c:	e7ec      	b.n	8006978 <_malloc_r+0xb0>
 800699e:	4623      	mov	r3, r4
 80069a0:	6864      	ldr	r4, [r4, #4]
 80069a2:	e7ac      	b.n	80068fe <_malloc_r+0x36>
 80069a4:	4634      	mov	r4, r6
 80069a6:	6876      	ldr	r6, [r6, #4]
 80069a8:	e7b4      	b.n	8006914 <_malloc_r+0x4c>
 80069aa:	4613      	mov	r3, r2
 80069ac:	e7cc      	b.n	8006948 <_malloc_r+0x80>
 80069ae:	230c      	movs	r3, #12
 80069b0:	4638      	mov	r0, r7
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	f000 f80e 	bl	80069d4 <__malloc_unlock>
 80069b8:	e797      	b.n	80068ea <_malloc_r+0x22>
 80069ba:	6025      	str	r5, [r4, #0]
 80069bc:	e7dc      	b.n	8006978 <_malloc_r+0xb0>
 80069be:	605b      	str	r3, [r3, #4]
 80069c0:	deff      	udf	#255	; 0xff
 80069c2:	bf00      	nop
 80069c4:	20000484 	.word	0x20000484

080069c8 <__malloc_lock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__malloc_lock+0x8>)
 80069ca:	f7ff b88b 	b.w	8005ae4 <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	20000480 	.word	0x20000480

080069d4 <__malloc_unlock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__malloc_unlock+0x8>)
 80069d6:	f7ff b886 	b.w	8005ae6 <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	20000480 	.word	0x20000480

080069e0 <_Balloc>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	69c6      	ldr	r6, [r0, #28]
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	b976      	cbnz	r6, 8006a08 <_Balloc+0x28>
 80069ea:	2010      	movs	r0, #16
 80069ec:	f7ff ff44 	bl	8006878 <malloc>
 80069f0:	4602      	mov	r2, r0
 80069f2:	61e0      	str	r0, [r4, #28]
 80069f4:	b920      	cbnz	r0, 8006a00 <_Balloc+0x20>
 80069f6:	216b      	movs	r1, #107	; 0x6b
 80069f8:	4b17      	ldr	r3, [pc, #92]	; (8006a58 <_Balloc+0x78>)
 80069fa:	4818      	ldr	r0, [pc, #96]	; (8006a5c <_Balloc+0x7c>)
 80069fc:	f001 fd7c 	bl	80084f8 <__assert_func>
 8006a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a04:	6006      	str	r6, [r0, #0]
 8006a06:	60c6      	str	r6, [r0, #12]
 8006a08:	69e6      	ldr	r6, [r4, #28]
 8006a0a:	68f3      	ldr	r3, [r6, #12]
 8006a0c:	b183      	cbz	r3, 8006a30 <_Balloc+0x50>
 8006a0e:	69e3      	ldr	r3, [r4, #28]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a16:	b9b8      	cbnz	r0, 8006a48 <_Balloc+0x68>
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a1e:	1d72      	adds	r2, r6, #5
 8006a20:	4620      	mov	r0, r4
 8006a22:	0092      	lsls	r2, r2, #2
 8006a24:	f001 fd86 	bl	8008534 <_calloc_r>
 8006a28:	b160      	cbz	r0, 8006a44 <_Balloc+0x64>
 8006a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a2e:	e00e      	b.n	8006a4e <_Balloc+0x6e>
 8006a30:	2221      	movs	r2, #33	; 0x21
 8006a32:	2104      	movs	r1, #4
 8006a34:	4620      	mov	r0, r4
 8006a36:	f001 fd7d 	bl	8008534 <_calloc_r>
 8006a3a:	69e3      	ldr	r3, [r4, #28]
 8006a3c:	60f0      	str	r0, [r6, #12]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e4      	bne.n	8006a0e <_Balloc+0x2e>
 8006a44:	2000      	movs	r0, #0
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	6802      	ldr	r2, [r0, #0]
 8006a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a54:	e7f7      	b.n	8006a46 <_Balloc+0x66>
 8006a56:	bf00      	nop
 8006a58:	080092b8 	.word	0x080092b8
 8006a5c:	08009338 	.word	0x08009338

08006a60 <_Bfree>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	69c6      	ldr	r6, [r0, #28]
 8006a64:	4605      	mov	r5, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b976      	cbnz	r6, 8006a88 <_Bfree+0x28>
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f7ff ff04 	bl	8006878 <malloc>
 8006a70:	4602      	mov	r2, r0
 8006a72:	61e8      	str	r0, [r5, #28]
 8006a74:	b920      	cbnz	r0, 8006a80 <_Bfree+0x20>
 8006a76:	218f      	movs	r1, #143	; 0x8f
 8006a78:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <_Bfree+0x3c>)
 8006a7a:	4809      	ldr	r0, [pc, #36]	; (8006aa0 <_Bfree+0x40>)
 8006a7c:	f001 fd3c 	bl	80084f8 <__assert_func>
 8006a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a84:	6006      	str	r6, [r0, #0]
 8006a86:	60c6      	str	r6, [r0, #12]
 8006a88:	b13c      	cbz	r4, 8006a9a <_Bfree+0x3a>
 8006a8a:	69eb      	ldr	r3, [r5, #28]
 8006a8c:	6862      	ldr	r2, [r4, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a94:	6021      	str	r1, [r4, #0]
 8006a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	080092b8 	.word	0x080092b8
 8006aa0:	08009338 	.word	0x08009338

08006aa4 <__multadd>:
 8006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	461e      	mov	r6, r3
 8006aae:	2000      	movs	r0, #0
 8006ab0:	690d      	ldr	r5, [r1, #16]
 8006ab2:	f101 0c14 	add.w	ip, r1, #20
 8006ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8006aba:	3001      	adds	r0, #1
 8006abc:	b299      	uxth	r1, r3
 8006abe:	fb02 6101 	mla	r1, r2, r1, r6
 8006ac2:	0c1e      	lsrs	r6, r3, #16
 8006ac4:	0c0b      	lsrs	r3, r1, #16
 8006ac6:	fb02 3306 	mla	r3, r2, r6, r3
 8006aca:	b289      	uxth	r1, r1
 8006acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ad0:	4285      	cmp	r5, r0
 8006ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8006ada:	dcec      	bgt.n	8006ab6 <__multadd+0x12>
 8006adc:	b30e      	cbz	r6, 8006b22 <__multadd+0x7e>
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	42ab      	cmp	r3, r5
 8006ae2:	dc19      	bgt.n	8006b18 <__multadd+0x74>
 8006ae4:	6861      	ldr	r1, [r4, #4]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	3101      	adds	r1, #1
 8006aea:	f7ff ff79 	bl	80069e0 <_Balloc>
 8006aee:	4680      	mov	r8, r0
 8006af0:	b928      	cbnz	r0, 8006afe <__multadd+0x5a>
 8006af2:	4602      	mov	r2, r0
 8006af4:	21ba      	movs	r1, #186	; 0xba
 8006af6:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <__multadd+0x84>)
 8006af8:	480c      	ldr	r0, [pc, #48]	; (8006b2c <__multadd+0x88>)
 8006afa:	f001 fcfd 	bl	80084f8 <__assert_func>
 8006afe:	6922      	ldr	r2, [r4, #16]
 8006b00:	f104 010c 	add.w	r1, r4, #12
 8006b04:	3202      	adds	r2, #2
 8006b06:	0092      	lsls	r2, r2, #2
 8006b08:	300c      	adds	r0, #12
 8006b0a:	f001 fce1 	bl	80084d0 <memcpy>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff ffa5 	bl	8006a60 <_Bfree>
 8006b16:	4644      	mov	r4, r8
 8006b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	615e      	str	r6, [r3, #20]
 8006b20:	6125      	str	r5, [r4, #16]
 8006b22:	4620      	mov	r0, r4
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b28:	08009327 	.word	0x08009327
 8006b2c:	08009338 	.word	0x08009338

08006b30 <__s2b>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	4615      	mov	r5, r2
 8006b36:	2209      	movs	r2, #9
 8006b38:	461f      	mov	r7, r3
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b42:	4606      	mov	r6, r0
 8006b44:	2201      	movs	r2, #1
 8006b46:	2100      	movs	r1, #0
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	db09      	blt.n	8006b60 <__s2b+0x30>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff ff47 	bl	80069e0 <_Balloc>
 8006b52:	b940      	cbnz	r0, 8006b66 <__s2b+0x36>
 8006b54:	4602      	mov	r2, r0
 8006b56:	21d3      	movs	r1, #211	; 0xd3
 8006b58:	4b18      	ldr	r3, [pc, #96]	; (8006bbc <__s2b+0x8c>)
 8006b5a:	4819      	ldr	r0, [pc, #100]	; (8006bc0 <__s2b+0x90>)
 8006b5c:	f001 fccc 	bl	80084f8 <__assert_func>
 8006b60:	0052      	lsls	r2, r2, #1
 8006b62:	3101      	adds	r1, #1
 8006b64:	e7f0      	b.n	8006b48 <__s2b+0x18>
 8006b66:	9b08      	ldr	r3, [sp, #32]
 8006b68:	2d09      	cmp	r5, #9
 8006b6a:	6143      	str	r3, [r0, #20]
 8006b6c:	f04f 0301 	mov.w	r3, #1
 8006b70:	6103      	str	r3, [r0, #16]
 8006b72:	dd16      	ble.n	8006ba2 <__s2b+0x72>
 8006b74:	f104 0909 	add.w	r9, r4, #9
 8006b78:	46c8      	mov	r8, r9
 8006b7a:	442c      	add	r4, r5
 8006b7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b80:	4601      	mov	r1, r0
 8006b82:	220a      	movs	r2, #10
 8006b84:	4630      	mov	r0, r6
 8006b86:	3b30      	subs	r3, #48	; 0x30
 8006b88:	f7ff ff8c 	bl	8006aa4 <__multadd>
 8006b8c:	45a0      	cmp	r8, r4
 8006b8e:	d1f5      	bne.n	8006b7c <__s2b+0x4c>
 8006b90:	f1a5 0408 	sub.w	r4, r5, #8
 8006b94:	444c      	add	r4, r9
 8006b96:	1b2d      	subs	r5, r5, r4
 8006b98:	1963      	adds	r3, r4, r5
 8006b9a:	42bb      	cmp	r3, r7
 8006b9c:	db04      	blt.n	8006ba8 <__s2b+0x78>
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	2509      	movs	r5, #9
 8006ba4:	340a      	adds	r4, #10
 8006ba6:	e7f6      	b.n	8006b96 <__s2b+0x66>
 8006ba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bac:	4601      	mov	r1, r0
 8006bae:	220a      	movs	r2, #10
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	3b30      	subs	r3, #48	; 0x30
 8006bb4:	f7ff ff76 	bl	8006aa4 <__multadd>
 8006bb8:	e7ee      	b.n	8006b98 <__s2b+0x68>
 8006bba:	bf00      	nop
 8006bbc:	08009327 	.word	0x08009327
 8006bc0:	08009338 	.word	0x08009338

08006bc4 <__hi0bits>:
 8006bc4:	0c02      	lsrs	r2, r0, #16
 8006bc6:	0412      	lsls	r2, r2, #16
 8006bc8:	4603      	mov	r3, r0
 8006bca:	b9ca      	cbnz	r2, 8006c00 <__hi0bits+0x3c>
 8006bcc:	0403      	lsls	r3, r0, #16
 8006bce:	2010      	movs	r0, #16
 8006bd0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006bd4:	bf04      	itt	eq
 8006bd6:	021b      	lsleq	r3, r3, #8
 8006bd8:	3008      	addeq	r0, #8
 8006bda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006bde:	bf04      	itt	eq
 8006be0:	011b      	lsleq	r3, r3, #4
 8006be2:	3004      	addeq	r0, #4
 8006be4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006be8:	bf04      	itt	eq
 8006bea:	009b      	lsleq	r3, r3, #2
 8006bec:	3002      	addeq	r0, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	db05      	blt.n	8006bfe <__hi0bits+0x3a>
 8006bf2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006bf6:	f100 0001 	add.w	r0, r0, #1
 8006bfa:	bf08      	it	eq
 8006bfc:	2020      	moveq	r0, #32
 8006bfe:	4770      	bx	lr
 8006c00:	2000      	movs	r0, #0
 8006c02:	e7e5      	b.n	8006bd0 <__hi0bits+0xc>

08006c04 <__lo0bits>:
 8006c04:	6803      	ldr	r3, [r0, #0]
 8006c06:	4602      	mov	r2, r0
 8006c08:	f013 0007 	ands.w	r0, r3, #7
 8006c0c:	d00b      	beq.n	8006c26 <__lo0bits+0x22>
 8006c0e:	07d9      	lsls	r1, r3, #31
 8006c10:	d421      	bmi.n	8006c56 <__lo0bits+0x52>
 8006c12:	0798      	lsls	r0, r3, #30
 8006c14:	bf49      	itett	mi
 8006c16:	085b      	lsrmi	r3, r3, #1
 8006c18:	089b      	lsrpl	r3, r3, #2
 8006c1a:	2001      	movmi	r0, #1
 8006c1c:	6013      	strmi	r3, [r2, #0]
 8006c1e:	bf5c      	itt	pl
 8006c20:	2002      	movpl	r0, #2
 8006c22:	6013      	strpl	r3, [r2, #0]
 8006c24:	4770      	bx	lr
 8006c26:	b299      	uxth	r1, r3
 8006c28:	b909      	cbnz	r1, 8006c2e <__lo0bits+0x2a>
 8006c2a:	2010      	movs	r0, #16
 8006c2c:	0c1b      	lsrs	r3, r3, #16
 8006c2e:	b2d9      	uxtb	r1, r3
 8006c30:	b909      	cbnz	r1, 8006c36 <__lo0bits+0x32>
 8006c32:	3008      	adds	r0, #8
 8006c34:	0a1b      	lsrs	r3, r3, #8
 8006c36:	0719      	lsls	r1, r3, #28
 8006c38:	bf04      	itt	eq
 8006c3a:	091b      	lsreq	r3, r3, #4
 8006c3c:	3004      	addeq	r0, #4
 8006c3e:	0799      	lsls	r1, r3, #30
 8006c40:	bf04      	itt	eq
 8006c42:	089b      	lsreq	r3, r3, #2
 8006c44:	3002      	addeq	r0, #2
 8006c46:	07d9      	lsls	r1, r3, #31
 8006c48:	d403      	bmi.n	8006c52 <__lo0bits+0x4e>
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	f100 0001 	add.w	r0, r0, #1
 8006c50:	d003      	beq.n	8006c5a <__lo0bits+0x56>
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	4770      	bx	lr
 8006c56:	2000      	movs	r0, #0
 8006c58:	4770      	bx	lr
 8006c5a:	2020      	movs	r0, #32
 8006c5c:	4770      	bx	lr
	...

08006c60 <__i2b>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	460c      	mov	r4, r1
 8006c64:	2101      	movs	r1, #1
 8006c66:	f7ff febb 	bl	80069e0 <_Balloc>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	b928      	cbnz	r0, 8006c7a <__i2b+0x1a>
 8006c6e:	f240 1145 	movw	r1, #325	; 0x145
 8006c72:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <__i2b+0x24>)
 8006c74:	4804      	ldr	r0, [pc, #16]	; (8006c88 <__i2b+0x28>)
 8006c76:	f001 fc3f 	bl	80084f8 <__assert_func>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	6144      	str	r4, [r0, #20]
 8006c7e:	6103      	str	r3, [r0, #16]
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08009327 	.word	0x08009327
 8006c88:	08009338 	.word	0x08009338

08006c8c <__multiply>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	4691      	mov	r9, r2
 8006c92:	690a      	ldr	r2, [r1, #16]
 8006c94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c98:	460c      	mov	r4, r1
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	bfbe      	ittt	lt
 8006c9e:	460b      	movlt	r3, r1
 8006ca0:	464c      	movlt	r4, r9
 8006ca2:	4699      	movlt	r9, r3
 8006ca4:	6927      	ldr	r7, [r4, #16]
 8006ca6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	6861      	ldr	r1, [r4, #4]
 8006cae:	eb07 060a 	add.w	r6, r7, sl
 8006cb2:	42b3      	cmp	r3, r6
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	bfb8      	it	lt
 8006cb8:	3101      	addlt	r1, #1
 8006cba:	f7ff fe91 	bl	80069e0 <_Balloc>
 8006cbe:	b930      	cbnz	r0, 8006cce <__multiply+0x42>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006cc6:	4b43      	ldr	r3, [pc, #268]	; (8006dd4 <__multiply+0x148>)
 8006cc8:	4843      	ldr	r0, [pc, #268]	; (8006dd8 <__multiply+0x14c>)
 8006cca:	f001 fc15 	bl	80084f8 <__assert_func>
 8006cce:	f100 0514 	add.w	r5, r0, #20
 8006cd2:	462b      	mov	r3, r5
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cda:	4543      	cmp	r3, r8
 8006cdc:	d321      	bcc.n	8006d22 <__multiply+0x96>
 8006cde:	f104 0314 	add.w	r3, r4, #20
 8006ce2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ce6:	f109 0314 	add.w	r3, r9, #20
 8006cea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006cee:	9202      	str	r2, [sp, #8]
 8006cf0:	1b3a      	subs	r2, r7, r4
 8006cf2:	3a15      	subs	r2, #21
 8006cf4:	f022 0203 	bic.w	r2, r2, #3
 8006cf8:	3204      	adds	r2, #4
 8006cfa:	f104 0115 	add.w	r1, r4, #21
 8006cfe:	428f      	cmp	r7, r1
 8006d00:	bf38      	it	cc
 8006d02:	2204      	movcc	r2, #4
 8006d04:	9201      	str	r2, [sp, #4]
 8006d06:	9a02      	ldr	r2, [sp, #8]
 8006d08:	9303      	str	r3, [sp, #12]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d80c      	bhi.n	8006d28 <__multiply+0x9c>
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	dd03      	ble.n	8006d1a <__multiply+0x8e>
 8006d12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d05a      	beq.n	8006dd0 <__multiply+0x144>
 8006d1a:	6106      	str	r6, [r0, #16]
 8006d1c:	b005      	add	sp, #20
 8006d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d22:	f843 2b04 	str.w	r2, [r3], #4
 8006d26:	e7d8      	b.n	8006cda <__multiply+0x4e>
 8006d28:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d2c:	f1ba 0f00 	cmp.w	sl, #0
 8006d30:	d023      	beq.n	8006d7a <__multiply+0xee>
 8006d32:	46a9      	mov	r9, r5
 8006d34:	f04f 0c00 	mov.w	ip, #0
 8006d38:	f104 0e14 	add.w	lr, r4, #20
 8006d3c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d40:	f8d9 1000 	ldr.w	r1, [r9]
 8006d44:	fa1f fb82 	uxth.w	fp, r2
 8006d48:	b289      	uxth	r1, r1
 8006d4a:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d4e:	4461      	add	r1, ip
 8006d50:	f8d9 c000 	ldr.w	ip, [r9]
 8006d54:	0c12      	lsrs	r2, r2, #16
 8006d56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d5a:	fb0a c202 	mla	r2, sl, r2, ip
 8006d5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d62:	b289      	uxth	r1, r1
 8006d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d68:	4577      	cmp	r7, lr
 8006d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d6e:	f849 1b04 	str.w	r1, [r9], #4
 8006d72:	d8e3      	bhi.n	8006d3c <__multiply+0xb0>
 8006d74:	9a01      	ldr	r2, [sp, #4]
 8006d76:	f845 c002 	str.w	ip, [r5, r2]
 8006d7a:	9a03      	ldr	r2, [sp, #12]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d82:	f1b9 0f00 	cmp.w	r9, #0
 8006d86:	d021      	beq.n	8006dcc <__multiply+0x140>
 8006d88:	46ae      	mov	lr, r5
 8006d8a:	f04f 0a00 	mov.w	sl, #0
 8006d8e:	6829      	ldr	r1, [r5, #0]
 8006d90:	f104 0c14 	add.w	ip, r4, #20
 8006d94:	f8bc b000 	ldrh.w	fp, [ip]
 8006d98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d9c:	b289      	uxth	r1, r1
 8006d9e:	fb09 220b 	mla	r2, r9, fp, r2
 8006da2:	4452      	add	r2, sl
 8006da4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006da8:	f84e 1b04 	str.w	r1, [lr], #4
 8006dac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006db0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006db4:	f8be 1000 	ldrh.w	r1, [lr]
 8006db8:	4567      	cmp	r7, ip
 8006dba:	fb09 110a 	mla	r1, r9, sl, r1
 8006dbe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006dc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dc6:	d8e5      	bhi.n	8006d94 <__multiply+0x108>
 8006dc8:	9a01      	ldr	r2, [sp, #4]
 8006dca:	50a9      	str	r1, [r5, r2]
 8006dcc:	3504      	adds	r5, #4
 8006dce:	e79a      	b.n	8006d06 <__multiply+0x7a>
 8006dd0:	3e01      	subs	r6, #1
 8006dd2:	e79c      	b.n	8006d0e <__multiply+0x82>
 8006dd4:	08009327 	.word	0x08009327
 8006dd8:	08009338 	.word	0x08009338

08006ddc <__pow5mult>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4615      	mov	r5, r2
 8006de2:	f012 0203 	ands.w	r2, r2, #3
 8006de6:	4606      	mov	r6, r0
 8006de8:	460f      	mov	r7, r1
 8006dea:	d007      	beq.n	8006dfc <__pow5mult+0x20>
 8006dec:	4c25      	ldr	r4, [pc, #148]	; (8006e84 <__pow5mult+0xa8>)
 8006dee:	3a01      	subs	r2, #1
 8006df0:	2300      	movs	r3, #0
 8006df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006df6:	f7ff fe55 	bl	8006aa4 <__multadd>
 8006dfa:	4607      	mov	r7, r0
 8006dfc:	10ad      	asrs	r5, r5, #2
 8006dfe:	d03d      	beq.n	8006e7c <__pow5mult+0xa0>
 8006e00:	69f4      	ldr	r4, [r6, #28]
 8006e02:	b97c      	cbnz	r4, 8006e24 <__pow5mult+0x48>
 8006e04:	2010      	movs	r0, #16
 8006e06:	f7ff fd37 	bl	8006878 <malloc>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	61f0      	str	r0, [r6, #28]
 8006e0e:	b928      	cbnz	r0, 8006e1c <__pow5mult+0x40>
 8006e10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006e14:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <__pow5mult+0xac>)
 8006e16:	481d      	ldr	r0, [pc, #116]	; (8006e8c <__pow5mult+0xb0>)
 8006e18:	f001 fb6e 	bl	80084f8 <__assert_func>
 8006e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e20:	6004      	str	r4, [r0, #0]
 8006e22:	60c4      	str	r4, [r0, #12]
 8006e24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e2c:	b94c      	cbnz	r4, 8006e42 <__pow5mult+0x66>
 8006e2e:	f240 2171 	movw	r1, #625	; 0x271
 8006e32:	4630      	mov	r0, r6
 8006e34:	f7ff ff14 	bl	8006c60 <__i2b>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e40:	6003      	str	r3, [r0, #0]
 8006e42:	f04f 0900 	mov.w	r9, #0
 8006e46:	07eb      	lsls	r3, r5, #31
 8006e48:	d50a      	bpl.n	8006e60 <__pow5mult+0x84>
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7ff ff1c 	bl	8006c8c <__multiply>
 8006e54:	4680      	mov	r8, r0
 8006e56:	4639      	mov	r1, r7
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7ff fe01 	bl	8006a60 <_Bfree>
 8006e5e:	4647      	mov	r7, r8
 8006e60:	106d      	asrs	r5, r5, #1
 8006e62:	d00b      	beq.n	8006e7c <__pow5mult+0xa0>
 8006e64:	6820      	ldr	r0, [r4, #0]
 8006e66:	b938      	cbnz	r0, 8006e78 <__pow5mult+0x9c>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff ff0d 	bl	8006c8c <__multiply>
 8006e72:	6020      	str	r0, [r4, #0]
 8006e74:	f8c0 9000 	str.w	r9, [r0]
 8006e78:	4604      	mov	r4, r0
 8006e7a:	e7e4      	b.n	8006e46 <__pow5mult+0x6a>
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e82:	bf00      	nop
 8006e84:	08009488 	.word	0x08009488
 8006e88:	080092b8 	.word	0x080092b8
 8006e8c:	08009338 	.word	0x08009338

08006e90 <__lshift>:
 8006e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e94:	460c      	mov	r4, r1
 8006e96:	4607      	mov	r7, r0
 8006e98:	4691      	mov	r9, r2
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	6849      	ldr	r1, [r1, #4]
 8006e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ea8:	f108 0601 	add.w	r6, r8, #1
 8006eac:	42b3      	cmp	r3, r6
 8006eae:	db0b      	blt.n	8006ec8 <__lshift+0x38>
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f7ff fd95 	bl	80069e0 <_Balloc>
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	b948      	cbnz	r0, 8006ece <__lshift+0x3e>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ec0:	4b27      	ldr	r3, [pc, #156]	; (8006f60 <__lshift+0xd0>)
 8006ec2:	4828      	ldr	r0, [pc, #160]	; (8006f64 <__lshift+0xd4>)
 8006ec4:	f001 fb18 	bl	80084f8 <__assert_func>
 8006ec8:	3101      	adds	r1, #1
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	e7ee      	b.n	8006eac <__lshift+0x1c>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f100 0114 	add.w	r1, r0, #20
 8006ed4:	f100 0210 	add.w	r2, r0, #16
 8006ed8:	4618      	mov	r0, r3
 8006eda:	4553      	cmp	r3, sl
 8006edc:	db33      	blt.n	8006f46 <__lshift+0xb6>
 8006ede:	6920      	ldr	r0, [r4, #16]
 8006ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ee4:	f104 0314 	add.w	r3, r4, #20
 8006ee8:	f019 091f 	ands.w	r9, r9, #31
 8006eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ef4:	d02b      	beq.n	8006f4e <__lshift+0xbe>
 8006ef6:	468a      	mov	sl, r1
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f1c9 0e20 	rsb	lr, r9, #32
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	fa00 f009 	lsl.w	r0, r0, r9
 8006f04:	4310      	orrs	r0, r2
 8006f06:	f84a 0b04 	str.w	r0, [sl], #4
 8006f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0e:	459c      	cmp	ip, r3
 8006f10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f14:	d8f3      	bhi.n	8006efe <__lshift+0x6e>
 8006f16:	ebac 0304 	sub.w	r3, ip, r4
 8006f1a:	3b15      	subs	r3, #21
 8006f1c:	f023 0303 	bic.w	r3, r3, #3
 8006f20:	3304      	adds	r3, #4
 8006f22:	f104 0015 	add.w	r0, r4, #21
 8006f26:	4584      	cmp	ip, r0
 8006f28:	bf38      	it	cc
 8006f2a:	2304      	movcc	r3, #4
 8006f2c:	50ca      	str	r2, [r1, r3]
 8006f2e:	b10a      	cbz	r2, 8006f34 <__lshift+0xa4>
 8006f30:	f108 0602 	add.w	r6, r8, #2
 8006f34:	3e01      	subs	r6, #1
 8006f36:	4638      	mov	r0, r7
 8006f38:	4621      	mov	r1, r4
 8006f3a:	612e      	str	r6, [r5, #16]
 8006f3c:	f7ff fd90 	bl	8006a60 <_Bfree>
 8006f40:	4628      	mov	r0, r5
 8006f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	e7c5      	b.n	8006eda <__lshift+0x4a>
 8006f4e:	3904      	subs	r1, #4
 8006f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f54:	459c      	cmp	ip, r3
 8006f56:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f5a:	d8f9      	bhi.n	8006f50 <__lshift+0xc0>
 8006f5c:	e7ea      	b.n	8006f34 <__lshift+0xa4>
 8006f5e:	bf00      	nop
 8006f60:	08009327 	.word	0x08009327
 8006f64:	08009338 	.word	0x08009338

08006f68 <__mcmp>:
 8006f68:	4603      	mov	r3, r0
 8006f6a:	690a      	ldr	r2, [r1, #16]
 8006f6c:	6900      	ldr	r0, [r0, #16]
 8006f6e:	b530      	push	{r4, r5, lr}
 8006f70:	1a80      	subs	r0, r0, r2
 8006f72:	d10d      	bne.n	8006f90 <__mcmp+0x28>
 8006f74:	3314      	adds	r3, #20
 8006f76:	3114      	adds	r1, #20
 8006f78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f88:	4295      	cmp	r5, r2
 8006f8a:	d002      	beq.n	8006f92 <__mcmp+0x2a>
 8006f8c:	d304      	bcc.n	8006f98 <__mcmp+0x30>
 8006f8e:	2001      	movs	r0, #1
 8006f90:	bd30      	pop	{r4, r5, pc}
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	d3f4      	bcc.n	8006f80 <__mcmp+0x18>
 8006f96:	e7fb      	b.n	8006f90 <__mcmp+0x28>
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9c:	e7f8      	b.n	8006f90 <__mcmp+0x28>
	...

08006fa0 <__mdiff>:
 8006fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4628      	mov	r0, r5
 8006fac:	4614      	mov	r4, r2
 8006fae:	f7ff ffdb 	bl	8006f68 <__mcmp>
 8006fb2:	1e06      	subs	r6, r0, #0
 8006fb4:	d111      	bne.n	8006fda <__mdiff+0x3a>
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f7ff fd11 	bl	80069e0 <_Balloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	b928      	cbnz	r0, 8006fce <__mdiff+0x2e>
 8006fc2:	f240 2137 	movw	r1, #567	; 0x237
 8006fc6:	4b3a      	ldr	r3, [pc, #232]	; (80070b0 <__mdiff+0x110>)
 8006fc8:	483a      	ldr	r0, [pc, #232]	; (80070b4 <__mdiff+0x114>)
 8006fca:	f001 fa95 	bl	80084f8 <__assert_func>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fda:	bfa4      	itt	ge
 8006fdc:	4623      	movge	r3, r4
 8006fde:	462c      	movge	r4, r5
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	6861      	ldr	r1, [r4, #4]
 8006fe4:	bfa6      	itte	ge
 8006fe6:	461d      	movge	r5, r3
 8006fe8:	2600      	movge	r6, #0
 8006fea:	2601      	movlt	r6, #1
 8006fec:	f7ff fcf8 	bl	80069e0 <_Balloc>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	b918      	cbnz	r0, 8006ffc <__mdiff+0x5c>
 8006ff4:	f240 2145 	movw	r1, #581	; 0x245
 8006ff8:	4b2d      	ldr	r3, [pc, #180]	; (80070b0 <__mdiff+0x110>)
 8006ffa:	e7e5      	b.n	8006fc8 <__mdiff+0x28>
 8006ffc:	f102 0814 	add.w	r8, r2, #20
 8007000:	46c2      	mov	sl, r8
 8007002:	f04f 0c00 	mov.w	ip, #0
 8007006:	6927      	ldr	r7, [r4, #16]
 8007008:	60c6      	str	r6, [r0, #12]
 800700a:	692e      	ldr	r6, [r5, #16]
 800700c:	f104 0014 	add.w	r0, r4, #20
 8007010:	f105 0914 	add.w	r9, r5, #20
 8007014:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800701c:	3410      	adds	r4, #16
 800701e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007022:	f859 3b04 	ldr.w	r3, [r9], #4
 8007026:	fa1f f18b 	uxth.w	r1, fp
 800702a:	4461      	add	r1, ip
 800702c:	fa1f fc83 	uxth.w	ip, r3
 8007030:	0c1b      	lsrs	r3, r3, #16
 8007032:	eba1 010c 	sub.w	r1, r1, ip
 8007036:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800703a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800703e:	b289      	uxth	r1, r1
 8007040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007044:	454e      	cmp	r6, r9
 8007046:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800704a:	f84a 1b04 	str.w	r1, [sl], #4
 800704e:	d8e6      	bhi.n	800701e <__mdiff+0x7e>
 8007050:	1b73      	subs	r3, r6, r5
 8007052:	3b15      	subs	r3, #21
 8007054:	f023 0303 	bic.w	r3, r3, #3
 8007058:	3515      	adds	r5, #21
 800705a:	3304      	adds	r3, #4
 800705c:	42ae      	cmp	r6, r5
 800705e:	bf38      	it	cc
 8007060:	2304      	movcc	r3, #4
 8007062:	4418      	add	r0, r3
 8007064:	4443      	add	r3, r8
 8007066:	461e      	mov	r6, r3
 8007068:	4605      	mov	r5, r0
 800706a:	4575      	cmp	r5, lr
 800706c:	d30e      	bcc.n	800708c <__mdiff+0xec>
 800706e:	f10e 0103 	add.w	r1, lr, #3
 8007072:	1a09      	subs	r1, r1, r0
 8007074:	f021 0103 	bic.w	r1, r1, #3
 8007078:	3803      	subs	r0, #3
 800707a:	4586      	cmp	lr, r0
 800707c:	bf38      	it	cc
 800707e:	2100      	movcc	r1, #0
 8007080:	440b      	add	r3, r1
 8007082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007086:	b189      	cbz	r1, 80070ac <__mdiff+0x10c>
 8007088:	6117      	str	r7, [r2, #16]
 800708a:	e7a3      	b.n	8006fd4 <__mdiff+0x34>
 800708c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007090:	fa1f f188 	uxth.w	r1, r8
 8007094:	4461      	add	r1, ip
 8007096:	140c      	asrs	r4, r1, #16
 8007098:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800709c:	b289      	uxth	r1, r1
 800709e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070a2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80070a6:	f846 1b04 	str.w	r1, [r6], #4
 80070aa:	e7de      	b.n	800706a <__mdiff+0xca>
 80070ac:	3f01      	subs	r7, #1
 80070ae:	e7e8      	b.n	8007082 <__mdiff+0xe2>
 80070b0:	08009327 	.word	0x08009327
 80070b4:	08009338 	.word	0x08009338

080070b8 <__ulp>:
 80070b8:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <__ulp+0x3c>)
 80070ba:	400b      	ands	r3, r1
 80070bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	dc08      	bgt.n	80070d6 <__ulp+0x1e>
 80070c4:	425b      	negs	r3, r3
 80070c6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80070ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80070ce:	da04      	bge.n	80070da <__ulp+0x22>
 80070d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070d4:	4113      	asrs	r3, r2
 80070d6:	2200      	movs	r2, #0
 80070d8:	e008      	b.n	80070ec <__ulp+0x34>
 80070da:	f1a2 0314 	sub.w	r3, r2, #20
 80070de:	2b1e      	cmp	r3, #30
 80070e0:	bfd6      	itet	le
 80070e2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80070e6:	2201      	movgt	r2, #1
 80070e8:	40da      	lsrle	r2, r3
 80070ea:	2300      	movs	r3, #0
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	7ff00000 	.word	0x7ff00000

080070f8 <__b2d>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	6905      	ldr	r5, [r0, #16]
 80070fc:	f100 0714 	add.w	r7, r0, #20
 8007100:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007104:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007108:	1f2e      	subs	r6, r5, #4
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff fd5a 	bl	8006bc4 <__hi0bits>
 8007110:	f1c0 0220 	rsb	r2, r0, #32
 8007114:	280a      	cmp	r0, #10
 8007116:	4603      	mov	r3, r0
 8007118:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007184 <__b2d+0x8c>
 800711c:	600a      	str	r2, [r1, #0]
 800711e:	dc12      	bgt.n	8007146 <__b2d+0x4e>
 8007120:	f1c0 0e0b 	rsb	lr, r0, #11
 8007124:	fa24 f20e 	lsr.w	r2, r4, lr
 8007128:	42b7      	cmp	r7, r6
 800712a:	ea42 010c 	orr.w	r1, r2, ip
 800712e:	bf2c      	ite	cs
 8007130:	2200      	movcs	r2, #0
 8007132:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007136:	3315      	adds	r3, #21
 8007138:	fa04 f303 	lsl.w	r3, r4, r3
 800713c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007140:	431a      	orrs	r2, r3
 8007142:	4610      	mov	r0, r2
 8007144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007146:	42b7      	cmp	r7, r6
 8007148:	bf2e      	itee	cs
 800714a:	2200      	movcs	r2, #0
 800714c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007150:	f1a5 0608 	subcc.w	r6, r5, #8
 8007154:	3b0b      	subs	r3, #11
 8007156:	d012      	beq.n	800717e <__b2d+0x86>
 8007158:	f1c3 0520 	rsb	r5, r3, #32
 800715c:	fa22 f105 	lsr.w	r1, r2, r5
 8007160:	409c      	lsls	r4, r3
 8007162:	430c      	orrs	r4, r1
 8007164:	42be      	cmp	r6, r7
 8007166:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800716a:	bf94      	ite	ls
 800716c:	2400      	movls	r4, #0
 800716e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007172:	409a      	lsls	r2, r3
 8007174:	40ec      	lsrs	r4, r5
 8007176:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800717a:	4322      	orrs	r2, r4
 800717c:	e7e1      	b.n	8007142 <__b2d+0x4a>
 800717e:	ea44 010c 	orr.w	r1, r4, ip
 8007182:	e7de      	b.n	8007142 <__b2d+0x4a>
 8007184:	3ff00000 	.word	0x3ff00000

08007188 <__d2b>:
 8007188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800718a:	2101      	movs	r1, #1
 800718c:	4617      	mov	r7, r2
 800718e:	461c      	mov	r4, r3
 8007190:	9e08      	ldr	r6, [sp, #32]
 8007192:	f7ff fc25 	bl	80069e0 <_Balloc>
 8007196:	4605      	mov	r5, r0
 8007198:	b930      	cbnz	r0, 80071a8 <__d2b+0x20>
 800719a:	4602      	mov	r2, r0
 800719c:	f240 310f 	movw	r1, #783	; 0x30f
 80071a0:	4b22      	ldr	r3, [pc, #136]	; (800722c <__d2b+0xa4>)
 80071a2:	4823      	ldr	r0, [pc, #140]	; (8007230 <__d2b+0xa8>)
 80071a4:	f001 f9a8 	bl	80084f8 <__assert_func>
 80071a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80071ac:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80071b0:	bb24      	cbnz	r4, 80071fc <__d2b+0x74>
 80071b2:	2f00      	cmp	r7, #0
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	d026      	beq.n	8007206 <__d2b+0x7e>
 80071b8:	4668      	mov	r0, sp
 80071ba:	9700      	str	r7, [sp, #0]
 80071bc:	f7ff fd22 	bl	8006c04 <__lo0bits>
 80071c0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071c4:	b1e8      	cbz	r0, 8007202 <__d2b+0x7a>
 80071c6:	f1c0 0320 	rsb	r3, r0, #32
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	430b      	orrs	r3, r1
 80071d0:	40c2      	lsrs	r2, r0
 80071d2:	616b      	str	r3, [r5, #20]
 80071d4:	9201      	str	r2, [sp, #4]
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bf14      	ite	ne
 80071dc:	2102      	movne	r1, #2
 80071de:	2101      	moveq	r1, #1
 80071e0:	61ab      	str	r3, [r5, #24]
 80071e2:	6129      	str	r1, [r5, #16]
 80071e4:	b1bc      	cbz	r4, 8007216 <__d2b+0x8e>
 80071e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071ea:	4404      	add	r4, r0
 80071ec:	6034      	str	r4, [r6, #0]
 80071ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f4:	6018      	str	r0, [r3, #0]
 80071f6:	4628      	mov	r0, r5
 80071f8:	b003      	add	sp, #12
 80071fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007200:	e7d7      	b.n	80071b2 <__d2b+0x2a>
 8007202:	6169      	str	r1, [r5, #20]
 8007204:	e7e7      	b.n	80071d6 <__d2b+0x4e>
 8007206:	a801      	add	r0, sp, #4
 8007208:	f7ff fcfc 	bl	8006c04 <__lo0bits>
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	2101      	movs	r1, #1
 8007210:	616b      	str	r3, [r5, #20]
 8007212:	3020      	adds	r0, #32
 8007214:	e7e5      	b.n	80071e2 <__d2b+0x5a>
 8007216:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800721a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800721e:	6030      	str	r0, [r6, #0]
 8007220:	6918      	ldr	r0, [r3, #16]
 8007222:	f7ff fccf 	bl	8006bc4 <__hi0bits>
 8007226:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800722a:	e7e2      	b.n	80071f2 <__d2b+0x6a>
 800722c:	08009327 	.word	0x08009327
 8007230:	08009338 	.word	0x08009338

08007234 <__ratio>:
 8007234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	4688      	mov	r8, r1
 800723a:	4669      	mov	r1, sp
 800723c:	4681      	mov	r9, r0
 800723e:	f7ff ff5b 	bl	80070f8 <__b2d>
 8007242:	460f      	mov	r7, r1
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	4640      	mov	r0, r8
 800724a:	a901      	add	r1, sp, #4
 800724c:	f7ff ff54 	bl	80070f8 <__b2d>
 8007250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007254:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007258:	468b      	mov	fp, r1
 800725a:	eba3 0c02 	sub.w	ip, r3, r2
 800725e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007268:	2b00      	cmp	r3, #0
 800726a:	bfd5      	itete	le
 800726c:	460a      	movle	r2, r1
 800726e:	462a      	movgt	r2, r5
 8007270:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007274:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007278:	bfd8      	it	le
 800727a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800727e:	465b      	mov	r3, fp
 8007280:	4602      	mov	r2, r0
 8007282:	4639      	mov	r1, r7
 8007284:	4620      	mov	r0, r4
 8007286:	f7f9 fa51 	bl	800072c <__aeabi_ddiv>
 800728a:	b003      	add	sp, #12
 800728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007290 <__copybits>:
 8007290:	3901      	subs	r1, #1
 8007292:	b570      	push	{r4, r5, r6, lr}
 8007294:	1149      	asrs	r1, r1, #5
 8007296:	6914      	ldr	r4, [r2, #16]
 8007298:	3101      	adds	r1, #1
 800729a:	f102 0314 	add.w	r3, r2, #20
 800729e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80072a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80072a6:	1f05      	subs	r5, r0, #4
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d30c      	bcc.n	80072c6 <__copybits+0x36>
 80072ac:	1aa3      	subs	r3, r4, r2
 80072ae:	3b11      	subs	r3, #17
 80072b0:	f023 0303 	bic.w	r3, r3, #3
 80072b4:	3211      	adds	r2, #17
 80072b6:	42a2      	cmp	r2, r4
 80072b8:	bf88      	it	hi
 80072ba:	2300      	movhi	r3, #0
 80072bc:	4418      	add	r0, r3
 80072be:	2300      	movs	r3, #0
 80072c0:	4288      	cmp	r0, r1
 80072c2:	d305      	bcc.n	80072d0 <__copybits+0x40>
 80072c4:	bd70      	pop	{r4, r5, r6, pc}
 80072c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80072ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80072ce:	e7eb      	b.n	80072a8 <__copybits+0x18>
 80072d0:	f840 3b04 	str.w	r3, [r0], #4
 80072d4:	e7f4      	b.n	80072c0 <__copybits+0x30>

080072d6 <__any_on>:
 80072d6:	f100 0214 	add.w	r2, r0, #20
 80072da:	6900      	ldr	r0, [r0, #16]
 80072dc:	114b      	asrs	r3, r1, #5
 80072de:	4298      	cmp	r0, r3
 80072e0:	b510      	push	{r4, lr}
 80072e2:	db11      	blt.n	8007308 <__any_on+0x32>
 80072e4:	dd0a      	ble.n	80072fc <__any_on+0x26>
 80072e6:	f011 011f 	ands.w	r1, r1, #31
 80072ea:	d007      	beq.n	80072fc <__any_on+0x26>
 80072ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072f0:	fa24 f001 	lsr.w	r0, r4, r1
 80072f4:	fa00 f101 	lsl.w	r1, r0, r1
 80072f8:	428c      	cmp	r4, r1
 80072fa:	d10b      	bne.n	8007314 <__any_on+0x3e>
 80072fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007300:	4293      	cmp	r3, r2
 8007302:	d803      	bhi.n	800730c <__any_on+0x36>
 8007304:	2000      	movs	r0, #0
 8007306:	bd10      	pop	{r4, pc}
 8007308:	4603      	mov	r3, r0
 800730a:	e7f7      	b.n	80072fc <__any_on+0x26>
 800730c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007310:	2900      	cmp	r1, #0
 8007312:	d0f5      	beq.n	8007300 <__any_on+0x2a>
 8007314:	2001      	movs	r0, #1
 8007316:	e7f6      	b.n	8007306 <__any_on+0x30>

08007318 <sulp>:
 8007318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800731c:	460f      	mov	r7, r1
 800731e:	4690      	mov	r8, r2
 8007320:	f7ff feca 	bl	80070b8 <__ulp>
 8007324:	4604      	mov	r4, r0
 8007326:	460d      	mov	r5, r1
 8007328:	f1b8 0f00 	cmp.w	r8, #0
 800732c:	d011      	beq.n	8007352 <sulp+0x3a>
 800732e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd0b      	ble.n	8007352 <sulp+0x3a>
 800733a:	2400      	movs	r4, #0
 800733c:	051b      	lsls	r3, r3, #20
 800733e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007342:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007346:	4622      	mov	r2, r4
 8007348:	462b      	mov	r3, r5
 800734a:	f7f9 f8c5 	bl	80004d8 <__aeabi_dmul>
 800734e:	4604      	mov	r4, r0
 8007350:	460d      	mov	r5, r1
 8007352:	4620      	mov	r0, r4
 8007354:	4629      	mov	r1, r5
 8007356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800735a:	0000      	movs	r0, r0
 800735c:	0000      	movs	r0, r0
	...

08007360 <_strtod_l>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	b09f      	sub	sp, #124	; 0x7c
 8007366:	9217      	str	r2, [sp, #92]	; 0x5c
 8007368:	2200      	movs	r2, #0
 800736a:	4604      	mov	r4, r0
 800736c:	921a      	str	r2, [sp, #104]	; 0x68
 800736e:	460d      	mov	r5, r1
 8007370:	f04f 0800 	mov.w	r8, #0
 8007374:	f04f 0900 	mov.w	r9, #0
 8007378:	460a      	mov	r2, r1
 800737a:	9219      	str	r2, [sp, #100]	; 0x64
 800737c:	7811      	ldrb	r1, [r2, #0]
 800737e:	292b      	cmp	r1, #43	; 0x2b
 8007380:	d04a      	beq.n	8007418 <_strtod_l+0xb8>
 8007382:	d838      	bhi.n	80073f6 <_strtod_l+0x96>
 8007384:	290d      	cmp	r1, #13
 8007386:	d832      	bhi.n	80073ee <_strtod_l+0x8e>
 8007388:	2908      	cmp	r1, #8
 800738a:	d832      	bhi.n	80073f2 <_strtod_l+0x92>
 800738c:	2900      	cmp	r1, #0
 800738e:	d03b      	beq.n	8007408 <_strtod_l+0xa8>
 8007390:	2200      	movs	r2, #0
 8007392:	920e      	str	r2, [sp, #56]	; 0x38
 8007394:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007396:	7832      	ldrb	r2, [r6, #0]
 8007398:	2a30      	cmp	r2, #48	; 0x30
 800739a:	f040 80b2 	bne.w	8007502 <_strtod_l+0x1a2>
 800739e:	7872      	ldrb	r2, [r6, #1]
 80073a0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80073a4:	2a58      	cmp	r2, #88	; 0x58
 80073a6:	d16e      	bne.n	8007486 <_strtod_l+0x126>
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073ac:	4620      	mov	r0, r4
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	ab1a      	add	r3, sp, #104	; 0x68
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4a8c      	ldr	r2, [pc, #560]	; (80075e8 <_strtod_l+0x288>)
 80073b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80073b8:	a919      	add	r1, sp, #100	; 0x64
 80073ba:	f001 f937 	bl	800862c <__gethex>
 80073be:	f010 070f 	ands.w	r7, r0, #15
 80073c2:	4605      	mov	r5, r0
 80073c4:	d005      	beq.n	80073d2 <_strtod_l+0x72>
 80073c6:	2f06      	cmp	r7, #6
 80073c8:	d128      	bne.n	800741c <_strtod_l+0xbc>
 80073ca:	2300      	movs	r3, #0
 80073cc:	3601      	adds	r6, #1
 80073ce:	9619      	str	r6, [sp, #100]	; 0x64
 80073d0:	930e      	str	r3, [sp, #56]	; 0x38
 80073d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 85a0 	bne.w	8007f1a <_strtod_l+0xbba>
 80073da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073dc:	b1cb      	cbz	r3, 8007412 <_strtod_l+0xb2>
 80073de:	4642      	mov	r2, r8
 80073e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80073e4:	4610      	mov	r0, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	b01f      	add	sp, #124	; 0x7c
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ee:	2920      	cmp	r1, #32
 80073f0:	d1ce      	bne.n	8007390 <_strtod_l+0x30>
 80073f2:	3201      	adds	r2, #1
 80073f4:	e7c1      	b.n	800737a <_strtod_l+0x1a>
 80073f6:	292d      	cmp	r1, #45	; 0x2d
 80073f8:	d1ca      	bne.n	8007390 <_strtod_l+0x30>
 80073fa:	2101      	movs	r1, #1
 80073fc:	910e      	str	r1, [sp, #56]	; 0x38
 80073fe:	1c51      	adds	r1, r2, #1
 8007400:	9119      	str	r1, [sp, #100]	; 0x64
 8007402:	7852      	ldrb	r2, [r2, #1]
 8007404:	2a00      	cmp	r2, #0
 8007406:	d1c5      	bne.n	8007394 <_strtod_l+0x34>
 8007408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800740a:	9519      	str	r5, [sp, #100]	; 0x64
 800740c:	2b00      	cmp	r3, #0
 800740e:	f040 8582 	bne.w	8007f16 <_strtod_l+0xbb6>
 8007412:	4642      	mov	r2, r8
 8007414:	464b      	mov	r3, r9
 8007416:	e7e5      	b.n	80073e4 <_strtod_l+0x84>
 8007418:	2100      	movs	r1, #0
 800741a:	e7ef      	b.n	80073fc <_strtod_l+0x9c>
 800741c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800741e:	b13a      	cbz	r2, 8007430 <_strtod_l+0xd0>
 8007420:	2135      	movs	r1, #53	; 0x35
 8007422:	a81c      	add	r0, sp, #112	; 0x70
 8007424:	f7ff ff34 	bl	8007290 <__copybits>
 8007428:	4620      	mov	r0, r4
 800742a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800742c:	f7ff fb18 	bl	8006a60 <_Bfree>
 8007430:	3f01      	subs	r7, #1
 8007432:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007434:	2f04      	cmp	r7, #4
 8007436:	d806      	bhi.n	8007446 <_strtod_l+0xe6>
 8007438:	e8df f007 	tbb	[pc, r7]
 800743c:	201d0314 	.word	0x201d0314
 8007440:	14          	.byte	0x14
 8007441:	00          	.byte	0x00
 8007442:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007446:	05e9      	lsls	r1, r5, #23
 8007448:	bf48      	it	mi
 800744a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800744e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007452:	0d1b      	lsrs	r3, r3, #20
 8007454:	051b      	lsls	r3, r3, #20
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1bb      	bne.n	80073d2 <_strtod_l+0x72>
 800745a:	f7fe fb19 	bl	8005a90 <__errno>
 800745e:	2322      	movs	r3, #34	; 0x22
 8007460:	6003      	str	r3, [r0, #0]
 8007462:	e7b6      	b.n	80073d2 <_strtod_l+0x72>
 8007464:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007468:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800746c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007470:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007474:	e7e7      	b.n	8007446 <_strtod_l+0xe6>
 8007476:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80075ec <_strtod_l+0x28c>
 800747a:	e7e4      	b.n	8007446 <_strtod_l+0xe6>
 800747c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007480:	f04f 38ff 	mov.w	r8, #4294967295
 8007484:	e7df      	b.n	8007446 <_strtod_l+0xe6>
 8007486:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	9219      	str	r2, [sp, #100]	; 0x64
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b30      	cmp	r3, #48	; 0x30
 8007490:	d0f9      	beq.n	8007486 <_strtod_l+0x126>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d09d      	beq.n	80073d2 <_strtod_l+0x72>
 8007496:	2301      	movs	r3, #1
 8007498:	f04f 0a00 	mov.w	sl, #0
 800749c:	220a      	movs	r2, #10
 800749e:	46d3      	mov	fp, sl
 80074a0:	9305      	str	r3, [sp, #20]
 80074a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074a4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80074a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80074ac:	7806      	ldrb	r6, [r0, #0]
 80074ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80074b2:	b2d9      	uxtb	r1, r3
 80074b4:	2909      	cmp	r1, #9
 80074b6:	d926      	bls.n	8007506 <_strtod_l+0x1a6>
 80074b8:	2201      	movs	r2, #1
 80074ba:	494d      	ldr	r1, [pc, #308]	; (80075f0 <_strtod_l+0x290>)
 80074bc:	f000 ffe6 	bl	800848c <strncmp>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d030      	beq.n	8007526 <_strtod_l+0x1c6>
 80074c4:	2000      	movs	r0, #0
 80074c6:	4632      	mov	r2, r6
 80074c8:	4603      	mov	r3, r0
 80074ca:	465e      	mov	r6, fp
 80074cc:	9008      	str	r0, [sp, #32]
 80074ce:	2a65      	cmp	r2, #101	; 0x65
 80074d0:	d001      	beq.n	80074d6 <_strtod_l+0x176>
 80074d2:	2a45      	cmp	r2, #69	; 0x45
 80074d4:	d113      	bne.n	80074fe <_strtod_l+0x19e>
 80074d6:	b91e      	cbnz	r6, 80074e0 <_strtod_l+0x180>
 80074d8:	9a05      	ldr	r2, [sp, #20]
 80074da:	4302      	orrs	r2, r0
 80074dc:	d094      	beq.n	8007408 <_strtod_l+0xa8>
 80074de:	2600      	movs	r6, #0
 80074e0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80074e2:	1c6a      	adds	r2, r5, #1
 80074e4:	9219      	str	r2, [sp, #100]	; 0x64
 80074e6:	786a      	ldrb	r2, [r5, #1]
 80074e8:	2a2b      	cmp	r2, #43	; 0x2b
 80074ea:	d074      	beq.n	80075d6 <_strtod_l+0x276>
 80074ec:	2a2d      	cmp	r2, #45	; 0x2d
 80074ee:	d078      	beq.n	80075e2 <_strtod_l+0x282>
 80074f0:	f04f 0c00 	mov.w	ip, #0
 80074f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074f8:	2909      	cmp	r1, #9
 80074fa:	d97f      	bls.n	80075fc <_strtod_l+0x29c>
 80074fc:	9519      	str	r5, [sp, #100]	; 0x64
 80074fe:	2700      	movs	r7, #0
 8007500:	e09e      	b.n	8007640 <_strtod_l+0x2e0>
 8007502:	2300      	movs	r3, #0
 8007504:	e7c8      	b.n	8007498 <_strtod_l+0x138>
 8007506:	f1bb 0f08 	cmp.w	fp, #8
 800750a:	bfd8      	it	le
 800750c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800750e:	f100 0001 	add.w	r0, r0, #1
 8007512:	bfd6      	itet	le
 8007514:	fb02 3301 	mlale	r3, r2, r1, r3
 8007518:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800751c:	930a      	strle	r3, [sp, #40]	; 0x28
 800751e:	f10b 0b01 	add.w	fp, fp, #1
 8007522:	9019      	str	r0, [sp, #100]	; 0x64
 8007524:	e7c1      	b.n	80074aa <_strtod_l+0x14a>
 8007526:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	9219      	str	r2, [sp, #100]	; 0x64
 800752c:	785a      	ldrb	r2, [r3, #1]
 800752e:	f1bb 0f00 	cmp.w	fp, #0
 8007532:	d037      	beq.n	80075a4 <_strtod_l+0x244>
 8007534:	465e      	mov	r6, fp
 8007536:	9008      	str	r0, [sp, #32]
 8007538:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800753c:	2b09      	cmp	r3, #9
 800753e:	d912      	bls.n	8007566 <_strtod_l+0x206>
 8007540:	2301      	movs	r3, #1
 8007542:	e7c4      	b.n	80074ce <_strtod_l+0x16e>
 8007544:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007546:	3001      	adds	r0, #1
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	9219      	str	r2, [sp, #100]	; 0x64
 800754c:	785a      	ldrb	r2, [r3, #1]
 800754e:	2a30      	cmp	r2, #48	; 0x30
 8007550:	d0f8      	beq.n	8007544 <_strtod_l+0x1e4>
 8007552:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007556:	2b08      	cmp	r3, #8
 8007558:	f200 84e4 	bhi.w	8007f24 <_strtod_l+0xbc4>
 800755c:	9008      	str	r0, [sp, #32]
 800755e:	2000      	movs	r0, #0
 8007560:	4606      	mov	r6, r0
 8007562:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007564:	930b      	str	r3, [sp, #44]	; 0x2c
 8007566:	3a30      	subs	r2, #48	; 0x30
 8007568:	f100 0301 	add.w	r3, r0, #1
 800756c:	d014      	beq.n	8007598 <_strtod_l+0x238>
 800756e:	9908      	ldr	r1, [sp, #32]
 8007570:	eb00 0c06 	add.w	ip, r0, r6
 8007574:	4419      	add	r1, r3
 8007576:	9108      	str	r1, [sp, #32]
 8007578:	4633      	mov	r3, r6
 800757a:	210a      	movs	r1, #10
 800757c:	4563      	cmp	r3, ip
 800757e:	d113      	bne.n	80075a8 <_strtod_l+0x248>
 8007580:	1833      	adds	r3, r6, r0
 8007582:	2b08      	cmp	r3, #8
 8007584:	f106 0601 	add.w	r6, r6, #1
 8007588:	4406      	add	r6, r0
 800758a:	dc1a      	bgt.n	80075c2 <_strtod_l+0x262>
 800758c:	230a      	movs	r3, #10
 800758e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007590:	fb03 2301 	mla	r3, r3, r1, r2
 8007594:	930a      	str	r3, [sp, #40]	; 0x28
 8007596:	2300      	movs	r3, #0
 8007598:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800759a:	4618      	mov	r0, r3
 800759c:	1c51      	adds	r1, r2, #1
 800759e:	9119      	str	r1, [sp, #100]	; 0x64
 80075a0:	7852      	ldrb	r2, [r2, #1]
 80075a2:	e7c9      	b.n	8007538 <_strtod_l+0x1d8>
 80075a4:	4658      	mov	r0, fp
 80075a6:	e7d2      	b.n	800754e <_strtod_l+0x1ee>
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	f103 0301 	add.w	r3, r3, #1
 80075ae:	dc03      	bgt.n	80075b8 <_strtod_l+0x258>
 80075b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80075b2:	434f      	muls	r7, r1
 80075b4:	970a      	str	r7, [sp, #40]	; 0x28
 80075b6:	e7e1      	b.n	800757c <_strtod_l+0x21c>
 80075b8:	2b10      	cmp	r3, #16
 80075ba:	bfd8      	it	le
 80075bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80075c0:	e7dc      	b.n	800757c <_strtod_l+0x21c>
 80075c2:	2e10      	cmp	r6, #16
 80075c4:	bfdc      	itt	le
 80075c6:	230a      	movle	r3, #10
 80075c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80075cc:	e7e3      	b.n	8007596 <_strtod_l+0x236>
 80075ce:	2300      	movs	r3, #0
 80075d0:	9308      	str	r3, [sp, #32]
 80075d2:	2301      	movs	r3, #1
 80075d4:	e780      	b.n	80074d8 <_strtod_l+0x178>
 80075d6:	f04f 0c00 	mov.w	ip, #0
 80075da:	1caa      	adds	r2, r5, #2
 80075dc:	9219      	str	r2, [sp, #100]	; 0x64
 80075de:	78aa      	ldrb	r2, [r5, #2]
 80075e0:	e788      	b.n	80074f4 <_strtod_l+0x194>
 80075e2:	f04f 0c01 	mov.w	ip, #1
 80075e6:	e7f8      	b.n	80075da <_strtod_l+0x27a>
 80075e8:	08009498 	.word	0x08009498
 80075ec:	7ff00000 	.word	0x7ff00000
 80075f0:	08009494 	.word	0x08009494
 80075f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075f6:	1c51      	adds	r1, r2, #1
 80075f8:	9119      	str	r1, [sp, #100]	; 0x64
 80075fa:	7852      	ldrb	r2, [r2, #1]
 80075fc:	2a30      	cmp	r2, #48	; 0x30
 80075fe:	d0f9      	beq.n	80075f4 <_strtod_l+0x294>
 8007600:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007604:	2908      	cmp	r1, #8
 8007606:	f63f af7a 	bhi.w	80074fe <_strtod_l+0x19e>
 800760a:	3a30      	subs	r2, #48	; 0x30
 800760c:	9209      	str	r2, [sp, #36]	; 0x24
 800760e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007610:	920c      	str	r2, [sp, #48]	; 0x30
 8007612:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007614:	1c57      	adds	r7, r2, #1
 8007616:	9719      	str	r7, [sp, #100]	; 0x64
 8007618:	7852      	ldrb	r2, [r2, #1]
 800761a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800761e:	f1be 0f09 	cmp.w	lr, #9
 8007622:	d938      	bls.n	8007696 <_strtod_l+0x336>
 8007624:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007626:	1a7f      	subs	r7, r7, r1
 8007628:	2f08      	cmp	r7, #8
 800762a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800762e:	dc03      	bgt.n	8007638 <_strtod_l+0x2d8>
 8007630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007632:	428f      	cmp	r7, r1
 8007634:	bfa8      	it	ge
 8007636:	460f      	movge	r7, r1
 8007638:	f1bc 0f00 	cmp.w	ip, #0
 800763c:	d000      	beq.n	8007640 <_strtod_l+0x2e0>
 800763e:	427f      	negs	r7, r7
 8007640:	2e00      	cmp	r6, #0
 8007642:	d14f      	bne.n	80076e4 <_strtod_l+0x384>
 8007644:	9905      	ldr	r1, [sp, #20]
 8007646:	4301      	orrs	r1, r0
 8007648:	f47f aec3 	bne.w	80073d2 <_strtod_l+0x72>
 800764c:	2b00      	cmp	r3, #0
 800764e:	f47f aedb 	bne.w	8007408 <_strtod_l+0xa8>
 8007652:	2a69      	cmp	r2, #105	; 0x69
 8007654:	d029      	beq.n	80076aa <_strtod_l+0x34a>
 8007656:	dc26      	bgt.n	80076a6 <_strtod_l+0x346>
 8007658:	2a49      	cmp	r2, #73	; 0x49
 800765a:	d026      	beq.n	80076aa <_strtod_l+0x34a>
 800765c:	2a4e      	cmp	r2, #78	; 0x4e
 800765e:	f47f aed3 	bne.w	8007408 <_strtod_l+0xa8>
 8007662:	499a      	ldr	r1, [pc, #616]	; (80078cc <_strtod_l+0x56c>)
 8007664:	a819      	add	r0, sp, #100	; 0x64
 8007666:	f001 fa23 	bl	8008ab0 <__match>
 800766a:	2800      	cmp	r0, #0
 800766c:	f43f aecc 	beq.w	8007408 <_strtod_l+0xa8>
 8007670:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b28      	cmp	r3, #40	; 0x28
 8007676:	d12f      	bne.n	80076d8 <_strtod_l+0x378>
 8007678:	4995      	ldr	r1, [pc, #596]	; (80078d0 <_strtod_l+0x570>)
 800767a:	aa1c      	add	r2, sp, #112	; 0x70
 800767c:	a819      	add	r0, sp, #100	; 0x64
 800767e:	f001 fa2b 	bl	8008ad8 <__hexnan>
 8007682:	2805      	cmp	r0, #5
 8007684:	d128      	bne.n	80076d8 <_strtod_l+0x378>
 8007686:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007688:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800768c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007690:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007694:	e69d      	b.n	80073d2 <_strtod_l+0x72>
 8007696:	210a      	movs	r1, #10
 8007698:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800769a:	fb01 2107 	mla	r1, r1, r7, r2
 800769e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80076a2:	9209      	str	r2, [sp, #36]	; 0x24
 80076a4:	e7b5      	b.n	8007612 <_strtod_l+0x2b2>
 80076a6:	2a6e      	cmp	r2, #110	; 0x6e
 80076a8:	e7d9      	b.n	800765e <_strtod_l+0x2fe>
 80076aa:	498a      	ldr	r1, [pc, #552]	; (80078d4 <_strtod_l+0x574>)
 80076ac:	a819      	add	r0, sp, #100	; 0x64
 80076ae:	f001 f9ff 	bl	8008ab0 <__match>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	f43f aea8 	beq.w	8007408 <_strtod_l+0xa8>
 80076b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076ba:	4987      	ldr	r1, [pc, #540]	; (80078d8 <_strtod_l+0x578>)
 80076bc:	3b01      	subs	r3, #1
 80076be:	a819      	add	r0, sp, #100	; 0x64
 80076c0:	9319      	str	r3, [sp, #100]	; 0x64
 80076c2:	f001 f9f5 	bl	8008ab0 <__match>
 80076c6:	b910      	cbnz	r0, 80076ce <_strtod_l+0x36e>
 80076c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076ca:	3301      	adds	r3, #1
 80076cc:	9319      	str	r3, [sp, #100]	; 0x64
 80076ce:	f04f 0800 	mov.w	r8, #0
 80076d2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80078dc <_strtod_l+0x57c>
 80076d6:	e67c      	b.n	80073d2 <_strtod_l+0x72>
 80076d8:	4881      	ldr	r0, [pc, #516]	; (80078e0 <_strtod_l+0x580>)
 80076da:	f000 ff07 	bl	80084ec <nan>
 80076de:	4680      	mov	r8, r0
 80076e0:	4689      	mov	r9, r1
 80076e2:	e676      	b.n	80073d2 <_strtod_l+0x72>
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	f1bb 0f00 	cmp.w	fp, #0
 80076ea:	bf08      	it	eq
 80076ec:	46b3      	moveq	fp, r6
 80076ee:	1afb      	subs	r3, r7, r3
 80076f0:	2e10      	cmp	r6, #16
 80076f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076f4:	4635      	mov	r5, r6
 80076f6:	9309      	str	r3, [sp, #36]	; 0x24
 80076f8:	bfa8      	it	ge
 80076fa:	2510      	movge	r5, #16
 80076fc:	f7f8 fe72 	bl	80003e4 <__aeabi_ui2d>
 8007700:	2e09      	cmp	r6, #9
 8007702:	4680      	mov	r8, r0
 8007704:	4689      	mov	r9, r1
 8007706:	dd13      	ble.n	8007730 <_strtod_l+0x3d0>
 8007708:	4b76      	ldr	r3, [pc, #472]	; (80078e4 <_strtod_l+0x584>)
 800770a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800770e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007712:	f7f8 fee1 	bl	80004d8 <__aeabi_dmul>
 8007716:	4680      	mov	r8, r0
 8007718:	4650      	mov	r0, sl
 800771a:	4689      	mov	r9, r1
 800771c:	f7f8 fe62 	bl	80003e4 <__aeabi_ui2d>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4640      	mov	r0, r8
 8007726:	4649      	mov	r1, r9
 8007728:	f7f8 fd20 	bl	800016c <__adddf3>
 800772c:	4680      	mov	r8, r0
 800772e:	4689      	mov	r9, r1
 8007730:	2e0f      	cmp	r6, #15
 8007732:	dc36      	bgt.n	80077a2 <_strtod_l+0x442>
 8007734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	f43f ae4b 	beq.w	80073d2 <_strtod_l+0x72>
 800773c:	dd22      	ble.n	8007784 <_strtod_l+0x424>
 800773e:	2b16      	cmp	r3, #22
 8007740:	dc09      	bgt.n	8007756 <_strtod_l+0x3f6>
 8007742:	4968      	ldr	r1, [pc, #416]	; (80078e4 <_strtod_l+0x584>)
 8007744:	4642      	mov	r2, r8
 8007746:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800774a:	464b      	mov	r3, r9
 800774c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007750:	f7f8 fec2 	bl	80004d8 <__aeabi_dmul>
 8007754:	e7c3      	b.n	80076de <_strtod_l+0x37e>
 8007756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007758:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800775c:	4293      	cmp	r3, r2
 800775e:	db20      	blt.n	80077a2 <_strtod_l+0x442>
 8007760:	4c60      	ldr	r4, [pc, #384]	; (80078e4 <_strtod_l+0x584>)
 8007762:	f1c6 060f 	rsb	r6, r6, #15
 8007766:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800776a:	4642      	mov	r2, r8
 800776c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007770:	464b      	mov	r3, r9
 8007772:	f7f8 feb1 	bl	80004d8 <__aeabi_dmul>
 8007776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007778:	1b9e      	subs	r6, r3, r6
 800777a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800777e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007782:	e7e5      	b.n	8007750 <_strtod_l+0x3f0>
 8007784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007786:	3316      	adds	r3, #22
 8007788:	db0b      	blt.n	80077a2 <_strtod_l+0x442>
 800778a:	9b08      	ldr	r3, [sp, #32]
 800778c:	4640      	mov	r0, r8
 800778e:	1bdf      	subs	r7, r3, r7
 8007790:	4b54      	ldr	r3, [pc, #336]	; (80078e4 <_strtod_l+0x584>)
 8007792:	4649      	mov	r1, r9
 8007794:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800779c:	f7f8 ffc6 	bl	800072c <__aeabi_ddiv>
 80077a0:	e79d      	b.n	80076de <_strtod_l+0x37e>
 80077a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a4:	1b75      	subs	r5, r6, r5
 80077a6:	441d      	add	r5, r3
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	dd70      	ble.n	800788e <_strtod_l+0x52e>
 80077ac:	f015 030f 	ands.w	r3, r5, #15
 80077b0:	d00a      	beq.n	80077c8 <_strtod_l+0x468>
 80077b2:	494c      	ldr	r1, [pc, #304]	; (80078e4 <_strtod_l+0x584>)
 80077b4:	4642      	mov	r2, r8
 80077b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077be:	464b      	mov	r3, r9
 80077c0:	f7f8 fe8a 	bl	80004d8 <__aeabi_dmul>
 80077c4:	4680      	mov	r8, r0
 80077c6:	4689      	mov	r9, r1
 80077c8:	f035 050f 	bics.w	r5, r5, #15
 80077cc:	d04d      	beq.n	800786a <_strtod_l+0x50a>
 80077ce:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80077d2:	dd22      	ble.n	800781a <_strtod_l+0x4ba>
 80077d4:	2600      	movs	r6, #0
 80077d6:	46b3      	mov	fp, r6
 80077d8:	960b      	str	r6, [sp, #44]	; 0x2c
 80077da:	9608      	str	r6, [sp, #32]
 80077dc:	2322      	movs	r3, #34	; 0x22
 80077de:	f04f 0800 	mov.w	r8, #0
 80077e2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80078dc <_strtod_l+0x57c>
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f43f adf1 	beq.w	80073d2 <_strtod_l+0x72>
 80077f0:	4620      	mov	r0, r4
 80077f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077f4:	f7ff f934 	bl	8006a60 <_Bfree>
 80077f8:	4620      	mov	r0, r4
 80077fa:	9908      	ldr	r1, [sp, #32]
 80077fc:	f7ff f930 	bl	8006a60 <_Bfree>
 8007800:	4659      	mov	r1, fp
 8007802:	4620      	mov	r0, r4
 8007804:	f7ff f92c 	bl	8006a60 <_Bfree>
 8007808:	4620      	mov	r0, r4
 800780a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800780c:	f7ff f928 	bl	8006a60 <_Bfree>
 8007810:	4631      	mov	r1, r6
 8007812:	4620      	mov	r0, r4
 8007814:	f7ff f924 	bl	8006a60 <_Bfree>
 8007818:	e5db      	b.n	80073d2 <_strtod_l+0x72>
 800781a:	4b33      	ldr	r3, [pc, #204]	; (80078e8 <_strtod_l+0x588>)
 800781c:	4640      	mov	r0, r8
 800781e:	9305      	str	r3, [sp, #20]
 8007820:	2300      	movs	r3, #0
 8007822:	4649      	mov	r1, r9
 8007824:	469a      	mov	sl, r3
 8007826:	112d      	asrs	r5, r5, #4
 8007828:	2d01      	cmp	r5, #1
 800782a:	dc21      	bgt.n	8007870 <_strtod_l+0x510>
 800782c:	b10b      	cbz	r3, 8007832 <_strtod_l+0x4d2>
 800782e:	4680      	mov	r8, r0
 8007830:	4689      	mov	r9, r1
 8007832:	492d      	ldr	r1, [pc, #180]	; (80078e8 <_strtod_l+0x588>)
 8007834:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007838:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800783c:	4642      	mov	r2, r8
 800783e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007842:	464b      	mov	r3, r9
 8007844:	f7f8 fe48 	bl	80004d8 <__aeabi_dmul>
 8007848:	4b24      	ldr	r3, [pc, #144]	; (80078dc <_strtod_l+0x57c>)
 800784a:	460a      	mov	r2, r1
 800784c:	400b      	ands	r3, r1
 800784e:	4927      	ldr	r1, [pc, #156]	; (80078ec <_strtod_l+0x58c>)
 8007850:	4680      	mov	r8, r0
 8007852:	428b      	cmp	r3, r1
 8007854:	d8be      	bhi.n	80077d4 <_strtod_l+0x474>
 8007856:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800785a:	428b      	cmp	r3, r1
 800785c:	bf86      	itte	hi
 800785e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007862:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80078f0 <_strtod_l+0x590>
 8007866:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800786a:	2300      	movs	r3, #0
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	e07b      	b.n	8007968 <_strtod_l+0x608>
 8007870:	07ea      	lsls	r2, r5, #31
 8007872:	d505      	bpl.n	8007880 <_strtod_l+0x520>
 8007874:	9b05      	ldr	r3, [sp, #20]
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 fe2d 	bl	80004d8 <__aeabi_dmul>
 800787e:	2301      	movs	r3, #1
 8007880:	9a05      	ldr	r2, [sp, #20]
 8007882:	f10a 0a01 	add.w	sl, sl, #1
 8007886:	3208      	adds	r2, #8
 8007888:	106d      	asrs	r5, r5, #1
 800788a:	9205      	str	r2, [sp, #20]
 800788c:	e7cc      	b.n	8007828 <_strtod_l+0x4c8>
 800788e:	d0ec      	beq.n	800786a <_strtod_l+0x50a>
 8007890:	426d      	negs	r5, r5
 8007892:	f015 020f 	ands.w	r2, r5, #15
 8007896:	d00a      	beq.n	80078ae <_strtod_l+0x54e>
 8007898:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <_strtod_l+0x584>)
 800789a:	4640      	mov	r0, r8
 800789c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078a0:	4649      	mov	r1, r9
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 ff41 	bl	800072c <__aeabi_ddiv>
 80078aa:	4680      	mov	r8, r0
 80078ac:	4689      	mov	r9, r1
 80078ae:	112d      	asrs	r5, r5, #4
 80078b0:	d0db      	beq.n	800786a <_strtod_l+0x50a>
 80078b2:	2d1f      	cmp	r5, #31
 80078b4:	dd1e      	ble.n	80078f4 <_strtod_l+0x594>
 80078b6:	2600      	movs	r6, #0
 80078b8:	46b3      	mov	fp, r6
 80078ba:	960b      	str	r6, [sp, #44]	; 0x2c
 80078bc:	9608      	str	r6, [sp, #32]
 80078be:	2322      	movs	r3, #34	; 0x22
 80078c0:	f04f 0800 	mov.w	r8, #0
 80078c4:	f04f 0900 	mov.w	r9, #0
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	e78d      	b.n	80077e8 <_strtod_l+0x488>
 80078cc:	0800927f 	.word	0x0800927f
 80078d0:	080094ac 	.word	0x080094ac
 80078d4:	08009277 	.word	0x08009277
 80078d8:	080092ae 	.word	0x080092ae
 80078dc:	7ff00000 	.word	0x7ff00000
 80078e0:	0800963d 	.word	0x0800963d
 80078e4:	080093c0 	.word	0x080093c0
 80078e8:	08009398 	.word	0x08009398
 80078ec:	7ca00000 	.word	0x7ca00000
 80078f0:	7fefffff 	.word	0x7fefffff
 80078f4:	f015 0310 	ands.w	r3, r5, #16
 80078f8:	bf18      	it	ne
 80078fa:	236a      	movne	r3, #106	; 0x6a
 80078fc:	4640      	mov	r0, r8
 80078fe:	9305      	str	r3, [sp, #20]
 8007900:	4649      	mov	r1, r9
 8007902:	2300      	movs	r3, #0
 8007904:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007bd0 <_strtod_l+0x870>
 8007908:	07ea      	lsls	r2, r5, #31
 800790a:	d504      	bpl.n	8007916 <_strtod_l+0x5b6>
 800790c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007910:	f7f8 fde2 	bl	80004d8 <__aeabi_dmul>
 8007914:	2301      	movs	r3, #1
 8007916:	106d      	asrs	r5, r5, #1
 8007918:	f10a 0a08 	add.w	sl, sl, #8
 800791c:	d1f4      	bne.n	8007908 <_strtod_l+0x5a8>
 800791e:	b10b      	cbz	r3, 8007924 <_strtod_l+0x5c4>
 8007920:	4680      	mov	r8, r0
 8007922:	4689      	mov	r9, r1
 8007924:	9b05      	ldr	r3, [sp, #20]
 8007926:	b1bb      	cbz	r3, 8007958 <_strtod_l+0x5f8>
 8007928:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800792c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007930:	2b00      	cmp	r3, #0
 8007932:	4649      	mov	r1, r9
 8007934:	dd10      	ble.n	8007958 <_strtod_l+0x5f8>
 8007936:	2b1f      	cmp	r3, #31
 8007938:	f340 8128 	ble.w	8007b8c <_strtod_l+0x82c>
 800793c:	2b34      	cmp	r3, #52	; 0x34
 800793e:	bfd8      	it	le
 8007940:	f04f 33ff 	movle.w	r3, #4294967295
 8007944:	f04f 0800 	mov.w	r8, #0
 8007948:	bfcf      	iteee	gt
 800794a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800794e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007952:	4093      	lslle	r3, r2
 8007954:	ea03 0901 	andle.w	r9, r3, r1
 8007958:	2200      	movs	r2, #0
 800795a:	2300      	movs	r3, #0
 800795c:	4640      	mov	r0, r8
 800795e:	4649      	mov	r1, r9
 8007960:	f7f9 f822 	bl	80009a8 <__aeabi_dcmpeq>
 8007964:	2800      	cmp	r0, #0
 8007966:	d1a6      	bne.n	80078b6 <_strtod_l+0x556>
 8007968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800796a:	465a      	mov	r2, fp
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	4620      	mov	r0, r4
 8007970:	4633      	mov	r3, r6
 8007972:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007974:	f7ff f8dc 	bl	8006b30 <__s2b>
 8007978:	900b      	str	r0, [sp, #44]	; 0x2c
 800797a:	2800      	cmp	r0, #0
 800797c:	f43f af2a 	beq.w	80077d4 <_strtod_l+0x474>
 8007980:	2600      	movs	r6, #0
 8007982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	2a00      	cmp	r2, #0
 8007988:	eba3 0307 	sub.w	r3, r3, r7
 800798c:	bfa8      	it	ge
 800798e:	2300      	movge	r3, #0
 8007990:	46b3      	mov	fp, r6
 8007992:	9312      	str	r3, [sp, #72]	; 0x48
 8007994:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007998:	9316      	str	r3, [sp, #88]	; 0x58
 800799a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799c:	4620      	mov	r0, r4
 800799e:	6859      	ldr	r1, [r3, #4]
 80079a0:	f7ff f81e 	bl	80069e0 <_Balloc>
 80079a4:	9008      	str	r0, [sp, #32]
 80079a6:	2800      	cmp	r0, #0
 80079a8:	f43f af18 	beq.w	80077dc <_strtod_l+0x47c>
 80079ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ae:	300c      	adds	r0, #12
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	f103 010c 	add.w	r1, r3, #12
 80079b6:	3202      	adds	r2, #2
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	f000 fd89 	bl	80084d0 <memcpy>
 80079be:	ab1c      	add	r3, sp, #112	; 0x70
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	ab1b      	add	r3, sp, #108	; 0x6c
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4642      	mov	r2, r8
 80079c8:	464b      	mov	r3, r9
 80079ca:	4620      	mov	r0, r4
 80079cc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80079d0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80079d4:	f7ff fbd8 	bl	8007188 <__d2b>
 80079d8:	901a      	str	r0, [sp, #104]	; 0x68
 80079da:	2800      	cmp	r0, #0
 80079dc:	f43f aefe 	beq.w	80077dc <_strtod_l+0x47c>
 80079e0:	2101      	movs	r1, #1
 80079e2:	4620      	mov	r0, r4
 80079e4:	f7ff f93c 	bl	8006c60 <__i2b>
 80079e8:	4683      	mov	fp, r0
 80079ea:	2800      	cmp	r0, #0
 80079ec:	f43f aef6 	beq.w	80077dc <_strtod_l+0x47c>
 80079f0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80079f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80079f4:	2f00      	cmp	r7, #0
 80079f6:	bfab      	itete	ge
 80079f8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80079fa:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80079fc:	eb07 0a03 	addge.w	sl, r7, r3
 8007a00:	1bdd      	sublt	r5, r3, r7
 8007a02:	9b05      	ldr	r3, [sp, #20]
 8007a04:	bfa8      	it	ge
 8007a06:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007a08:	eba7 0703 	sub.w	r7, r7, r3
 8007a0c:	4417      	add	r7, r2
 8007a0e:	4b71      	ldr	r3, [pc, #452]	; (8007bd4 <_strtod_l+0x874>)
 8007a10:	f107 37ff 	add.w	r7, r7, #4294967295
 8007a14:	bfb8      	it	lt
 8007a16:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007a1a:	429f      	cmp	r7, r3
 8007a1c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a20:	f280 80c7 	bge.w	8007bb2 <_strtod_l+0x852>
 8007a24:	1bdb      	subs	r3, r3, r7
 8007a26:	2b1f      	cmp	r3, #31
 8007a28:	f04f 0101 	mov.w	r1, #1
 8007a2c:	eba2 0203 	sub.w	r2, r2, r3
 8007a30:	f300 80b3 	bgt.w	8007b9a <_strtod_l+0x83a>
 8007a34:	fa01 f303 	lsl.w	r3, r1, r3
 8007a38:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9310      	str	r3, [sp, #64]	; 0x40
 8007a3e:	eb0a 0702 	add.w	r7, sl, r2
 8007a42:	9b05      	ldr	r3, [sp, #20]
 8007a44:	45ba      	cmp	sl, r7
 8007a46:	4415      	add	r5, r2
 8007a48:	441d      	add	r5, r3
 8007a4a:	4653      	mov	r3, sl
 8007a4c:	bfa8      	it	ge
 8007a4e:	463b      	movge	r3, r7
 8007a50:	42ab      	cmp	r3, r5
 8007a52:	bfa8      	it	ge
 8007a54:	462b      	movge	r3, r5
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfc2      	ittt	gt
 8007a5a:	1aff      	subgt	r7, r7, r3
 8007a5c:	1aed      	subgt	r5, r5, r3
 8007a5e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd17      	ble.n	8007a98 <_strtod_l+0x738>
 8007a68:	4659      	mov	r1, fp
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f7ff f9b5 	bl	8006ddc <__pow5mult>
 8007a72:	4683      	mov	fp, r0
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f43f aeb1 	beq.w	80077dc <_strtod_l+0x47c>
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff f904 	bl	8006c8c <__multiply>
 8007a84:	900a      	str	r0, [sp, #40]	; 0x28
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f43f aea8 	beq.w	80077dc <_strtod_l+0x47c>
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a90:	f7fe ffe6 	bl	8006a60 <_Bfree>
 8007a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a96:	931a      	str	r3, [sp, #104]	; 0x68
 8007a98:	2f00      	cmp	r7, #0
 8007a9a:	f300 808f 	bgt.w	8007bbc <_strtod_l+0x85c>
 8007a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dd08      	ble.n	8007ab6 <_strtod_l+0x756>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007aa8:	9908      	ldr	r1, [sp, #32]
 8007aaa:	f7ff f997 	bl	8006ddc <__pow5mult>
 8007aae:	9008      	str	r0, [sp, #32]
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	f43f ae93 	beq.w	80077dc <_strtod_l+0x47c>
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	dd08      	ble.n	8007acc <_strtod_l+0x76c>
 8007aba:	462a      	mov	r2, r5
 8007abc:	4620      	mov	r0, r4
 8007abe:	9908      	ldr	r1, [sp, #32]
 8007ac0:	f7ff f9e6 	bl	8006e90 <__lshift>
 8007ac4:	9008      	str	r0, [sp, #32]
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f43f ae88 	beq.w	80077dc <_strtod_l+0x47c>
 8007acc:	f1ba 0f00 	cmp.w	sl, #0
 8007ad0:	dd08      	ble.n	8007ae4 <_strtod_l+0x784>
 8007ad2:	4659      	mov	r1, fp
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7ff f9da 	bl	8006e90 <__lshift>
 8007adc:	4683      	mov	fp, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f ae7c 	beq.w	80077dc <_strtod_l+0x47c>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	9a08      	ldr	r2, [sp, #32]
 8007ae8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007aea:	f7ff fa59 	bl	8006fa0 <__mdiff>
 8007aee:	4606      	mov	r6, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f43f ae73 	beq.w	80077dc <_strtod_l+0x47c>
 8007af6:	2500      	movs	r5, #0
 8007af8:	68c3      	ldr	r3, [r0, #12]
 8007afa:	4659      	mov	r1, fp
 8007afc:	60c5      	str	r5, [r0, #12]
 8007afe:	930a      	str	r3, [sp, #40]	; 0x28
 8007b00:	f7ff fa32 	bl	8006f68 <__mcmp>
 8007b04:	42a8      	cmp	r0, r5
 8007b06:	da6b      	bge.n	8007be0 <_strtod_l+0x880>
 8007b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0a:	ea53 0308 	orrs.w	r3, r3, r8
 8007b0e:	f040 808f 	bne.w	8007c30 <_strtod_l+0x8d0>
 8007b12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f040 808a 	bne.w	8007c30 <_strtod_l+0x8d0>
 8007b1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b20:	0d1b      	lsrs	r3, r3, #20
 8007b22:	051b      	lsls	r3, r3, #20
 8007b24:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b28:	f240 8082 	bls.w	8007c30 <_strtod_l+0x8d0>
 8007b2c:	6973      	ldr	r3, [r6, #20]
 8007b2e:	b913      	cbnz	r3, 8007b36 <_strtod_l+0x7d6>
 8007b30:	6933      	ldr	r3, [r6, #16]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	dd7c      	ble.n	8007c30 <_strtod_l+0x8d0>
 8007b36:	4631      	mov	r1, r6
 8007b38:	2201      	movs	r2, #1
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f7ff f9a8 	bl	8006e90 <__lshift>
 8007b40:	4659      	mov	r1, fp
 8007b42:	4606      	mov	r6, r0
 8007b44:	f7ff fa10 	bl	8006f68 <__mcmp>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	dd71      	ble.n	8007c30 <_strtod_l+0x8d0>
 8007b4c:	9905      	ldr	r1, [sp, #20]
 8007b4e:	464b      	mov	r3, r9
 8007b50:	4a21      	ldr	r2, [pc, #132]	; (8007bd8 <_strtod_l+0x878>)
 8007b52:	2900      	cmp	r1, #0
 8007b54:	f000 808d 	beq.w	8007c72 <_strtod_l+0x912>
 8007b58:	ea02 0109 	and.w	r1, r2, r9
 8007b5c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b60:	f300 8087 	bgt.w	8007c72 <_strtod_l+0x912>
 8007b64:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b68:	f77f aea9 	ble.w	80078be <_strtod_l+0x55e>
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	4b1a      	ldr	r3, [pc, #104]	; (8007bdc <_strtod_l+0x87c>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	f7f8 fcb0 	bl	80004d8 <__aeabi_dmul>
 8007b78:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <_strtod_l+0x878>)
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	400b      	ands	r3, r1
 8007b7e:	4689      	mov	r9, r1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f47f ae35 	bne.w	80077f0 <_strtod_l+0x490>
 8007b86:	2322      	movs	r3, #34	; 0x22
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	e631      	b.n	80077f0 <_strtod_l+0x490>
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b90:	fa02 f303 	lsl.w	r3, r2, r3
 8007b94:	ea03 0808 	and.w	r8, r3, r8
 8007b98:	e6de      	b.n	8007958 <_strtod_l+0x5f8>
 8007b9a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007b9e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007ba2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007ba6:	37e2      	adds	r7, #226	; 0xe2
 8007ba8:	fa01 f307 	lsl.w	r3, r1, r7
 8007bac:	9310      	str	r3, [sp, #64]	; 0x40
 8007bae:	9113      	str	r1, [sp, #76]	; 0x4c
 8007bb0:	e745      	b.n	8007a3e <_strtod_l+0x6de>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9310      	str	r3, [sp, #64]	; 0x40
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007bba:	e740      	b.n	8007a3e <_strtod_l+0x6de>
 8007bbc:	463a      	mov	r2, r7
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007bc2:	f7ff f965 	bl	8006e90 <__lshift>
 8007bc6:	901a      	str	r0, [sp, #104]	; 0x68
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	f47f af68 	bne.w	8007a9e <_strtod_l+0x73e>
 8007bce:	e605      	b.n	80077dc <_strtod_l+0x47c>
 8007bd0:	080094c0 	.word	0x080094c0
 8007bd4:	fffffc02 	.word	0xfffffc02
 8007bd8:	7ff00000 	.word	0x7ff00000
 8007bdc:	39500000 	.word	0x39500000
 8007be0:	46ca      	mov	sl, r9
 8007be2:	d165      	bne.n	8007cb0 <_strtod_l+0x950>
 8007be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bea:	b352      	cbz	r2, 8007c42 <_strtod_l+0x8e2>
 8007bec:	4a9e      	ldr	r2, [pc, #632]	; (8007e68 <_strtod_l+0xb08>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d12a      	bne.n	8007c48 <_strtod_l+0x8e8>
 8007bf2:	9b05      	ldr	r3, [sp, #20]
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	b1fb      	cbz	r3, 8007c38 <_strtod_l+0x8d8>
 8007bf8:	4b9c      	ldr	r3, [pc, #624]	; (8007e6c <_strtod_l+0xb0c>)
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	ea09 0303 	and.w	r3, r9, r3
 8007c02:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c06:	d81a      	bhi.n	8007c3e <_strtod_l+0x8de>
 8007c08:	0d1b      	lsrs	r3, r3, #20
 8007c0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	4299      	cmp	r1, r3
 8007c14:	d118      	bne.n	8007c48 <_strtod_l+0x8e8>
 8007c16:	4b96      	ldr	r3, [pc, #600]	; (8007e70 <_strtod_l+0xb10>)
 8007c18:	459a      	cmp	sl, r3
 8007c1a:	d102      	bne.n	8007c22 <_strtod_l+0x8c2>
 8007c1c:	3101      	adds	r1, #1
 8007c1e:	f43f addd 	beq.w	80077dc <_strtod_l+0x47c>
 8007c22:	f04f 0800 	mov.w	r8, #0
 8007c26:	4b91      	ldr	r3, [pc, #580]	; (8007e6c <_strtod_l+0xb0c>)
 8007c28:	ea0a 0303 	and.w	r3, sl, r3
 8007c2c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d19a      	bne.n	8007b6c <_strtod_l+0x80c>
 8007c36:	e5db      	b.n	80077f0 <_strtod_l+0x490>
 8007c38:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3c:	e7e9      	b.n	8007c12 <_strtod_l+0x8b2>
 8007c3e:	4613      	mov	r3, r2
 8007c40:	e7e7      	b.n	8007c12 <_strtod_l+0x8b2>
 8007c42:	ea53 0308 	orrs.w	r3, r3, r8
 8007c46:	d081      	beq.n	8007b4c <_strtod_l+0x7ec>
 8007c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c4a:	b1e3      	cbz	r3, 8007c86 <_strtod_l+0x926>
 8007c4c:	ea13 0f0a 	tst.w	r3, sl
 8007c50:	d0ee      	beq.n	8007c30 <_strtod_l+0x8d0>
 8007c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	9a05      	ldr	r2, [sp, #20]
 8007c5a:	b1c3      	cbz	r3, 8007c8e <_strtod_l+0x92e>
 8007c5c:	f7ff fb5c 	bl	8007318 <sulp>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c68:	f7f8 fa80 	bl	800016c <__adddf3>
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	4689      	mov	r9, r1
 8007c70:	e7de      	b.n	8007c30 <_strtod_l+0x8d0>
 8007c72:	4013      	ands	r3, r2
 8007c74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007c7c:	f04f 38ff 	mov.w	r8, #4294967295
 8007c80:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007c84:	e7d4      	b.n	8007c30 <_strtod_l+0x8d0>
 8007c86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c88:	ea13 0f08 	tst.w	r3, r8
 8007c8c:	e7e0      	b.n	8007c50 <_strtod_l+0x8f0>
 8007c8e:	f7ff fb43 	bl	8007318 <sulp>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c9a:	f7f8 fa65 	bl	8000168 <__aeabi_dsub>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	4689      	mov	r9, r1
 8007ca6:	f7f8 fe7f 	bl	80009a8 <__aeabi_dcmpeq>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0c0      	beq.n	8007c30 <_strtod_l+0x8d0>
 8007cae:	e606      	b.n	80078be <_strtod_l+0x55e>
 8007cb0:	4659      	mov	r1, fp
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff fabe 	bl	8007234 <__ratio>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cc6:	f7f8 fe83 	bl	80009d0 <__aeabi_dcmple>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d06f      	beq.n	8007dae <_strtod_l+0xa4e>
 8007cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d17c      	bne.n	8007dce <_strtod_l+0xa6e>
 8007cd4:	f1b8 0f00 	cmp.w	r8, #0
 8007cd8:	d159      	bne.n	8007d8e <_strtod_l+0xa2e>
 8007cda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d17b      	bne.n	8007dda <_strtod_l+0xa7a>
 8007ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	4b62      	ldr	r3, [pc, #392]	; (8007e74 <_strtod_l+0xb14>)
 8007cea:	f7f8 fe67 	bl	80009bc <__aeabi_dcmplt>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d15a      	bne.n	8007da8 <_strtod_l+0xa48>
 8007cf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4b5f      	ldr	r3, [pc, #380]	; (8007e78 <_strtod_l+0xb18>)
 8007cfa:	f7f8 fbed 	bl	80004d8 <__aeabi_dmul>
 8007cfe:	4605      	mov	r5, r0
 8007d00:	460f      	mov	r7, r1
 8007d02:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007d06:	9506      	str	r5, [sp, #24]
 8007d08:	9307      	str	r3, [sp, #28]
 8007d0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d12:	4b56      	ldr	r3, [pc, #344]	; (8007e6c <_strtod_l+0xb0c>)
 8007d14:	4a55      	ldr	r2, [pc, #340]	; (8007e6c <_strtod_l+0xb0c>)
 8007d16:	ea0a 0303 	and.w	r3, sl, r3
 8007d1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d1c:	4b57      	ldr	r3, [pc, #348]	; (8007e7c <_strtod_l+0xb1c>)
 8007d1e:	ea0a 0202 	and.w	r2, sl, r2
 8007d22:	429a      	cmp	r2, r3
 8007d24:	f040 80b0 	bne.w	8007e88 <_strtod_l+0xb28>
 8007d28:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	4649      	mov	r1, r9
 8007d30:	f7ff f9c2 	bl	80070b8 <__ulp>
 8007d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d38:	f7f8 fbce 	bl	80004d8 <__aeabi_dmul>
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	464b      	mov	r3, r9
 8007d40:	f7f8 fa14 	bl	800016c <__adddf3>
 8007d44:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007e6c <_strtod_l+0xb0c>
 8007d48:	4a4d      	ldr	r2, [pc, #308]	; (8007e80 <_strtod_l+0xb20>)
 8007d4a:	ea01 0a0a 	and.w	sl, r1, sl
 8007d4e:	4592      	cmp	sl, r2
 8007d50:	4680      	mov	r8, r0
 8007d52:	d948      	bls.n	8007de6 <_strtod_l+0xa86>
 8007d54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d56:	4b46      	ldr	r3, [pc, #280]	; (8007e70 <_strtod_l+0xb10>)
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d103      	bne.n	8007d64 <_strtod_l+0xa04>
 8007d5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d5e:	3301      	adds	r3, #1
 8007d60:	f43f ad3c 	beq.w	80077dc <_strtod_l+0x47c>
 8007d64:	f04f 38ff 	mov.w	r8, #4294967295
 8007d68:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007e70 <_strtod_l+0xb10>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d70:	f7fe fe76 	bl	8006a60 <_Bfree>
 8007d74:	4620      	mov	r0, r4
 8007d76:	9908      	ldr	r1, [sp, #32]
 8007d78:	f7fe fe72 	bl	8006a60 <_Bfree>
 8007d7c:	4659      	mov	r1, fp
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7fe fe6e 	bl	8006a60 <_Bfree>
 8007d84:	4631      	mov	r1, r6
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7fe fe6a 	bl	8006a60 <_Bfree>
 8007d8c:	e605      	b.n	800799a <_strtod_l+0x63a>
 8007d8e:	f1b8 0f01 	cmp.w	r8, #1
 8007d92:	d103      	bne.n	8007d9c <_strtod_l+0xa3c>
 8007d94:	f1b9 0f00 	cmp.w	r9, #0
 8007d98:	f43f ad91 	beq.w	80078be <_strtod_l+0x55e>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4b39      	ldr	r3, [pc, #228]	; (8007e84 <_strtod_l+0xb24>)
 8007da0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007da2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007da6:	e016      	b.n	8007dd6 <_strtod_l+0xa76>
 8007da8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007daa:	4f33      	ldr	r7, [pc, #204]	; (8007e78 <_strtod_l+0xb18>)
 8007dac:	e7a9      	b.n	8007d02 <_strtod_l+0x9a2>
 8007dae:	4b32      	ldr	r3, [pc, #200]	; (8007e78 <_strtod_l+0xb18>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007db6:	f7f8 fb8f 	bl	80004d8 <__aeabi_dmul>
 8007dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	460f      	mov	r7, r1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d09e      	beq.n	8007d02 <_strtod_l+0x9a2>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007dcc:	e79d      	b.n	8007d0a <_strtod_l+0x9aa>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4b28      	ldr	r3, [pc, #160]	; (8007e74 <_strtod_l+0xb14>)
 8007dd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007dd6:	4f27      	ldr	r7, [pc, #156]	; (8007e74 <_strtod_l+0xb14>)
 8007dd8:	e797      	b.n	8007d0a <_strtod_l+0x9aa>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	4b29      	ldr	r3, [pc, #164]	; (8007e84 <_strtod_l+0xb24>)
 8007dde:	4645      	mov	r5, r8
 8007de0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007de4:	e7f7      	b.n	8007dd6 <_strtod_l+0xa76>
 8007de6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007dea:	9b05      	ldr	r3, [sp, #20]
 8007dec:	46ca      	mov	sl, r9
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1bc      	bne.n	8007d6c <_strtod_l+0xa0c>
 8007df2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007df6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007df8:	0d1b      	lsrs	r3, r3, #20
 8007dfa:	051b      	lsls	r3, r3, #20
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d1b5      	bne.n	8007d6c <_strtod_l+0xa0c>
 8007e00:	4628      	mov	r0, r5
 8007e02:	4639      	mov	r1, r7
 8007e04:	f7f8 feb0 	bl	8000b68 <__aeabi_d2lz>
 8007e08:	f7f8 fb38 	bl	800047c <__aeabi_l2d>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4628      	mov	r0, r5
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 f9a8 	bl	8000168 <__aeabi_dsub>
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007e20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e26:	ea4a 0a08 	orr.w	sl, sl, r8
 8007e2a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007e2e:	d06c      	beq.n	8007f0a <_strtod_l+0xbaa>
 8007e30:	a309      	add	r3, pc, #36	; (adr r3, 8007e58 <_strtod_l+0xaf8>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 fdc1 	bl	80009bc <__aeabi_dcmplt>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f47f acd8 	bne.w	80077f0 <_strtod_l+0x490>
 8007e40:	a307      	add	r3, pc, #28	; (adr r3, 8007e60 <_strtod_l+0xb00>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e4a:	f7f8 fdd5 	bl	80009f8 <__aeabi_dcmpgt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d08c      	beq.n	8007d6c <_strtod_l+0xa0c>
 8007e52:	e4cd      	b.n	80077f0 <_strtod_l+0x490>
 8007e54:	f3af 8000 	nop.w
 8007e58:	94a03595 	.word	0x94a03595
 8007e5c:	3fdfffff 	.word	0x3fdfffff
 8007e60:	35afe535 	.word	0x35afe535
 8007e64:	3fe00000 	.word	0x3fe00000
 8007e68:	000fffff 	.word	0x000fffff
 8007e6c:	7ff00000 	.word	0x7ff00000
 8007e70:	7fefffff 	.word	0x7fefffff
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	3fe00000 	.word	0x3fe00000
 8007e7c:	7fe00000 	.word	0x7fe00000
 8007e80:	7c9fffff 	.word	0x7c9fffff
 8007e84:	bff00000 	.word	0xbff00000
 8007e88:	9b05      	ldr	r3, [sp, #20]
 8007e8a:	b333      	cbz	r3, 8007eda <_strtod_l+0xb7a>
 8007e8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e92:	d822      	bhi.n	8007eda <_strtod_l+0xb7a>
 8007e94:	a328      	add	r3, pc, #160	; (adr r3, 8007f38 <_strtod_l+0xbd8>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	f7f8 fd97 	bl	80009d0 <__aeabi_dcmple>
 8007ea2:	b1a0      	cbz	r0, 8007ece <_strtod_l+0xb6e>
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f7f8 fdee 	bl	8000a88 <__aeabi_d2uiz>
 8007eac:	2801      	cmp	r0, #1
 8007eae:	bf38      	it	cc
 8007eb0:	2001      	movcc	r0, #1
 8007eb2:	f7f8 fa97 	bl	80003e4 <__aeabi_ui2d>
 8007eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460f      	mov	r7, r1
 8007ebc:	bb03      	cbnz	r3, 8007f00 <_strtod_l+0xba0>
 8007ebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ec2:	9014      	str	r0, [sp, #80]	; 0x50
 8007ec4:	9315      	str	r3, [sp, #84]	; 0x54
 8007ec6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007eca:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ed2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ed6:	1a9b      	subs	r3, r3, r2
 8007ed8:	9311      	str	r3, [sp, #68]	; 0x44
 8007eda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007edc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ede:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007ee2:	f7ff f8e9 	bl	80070b8 <__ulp>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4640      	mov	r0, r8
 8007eec:	4649      	mov	r1, r9
 8007eee:	f7f8 faf3 	bl	80004d8 <__aeabi_dmul>
 8007ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ef6:	f7f8 f939 	bl	800016c <__adddf3>
 8007efa:	4680      	mov	r8, r0
 8007efc:	4689      	mov	r9, r1
 8007efe:	e774      	b.n	8007dea <_strtod_l+0xa8a>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007f08:	e7dd      	b.n	8007ec6 <_strtod_l+0xb66>
 8007f0a:	a30d      	add	r3, pc, #52	; (adr r3, 8007f40 <_strtod_l+0xbe0>)
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f7f8 fd54 	bl	80009bc <__aeabi_dcmplt>
 8007f14:	e79b      	b.n	8007e4e <_strtod_l+0xaee>
 8007f16:	2300      	movs	r3, #0
 8007f18:	930e      	str	r3, [sp, #56]	; 0x38
 8007f1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	f7ff ba5b 	b.w	80073da <_strtod_l+0x7a>
 8007f24:	2a65      	cmp	r2, #101	; 0x65
 8007f26:	f43f ab52 	beq.w	80075ce <_strtod_l+0x26e>
 8007f2a:	2a45      	cmp	r2, #69	; 0x45
 8007f2c:	f43f ab4f 	beq.w	80075ce <_strtod_l+0x26e>
 8007f30:	2301      	movs	r3, #1
 8007f32:	f7ff bb87 	b.w	8007644 <_strtod_l+0x2e4>
 8007f36:	bf00      	nop
 8007f38:	ffc00000 	.word	0xffc00000
 8007f3c:	41dfffff 	.word	0x41dfffff
 8007f40:	94a03595 	.word	0x94a03595
 8007f44:	3fcfffff 	.word	0x3fcfffff

08007f48 <_strtod_r>:
 8007f48:	4b01      	ldr	r3, [pc, #4]	; (8007f50 <_strtod_r+0x8>)
 8007f4a:	f7ff ba09 	b.w	8007360 <_strtod_l>
 8007f4e:	bf00      	nop
 8007f50:	20000078 	.word	0x20000078

08007f54 <_strtol_l.constprop.0>:
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5a:	4686      	mov	lr, r0
 8007f5c:	4690      	mov	r8, r2
 8007f5e:	d001      	beq.n	8007f64 <_strtol_l.constprop.0+0x10>
 8007f60:	2b24      	cmp	r3, #36	; 0x24
 8007f62:	d906      	bls.n	8007f72 <_strtol_l.constprop.0+0x1e>
 8007f64:	f7fd fd94 	bl	8005a90 <__errno>
 8007f68:	2316      	movs	r3, #22
 8007f6a:	6003      	str	r3, [r0, #0]
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	460d      	mov	r5, r1
 8007f74:	4835      	ldr	r0, [pc, #212]	; (800804c <_strtol_l.constprop.0+0xf8>)
 8007f76:	462a      	mov	r2, r5
 8007f78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f7c:	5d06      	ldrb	r6, [r0, r4]
 8007f7e:	f016 0608 	ands.w	r6, r6, #8
 8007f82:	d1f8      	bne.n	8007f76 <_strtol_l.constprop.0+0x22>
 8007f84:	2c2d      	cmp	r4, #45	; 0x2d
 8007f86:	d12e      	bne.n	8007fe6 <_strtol_l.constprop.0+0x92>
 8007f88:	2601      	movs	r6, #1
 8007f8a:	782c      	ldrb	r4, [r5, #0]
 8007f8c:	1c95      	adds	r5, r2, #2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d057      	beq.n	8008042 <_strtol_l.constprop.0+0xee>
 8007f92:	2b10      	cmp	r3, #16
 8007f94:	d109      	bne.n	8007faa <_strtol_l.constprop.0+0x56>
 8007f96:	2c30      	cmp	r4, #48	; 0x30
 8007f98:	d107      	bne.n	8007faa <_strtol_l.constprop.0+0x56>
 8007f9a:	782a      	ldrb	r2, [r5, #0]
 8007f9c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007fa0:	2a58      	cmp	r2, #88	; 0x58
 8007fa2:	d149      	bne.n	8008038 <_strtol_l.constprop.0+0xe4>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	786c      	ldrb	r4, [r5, #1]
 8007fa8:	3502      	adds	r5, #2
 8007faa:	2200      	movs	r2, #0
 8007fac:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007fb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007fb4:	fbbc f9f3 	udiv	r9, ip, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fbe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007fc2:	2f09      	cmp	r7, #9
 8007fc4:	d814      	bhi.n	8007ff0 <_strtol_l.constprop.0+0x9c>
 8007fc6:	463c      	mov	r4, r7
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	dd20      	ble.n	800800e <_strtol_l.constprop.0+0xba>
 8007fcc:	1c57      	adds	r7, r2, #1
 8007fce:	d007      	beq.n	8007fe0 <_strtol_l.constprop.0+0x8c>
 8007fd0:	4581      	cmp	r9, r0
 8007fd2:	d319      	bcc.n	8008008 <_strtol_l.constprop.0+0xb4>
 8007fd4:	d101      	bne.n	8007fda <_strtol_l.constprop.0+0x86>
 8007fd6:	45a2      	cmp	sl, r4
 8007fd8:	db16      	blt.n	8008008 <_strtol_l.constprop.0+0xb4>
 8007fda:	2201      	movs	r2, #1
 8007fdc:	fb00 4003 	mla	r0, r0, r3, r4
 8007fe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fe4:	e7eb      	b.n	8007fbe <_strtol_l.constprop.0+0x6a>
 8007fe6:	2c2b      	cmp	r4, #43	; 0x2b
 8007fe8:	bf04      	itt	eq
 8007fea:	782c      	ldrbeq	r4, [r5, #0]
 8007fec:	1c95      	addeq	r5, r2, #2
 8007fee:	e7ce      	b.n	8007f8e <_strtol_l.constprop.0+0x3a>
 8007ff0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007ff4:	2f19      	cmp	r7, #25
 8007ff6:	d801      	bhi.n	8007ffc <_strtol_l.constprop.0+0xa8>
 8007ff8:	3c37      	subs	r4, #55	; 0x37
 8007ffa:	e7e5      	b.n	8007fc8 <_strtol_l.constprop.0+0x74>
 8007ffc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008000:	2f19      	cmp	r7, #25
 8008002:	d804      	bhi.n	800800e <_strtol_l.constprop.0+0xba>
 8008004:	3c57      	subs	r4, #87	; 0x57
 8008006:	e7df      	b.n	8007fc8 <_strtol_l.constprop.0+0x74>
 8008008:	f04f 32ff 	mov.w	r2, #4294967295
 800800c:	e7e8      	b.n	8007fe0 <_strtol_l.constprop.0+0x8c>
 800800e:	1c53      	adds	r3, r2, #1
 8008010:	d108      	bne.n	8008024 <_strtol_l.constprop.0+0xd0>
 8008012:	2322      	movs	r3, #34	; 0x22
 8008014:	4660      	mov	r0, ip
 8008016:	f8ce 3000 	str.w	r3, [lr]
 800801a:	f1b8 0f00 	cmp.w	r8, #0
 800801e:	d0a6      	beq.n	8007f6e <_strtol_l.constprop.0+0x1a>
 8008020:	1e69      	subs	r1, r5, #1
 8008022:	e006      	b.n	8008032 <_strtol_l.constprop.0+0xde>
 8008024:	b106      	cbz	r6, 8008028 <_strtol_l.constprop.0+0xd4>
 8008026:	4240      	negs	r0, r0
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	d09f      	beq.n	8007f6e <_strtol_l.constprop.0+0x1a>
 800802e:	2a00      	cmp	r2, #0
 8008030:	d1f6      	bne.n	8008020 <_strtol_l.constprop.0+0xcc>
 8008032:	f8c8 1000 	str.w	r1, [r8]
 8008036:	e79a      	b.n	8007f6e <_strtol_l.constprop.0+0x1a>
 8008038:	2430      	movs	r4, #48	; 0x30
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1b5      	bne.n	8007faa <_strtol_l.constprop.0+0x56>
 800803e:	2308      	movs	r3, #8
 8008040:	e7b3      	b.n	8007faa <_strtol_l.constprop.0+0x56>
 8008042:	2c30      	cmp	r4, #48	; 0x30
 8008044:	d0a9      	beq.n	8007f9a <_strtol_l.constprop.0+0x46>
 8008046:	230a      	movs	r3, #10
 8008048:	e7af      	b.n	8007faa <_strtol_l.constprop.0+0x56>
 800804a:	bf00      	nop
 800804c:	080094e9 	.word	0x080094e9

08008050 <_strtol_r>:
 8008050:	f7ff bf80 	b.w	8007f54 <_strtol_l.constprop.0>

08008054 <__ssputs_r>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	461f      	mov	r7, r3
 800805a:	688e      	ldr	r6, [r1, #8]
 800805c:	4682      	mov	sl, r0
 800805e:	42be      	cmp	r6, r7
 8008060:	460c      	mov	r4, r1
 8008062:	4690      	mov	r8, r2
 8008064:	680b      	ldr	r3, [r1, #0]
 8008066:	d82c      	bhi.n	80080c2 <__ssputs_r+0x6e>
 8008068:	898a      	ldrh	r2, [r1, #12]
 800806a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800806e:	d026      	beq.n	80080be <__ssputs_r+0x6a>
 8008070:	6965      	ldr	r5, [r4, #20]
 8008072:	6909      	ldr	r1, [r1, #16]
 8008074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008078:	eba3 0901 	sub.w	r9, r3, r1
 800807c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008080:	1c7b      	adds	r3, r7, #1
 8008082:	444b      	add	r3, r9
 8008084:	106d      	asrs	r5, r5, #1
 8008086:	429d      	cmp	r5, r3
 8008088:	bf38      	it	cc
 800808a:	461d      	movcc	r5, r3
 800808c:	0553      	lsls	r3, r2, #21
 800808e:	d527      	bpl.n	80080e0 <__ssputs_r+0x8c>
 8008090:	4629      	mov	r1, r5
 8008092:	f7fe fc19 	bl	80068c8 <_malloc_r>
 8008096:	4606      	mov	r6, r0
 8008098:	b360      	cbz	r0, 80080f4 <__ssputs_r+0xa0>
 800809a:	464a      	mov	r2, r9
 800809c:	6921      	ldr	r1, [r4, #16]
 800809e:	f000 fa17 	bl	80084d0 <memcpy>
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	6126      	str	r6, [r4, #16]
 80080b0:	444e      	add	r6, r9
 80080b2:	6026      	str	r6, [r4, #0]
 80080b4:	463e      	mov	r6, r7
 80080b6:	6165      	str	r5, [r4, #20]
 80080b8:	eba5 0509 	sub.w	r5, r5, r9
 80080bc:	60a5      	str	r5, [r4, #8]
 80080be:	42be      	cmp	r6, r7
 80080c0:	d900      	bls.n	80080c4 <__ssputs_r+0x70>
 80080c2:	463e      	mov	r6, r7
 80080c4:	4632      	mov	r2, r6
 80080c6:	4641      	mov	r1, r8
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	f000 f9c5 	bl	8008458 <memmove>
 80080ce:	2000      	movs	r0, #0
 80080d0:	68a3      	ldr	r3, [r4, #8]
 80080d2:	1b9b      	subs	r3, r3, r6
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	4433      	add	r3, r6
 80080da:	6023      	str	r3, [r4, #0]
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	462a      	mov	r2, r5
 80080e2:	f000 fda6 	bl	8008c32 <_realloc_r>
 80080e6:	4606      	mov	r6, r0
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1e0      	bne.n	80080ae <__ssputs_r+0x5a>
 80080ec:	4650      	mov	r0, sl
 80080ee:	6921      	ldr	r1, [r4, #16]
 80080f0:	f7fe fb7a 	bl	80067e8 <_free_r>
 80080f4:	230c      	movs	r3, #12
 80080f6:	f8ca 3000 	str.w	r3, [sl]
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	e7e9      	b.n	80080dc <__ssputs_r+0x88>

08008108 <_svfiprintf_r>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	4698      	mov	r8, r3
 800810e:	898b      	ldrh	r3, [r1, #12]
 8008110:	4607      	mov	r7, r0
 8008112:	061b      	lsls	r3, r3, #24
 8008114:	460d      	mov	r5, r1
 8008116:	4614      	mov	r4, r2
 8008118:	b09d      	sub	sp, #116	; 0x74
 800811a:	d50e      	bpl.n	800813a <_svfiprintf_r+0x32>
 800811c:	690b      	ldr	r3, [r1, #16]
 800811e:	b963      	cbnz	r3, 800813a <_svfiprintf_r+0x32>
 8008120:	2140      	movs	r1, #64	; 0x40
 8008122:	f7fe fbd1 	bl	80068c8 <_malloc_r>
 8008126:	6028      	str	r0, [r5, #0]
 8008128:	6128      	str	r0, [r5, #16]
 800812a:	b920      	cbnz	r0, 8008136 <_svfiprintf_r+0x2e>
 800812c:	230c      	movs	r3, #12
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	e0d0      	b.n	80082d8 <_svfiprintf_r+0x1d0>
 8008136:	2340      	movs	r3, #64	; 0x40
 8008138:	616b      	str	r3, [r5, #20]
 800813a:	2300      	movs	r3, #0
 800813c:	9309      	str	r3, [sp, #36]	; 0x24
 800813e:	2320      	movs	r3, #32
 8008140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008144:	2330      	movs	r3, #48	; 0x30
 8008146:	f04f 0901 	mov.w	r9, #1
 800814a:	f8cd 800c 	str.w	r8, [sp, #12]
 800814e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80082f0 <_svfiprintf_r+0x1e8>
 8008152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008156:	4623      	mov	r3, r4
 8008158:	469a      	mov	sl, r3
 800815a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800815e:	b10a      	cbz	r2, 8008164 <_svfiprintf_r+0x5c>
 8008160:	2a25      	cmp	r2, #37	; 0x25
 8008162:	d1f9      	bne.n	8008158 <_svfiprintf_r+0x50>
 8008164:	ebba 0b04 	subs.w	fp, sl, r4
 8008168:	d00b      	beq.n	8008182 <_svfiprintf_r+0x7a>
 800816a:	465b      	mov	r3, fp
 800816c:	4622      	mov	r2, r4
 800816e:	4629      	mov	r1, r5
 8008170:	4638      	mov	r0, r7
 8008172:	f7ff ff6f 	bl	8008054 <__ssputs_r>
 8008176:	3001      	adds	r0, #1
 8008178:	f000 80a9 	beq.w	80082ce <_svfiprintf_r+0x1c6>
 800817c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800817e:	445a      	add	r2, fp
 8008180:	9209      	str	r2, [sp, #36]	; 0x24
 8008182:	f89a 3000 	ldrb.w	r3, [sl]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80a1 	beq.w	80082ce <_svfiprintf_r+0x1c6>
 800818c:	2300      	movs	r3, #0
 800818e:	f04f 32ff 	mov.w	r2, #4294967295
 8008192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008196:	f10a 0a01 	add.w	sl, sl, #1
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	9307      	str	r3, [sp, #28]
 800819e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a2:	931a      	str	r3, [sp, #104]	; 0x68
 80081a4:	4654      	mov	r4, sl
 80081a6:	2205      	movs	r2, #5
 80081a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ac:	4850      	ldr	r0, [pc, #320]	; (80082f0 <_svfiprintf_r+0x1e8>)
 80081ae:	f7fd fc9b 	bl	8005ae8 <memchr>
 80081b2:	9a04      	ldr	r2, [sp, #16]
 80081b4:	b9d8      	cbnz	r0, 80081ee <_svfiprintf_r+0xe6>
 80081b6:	06d0      	lsls	r0, r2, #27
 80081b8:	bf44      	itt	mi
 80081ba:	2320      	movmi	r3, #32
 80081bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c0:	0711      	lsls	r1, r2, #28
 80081c2:	bf44      	itt	mi
 80081c4:	232b      	movmi	r3, #43	; 0x2b
 80081c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ca:	f89a 3000 	ldrb.w	r3, [sl]
 80081ce:	2b2a      	cmp	r3, #42	; 0x2a
 80081d0:	d015      	beq.n	80081fe <_svfiprintf_r+0xf6>
 80081d2:	4654      	mov	r4, sl
 80081d4:	2000      	movs	r0, #0
 80081d6:	f04f 0c0a 	mov.w	ip, #10
 80081da:	9a07      	ldr	r2, [sp, #28]
 80081dc:	4621      	mov	r1, r4
 80081de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e2:	3b30      	subs	r3, #48	; 0x30
 80081e4:	2b09      	cmp	r3, #9
 80081e6:	d94d      	bls.n	8008284 <_svfiprintf_r+0x17c>
 80081e8:	b1b0      	cbz	r0, 8008218 <_svfiprintf_r+0x110>
 80081ea:	9207      	str	r2, [sp, #28]
 80081ec:	e014      	b.n	8008218 <_svfiprintf_r+0x110>
 80081ee:	eba0 0308 	sub.w	r3, r0, r8
 80081f2:	fa09 f303 	lsl.w	r3, r9, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	46a2      	mov	sl, r4
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	e7d2      	b.n	80081a4 <_svfiprintf_r+0x9c>
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	1d19      	adds	r1, r3, #4
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	9103      	str	r1, [sp, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	bfbb      	ittet	lt
 800820a:	425b      	neglt	r3, r3
 800820c:	f042 0202 	orrlt.w	r2, r2, #2
 8008210:	9307      	strge	r3, [sp, #28]
 8008212:	9307      	strlt	r3, [sp, #28]
 8008214:	bfb8      	it	lt
 8008216:	9204      	strlt	r2, [sp, #16]
 8008218:	7823      	ldrb	r3, [r4, #0]
 800821a:	2b2e      	cmp	r3, #46	; 0x2e
 800821c:	d10c      	bne.n	8008238 <_svfiprintf_r+0x130>
 800821e:	7863      	ldrb	r3, [r4, #1]
 8008220:	2b2a      	cmp	r3, #42	; 0x2a
 8008222:	d134      	bne.n	800828e <_svfiprintf_r+0x186>
 8008224:	9b03      	ldr	r3, [sp, #12]
 8008226:	3402      	adds	r4, #2
 8008228:	1d1a      	adds	r2, r3, #4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	9203      	str	r2, [sp, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	bfb8      	it	lt
 8008232:	f04f 33ff 	movlt.w	r3, #4294967295
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80082f4 <_svfiprintf_r+0x1ec>
 800823c:	2203      	movs	r2, #3
 800823e:	4650      	mov	r0, sl
 8008240:	7821      	ldrb	r1, [r4, #0]
 8008242:	f7fd fc51 	bl	8005ae8 <memchr>
 8008246:	b138      	cbz	r0, 8008258 <_svfiprintf_r+0x150>
 8008248:	2240      	movs	r2, #64	; 0x40
 800824a:	9b04      	ldr	r3, [sp, #16]
 800824c:	eba0 000a 	sub.w	r0, r0, sl
 8008250:	4082      	lsls	r2, r0
 8008252:	4313      	orrs	r3, r2
 8008254:	3401      	adds	r4, #1
 8008256:	9304      	str	r3, [sp, #16]
 8008258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800825c:	2206      	movs	r2, #6
 800825e:	4826      	ldr	r0, [pc, #152]	; (80082f8 <_svfiprintf_r+0x1f0>)
 8008260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008264:	f7fd fc40 	bl	8005ae8 <memchr>
 8008268:	2800      	cmp	r0, #0
 800826a:	d038      	beq.n	80082de <_svfiprintf_r+0x1d6>
 800826c:	4b23      	ldr	r3, [pc, #140]	; (80082fc <_svfiprintf_r+0x1f4>)
 800826e:	bb1b      	cbnz	r3, 80082b8 <_svfiprintf_r+0x1b0>
 8008270:	9b03      	ldr	r3, [sp, #12]
 8008272:	3307      	adds	r3, #7
 8008274:	f023 0307 	bic.w	r3, r3, #7
 8008278:	3308      	adds	r3, #8
 800827a:	9303      	str	r3, [sp, #12]
 800827c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827e:	4433      	add	r3, r6
 8008280:	9309      	str	r3, [sp, #36]	; 0x24
 8008282:	e768      	b.n	8008156 <_svfiprintf_r+0x4e>
 8008284:	460c      	mov	r4, r1
 8008286:	2001      	movs	r0, #1
 8008288:	fb0c 3202 	mla	r2, ip, r2, r3
 800828c:	e7a6      	b.n	80081dc <_svfiprintf_r+0xd4>
 800828e:	2300      	movs	r3, #0
 8008290:	f04f 0c0a 	mov.w	ip, #10
 8008294:	4619      	mov	r1, r3
 8008296:	3401      	adds	r4, #1
 8008298:	9305      	str	r3, [sp, #20]
 800829a:	4620      	mov	r0, r4
 800829c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a0:	3a30      	subs	r2, #48	; 0x30
 80082a2:	2a09      	cmp	r2, #9
 80082a4:	d903      	bls.n	80082ae <_svfiprintf_r+0x1a6>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0c6      	beq.n	8008238 <_svfiprintf_r+0x130>
 80082aa:	9105      	str	r1, [sp, #20]
 80082ac:	e7c4      	b.n	8008238 <_svfiprintf_r+0x130>
 80082ae:	4604      	mov	r4, r0
 80082b0:	2301      	movs	r3, #1
 80082b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082b6:	e7f0      	b.n	800829a <_svfiprintf_r+0x192>
 80082b8:	ab03      	add	r3, sp, #12
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	462a      	mov	r2, r5
 80082be:	4638      	mov	r0, r7
 80082c0:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <_svfiprintf_r+0x1f8>)
 80082c2:	a904      	add	r1, sp, #16
 80082c4:	f7fc fcae 	bl	8004c24 <_printf_float>
 80082c8:	1c42      	adds	r2, r0, #1
 80082ca:	4606      	mov	r6, r0
 80082cc:	d1d6      	bne.n	800827c <_svfiprintf_r+0x174>
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	065b      	lsls	r3, r3, #25
 80082d2:	f53f af2d 	bmi.w	8008130 <_svfiprintf_r+0x28>
 80082d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d8:	b01d      	add	sp, #116	; 0x74
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	ab03      	add	r3, sp, #12
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	462a      	mov	r2, r5
 80082e4:	4638      	mov	r0, r7
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <_svfiprintf_r+0x1f8>)
 80082e8:	a904      	add	r1, sp, #16
 80082ea:	f7fc ff3b 	bl	8005164 <_printf_i>
 80082ee:	e7eb      	b.n	80082c8 <_svfiprintf_r+0x1c0>
 80082f0:	080095e9 	.word	0x080095e9
 80082f4:	080095ef 	.word	0x080095ef
 80082f8:	080095f3 	.word	0x080095f3
 80082fc:	08004c25 	.word	0x08004c25
 8008300:	08008055 	.word	0x08008055

08008304 <__sflush_r>:
 8008304:	898a      	ldrh	r2, [r1, #12]
 8008306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008308:	4605      	mov	r5, r0
 800830a:	0710      	lsls	r0, r2, #28
 800830c:	460c      	mov	r4, r1
 800830e:	d457      	bmi.n	80083c0 <__sflush_r+0xbc>
 8008310:	684b      	ldr	r3, [r1, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	dc04      	bgt.n	8008320 <__sflush_r+0x1c>
 8008316:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008318:	2b00      	cmp	r3, #0
 800831a:	dc01      	bgt.n	8008320 <__sflush_r+0x1c>
 800831c:	2000      	movs	r0, #0
 800831e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008322:	2e00      	cmp	r6, #0
 8008324:	d0fa      	beq.n	800831c <__sflush_r+0x18>
 8008326:	2300      	movs	r3, #0
 8008328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800832c:	682f      	ldr	r7, [r5, #0]
 800832e:	6a21      	ldr	r1, [r4, #32]
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	d032      	beq.n	800839a <__sflush_r+0x96>
 8008334:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	075a      	lsls	r2, r3, #29
 800833a:	d505      	bpl.n	8008348 <__sflush_r+0x44>
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	1ac0      	subs	r0, r0, r3
 8008340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008342:	b10b      	cbz	r3, 8008348 <__sflush_r+0x44>
 8008344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008346:	1ac0      	subs	r0, r0, r3
 8008348:	2300      	movs	r3, #0
 800834a:	4602      	mov	r2, r0
 800834c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800834e:	4628      	mov	r0, r5
 8008350:	6a21      	ldr	r1, [r4, #32]
 8008352:	47b0      	blx	r6
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	d106      	bne.n	8008368 <__sflush_r+0x64>
 800835a:	6829      	ldr	r1, [r5, #0]
 800835c:	291d      	cmp	r1, #29
 800835e:	d82b      	bhi.n	80083b8 <__sflush_r+0xb4>
 8008360:	4a28      	ldr	r2, [pc, #160]	; (8008404 <__sflush_r+0x100>)
 8008362:	410a      	asrs	r2, r1
 8008364:	07d6      	lsls	r6, r2, #31
 8008366:	d427      	bmi.n	80083b8 <__sflush_r+0xb4>
 8008368:	2200      	movs	r2, #0
 800836a:	6062      	str	r2, [r4, #4]
 800836c:	6922      	ldr	r2, [r4, #16]
 800836e:	04d9      	lsls	r1, r3, #19
 8008370:	6022      	str	r2, [r4, #0]
 8008372:	d504      	bpl.n	800837e <__sflush_r+0x7a>
 8008374:	1c42      	adds	r2, r0, #1
 8008376:	d101      	bne.n	800837c <__sflush_r+0x78>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b903      	cbnz	r3, 800837e <__sflush_r+0x7a>
 800837c:	6560      	str	r0, [r4, #84]	; 0x54
 800837e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008380:	602f      	str	r7, [r5, #0]
 8008382:	2900      	cmp	r1, #0
 8008384:	d0ca      	beq.n	800831c <__sflush_r+0x18>
 8008386:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800838a:	4299      	cmp	r1, r3
 800838c:	d002      	beq.n	8008394 <__sflush_r+0x90>
 800838e:	4628      	mov	r0, r5
 8008390:	f7fe fa2a 	bl	80067e8 <_free_r>
 8008394:	2000      	movs	r0, #0
 8008396:	6360      	str	r0, [r4, #52]	; 0x34
 8008398:	e7c1      	b.n	800831e <__sflush_r+0x1a>
 800839a:	2301      	movs	r3, #1
 800839c:	4628      	mov	r0, r5
 800839e:	47b0      	blx	r6
 80083a0:	1c41      	adds	r1, r0, #1
 80083a2:	d1c8      	bne.n	8008336 <__sflush_r+0x32>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0c5      	beq.n	8008336 <__sflush_r+0x32>
 80083aa:	2b1d      	cmp	r3, #29
 80083ac:	d001      	beq.n	80083b2 <__sflush_r+0xae>
 80083ae:	2b16      	cmp	r3, #22
 80083b0:	d101      	bne.n	80083b6 <__sflush_r+0xb2>
 80083b2:	602f      	str	r7, [r5, #0]
 80083b4:	e7b2      	b.n	800831c <__sflush_r+0x18>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083bc:	81a3      	strh	r3, [r4, #12]
 80083be:	e7ae      	b.n	800831e <__sflush_r+0x1a>
 80083c0:	690f      	ldr	r7, [r1, #16]
 80083c2:	2f00      	cmp	r7, #0
 80083c4:	d0aa      	beq.n	800831c <__sflush_r+0x18>
 80083c6:	0793      	lsls	r3, r2, #30
 80083c8:	bf18      	it	ne
 80083ca:	2300      	movne	r3, #0
 80083cc:	680e      	ldr	r6, [r1, #0]
 80083ce:	bf08      	it	eq
 80083d0:	694b      	ldreq	r3, [r1, #20]
 80083d2:	1bf6      	subs	r6, r6, r7
 80083d4:	600f      	str	r7, [r1, #0]
 80083d6:	608b      	str	r3, [r1, #8]
 80083d8:	2e00      	cmp	r6, #0
 80083da:	dd9f      	ble.n	800831c <__sflush_r+0x18>
 80083dc:	4633      	mov	r3, r6
 80083de:	463a      	mov	r2, r7
 80083e0:	4628      	mov	r0, r5
 80083e2:	6a21      	ldr	r1, [r4, #32]
 80083e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80083e8:	47e0      	blx	ip
 80083ea:	2800      	cmp	r0, #0
 80083ec:	dc06      	bgt.n	80083fc <__sflush_r+0xf8>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	e790      	b.n	800831e <__sflush_r+0x1a>
 80083fc:	4407      	add	r7, r0
 80083fe:	1a36      	subs	r6, r6, r0
 8008400:	e7ea      	b.n	80083d8 <__sflush_r+0xd4>
 8008402:	bf00      	nop
 8008404:	dfbffffe 	.word	0xdfbffffe

08008408 <_fflush_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	690b      	ldr	r3, [r1, #16]
 800840c:	4605      	mov	r5, r0
 800840e:	460c      	mov	r4, r1
 8008410:	b913      	cbnz	r3, 8008418 <_fflush_r+0x10>
 8008412:	2500      	movs	r5, #0
 8008414:	4628      	mov	r0, r5
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	b118      	cbz	r0, 8008422 <_fflush_r+0x1a>
 800841a:	6a03      	ldr	r3, [r0, #32]
 800841c:	b90b      	cbnz	r3, 8008422 <_fflush_r+0x1a>
 800841e:	f7fd fa4b 	bl	80058b8 <__sinit>
 8008422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0f3      	beq.n	8008412 <_fflush_r+0xa>
 800842a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800842c:	07d0      	lsls	r0, r2, #31
 800842e:	d404      	bmi.n	800843a <_fflush_r+0x32>
 8008430:	0599      	lsls	r1, r3, #22
 8008432:	d402      	bmi.n	800843a <_fflush_r+0x32>
 8008434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008436:	f7fd fb55 	bl	8005ae4 <__retarget_lock_acquire_recursive>
 800843a:	4628      	mov	r0, r5
 800843c:	4621      	mov	r1, r4
 800843e:	f7ff ff61 	bl	8008304 <__sflush_r>
 8008442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008444:	4605      	mov	r5, r0
 8008446:	07da      	lsls	r2, r3, #31
 8008448:	d4e4      	bmi.n	8008414 <_fflush_r+0xc>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	059b      	lsls	r3, r3, #22
 800844e:	d4e1      	bmi.n	8008414 <_fflush_r+0xc>
 8008450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008452:	f7fd fb48 	bl	8005ae6 <__retarget_lock_release_recursive>
 8008456:	e7dd      	b.n	8008414 <_fflush_r+0xc>

08008458 <memmove>:
 8008458:	4288      	cmp	r0, r1
 800845a:	b510      	push	{r4, lr}
 800845c:	eb01 0402 	add.w	r4, r1, r2
 8008460:	d902      	bls.n	8008468 <memmove+0x10>
 8008462:	4284      	cmp	r4, r0
 8008464:	4623      	mov	r3, r4
 8008466:	d807      	bhi.n	8008478 <memmove+0x20>
 8008468:	1e43      	subs	r3, r0, #1
 800846a:	42a1      	cmp	r1, r4
 800846c:	d008      	beq.n	8008480 <memmove+0x28>
 800846e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008476:	e7f8      	b.n	800846a <memmove+0x12>
 8008478:	4601      	mov	r1, r0
 800847a:	4402      	add	r2, r0
 800847c:	428a      	cmp	r2, r1
 800847e:	d100      	bne.n	8008482 <memmove+0x2a>
 8008480:	bd10      	pop	{r4, pc}
 8008482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800848a:	e7f7      	b.n	800847c <memmove+0x24>

0800848c <strncmp>:
 800848c:	b510      	push	{r4, lr}
 800848e:	b16a      	cbz	r2, 80084ac <strncmp+0x20>
 8008490:	3901      	subs	r1, #1
 8008492:	1884      	adds	r4, r0, r2
 8008494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008498:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800849c:	429a      	cmp	r2, r3
 800849e:	d103      	bne.n	80084a8 <strncmp+0x1c>
 80084a0:	42a0      	cmp	r0, r4
 80084a2:	d001      	beq.n	80084a8 <strncmp+0x1c>
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	d1f5      	bne.n	8008494 <strncmp+0x8>
 80084a8:	1ad0      	subs	r0, r2, r3
 80084aa:	bd10      	pop	{r4, pc}
 80084ac:	4610      	mov	r0, r2
 80084ae:	e7fc      	b.n	80084aa <strncmp+0x1e>

080084b0 <_sbrk_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	2300      	movs	r3, #0
 80084b4:	4d05      	ldr	r5, [pc, #20]	; (80084cc <_sbrk_r+0x1c>)
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	f7f8 ff66 	bl	800138c <_sbrk>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_sbrk_r+0x1a>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_sbrk_r+0x1a>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	2000047c 	.word	0x2000047c

080084d0 <memcpy>:
 80084d0:	440a      	add	r2, r1
 80084d2:	4291      	cmp	r1, r2
 80084d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084d8:	d100      	bne.n	80084dc <memcpy+0xc>
 80084da:	4770      	bx	lr
 80084dc:	b510      	push	{r4, lr}
 80084de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e2:	4291      	cmp	r1, r2
 80084e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e8:	d1f9      	bne.n	80084de <memcpy+0xe>
 80084ea:	bd10      	pop	{r4, pc}

080084ec <nan>:
 80084ec:	2000      	movs	r0, #0
 80084ee:	4901      	ldr	r1, [pc, #4]	; (80084f4 <nan+0x8>)
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	7ff80000 	.word	0x7ff80000

080084f8 <__assert_func>:
 80084f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084fa:	4614      	mov	r4, r2
 80084fc:	461a      	mov	r2, r3
 80084fe:	4b09      	ldr	r3, [pc, #36]	; (8008524 <__assert_func+0x2c>)
 8008500:	4605      	mov	r5, r0
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68d8      	ldr	r0, [r3, #12]
 8008506:	b14c      	cbz	r4, 800851c <__assert_func+0x24>
 8008508:	4b07      	ldr	r3, [pc, #28]	; (8008528 <__assert_func+0x30>)
 800850a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800850e:	9100      	str	r1, [sp, #0]
 8008510:	462b      	mov	r3, r5
 8008512:	4906      	ldr	r1, [pc, #24]	; (800852c <__assert_func+0x34>)
 8008514:	f000 fbca 	bl	8008cac <fiprintf>
 8008518:	f000 fbda 	bl	8008cd0 <abort>
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <__assert_func+0x38>)
 800851e:	461c      	mov	r4, r3
 8008520:	e7f3      	b.n	800850a <__assert_func+0x12>
 8008522:	bf00      	nop
 8008524:	20000074 	.word	0x20000074
 8008528:	08009602 	.word	0x08009602
 800852c:	0800960f 	.word	0x0800960f
 8008530:	0800963d 	.word	0x0800963d

08008534 <_calloc_r>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	fba1 5402 	umull	r5, r4, r1, r2
 800853a:	b934      	cbnz	r4, 800854a <_calloc_r+0x16>
 800853c:	4629      	mov	r1, r5
 800853e:	f7fe f9c3 	bl	80068c8 <_malloc_r>
 8008542:	4606      	mov	r6, r0
 8008544:	b928      	cbnz	r0, 8008552 <_calloc_r+0x1e>
 8008546:	4630      	mov	r0, r6
 8008548:	bd70      	pop	{r4, r5, r6, pc}
 800854a:	220c      	movs	r2, #12
 800854c:	2600      	movs	r6, #0
 800854e:	6002      	str	r2, [r0, #0]
 8008550:	e7f9      	b.n	8008546 <_calloc_r+0x12>
 8008552:	462a      	mov	r2, r5
 8008554:	4621      	mov	r1, r4
 8008556:	f7fd fa48 	bl	80059ea <memset>
 800855a:	e7f4      	b.n	8008546 <_calloc_r+0x12>

0800855c <rshift>:
 800855c:	6903      	ldr	r3, [r0, #16]
 800855e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008562:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008566:	f100 0414 	add.w	r4, r0, #20
 800856a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800856e:	dd46      	ble.n	80085fe <rshift+0xa2>
 8008570:	f011 011f 	ands.w	r1, r1, #31
 8008574:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008578:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800857c:	d10c      	bne.n	8008598 <rshift+0x3c>
 800857e:	4629      	mov	r1, r5
 8008580:	f100 0710 	add.w	r7, r0, #16
 8008584:	42b1      	cmp	r1, r6
 8008586:	d335      	bcc.n	80085f4 <rshift+0x98>
 8008588:	1a9b      	subs	r3, r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	1eea      	subs	r2, r5, #3
 800858e:	4296      	cmp	r6, r2
 8008590:	bf38      	it	cc
 8008592:	2300      	movcc	r3, #0
 8008594:	4423      	add	r3, r4
 8008596:	e015      	b.n	80085c4 <rshift+0x68>
 8008598:	46a1      	mov	r9, r4
 800859a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800859e:	f1c1 0820 	rsb	r8, r1, #32
 80085a2:	40cf      	lsrs	r7, r1
 80085a4:	f105 0e04 	add.w	lr, r5, #4
 80085a8:	4576      	cmp	r6, lr
 80085aa:	46f4      	mov	ip, lr
 80085ac:	d816      	bhi.n	80085dc <rshift+0x80>
 80085ae:	1a9a      	subs	r2, r3, r2
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	3a04      	subs	r2, #4
 80085b4:	3501      	adds	r5, #1
 80085b6:	42ae      	cmp	r6, r5
 80085b8:	bf38      	it	cc
 80085ba:	2200      	movcc	r2, #0
 80085bc:	18a3      	adds	r3, r4, r2
 80085be:	50a7      	str	r7, [r4, r2]
 80085c0:	b107      	cbz	r7, 80085c4 <rshift+0x68>
 80085c2:	3304      	adds	r3, #4
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	eba3 0204 	sub.w	r2, r3, r4
 80085ca:	bf08      	it	eq
 80085cc:	2300      	moveq	r3, #0
 80085ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80085d2:	6102      	str	r2, [r0, #16]
 80085d4:	bf08      	it	eq
 80085d6:	6143      	streq	r3, [r0, #20]
 80085d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085dc:	f8dc c000 	ldr.w	ip, [ip]
 80085e0:	fa0c fc08 	lsl.w	ip, ip, r8
 80085e4:	ea4c 0707 	orr.w	r7, ip, r7
 80085e8:	f849 7b04 	str.w	r7, [r9], #4
 80085ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085f0:	40cf      	lsrs	r7, r1
 80085f2:	e7d9      	b.n	80085a8 <rshift+0x4c>
 80085f4:	f851 cb04 	ldr.w	ip, [r1], #4
 80085f8:	f847 cf04 	str.w	ip, [r7, #4]!
 80085fc:	e7c2      	b.n	8008584 <rshift+0x28>
 80085fe:	4623      	mov	r3, r4
 8008600:	e7e0      	b.n	80085c4 <rshift+0x68>

08008602 <__hexdig_fun>:
 8008602:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008606:	2b09      	cmp	r3, #9
 8008608:	d802      	bhi.n	8008610 <__hexdig_fun+0xe>
 800860a:	3820      	subs	r0, #32
 800860c:	b2c0      	uxtb	r0, r0
 800860e:	4770      	bx	lr
 8008610:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008614:	2b05      	cmp	r3, #5
 8008616:	d801      	bhi.n	800861c <__hexdig_fun+0x1a>
 8008618:	3847      	subs	r0, #71	; 0x47
 800861a:	e7f7      	b.n	800860c <__hexdig_fun+0xa>
 800861c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008620:	2b05      	cmp	r3, #5
 8008622:	d801      	bhi.n	8008628 <__hexdig_fun+0x26>
 8008624:	3827      	subs	r0, #39	; 0x27
 8008626:	e7f1      	b.n	800860c <__hexdig_fun+0xa>
 8008628:	2000      	movs	r0, #0
 800862a:	4770      	bx	lr

0800862c <__gethex>:
 800862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	4681      	mov	r9, r0
 8008632:	468a      	mov	sl, r1
 8008634:	4617      	mov	r7, r2
 8008636:	680a      	ldr	r2, [r1, #0]
 8008638:	b085      	sub	sp, #20
 800863a:	f102 0b02 	add.w	fp, r2, #2
 800863e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008642:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	32fe      	adds	r2, #254	; 0xfe
 800864a:	eb02 030b 	add.w	r3, r2, fp
 800864e:	46d8      	mov	r8, fp
 8008650:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	2830      	cmp	r0, #48	; 0x30
 8008658:	d0f7      	beq.n	800864a <__gethex+0x1e>
 800865a:	f7ff ffd2 	bl	8008602 <__hexdig_fun>
 800865e:	4604      	mov	r4, r0
 8008660:	2800      	cmp	r0, #0
 8008662:	d138      	bne.n	80086d6 <__gethex+0xaa>
 8008664:	2201      	movs	r2, #1
 8008666:	4640      	mov	r0, r8
 8008668:	49a7      	ldr	r1, [pc, #668]	; (8008908 <__gethex+0x2dc>)
 800866a:	f7ff ff0f 	bl	800848c <strncmp>
 800866e:	4606      	mov	r6, r0
 8008670:	2800      	cmp	r0, #0
 8008672:	d169      	bne.n	8008748 <__gethex+0x11c>
 8008674:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008678:	465d      	mov	r5, fp
 800867a:	f7ff ffc2 	bl	8008602 <__hexdig_fun>
 800867e:	2800      	cmp	r0, #0
 8008680:	d064      	beq.n	800874c <__gethex+0x120>
 8008682:	465a      	mov	r2, fp
 8008684:	7810      	ldrb	r0, [r2, #0]
 8008686:	4690      	mov	r8, r2
 8008688:	2830      	cmp	r0, #48	; 0x30
 800868a:	f102 0201 	add.w	r2, r2, #1
 800868e:	d0f9      	beq.n	8008684 <__gethex+0x58>
 8008690:	f7ff ffb7 	bl	8008602 <__hexdig_fun>
 8008694:	2301      	movs	r3, #1
 8008696:	fab0 f480 	clz	r4, r0
 800869a:	465e      	mov	r6, fp
 800869c:	0964      	lsrs	r4, r4, #5
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	4642      	mov	r2, r8
 80086a2:	4615      	mov	r5, r2
 80086a4:	7828      	ldrb	r0, [r5, #0]
 80086a6:	3201      	adds	r2, #1
 80086a8:	f7ff ffab 	bl	8008602 <__hexdig_fun>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d1f8      	bne.n	80086a2 <__gethex+0x76>
 80086b0:	2201      	movs	r2, #1
 80086b2:	4628      	mov	r0, r5
 80086b4:	4994      	ldr	r1, [pc, #592]	; (8008908 <__gethex+0x2dc>)
 80086b6:	f7ff fee9 	bl	800848c <strncmp>
 80086ba:	b978      	cbnz	r0, 80086dc <__gethex+0xb0>
 80086bc:	b946      	cbnz	r6, 80086d0 <__gethex+0xa4>
 80086be:	1c6e      	adds	r6, r5, #1
 80086c0:	4632      	mov	r2, r6
 80086c2:	4615      	mov	r5, r2
 80086c4:	7828      	ldrb	r0, [r5, #0]
 80086c6:	3201      	adds	r2, #1
 80086c8:	f7ff ff9b 	bl	8008602 <__hexdig_fun>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d1f8      	bne.n	80086c2 <__gethex+0x96>
 80086d0:	1b73      	subs	r3, r6, r5
 80086d2:	009e      	lsls	r6, r3, #2
 80086d4:	e004      	b.n	80086e0 <__gethex+0xb4>
 80086d6:	2400      	movs	r4, #0
 80086d8:	4626      	mov	r6, r4
 80086da:	e7e1      	b.n	80086a0 <__gethex+0x74>
 80086dc:	2e00      	cmp	r6, #0
 80086de:	d1f7      	bne.n	80086d0 <__gethex+0xa4>
 80086e0:	782b      	ldrb	r3, [r5, #0]
 80086e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086e6:	2b50      	cmp	r3, #80	; 0x50
 80086e8:	d13d      	bne.n	8008766 <__gethex+0x13a>
 80086ea:	786b      	ldrb	r3, [r5, #1]
 80086ec:	2b2b      	cmp	r3, #43	; 0x2b
 80086ee:	d02f      	beq.n	8008750 <__gethex+0x124>
 80086f0:	2b2d      	cmp	r3, #45	; 0x2d
 80086f2:	d031      	beq.n	8008758 <__gethex+0x12c>
 80086f4:	f04f 0b00 	mov.w	fp, #0
 80086f8:	1c69      	adds	r1, r5, #1
 80086fa:	7808      	ldrb	r0, [r1, #0]
 80086fc:	f7ff ff81 	bl	8008602 <__hexdig_fun>
 8008700:	1e42      	subs	r2, r0, #1
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	2a18      	cmp	r2, #24
 8008706:	d82e      	bhi.n	8008766 <__gethex+0x13a>
 8008708:	f1a0 0210 	sub.w	r2, r0, #16
 800870c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008710:	f7ff ff77 	bl	8008602 <__hexdig_fun>
 8008714:	f100 3cff 	add.w	ip, r0, #4294967295
 8008718:	fa5f fc8c 	uxtb.w	ip, ip
 800871c:	f1bc 0f18 	cmp.w	ip, #24
 8008720:	d91d      	bls.n	800875e <__gethex+0x132>
 8008722:	f1bb 0f00 	cmp.w	fp, #0
 8008726:	d000      	beq.n	800872a <__gethex+0xfe>
 8008728:	4252      	negs	r2, r2
 800872a:	4416      	add	r6, r2
 800872c:	f8ca 1000 	str.w	r1, [sl]
 8008730:	b1dc      	cbz	r4, 800876a <__gethex+0x13e>
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	bf14      	ite	ne
 8008738:	f04f 0800 	movne.w	r8, #0
 800873c:	f04f 0806 	moveq.w	r8, #6
 8008740:	4640      	mov	r0, r8
 8008742:	b005      	add	sp, #20
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	4645      	mov	r5, r8
 800874a:	4626      	mov	r6, r4
 800874c:	2401      	movs	r4, #1
 800874e:	e7c7      	b.n	80086e0 <__gethex+0xb4>
 8008750:	f04f 0b00 	mov.w	fp, #0
 8008754:	1ca9      	adds	r1, r5, #2
 8008756:	e7d0      	b.n	80086fa <__gethex+0xce>
 8008758:	f04f 0b01 	mov.w	fp, #1
 800875c:	e7fa      	b.n	8008754 <__gethex+0x128>
 800875e:	230a      	movs	r3, #10
 8008760:	fb03 0002 	mla	r0, r3, r2, r0
 8008764:	e7d0      	b.n	8008708 <__gethex+0xdc>
 8008766:	4629      	mov	r1, r5
 8008768:	e7e0      	b.n	800872c <__gethex+0x100>
 800876a:	4621      	mov	r1, r4
 800876c:	eba5 0308 	sub.w	r3, r5, r8
 8008770:	3b01      	subs	r3, #1
 8008772:	2b07      	cmp	r3, #7
 8008774:	dc0a      	bgt.n	800878c <__gethex+0x160>
 8008776:	4648      	mov	r0, r9
 8008778:	f7fe f932 	bl	80069e0 <_Balloc>
 800877c:	4604      	mov	r4, r0
 800877e:	b940      	cbnz	r0, 8008792 <__gethex+0x166>
 8008780:	4602      	mov	r2, r0
 8008782:	21e4      	movs	r1, #228	; 0xe4
 8008784:	4b61      	ldr	r3, [pc, #388]	; (800890c <__gethex+0x2e0>)
 8008786:	4862      	ldr	r0, [pc, #392]	; (8008910 <__gethex+0x2e4>)
 8008788:	f7ff feb6 	bl	80084f8 <__assert_func>
 800878c:	3101      	adds	r1, #1
 800878e:	105b      	asrs	r3, r3, #1
 8008790:	e7ef      	b.n	8008772 <__gethex+0x146>
 8008792:	2300      	movs	r3, #0
 8008794:	469b      	mov	fp, r3
 8008796:	f100 0a14 	add.w	sl, r0, #20
 800879a:	f8cd a004 	str.w	sl, [sp, #4]
 800879e:	45a8      	cmp	r8, r5
 80087a0:	d344      	bcc.n	800882c <__gethex+0x200>
 80087a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087a6:	4658      	mov	r0, fp
 80087a8:	f848 bb04 	str.w	fp, [r8], #4
 80087ac:	eba8 080a 	sub.w	r8, r8, sl
 80087b0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80087b4:	6122      	str	r2, [r4, #16]
 80087b6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80087ba:	f7fe fa03 	bl	8006bc4 <__hi0bits>
 80087be:	683d      	ldr	r5, [r7, #0]
 80087c0:	eba8 0800 	sub.w	r8, r8, r0
 80087c4:	45a8      	cmp	r8, r5
 80087c6:	dd59      	ble.n	800887c <__gethex+0x250>
 80087c8:	eba8 0805 	sub.w	r8, r8, r5
 80087cc:	4641      	mov	r1, r8
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7fe fd81 	bl	80072d6 <__any_on>
 80087d4:	4683      	mov	fp, r0
 80087d6:	b1b8      	cbz	r0, 8008808 <__gethex+0x1dc>
 80087d8:	f04f 0b01 	mov.w	fp, #1
 80087dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80087e0:	1159      	asrs	r1, r3, #5
 80087e2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80087e6:	f003 021f 	and.w	r2, r3, #31
 80087ea:	fa0b f202 	lsl.w	r2, fp, r2
 80087ee:	420a      	tst	r2, r1
 80087f0:	d00a      	beq.n	8008808 <__gethex+0x1dc>
 80087f2:	455b      	cmp	r3, fp
 80087f4:	dd06      	ble.n	8008804 <__gethex+0x1d8>
 80087f6:	4620      	mov	r0, r4
 80087f8:	f1a8 0102 	sub.w	r1, r8, #2
 80087fc:	f7fe fd6b 	bl	80072d6 <__any_on>
 8008800:	2800      	cmp	r0, #0
 8008802:	d138      	bne.n	8008876 <__gethex+0x24a>
 8008804:	f04f 0b02 	mov.w	fp, #2
 8008808:	4641      	mov	r1, r8
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff fea6 	bl	800855c <rshift>
 8008810:	4446      	add	r6, r8
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	42b3      	cmp	r3, r6
 8008816:	da41      	bge.n	800889c <__gethex+0x270>
 8008818:	4621      	mov	r1, r4
 800881a:	4648      	mov	r0, r9
 800881c:	f7fe f920 	bl	8006a60 <_Bfree>
 8008820:	2300      	movs	r3, #0
 8008822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008824:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	e789      	b.n	8008740 <__gethex+0x114>
 800882c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008830:	2a2e      	cmp	r2, #46	; 0x2e
 8008832:	d014      	beq.n	800885e <__gethex+0x232>
 8008834:	2b20      	cmp	r3, #32
 8008836:	d106      	bne.n	8008846 <__gethex+0x21a>
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	f843 bb04 	str.w	fp, [r3], #4
 800883e:	f04f 0b00 	mov.w	fp, #0
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	465b      	mov	r3, fp
 8008846:	7828      	ldrb	r0, [r5, #0]
 8008848:	9303      	str	r3, [sp, #12]
 800884a:	f7ff feda 	bl	8008602 <__hexdig_fun>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	f000 000f 	and.w	r0, r0, #15
 8008854:	4098      	lsls	r0, r3
 8008856:	ea4b 0b00 	orr.w	fp, fp, r0
 800885a:	3304      	adds	r3, #4
 800885c:	e79f      	b.n	800879e <__gethex+0x172>
 800885e:	45a8      	cmp	r8, r5
 8008860:	d8e8      	bhi.n	8008834 <__gethex+0x208>
 8008862:	2201      	movs	r2, #1
 8008864:	4628      	mov	r0, r5
 8008866:	4928      	ldr	r1, [pc, #160]	; (8008908 <__gethex+0x2dc>)
 8008868:	9303      	str	r3, [sp, #12]
 800886a:	f7ff fe0f 	bl	800848c <strncmp>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	2800      	cmp	r0, #0
 8008872:	d1df      	bne.n	8008834 <__gethex+0x208>
 8008874:	e793      	b.n	800879e <__gethex+0x172>
 8008876:	f04f 0b03 	mov.w	fp, #3
 800887a:	e7c5      	b.n	8008808 <__gethex+0x1dc>
 800887c:	da0b      	bge.n	8008896 <__gethex+0x26a>
 800887e:	eba5 0808 	sub.w	r8, r5, r8
 8008882:	4621      	mov	r1, r4
 8008884:	4642      	mov	r2, r8
 8008886:	4648      	mov	r0, r9
 8008888:	f7fe fb02 	bl	8006e90 <__lshift>
 800888c:	4604      	mov	r4, r0
 800888e:	eba6 0608 	sub.w	r6, r6, r8
 8008892:	f100 0a14 	add.w	sl, r0, #20
 8008896:	f04f 0b00 	mov.w	fp, #0
 800889a:	e7ba      	b.n	8008812 <__gethex+0x1e6>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	42b3      	cmp	r3, r6
 80088a0:	dd74      	ble.n	800898c <__gethex+0x360>
 80088a2:	1b9e      	subs	r6, r3, r6
 80088a4:	42b5      	cmp	r5, r6
 80088a6:	dc35      	bgt.n	8008914 <__gethex+0x2e8>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d023      	beq.n	80088f6 <__gethex+0x2ca>
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d025      	beq.n	80088fe <__gethex+0x2d2>
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d115      	bne.n	80088e2 <__gethex+0x2b6>
 80088b6:	42b5      	cmp	r5, r6
 80088b8:	d113      	bne.n	80088e2 <__gethex+0x2b6>
 80088ba:	2d01      	cmp	r5, #1
 80088bc:	d10b      	bne.n	80088d6 <__gethex+0x2aa>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	9a02      	ldr	r2, [sp, #8]
 80088c2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	2301      	movs	r3, #1
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	f8ca 3000 	str.w	r3, [sl]
 80088d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d2:	601c      	str	r4, [r3, #0]
 80088d4:	e734      	b.n	8008740 <__gethex+0x114>
 80088d6:	4620      	mov	r0, r4
 80088d8:	1e69      	subs	r1, r5, #1
 80088da:	f7fe fcfc 	bl	80072d6 <__any_on>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d1ed      	bne.n	80088be <__gethex+0x292>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4648      	mov	r0, r9
 80088e6:	f7fe f8bb 	bl	8006a60 <_Bfree>
 80088ea:	2300      	movs	r3, #0
 80088ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ee:	f04f 0850 	mov.w	r8, #80	; 0x50
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e724      	b.n	8008740 <__gethex+0x114>
 80088f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1f2      	bne.n	80088e2 <__gethex+0x2b6>
 80088fc:	e7df      	b.n	80088be <__gethex+0x292>
 80088fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1dc      	bne.n	80088be <__gethex+0x292>
 8008904:	e7ed      	b.n	80088e2 <__gethex+0x2b6>
 8008906:	bf00      	nop
 8008908:	08009494 	.word	0x08009494
 800890c:	08009327 	.word	0x08009327
 8008910:	0800963e 	.word	0x0800963e
 8008914:	f106 38ff 	add.w	r8, r6, #4294967295
 8008918:	f1bb 0f00 	cmp.w	fp, #0
 800891c:	d133      	bne.n	8008986 <__gethex+0x35a>
 800891e:	f1b8 0f00 	cmp.w	r8, #0
 8008922:	d004      	beq.n	800892e <__gethex+0x302>
 8008924:	4641      	mov	r1, r8
 8008926:	4620      	mov	r0, r4
 8008928:	f7fe fcd5 	bl	80072d6 <__any_on>
 800892c:	4683      	mov	fp, r0
 800892e:	2301      	movs	r3, #1
 8008930:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008934:	f008 081f 	and.w	r8, r8, #31
 8008938:	fa03 f308 	lsl.w	r3, r3, r8
 800893c:	f04f 0802 	mov.w	r8, #2
 8008940:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008944:	4631      	mov	r1, r6
 8008946:	4213      	tst	r3, r2
 8008948:	4620      	mov	r0, r4
 800894a:	bf18      	it	ne
 800894c:	f04b 0b02 	orrne.w	fp, fp, #2
 8008950:	1bad      	subs	r5, r5, r6
 8008952:	f7ff fe03 	bl	800855c <rshift>
 8008956:	687e      	ldr	r6, [r7, #4]
 8008958:	f1bb 0f00 	cmp.w	fp, #0
 800895c:	d04a      	beq.n	80089f4 <__gethex+0x3c8>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2b02      	cmp	r3, #2
 8008962:	d016      	beq.n	8008992 <__gethex+0x366>
 8008964:	2b03      	cmp	r3, #3
 8008966:	d018      	beq.n	800899a <__gethex+0x36e>
 8008968:	2b01      	cmp	r3, #1
 800896a:	d109      	bne.n	8008980 <__gethex+0x354>
 800896c:	f01b 0f02 	tst.w	fp, #2
 8008970:	d006      	beq.n	8008980 <__gethex+0x354>
 8008972:	f8da 3000 	ldr.w	r3, [sl]
 8008976:	ea4b 0b03 	orr.w	fp, fp, r3
 800897a:	f01b 0f01 	tst.w	fp, #1
 800897e:	d10f      	bne.n	80089a0 <__gethex+0x374>
 8008980:	f048 0810 	orr.w	r8, r8, #16
 8008984:	e036      	b.n	80089f4 <__gethex+0x3c8>
 8008986:	f04f 0b01 	mov.w	fp, #1
 800898a:	e7d0      	b.n	800892e <__gethex+0x302>
 800898c:	f04f 0801 	mov.w	r8, #1
 8008990:	e7e2      	b.n	8008958 <__gethex+0x32c>
 8008992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008994:	f1c3 0301 	rsb	r3, r3, #1
 8008998:	930f      	str	r3, [sp, #60]	; 0x3c
 800899a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0ef      	beq.n	8008980 <__gethex+0x354>
 80089a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80089a4:	f104 0214 	add.w	r2, r4, #20
 80089a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	2300      	movs	r3, #0
 80089b0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80089b4:	4694      	mov	ip, r2
 80089b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80089ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80089be:	d01e      	beq.n	80089fe <__gethex+0x3d2>
 80089c0:	3101      	adds	r1, #1
 80089c2:	f8cc 1000 	str.w	r1, [ip]
 80089c6:	f1b8 0f02 	cmp.w	r8, #2
 80089ca:	f104 0214 	add.w	r2, r4, #20
 80089ce:	d13d      	bne.n	8008a4c <__gethex+0x420>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	42ab      	cmp	r3, r5
 80089d6:	d10b      	bne.n	80089f0 <__gethex+0x3c4>
 80089d8:	2301      	movs	r3, #1
 80089da:	1169      	asrs	r1, r5, #5
 80089dc:	f005 051f 	and.w	r5, r5, #31
 80089e0:	fa03 f505 	lsl.w	r5, r3, r5
 80089e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089e8:	421d      	tst	r5, r3
 80089ea:	bf18      	it	ne
 80089ec:	f04f 0801 	movne.w	r8, #1
 80089f0:	f048 0820 	orr.w	r8, r8, #32
 80089f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089f6:	601c      	str	r4, [r3, #0]
 80089f8:	9b02      	ldr	r3, [sp, #8]
 80089fa:	601e      	str	r6, [r3, #0]
 80089fc:	e6a0      	b.n	8008740 <__gethex+0x114>
 80089fe:	4290      	cmp	r0, r2
 8008a00:	f842 3c04 	str.w	r3, [r2, #-4]
 8008a04:	d8d6      	bhi.n	80089b4 <__gethex+0x388>
 8008a06:	68a2      	ldr	r2, [r4, #8]
 8008a08:	4593      	cmp	fp, r2
 8008a0a:	db17      	blt.n	8008a3c <__gethex+0x410>
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	4648      	mov	r0, r9
 8008a10:	3101      	adds	r1, #1
 8008a12:	f7fd ffe5 	bl	80069e0 <_Balloc>
 8008a16:	4682      	mov	sl, r0
 8008a18:	b918      	cbnz	r0, 8008a22 <__gethex+0x3f6>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	2184      	movs	r1, #132	; 0x84
 8008a1e:	4b1a      	ldr	r3, [pc, #104]	; (8008a88 <__gethex+0x45c>)
 8008a20:	e6b1      	b.n	8008786 <__gethex+0x15a>
 8008a22:	6922      	ldr	r2, [r4, #16]
 8008a24:	f104 010c 	add.w	r1, r4, #12
 8008a28:	3202      	adds	r2, #2
 8008a2a:	0092      	lsls	r2, r2, #2
 8008a2c:	300c      	adds	r0, #12
 8008a2e:	f7ff fd4f 	bl	80084d0 <memcpy>
 8008a32:	4621      	mov	r1, r4
 8008a34:	4648      	mov	r0, r9
 8008a36:	f7fe f813 	bl	8006a60 <_Bfree>
 8008a3a:	4654      	mov	r4, sl
 8008a3c:	6922      	ldr	r2, [r4, #16]
 8008a3e:	1c51      	adds	r1, r2, #1
 8008a40:	6121      	str	r1, [r4, #16]
 8008a42:	2101      	movs	r1, #1
 8008a44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008a48:	6151      	str	r1, [r2, #20]
 8008a4a:	e7bc      	b.n	80089c6 <__gethex+0x39a>
 8008a4c:	6921      	ldr	r1, [r4, #16]
 8008a4e:	4559      	cmp	r1, fp
 8008a50:	dd0b      	ble.n	8008a6a <__gethex+0x43e>
 8008a52:	2101      	movs	r1, #1
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7ff fd81 	bl	800855c <rshift>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	3601      	adds	r6, #1
 8008a5e:	42b3      	cmp	r3, r6
 8008a60:	f6ff aeda 	blt.w	8008818 <__gethex+0x1ec>
 8008a64:	f04f 0801 	mov.w	r8, #1
 8008a68:	e7c2      	b.n	80089f0 <__gethex+0x3c4>
 8008a6a:	f015 051f 	ands.w	r5, r5, #31
 8008a6e:	d0f9      	beq.n	8008a64 <__gethex+0x438>
 8008a70:	9b01      	ldr	r3, [sp, #4]
 8008a72:	f1c5 0520 	rsb	r5, r5, #32
 8008a76:	441a      	add	r2, r3
 8008a78:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008a7c:	f7fe f8a2 	bl	8006bc4 <__hi0bits>
 8008a80:	42a8      	cmp	r0, r5
 8008a82:	dbe6      	blt.n	8008a52 <__gethex+0x426>
 8008a84:	e7ee      	b.n	8008a64 <__gethex+0x438>
 8008a86:	bf00      	nop
 8008a88:	08009327 	.word	0x08009327

08008a8c <L_shift>:
 8008a8c:	f1c2 0208 	rsb	r2, r2, #8
 8008a90:	0092      	lsls	r2, r2, #2
 8008a92:	b570      	push	{r4, r5, r6, lr}
 8008a94:	f1c2 0620 	rsb	r6, r2, #32
 8008a98:	6843      	ldr	r3, [r0, #4]
 8008a9a:	6804      	ldr	r4, [r0, #0]
 8008a9c:	fa03 f506 	lsl.w	r5, r3, r6
 8008aa0:	432c      	orrs	r4, r5
 8008aa2:	40d3      	lsrs	r3, r2
 8008aa4:	6004      	str	r4, [r0, #0]
 8008aa6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008aaa:	4288      	cmp	r0, r1
 8008aac:	d3f4      	bcc.n	8008a98 <L_shift+0xc>
 8008aae:	bd70      	pop	{r4, r5, r6, pc}

08008ab0 <__match>:
 8008ab0:	b530      	push	{r4, r5, lr}
 8008ab2:	6803      	ldr	r3, [r0, #0]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aba:	b914      	cbnz	r4, 8008ac2 <__match+0x12>
 8008abc:	6003      	str	r3, [r0, #0]
 8008abe:	2001      	movs	r0, #1
 8008ac0:	bd30      	pop	{r4, r5, pc}
 8008ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008aca:	2d19      	cmp	r5, #25
 8008acc:	bf98      	it	ls
 8008ace:	3220      	addls	r2, #32
 8008ad0:	42a2      	cmp	r2, r4
 8008ad2:	d0f0      	beq.n	8008ab6 <__match+0x6>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e7f3      	b.n	8008ac0 <__match+0x10>

08008ad8 <__hexnan>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	2500      	movs	r5, #0
 8008ade:	680b      	ldr	r3, [r1, #0]
 8008ae0:	4682      	mov	sl, r0
 8008ae2:	115e      	asrs	r6, r3, #5
 8008ae4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ae8:	f013 031f 	ands.w	r3, r3, #31
 8008aec:	bf18      	it	ne
 8008aee:	3604      	addne	r6, #4
 8008af0:	1f37      	subs	r7, r6, #4
 8008af2:	4690      	mov	r8, r2
 8008af4:	46b9      	mov	r9, r7
 8008af6:	463c      	mov	r4, r7
 8008af8:	46ab      	mov	fp, r5
 8008afa:	b087      	sub	sp, #28
 8008afc:	6801      	ldr	r1, [r0, #0]
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b04:	9502      	str	r5, [sp, #8]
 8008b06:	784a      	ldrb	r2, [r1, #1]
 8008b08:	1c4b      	adds	r3, r1, #1
 8008b0a:	9303      	str	r3, [sp, #12]
 8008b0c:	b342      	cbz	r2, 8008b60 <__hexnan+0x88>
 8008b0e:	4610      	mov	r0, r2
 8008b10:	9105      	str	r1, [sp, #20]
 8008b12:	9204      	str	r2, [sp, #16]
 8008b14:	f7ff fd75 	bl	8008602 <__hexdig_fun>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d14f      	bne.n	8008bbc <__hexnan+0xe4>
 8008b1c:	9a04      	ldr	r2, [sp, #16]
 8008b1e:	9905      	ldr	r1, [sp, #20]
 8008b20:	2a20      	cmp	r2, #32
 8008b22:	d818      	bhi.n	8008b56 <__hexnan+0x7e>
 8008b24:	9b02      	ldr	r3, [sp, #8]
 8008b26:	459b      	cmp	fp, r3
 8008b28:	dd13      	ble.n	8008b52 <__hexnan+0x7a>
 8008b2a:	454c      	cmp	r4, r9
 8008b2c:	d206      	bcs.n	8008b3c <__hexnan+0x64>
 8008b2e:	2d07      	cmp	r5, #7
 8008b30:	dc04      	bgt.n	8008b3c <__hexnan+0x64>
 8008b32:	462a      	mov	r2, r5
 8008b34:	4649      	mov	r1, r9
 8008b36:	4620      	mov	r0, r4
 8008b38:	f7ff ffa8 	bl	8008a8c <L_shift>
 8008b3c:	4544      	cmp	r4, r8
 8008b3e:	d950      	bls.n	8008be2 <__hexnan+0x10a>
 8008b40:	2300      	movs	r3, #0
 8008b42:	f1a4 0904 	sub.w	r9, r4, #4
 8008b46:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b4a:	461d      	mov	r5, r3
 8008b4c:	464c      	mov	r4, r9
 8008b4e:	f8cd b008 	str.w	fp, [sp, #8]
 8008b52:	9903      	ldr	r1, [sp, #12]
 8008b54:	e7d7      	b.n	8008b06 <__hexnan+0x2e>
 8008b56:	2a29      	cmp	r2, #41	; 0x29
 8008b58:	d155      	bne.n	8008c06 <__hexnan+0x12e>
 8008b5a:	3102      	adds	r1, #2
 8008b5c:	f8ca 1000 	str.w	r1, [sl]
 8008b60:	f1bb 0f00 	cmp.w	fp, #0
 8008b64:	d04f      	beq.n	8008c06 <__hexnan+0x12e>
 8008b66:	454c      	cmp	r4, r9
 8008b68:	d206      	bcs.n	8008b78 <__hexnan+0xa0>
 8008b6a:	2d07      	cmp	r5, #7
 8008b6c:	dc04      	bgt.n	8008b78 <__hexnan+0xa0>
 8008b6e:	462a      	mov	r2, r5
 8008b70:	4649      	mov	r1, r9
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7ff ff8a 	bl	8008a8c <L_shift>
 8008b78:	4544      	cmp	r4, r8
 8008b7a:	d934      	bls.n	8008be6 <__hexnan+0x10e>
 8008b7c:	4623      	mov	r3, r4
 8008b7e:	f1a8 0204 	sub.w	r2, r8, #4
 8008b82:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b86:	429f      	cmp	r7, r3
 8008b88:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b8c:	d2f9      	bcs.n	8008b82 <__hexnan+0xaa>
 8008b8e:	1b3b      	subs	r3, r7, r4
 8008b90:	f023 0303 	bic.w	r3, r3, #3
 8008b94:	3304      	adds	r3, #4
 8008b96:	3e03      	subs	r6, #3
 8008b98:	3401      	adds	r4, #1
 8008b9a:	42a6      	cmp	r6, r4
 8008b9c:	bf38      	it	cc
 8008b9e:	2304      	movcc	r3, #4
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4443      	add	r3, r8
 8008ba4:	f843 2b04 	str.w	r2, [r3], #4
 8008ba8:	429f      	cmp	r7, r3
 8008baa:	d2fb      	bcs.n	8008ba4 <__hexnan+0xcc>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	b91b      	cbnz	r3, 8008bb8 <__hexnan+0xe0>
 8008bb0:	4547      	cmp	r7, r8
 8008bb2:	d126      	bne.n	8008c02 <__hexnan+0x12a>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	603b      	str	r3, [r7, #0]
 8008bb8:	2005      	movs	r0, #5
 8008bba:	e025      	b.n	8008c08 <__hexnan+0x130>
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	2d08      	cmp	r5, #8
 8008bc0:	f10b 0b01 	add.w	fp, fp, #1
 8008bc4:	dd06      	ble.n	8008bd4 <__hexnan+0xfc>
 8008bc6:	4544      	cmp	r4, r8
 8008bc8:	d9c3      	bls.n	8008b52 <__hexnan+0x7a>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2501      	movs	r5, #1
 8008bce:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bd2:	3c04      	subs	r4, #4
 8008bd4:	6822      	ldr	r2, [r4, #0]
 8008bd6:	f000 000f 	and.w	r0, r0, #15
 8008bda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008bde:	6020      	str	r0, [r4, #0]
 8008be0:	e7b7      	b.n	8008b52 <__hexnan+0x7a>
 8008be2:	2508      	movs	r5, #8
 8008be4:	e7b5      	b.n	8008b52 <__hexnan+0x7a>
 8008be6:	9b01      	ldr	r3, [sp, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0df      	beq.n	8008bac <__hexnan+0xd4>
 8008bec:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf0:	f1c3 0320 	rsb	r3, r3, #32
 8008bf4:	40da      	lsrs	r2, r3
 8008bf6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c00:	e7d4      	b.n	8008bac <__hexnan+0xd4>
 8008c02:	3f04      	subs	r7, #4
 8008c04:	e7d2      	b.n	8008bac <__hexnan+0xd4>
 8008c06:	2004      	movs	r0, #4
 8008c08:	b007      	add	sp, #28
 8008c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c0e <__ascii_mbtowc>:
 8008c0e:	b082      	sub	sp, #8
 8008c10:	b901      	cbnz	r1, 8008c14 <__ascii_mbtowc+0x6>
 8008c12:	a901      	add	r1, sp, #4
 8008c14:	b142      	cbz	r2, 8008c28 <__ascii_mbtowc+0x1a>
 8008c16:	b14b      	cbz	r3, 8008c2c <__ascii_mbtowc+0x1e>
 8008c18:	7813      	ldrb	r3, [r2, #0]
 8008c1a:	600b      	str	r3, [r1, #0]
 8008c1c:	7812      	ldrb	r2, [r2, #0]
 8008c1e:	1e10      	subs	r0, r2, #0
 8008c20:	bf18      	it	ne
 8008c22:	2001      	movne	r0, #1
 8008c24:	b002      	add	sp, #8
 8008c26:	4770      	bx	lr
 8008c28:	4610      	mov	r0, r2
 8008c2a:	e7fb      	b.n	8008c24 <__ascii_mbtowc+0x16>
 8008c2c:	f06f 0001 	mvn.w	r0, #1
 8008c30:	e7f8      	b.n	8008c24 <__ascii_mbtowc+0x16>

08008c32 <_realloc_r>:
 8008c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c36:	4680      	mov	r8, r0
 8008c38:	4614      	mov	r4, r2
 8008c3a:	460e      	mov	r6, r1
 8008c3c:	b921      	cbnz	r1, 8008c48 <_realloc_r+0x16>
 8008c3e:	4611      	mov	r1, r2
 8008c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	f7fd be40 	b.w	80068c8 <_malloc_r>
 8008c48:	b92a      	cbnz	r2, 8008c56 <_realloc_r+0x24>
 8008c4a:	f7fd fdcd 	bl	80067e8 <_free_r>
 8008c4e:	4625      	mov	r5, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c56:	f000 f842 	bl	8008cde <_malloc_usable_size_r>
 8008c5a:	4284      	cmp	r4, r0
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	d802      	bhi.n	8008c66 <_realloc_r+0x34>
 8008c60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c64:	d812      	bhi.n	8008c8c <_realloc_r+0x5a>
 8008c66:	4621      	mov	r1, r4
 8008c68:	4640      	mov	r0, r8
 8008c6a:	f7fd fe2d 	bl	80068c8 <_malloc_r>
 8008c6e:	4605      	mov	r5, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d0ed      	beq.n	8008c50 <_realloc_r+0x1e>
 8008c74:	42bc      	cmp	r4, r7
 8008c76:	4622      	mov	r2, r4
 8008c78:	4631      	mov	r1, r6
 8008c7a:	bf28      	it	cs
 8008c7c:	463a      	movcs	r2, r7
 8008c7e:	f7ff fc27 	bl	80084d0 <memcpy>
 8008c82:	4631      	mov	r1, r6
 8008c84:	4640      	mov	r0, r8
 8008c86:	f7fd fdaf 	bl	80067e8 <_free_r>
 8008c8a:	e7e1      	b.n	8008c50 <_realloc_r+0x1e>
 8008c8c:	4635      	mov	r5, r6
 8008c8e:	e7df      	b.n	8008c50 <_realloc_r+0x1e>

08008c90 <__ascii_wctomb>:
 8008c90:	4603      	mov	r3, r0
 8008c92:	4608      	mov	r0, r1
 8008c94:	b141      	cbz	r1, 8008ca8 <__ascii_wctomb+0x18>
 8008c96:	2aff      	cmp	r2, #255	; 0xff
 8008c98:	d904      	bls.n	8008ca4 <__ascii_wctomb+0x14>
 8008c9a:	228a      	movs	r2, #138	; 0x8a
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	4770      	bx	lr
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	700a      	strb	r2, [r1, #0]
 8008ca8:	4770      	bx	lr
	...

08008cac <fiprintf>:
 8008cac:	b40e      	push	{r1, r2, r3}
 8008cae:	b503      	push	{r0, r1, lr}
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	ab03      	add	r3, sp, #12
 8008cb4:	4805      	ldr	r0, [pc, #20]	; (8008ccc <fiprintf+0x20>)
 8008cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cba:	6800      	ldr	r0, [r0, #0]
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	f000 f83d 	bl	8008d3c <_vfiprintf_r>
 8008cc2:	b002      	add	sp, #8
 8008cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc8:	b003      	add	sp, #12
 8008cca:	4770      	bx	lr
 8008ccc:	20000074 	.word	0x20000074

08008cd0 <abort>:
 8008cd0:	2006      	movs	r0, #6
 8008cd2:	b508      	push	{r3, lr}
 8008cd4:	f000 fa0a 	bl	80090ec <raise>
 8008cd8:	2001      	movs	r0, #1
 8008cda:	f7f8 fae4 	bl	80012a6 <_exit>

08008cde <_malloc_usable_size_r>:
 8008cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce2:	1f18      	subs	r0, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfbc      	itt	lt
 8008ce8:	580b      	ldrlt	r3, [r1, r0]
 8008cea:	18c0      	addlt	r0, r0, r3
 8008cec:	4770      	bx	lr

08008cee <__sfputc_r>:
 8008cee:	6893      	ldr	r3, [r2, #8]
 8008cf0:	b410      	push	{r4}
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	6093      	str	r3, [r2, #8]
 8008cf8:	da07      	bge.n	8008d0a <__sfputc_r+0x1c>
 8008cfa:	6994      	ldr	r4, [r2, #24]
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	db01      	blt.n	8008d04 <__sfputc_r+0x16>
 8008d00:	290a      	cmp	r1, #10
 8008d02:	d102      	bne.n	8008d0a <__sfputc_r+0x1c>
 8008d04:	bc10      	pop	{r4}
 8008d06:	f000 b933 	b.w	8008f70 <__swbuf_r>
 8008d0a:	6813      	ldr	r3, [r2, #0]
 8008d0c:	1c58      	adds	r0, r3, #1
 8008d0e:	6010      	str	r0, [r2, #0]
 8008d10:	7019      	strb	r1, [r3, #0]
 8008d12:	4608      	mov	r0, r1
 8008d14:	bc10      	pop	{r4}
 8008d16:	4770      	bx	lr

08008d18 <__sfputs_r>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	4614      	mov	r4, r2
 8008d20:	18d5      	adds	r5, r2, r3
 8008d22:	42ac      	cmp	r4, r5
 8008d24:	d101      	bne.n	8008d2a <__sfputs_r+0x12>
 8008d26:	2000      	movs	r0, #0
 8008d28:	e007      	b.n	8008d3a <__sfputs_r+0x22>
 8008d2a:	463a      	mov	r2, r7
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d32:	f7ff ffdc 	bl	8008cee <__sfputc_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d1f3      	bne.n	8008d22 <__sfputs_r+0xa>
 8008d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d3c <_vfiprintf_r>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	460d      	mov	r5, r1
 8008d42:	4614      	mov	r4, r2
 8008d44:	4698      	mov	r8, r3
 8008d46:	4606      	mov	r6, r0
 8008d48:	b09d      	sub	sp, #116	; 0x74
 8008d4a:	b118      	cbz	r0, 8008d54 <_vfiprintf_r+0x18>
 8008d4c:	6a03      	ldr	r3, [r0, #32]
 8008d4e:	b90b      	cbnz	r3, 8008d54 <_vfiprintf_r+0x18>
 8008d50:	f7fc fdb2 	bl	80058b8 <__sinit>
 8008d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d56:	07d9      	lsls	r1, r3, #31
 8008d58:	d405      	bmi.n	8008d66 <_vfiprintf_r+0x2a>
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	059a      	lsls	r2, r3, #22
 8008d5e:	d402      	bmi.n	8008d66 <_vfiprintf_r+0x2a>
 8008d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d62:	f7fc febf 	bl	8005ae4 <__retarget_lock_acquire_recursive>
 8008d66:	89ab      	ldrh	r3, [r5, #12]
 8008d68:	071b      	lsls	r3, r3, #28
 8008d6a:	d501      	bpl.n	8008d70 <_vfiprintf_r+0x34>
 8008d6c:	692b      	ldr	r3, [r5, #16]
 8008d6e:	b99b      	cbnz	r3, 8008d98 <_vfiprintf_r+0x5c>
 8008d70:	4629      	mov	r1, r5
 8008d72:	4630      	mov	r0, r6
 8008d74:	f000 f93a 	bl	8008fec <__swsetup_r>
 8008d78:	b170      	cbz	r0, 8008d98 <_vfiprintf_r+0x5c>
 8008d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d7c:	07dc      	lsls	r4, r3, #31
 8008d7e:	d504      	bpl.n	8008d8a <_vfiprintf_r+0x4e>
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	b01d      	add	sp, #116	; 0x74
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8a:	89ab      	ldrh	r3, [r5, #12]
 8008d8c:	0598      	lsls	r0, r3, #22
 8008d8e:	d4f7      	bmi.n	8008d80 <_vfiprintf_r+0x44>
 8008d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d92:	f7fc fea8 	bl	8005ae6 <__retarget_lock_release_recursive>
 8008d96:	e7f3      	b.n	8008d80 <_vfiprintf_r+0x44>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d9c:	2320      	movs	r3, #32
 8008d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008da2:	2330      	movs	r3, #48	; 0x30
 8008da4:	f04f 0901 	mov.w	r9, #1
 8008da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008f5c <_vfiprintf_r+0x220>
 8008db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008db4:	4623      	mov	r3, r4
 8008db6:	469a      	mov	sl, r3
 8008db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dbc:	b10a      	cbz	r2, 8008dc2 <_vfiprintf_r+0x86>
 8008dbe:	2a25      	cmp	r2, #37	; 0x25
 8008dc0:	d1f9      	bne.n	8008db6 <_vfiprintf_r+0x7a>
 8008dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8008dc6:	d00b      	beq.n	8008de0 <_vfiprintf_r+0xa4>
 8008dc8:	465b      	mov	r3, fp
 8008dca:	4622      	mov	r2, r4
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7ff ffa2 	bl	8008d18 <__sfputs_r>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f000 80a9 	beq.w	8008f2c <_vfiprintf_r+0x1f0>
 8008dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ddc:	445a      	add	r2, fp
 8008dde:	9209      	str	r2, [sp, #36]	; 0x24
 8008de0:	f89a 3000 	ldrb.w	r3, [sl]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 80a1 	beq.w	8008f2c <_vfiprintf_r+0x1f0>
 8008dea:	2300      	movs	r3, #0
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295
 8008df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008df4:	f10a 0a01 	add.w	sl, sl, #1
 8008df8:	9304      	str	r3, [sp, #16]
 8008dfa:	9307      	str	r3, [sp, #28]
 8008dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e00:	931a      	str	r3, [sp, #104]	; 0x68
 8008e02:	4654      	mov	r4, sl
 8008e04:	2205      	movs	r2, #5
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	4854      	ldr	r0, [pc, #336]	; (8008f5c <_vfiprintf_r+0x220>)
 8008e0c:	f7fc fe6c 	bl	8005ae8 <memchr>
 8008e10:	9a04      	ldr	r2, [sp, #16]
 8008e12:	b9d8      	cbnz	r0, 8008e4c <_vfiprintf_r+0x110>
 8008e14:	06d1      	lsls	r1, r2, #27
 8008e16:	bf44      	itt	mi
 8008e18:	2320      	movmi	r3, #32
 8008e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1e:	0713      	lsls	r3, r2, #28
 8008e20:	bf44      	itt	mi
 8008e22:	232b      	movmi	r3, #43	; 0x2b
 8008e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e28:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e2e:	d015      	beq.n	8008e5c <_vfiprintf_r+0x120>
 8008e30:	4654      	mov	r4, sl
 8008e32:	2000      	movs	r0, #0
 8008e34:	f04f 0c0a 	mov.w	ip, #10
 8008e38:	9a07      	ldr	r2, [sp, #28]
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e40:	3b30      	subs	r3, #48	; 0x30
 8008e42:	2b09      	cmp	r3, #9
 8008e44:	d94d      	bls.n	8008ee2 <_vfiprintf_r+0x1a6>
 8008e46:	b1b0      	cbz	r0, 8008e76 <_vfiprintf_r+0x13a>
 8008e48:	9207      	str	r2, [sp, #28]
 8008e4a:	e014      	b.n	8008e76 <_vfiprintf_r+0x13a>
 8008e4c:	eba0 0308 	sub.w	r3, r0, r8
 8008e50:	fa09 f303 	lsl.w	r3, r9, r3
 8008e54:	4313      	orrs	r3, r2
 8008e56:	46a2      	mov	sl, r4
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	e7d2      	b.n	8008e02 <_vfiprintf_r+0xc6>
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	1d19      	adds	r1, r3, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	9103      	str	r1, [sp, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfbb      	ittet	lt
 8008e68:	425b      	neglt	r3, r3
 8008e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e6e:	9307      	strge	r3, [sp, #28]
 8008e70:	9307      	strlt	r3, [sp, #28]
 8008e72:	bfb8      	it	lt
 8008e74:	9204      	strlt	r2, [sp, #16]
 8008e76:	7823      	ldrb	r3, [r4, #0]
 8008e78:	2b2e      	cmp	r3, #46	; 0x2e
 8008e7a:	d10c      	bne.n	8008e96 <_vfiprintf_r+0x15a>
 8008e7c:	7863      	ldrb	r3, [r4, #1]
 8008e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e80:	d134      	bne.n	8008eec <_vfiprintf_r+0x1b0>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	3402      	adds	r4, #2
 8008e86:	1d1a      	adds	r2, r3, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	9203      	str	r2, [sp, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bfb8      	it	lt
 8008e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e94:	9305      	str	r3, [sp, #20]
 8008e96:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f60 <_vfiprintf_r+0x224>
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	7821      	ldrb	r1, [r4, #0]
 8008ea0:	f7fc fe22 	bl	8005ae8 <memchr>
 8008ea4:	b138      	cbz	r0, 8008eb6 <_vfiprintf_r+0x17a>
 8008ea6:	2240      	movs	r2, #64	; 0x40
 8008ea8:	9b04      	ldr	r3, [sp, #16]
 8008eaa:	eba0 000a 	sub.w	r0, r0, sl
 8008eae:	4082      	lsls	r2, r0
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	3401      	adds	r4, #1
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eba:	2206      	movs	r2, #6
 8008ebc:	4829      	ldr	r0, [pc, #164]	; (8008f64 <_vfiprintf_r+0x228>)
 8008ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ec2:	f7fc fe11 	bl	8005ae8 <memchr>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d03f      	beq.n	8008f4a <_vfiprintf_r+0x20e>
 8008eca:	4b27      	ldr	r3, [pc, #156]	; (8008f68 <_vfiprintf_r+0x22c>)
 8008ecc:	bb1b      	cbnz	r3, 8008f16 <_vfiprintf_r+0x1da>
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	3307      	adds	r3, #7
 8008ed2:	f023 0307 	bic.w	r3, r3, #7
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	9303      	str	r3, [sp, #12]
 8008eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008edc:	443b      	add	r3, r7
 8008ede:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee0:	e768      	b.n	8008db4 <_vfiprintf_r+0x78>
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	2001      	movs	r0, #1
 8008ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eea:	e7a6      	b.n	8008e3a <_vfiprintf_r+0xfe>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f04f 0c0a 	mov.w	ip, #10
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	3401      	adds	r4, #1
 8008ef6:	9305      	str	r3, [sp, #20]
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008efe:	3a30      	subs	r2, #48	; 0x30
 8008f00:	2a09      	cmp	r2, #9
 8008f02:	d903      	bls.n	8008f0c <_vfiprintf_r+0x1d0>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0c6      	beq.n	8008e96 <_vfiprintf_r+0x15a>
 8008f08:	9105      	str	r1, [sp, #20]
 8008f0a:	e7c4      	b.n	8008e96 <_vfiprintf_r+0x15a>
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	2301      	movs	r3, #1
 8008f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f14:	e7f0      	b.n	8008ef8 <_vfiprintf_r+0x1bc>
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4b13      	ldr	r3, [pc, #76]	; (8008f6c <_vfiprintf_r+0x230>)
 8008f20:	a904      	add	r1, sp, #16
 8008f22:	f7fb fe7f 	bl	8004c24 <_printf_float>
 8008f26:	4607      	mov	r7, r0
 8008f28:	1c78      	adds	r0, r7, #1
 8008f2a:	d1d6      	bne.n	8008eda <_vfiprintf_r+0x19e>
 8008f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2e:	07d9      	lsls	r1, r3, #31
 8008f30:	d405      	bmi.n	8008f3e <_vfiprintf_r+0x202>
 8008f32:	89ab      	ldrh	r3, [r5, #12]
 8008f34:	059a      	lsls	r2, r3, #22
 8008f36:	d402      	bmi.n	8008f3e <_vfiprintf_r+0x202>
 8008f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f3a:	f7fc fdd4 	bl	8005ae6 <__retarget_lock_release_recursive>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	065b      	lsls	r3, r3, #25
 8008f42:	f53f af1d 	bmi.w	8008d80 <_vfiprintf_r+0x44>
 8008f46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f48:	e71c      	b.n	8008d84 <_vfiprintf_r+0x48>
 8008f4a:	ab03      	add	r3, sp, #12
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	462a      	mov	r2, r5
 8008f50:	4630      	mov	r0, r6
 8008f52:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <_vfiprintf_r+0x230>)
 8008f54:	a904      	add	r1, sp, #16
 8008f56:	f7fc f905 	bl	8005164 <_printf_i>
 8008f5a:	e7e4      	b.n	8008f26 <_vfiprintf_r+0x1ea>
 8008f5c:	080095e9 	.word	0x080095e9
 8008f60:	080095ef 	.word	0x080095ef
 8008f64:	080095f3 	.word	0x080095f3
 8008f68:	08004c25 	.word	0x08004c25
 8008f6c:	08008d19 	.word	0x08008d19

08008f70 <__swbuf_r>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	460e      	mov	r6, r1
 8008f74:	4614      	mov	r4, r2
 8008f76:	4605      	mov	r5, r0
 8008f78:	b118      	cbz	r0, 8008f82 <__swbuf_r+0x12>
 8008f7a:	6a03      	ldr	r3, [r0, #32]
 8008f7c:	b90b      	cbnz	r3, 8008f82 <__swbuf_r+0x12>
 8008f7e:	f7fc fc9b 	bl	80058b8 <__sinit>
 8008f82:	69a3      	ldr	r3, [r4, #24]
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	071a      	lsls	r2, r3, #28
 8008f8a:	d525      	bpl.n	8008fd8 <__swbuf_r+0x68>
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	b31b      	cbz	r3, 8008fd8 <__swbuf_r+0x68>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	6922      	ldr	r2, [r4, #16]
 8008f94:	b2f6      	uxtb	r6, r6
 8008f96:	1a98      	subs	r0, r3, r2
 8008f98:	6963      	ldr	r3, [r4, #20]
 8008f9a:	4637      	mov	r7, r6
 8008f9c:	4283      	cmp	r3, r0
 8008f9e:	dc04      	bgt.n	8008faa <__swbuf_r+0x3a>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f7ff fa30 	bl	8008408 <_fflush_r>
 8008fa8:	b9e0      	cbnz	r0, 8008fe4 <__swbuf_r+0x74>
 8008faa:	68a3      	ldr	r3, [r4, #8]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	60a3      	str	r3, [r4, #8]
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	6022      	str	r2, [r4, #0]
 8008fb6:	701e      	strb	r6, [r3, #0]
 8008fb8:	6962      	ldr	r2, [r4, #20]
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d004      	beq.n	8008fca <__swbuf_r+0x5a>
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	07db      	lsls	r3, r3, #31
 8008fc4:	d506      	bpl.n	8008fd4 <__swbuf_r+0x64>
 8008fc6:	2e0a      	cmp	r6, #10
 8008fc8:	d104      	bne.n	8008fd4 <__swbuf_r+0x64>
 8008fca:	4621      	mov	r1, r4
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f7ff fa1b 	bl	8008408 <_fflush_r>
 8008fd2:	b938      	cbnz	r0, 8008fe4 <__swbuf_r+0x74>
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f000 f806 	bl	8008fec <__swsetup_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d0d5      	beq.n	8008f90 <__swbuf_r+0x20>
 8008fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe8:	e7f4      	b.n	8008fd4 <__swbuf_r+0x64>
	...

08008fec <__swsetup_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4b2a      	ldr	r3, [pc, #168]	; (8009098 <__swsetup_r+0xac>)
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	b118      	cbz	r0, 8009000 <__swsetup_r+0x14>
 8008ff8:	6a03      	ldr	r3, [r0, #32]
 8008ffa:	b90b      	cbnz	r3, 8009000 <__swsetup_r+0x14>
 8008ffc:	f7fc fc5c 	bl	80058b8 <__sinit>
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009006:	0718      	lsls	r0, r3, #28
 8009008:	d422      	bmi.n	8009050 <__swsetup_r+0x64>
 800900a:	06d9      	lsls	r1, r3, #27
 800900c:	d407      	bmi.n	800901e <__swsetup_r+0x32>
 800900e:	2309      	movs	r3, #9
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009016:	f04f 30ff 	mov.w	r0, #4294967295
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	e034      	b.n	8009088 <__swsetup_r+0x9c>
 800901e:	0758      	lsls	r0, r3, #29
 8009020:	d512      	bpl.n	8009048 <__swsetup_r+0x5c>
 8009022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009024:	b141      	cbz	r1, 8009038 <__swsetup_r+0x4c>
 8009026:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800902a:	4299      	cmp	r1, r3
 800902c:	d002      	beq.n	8009034 <__swsetup_r+0x48>
 800902e:	4628      	mov	r0, r5
 8009030:	f7fd fbda 	bl	80067e8 <_free_r>
 8009034:	2300      	movs	r3, #0
 8009036:	6363      	str	r3, [r4, #52]	; 0x34
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	2300      	movs	r3, #0
 8009042:	6063      	str	r3, [r4, #4]
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f043 0308 	orr.w	r3, r3, #8
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	6923      	ldr	r3, [r4, #16]
 8009052:	b94b      	cbnz	r3, 8009068 <__swsetup_r+0x7c>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800905a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905e:	d003      	beq.n	8009068 <__swsetup_r+0x7c>
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f883 	bl	800916e <__smakebuf_r>
 8009068:	89a0      	ldrh	r0, [r4, #12]
 800906a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800906e:	f010 0301 	ands.w	r3, r0, #1
 8009072:	d00a      	beq.n	800908a <__swsetup_r+0x9e>
 8009074:	2300      	movs	r3, #0
 8009076:	60a3      	str	r3, [r4, #8]
 8009078:	6963      	ldr	r3, [r4, #20]
 800907a:	425b      	negs	r3, r3
 800907c:	61a3      	str	r3, [r4, #24]
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	b943      	cbnz	r3, 8009094 <__swsetup_r+0xa8>
 8009082:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009086:	d1c4      	bne.n	8009012 <__swsetup_r+0x26>
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	0781      	lsls	r1, r0, #30
 800908c:	bf58      	it	pl
 800908e:	6963      	ldrpl	r3, [r4, #20]
 8009090:	60a3      	str	r3, [r4, #8]
 8009092:	e7f4      	b.n	800907e <__swsetup_r+0x92>
 8009094:	2000      	movs	r0, #0
 8009096:	e7f7      	b.n	8009088 <__swsetup_r+0x9c>
 8009098:	20000074 	.word	0x20000074

0800909c <_raise_r>:
 800909c:	291f      	cmp	r1, #31
 800909e:	b538      	push	{r3, r4, r5, lr}
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	d904      	bls.n	80090b0 <_raise_r+0x14>
 80090a6:	2316      	movs	r3, #22
 80090a8:	6003      	str	r3, [r0, #0]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80090b2:	b112      	cbz	r2, 80090ba <_raise_r+0x1e>
 80090b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090b8:	b94b      	cbnz	r3, 80090ce <_raise_r+0x32>
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 f830 	bl	8009120 <_getpid_r>
 80090c0:	462a      	mov	r2, r5
 80090c2:	4601      	mov	r1, r0
 80090c4:	4620      	mov	r0, r4
 80090c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ca:	f000 b817 	b.w	80090fc <_kill_r>
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d00a      	beq.n	80090e8 <_raise_r+0x4c>
 80090d2:	1c59      	adds	r1, r3, #1
 80090d4:	d103      	bne.n	80090de <_raise_r+0x42>
 80090d6:	2316      	movs	r3, #22
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	2001      	movs	r0, #1
 80090dc:	e7e7      	b.n	80090ae <_raise_r+0x12>
 80090de:	2400      	movs	r4, #0
 80090e0:	4628      	mov	r0, r5
 80090e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090e6:	4798      	blx	r3
 80090e8:	2000      	movs	r0, #0
 80090ea:	e7e0      	b.n	80090ae <_raise_r+0x12>

080090ec <raise>:
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <raise+0xc>)
 80090ee:	4601      	mov	r1, r0
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	f7ff bfd3 	b.w	800909c <_raise_r>
 80090f6:	bf00      	nop
 80090f8:	20000074 	.word	0x20000074

080090fc <_kill_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	2300      	movs	r3, #0
 8009100:	4d06      	ldr	r5, [pc, #24]	; (800911c <_kill_r+0x20>)
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	4611      	mov	r1, r2
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	f7f8 f8bc 	bl	8001286 <_kill>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	d102      	bne.n	8009118 <_kill_r+0x1c>
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	b103      	cbz	r3, 8009118 <_kill_r+0x1c>
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	2000047c 	.word	0x2000047c

08009120 <_getpid_r>:
 8009120:	f7f8 b8aa 	b.w	8001278 <_getpid>

08009124 <__swhatbuf_r>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	460c      	mov	r4, r1
 8009128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912c:	4615      	mov	r5, r2
 800912e:	2900      	cmp	r1, #0
 8009130:	461e      	mov	r6, r3
 8009132:	b096      	sub	sp, #88	; 0x58
 8009134:	da0c      	bge.n	8009150 <__swhatbuf_r+0x2c>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	2100      	movs	r1, #0
 800913a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800913e:	bf0c      	ite	eq
 8009140:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009144:	2340      	movne	r3, #64	; 0x40
 8009146:	2000      	movs	r0, #0
 8009148:	6031      	str	r1, [r6, #0]
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	b016      	add	sp, #88	; 0x58
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	466a      	mov	r2, sp
 8009152:	f000 f849 	bl	80091e8 <_fstat_r>
 8009156:	2800      	cmp	r0, #0
 8009158:	dbed      	blt.n	8009136 <__swhatbuf_r+0x12>
 800915a:	9901      	ldr	r1, [sp, #4]
 800915c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009160:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009164:	4259      	negs	r1, r3
 8009166:	4159      	adcs	r1, r3
 8009168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800916c:	e7eb      	b.n	8009146 <__swhatbuf_r+0x22>

0800916e <__smakebuf_r>:
 800916e:	898b      	ldrh	r3, [r1, #12]
 8009170:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009172:	079d      	lsls	r5, r3, #30
 8009174:	4606      	mov	r6, r0
 8009176:	460c      	mov	r4, r1
 8009178:	d507      	bpl.n	800918a <__smakebuf_r+0x1c>
 800917a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800917e:	6023      	str	r3, [r4, #0]
 8009180:	6123      	str	r3, [r4, #16]
 8009182:	2301      	movs	r3, #1
 8009184:	6163      	str	r3, [r4, #20]
 8009186:	b002      	add	sp, #8
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	466a      	mov	r2, sp
 800918c:	ab01      	add	r3, sp, #4
 800918e:	f7ff ffc9 	bl	8009124 <__swhatbuf_r>
 8009192:	9900      	ldr	r1, [sp, #0]
 8009194:	4605      	mov	r5, r0
 8009196:	4630      	mov	r0, r6
 8009198:	f7fd fb96 	bl	80068c8 <_malloc_r>
 800919c:	b948      	cbnz	r0, 80091b2 <__smakebuf_r+0x44>
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	059a      	lsls	r2, r3, #22
 80091a4:	d4ef      	bmi.n	8009186 <__smakebuf_r+0x18>
 80091a6:	f023 0303 	bic.w	r3, r3, #3
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	e7e3      	b.n	800917a <__smakebuf_r+0xc>
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	6020      	str	r0, [r4, #0]
 80091b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	9b00      	ldr	r3, [sp, #0]
 80091be:	6120      	str	r0, [r4, #16]
 80091c0:	6163      	str	r3, [r4, #20]
 80091c2:	9b01      	ldr	r3, [sp, #4]
 80091c4:	b15b      	cbz	r3, 80091de <__smakebuf_r+0x70>
 80091c6:	4630      	mov	r0, r6
 80091c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091cc:	f000 f81e 	bl	800920c <_isatty_r>
 80091d0:	b128      	cbz	r0, 80091de <__smakebuf_r+0x70>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f023 0303 	bic.w	r3, r3, #3
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	431d      	orrs	r5, r3
 80091e2:	81a5      	strh	r5, [r4, #12]
 80091e4:	e7cf      	b.n	8009186 <__smakebuf_r+0x18>
	...

080091e8 <_fstat_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	2300      	movs	r3, #0
 80091ec:	4d06      	ldr	r5, [pc, #24]	; (8009208 <_fstat_r+0x20>)
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	4611      	mov	r1, r2
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	f7f8 f8a4 	bl	8001342 <_fstat>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d102      	bne.n	8009204 <_fstat_r+0x1c>
 80091fe:	682b      	ldr	r3, [r5, #0]
 8009200:	b103      	cbz	r3, 8009204 <_fstat_r+0x1c>
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	2000047c 	.word	0x2000047c

0800920c <_isatty_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	2300      	movs	r3, #0
 8009210:	4d05      	ldr	r5, [pc, #20]	; (8009228 <_isatty_r+0x1c>)
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	f7f8 f8a2 	bl	8001360 <_isatty>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_isatty_r+0x1a>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_isatty_r+0x1a>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	2000047c 	.word	0x2000047c

0800922c <_init>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr

08009238 <_fini>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	bf00      	nop
 800923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923e:	bc08      	pop	{r3}
 8009240:	469e      	mov	lr, r3
 8009242:	4770      	bx	lr
