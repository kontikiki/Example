
SSD1306_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c44  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a4  080051a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ac  080051ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000960  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000970  20000970  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049c28  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003317  00000000  00000000  00069c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f98  00000000  00000000  0006cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002dd0  00000000  00000000  0006ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cee  00000000  00000000  00072ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019539  00000000  00000000  000989d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5c41  00000000  00000000  000b1f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a7b50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d10c  00000000  00000000  001a7ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ddc 	.word	0x08004ddc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004ddc 	.word	0x08004ddc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 fc95 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f91d 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 fa17 	bl	80011c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d92:	f000 f989 	bl	80010a8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000d96:	f000 f9dd 	bl	8001154 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	; (8000f90 <main+0x210>)
 8000d9c:	4a7d      	ldr	r2, [pc, #500]	; (8000f94 <main+0x214>)
 8000d9e:	497e      	ldr	r1, [pc, #504]	; (8000f98 <main+0x218>)
 8000da0:	487e      	ldr	r0, [pc, #504]	; (8000f9c <main+0x21c>)
 8000da2:	f002 fbc7 	bl	8003534 <u8g2_Setup_ssd1306_128x64_noname_f>

   u8g2_InitDisplay(&u8g2);
 8000da6:	487d      	ldr	r0, [pc, #500]	; (8000f9c <main+0x21c>)
 8000da8:	f003 ff4e 	bl	8004c48 <u8x8_InitDisplay>
   u8g2_SetPowerSave(&u8g2, 0);
 8000dac:	2100      	movs	r1, #0
 8000dae:	487b      	ldr	r0, [pc, #492]	; (8000f9c <main+0x21c>)
 8000db0:	f003 ff59 	bl	8004c66 <u8x8_SetPowerSave>
  /* USER CODE END 2 */

  /* Infinite loop */
   point[0].x=0;
 8000db4:	4b7a      	ldr	r3, [pc, #488]	; (8000fa0 <main+0x220>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
     point[0].y=127;
 8000dba:	4b79      	ldr	r3, [pc, #484]	; (8000fa0 <main+0x220>)
 8000dbc:	227f      	movs	r2, #127	; 0x7f
 8000dbe:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  u8g2_FirstPage(&u8g2);
 8000dc0:	4876      	ldr	r0, [pc, #472]	; (8000f9c <main+0x21c>)
 8000dc2:	f002 fb64 	bl	800348e <u8g2_FirstPage>
	  point[0].x=0;
 8000dc6:	4b76      	ldr	r3, [pc, #472]	; (8000fa0 <main+0x220>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
	  point[0].y=point[127].y;
 8000dcc:	4b74      	ldr	r3, [pc, #464]	; (8000fa0 <main+0x220>)
 8000dce:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8000dd2:	4a73      	ldr	r2, [pc, #460]	; (8000fa0 <main+0x220>)
 8000dd4:	6053      	str	r3, [r2, #4]

	  do{
		  HAL_ADC_Start(&hadc1);
 8000dd6:	4873      	ldr	r0, [pc, #460]	; (8000fa4 <main+0x224>)
 8000dd8:	f000 fd46 	bl	8001868 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	4870      	ldr	r0, [pc, #448]	; (8000fa4 <main+0x224>)
 8000de2:	f000 fe13 	bl	8001a0c <HAL_ADC_PollForConversion>
		  adcVal = HAL_ADC_GetValue(&hadc1);
 8000de6:	486f      	ldr	r0, [pc, #444]	; (8000fa4 <main+0x224>)
 8000de8:	f000 fe9b 	bl	8001b22 <HAL_ADC_GetValue>
 8000dec:	ee07 0a90 	vmov	s15, r0
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	4b6c      	ldr	r3, [pc, #432]	; (8000fa8 <main+0x228>)
 8000df6:	edc3 7a00 	vstr	s15, [r3]

		  float voltage_y=adcVal*3.3/4096.0;
 8000dfa:	4b6b      	ldr	r3, [pc, #428]	; (8000fa8 <main+0x228>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb5a 	bl	80004b8 <__aeabi_f2d>
 8000e04:	a360      	add	r3, pc, #384	; (adr r3, 8000f88 <main+0x208>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	f7ff fbad 	bl	8000568 <__aeabi_dmul>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	4b64      	ldr	r3, [pc, #400]	; (8000fac <main+0x22c>)
 8000e1c:	f7ff fcce 	bl	80007bc <__aeabi_ddiv>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f7ff fdd8 	bl	80009dc <__aeabi_d2f>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	61bb      	str	r3, [r7, #24]
		  int char_y=100.0*voltage_y;
 8000e30:	69b8      	ldr	r0, [r7, #24]
 8000e32:	f7ff fb41 	bl	80004b8 <__aeabi_f2d>
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <main+0x230>)
 8000e3c:	f7ff fb94 	bl	8000568 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fda0 	bl	800098c <__aeabi_d2iz>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	617b      	str	r3, [r7, #20]
		  int hundred_y=char_y/100;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <main+0x234>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1152      	asrs	r2, r2, #5
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	613b      	str	r3, [r7, #16]
		  int ten_y=char_y/10-(hundred_y*10);
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4a55      	ldr	r2, [pc, #340]	; (8000fb8 <main+0x238>)
 8000e64:	fb82 1203 	smull	r1, r2, r2, r3
 8000e68:	1092      	asrs	r2, r2, #2
 8000e6a:	17db      	asrs	r3, r3, #31
 8000e6c:	1ad2      	subs	r2, r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	f06f 0109 	mvn.w	r1, #9
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
		  int one_y=char_y-hundred_y*100-ten_y*10;
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000e82:	fb03 f202 	mul.w	r2, r3, r2
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	441a      	add	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f06f 0109 	mvn.w	r1, #9
 8000e90:	fb01 f303 	mul.w	r3, r1, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]

		  buffer[0]='0'+hundred_y;
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	3330      	adds	r3, #48	; 0x30
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <main+0x23c>)
 8000ea2:	701a      	strb	r2, [r3, #0]
		  buffer[1]='.';
 8000ea4:	4b45      	ldr	r3, [pc, #276]	; (8000fbc <main+0x23c>)
 8000ea6:	222e      	movs	r2, #46	; 0x2e
 8000ea8:	705a      	strb	r2, [r3, #1]
		  buffer[2]='0'+ten_y;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3330      	adds	r3, #48	; 0x30
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <main+0x23c>)
 8000eb4:	709a      	strb	r2, [r3, #2]
		  buffer[3]='0'+one_y;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3330      	adds	r3, #48	; 0x30
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <main+0x23c>)
 8000ec0:	70da      	strb	r2, [r3, #3]

		  u8g2_SetFont(&u8g2,u8g2_font_5x7_tr);
 8000ec2:	493f      	ldr	r1, [pc, #252]	; (8000fc0 <main+0x240>)
 8000ec4:	4835      	ldr	r0, [pc, #212]	; (8000f9c <main+0x21c>)
 8000ec6:	f002 ffd5 	bl	8003e74 <u8g2_SetFont>
		  u8g2_DrawStrX2(&u8g2,0,15,buffer);
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <main+0x23c>)
 8000ecc:	220f      	movs	r2, #15
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4832      	ldr	r0, [pc, #200]	; (8000f9c <main+0x21c>)
 8000ed2:	f002 ff2d 	bl	8003d30 <u8g2_DrawStrX2>

		  int pixel_y=(int)adcVal*64/4096;
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <main+0x228>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee0:	ee17 3a90 	vmov	r3, s15
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	da00      	bge.n	8000eea <main+0x16a>
 8000ee8:	333f      	adds	r3, #63	; 0x3f
 8000eea:	119b      	asrs	r3, r3, #6
 8000eec:	607b      	str	r3, [r7, #4]
		  point[i].x=i;
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <main+0x244>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <main+0x244>)
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	492a      	ldr	r1, [pc, #168]	; (8000fa0 <main+0x220>)
 8000ef8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		  point[i].y=64-pixel_y;
 8000efc:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <main+0x244>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8000f06:	4926      	ldr	r1, [pc, #152]	; (8000fa0 <main+0x220>)
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	605a      	str	r2, [r3, #4]

		  for(int j=0;j<i;j++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e01f      	b.n	8000f54 <main+0x1d4>
		  {
		  	  u8g2_DrawLine(&u8g2,point[j].x,point[j].y,point[j+1].x,point[j+1].y);
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <main+0x220>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <main+0x220>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <main+0x220>)
 8000f30:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8000f34:	b298      	uxth	r0, r3
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4c19      	ldr	r4, [pc, #100]	; (8000fa0 <main+0x220>)
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4423      	add	r3, r4
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4603      	mov	r3, r0
 8000f48:	4814      	ldr	r0, [pc, #80]	; (8000f9c <main+0x21c>)
 8000f4a:	f003 f938 	bl	80041be <u8g2_DrawLine>
		  for(int j=0;j<i;j++)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3301      	adds	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <main+0x244>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbda      	blt.n	8000f14 <main+0x194>
		  }
		  i++;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <main+0x244>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <main+0x244>)
 8000f66:	6013      	str	r3, [r2, #0]

		  if(i==128)
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <main+0x244>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b80      	cmp	r3, #128	; 0x80
 8000f6e:	d103      	bne.n	8000f78 <main+0x1f8>
		 	  	  {
		 	  		  i=0;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <main+0x244>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
		 	  		  break;
 8000f76:	e006      	b.n	8000f86 <main+0x206>
		 	  	  }

	  }while(u8g2_NextPage(&u8g2));
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <main+0x21c>)
 8000f7a:	f002 fa9c 	bl	80034b6 <u8g2_NextPage>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f47f af28 	bne.w	8000dd6 <main+0x56>
	  u8g2_FirstPage(&u8g2);
 8000f86:	e71b      	b.n	8000dc0 <main+0x40>
 8000f88:	66666666 	.word	0x66666666
 8000f8c:	400a6666 	.word	0x400a6666
 8000f90:	08001485 	.word	0x08001485
 8000f94:	08001579 	.word	0x08001579
 8000f98:	08005128 	.word	0x08005128
 8000f9c:	200004d8 	.word	0x200004d8
 8000fa0:	200000cc 	.word	0x200000cc
 8000fa4:	2000002c 	.word	0x2000002c
 8000fa8:	200004cc 	.word	0x200004cc
 8000fac:	40b00000 	.word	0x40b00000
 8000fb0:	40590000 	.word	0x40590000
 8000fb4:	51eb851f 	.word	0x51eb851f
 8000fb8:	66666667 	.word	0x66666667
 8000fbc:	200004d0 	.word	0x200004d0
 8000fc0:	08004e04 	.word	0x08004e04
 8000fc4:	20000000 	.word	0x20000000

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	; 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	; 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 fef8 	bl	8004dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <SystemClock_Config+0xd8>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <SystemClock_Config+0xd8>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <SystemClock_Config+0xd8>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <SystemClock_Config+0xdc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <SystemClock_Config+0xdc>)
 8001012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <SystemClock_Config+0xdc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001024:	2301      	movs	r3, #1
 8001026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102e:	2302      	movs	r3, #2
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001032:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001038:	2304      	movs	r3, #4
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800103c:	23b4      	movs	r3, #180	; 0xb4
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001040:	2302      	movs	r3, #2
 8001042:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001044:	2304      	movs	r3, #4
 8001046:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fa9f 	bl	8002590 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001058:	f000 f910 	bl	800127c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800105c:	f001 fa48 	bl	80024f0 <HAL_PWREx_EnableOverDrive>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001066:	f000 f909 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2302      	movs	r3, #2
 8001070:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001076:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800107a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2105      	movs	r1, #5
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fcf9 	bl	8002a80 <HAL_RCC_ClockConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001094:	f000 f8f2 	bl	800127c <Error_Handler>
  }
}
 8001098:	bf00      	nop
 800109a:	3750      	adds	r7, #80	; 0x50
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010bc:	4a23      	ldr	r2, [pc, #140]	; (800114c <MX_ADC1_Init+0xa4>)
 80010be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <MX_ADC1_Init+0xa8>)
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_ADC1_Init+0xa0>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_ADC1_Init+0xa0>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_ADC1_Init+0xa0>)
 800110a:	2201      	movs	r2, #1
 800110c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <MX_ADC1_Init+0xa0>)
 8001110:	f000 fb66 	bl	80017e0 <HAL_ADC_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800111a:	f000 f8af 	bl	800127c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800111e:	2303      	movs	r3, #3
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_ADC1_Init+0xa0>)
 8001130:	f000 fd04 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800113a:	f000 f89f 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000002c 	.word	0x2000002c
 800114c:	40012000 	.word	0x40012000
 8001150:	0f000001 	.word	0x0f000001

08001154 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI2_Init+0x64>)
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <MX_SPI2_Init+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001164:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI2_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_SPI2_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001188:	2210      	movs	r2, #16
 800118a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI2_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI2_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_SPI2_Init+0x64>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_SPI2_Init+0x64>)
 80011a6:	f001 fe57 	bl	8002e58 <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011b0:	f000 f864 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000074 	.word	0x20000074
 80011bc:	40003800 	.word	0x40003800

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_GPIO_Init+0xb4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a25      	ldr	r2, [pc, #148]	; (8001274 <MX_GPIO_Init+0xb4>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_GPIO_Init+0xb4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_GPIO_Init+0xb4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <MX_GPIO_Init+0xb4>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_GPIO_Init+0xb4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_GPIO_Init+0xb4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <MX_GPIO_Init+0xb4>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_GPIO_Init+0xb4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_GPIO_Init+0xb4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <MX_GPIO_Init+0xb4>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_GPIO_Init+0xb4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2107      	movs	r1, #7
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <MX_GPIO_Init+0xb8>)
 800124c:	f001 f936 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin;
 8001250:	2307      	movs	r3, #7
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001258:	2301      	movs	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125c:	2302      	movs	r3, #2
 800125e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_GPIO_Init+0xb8>)
 8001268:	f000 ff7c 	bl	8002164 <HAL_GPIO_Init>

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	40020800 	.word	0x40020800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0x7c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d127      	bne.n	800134a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_ADC_MspInit+0x80>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <HAL_ADC_MspInit+0x80>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_ADC_MspInit+0x80>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_ADC_MspInit+0x80>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_ADC_MspInit+0x80>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_ADC_MspInit+0x80>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001332:	2308      	movs	r3, #8
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_ADC_MspInit+0x84>)
 8001346:	f000 ff0d 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40012000 	.word	0x40012000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a28      	ldr	r2, [pc, #160]	; (8001420 <HAL_SPI_MspInit+0xc0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d14a      	bne.n	8001418 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a26      	ldr	r2, [pc, #152]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_SPI_MspInit+0xc4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013d6:	2308      	movs	r3, #8
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013e6:	2305      	movs	r3, #5
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <HAL_SPI_MspInit+0xc8>)
 80013f2:	f000 feb7 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001408:	2305      	movs	r3, #5
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <HAL_SPI_MspInit+0xcc>)
 8001414:	f000 fea6 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40003800 	.word	0x40003800
 8001424:	40023800 	.word	0x40023800
 8001428:	40020800 	.word	0x40020800
 800142c:	40020400 	.word	0x40020400

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147c:	f000 f96c 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	72fb      	strb	r3, [r7, #11]
 8001492:	4613      	mov	r3, r2
 8001494:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	3b28      	subs	r3, #40	; 0x28
 800149a:	2b23      	cmp	r3, #35	; 0x23
 800149c:	d864      	bhi.n	8001568 <u8x8_stm32_gpio_and_delay+0xe4>
 800149e:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <u8x8_stm32_gpio_and_delay+0x20>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	08001569 	.word	0x08001569
 80014a8:	08001535 	.word	0x08001535
 80014ac:	08001569 	.word	0x08001569
 80014b0:	08001569 	.word	0x08001569
 80014b4:	08001569 	.word	0x08001569
 80014b8:	08001569 	.word	0x08001569
 80014bc:	08001569 	.word	0x08001569
 80014c0:	08001569 	.word	0x08001569
 80014c4:	08001569 	.word	0x08001569
 80014c8:	08001569 	.word	0x08001569
 80014cc:	08001569 	.word	0x08001569
 80014d0:	08001569 	.word	0x08001569
 80014d4:	08001569 	.word	0x08001569
 80014d8:	08001569 	.word	0x08001569
 80014dc:	08001569 	.word	0x08001569
 80014e0:	08001569 	.word	0x08001569
 80014e4:	08001569 	.word	0x08001569
 80014e8:	08001569 	.word	0x08001569
 80014ec:	08001569 	.word	0x08001569
 80014f0:	08001569 	.word	0x08001569
 80014f4:	08001569 	.word	0x08001569
 80014f8:	08001569 	.word	0x08001569
 80014fc:	08001569 	.word	0x08001569
 8001500:	08001569 	.word	0x08001569
 8001504:	08001569 	.word	0x08001569
 8001508:	08001569 	.word	0x08001569
 800150c:	08001569 	.word	0x08001569
 8001510:	08001569 	.word	0x08001569
 8001514:	08001569 	.word	0x08001569
 8001518:	08001569 	.word	0x08001569
 800151c:	08001569 	.word	0x08001569
 8001520:	08001569 	.word	0x08001569
 8001524:	08001569 	.word	0x08001569
 8001528:	0800153f 	.word	0x0800153f
 800152c:	0800154d 	.word	0x0800154d
 8001530:	0800155b 	.word	0x0800155b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8001534:	7abb      	ldrb	r3, [r7, #10]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f92e 	bl	8001798 <HAL_Delay>
		break;
 800153c:	e014      	b.n	8001568 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 800153e:	7abb      	ldrb	r3, [r7, #10]
 8001540:	461a      	mov	r2, r3
 8001542:	2104      	movs	r1, #4
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001546:	f000 ffb9 	bl	80024bc <HAL_GPIO_WritePin>
		break;
 800154a:	e00d      	b.n	8001568 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 800154c:	7abb      	ldrb	r3, [r7, #10]
 800154e:	461a      	mov	r2, r3
 8001550:	2102      	movs	r1, #2
 8001552:	4808      	ldr	r0, [pc, #32]	; (8001574 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001554:	f000 ffb2 	bl	80024bc <HAL_GPIO_WritePin>
		break;
 8001558:	e006      	b.n	8001568 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 800155a:	7abb      	ldrb	r3, [r7, #10]
 800155c:	461a      	mov	r2, r3
 800155e:	2101      	movs	r1, #1
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001562:	f000 ffab 	bl	80024bc <HAL_GPIO_WritePin>
		break;
 8001566:	bf00      	nop
	}
	return 1;
 8001568:	2301      	movs	r3, #1
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020800 	.word	0x40020800

08001578 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	72fb      	strb	r3, [r7, #11]
 8001586:	4613      	mov	r3, r2
 8001588:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	3b14      	subs	r3, #20
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d847      	bhi.n	8001622 <u8x8_byte_stm32_hw_spi+0xaa>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <u8x8_byte_stm32_hw_spi+0x20>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	08001627 	.word	0x08001627
 800159c:	08001623 	.word	0x08001623
 80015a0:	08001623 	.word	0x08001623
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	080015f3 	.word	0x080015f3
 80015ac:	0800160b 	.word	0x0800160b
 80015b0:	08001623 	.word	0x08001623
 80015b4:	08001623 	.word	0x08001623
 80015b8:	08001623 	.word	0x08001623
 80015bc:	08001623 	.word	0x08001623
 80015c0:	08001623 	.word	0x08001623
 80015c4:	08001623 	.word	0x08001623
 80015c8:	080015e5 	.word	0x080015e5
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80015cc:	7abb      	ldrb	r3, [r7, #10]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4818      	ldr	r0, [pc, #96]	; (8001638 <u8x8_byte_stm32_hw_spi+0xc0>)
 80015d6:	f001 fcc8 	bl	8002f6a <HAL_SPI_Transmit>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d024      	beq.n	800162a <u8x8_byte_stm32_hw_spi+0xb2>
 80015e0:	2300      	movs	r3, #0
 80015e2:	e024      	b.n	800162e <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80015e4:	7abb      	ldrb	r3, [r7, #10]
 80015e6:	461a      	mov	r2, r3
 80015e8:	214a      	movs	r1, #74	; 0x4a
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f003 fb5b 	bl	8004ca6 <u8x8_gpio_call>
		break;
 80015f0:	e01c      	b.n	800162c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	2149      	movs	r1, #73	; 0x49
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f003 fb52 	bl	8004ca6 <u8x8_gpio_call>
		HAL_Delay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f000 f8c8 	bl	8001798 <HAL_Delay>
		break;
 8001608:	e010      	b.n	800162c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f000 f8c4 	bl	8001798 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	461a      	mov	r2, r3
 8001618:	2149      	movs	r1, #73	; 0x49
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f003 fb43 	bl	8004ca6 <u8x8_gpio_call>
		break;
 8001620:	e004      	b.n	800162c <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8001622:	2300      	movs	r3, #0
 8001624:	e003      	b.n	800162e <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8001626:	bf00      	nop
 8001628:	e000      	b.n	800162c <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 800162a:	bf00      	nop
	}
	return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000074 	.word	0x20000074

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001666:	f000 f813 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f003 fb8b 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fb87 	bl	8000d80 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001674:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001680:	080051b4 	.word	0x080051b4
  ldr r2, =_sbss
 8001684:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001688:	20000970 	.word	0x20000970

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_Init+0x40>)
 80016be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_Init+0x40>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_Init+0x40>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 fd0d 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f000 f808 	bl	80016f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fdce 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x54>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0x58>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fd17 	bl	800214a <HAL_SYSTICK_Config>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00e      	b.n	8001744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d80a      	bhi.n	8001742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f000 fced 	bl	8002112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001738:	4a06      	ldr	r2, [pc, #24]	; (8001754 <HAL_InitTick+0x5c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000004 	.word	0x20000004
 8001750:	2000000c 	.word	0x2000000c
 8001754:	20000008 	.word	0x20000008

08001758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x20>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_IncTick+0x24>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000000c 	.word	0x2000000c
 800177c:	2000056c 	.word	0x2000056c

08001780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2000056c 	.word	0x2000056c

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff ffee 	bl	8001780 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017be:	bf00      	nop
 80017c0:	f7ff ffde 	bl	8001780 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000000c 	.word	0x2000000c

080017e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e033      	b.n	800185e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fd6a 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001826:	f023 0302 	bic.w	r3, r3, #2
 800182a:	f043 0202 	orr.w	r2, r3, #2
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fab4 	bl	8001da0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
 800184e:	e001      	b.n	8001854 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Start+0x1a>
 800187e:	2302      	movs	r3, #2
 8001880:	e0b2      	b.n	80019e8 <HAL_ADC_Start+0x180>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d018      	beq.n	80018ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a8:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_ADC_Start+0x18c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a52      	ldr	r2, [pc, #328]	; (80019f8 <HAL_ADC_Start+0x190>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9a      	lsrs	r2, r3, #18
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d17a      	bne.n	80019ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001902:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001916:	d106      	bne.n	8001926 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	f023 0206 	bic.w	r2, r3, #6
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	645a      	str	r2, [r3, #68]	; 0x44
 8001924:	e002      	b.n	800192c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_ADC_Start+0x194>)
 8001936:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001940:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	2b00      	cmp	r3, #0
 800194c:	d12a      	bne.n	80019a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a2b      	ldr	r2, [pc, #172]	; (8001a00 <HAL_ADC_Start+0x198>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d015      	beq.n	8001984 <HAL_ADC_Start+0x11c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <HAL_ADC_Start+0x19c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d105      	bne.n	800196e <HAL_ADC_Start+0x106>
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_ADC_Start+0x194>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <HAL_ADC_Start+0x1a0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d136      	bne.n	80019e6 <HAL_ADC_Start+0x17e>
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_ADC_Start+0x194>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d130      	bne.n	80019e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d129      	bne.n	80019e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	e020      	b.n	80019e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <HAL_ADC_Start+0x198>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d11b      	bne.n	80019e6 <HAL_ADC_Start+0x17e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d114      	bne.n	80019e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	e00b      	b.n	80019e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f043 0210 	orr.w	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000004 	.word	0x20000004
 80019f8:	431bde83 	.word	0x431bde83
 80019fc:	40012300 	.word	0x40012300
 8001a00:	40012000 	.word	0x40012000
 8001a04:	40012100 	.word	0x40012100
 8001a08:	40012200 	.word	0x40012200

08001a0c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a28:	d113      	bne.n	8001a52 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a38:	d10b      	bne.n	8001a52 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f043 0220 	orr.w	r2, r3, #32
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e063      	b.n	8001b1a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a52:	f7ff fe95 	bl	8001780 <HAL_GetTick>
 8001a56:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a58:	e021      	b.n	8001a9e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d01d      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <HAL_ADC_PollForConversion+0x6c>
 8001a68:	f7ff fe8a 	bl	8001780 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d212      	bcs.n	8001a9e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d00b      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e03d      	b.n	8001b1a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d1d6      	bne.n	8001a5a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0212 	mvn.w	r2, #18
 8001ab4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d123      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d11f      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d111      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1c>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e113      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x244>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d925      	bls.n	8001bb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	2207      	movs	r2, #7
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43da      	mvns	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68d9      	ldr	r1, [r3, #12]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4403      	add	r3, r0
 8001ba6:	3b1e      	subs	r3, #30
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	e022      	b.n	8001bfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2207      	movs	r2, #7
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6919      	ldr	r1, [r3, #16]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4403      	add	r3, r0
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d824      	bhi.n	8001c4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b05      	subs	r3, #5
 8001c14:	221f      	movs	r2, #31
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b05      	subs	r3, #5
 8001c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4a:	e04c      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	d824      	bhi.n	8001c9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b23      	subs	r3, #35	; 0x23
 8001c66:	221f      	movs	r2, #31
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b23      	subs	r3, #35	; 0x23
 8001c90:	fa00 f203 	lsl.w	r2, r0, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9c:	e023      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b41      	subs	r3, #65	; 0x41
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b41      	subs	r3, #65	; 0x41
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_ADC_ConfigChannel+0x250>)
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_ADC_ConfigChannel+0x254>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d10f      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1d8>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d10b      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_ADC_ConfigChannel+0x254>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x23a>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_ADC_ConfigChannel+0x258>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d003      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x1f4>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b11      	cmp	r3, #17
 8001d2e:	d122      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_ADC_ConfigChannel+0x258>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d111      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_ADC_ConfigChannel+0x25c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_ADC_ConfigChannel+0x260>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	0c9a      	lsrs	r2, r3, #18
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40012300 	.word	0x40012300
 8001d90:	40012000 	.word	0x40012000
 8001d94:	10000012 	.word	0x10000012
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	431bde83 	.word	0x431bde83

08001da0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da8:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <ADC_Init+0x1f0>)
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	021a      	lsls	r2, r3, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	4a58      	ldr	r2, [pc, #352]	; (8001f94 <ADC_Init+0x1f4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6899      	ldr	r1, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	e00f      	b.n	8001e9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0202 	bic.w	r2, r2, #2
 8001eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7e1b      	ldrb	r3, [r3, #24]
 8001eb8:	005a      	lsls	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	035a      	lsls	r2, r3, #13
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	e007      	b.n	8001f14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	051a      	lsls	r2, r3, #20
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f56:	025a      	lsls	r2, r3, #9
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	029a      	lsls	r2, r3, #10
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	609a      	str	r2, [r3, #8]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40012300 	.word	0x40012300
 8001f94:	0f000001 	.word	0x0f000001

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff47 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff5c 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffb0 	bl	80020b8 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e177      	b.n	8002470 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8166 	bne.w	800246a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80c0 	beq.w	800246a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_GPIO_Init+0x324>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a65      	ldr	r2, [pc, #404]	; (8002488 <HAL_GPIO_Init+0x324>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_GPIO_Init+0x324>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a61      	ldr	r2, [pc, #388]	; (800248c <HAL_GPIO_Init+0x328>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_GPIO_Init+0x32c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d037      	beq.n	80023a2 <HAL_GPIO_Init+0x23e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a57      	ldr	r2, [pc, #348]	; (8002494 <HAL_GPIO_Init+0x330>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d031      	beq.n	800239e <HAL_GPIO_Init+0x23a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a56      	ldr	r2, [pc, #344]	; (8002498 <HAL_GPIO_Init+0x334>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02b      	beq.n	800239a <HAL_GPIO_Init+0x236>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a55      	ldr	r2, [pc, #340]	; (800249c <HAL_GPIO_Init+0x338>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d025      	beq.n	8002396 <HAL_GPIO_Init+0x232>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a54      	ldr	r2, [pc, #336]	; (80024a0 <HAL_GPIO_Init+0x33c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01f      	beq.n	8002392 <HAL_GPIO_Init+0x22e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a53      	ldr	r2, [pc, #332]	; (80024a4 <HAL_GPIO_Init+0x340>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x22a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_GPIO_Init+0x344>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x226>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a51      	ldr	r2, [pc, #324]	; (80024ac <HAL_GPIO_Init+0x348>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x222>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_GPIO_Init+0x34c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x21e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4f      	ldr	r2, [pc, #316]	; (80024b4 <HAL_GPIO_Init+0x350>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x21a>
 800237a:	2309      	movs	r3, #9
 800237c:	e012      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800237e:	230a      	movs	r3, #10
 8002380:	e010      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 8002382:	2308      	movs	r3, #8
 8002384:	e00e      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 8002386:	2307      	movs	r3, #7
 8002388:	e00c      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800238a:	2306      	movs	r3, #6
 800238c:	e00a      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800238e:	2305      	movs	r3, #5
 8002390:	e008      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 8002392:	2304      	movs	r3, #4
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 8002396:	2303      	movs	r3, #3
 8002398:	e004      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800239a:	2302      	movs	r3, #2
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 80023a2:	2300      	movs	r3, #0
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f002 0203 	and.w	r2, r2, #3
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	4093      	lsls	r3, r2
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b4:	4935      	ldr	r1, [pc, #212]	; (800248c <HAL_GPIO_Init+0x328>)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_GPIO_Init+0x354>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e6:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <HAL_GPIO_Init+0x354>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ec:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_GPIO_Init+0x354>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002410:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <HAL_GPIO_Init+0x354>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002416:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_GPIO_Init+0x354>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_GPIO_Init+0x354>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_GPIO_Init+0x354>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <HAL_GPIO_Init+0x354>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3301      	adds	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b0f      	cmp	r3, #15
 8002474:	f67f ae84 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40013800 	.word	0x40013800
 8002490:	40020000 	.word	0x40020000
 8002494:	40020400 	.word	0x40020400
 8002498:	40020800 	.word	0x40020800
 800249c:	40020c00 	.word	0x40020c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40021400 	.word	0x40021400
 80024a8:	40021800 	.word	0x40021800
 80024ac:	40021c00 	.word	0x40021c00
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40022400 	.word	0x40022400
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_PWREx_EnableOverDrive+0x90>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_PWREx_EnableOverDrive+0x90>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_PWREx_EnableOverDrive+0x90>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_PWREx_EnableOverDrive+0x94>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800251c:	f7ff f930 	bl	8001780 <HAL_GetTick>
 8002520:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002522:	e009      	b.n	8002538 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002524:	f7ff f92c 	bl	8001780 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002532:	d901      	bls.n	8002538 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e01f      	b.n	8002578 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <HAL_PWREx_EnableOverDrive+0x98>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d1ee      	bne.n	8002524 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800254c:	f7ff f918 	bl	8001780 <HAL_GetTick>
 8002550:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002552:	e009      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002554:	f7ff f914 	bl	8001780 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002562:	d901      	bls.n	8002568 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e007      	b.n	8002578 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <HAL_PWREx_EnableOverDrive+0x98>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002574:	d1ee      	bne.n	8002554 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	420e0040 	.word	0x420e0040
 8002588:	40007000 	.word	0x40007000
 800258c:	420e0044 	.word	0x420e0044

08002590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e267      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d075      	beq.n	800269a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d00c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d112      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d2:	d10b      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05b      	beq.n	8002698 <HAL_RCC_OscConfig+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d157      	bne.n	8002698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e242      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x74>
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6c      	ldr	r2, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002628:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff f89a 	bl	8001780 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff f896 	bl	8001780 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e207      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xc0>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff f886 	bl	8001780 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff f882 	bl	8001780 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1f3      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0xe8>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1c7      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff f83b 	bl	8001780 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7ff f837 	bl	8001780 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1a8      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4925      	ldr	r1, [pc, #148]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff f81a 	bl	8001780 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002750:	f7ff f816 	bl	8001780 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e187      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d036      	beq.n	80027e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fffa 	bl	8001780 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe fff6 	bl	8001780 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e167      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x200>
 80027ae:	e01b      	b.n	80027e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe ffe3 	bl	8001780 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe ffdf 	bl	8001780 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d907      	bls.n	80027dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e150      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ea      	bne.n	80027be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b77      	ldr	r3, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b74      	ldr	r3, [pc, #464]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a73      	ldr	r2, [pc, #460]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7fe ff9f 	bl	8001780 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7fe ff9b 	bl	8001780 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e10c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x2ea>
 800286c:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a63      	ldr	r2, [pc, #396]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	e01c      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x30c>
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a5e      	ldr	r2, [pc, #376]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800289c:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe ff60 	bl	8001780 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe ff5c 	bl	8001780 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0cb      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCC_OscConfig+0x334>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7fe ff4a 	bl	8001780 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe ff46 	bl	8001780 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0b5      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ee      	bne.n	80028f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a1 	beq.w	8002a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d05c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d141      	bne.n	80029c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe ff1a 	bl	8001780 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe ff16 	bl	8001780 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e087      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	491b      	ldr	r1, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe feef 	bl	8001780 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe feeb 	bl	8001780 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e05c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x416>
 80029c4:	e054      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fed8 	bl	8001780 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe fed4 	bl	8001780 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e045      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x444>
 80029f2:	e03d      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e038      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d028      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d121      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d11a      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cc      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d90c      	bls.n	8002abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	494d      	ldr	r1, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d044      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d119      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e067      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4934      	ldr	r1, [pc, #208]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7fe fe06 	bl	8001780 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7fe fe02 	bl	8001780 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e04f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d20c      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e032      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c06:	f000 f821 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fd66 	bl	80016f8 <HAL_InitTick>

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	08004df4 	.word	0x08004df4
 8002c44:	20000004 	.word	0x20000004
 8002c48:	20000008 	.word	0x20000008

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b094      	sub	sp, #80	; 0x50
 8002c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	647b      	str	r3, [r7, #68]	; 0x44
 8002c58:	2300      	movs	r3, #0
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d00d      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x40>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	f200 80e1 	bhi.w	8002e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7e:	e0db      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c80:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c84:	e0db      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c86:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8a:	e0d8      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c96:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	0159      	lsls	r1, r3, #5
 8002ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd0:	0150      	lsls	r0, r2, #5
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	1a51      	subs	r1, r2, r1
 8002cda:	6139      	str	r1, [r7, #16]
 8002cdc:	4629      	mov	r1, r5
 8002cde:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	018b      	lsls	r3, r1, #6
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	018a      	lsls	r2, r1, #6
 8002cfe:	4651      	mov	r1, sl
 8002d00:	ebb2 0801 	subs.w	r8, r2, r1
 8002d04:	4659      	mov	r1, fp
 8002d06:	eb63 0901 	sbc.w	r9, r3, r1
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d1e:	4690      	mov	r8, r2
 8002d20:	4699      	mov	r9, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	eb18 0303 	adds.w	r3, r8, r3
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	eb49 0303 	adc.w	r3, r9, r3
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	024b      	lsls	r3, r1, #9
 8002d42:	4621      	mov	r1, r4
 8002d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d48:	4621      	mov	r1, r4
 8002d4a:	024a      	lsls	r2, r1, #9
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d52:	2200      	movs	r2, #0
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d5c:	f7fd fe8e 	bl	8000a7c <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4613      	mov	r3, r2
 8002d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d68:	e058      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	2200      	movs	r2, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	4611      	mov	r1, r2
 8002d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	f04f 0000 	mov.w	r0, #0
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	0159      	lsls	r1, r3, #5
 8002d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d96:	0150      	lsls	r0, r2, #5
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002da2:	4649      	mov	r1, r9
 8002da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8002dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	00eb      	lsls	r3, r5, #3
 8002dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dd2:	00e2      	lsls	r2, r4, #3
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	4643      	mov	r3, r8
 8002dda:	18e3      	adds	r3, r4, r3
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	464b      	mov	r3, r9
 8002de0:	eb45 0303 	adc.w	r3, r5, r3
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002df2:	4629      	mov	r1, r5
 8002df4:	028b      	lsls	r3, r1, #10
 8002df6:	4621      	mov	r1, r4
 8002df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	028a      	lsls	r2, r1, #10
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e06:	2200      	movs	r2, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	61fa      	str	r2, [r7, #28]
 8002e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e10:	f7fd fe34 	bl	8000a7c <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	3301      	adds	r3, #1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3750      	adds	r7, #80	; 0x50
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	00f42400 	.word	0x00f42400
 8002e54:	007a1200 	.word	0x007a1200

08002e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07b      	b.n	8002f62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7a:	d009      	beq.n	8002e90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
 8002e82:	e005      	b.n	8002e90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe fa58 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f14:	ea42 0103 	orr.w	r1, r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	f003 0104 	and.w	r1, r3, #4
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0210 	and.w	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b088      	sub	sp, #32
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_SPI_Transmit+0x22>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e126      	b.n	80031da <HAL_SPI_Transmit+0x270>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f94:	f7fe fbf4 	bl	8001780 <HAL_GetTick>
 8002f98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fae:	e10b      	b.n	80031c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_SPI_Transmit+0x52>
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fc0:	e102      	b.n	80031c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	d10f      	bne.n	800302a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003028:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d007      	beq.n	8003048 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003050:	d14b      	bne.n	80030ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_SPI_Transmit+0xf6>
 800305a:	8afb      	ldrh	r3, [r7, #22]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d13e      	bne.n	80030de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	881a      	ldrh	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	1c9a      	adds	r2, r3, #2
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003084:	e02b      	b.n	80030de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b02      	cmp	r3, #2
 8003092:	d112      	bne.n	80030ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80030b8:	e011      	b.n	80030de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ba:	f7fe fb61 	bl	8001780 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d803      	bhi.n	80030d2 <HAL_SPI_Transmit+0x168>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d102      	bne.n	80030d8 <HAL_SPI_Transmit+0x16e>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030dc:	e074      	b.n	80031c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ce      	bne.n	8003086 <HAL_SPI_Transmit+0x11c>
 80030e8:	e04c      	b.n	8003184 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_SPI_Transmit+0x18e>
 80030f2:	8afb      	ldrh	r3, [r7, #22]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d140      	bne.n	800317a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800311e:	e02c      	b.n	800317a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d113      	bne.n	8003156 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	86da      	strh	r2, [r3, #54]	; 0x36
 8003154:	e011      	b.n	800317a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003156:	f7fe fb13 	bl	8001780 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d803      	bhi.n	800316e <HAL_SPI_Transmit+0x204>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d102      	bne.n	8003174 <HAL_SPI_Transmit+0x20a>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003178:	e026      	b.n	80031c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1cd      	bne.n	8003120 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f8b3 	bl	80032f4 <SPI_EndRxTxTransaction>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e000      	b.n	80031c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80031c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031f4:	f7fe fac4 	bl	8001780 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	4413      	add	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003204:	f7fe fabc 	bl	8001780 <HAL_GetTick>
 8003208:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	015b      	lsls	r3, r3, #5
 8003210:	0d1b      	lsrs	r3, r3, #20
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800321a:	e054      	b.n	80032c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d050      	beq.n	80032c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003224:	f7fe faac 	bl	8001780 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	429a      	cmp	r2, r3
 8003232:	d902      	bls.n	800323a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d13d      	bne.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003248:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003252:	d111      	bne.n	8003278 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325c:	d004      	beq.n	8003268 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d107      	bne.n	8003278 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003276:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003280:	d10f      	bne.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e017      	b.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	bf0c      	ite	eq
 80032d6:	2301      	moveq	r3, #1
 80032d8:	2300      	movne	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d19b      	bne.n	800321c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000004 	.word	0x20000004

080032f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <SPI_EndRxTxTransaction+0x7c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <SPI_EndRxTxTransaction+0x80>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0d5b      	lsrs	r3, r3, #21
 800330c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331e:	d112      	bne.n	8003346 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff ff5a 	bl	80031e4 <SPI_WaitFlagStateUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3b01      	subs	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d0f2      	beq.n	8003346 <SPI_EndRxTxTransaction+0x52>
 8003360:	e000      	b.n	8003364 <SPI_EndRxTxTransaction+0x70>
        break;
 8003362:	bf00      	nop
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000004 	.word	0x20000004
 8003374:	165e9f81 	.word	0x165e9f81

08003378 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	7c1b      	ldrb	r3, [r3, #16]
 8003386:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800338e:	461a      	mov	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fd10 	bl	8004dcc <memset>
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
 80033c0:	4613      	mov	r3, r2
 80033c2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	7c1b      	ldrb	r3, [r3, #16]
 80033ca:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	89ba      	ldrh	r2, [r7, #12]
 80033dc:	fb12 f303 	smulbb	r3, r2, r3
 80033e0:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80033e2:	89bb      	ldrh	r3, [r7, #12]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80033e8:	89bb      	ldrh	r3, [r7, #12]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4413      	add	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80033f0:	7bf9      	ldrb	r1, [r7, #15]
 80033f2:	78ba      	ldrb	r2, [r7, #2]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	460b      	mov	r3, r1
 80033fa:	2100      	movs	r1, #0
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f001 fbf2 	bl	8004be6 <u8x8_DrawTile>
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800341c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003424:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	7c5b      	ldrb	r3, [r3, #17]
 800342c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800342e:	7bba      	ldrb	r2, [r7, #14]
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ffbd 	bl	80033b4 <u8g2_send_tile_row>
    src_row++;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3301      	adds	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003440:	7bbb      	ldrb	r3, [r7, #14]
 8003442:	3301      	adds	r3, #1
 8003444:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	7b7b      	ldrb	r3, [r7, #13]
 800344a:	429a      	cmp	r2, r3
 800344c:	d203      	bcs.n	8003456 <u8g2_send_buffer+0x4c>
 800344e:	7bba      	ldrb	r2, [r7, #14]
 8003450:	7b3b      	ldrb	r3, [r7, #12]
 8003452:	429a      	cmp	r2, r3
 8003454:	d3eb      	bcc.n	800342e <u8g2_send_buffer+0x24>
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff69 	bl	8003378 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80034a6:	2100      	movs	r1, #0
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ffd8 	bl	800345e <u8g2_SetBufferCurrTileRow>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffa3 	bl	800340a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ca:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	4413      	add	r3, r2
 80034d6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	7c5b      	ldrb	r3, [r3, #17]
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d304      	bcc.n	80034ee <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f001 fbcf 	bl	8004c88 <u8x8_RefreshDisplay>
    return 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e00d      	b.n	800350a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ff3d 	bl	8003378 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ffab 	bl	800345e <u8g2_SetBufferCurrTileRow>
  return 1;
 8003508:	2301      	movs	r3, #1
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2208      	movs	r2, #8
 8003520:	701a      	strb	r2, [r3, #0]
  return buf;
 8003522:	4b03      	ldr	r3, [pc, #12]	; (8003530 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000570 	.word	0x20000570

08003534 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800354a:	490c      	ldr	r1, [pc, #48]	; (800357c <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f001 fbfb 	bl	8004d48 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003552:	f107 0313 	add.w	r3, r7, #19
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffdc 	bl	8003514 <u8g2_m_16_8_f>
 800355c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800355e:	7cfa      	ldrb	r2, [r7, #19]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 ff81 	bl	8004470 <u8g2_SetupBuffer>
}
 800356e:	bf00      	nop
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	08004909 	.word	0x08004909
 800357c:	08004ae1 	.word	0x08004ae1
 8003580:	080042f3 	.word	0x080042f3

08003584 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	781b      	ldrb	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	81fb      	strh	r3, [r7, #14]
    font++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3301      	adds	r3, #1
 80035c6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80035c8:	89fb      	ldrh	r3, [r7, #14]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	4413      	add	r3, r2
 80035d8:	81fb      	strh	r3, [r7, #14]
    return pos;
 80035da:	89fb      	ldrh	r3, [r7, #14]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80035f2:	2100      	movs	r1, #0
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	f7ff ffc5 	bl	8003584 <u8g2_font_get_byte>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003602:	2101      	movs	r1, #1
 8003604:	6838      	ldr	r0, [r7, #0]
 8003606:	f7ff ffbd 	bl	8003584 <u8g2_font_get_byte>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003612:	2102      	movs	r1, #2
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f7ff ffb5 	bl	8003584 <u8g2_font_get_byte>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8003622:	2103      	movs	r1, #3
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f7ff ffad 	bl	8003584 <u8g2_font_get_byte>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003632:	2104      	movs	r1, #4
 8003634:	6838      	ldr	r0, [r7, #0]
 8003636:	f7ff ffa5 	bl	8003584 <u8g2_font_get_byte>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003642:	2105      	movs	r1, #5
 8003644:	6838      	ldr	r0, [r7, #0]
 8003646:	f7ff ff9d 	bl	8003584 <u8g2_font_get_byte>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003652:	2106      	movs	r1, #6
 8003654:	6838      	ldr	r0, [r7, #0]
 8003656:	f7ff ff95 	bl	8003584 <u8g2_font_get_byte>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003662:	2107      	movs	r1, #7
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f7ff ff8d 	bl	8003584 <u8g2_font_get_byte>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003672:	2108      	movs	r1, #8
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f7ff ff85 	bl	8003584 <u8g2_font_get_byte>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003682:	2109      	movs	r1, #9
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	f7ff ff7d 	bl	8003584 <u8g2_font_get_byte>
 800368a:	4603      	mov	r3, r0
 800368c:	b25a      	sxtb	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003692:	210a      	movs	r1, #10
 8003694:	6838      	ldr	r0, [r7, #0]
 8003696:	f7ff ff75 	bl	8003584 <u8g2_font_get_byte>
 800369a:	4603      	mov	r3, r0
 800369c:	b25a      	sxtb	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80036a2:	210b      	movs	r1, #11
 80036a4:	6838      	ldr	r0, [r7, #0]
 80036a6:	f7ff ff6d 	bl	8003584 <u8g2_font_get_byte>
 80036aa:	4603      	mov	r3, r0
 80036ac:	b25a      	sxtb	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80036b2:	210c      	movs	r1, #12
 80036b4:	6838      	ldr	r0, [r7, #0]
 80036b6:	f7ff ff65 	bl	8003584 <u8g2_font_get_byte>
 80036ba:	4603      	mov	r3, r0
 80036bc:	b25a      	sxtb	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80036c2:	210d      	movs	r1, #13
 80036c4:	6838      	ldr	r0, [r7, #0]
 80036c6:	f7ff ff5d 	bl	8003584 <u8g2_font_get_byte>
 80036ca:	4603      	mov	r3, r0
 80036cc:	b25a      	sxtb	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80036d2:	210e      	movs	r1, #14
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	f7ff ff55 	bl	8003584 <u8g2_font_get_byte>
 80036da:	4603      	mov	r3, r0
 80036dc:	b25a      	sxtb	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80036e2:	210f      	movs	r1, #15
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	f7ff ff4d 	bl	8003584 <u8g2_font_get_byte>
 80036ea:	4603      	mov	r3, r0
 80036ec:	b25a      	sxtb	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80036f2:	2110      	movs	r1, #16
 80036f4:	6838      	ldr	r0, [r7, #0]
 80036f6:	f7ff ff45 	bl	8003584 <u8g2_font_get_byte>
 80036fa:	4603      	mov	r3, r0
 80036fc:	b25a      	sxtb	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003702:	2111      	movs	r1, #17
 8003704:	6838      	ldr	r0, [r7, #0]
 8003706:	f7ff ff4f 	bl	80035a8 <u8g2_font_get_word>
 800370a:	4603      	mov	r3, r0
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003712:	2113      	movs	r1, #19
 8003714:	6838      	ldr	r0, [r7, #0]
 8003716:	f7ff ff47 	bl	80035a8 <u8g2_font_get_word>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003722:	2115      	movs	r1, #21
 8003724:	6838      	ldr	r0, [r7, #0]
 8003726:	f7ff ff3f 	bl	80035a8 <u8g2_font_get_word>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	82da      	strh	r2, [r3, #22]
#endif
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7b1b      	ldrb	r3, [r3, #12]
 800374a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	7b7b      	ldrb	r3, [r7, #13]
 8003758:	fa42 f303 	asr.w	r3, r2, r3
 800375c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800375e:	7b7b      	ldrb	r3, [r7, #13]
 8003760:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003762:	7bba      	ldrb	r2, [r7, #14]
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	4413      	add	r3, r2
 8003768:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800376a:	7bbb      	ldrb	r3, [r7, #14]
 800376c:	2b07      	cmp	r3, #7
 800376e:	d91a      	bls.n	80037a6 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003770:	2308      	movs	r3, #8
 8003772:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003774:	7b3a      	ldrb	r2, [r7, #12]
 8003776:	7b7b      	ldrb	r3, [r7, #13]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	7b3b      	ldrb	r3, [r7, #12]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	b25a      	sxtb	r2, r3
 8003796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379a:	4313      	orrs	r3, r2
 800379c:	b25b      	sxtb	r3, r3
 800379e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	3b08      	subs	r3, #8
 80037a4:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	4013      	ands	r3, r2
 80037ba:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7bba      	ldrb	r2, [r7, #14]
 80037c0:	731a      	strb	r2, [r3, #12]
  return val;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ffaa 	bl	800373a <u8g2_font_decode_get_unsigned_bits>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80037f4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	7bbb      	ldrb	r3, [r7, #14]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	73fb      	strb	r3, [r7, #15]
  return v;
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <u8g2_font_2x_decode_len>:
  decode->y = ly;  
}


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af02      	add	r7, sp, #8
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	70fb      	strb	r3, [r7, #3]
 8003822:	4613      	mov	r3, r2
 8003824:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3360      	adds	r3, #96	; 0x60
 800382a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003836:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800383e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003846:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	7d7b      	ldrb	r3, [r7, #21]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003854:	7dfa      	ldrb	r2, [r7, #23]
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	429a      	cmp	r2, r3
 800385a:	d201      	bcs.n	8003860 <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	889b      	ldrh	r3, [r3, #4]
 8003864:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	88db      	ldrh	r3, [r3, #6]
 800386a:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 800386c:	7d7b      	ldrb	r3, [r7, #21]
 800386e:	b29b      	uxth	r3, r3
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	89bb      	ldrh	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 800387a:	7d3b      	ldrb	r3, [r7, #20]
 800387c:	b29b      	uxth	r3, r3
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	897b      	ldrh	r3, [r7, #10]
 8003884:	4413      	add	r3, r2
 8003886:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003888:	78bb      	ldrb	r3, [r7, #2]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01d      	beq.n	80038ca <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	7b9a      	ldrb	r2, [r3, #14]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003898:	7dbb      	ldrb	r3, [r7, #22]
 800389a:	b29b      	uxth	r3, r3
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	897a      	ldrh	r2, [r7, #10]
 80038a2:	89b9      	ldrh	r1, [r7, #12]
 80038a4:	2000      	movs	r0, #0
 80038a6:	9000      	str	r0, [sp, #0]
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fb6c 	bl	8003f86 <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	3301      	adds	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	7dbb      	ldrb	r3, [r7, #22]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	89b9      	ldrh	r1, [r7, #12]
 80038be:	2000      	movs	r0, #0
 80038c0:	9000      	str	r0, [sp, #0]
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fb5f 	bl	8003f86 <u8g2_DrawHVLine>
 80038c8:	e020      	b.n	800390c <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	7b5b      	ldrb	r3, [r3, #13]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11c      	bne.n	800390c <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	7bda      	ldrb	r2, [r3, #15]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80038dc:	7dbb      	ldrb	r3, [r7, #22]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	897a      	ldrh	r2, [r7, #10]
 80038e6:	89b9      	ldrh	r1, [r7, #12]
 80038e8:	2000      	movs	r0, #0
 80038ea:	9000      	str	r0, [sp, #0]
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fb4a 	bl	8003f86 <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 80038f2:	897b      	ldrh	r3, [r7, #10]
 80038f4:	3301      	adds	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	7dbb      	ldrb	r3, [r7, #22]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	b29b      	uxth	r3, r3
 8003900:	89b9      	ldrh	r1, [r7, #12]
 8003902:	2000      	movs	r0, #0
 8003904:	9000      	str	r0, [sp, #0]
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fb3d 	bl	8003f86 <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800390c:	7dfa      	ldrb	r2, [r7, #23]
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	429a      	cmp	r2, r3
 8003912:	d309      	bcc.n	8003928 <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 8003914:	7dfa      	ldrb	r2, [r7, #23]
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	757b      	strb	r3, [r7, #21]
    ly++;
 8003920:	7d3b      	ldrb	r3, [r7, #20]
 8003922:	3301      	adds	r3, #1
 8003924:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003926:	e78b      	b.n	8003840 <u8g2_font_2x_decode_len+0x2a>
      break;
 8003928:	bf00      	nop
  }
  lx += cnt;
 800392a:	7d7a      	ldrb	r2, [r7, #21]
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	4413      	add	r3, r2
 8003930:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003932:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 800393a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	725a      	strb	r2, [r3, #9]
  
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3360      	adds	r3, #96	; 0x60
 8003958:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800396c:	4619      	mov	r1, r3
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff fee3 	bl	800373a <u8g2_font_decode_get_unsigned_bits>
 8003974:	4603      	mov	r3, r0
 8003976:	b25a      	sxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003982:	4619      	mov	r1, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fed8 	bl	800373a <u8g2_font_decode_get_unsigned_bits>
 800398a:	4603      	mov	r3, r0
 800398c:	b25a      	sxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	7b9b      	ldrb	r3, [r3, #14]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	73da      	strb	r2, [r3, #15]
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <u8g2_font_2x_decode_glyph>:
  return d;
}


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3360      	adds	r3, #96	; 0x60
 80039c6:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ffbd 	bl	800394a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80039d6:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80039de:	4619      	mov	r1, r3
 80039e0:	69f8      	ldr	r0, [r7, #28]
 80039e2:	f7ff fef5 	bl	80037d0 <u8g2_font_decode_get_signed_bits>
 80039e6:	4603      	mov	r3, r0
 80039e8:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80039f0:	4619      	mov	r1, r3
 80039f2:	69f8      	ldr	r0, [r7, #28]
 80039f4:	f7ff feec 	bl	80037d0 <u8g2_font_decode_get_signed_bits>
 80039f8:	4603      	mov	r3, r0
 80039fa:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003a02:	4619      	mov	r1, r3
 8003a04:	69f8      	ldr	r0, [r7, #28]
 8003a06:	f7ff fee3 	bl	80037d0 <u8g2_font_decode_get_signed_bits>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	dd7b      	ble.n	8003b10 <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	889a      	ldrh	r2, [r3, #4]
 8003a1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	88da      	ldrh	r2, [r3, #6]
 8003a2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	b299      	uxth	r1, r3
 8003a38:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	440b      	add	r3, r1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	889b      	ldrh	r3, [r3, #4]
 8003a4e:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	88db      	ldrh	r3, [r3, #6]
 8003a54:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 8003a56:	8afb      	ldrh	r3, [r7, #22]
 8003a58:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 8003a5a:	8abb      	ldrh	r3, [r7, #20]
 8003a5c:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	8a7b      	ldrh	r3, [r7, #18]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 8003a70:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	8a3b      	ldrh	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003a80:	8a78      	ldrh	r0, [r7, #18]
 8003a82:	8aba      	ldrh	r2, [r7, #20]
 8003a84:	8af9      	ldrh	r1, [r7, #22]
 8003a86:	8a3b      	ldrh	r3, [r7, #16]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fb6b 	bl	8004168 <u8g2_IsIntersection>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 8003a98:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003a9c:	e03c      	b.n	8003b18 <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	69f8      	ldr	r0, [r7, #28]
 8003ab4:	f7ff fe41 	bl	800373a <u8g2_font_decode_get_unsigned_bits>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	69f8      	ldr	r0, [r7, #28]
 8003ac6:	f7ff fe38 	bl	800373a <u8g2_font_decode_get_unsigned_bits>
 8003aca:	4603      	mov	r3, r0
 8003acc:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fe9e 	bl	8003816 <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 8003ada:	7bbb      	ldrb	r3, [r7, #14]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fe98 	bl	8003816 <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	69f8      	ldr	r0, [r7, #28]
 8003aea:	f7ff fe26 	bl	800373a <u8g2_font_decode_get_unsigned_bits>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ec      	bne.n	8003ace <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003afa:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	dd00      	ble.n	8003b04 <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003b02:	e7d2      	b.n	8003aaa <u8g2_font_2x_decode_glyph+0xf2>
	break;
 8003b04:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	7b9a      	ldrb	r2, [r3, #14]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 8003b10:	7e3b      	ldrb	r3, [r7, #24]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	b25b      	sxtb	r3, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3317      	adds	r3, #23
 8003b36:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003b38:	887b      	ldrh	r3, [r7, #2]
 8003b3a:	2bff      	cmp	r3, #255	; 0xff
 8003b3c:	d82a      	bhi.n	8003b94 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003b3e:	887b      	ldrh	r3, [r7, #2]
 8003b40:	2b60      	cmp	r3, #96	; 0x60
 8003b42:	d907      	bls.n	8003b54 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4413      	add	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e009      	b.n	8003b68 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d906      	bls.n	8003b68 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003b60:	461a      	mov	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4413      	add	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d04e      	beq.n	8003c10 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	887a      	ldrh	r2, [r7, #2]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d102      	bne.n	8003b84 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3302      	adds	r3, #2
 8003b82:	e049      	b.n	8003c18 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3301      	adds	r3, #1
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4413      	add	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003b92:	e7e9      	b.n	8003b68 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6938      	ldr	r0, [r7, #16]
 8003baa:	f7ff fcfd 	bl	80035a8 <u8g2_font_get_word>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003bb8:	2102      	movs	r1, #2
 8003bba:	6938      	ldr	r0, [r7, #16]
 8003bbc:	f7ff fcf4 	bl	80035a8 <u8g2_font_get_word>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003bca:	89fa      	ldrh	r2, [r7, #14]
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d3e9      	bcc.n	8003ba6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003bd8:	89fb      	ldrh	r3, [r7, #14]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3301      	adds	r3, #1
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	89fb      	ldrh	r3, [r7, #14]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003bec:	89fb      	ldrh	r3, [r7, #14]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003bf2:	89fa      	ldrh	r2, [r7, #14]
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d102      	bne.n	8003c00 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3303      	adds	r3, #3
 8003bfe:	e00b      	b.n	8003c18 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3302      	adds	r3, #2
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003c0e:	e7e0      	b.n	8003bd2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <u8g2_font_get_glyph_data+0xf6>
	break;
 8003c14:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <u8g2_font_2x_draw_glyph>:
  }
  return dx;
}

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	817b      	strh	r3, [r7, #10]
 8003c32:	460b      	mov	r3, r1
 8003c34:	813b      	strh	r3, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	897a      	ldrh	r2, [r7, #10]
 8003c42:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	893a      	ldrh	r2, [r7, #8]
 8003c4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	4619      	mov	r1, r3
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff ff64 	bl	8003b20 <u8g2_font_get_glyph_data>
 8003c58:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 8003c60:	6939      	ldr	r1, [r7, #16]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff fea8 	bl	80039b8 <u8g2_font_2x_decode_glyph>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003c6c:	8afb      	ldrh	r3, [r7, #22]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <u8g2_DrawGlyphX2>:
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	4608      	mov	r0, r1
 8003c80:	4611      	mov	r1, r2
 8003c82:	461a      	mov	r2, r3
 8003c84:	4603      	mov	r3, r0
 8003c86:	817b      	strh	r3, [r7, #10]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	813b      	strh	r3, [r7, #8]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	4798      	blx	r3
 8003c98:	4603      	mov	r3, r0
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	893b      	ldrh	r3, [r7, #8]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	893a      	ldrh	r2, [r7, #8]
 8003ca8:	8979      	ldrh	r1, [r7, #10]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff ffb8 	bl	8003c20 <u8g2_font_2x_draw_glyph>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <u8g2_draw_string_2x>:
  return sum;
}

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	817b      	strh	r3, [r7, #10]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fd16 	bl	80046fe <u8x8_utf8_init>
  sum = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	4798      	blx	r3
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003ce8:	8abb      	ldrh	r3, [r7, #20]
 8003cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003cf8:	8abb      	ldrh	r3, [r7, #20]
 8003cfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d0e9      	beq.n	8003cd6 <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 8003d02:	8abb      	ldrh	r3, [r7, #20]
 8003d04:	893a      	ldrh	r2, [r7, #8]
 8003d06:	8979      	ldrh	r1, [r7, #10]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff ffb4 	bl	8003c76 <u8g2_DrawGlyphX2>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	827b      	strh	r3, [r7, #18]
      x += delta;
 8003d12:	897a      	ldrh	r2, [r7, #10]
 8003d14:	8a7b      	ldrh	r3, [r7, #18]
 8003d16:	4413      	add	r3, r2
 8003d18:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 8003d1a:	8afa      	ldrh	r2, [r7, #22]
 8003d1c:	8a7b      	ldrh	r3, [r7, #18]
 8003d1e:	4413      	add	r3, r2
 8003d20:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003d22:	e7d8      	b.n	8003cd6 <u8g2_draw_string_2x+0x1c>
      break;
 8003d24:	bf00      	nop
    }
  }
  return sum;
 8003d26:	8afb      	ldrh	r3, [r7, #22]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <u8g2_DrawStrX2>:
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_draw_string(u8g2, x, y, str);
}

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <u8g2_DrawStrX2+0x30>)
 8003d46:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 8003d48:	893a      	ldrh	r2, [r7, #8]
 8003d4a:	8979      	ldrh	r1, [r7, #10]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff ffb3 	bl	8003cba <u8g2_draw_string_2x>
 8003d54:	4603      	mov	r3, r0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	0800471b 	.word	0x0800471b

08003d64 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05d      	beq.n	8003e30 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d04d      	beq.n	8003e32 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d11c      	bne.n	8003dda <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8003dac:	429a      	cmp	r2, r3
 8003dae:	da05      	bge.n	8003dbc <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	dd32      	ble.n	8003e32 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003dd8:	e02b      	b.n	8003e32 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003de8:	4619      	mov	r1, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003df0:	440b      	add	r3, r1
 8003df2:	429a      	cmp	r2, r3
 8003df4:	da0d      	bge.n	8003e12 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	b25a      	sxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	dd07      	ble.n	8003e32 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003e2e:	e000      	b.n	8003e32 <u8g2_UpdateRefHeight+0xce>
    return;
 8003e30:	bf00      	nop
  }  
}
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  return 0;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <u8g2_SetFontPosBaseline+0x1c>)
 8003e60:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	08003e3d 	.word	0x08003e3d

08003e74 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d00b      	beq.n	8003ea0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3374      	adds	r3, #116	; 0x74
 8003e92:	6839      	ldr	r1, [r7, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fba7 	bl	80035e8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ff62 	bl	8003d64 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	80fb      	strh	r3, [r7, #6]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003ec4:	8afb      	ldrh	r3, [r7, #22]
 8003ec6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	881a      	ldrh	r2, [r3, #0]
 8003ecc:	8abb      	ldrh	r3, [r7, #20]
 8003ece:	4413      	add	r3, r2
 8003ed0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003ed2:	8afa      	ldrh	r2, [r7, #22]
 8003ed4:	8abb      	ldrh	r3, [r7, #20]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d90b      	bls.n	8003ef2 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003eda:	8afa      	ldrh	r2, [r7, #22]
 8003edc:	88bb      	ldrh	r3, [r7, #4]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d205      	bcs.n	8003eee <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003ee2:	88bb      	ldrh	r3, [r7, #4]
 8003ee4:	82bb      	strh	r3, [r7, #20]
      b--;
 8003ee6:	8abb      	ldrh	r3, [r7, #20]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	82bb      	strh	r3, [r7, #20]
 8003eec:	e001      	b.n	8003ef2 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003ef2:	8afa      	ldrh	r2, [r7, #22]
 8003ef4:	88bb      	ldrh	r3, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d301      	bcc.n	8003efe <u8g2_clip_intersection2+0x56>
    return 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e01c      	b.n	8003f38 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003efe:	8aba      	ldrh	r2, [r7, #20]
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d801      	bhi.n	8003f0a <u8g2_clip_intersection2+0x62>
    return 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e016      	b.n	8003f38 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8003f0a:	8afa      	ldrh	r2, [r7, #22]
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d201      	bcs.n	8003f16 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8003f16:	8aba      	ldrh	r2, [r7, #20]
 8003f18:	88bb      	ldrh	r3, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d901      	bls.n	8003f22 <u8g2_clip_intersection2+0x7a>
    b = d;
 8003f1e:	88bb      	ldrh	r3, [r7, #4]
 8003f20:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8afa      	ldrh	r2, [r7, #22]
 8003f26:	801a      	strh	r2, [r3, #0]
  b -= a;
 8003f28:	8aba      	ldrh	r2, [r7, #20]
 8003f2a:	8afb      	ldrh	r3, [r7, #22]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	8aba      	ldrh	r2, [r7, #20]
 8003f34:	801a      	strh	r2, [r3, #0]
  return 1;
 8003f36:	2301      	movs	r3, #1
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	817b      	strh	r3, [r7, #10]
 8003f56:	460b      	mov	r3, r1
 8003f58:	813b      	strh	r3, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f62:	893a      	ldrh	r2, [r7, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003f6c:	88f8      	ldrh	r0, [r7, #6]
 8003f6e:	893a      	ldrh	r2, [r7, #8]
 8003f70:	8979      	ldrh	r1, [r7, #10]
 8003f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4603      	mov	r3, r0
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	47a0      	blx	r4
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd90      	pop	{r4, r7, pc}

08003f86 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003f86:	b590      	push	{r4, r7, lr}
 8003f88:	b087      	sub	sp, #28
 8003f8a:	af02      	add	r7, sp, #8
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	4608      	mov	r0, r1
 8003f90:	4611      	mov	r1, r2
 8003f92:	461a      	mov	r2, r3
 8003f94:	4603      	mov	r3, r0
 8003f96:	817b      	strh	r3, [r7, #10]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	813b      	strh	r3, [r7, #8]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d075      	beq.n	8004096 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d072      	beq.n	8004096 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d91a      	bls.n	8003fec <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003fb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d109      	bne.n	8003fd2 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003fbe:	897a      	ldrh	r2, [r7, #10]
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	817b      	strh	r3, [r7, #10]
	  x++;
 8003fc8:	897b      	ldrh	r3, [r7, #10]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	817b      	strh	r3, [r7, #10]
 8003fd0:	e00c      	b.n	8003fec <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003fd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d108      	bne.n	8003fec <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8003fda:	893a      	ldrh	r2, [r7, #8]
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	813b      	strh	r3, [r7, #8]
	  y++;
 8003fe4:	893b      	ldrh	r3, [r7, #8]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8003fec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003ff8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11a      	bne.n	8004036 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004006:	893b      	ldrh	r3, [r7, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	d83b      	bhi.n	8004084 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004012:	893b      	ldrh	r3, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	d937      	bls.n	8004088 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004024:	1db9      	adds	r1, r7, #6
 8004026:	f107 000a 	add.w	r0, r7, #10
 800402a:	f7ff ff3d 	bl	8003ea8 <u8g2_clip_intersection2>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11a      	bne.n	800406a <u8g2_DrawHVLine+0xe4>
	  return;
 8004034:	e02f      	b.n	8004096 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800403c:	897b      	ldrh	r3, [r7, #10]
 800403e:	429a      	cmp	r2, r3
 8004040:	d824      	bhi.n	800408c <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004048:	897b      	ldrh	r3, [r7, #10]
 800404a:	429a      	cmp	r2, r3
 800404c:	d920      	bls.n	8004090 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800405a:	1db9      	adds	r1, r7, #6
 800405c:	f107 0008 	add.w	r0, r7, #8
 8004060:	f7ff ff22 	bl	8003ea8 <u8g2_clip_intersection2>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d014      	beq.n	8004094 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	689c      	ldr	r4, [r3, #8]
 8004070:	8979      	ldrh	r1, [r7, #10]
 8004072:	893a      	ldrh	r2, [r7, #8]
 8004074:	88f8      	ldrh	r0, [r7, #6]
 8004076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	4603      	mov	r3, r0
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	47a0      	blx	r4
 8004082:	e008      	b.n	8004096 <u8g2_DrawHVLine+0x110>
	  return;
 8004084:	bf00      	nop
 8004086:	e006      	b.n	8004096 <u8g2_DrawHVLine+0x110>
	  return;
 8004088:	bf00      	nop
 800408a:	e004      	b.n	8004096 <u8g2_DrawHVLine+0x110>
	  return;
 800408c:	bf00      	nop
 800408e:	e002      	b.n	8004096 <u8g2_DrawHVLine+0x110>
	  return;
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <u8g2_DrawHVLine+0x110>
	  return;
 8004094:	bf00      	nop
    }
}
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	bd90      	pop	{r4, r7, pc}

0800409c <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
 80040a8:	4613      	mov	r3, r2
 80040aa:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80040b2:	883a      	ldrh	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d31a      	bcc.n	80040ee <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80040be:	883a      	ldrh	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d216      	bcs.n	80040f2 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d312      	bcc.n	80040f6 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80040d6:	887a      	ldrh	r2, [r7, #2]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d20e      	bcs.n	80040fa <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80040dc:	883a      	ldrh	r2, [r7, #0]
 80040de:	8879      	ldrh	r1, [r7, #2]
 80040e0:	2300      	movs	r3, #0
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2301      	movs	r3, #1
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ff4d 	bl	8003f86 <u8g2_DrawHVLine>
 80040ec:	e006      	b.n	80040fc <u8g2_DrawPixel+0x60>
    return;
 80040ee:	bf00      	nop
 80040f0:	e004      	b.n	80040fc <u8g2_DrawPixel+0x60>
    return;
 80040f2:	bf00      	nop
 80040f4:	e002      	b.n	80040fc <u8g2_DrawPixel+0x60>
    return;
 80040f6:	bf00      	nop
 80040f8:	e000      	b.n	80040fc <u8g2_DrawPixel+0x60>
    return;
 80040fa:	bf00      	nop
}
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004102:	b490      	push	{r4, r7}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	4604      	mov	r4, r0
 800410a:	4608      	mov	r0, r1
 800410c:	4611      	mov	r1, r2
 800410e:	461a      	mov	r2, r3
 8004110:	4623      	mov	r3, r4
 8004112:	80fb      	strh	r3, [r7, #6]
 8004114:	4603      	mov	r3, r0
 8004116:	80bb      	strh	r3, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	807b      	strh	r3, [r7, #2]
 800411c:	4613      	mov	r3, r2
 800411e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004120:	887a      	ldrh	r2, [r7, #2]
 8004122:	88bb      	ldrh	r3, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d20d      	bcs.n	8004144 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004128:	883a      	ldrh	r2, [r7, #0]
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	429a      	cmp	r2, r3
 800412e:	d901      	bls.n	8004134 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004130:	2301      	movs	r3, #1
 8004132:	e014      	b.n	800415e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004134:	887a      	ldrh	r2, [r7, #2]
 8004136:	883b      	ldrh	r3, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d901      	bls.n	8004140 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800413c:	2301      	movs	r3, #1
 800413e:	e00e      	b.n	800415e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004140:	2300      	movs	r3, #0
 8004142:	e00c      	b.n	800415e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004144:	883a      	ldrh	r2, [r7, #0]
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	429a      	cmp	r2, r3
 800414a:	d907      	bls.n	800415c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800414c:	887a      	ldrh	r2, [r7, #2]
 800414e:	883b      	ldrh	r3, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d901      	bls.n	8004158 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004154:	2301      	movs	r3, #1
 8004156:	e002      	b.n	800415e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800415c:	2300      	movs	r3, #0
    }
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bc90      	pop	{r4, r7}
 8004166:	4770      	bx	lr

08004168 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4603      	mov	r3, r0
 8004178:	817b      	strh	r3, [r7, #10]
 800417a:	460b      	mov	r3, r1
 800417c:	813b      	strh	r3, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800418e:	8b3b      	ldrh	r3, [r7, #24]
 8004190:	893a      	ldrh	r2, [r7, #8]
 8004192:	f7ff ffb6 	bl	8004102 <u8g2_is_intersection_decision_tree>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <u8g2_IsIntersection+0x38>
    return 0; 
 800419c:	2300      	movs	r3, #0
 800419e:	e00a      	b.n	80041b6 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	897a      	ldrh	r2, [r7, #10]
 80041b0:	f7ff ffa7 	bl	8004102 <u8g2_is_intersection_decision_tree>
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b088      	sub	sp, #32
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	4608      	mov	r0, r1
 80041c8:	4611      	mov	r1, r2
 80041ca:	461a      	mov	r2, r3
 80041cc:	4603      	mov	r3, r0
 80041ce:	817b      	strh	r3, [r7, #10]
 80041d0:	460b      	mov	r3, r1
 80041d2:	813b      	strh	r3, [r7, #8]
 80041d4:	4613      	mov	r3, r2
 80041d6:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 80041dc:	897a      	ldrh	r2, [r7, #10]
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d904      	bls.n	80041ee <u8g2_DrawLine+0x30>
 80041e4:	897a      	ldrh	r2, [r7, #10]
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	837b      	strh	r3, [r7, #26]
 80041ec:	e003      	b.n	80041f6 <u8g2_DrawLine+0x38>
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	897b      	ldrh	r3, [r7, #10]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80041f6:	893a      	ldrh	r2, [r7, #8]
 80041f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d904      	bls.n	8004208 <u8g2_DrawLine+0x4a>
 80041fe:	893a      	ldrh	r2, [r7, #8]
 8004200:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	833b      	strh	r3, [r7, #24]
 8004206:	e003      	b.n	8004210 <u8g2_DrawLine+0x52>
 8004208:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800420a:	893b      	ldrh	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 8004210:	8b3a      	ldrh	r2, [r7, #24]
 8004212:	8b7b      	ldrh	r3, [r7, #26]
 8004214:	429a      	cmp	r2, r3
 8004216:	d913      	bls.n	8004240 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8004218:	2301      	movs	r3, #1
 800421a:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 800421c:	8b7b      	ldrh	r3, [r7, #26]
 800421e:	823b      	strh	r3, [r7, #16]
 8004220:	8b3b      	ldrh	r3, [r7, #24]
 8004222:	837b      	strh	r3, [r7, #26]
 8004224:	8a3b      	ldrh	r3, [r7, #16]
 8004226:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 8004228:	897b      	ldrh	r3, [r7, #10]
 800422a:	823b      	strh	r3, [r7, #16]
 800422c:	893b      	ldrh	r3, [r7, #8]
 800422e:	817b      	strh	r3, [r7, #10]
 8004230:	8a3b      	ldrh	r3, [r7, #16]
 8004232:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	823b      	strh	r3, [r7, #16]
 8004238:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800423a:	80fb      	strh	r3, [r7, #6]
 800423c:	8a3b      	ldrh	r3, [r7, #16]
 800423e:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  if ( x1 > x2 ) 
 8004240:	897a      	ldrh	r2, [r7, #10]
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	429a      	cmp	r2, r3
 8004246:	d90b      	bls.n	8004260 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8004248:	897b      	ldrh	r3, [r7, #10]
 800424a:	823b      	strh	r3, [r7, #16]
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	817b      	strh	r3, [r7, #10]
 8004250:	8a3b      	ldrh	r3, [r7, #16]
 8004252:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 8004254:	893b      	ldrh	r3, [r7, #8]
 8004256:	823b      	strh	r3, [r7, #16]
 8004258:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800425a:	813b      	strh	r3, [r7, #8]
 800425c:	8a3b      	ldrh	r3, [r7, #16]
 800425e:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  err = dx >> 1;
 8004260:	8b7b      	ldrh	r3, [r7, #26]
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8004268:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800426a:	893b      	ldrh	r3, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d902      	bls.n	8004276 <u8g2_DrawLine+0xb8>
 8004270:	2301      	movs	r3, #1
 8004272:	82bb      	strh	r3, [r7, #20]
 8004274:	e002      	b.n	800427c <u8g2_DrawLine+0xbe>
 8004276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800427a:	82bb      	strh	r3, [r7, #20]
  y = y1;
 800427c:	893b      	ldrh	r3, [r7, #8]
 800427e:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004286:	4293      	cmp	r3, r2
 8004288:	d102      	bne.n	8004290 <u8g2_DrawLine+0xd2>
    x2--;
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	3b01      	subs	r3, #1
 800428e:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 8004290:	897b      	ldrh	r3, [r7, #10]
 8004292:	83fb      	strh	r3, [r7, #30]
 8004294:	e024      	b.n	80042e0 <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 800429c:	8bba      	ldrh	r2, [r7, #28]
 800429e:	8bfb      	ldrh	r3, [r7, #30]
 80042a0:	4619      	mov	r1, r3
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fefa 	bl	800409c <u8g2_DrawPixel>
 80042a8:	e005      	b.n	80042b6 <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 80042aa:	8bfa      	ldrh	r2, [r7, #30]
 80042ac:	8bbb      	ldrh	r3, [r7, #28]
 80042ae:	4619      	mov	r1, r3
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff fef3 	bl	800409c <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 80042b6:	8afa      	ldrh	r2, [r7, #22]
 80042b8:	8b3b      	ldrh	r3, [r7, #24]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	b29b      	uxth	r3, r3
 80042be:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 80042c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da08      	bge.n	80042da <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 80042c8:	8aba      	ldrh	r2, [r7, #20]
 80042ca:	8bbb      	ldrh	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 80042d0:	8afa      	ldrh	r2, [r7, #22]
 80042d2:	8b7b      	ldrh	r3, [r7, #26]
 80042d4:	4413      	add	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 80042da:	8bfb      	ldrh	r3, [r7, #30]
 80042dc:	3301      	adds	r3, #1
 80042de:	83fb      	strh	r3, [r7, #30]
 80042e0:	8bfa      	ldrh	r2, [r7, #30]
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d9d6      	bls.n	8004296 <u8g2_DrawLine+0xd8>
    }
  }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b089      	sub	sp, #36	; 0x24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	4608      	mov	r0, r1
 80042fc:	4611      	mov	r1, r2
 80042fe:	461a      	mov	r2, r3
 8004300:	4603      	mov	r3, r0
 8004302:	817b      	strh	r3, [r7, #10]
 8004304:	460b      	mov	r3, r1
 8004306:	813b      	strh	r3, [r7, #8]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800430c:	893b      	ldrh	r3, [r7, #8]
 800430e:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004310:	7efb      	ldrb	r3, [r7, #27]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8004318:	2301      	movs	r3, #1
 800431a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800431c:	7e3a      	ldrb	r2, [r7, #24]
 800431e:	7efb      	ldrb	r3, [r7, #27]
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004334:	2b01      	cmp	r3, #1
 8004336:	d801      	bhi.n	800433c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004338:	7e3b      	ldrb	r3, [r7, #24]
 800433a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004342:	2b01      	cmp	r3, #1
 8004344:	d001      	beq.n	800434a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8004346:	7e3b      	ldrb	r3, [r7, #24]
 8004348:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800434a:	893b      	ldrh	r3, [r7, #8]
 800434c:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800434e:	8afb      	ldrh	r3, [r7, #22]
 8004350:	f023 0307 	bic.w	r3, r3, #7
 8004354:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	7c1b      	ldrb	r3, [r3, #16]
 800435c:	b29b      	uxth	r3, r3
 800435e:	8afa      	ldrh	r2, [r7, #22]
 8004360:	fb12 f303 	smulbb	r3, r2, r3
 8004364:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800436c:	8afb      	ldrh	r3, [r7, #22]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004374:	897b      	ldrh	r3, [r7, #10]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800437c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	d117      	bne.n	80043b4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	7ebb      	ldrb	r3, [r7, #26]
 800438a:	4313      	orrs	r3, r2
 800438c:	b2da      	uxtb	r2, r3
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	7e7b      	ldrb	r3, [r7, #25]
 8004398:	4053      	eors	r3, r2
 800439a:	b2da      	uxtb	r2, r3
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	701a      	strb	r2, [r3, #0]
	ptr++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
	len--;
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e8      	bne.n	8004384 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80043b2:	e038      	b.n	8004426 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	7ebb      	ldrb	r3, [r7, #26]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	7e7b      	ldrb	r3, [r7, #25]
 80043c8:	4053      	eors	r3, r2
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80043d0:	7efb      	ldrb	r3, [r7, #27]
 80043d2:	3301      	adds	r3, #1
 80043d4:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80043d6:	7efb      	ldrb	r3, [r7, #27]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	76fb      	strb	r3, [r7, #27]
      len--;
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80043e4:	7efb      	ldrb	r3, [r7, #27]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d114      	bne.n	8004414 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80043ee:	461a      	mov	r2, r3
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d801      	bhi.n	8004404 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8004400:	2301      	movs	r3, #1
 8004402:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800440a:	2b01      	cmp	r3, #1
 800440c:	d008      	beq.n	8004420 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800440e:	2301      	movs	r3, #1
 8004410:	767b      	strb	r3, [r7, #25]
 8004412:	e005      	b.n	8004420 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8004414:	7ebb      	ldrb	r3, [r7, #26]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800441a:	7e7b      	ldrb	r3, [r7, #25]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1c6      	bne.n	80043b4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8004426:	bf00      	nop
 8004428:	3724      	adds	r7, #36	; 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004450:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800445a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	79fa      	ldrb	r2, [r7, #7]
 8004496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff ffa9 	bl	8004432 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fcb7 	bl	8003e54 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800450a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	89fa      	ldrh	r2, [r7, #14]
 8004516:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	7c1b      	ldrb	r3, [r3, #16]
 800451c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800451e:	89fb      	ldrh	r3, [r7, #14]
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	89fa      	ldrh	r2, [r7, #14]
 8004528:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004530:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004532:	89fb      	ldrh	r3, [r7, #14]
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	89fa      	ldrh	r2, [r7, #14]
 800453c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004544:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800454e:	4413      	add	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	7c52      	ldrb	r2, [r2, #17]
 8004554:	4293      	cmp	r3, r2
 8004556:	dd08      	ble.n	800456a <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	7c5b      	ldrb	r3, [r3, #17]
 800455c:	b29a      	uxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004564:	b29b      	uxth	r3, r3
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800456a:	89fb      	ldrh	r3, [r7, #14]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800458c:	89fb      	ldrh	r3, [r7, #14]
 800458e:	4413      	add	r3, r2
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	8a9a      	ldrh	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	8ada      	ldrh	r2, [r3, #22]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	4603      	mov	r3, r0
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fdc3 	bl	8004168 <u8g2_IsIntersection>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80045f0:	e03b      	b.n	800466a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004606:	429a      	cmp	r2, r3
 8004608:	d205      	bcs.n	8004616 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004622:	429a      	cmp	r2, r3
 8004624:	d905      	bls.n	8004632 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800463e:	429a      	cmp	r2, r3
 8004640:	d205      	bcs.n	800464e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800465a:	429a      	cmp	r2, r3
 800465c:	d905      	bls.n	800466a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ff3b 	bl	80044f6 <u8g2_update_dimension_common>
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff7b 	bl	80045b8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af02      	add	r7, sp, #8
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	4608      	mov	r0, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	461a      	mov	r2, r3
 80046d8:	4603      	mov	r3, r0
 80046da:	817b      	strh	r3, [r7, #10]
 80046dc:	460b      	mov	r3, r1
 80046de:	813b      	strh	r3, [r7, #8]
 80046e0:	4613      	mov	r3, r2
 80046e2:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80046e4:	88f8      	ldrh	r0, [r7, #6]
 80046e6:	893a      	ldrh	r2, [r7, #8]
 80046e8:	8979      	ldrh	r1, [r7, #10]
 80046ea:	7e3b      	ldrb	r3, [r7, #24]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4603      	mov	r3, r0
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff fc27 	bl	8003f44 <u8g2_draw_hv_line_2dir>
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	460b      	mov	r3, r1
 8004724:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <u8x8_ascii_next+0x18>
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	2b0a      	cmp	r3, #10
 8004730:	d102      	bne.n	8004738 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004736:	e001      	b.n	800473c <u8x8_ascii_next+0x22>
  return b;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	b29b      	uxth	r3, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691c      	ldr	r4, [r3, #16]
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	2300      	movs	r3, #0
 800475c:	2120      	movs	r1, #32
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	47a0      	blx	r4
 8004762:	4603      	mov	r3, r0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bd90      	pop	{r4, r7, pc}

0800476c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	460b      	mov	r3, r1
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691c      	ldr	r4, [r3, #16]
 800477e:	7afa      	ldrb	r2, [r7, #11]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2117      	movs	r1, #23
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	47a0      	blx	r4
 8004788:	4603      	mov	r3, r0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bd90      	pop	{r4, r7, pc}

08004792 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800479e:	1cfb      	adds	r3, r7, #3
 80047a0:	461a      	mov	r2, r3
 80047a2:	2101      	movs	r1, #1
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ffe1 	bl	800476c <u8x8_byte_SendBytes>
 80047aa:	4603      	mov	r3, r0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68dc      	ldr	r4, [r3, #12]
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	2300      	movs	r3, #0
 80047c8:	2115      	movs	r1, #21
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	47a0      	blx	r4
 80047ce:	4603      	mov	r3, r0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd90      	pop	{r4, r7, pc}

080047d8 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68dc      	ldr	r4, [r3, #12]
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	2300      	movs	r3, #0
 80047ec:	2116      	movs	r1, #22
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	47a0      	blx	r4
 80047f2:	4603      	mov	r3, r0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}

080047fc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	460b      	mov	r3, r1
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	68dc      	ldr	r4, [r3, #12]
 800480e:	7afa      	ldrb	r2, [r7, #11]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2117      	movs	r1, #23
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	47a0      	blx	r4
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bd90      	pop	{r4, r7, pc}

08004822 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004822:	b590      	push	{r4, r7, lr}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68dc      	ldr	r4, [r3, #12]
 800482e:	2300      	movs	r3, #0
 8004830:	2200      	movs	r2, #0
 8004832:	2118      	movs	r1, #24
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	47a0      	blx	r4
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	bd90      	pop	{r4, r7, pc}

08004842 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004842:	b590      	push	{r4, r7, lr}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68dc      	ldr	r4, [r3, #12]
 800484e:	2300      	movs	r3, #0
 8004850:	2200      	movs	r2, #0
 8004852:	2119      	movs	r1, #25
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	47a0      	blx	r4
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	bd90      	pop	{r4, r7, pc}

08004862 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004862:	b590      	push	{r4, r7, lr}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	73fb      	strb	r3, [r7, #15]
    data++;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2bfe      	cmp	r3, #254	; 0xfe
 800487c:	d031      	beq.n	80048e2 <u8x8_cad_SendSequence+0x80>
 800487e:	2bfe      	cmp	r3, #254	; 0xfe
 8004880:	dc3d      	bgt.n	80048fe <u8x8_cad_SendSequence+0x9c>
 8004882:	2b19      	cmp	r3, #25
 8004884:	dc3b      	bgt.n	80048fe <u8x8_cad_SendSequence+0x9c>
 8004886:	2b18      	cmp	r3, #24
 8004888:	da23      	bge.n	80048d2 <u8x8_cad_SendSequence+0x70>
 800488a:	2b16      	cmp	r3, #22
 800488c:	dc02      	bgt.n	8004894 <u8x8_cad_SendSequence+0x32>
 800488e:	2b15      	cmp	r3, #21
 8004890:	da03      	bge.n	800489a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004892:	e034      	b.n	80048fe <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004894:	2b17      	cmp	r3, #23
 8004896:	d00e      	beq.n	80048b6 <u8x8_cad_SendSequence+0x54>
	return;
 8004898:	e031      	b.n	80048fe <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68dc      	ldr	r4, [r3, #12]
 80048a4:	7bba      	ldrb	r2, [r7, #14]
 80048a6:	7bf9      	ldrb	r1, [r7, #15]
 80048a8:	2300      	movs	r3, #0
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	47a0      	blx	r4
	  data++;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	603b      	str	r3, [r7, #0]
	  break;
 80048b4:	e022      	b.n	80048fc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80048bc:	f107 030e 	add.w	r3, r7, #14
 80048c0:	461a      	mov	r2, r3
 80048c2:	2101      	movs	r1, #1
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff99 	bl	80047fc <u8x8_cad_SendData>
	  data++;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	603b      	str	r3, [r7, #0]
	  break;
 80048d0:	e014      	b.n	80048fc <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68dc      	ldr	r4, [r3, #12]
 80048d6:	7bf9      	ldrb	r1, [r7, #15]
 80048d8:	2300      	movs	r3, #0
 80048da:	2200      	movs	r2, #0
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	47a0      	blx	r4
	  break;
 80048e0:	e00c      	b.n	80048fc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80048e8:	7bbb      	ldrb	r3, [r7, #14]
 80048ea:	461a      	mov	r2, r3
 80048ec:	2129      	movs	r1, #41	; 0x29
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9d9 	bl	8004ca6 <u8x8_gpio_call>
	  data++;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	603b      	str	r3, [r7, #0]
	  break;
 80048fa:	bf00      	nop
    cmd = *data;
 80048fc:	e7b6      	b.n	800486c <u8x8_cad_SendSequence+0xa>
	return;
 80048fe:	bf00      	nop
    }
  }
}
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bd90      	pop	{r4, r7, pc}
	...

08004908 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	72fb      	strb	r3, [r7, #11]
 8004916:	4613      	mov	r3, r2
 8004918:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800491a:	7afb      	ldrb	r3, [r7, #11]
 800491c:	3b14      	subs	r3, #20
 800491e:	2b05      	cmp	r3, #5
 8004920:	d82f      	bhi.n	8004982 <u8x8_cad_001+0x7a>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <u8x8_cad_001+0x20>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	08004971 	.word	0x08004971
 800492c:	08004941 	.word	0x08004941
 8004930:	08004955 	.word	0x08004955
 8004934:	08004969 	.word	0x08004969
 8004938:	08004971 	.word	0x08004971
 800493c:	08004971 	.word	0x08004971
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8004940:	2100      	movs	r1, #0
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff ff00 	bl	8004748 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004948:	7abb      	ldrb	r3, [r7, #10]
 800494a:	4619      	mov	r1, r3
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff ff20 	bl	8004792 <u8x8_byte_SendByte>
      break;
 8004952:	e018      	b.n	8004986 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004954:	2100      	movs	r1, #0
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fef6 	bl	8004748 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800495c:	7abb      	ldrb	r3, [r7, #10]
 800495e:	4619      	mov	r1, r3
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7ff ff16 	bl	8004792 <u8x8_byte_SendByte>
      break;
 8004966:	e00e      	b.n	8004986 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8004968:	2101      	movs	r1, #1
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff feec 	bl	8004748 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691c      	ldr	r4, [r3, #16]
 8004974:	7aba      	ldrb	r2, [r7, #10]
 8004976:	7af9      	ldrb	r1, [r7, #11]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	47a0      	blx	r4
 800497e:	4603      	mov	r3, r0
 8004980:	e002      	b.n	8004988 <u8x8_cad_001+0x80>
    default:
      return 0;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <u8x8_cad_001+0x80>
  }
  return 1;
 8004986:	2301      	movs	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bd90      	pop	{r4, r7, pc}

08004990 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	72fb      	strb	r3, [r7, #11]
 800499e:	4613      	mov	r3, r2
 80049a0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80049a2:	7afb      	ldrb	r3, [r7, #11]
 80049a4:	3b0b      	subs	r3, #11
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	f200 808a 	bhi.w	8004ac0 <u8x8_d_ssd1306_sh1106_generic+0x130>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049c9 	.word	0x080049c9
 80049b8:	08004ac1 	.word	0x08004ac1
 80049bc:	080049e3 	.word	0x080049e3
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004a35 	.word	0x08004a35
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80049c8:	7abb      	ldrb	r3, [r7, #10]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80049ce:	4940      	ldr	r1, [pc, #256]	; (8004ad0 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff ff46 	bl	8004862 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80049d6:	e075      	b.n	8004ac4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80049d8:	493e      	ldr	r1, [pc, #248]	; (8004ad4 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff ff41 	bl	8004862 <u8x8_cad_SendSequence>
      break;
 80049e0:	e070      	b.n	8004ac4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80049e2:	7abb      	ldrb	r3, [r7, #10]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80049e8:	493b      	ldr	r1, [pc, #236]	; (8004ad8 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7ff ff39 	bl	8004862 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	7c9a      	ldrb	r2, [r3, #18]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80049fc:	e062      	b.n	8004ac4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80049fe:	4937      	ldr	r1, [pc, #220]	; (8004adc <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff ff2e 	bl	8004862 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	7cda      	ldrb	r2, [r3, #19]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8004a12:	e057      	b.n	8004ac4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff ff04 	bl	8004822 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004a1a:	2181      	movs	r1, #129	; 0x81
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff fec9 	bl	80047b4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8004a22:	7abb      	ldrb	r3, [r7, #10]
 8004a24:	4619      	mov	r1, r3
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f7ff fed6 	bl	80047d8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f7ff ff08 	bl	8004842 <u8x8_cad_EndTransfer>
      break;
 8004a32:	e047      	b.n	8004ac4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff fef4 	bl	8004822 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	795b      	ldrb	r3, [r3, #5]
 8004a3e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	4413      	add	r3, r2
 8004a50:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004a52:	2140      	movs	r1, #64	; 0x40
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7ff fead 	bl	80047b4 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f043 0310 	orr.w	r3, r3, #16
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	4619      	mov	r1, r3
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff fea3 	bl	80047b4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	4619      	mov	r1, r3
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fead 	bl	80047d8 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	799b      	ldrb	r3, [r3, #6]
 8004a82:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff fea4 	bl	80047d8 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	791b      	ldrb	r3, [r3, #4]
 8004a94:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004a9c:	7dbb      	ldrb	r3, [r7, #22]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff fea8 	bl	80047fc <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004aac:	7abb      	ldrb	r3, [r7, #10]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004ab2:	7abb      	ldrb	r3, [r7, #10]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1eb      	bne.n	8004a90 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff fec2 	bl	8004842 <u8x8_cad_EndTransfer>
      break;
 8004abe:	e001      	b.n	8004ac4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004ac4:	2301      	movs	r3, #1
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	0800516c 	.word	0x0800516c
 8004ad4:	08005174 	.word	0x08005174
 8004ad8:	0800517c 	.word	0x0800517c
 8004adc:	08005184 	.word	0x08005184

08004ae0 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	72fb      	strb	r3, [r7, #11]
 8004aee:	4613      	mov	r3, r2
 8004af0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004af2:	7aba      	ldrb	r2, [r7, #10]
 8004af4:	7af9      	ldrb	r1, [r7, #11]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff ff49 	bl	8004990 <u8x8_d_ssd1306_sh1106_generic>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e014      	b.n	8004b32 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8004b08:	7afb      	ldrb	r3, [r7, #11]
 8004b0a:	2b09      	cmp	r3, #9
 8004b0c:	d009      	beq.n	8004b22 <u8x8_d_ssd1306_128x64_noname+0x42>
 8004b0e:	2b0a      	cmp	r3, #10
 8004b10:	d10c      	bne.n	8004b2c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f82a 	bl	8004b6c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8004b18:	4908      	ldr	r1, [pc, #32]	; (8004b3c <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fea1 	bl	8004862 <u8x8_cad_SendSequence>
      break;
 8004b20:	e006      	b.n	8004b30 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8004b22:	4907      	ldr	r1, [pc, #28]	; (8004b40 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f80d 	bl	8004b44 <u8x8_d_helper_display_setup_memory>
      break;
 8004b2a:	e001      	b.n	8004b30 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8004b30:	2301      	movs	r3, #1
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	08005134 	.word	0x08005134
 8004b40:	0800518c 	.word	0x0800518c

08004b44 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	7c9a      	ldrb	r2, [r3, #18]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695c      	ldr	r4, [r3, #20]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2128      	movs	r1, #40	; 0x28
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68dc      	ldr	r4, [r3, #12]
 8004b86:	2300      	movs	r3, #0
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2114      	movs	r1, #20
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004b90:	2201      	movs	r2, #1
 8004b92:	214b      	movs	r1, #75	; 0x4b
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f886 	bl	8004ca6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	791b      	ldrb	r3, [r3, #4]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2129      	movs	r1, #41	; 0x29
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f87e 	bl	8004ca6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004baa:	2200      	movs	r2, #0
 8004bac:	214b      	movs	r1, #75	; 0x4b
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f879 	bl	8004ca6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	791b      	ldrb	r3, [r3, #4]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2129      	movs	r1, #41	; 0x29
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f871 	bl	8004ca6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	214b      	movs	r1, #75	; 0x4b
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f86c 	bl	8004ca6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	795b      	ldrb	r3, [r3, #5]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2129      	movs	r1, #41	; 0x29
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f864 	bl	8004ca6 <u8x8_gpio_call>
}    
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd90      	pop	{r4, r7, pc}

08004be6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004be6:	b590      	push	{r4, r7, lr}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	4608      	mov	r0, r1
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	70fb      	strb	r3, [r7, #3]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70bb      	strb	r3, [r7, #2]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004c04:	78bb      	ldrb	r3, [r7, #2]
 8004c06:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004c08:	787b      	ldrb	r3, [r7, #1]
 8004c0a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689c      	ldr	r4, [r3, #8]
 8004c14:	f107 0308 	add.w	r3, r7, #8
 8004c18:	2201      	movs	r2, #1
 8004c1a:	210f      	movs	r1, #15
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	47a0      	blx	r4
 8004c20:	4603      	mov	r3, r0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd90      	pop	{r4, r7, pc}

08004c2a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004c2a:	b590      	push	{r4, r7, lr}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689c      	ldr	r4, [r3, #8]
 8004c36:	2300      	movs	r3, #0
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2109      	movs	r1, #9
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	47a0      	blx	r4
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}

08004c48 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689c      	ldr	r4, [r3, #8]
 8004c54:	2300      	movs	r3, #0
 8004c56:	2200      	movs	r2, #0
 8004c58:	210a      	movs	r1, #10
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd90      	pop	{r4, r7, pc}

08004c66 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004c66:	b590      	push	{r4, r7, lr}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689c      	ldr	r4, [r3, #8]
 8004c76:	78fa      	ldrb	r2, [r7, #3]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	210b      	movs	r1, #11
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	47a0      	blx	r4
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd90      	pop	{r4, r7, pc}

08004c88 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689c      	ldr	r4, [r3, #8]
 8004c94:	2300      	movs	r3, #0
 8004c96:	2200      	movs	r2, #0
 8004c98:	2110      	movs	r1, #16
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	47a0      	blx	r4
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd90      	pop	{r4, r7, pc}

08004ca6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004ca6:	b590      	push	{r4, r7, lr}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695c      	ldr	r4, [r3, #20]
 8004cba:	78ba      	ldrb	r2, [r7, #2]
 8004cbc:	78f9      	ldrb	r1, [r7, #3]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	47a0      	blx	r4
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd90      	pop	{r4, r7, pc}

08004ccc <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	72fb      	strb	r3, [r7, #11]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a11      	ldr	r2, [pc, #68]	; (8004d44 <u8x8_SetupDefaults+0x58>)
 8004cfe:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <u8x8_SetupDefaults+0x58>)
 8004d04:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <u8x8_SetupDefaults+0x58>)
 8004d0a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <u8x8_SetupDefaults+0x58>)
 8004d10:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	22ff      	movs	r2, #255	; 0xff
 8004d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	22ff      	movs	r2, #255	; 0xff
 8004d34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	08004ccd 	.word	0x08004ccd

08004d48 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff ffc8 	bl	8004cec <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff ff58 	bl	8004c2a <u8x8_SetupMemory>
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	4d0d      	ldr	r5, [pc, #52]	; (8004dbc <__libc_init_array+0x38>)
 8004d88:	4c0d      	ldr	r4, [pc, #52]	; (8004dc0 <__libc_init_array+0x3c>)
 8004d8a:	1b64      	subs	r4, r4, r5
 8004d8c:	10a4      	asrs	r4, r4, #2
 8004d8e:	2600      	movs	r6, #0
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	4d0b      	ldr	r5, [pc, #44]	; (8004dc4 <__libc_init_array+0x40>)
 8004d96:	4c0c      	ldr	r4, [pc, #48]	; (8004dc8 <__libc_init_array+0x44>)
 8004d98:	f000 f820 	bl	8004ddc <_init>
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	2600      	movs	r6, #0
 8004da2:	42a6      	cmp	r6, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dac:	4798      	blx	r3
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db6:	4798      	blx	r3
 8004db8:	3601      	adds	r6, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	080051ac 	.word	0x080051ac
 8004dc0:	080051ac 	.word	0x080051ac
 8004dc4:	080051ac 	.word	0x080051ac
 8004dc8:	080051b0 	.word	0x080051b0

08004dcc <memset>:
 8004dcc:	4402      	add	r2, r0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d100      	bne.n	8004dd6 <memset+0xa>
 8004dd4:	4770      	bx	lr
 8004dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dda:	e7f9      	b.n	8004dd0 <memset+0x4>

08004ddc <_init>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	bf00      	nop
 8004de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de2:	bc08      	pop	{r3}
 8004de4:	469e      	mov	lr, r3
 8004de6:	4770      	bx	lr

08004de8 <_fini>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	bf00      	nop
 8004dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dee:	bc08      	pop	{r3}
 8004df0:	469e      	mov	lr, r3
 8004df2:	4770      	bx	lr
