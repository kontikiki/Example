
STM32F103C8T6_UART_bufferTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000214c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002258  08002258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002280  08002280  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002280  08002280  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002280  08002280  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002294  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002294  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000637e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001728  00000000  00000000  000263b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  00027ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00028238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016881  00000000  00000000  00028920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c03  00000000  00000000  0003f1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008171e  00000000  00000000  00046da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c84c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c5c  00000000  00000000  000c8514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002240 	.word	0x08002240

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002240 	.word	0x08002240

0800014c <rxBufferInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void rxBufferInit(ring_buffer_t *uart) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2200      	movs	r2, #0
 8000158:	841a      	strh	r2, [r3, #32]
	uart->tail = 0;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2200      	movs	r2, #0
 800015e:	845a      	strh	r2, [r3, #34]	; 0x22
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2204      	movs	r2, #4
 8000164:	2100      	movs	r1, #0
 8000166:	4618      	mov	r0, r3
 8000168:	f002 f862 	bl	8002230 <memset>
}
 800016c:	bf00      	nop
 800016e:	3708      	adds	r7, #8
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	460b      	mov	r3, r1
 800017e:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	8c1b      	ldrh	r3, [r3, #32]
 8000184:	b29b      	uxth	r3, r3
 8000186:	3301      	adds	r3, #1
 8000188:	b29b      	uxth	r3, r3
 800018a:	f003 031f 	and.w	r3, r3, #31
 800018e:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000194:	b29b      	uxth	r3, r3
 8000196:	89fa      	ldrh	r2, [r7, #14]
 8000198:	429a      	cmp	r2, r3
 800019a:	d009      	beq.n	80001b0 <push+0x3c>
		uart->buffer[uart->head] = ch;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	8c1b      	ldrh	r3, [r3, #32]
 80001a0:	b29b      	uxth	r3, r3
 80001a2:	4619      	mov	r1, r3
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	78fa      	ldrb	r2, [r7, #3]
 80001a8:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	89fa      	ldrh	r2, [r7, #14]
 80001ae:	841a      	strh	r2, [r3, #32]
	}
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <pop>:

uint8_t pop(ring_buffer_t *uart) {
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	8c1b      	ldrh	r3, [r3, #32]
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d101      	bne.n	80001d6 <pop+0x1c>
		return -1;
 80001d2:	23ff      	movs	r3, #255	; 0xff
 80001d4:	e011      	b.n	80001fa <pop+0x40>
	} else {

		unsigned char c = uart->buffer[uart->tail];
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80001da:	b29b      	uxth	r3, r3
 80001dc:	461a      	mov	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	5c9b      	ldrb	r3, [r3, r2]
 80001e2:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	3301      	adds	r3, #1
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	b29a      	uxth	r2, r3
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	845a      	strh	r2, [r3, #34]	; 0x22

		return c;
 80001f8:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr

08000204 <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	8c1b      	ldrh	r3, [r3, #32]
 8000210:	b29b      	uxth	r3, r3
 8000212:	b2da      	uxtb	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000218:	b29b      	uxth	r3, r3
 800021a:	b2db      	uxtb	r3, r3
 800021c:	1ad3      	subs	r3, r2, r3
 800021e:	b2db      	uxtb	r3, r3
 8000220:	3320      	adds	r3, #32
 8000222:	b2db      	uxtb	r3, r3
 8000224:	f003 031f 	and.w	r3, r3, #31
 8000228:	73fb      	strb	r3, [r7, #15]
			% RX_BUFFER_SIZE;
	return n;
 800022a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800022e:	4618      	mov	r0, r3
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800023e:	f000 fa43 	bl	80006c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000242:	f000 f847 	bl	80002d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000246:	f000 f8c1 	bl	80003cc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800024a:	f000 f895 	bl	8000378 <MX_USART1_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800024e:	f000 f886 	bl	800035e <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	rxBufferInit(&uart_rx);
 8000252:	481c      	ldr	r0, [pc, #112]	; (80002c4 <main+0x8c>)
 8000254:	f7ff ff7a 	bl	800014c <rxBufferInit>
	HAL_UART_Receive_IT(&huart1, temp, sizeof(temp));
 8000258:	2201      	movs	r2, #1
 800025a:	491b      	ldr	r1, [pc, #108]	; (80002c8 <main+0x90>)
 800025c:	481b      	ldr	r0, [pc, #108]	; (80002cc <main+0x94>)
 800025e:	f001 fae8 	bl	8001832 <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		memset(buff, 0, sizeof(buff));
 8000262:	2220      	movs	r2, #32
 8000264:	2100      	movs	r1, #0
 8000266:	481a      	ldr	r0, [pc, #104]	; (80002d0 <main+0x98>)
 8000268:	f001 ffe2 	bl	8002230 <memset>

		int num = uart_available(&uart_rx);
 800026c:	4815      	ldr	r0, [pc, #84]	; (80002c4 <main+0x8c>)
 800026e:	f7ff ffc9 	bl	8000204 <uart_available>
 8000272:	4603      	mov	r3, r0
 8000274:	60bb      	str	r3, [r7, #8]
		int i;
		if (num) {
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d0f2      	beq.n	8000262 <main+0x2a>
			for (i = 0; i < num; i++) {
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	e011      	b.n	80002a6 <main+0x6e>

				int ch = pop(&uart_rx);
 8000282:	4810      	ldr	r0, [pc, #64]	; (80002c4 <main+0x8c>)
 8000284:	f7ff ff99 	bl	80001ba <pop>
 8000288:	4603      	mov	r3, r0
 800028a:	607b      	str	r3, [r7, #4]
				buff[i] = ch;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	b2d9      	uxtb	r1, r3
 8000290:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <main+0x98>)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	4413      	add	r3, r2
 8000296:	460a      	mov	r2, r1
 8000298:	701a      	strb	r2, [r3, #0]
				if (ch == '\n')
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b0a      	cmp	r3, #10
 800029e:	d007      	beq.n	80002b0 <main+0x78>
			for (i = 0; i < num; i++) {
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dbe9      	blt.n	8000282 <main+0x4a>
 80002ae:	e000      	b.n	80002b2 <main+0x7a>
					break;
 80002b0:	bf00      	nop
			}

			HAL_UART_Transmit(&huart1, buff, i, 500);
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002ba:	4905      	ldr	r1, [pc, #20]	; (80002d0 <main+0x98>)
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <main+0x94>)
 80002be:	f001 fa26 	bl	800170e <HAL_UART_Transmit>
	while (1) {
 80002c2:	e7ce      	b.n	8000262 <main+0x2a>
 80002c4:	2000006c 	.word	0x2000006c
 80002c8:	20000090 	.word	0x20000090
 80002cc:	20000028 	.word	0x20000028
 80002d0:	20000094 	.word	0x20000094

080002d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 ffa4 	bl	8002230 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fd8f 	bl	8000e40 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
		Error_Handler();
 8000328:	f000 f8e0 	bl	80004ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fffc 	bl	8001344 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
		Error_Handler();
 8000352:	f000 f8cb 	bl	80004ec <Error_Handler>
	}
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800035e:	b580      	push	{r7, lr}
 8000360:	af00      	add	r7, sp, #0
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	2025      	movs	r0, #37	; 0x25
 8000368:	f000 fae7 	bl	800093a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800036c:	2025      	movs	r0, #37	; 0x25
 800036e:	f000 fb00 	bl	8000972 <HAL_NVIC_EnableIRQ>
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <MX_USART1_UART_Init+0x50>)
 8000380:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000388:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003b0:	f001 f960 	bl	8001674 <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80003ba:	f000 f897 	bl	80004ec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40013800 	.word	0x40013800

080003cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_GPIO_Init+0x58>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a13      	ldr	r2, [pc, #76]	; (8000424 <MX_GPIO_Init+0x58>)
 80003d8:	f043 0310 	orr.w	r3, r3, #16
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_GPIO_Init+0x58>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0310 	and.w	r3, r3, #16
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_GPIO_Init+0x58>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <MX_GPIO_Init+0x58>)
 80003f0:	f043 0320 	orr.w	r3, r3, #32
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_GPIO_Init+0x58>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0320 	and.w	r3, r3, #32
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_GPIO_Init+0x58>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <MX_GPIO_Init+0x58>)
 8000408:	f043 0304 	orr.w	r3, r3, #4
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <MX_GPIO_Init+0x58>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0304 	and.w	r3, r3, #4
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000

08000428 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	 HAL_UART_AbortReceive(&huart1);
	 HAL_UART_Init(&huart1);
	 HAL_UART_Receive_IT(&huart1, temp, sizeof(temp));
	 }
	 */
	if (huart->Instance == USART1) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <HAL_UART_RxCpltCallback+0x48>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d115      	bne.n	8000466 <HAL_UART_RxCpltCallback+0x3e>

		for (int i = 0; i < sizeof(temp); i++)
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e00a      	b.n	8000456 <HAL_UART_RxCpltCallback+0x2e>
			push(&uart_rx, temp[i]);
 8000440:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <HAL_UART_RxCpltCallback+0x4c>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	4413      	add	r3, r2
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4619      	mov	r1, r3
 800044a:	480b      	ldr	r0, [pc, #44]	; (8000478 <HAL_UART_RxCpltCallback+0x50>)
 800044c:	f7ff fe92 	bl	8000174 <push>
		for (int i = 0; i < sizeof(temp); i++)
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3301      	adds	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f1      	beq.n	8000440 <HAL_UART_RxCpltCallback+0x18>

		HAL_UART_Receive_IT(&huart1, temp, sizeof(temp));
 800045c:	2201      	movs	r2, #1
 800045e:	4905      	ldr	r1, [pc, #20]	; (8000474 <HAL_UART_RxCpltCallback+0x4c>)
 8000460:	4806      	ldr	r0, [pc, #24]	; (800047c <HAL_UART_RxCpltCallback+0x54>)
 8000462:	f001 f9e6 	bl	8001832 <HAL_UART_Receive_IT>
	}
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40013800 	.word	0x40013800
 8000474:	20000090 	.word	0x20000090
 8000478:	2000006c 	.word	0x2000006c
 800047c:	20000028 	.word	0x20000028

08000480 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <HAL_UART_ErrorCallback+0x64>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d123      	bne.n	80004da <HAL_UART_ErrorCallback+0x5a>

		//if (huart->ErrorCode == HAL_UART_ERROR_ORE)
//		  {
		    HAL_UART_AbortReceive_IT(huart);
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f001 f9fe 	bl	8001894 <HAL_UART_AbortReceive_IT>
		    __HAL_UART_CLEAR_OREFLAG(huart);
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
		    huart->RxState = HAL_UART_STATE_READY;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2220      	movs	r2, #32
 80004b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		    /* Disable Rx Interrupts */
		    __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	68da      	ldr	r2, [r3, #12]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f022 0220 	bic.w	r2, r2, #32
 80004c4:	60da      	str	r2, [r3, #12]

		    /* Restart UART reception */
		    if (HAL_UART_Receive_IT(huart, temp, sizeof(temp)) != HAL_OK)
 80004c6:	2201      	movs	r2, #1
 80004c8:	4907      	ldr	r1, [pc, #28]	; (80004e8 <HAL_UART_ErrorCallback+0x68>)
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f001 f9b1 	bl	8001832 <HAL_UART_Receive_IT>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <HAL_UART_ErrorCallback+0x5a>
		    {
		      Error_Handler();
 80004d6:	f000 f809 	bl	80004ec <Error_Handler>
		    }
		//  }

	}

}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40013800 	.word	0x40013800
 80004e8:	20000090 	.word	0x20000090

080004ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
//	HAL_UART_ErrorCallback(&huart1);
	while (1) {
 80004f0:	e7fe      	b.n	80004f0 <Error_Handler+0x4>
	...

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <HAL_MspInit+0x6c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <HAL_MspInit+0x6c>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <HAL_MspInit+0x6c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <HAL_MspInit+0x6c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <HAL_MspInit+0x6c>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <HAL_MspInit+0x6c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fa03 	bl	800093a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000534:	2001      	movs	r0, #1
 8000536:	f000 fa1c 	bl	8000972 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <HAL_MspInit+0x70>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_MspInit+0x70>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	40010000 	.word	0x40010000

08000568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <HAL_UART_MspInit+0x8c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d131      	bne.n	80005ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <HAL_UART_MspInit+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <HAL_UART_MspInit+0x90>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <HAL_UART_MspInit+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_UART_MspInit+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <HAL_UART_MspInit+0x90>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_UART_MspInit+0x90>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <HAL_UART_MspInit+0x94>)
 80005ce:	f000 fa9b 	bl	8000b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <HAL_UART_MspInit+0x94>)
 80005e8:	f000 fa8e 	bl	8000b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40013800 	.word	0x40013800
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler+0x4>

08000612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <UsageFault_Handler+0x4>

0800061e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000646:	f000 f885 	bl	8000754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}

0800064e <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000652:	f000 fbdd 	bl	8000e10 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <USART1_IRQHandler+0x10>)
 8000662:	f001 f981 	bl	8001968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028

08000670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000696:	f000 f810 	bl	80006ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069a:	f001 fda5 	bl	80021e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fdcb 	bl	8000238 <main>
  bx lr
 80006a2:	4770      	bx	lr
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006ac:	08002288 	.word	0x08002288
  ldr r2, =_sbss
 80006b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b4:	200000b8 	.word	0x200000b8

080006b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_2_IRQHandler>

080006ba <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
	...

080006c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_Init+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_Init+0x28>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f923 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	200f      	movs	r0, #15
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f7ff ff06 	bl	80004f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f93b 	bl	800098e <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f903 	bl	800093a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x1c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x20>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <HAL_IncTick+0x20>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000008 	.word	0x20000008
 8000774:	200000b4 	.word	0x200000b4

08000778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return uwTick;
 800077c:	4b02      	ldr	r3, [pc, #8]	; (8000788 <HAL_GetTick+0x10>)
 800077e:	681b      	ldr	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	200000b4 	.word	0x200000b4

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db0b      	blt.n	800081a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 021f 	and.w	r2, r3, #31
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <__NVIC_EnableIRQ+0x34>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	095b      	lsrs	r3, r3, #5
 8000810:	2001      	movs	r0, #1
 8000812:	fa00 f202 	lsl.w	r2, r0, r2
 8000816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f1c3 0307 	rsb	r3, r3, #7
 8000896:	2b04      	cmp	r3, #4
 8000898:	bf28      	it	cs
 800089a:	2304      	movcs	r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d902      	bls.n	80008ac <NVIC_EncodePriority+0x30>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3b03      	subs	r3, #3
 80008aa:	e000      	b.n	80008ae <NVIC_EncodePriority+0x32>
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43da      	mvns	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	401a      	ands	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43d9      	mvns	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	4313      	orrs	r3, r2
         );
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f7ff ff90 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff2d 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff42 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff90 	bl	800087c <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5f 	bl	8000828 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff35 	bl	80007f0 <__NVIC_EnableIRQ>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffa2 	bl	80008e0 <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d008      	beq.n	80009ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2204      	movs	r2, #4
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e020      	b.n	8000a10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 020e 	bic.w	r2, r2, #14
 80009dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f022 0201 	bic.w	r2, r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
	...

08000a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d005      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2204      	movs	r2, #4
 8000a36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e051      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 020e 	bic.w	r2, r2, #14
 8000a4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0201 	bic.w	r2, r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a22      	ldr	r2, [pc, #136]	; (8000aec <HAL_DMA_Abort_IT+0xd0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d029      	beq.n	8000abc <HAL_DMA_Abort_IT+0xa0>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <HAL_DMA_Abort_IT+0xd4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d022      	beq.n	8000ab8 <HAL_DMA_Abort_IT+0x9c>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <HAL_DMA_Abort_IT+0xd8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d01a      	beq.n	8000ab2 <HAL_DMA_Abort_IT+0x96>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_DMA_Abort_IT+0xdc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d012      	beq.n	8000aac <HAL_DMA_Abort_IT+0x90>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <HAL_DMA_Abort_IT+0xe0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00a      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x8a>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <HAL_DMA_Abort_IT+0xe4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d102      	bne.n	8000aa0 <HAL_DMA_Abort_IT+0x84>
 8000a9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a9e:	e00e      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa4:	e00b      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aaa:	e008      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	e005      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab6:	e002      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000ab8:	2310      	movs	r3, #16
 8000aba:	e000      	b.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000abc:	2301      	movs	r3, #1
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_DMA_Abort_IT+0xe8>)
 8000ac0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	4798      	blx	r3
    } 
  }
  return status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40020008 	.word	0x40020008
 8000af0:	4002001c 	.word	0x4002001c
 8000af4:	40020030 	.word	0x40020030
 8000af8:	40020044 	.word	0x40020044
 8000afc:	40020058 	.word	0x40020058
 8000b00:	4002006c 	.word	0x4002006c
 8000b04:	40020000 	.word	0x40020000

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b08b      	sub	sp, #44	; 0x2c
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1a:	e169      	b.n	8000df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 8158 	bne.w	8000dea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	4a9a      	ldr	r2, [pc, #616]	; (8000da8 <HAL_GPIO_Init+0x2a0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d05e      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b44:	4a98      	ldr	r2, [pc, #608]	; (8000da8 <HAL_GPIO_Init+0x2a0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d875      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b4a:	4a98      	ldr	r2, [pc, #608]	; (8000dac <HAL_GPIO_Init+0x2a4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d058      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b50:	4a96      	ldr	r2, [pc, #600]	; (8000dac <HAL_GPIO_Init+0x2a4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d86f      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b56:	4a96      	ldr	r2, [pc, #600]	; (8000db0 <HAL_GPIO_Init+0x2a8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d052      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b5c:	4a94      	ldr	r2, [pc, #592]	; (8000db0 <HAL_GPIO_Init+0x2a8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d869      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b62:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <HAL_GPIO_Init+0x2ac>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d04c      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b68:	4a92      	ldr	r2, [pc, #584]	; (8000db4 <HAL_GPIO_Init+0x2ac>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d863      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b6e:	4a92      	ldr	r2, [pc, #584]	; (8000db8 <HAL_GPIO_Init+0x2b0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d046      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
 8000b74:	4a90      	ldr	r2, [pc, #576]	; (8000db8 <HAL_GPIO_Init+0x2b0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d85d      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d82a      	bhi.n	8000bd4 <HAL_GPIO_Init+0xcc>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d859      	bhi.n	8000c36 <HAL_GPIO_Init+0x12e>
 8000b82:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <HAL_GPIO_Init+0x80>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000c03 	.word	0x08000c03
 8000b8c:	08000bdd 	.word	0x08000bdd
 8000b90:	08000bef 	.word	0x08000bef
 8000b94:	08000c31 	.word	0x08000c31
 8000b98:	08000c37 	.word	0x08000c37
 8000b9c:	08000c37 	.word	0x08000c37
 8000ba0:	08000c37 	.word	0x08000c37
 8000ba4:	08000c37 	.word	0x08000c37
 8000ba8:	08000c37 	.word	0x08000c37
 8000bac:	08000c37 	.word	0x08000c37
 8000bb0:	08000c37 	.word	0x08000c37
 8000bb4:	08000c37 	.word	0x08000c37
 8000bb8:	08000c37 	.word	0x08000c37
 8000bbc:	08000c37 	.word	0x08000c37
 8000bc0:	08000c37 	.word	0x08000c37
 8000bc4:	08000c37 	.word	0x08000c37
 8000bc8:	08000c37 	.word	0x08000c37
 8000bcc:	08000be5 	.word	0x08000be5
 8000bd0:	08000bf9 	.word	0x08000bf9
 8000bd4:	4a79      	ldr	r2, [pc, #484]	; (8000dbc <HAL_GPIO_Init+0x2b4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bda:	e02c      	b.n	8000c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	623b      	str	r3, [r7, #32]
          break;
 8000be2:	e029      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	3304      	adds	r3, #4
 8000bea:	623b      	str	r3, [r7, #32]
          break;
 8000bec:	e024      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	3308      	adds	r3, #8
 8000bf4:	623b      	str	r3, [r7, #32]
          break;
 8000bf6:	e01f      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	330c      	adds	r3, #12
 8000bfe:	623b      	str	r3, [r7, #32]
          break;
 8000c00:	e01a      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	623b      	str	r3, [r7, #32]
          break;
 8000c0e:	e013      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d105      	bne.n	8000c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	611a      	str	r2, [r3, #16]
          break;
 8000c22:	e009      	b.n	8000c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	615a      	str	r2, [r3, #20]
          break;
 8000c2e:	e003      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e000      	b.n	8000c38 <HAL_GPIO_Init+0x130>
          break;
 8000c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	2bff      	cmp	r3, #255	; 0xff
 8000c3c:	d801      	bhi.n	8000c42 <HAL_GPIO_Init+0x13a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	e001      	b.n	8000c46 <HAL_GPIO_Init+0x13e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3304      	adds	r3, #4
 8000c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d802      	bhi.n	8000c54 <HAL_GPIO_Init+0x14c>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	e002      	b.n	8000c5a <HAL_GPIO_Init+0x152>
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	3b08      	subs	r3, #8
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	210f      	movs	r1, #15
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	6a39      	ldr	r1, [r7, #32]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	431a      	orrs	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 80b1 	beq.w	8000dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c88:	4b4d      	ldr	r3, [pc, #308]	; (8000dc0 <HAL_GPIO_Init+0x2b8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a4c      	ldr	r2, [pc, #304]	; (8000dc0 <HAL_GPIO_Init+0x2b8>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <HAL_GPIO_Init+0x2b8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca0:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <HAL_GPIO_Init+0x2bc>)
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a40      	ldr	r2, [pc, #256]	; (8000dc8 <HAL_GPIO_Init+0x2c0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d013      	beq.n	8000cf4 <HAL_GPIO_Init+0x1ec>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a3f      	ldr	r2, [pc, #252]	; (8000dcc <HAL_GPIO_Init+0x2c4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d00d      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e8>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a3e      	ldr	r2, [pc, #248]	; (8000dd0 <HAL_GPIO_Init+0x2c8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d007      	beq.n	8000cec <HAL_GPIO_Init+0x1e4>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3d      	ldr	r2, [pc, #244]	; (8000dd4 <HAL_GPIO_Init+0x2cc>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d101      	bne.n	8000ce8 <HAL_GPIO_Init+0x1e0>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000ce8:	2304      	movs	r3, #4
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d06:	492f      	ldr	r1, [pc, #188]	; (8000dc4 <HAL_GPIO_Init+0x2bc>)
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	492c      	ldr	r1, [pc, #176]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4928      	ldr	r1, [pc, #160]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4922      	ldr	r1, [pc, #136]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	491e      	ldr	r1, [pc, #120]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	4918      	ldr	r1, [pc, #96]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4914      	ldr	r1, [pc, #80]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d021      	beq.n	8000ddc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
 8000da4:	e021      	b.n	8000dea <HAL_GPIO_Init+0x2e2>
 8000da6:	bf00      	nop
 8000da8:	10320000 	.word	0x10320000
 8000dac:	10310000 	.word	0x10310000
 8000db0:	10220000 	.word	0x10220000
 8000db4:	10210000 	.word	0x10210000
 8000db8:	10120000 	.word	0x10120000
 8000dbc:	10110000 	.word	0x10110000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40011400 	.word	0x40011400
 8000dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_GPIO_Init+0x304>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4909      	ldr	r1, [pc, #36]	; (8000e0c <HAL_GPIO_Init+0x304>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3301      	adds	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f47f ae8e 	bne.w	8000b1c <HAL_GPIO_Init+0x14>
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	372c      	adds	r7, #44	; 0x2c
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40010400 	.word	0x40010400

08000e10 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_PWR_PVD_IRQHandler+0x20>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8000e20:	f000 f808 	bl	8000e34 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <HAL_PWR_PVD_IRQHandler+0x20>)
 8000e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e2a:	615a      	str	r2, [r3, #20]
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e272      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8087 	beq.w	8000f6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e60:	4b92      	ldr	r3, [pc, #584]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d00c      	beq.n	8000e86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e6c:	4b8f      	ldr	r3, [pc, #572]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 030c 	and.w	r3, r3, #12
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d112      	bne.n	8000e9e <HAL_RCC_OscConfig+0x5e>
 8000e78:	4b8c      	ldr	r3, [pc, #560]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e84:	d10b      	bne.n	8000e9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e86:	4b89      	ldr	r3, [pc, #548]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d06c      	beq.n	8000f6c <HAL_RCC_OscConfig+0x12c>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d168      	bne.n	8000f6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e24c      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea6:	d106      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x76>
 8000ea8:	4b80      	ldr	r3, [pc, #512]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a7f      	ldr	r2, [pc, #508]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e02e      	b.n	8000f14 <HAL_RCC_OscConfig+0xd4>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x98>
 8000ebe:	4b7b      	ldr	r3, [pc, #492]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4b78      	ldr	r3, [pc, #480]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a77      	ldr	r2, [pc, #476]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e01d      	b.n	8000f14 <HAL_RCC_OscConfig+0xd4>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee0:	d10c      	bne.n	8000efc <HAL_RCC_OscConfig+0xbc>
 8000ee2:	4b72      	ldr	r3, [pc, #456]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a71      	ldr	r2, [pc, #452]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	4b6f      	ldr	r3, [pc, #444]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a6e      	ldr	r2, [pc, #440]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	e00b      	b.n	8000f14 <HAL_RCC_OscConfig+0xd4>
 8000efc:	4b6b      	ldr	r3, [pc, #428]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a6a      	ldr	r2, [pc, #424]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b68      	ldr	r3, [pc, #416]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a67      	ldr	r2, [pc, #412]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d013      	beq.n	8000f44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc2c 	bl	8000778 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fc28 	bl	8000778 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e200      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f0      	beq.n	8000f24 <HAL_RCC_OscConfig+0xe4>
 8000f42:	e014      	b.n	8000f6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fc18 	bl	8000778 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f4c:	f7ff fc14 	bl	8000778 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b64      	cmp	r3, #100	; 0x64
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e1ec      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5e:	4b53      	ldr	r3, [pc, #332]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x10c>
 8000f6a:	e000      	b.n	8000f6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d063      	beq.n	8001042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f7a:	4b4c      	ldr	r3, [pc, #304]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00b      	beq.n	8000f9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f86:	4b49      	ldr	r3, [pc, #292]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d11c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x18c>
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d116      	bne.n	8000fcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x176>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e1c0      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb6:	4b3d      	ldr	r3, [pc, #244]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4939      	ldr	r1, [pc, #228]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fca:	e03a      	b.n	8001042 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d020      	beq.n	8001016 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fbcd 	bl	8000778 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fbc9 	bl	8000778 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e1a1      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4927      	ldr	r1, [pc, #156]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8001010:	4313      	orrs	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
 8001014:	e015      	b.n	8001042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fbac 	bl	8000778 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001024:	f7ff fba8 	bl	8000778 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e180      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d03a      	beq.n	80010c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d019      	beq.n	800108a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_RCC_OscConfig+0x274>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105c:	f7ff fb8c 	bl	8000778 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fb88 	bl	8000778 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e160      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_RCC_OscConfig+0x26c>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f0      	beq.n	8001064 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f000 fad8 	bl	8001638 <RCC_Delay>
 8001088:	e01c      	b.n	80010c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_RCC_OscConfig+0x274>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001090:	f7ff fb72 	bl	8000778 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001096:	e00f      	b.n	80010b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001098:	f7ff fb6e 	bl	8000778 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d908      	bls.n	80010b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e146      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	42420000 	.word	0x42420000
 80010b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b8:	4b92      	ldr	r3, [pc, #584]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1e9      	bne.n	8001098 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80a6 	beq.w	800121e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d6:	4b8b      	ldr	r3, [pc, #556]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10d      	bne.n	80010fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b88      	ldr	r3, [pc, #544]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a87      	ldr	r2, [pc, #540]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b85      	ldr	r3, [pc, #532]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010fa:	2301      	movs	r3, #1
 80010fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fe:	4b82      	ldr	r3, [pc, #520]	; (8001308 <HAL_RCC_OscConfig+0x4c8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	2b00      	cmp	r3, #0
 8001108:	d118      	bne.n	800113c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110a:	4b7f      	ldr	r3, [pc, #508]	; (8001308 <HAL_RCC_OscConfig+0x4c8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a7e      	ldr	r2, [pc, #504]	; (8001308 <HAL_RCC_OscConfig+0x4c8>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb2f 	bl	8000778 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111e:	f7ff fb2b 	bl	8000778 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e103      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001130:	4b75      	ldr	r3, [pc, #468]	; (8001308 <HAL_RCC_OscConfig+0x4c8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x312>
 8001144:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a6e      	ldr	r2, [pc, #440]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6213      	str	r3, [r2, #32]
 8001150:	e02d      	b.n	80011ae <HAL_RCC_OscConfig+0x36e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x334>
 800115a:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a69      	ldr	r2, [pc, #420]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	4b67      	ldr	r3, [pc, #412]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a66      	ldr	r2, [pc, #408]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	e01c      	b.n	80011ae <HAL_RCC_OscConfig+0x36e>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b05      	cmp	r3, #5
 800117a:	d10c      	bne.n	8001196 <HAL_RCC_OscConfig+0x356>
 800117c:	4b61      	ldr	r3, [pc, #388]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a60      	ldr	r2, [pc, #384]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6213      	str	r3, [r2, #32]
 8001194:	e00b      	b.n	80011ae <HAL_RCC_OscConfig+0x36e>
 8001196:	4b5b      	ldr	r3, [pc, #364]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	4b58      	ldr	r3, [pc, #352]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d015      	beq.n	80011e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fadf 	bl	8000778 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fadb 	bl	8000778 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e0b1      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d4:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0ee      	beq.n	80011be <HAL_RCC_OscConfig+0x37e>
 80011e0:	e014      	b.n	800120c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fac9 	bl	8000778 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff fac5 	bl	8000778 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e09b      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1ee      	bne.n	80011ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d105      	bne.n	800121e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a3b      	ldr	r2, [pc, #236]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8087 	beq.w	8001336 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001228:	4b36      	ldr	r3, [pc, #216]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d061      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d146      	bne.n	80012ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_RCC_OscConfig+0x4cc>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fa99 	bl	8000778 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124a:	f7ff fa95 	bl	8000778 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e06d      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f0      	bne.n	800124a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001270:	d108      	bne.n	8001284 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	4921      	ldr	r1, [pc, #132]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a19      	ldr	r1, [r3, #32]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	430b      	orrs	r3, r1
 8001296:	491b      	ldr	r1, [pc, #108]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x4cc>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fa69 	bl	8000778 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fa65 	bl	8000778 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e03d      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x46a>
 80012c8:	e035      	b.n	8001336 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_RCC_OscConfig+0x4cc>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fa52 	bl	8000778 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff fa4e 	bl	8000778 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e026      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x498>
 80012f6:	e01e      	b.n	8001336 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d107      	bne.n	8001310 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e019      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
 8001304:	40021000 	.word	0x40021000
 8001308:	40007000 	.word	0x40007000
 800130c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_OscConfig+0x500>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	429a      	cmp	r2, r3
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0d0      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001358:	4b6a      	ldr	r3, [pc, #424]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d910      	bls.n	8001388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001366:	4b67      	ldr	r3, [pc, #412]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 0207 	bic.w	r2, r3, #7
 800136e:	4965      	ldr	r1, [pc, #404]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0b8      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	494d      	ldr	r1, [pc, #308]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d040      	beq.n	8001464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d115      	bne.n	8001422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e07f      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e073      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001412:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e06b      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f023 0203 	bic.w	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4936      	ldr	r1, [pc, #216]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001434:	f7ff f9a0 	bl	8000778 <HAL_GetTick>
 8001438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143a:	e00a      	b.n	8001452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143c:	f7ff f99c 	bl	8000778 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e053      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 020c 	and.w	r2, r3, #12
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	429a      	cmp	r2, r3
 8001462:	d1eb      	bne.n	800143c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d210      	bcs.n	8001494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 0207 	bic.w	r2, r3, #7
 800147a:	4922      	ldr	r1, [pc, #136]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e032      	b.n	80014fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4916      	ldr	r1, [pc, #88]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	490e      	ldr	r1, [pc, #56]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014d2:	f000 f821 	bl	8001518 <HAL_RCC_GetSysClockFreq>
 80014d6:	4602      	mov	r2, r0
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	490a      	ldr	r1, [pc, #40]	; (800150c <HAL_RCC_ClockConfig+0x1c8>)
 80014e4:	5ccb      	ldrb	r3, [r1, r3]
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <HAL_RCC_ClockConfig+0x1cc>)
 80014ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_ClockConfig+0x1d0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f8fe 	bl	80006f4 <HAL_InitTick>

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40022000 	.word	0x40022000
 8001508:	40021000 	.word	0x40021000
 800150c:	08002268 	.word	0x08002268
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001518:	b490      	push	{r4, r7}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001520:	1d3c      	adds	r4, r7, #4
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001528:	f240 2301 	movw	r3, #513	; 0x201
 800152c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b04      	cmp	r3, #4
 8001550:	d002      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0x40>
 8001552:	2b08      	cmp	r3, #8
 8001554:	d003      	beq.n	800155e <HAL_RCC_GetSysClockFreq+0x46>
 8001556:	e02b      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800155a:	623b      	str	r3, [r7, #32]
      break;
 800155c:	e02b      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	0c9b      	lsrs	r3, r3, #18
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3328      	adds	r3, #40	; 0x28
 8001568:	443b      	add	r3, r7
 800156a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800156e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d012      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	0c5b      	lsrs	r3, r3, #17
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	3328      	adds	r3, #40	; 0x28
 8001586:	443b      	add	r3, r7
 8001588:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800158c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001592:	fb03 f202 	mul.w	r2, r3, r2
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	fbb2 f3f3 	udiv	r3, r2, r3
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	e004      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	623b      	str	r3, [r7, #32]
      break;
 80015ae:	e002      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80015b2:	623b      	str	r3, [r7, #32]
      break;
 80015b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015b6:	6a3b      	ldr	r3, [r7, #32]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc90      	pop	{r4, r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	08002258 	.word	0x08002258
 80015c8:	40021000 	.word	0x40021000
 80015cc:	007a1200 	.word	0x007a1200
 80015d0:	003d0900 	.word	0x003d0900

080015d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000000 	.word	0x20000000

080015e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015ec:	f7ff fff2 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	4903      	ldr	r1, [pc, #12]	; (800160c <HAL_RCC_GetPCLK1Freq+0x24>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	08002278 	.word	0x08002278

08001610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001614:	f7ff ffde 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 8001618:	4602      	mov	r2, r0
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	0adb      	lsrs	r3, r3, #11
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	4903      	ldr	r1, [pc, #12]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800162c:	4618      	mov	r0, r3
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	08002278 	.word	0x08002278

08001638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <RCC_Delay+0x34>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <RCC_Delay+0x38>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0a5b      	lsrs	r3, r3, #9
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001654:	bf00      	nop
  }
  while (Delay --);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	60fa      	str	r2, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f9      	bne.n	8001654 <RCC_Delay+0x1c>
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000000 	.word	0x20000000
 8001670:	10624dd3 	.word	0x10624dd3

08001674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e03f      	b.n	8001706 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe ff64 	bl	8000568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2224      	movs	r2, #36	; 0x24
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fd07 	bl	80020cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2220      	movs	r2, #32
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2220      	movs	r2, #32
 8001700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b08a      	sub	sp, #40	; 0x28
 8001712:	af02      	add	r7, sp, #8
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b20      	cmp	r3, #32
 800172c:	d17c      	bne.n	8001828 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_UART_Transmit+0x2c>
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e075      	b.n	800182a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_UART_Transmit+0x3e>
 8001748:	2302      	movs	r3, #2
 800174a:	e06e      	b.n	800182a <HAL_UART_Transmit+0x11c>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2221      	movs	r2, #33	; 0x21
 800175e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001762:	f7ff f809 	bl	8000778 <HAL_GetTick>
 8001766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	88fa      	ldrh	r2, [r7, #6]
 800176c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	88fa      	ldrh	r2, [r7, #6]
 8001772:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177c:	d108      	bne.n	8001790 <HAL_UART_Transmit+0x82>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d104      	bne.n	8001790 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	e003      	b.n	8001798 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80017a0:	e02a      	b.n	80017f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2200      	movs	r2, #0
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 faa2 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e036      	b.n	800182a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10b      	bne.n	80017da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	3302      	adds	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	e007      	b.n	80017ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3301      	adds	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1cf      	bne.n	80017a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2200      	movs	r2, #0
 800180a:	2140      	movs	r1, #64	; 0x40
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fa72 	bl	8001cf6 <UART_WaitOnFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e006      	b.n	800182a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e000      	b.n	800182a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001828:	2302      	movs	r3, #2
  }
}
 800182a:	4618      	mov	r0, r3
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	4613      	mov	r3, r2
 800183e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b20      	cmp	r3, #32
 800184a:	d11d      	bne.n	8001888 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_UART_Receive_IT+0x26>
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e016      	b.n	800188a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_UART_Receive_IT+0x38>
 8001866:	2302      	movs	r3, #2
 8001868:	e00f      	b.n	800188a <HAL_UART_Receive_IT+0x58>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	461a      	mov	r2, r3
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fa83 	bl	8001d8a <UART_Start_Receive_IT>
 8001884:	4603      	mov	r3, r0
 8001886:	e000      	b.n	800188a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001888:	2302      	movs	r3, #2
  }
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80018aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d107      	bne.n	80018d4 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0210 	bic.w	r2, r2, #16
 80018d2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d02d      	beq.n	800193e <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018f0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d013      	beq.n	8001922 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_UART_AbortReceive_IT+0xd0>)
 8001900:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f888 	bl	8000a1c <HAL_DMA_Abort_IT>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d022      	beq.n	8001958 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800191c:	4610      	mov	r0, r2
 800191e:	4798      	blx	r3
 8001920:	e01a      	b.n	8001958 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f9c9 	bl	8001cce <HAL_UART_AbortReceiveCpltCallback>
 800193c:	e00c      	b.n	8001958 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f9bb 	bl	8001cce <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	08001e7d 	.word	0x08001e7d

08001968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_UART_IRQHandler+0x52>
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fae1 	bl	8001f7a <UART_Receive_IT>
      return;
 80019b8:	e17b      	b.n	8001cb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80b1 	beq.w	8001b24 <HAL_UART_IRQHandler+0x1bc>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_UART_IRQHandler+0x70>
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80a6 	beq.w	8001b24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_UART_IRQHandler+0x90>
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <HAL_UART_IRQHandler+0xb0>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f043 0202 	orr.w	r2, r3, #2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <HAL_UART_IRQHandler+0xd0>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f043 0204 	orr.w	r2, r3, #4
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00f      	beq.n	8001a62 <HAL_UART_IRQHandler+0xfa>
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d104      	bne.n	8001a56 <HAL_UART_IRQHandler+0xee>
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f043 0208 	orr.w	r2, r3, #8
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 811e 	beq.w	8001ca8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_UART_IRQHandler+0x11e>
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fa7a 	bl	8001f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <HAL_UART_IRQHandler+0x146>
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d031      	beq.n	8001b12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f9a4 	bl	8001dfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d023      	beq.n	8001b0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d013      	beq.n	8001b02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	4a76      	ldr	r2, [pc, #472]	; (8001cb8 <HAL_UART_IRQHandler+0x350>)
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe ff98 	bl	8000a1c <HAL_DMA_Abort_IT>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d016      	beq.n	8001b20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001afc:	4610      	mov	r0, r2
 8001afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b00:	e00e      	b.n	8001b20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe fcbc 	bl	8000480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b08:	e00a      	b.n	8001b20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fcb8 	bl	8000480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b10:	e006      	b.n	8001b20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fcb4 	bl	8000480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001b1e:	e0c3      	b.n	8001ca8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b20:	bf00      	nop
    return;
 8001b22:	e0c1      	b.n	8001ca8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	f040 80a1 	bne.w	8001c70 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 809b 	beq.w	8001c70 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8095 	beq.w	8001c70 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d04e      	beq.n	8001c08 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001b74:	8a3b      	ldrh	r3, [r7, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8098 	beq.w	8001cac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b80:	8a3a      	ldrh	r2, [r7, #16]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	f080 8092 	bcs.w	8001cac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	8a3a      	ldrh	r2, [r7, #16]
 8001b8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d02b      	beq.n	8001bf0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0210 	bic.w	r2, r2, #16
 8001be4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fedb 	bl	80009a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f86d 	bl	8001ce0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c06:	e051      	b.n	8001cac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d047      	beq.n	8001cb0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001c20:	8a7b      	ldrh	r3, [r7, #18]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d044      	beq.n	8001cb0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0210 	bic.w	r2, r2, #16
 8001c62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c64:	8a7b      	ldrh	r3, [r7, #18]
 8001c66:	4619      	mov	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f839 	bl	8001ce0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c6e:	e01f      	b.n	8001cb0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d008      	beq.n	8001c8c <HAL_UART_IRQHandler+0x324>
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f911 	bl	8001eac <UART_Transmit_IT>
    return;
 8001c8a:	e012      	b.n	8001cb2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00d      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x34a>
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f952 	bl	8001f4a <UART_EndTransmit_IT>
    return;
 8001ca6:	e004      	b.n	8001cb2 <HAL_UART_IRQHandler+0x34a>
    return;
 8001ca8:	bf00      	nop
 8001caa:	e002      	b.n	8001cb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8001cb0:	bf00      	nop
  }
}
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08001e55 	.word	0x08001e55

08001cbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d06:	e02c      	b.n	8001d62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0e:	d028      	beq.n	8001d62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d16:	f7fe fd2f 	bl	8000778 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d21d      	bcs.n	8001d62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e00f      	b.n	8001d82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	bf0c      	ite	eq
 8001d72:	2301      	moveq	r3, #1
 8001d74:	2300      	movne	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d0c3      	beq.n	8001d08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	4613      	mov	r3, r2
 8001d96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2222      	movs	r2, #34	; 0x22
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0210 	bic.w	r2, r2, #16
 8001e3a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7fe fb06 	bl	8000480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff15 	bl	8001cce <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b21      	cmp	r3, #33	; 0x21
 8001ebe:	d13e      	bne.n	8001f3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d114      	bne.n	8001ef4 <UART_Transmit_IT+0x48>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d110      	bne.n	8001ef4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ee6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	e008      	b.n	8001f06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6211      	str	r1, [r2, #32]
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4619      	mov	r1, r3
 8001f14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fea6 	bl	8001cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b22      	cmp	r3, #34	; 0x22
 8001f8c:	f040 8099 	bne.w	80020c2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f98:	d117      	bne.n	8001fca <UART_Receive_IT+0x50>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d113      	bne.n	8001fca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	1c9a      	adds	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8001fc8:	e026      	b.n	8002018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fdc:	d007      	beq.n	8001fee <UART_Receive_IT+0x74>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10a      	bne.n	8001ffc <UART_Receive_IT+0x82>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e008      	b.n	800200e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002008:	b2da      	uxtb	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29b      	uxth	r3, r3
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4619      	mov	r1, r3
 8002026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002028:	2b00      	cmp	r3, #0
 800202a:	d148      	bne.n	80020be <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0220 	bic.w	r2, r2, #32
 800203a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	2b01      	cmp	r3, #1
 800206a:	d123      	bne.n	80020b4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0210 	bic.w	r2, r2, #16
 8002080:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b10      	cmp	r3, #16
 800208e:	d10a      	bne.n	80020a6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fe17 	bl	8001ce0 <HAL_UARTEx_RxEventCallback>
 80020b2:	e002      	b.n	80020ba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7fe f9b7 	bl	8000428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e002      	b.n	80020c4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002106:	f023 030c 	bic.w	r3, r3, #12
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	430b      	orrs	r3, r1
 8002112:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <UART_SetConfig+0x114>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d103      	bne.n	800213c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002134:	f7ff fa6c 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	e002      	b.n	8002142 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800213c:	f7ff fa54 	bl	80015e8 <HAL_RCC_GetPCLK1Freq>
 8002140:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	009a      	lsls	r2, r3, #2
 800214c:	441a      	add	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <UART_SetConfig+0x118>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	0119      	lsls	r1, r3, #4
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	009a      	lsls	r2, r3, #2
 800216c:	441a      	add	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	fbb2 f2f3 	udiv	r2, r2, r3
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <UART_SetConfig+0x118>)
 800217a:	fba3 0302 	umull	r0, r3, r3, r2
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2064      	movs	r0, #100	; 0x64
 8002182:	fb00 f303 	mul.w	r3, r0, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	3332      	adds	r3, #50	; 0x32
 800218c:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <UART_SetConfig+0x118>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002198:	4419      	add	r1, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009a      	lsls	r2, r3, #2
 80021a4:	441a      	add	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <UART_SetConfig+0x118>)
 80021b2:	fba3 0302 	umull	r0, r3, r3, r2
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2064      	movs	r0, #100	; 0x64
 80021ba:	fb00 f303 	mul.w	r3, r0, r3
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	3332      	adds	r3, #50	; 0x32
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <UART_SetConfig+0x118>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	f003 020f 	and.w	r2, r3, #15
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	440a      	add	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40013800 	.word	0x40013800
 80021e4:	51eb851f 	.word	0x51eb851f

080021e8 <__libc_init_array>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	2600      	movs	r6, #0
 80021ec:	4d0c      	ldr	r5, [pc, #48]	; (8002220 <__libc_init_array+0x38>)
 80021ee:	4c0d      	ldr	r4, [pc, #52]	; (8002224 <__libc_init_array+0x3c>)
 80021f0:	1b64      	subs	r4, r4, r5
 80021f2:	10a4      	asrs	r4, r4, #2
 80021f4:	42a6      	cmp	r6, r4
 80021f6:	d109      	bne.n	800220c <__libc_init_array+0x24>
 80021f8:	f000 f822 	bl	8002240 <_init>
 80021fc:	2600      	movs	r6, #0
 80021fe:	4d0a      	ldr	r5, [pc, #40]	; (8002228 <__libc_init_array+0x40>)
 8002200:	4c0a      	ldr	r4, [pc, #40]	; (800222c <__libc_init_array+0x44>)
 8002202:	1b64      	subs	r4, r4, r5
 8002204:	10a4      	asrs	r4, r4, #2
 8002206:	42a6      	cmp	r6, r4
 8002208:	d105      	bne.n	8002216 <__libc_init_array+0x2e>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002210:	4798      	blx	r3
 8002212:	3601      	adds	r6, #1
 8002214:	e7ee      	b.n	80021f4 <__libc_init_array+0xc>
 8002216:	f855 3b04 	ldr.w	r3, [r5], #4
 800221a:	4798      	blx	r3
 800221c:	3601      	adds	r6, #1
 800221e:	e7f2      	b.n	8002206 <__libc_init_array+0x1e>
 8002220:	08002280 	.word	0x08002280
 8002224:	08002280 	.word	0x08002280
 8002228:	08002280 	.word	0x08002280
 800222c:	08002284 	.word	0x08002284

08002230 <memset>:
 8002230:	4603      	mov	r3, r0
 8002232:	4402      	add	r2, r0
 8002234:	4293      	cmp	r3, r2
 8002236:	d100      	bne.n	800223a <memset+0xa>
 8002238:	4770      	bx	lr
 800223a:	f803 1b01 	strb.w	r1, [r3], #1
 800223e:	e7f9      	b.n	8002234 <memset+0x4>

08002240 <_init>:
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	bf00      	nop
 8002244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002246:	bc08      	pop	{r3}
 8002248:	469e      	mov	lr, r3
 800224a:	4770      	bx	lr

0800224c <_fini>:
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224e:	bf00      	nop
 8002250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002252:	bc08      	pop	{r3}
 8002254:	469e      	mov	lr, r3
 8002256:	4770      	bx	lr
