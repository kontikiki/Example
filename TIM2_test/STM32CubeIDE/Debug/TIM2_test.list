
TIM2_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006148  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b0  080067b0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b8  080067b8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080067c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000684  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000718  20000718  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00050e98  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039bd  00000000  00000000  00070f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003630  00000000  00000000  00074920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003478  00000000  00000000  00077f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d7e  00000000  00000000  0007b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ffdd  00000000  00000000  000a1146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f458b  00000000  00000000  000c1123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b56ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f37c  00000000  00000000  001b5700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080062e0 	.word	0x080062e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	080062e0 	.word	0x080062e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059a:	f000 fee5 	bl	8001368 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059e:	f000 fa27 	bl	80009f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a2:	f000 fb81 	bl	8000ca8 <MX_GPIO_Init>
	MX_TIM2_Init();
 80005a6:	f000 fadd 	bl	8000b64 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80005aa:	f000 fb29 	bl	8000c00 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80005ae:	f000 fb51 	bl	8000c54 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 80005b2:	f000 faa1 	bl	8000af8 <MX_SPI2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80005b6:	f000 fa8b 	bl	8000ad0 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80005ba:	487e      	ldr	r0, [pc, #504]	; (80007b4 <main+0x220>)
 80005bc:	f002 fa22 	bl	8002a04 <HAL_TIM_Base_Start_IT>

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 80005c0:	4b7d      	ldr	r3, [pc, #500]	; (80007b8 <main+0x224>)
 80005c2:	4a7e      	ldr	r2, [pc, #504]	; (80007bc <main+0x228>)
 80005c4:	497e      	ldr	r1, [pc, #504]	; (80007c0 <main+0x22c>)
 80005c6:	487f      	ldr	r0, [pc, #508]	; (80007c4 <main+0x230>)
 80005c8:	f003 fb90 	bl	8003cec <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 80005cc:	487d      	ldr	r0, [pc, #500]	; (80007c4 <main+0x230>)
 80005ce:	f005 f949 	bl	8005864 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80005d2:	2100      	movs	r1, #0
 80005d4:	487b      	ldr	r0, [pc, #492]	; (80007c4 <main+0x230>)
 80005d6:	f005 f954 	bl	8005882 <u8x8_SetPowerSave>

	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 80005da:	497b      	ldr	r1, [pc, #492]	; (80007c8 <main+0x234>)
 80005dc:	4879      	ldr	r0, [pc, #484]	; (80007c4 <main+0x230>)
 80005de:	f004 fb25 	bl	8004c2c <u8g2_SetFont>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_UART_Receive(&huart1, (uint8_t*) &cmd, 1, 5000) == HAL_OK) {
 80005e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80005e6:	2201      	movs	r2, #1
 80005e8:	4978      	ldr	r1, [pc, #480]	; (80007cc <main+0x238>)
 80005ea:	4879      	ldr	r0, [pc, #484]	; (80007d0 <main+0x23c>)
 80005ec:	f002 ff1b 	bl	8003426 <HAL_UART_Receive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d103      	bne.n	80005fe <main+0x6a>
			data = cmd;
 80005f6:	4b75      	ldr	r3, [pc, #468]	; (80007cc <main+0x238>)
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b76      	ldr	r3, [pc, #472]	; (80007d4 <main+0x240>)
 80005fc:	701a      	strb	r2, [r3, #0]
		}

		if (btnFlag == 1 && btnContinueFlag == 1) {
 80005fe:	4b76      	ldr	r3, [pc, #472]	; (80007d8 <main+0x244>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d12a      	bne.n	800065c <main+0xc8>
 8000606:	4b75      	ldr	r3, [pc, #468]	; (80007dc <main+0x248>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d126      	bne.n	800065c <main+0xc8>
			if (i == 0) {
 800060e:	4b74      	ldr	r3, [pc, #464]	; (80007e0 <main+0x24c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d108      	bne.n	8000628 <main+0x94>
				data = '3';
 8000616:	4b6f      	ldr	r3, [pc, #444]	; (80007d4 <main+0x240>)
 8000618:	2233      	movs	r2, #51	; 0x33
 800061a:	701a      	strb	r2, [r3, #0]
				i++;
 800061c:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <main+0x24c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a6f      	ldr	r2, [pc, #444]	; (80007e0 <main+0x24c>)
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	e019      	b.n	800065c <main+0xc8>
			} else if (i == 1) {
 8000628:	4b6d      	ldr	r3, [pc, #436]	; (80007e0 <main+0x24c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d108      	bne.n	8000642 <main+0xae>
				data = '1';
 8000630:	4b68      	ldr	r3, [pc, #416]	; (80007d4 <main+0x240>)
 8000632:	2231      	movs	r2, #49	; 0x31
 8000634:	701a      	strb	r2, [r3, #0]
				i++;
 8000636:	4b6a      	ldr	r3, [pc, #424]	; (80007e0 <main+0x24c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	4a68      	ldr	r2, [pc, #416]	; (80007e0 <main+0x24c>)
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	e00c      	b.n	800065c <main+0xc8>
			} else if (i == 2) {
 8000642:	4b67      	ldr	r3, [pc, #412]	; (80007e0 <main+0x24c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d108      	bne.n	800065c <main+0xc8>
				data = '2';
 800064a:	4b62      	ldr	r3, [pc, #392]	; (80007d4 <main+0x240>)
 800064c:	2232      	movs	r2, #50	; 0x32
 800064e:	701a      	strb	r2, [r3, #0]
				i = 0;
 8000650:	4b63      	ldr	r3, [pc, #396]	; (80007e0 <main+0x24c>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
				btnFlag = 0;
 8000656:	4b60      	ldr	r3, [pc, #384]	; (80007d8 <main+0x244>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
			}
		}

		if (timerFlag == 1 && timerContinueFlag == 1) {
 800065c:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <main+0x250>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d12a      	bne.n	80006ba <main+0x126>
 8000664:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <main+0x254>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d126      	bne.n	80006ba <main+0x126>
			if (i == 0) {
 800066c:	4b5c      	ldr	r3, [pc, #368]	; (80007e0 <main+0x24c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d108      	bne.n	8000686 <main+0xf2>
				data = '3';
 8000674:	4b57      	ldr	r3, [pc, #348]	; (80007d4 <main+0x240>)
 8000676:	2233      	movs	r2, #51	; 0x33
 8000678:	701a      	strb	r2, [r3, #0]
				i++;
 800067a:	4b59      	ldr	r3, [pc, #356]	; (80007e0 <main+0x24c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	4a57      	ldr	r2, [pc, #348]	; (80007e0 <main+0x24c>)
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	e019      	b.n	80006ba <main+0x126>
			} else if (i == 1) {
 8000686:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <main+0x24c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d108      	bne.n	80006a0 <main+0x10c>
				data = '1';
 800068e:	4b51      	ldr	r3, [pc, #324]	; (80007d4 <main+0x240>)
 8000690:	2231      	movs	r2, #49	; 0x31
 8000692:	701a      	strb	r2, [r3, #0]
				i++;
 8000694:	4b52      	ldr	r3, [pc, #328]	; (80007e0 <main+0x24c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	4a51      	ldr	r2, [pc, #324]	; (80007e0 <main+0x24c>)
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	e00c      	b.n	80006ba <main+0x126>
			} else if (i == 2) {
 80006a0:	4b4f      	ldr	r3, [pc, #316]	; (80007e0 <main+0x24c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d108      	bne.n	80006ba <main+0x126>
				data = '2';
 80006a8:	4b4a      	ldr	r3, [pc, #296]	; (80007d4 <main+0x240>)
 80006aa:	2232      	movs	r2, #50	; 0x32
 80006ac:	701a      	strb	r2, [r3, #0]
				i = 0;
 80006ae:	4b4c      	ldr	r3, [pc, #304]	; (80007e0 <main+0x24c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
				timerFlag = 0;
 80006b4:	4b4b      	ldr	r3, [pc, #300]	; (80007e4 <main+0x250>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
			}
		}

		if (timerContinueFlag == 1 || btnContinueFlag == 1) {
 80006ba:	4b4b      	ldr	r3, [pc, #300]	; (80007e8 <main+0x254>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d003      	beq.n	80006ca <main+0x136>
 80006c2:	4b46      	ldr	r3, [pc, #280]	; (80007dc <main+0x248>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d16a      	bne.n	80007a0 <main+0x20c>
			memset(buff, 0, 20);
 80006ca:	2214      	movs	r2, #20
 80006cc:	2100      	movs	r1, #0
 80006ce:	4847      	ldr	r0, [pc, #284]	; (80007ec <main+0x258>)
 80006d0:	f005 f990 	bl	80059f4 <memset>
			switch (data) {
 80006d4:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <main+0x240>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	3b31      	subs	r3, #49	; 0x31
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d862      	bhi.n	80007a4 <main+0x210>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <main+0x150>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	0800071d 	.word	0x0800071d
 80006ec:	08000751 	.word	0x08000751
 80006f0:	08000779 	.word	0x08000779
			case '1':
				HAL_UART_Transmit(&huart6, (uint8_t*) getDataCommand, 5, 5000);
 80006f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80006f8:	2205      	movs	r2, #5
 80006fa:	493d      	ldr	r1, [pc, #244]	; (80007f0 <main+0x25c>)
 80006fc:	483d      	ldr	r0, [pc, #244]	; (80007f4 <main+0x260>)
 80006fe:	f002 fe00 	bl	8003302 <HAL_UART_Transmit>
				if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 20, 100)
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2214      	movs	r2, #20
 8000706:	4939      	ldr	r1, [pc, #228]	; (80007ec <main+0x258>)
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <main+0x260>)
 800070a:	f002 fe8c 	bl	8003426 <HAL_UART_Receive>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d149      	bne.n	80007a8 <main+0x214>
						== HAL_OK) {
					state = 1;
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <main+0x264>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]
				}
				break;
 800071a:	e045      	b.n	80007a8 <main+0x214>

			case '2':
				HAL_UART_Transmit(&huart6, (uint8_t*) singleModeSetCommand, 6,
 800071c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000720:	2206      	movs	r2, #6
 8000722:	4936      	ldr	r1, [pc, #216]	; (80007fc <main+0x268>)
 8000724:	4833      	ldr	r0, [pc, #204]	; (80007f4 <main+0x260>)
 8000726:	f002 fdec 	bl	8003302 <HAL_UART_Transmit>
						5000);
				if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 6, 100)
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	2206      	movs	r2, #6
 800072e:	492f      	ldr	r1, [pc, #188]	; (80007ec <main+0x258>)
 8000730:	4830      	ldr	r0, [pc, #192]	; (80007f4 <main+0x260>)
 8000732:	f002 fe78 	bl	8003426 <HAL_UART_Receive>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d137      	bne.n	80007ac <main+0x218>
						== HAL_OK) {
					state = 2;
 800073c:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <main+0x264>)
 800073e:	2202      	movs	r2, #2
 8000740:	601a      	str	r2, [r3, #0]
					timerContinueFlag = 0;
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <main+0x254>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]

					btnContinueFlag = 0;
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <main+0x248>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800074e:	e02d      	b.n	80007ac <main+0x218>

			case '3':
				HAL_UART_Transmit(&huart6, (uint8_t*) continuousModeSetCommand,
 8000750:	f241 3388 	movw	r3, #5000	; 0x1388
 8000754:	2206      	movs	r2, #6
 8000756:	492a      	ldr	r1, [pc, #168]	; (8000800 <main+0x26c>)
 8000758:	4826      	ldr	r0, [pc, #152]	; (80007f4 <main+0x260>)
 800075a:	f002 fdd2 	bl	8003302 <HAL_UART_Transmit>
						6, 5000);
				if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 6, 100)
 800075e:	2364      	movs	r3, #100	; 0x64
 8000760:	2206      	movs	r2, #6
 8000762:	4922      	ldr	r1, [pc, #136]	; (80007ec <main+0x258>)
 8000764:	4823      	ldr	r0, [pc, #140]	; (80007f4 <main+0x260>)
 8000766:	f002 fe5e 	bl	8003426 <HAL_UART_Receive>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d11f      	bne.n	80007b0 <main+0x21c>
						== HAL_OK) {
					state = 2;
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <main+0x264>)
 8000772:	2202      	movs	r2, #2
 8000774:	601a      	str	r2, [r3, #0]

				}
				break;
 8000776:	e01b      	b.n	80007b0 <main+0x21c>

			case '4':
				HAL_UART_Transmit(&huart6, (uint8_t*) timingModeSetCommand, 6,
 8000778:	f241 3388 	movw	r3, #5000	; 0x1388
 800077c:	2206      	movs	r2, #6
 800077e:	4921      	ldr	r1, [pc, #132]	; (8000804 <main+0x270>)
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <main+0x260>)
 8000782:	f002 fdbe 	bl	8003302 <HAL_UART_Transmit>
						5000);
				if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 6, 100)
 8000786:	2364      	movs	r3, #100	; 0x64
 8000788:	2206      	movs	r2, #6
 800078a:	4918      	ldr	r1, [pc, #96]	; (80007ec <main+0x258>)
 800078c:	4819      	ldr	r0, [pc, #100]	; (80007f4 <main+0x260>)
 800078e:	f002 fe4a 	bl	8003426 <HAL_UART_Receive>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d137      	bne.n	8000808 <main+0x274>
						== HAL_OK) {
					state = 2;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <main+0x264>)
 800079a:	2202      	movs	r2, #2
 800079c:	601a      	str	r2, [r3, #0]

				}
				break;
 800079e:	e033      	b.n	8000808 <main+0x274>

			default:
				break;
			}
		}
 80007a0:	bf00      	nop
 80007a2:	e032      	b.n	800080a <main+0x276>
				break;
 80007a4:	bf00      	nop
 80007a6:	e030      	b.n	800080a <main+0x276>
				break;
 80007a8:	bf00      	nop
 80007aa:	e02e      	b.n	800080a <main+0x276>
				break;
 80007ac:	bf00      	nop
 80007ae:	e02c      	b.n	800080a <main+0x276>
				break;
 80007b0:	bf00      	nop
 80007b2:	e02a      	b.n	800080a <main+0x276>
 80007b4:	20000108 	.word	0x20000108
 80007b8:	08001139 	.word	0x08001139
 80007bc:	0800122d 	.word	0x0800122d
 80007c0:	080066a0 	.word	0x080066a0
 80007c4:	2000026c 	.word	0x2000026c
 80007c8:	0800637c 	.word	0x0800637c
 80007cc:	200001d9 	.word	0x200001d9
 80007d0:	20000150 	.word	0x20000150
 80007d4:	200001d8 	.word	0x200001d8
 80007d8:	20000263 	.word	0x20000263
 80007dc:	20000001 	.word	0x20000001
 80007e0:	20000268 	.word	0x20000268
 80007e4:	20000262 	.word	0x20000262
 80007e8:	20000000 	.word	0x20000000
 80007ec:	200001dc 	.word	0x200001dc
 80007f0:	20000004 	.word	0x20000004
 80007f4:	20000194 	.word	0x20000194
 80007f8:	20000264 	.word	0x20000264
 80007fc:	2000000c 	.word	0x2000000c
 8000800:	20000014 	.word	0x20000014
 8000804:	2000001c 	.word	0x2000001c
				break;
 8000808:	bf00      	nop

		if (state == 1) {
 800080a:	4b6e      	ldr	r3, [pc, #440]	; (80009c4 <main+0x430>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d15e      	bne.n	80008d0 <main+0x33c>
			//if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 20, 100) == HAL_OK) {

			//HAL_UART_Transmit(&huart1, (uint8_t*) buff, 20, 100);

			if (buff[0] == 0x16 && buff[1] == 0x11) {
 8000812:	4b6d      	ldr	r3, [pc, #436]	; (80009c8 <main+0x434>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b16      	cmp	r3, #22
 8000818:	f47f aee3 	bne.w	80005e2 <main+0x4e>
 800081c:	4b6a      	ldr	r3, [pc, #424]	; (80009c8 <main+0x434>)
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	2b11      	cmp	r3, #17
 8000822:	f47f aede 	bne.w	80005e2 <main+0x4e>
				if (buff[2] == 0x0B) {
 8000826:	4b68      	ldr	r3, [pc, #416]	; (80009c8 <main+0x434>)
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	2b0b      	cmp	r3, #11
 800082c:	f47f aed9 	bne.w	80005e2 <main+0x4e>
					int val = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
					val |= (buff[3] << 24) | (buff[4] << 16) | (buff[5] << 8)
 8000834:	4b64      	ldr	r3, [pc, #400]	; (80009c8 <main+0x434>)
 8000836:	78db      	ldrb	r3, [r3, #3]
 8000838:	061a      	lsls	r2, r3, #24
 800083a:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <main+0x434>)
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	041b      	lsls	r3, r3, #16
 8000840:	431a      	orrs	r2, r3
 8000842:	4b61      	ldr	r3, [pc, #388]	; (80009c8 <main+0x434>)
 8000844:	795b      	ldrb	r3, [r3, #5]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	4313      	orrs	r3, r2
							| buff[6];
 800084a:	4a5f      	ldr	r2, [pc, #380]	; (80009c8 <main+0x434>)
 800084c:	7992      	ldrb	r2, [r2, #6]
 800084e:	4313      	orrs	r3, r2
					val |= (buff[3] << 24) | (buff[4] << 16) | (buff[5] << 8)
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4313      	orrs	r3, r2
 8000854:	607b      	str	r3, [r7, #4]
					sprintf(str, "PM2.5 : %d\r\n", val);
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	495c      	ldr	r1, [pc, #368]	; (80009cc <main+0x438>)
 800085a:	485d      	ldr	r0, [pc, #372]	; (80009d0 <main+0x43c>)
 800085c:	f005 f8d2 	bl	8005a04 <siprintf>
#ifndef OLED
							HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str),
									100);
		#endif
					val = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
					val |= (buff[7] << 24) | (buff[8] << 16) | (buff[9] << 8)
 8000864:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <main+0x434>)
 8000866:	79db      	ldrb	r3, [r3, #7]
 8000868:	061a      	lsls	r2, r3, #24
 800086a:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <main+0x434>)
 800086c:	7a1b      	ldrb	r3, [r3, #8]
 800086e:	041b      	lsls	r3, r3, #16
 8000870:	431a      	orrs	r2, r3
 8000872:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <main+0x434>)
 8000874:	7a5b      	ldrb	r3, [r3, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	4313      	orrs	r3, r2
							| buff[10];
 800087a:	4a53      	ldr	r2, [pc, #332]	; (80009c8 <main+0x434>)
 800087c:	7a92      	ldrb	r2, [r2, #10]
 800087e:	4313      	orrs	r3, r2
					val |= (buff[7] << 24) | (buff[8] << 16) | (buff[9] << 8)
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4313      	orrs	r3, r2
 8000884:	607b      	str	r3, [r7, #4]
					sprintf(str2, "PM10 : %d\r\n", val);
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4952      	ldr	r1, [pc, #328]	; (80009d4 <main+0x440>)
 800088a:	4853      	ldr	r0, [pc, #332]	; (80009d8 <main+0x444>)
 800088c:	f005 f8ba 	bl	8005a04 <siprintf>
#ifndef OLED
							HAL_UART_Transmit(&huart1, (uint8_t*) str2, sizeof(str2),
									5000);
		#else
					u8g2_FirstPage(&u8g2);
 8000890:	4852      	ldr	r0, [pc, #328]	; (80009dc <main+0x448>)
 8000892:	f003 f9d8 	bl	8003c46 <u8g2_FirstPage>
					do {
						u8g2_DrawStrX2(&u8g2, 17, 15, str);
 8000896:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <main+0x43c>)
 8000898:	220f      	movs	r2, #15
 800089a:	2111      	movs	r1, #17
 800089c:	484f      	ldr	r0, [pc, #316]	; (80009dc <main+0x448>)
 800089e:	f004 f923 	bl	8004ae8 <u8g2_DrawStrX2>
						u8g2_DrawStrX2(&u8g2, 22, 30, str2);
 80008a2:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <main+0x444>)
 80008a4:	221e      	movs	r2, #30
 80008a6:	2116      	movs	r1, #22
 80008a8:	484c      	ldr	r0, [pc, #304]	; (80009dc <main+0x448>)
 80008aa:	f004 f91d 	bl	8004ae8 <u8g2_DrawStrX2>
					} while (u8g2_NextPage(&u8g2));
 80008ae:	484b      	ldr	r0, [pc, #300]	; (80009dc <main+0x448>)
 80008b0:	f003 f9dd 	bl	8003c6e <u8g2_NextPage>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1ed      	bne.n	8000896 <main+0x302>
#endif

					memset(str, 0, sizeof(str));
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4844      	ldr	r0, [pc, #272]	; (80009d0 <main+0x43c>)
 80008c0:	f005 f898 	bl	80059f4 <memset>
					memset(str2, 0, sizeof(str2));
 80008c4:	2220      	movs	r2, #32
 80008c6:	2100      	movs	r1, #0
 80008c8:	4843      	ldr	r0, [pc, #268]	; (80009d8 <main+0x444>)
 80008ca:	f005 f893 	bl	80059f4 <memset>
 80008ce:	e688      	b.n	80005e2 <main+0x4e>

			//memset(buff, 0, 20);

		}

		else if (state == 2) {
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <main+0x430>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	f47f ae84 	bne.w	80005e2 <main+0x4e>
			//	if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 6, 100) == HAL_OK) {

			//HAL_UART_Transmit(&huart1, (uint8_t*) buff, 6, 100);

			if (buff[0] == 0x16 && buff[1] == 0x03) {
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <main+0x434>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b16      	cmp	r3, #22
 80008e0:	f47f ae7f 	bne.w	80005e2 <main+0x4e>
 80008e4:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <main+0x434>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	f47f ae7a 	bne.w	80005e2 <main+0x4e>
				if (buff[2] == 0x0D) {
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <main+0x434>)
 80008f0:	789b      	ldrb	r3, [r3, #2]
 80008f2:	2b0d      	cmp	r3, #13
 80008f4:	d140      	bne.n	8000978 <main+0x3e4>
					if (buff[3] == 0xff && buff[4] == 0xff) {
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <main+0x434>)
 80008f8:	78db      	ldrb	r3, [r3, #3]
 80008fa:	2bff      	cmp	r3, #255	; 0xff
 80008fc:	d11c      	bne.n	8000938 <main+0x3a4>
 80008fe:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <main+0x434>)
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	2bff      	cmp	r3, #255	; 0xff
 8000904:	d118      	bne.n	8000938 <main+0x3a4>
						sprintf(str3, "continuous mode\r\n");
 8000906:	4936      	ldr	r1, [pc, #216]	; (80009e0 <main+0x44c>)
 8000908:	4836      	ldr	r0, [pc, #216]	; (80009e4 <main+0x450>)
 800090a:	f005 f87b 	bl	8005a04 <siprintf>
#ifndef OLED
								HAL_UART_Transmit(&huart1, (uint8_t*) str3,
										sizeof(str3), 5000);
		#else
						u8g2_FirstPage(&u8g2);
 800090e:	4833      	ldr	r0, [pc, #204]	; (80009dc <main+0x448>)
 8000910:	f003 f999 	bl	8003c46 <u8g2_FirstPage>

						do {
							u8g2_DrawStr(&u8g2, 0, 30, str3);
 8000914:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <main+0x450>)
 8000916:	221e      	movs	r2, #30
 8000918:	2100      	movs	r1, #0
 800091a:	4830      	ldr	r0, [pc, #192]	; (80009dc <main+0x448>)
 800091c:	f004 f8ca 	bl	8004ab4 <u8g2_DrawStr>
						} while (u8g2_NextPage(&u8g2));
 8000920:	482e      	ldr	r0, [pc, #184]	; (80009dc <main+0x448>)
 8000922:	f003 f9a4 	bl	8003c6e <u8g2_NextPage>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f3      	bne.n	8000914 <main+0x380>
#endif
						memset(str3, 0, 50);
 800092c:	2232      	movs	r2, #50	; 0x32
 800092e:	2100      	movs	r1, #0
 8000930:	482c      	ldr	r0, [pc, #176]	; (80009e4 <main+0x450>)
 8000932:	f005 f85f 	bl	80059f4 <memset>
 8000936:	e044      	b.n	80009c2 <main+0x42e>
					} else {
						int measurement_time = (buff[3] << 8) | buff[4];
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <main+0x434>)
 800093a:	78db      	ldrb	r3, [r3, #3]
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <main+0x434>)
 8000940:	7912      	ldrb	r2, [r2, #4]
 8000942:	4313      	orrs	r3, r2
 8000944:	60bb      	str	r3, [r7, #8]
						/*sprintf(str3, "single mode time : %d sec\r\n",
								measurement_time);*/
						sprintf(str3,"stop state,interval 1 min\r\n");
 8000946:	4928      	ldr	r1, [pc, #160]	; (80009e8 <main+0x454>)
 8000948:	4826      	ldr	r0, [pc, #152]	; (80009e4 <main+0x450>)
 800094a:	f005 f85b 	bl	8005a04 <siprintf>

#ifndef OLED
								HAL_UART_Transmit(&huart1, (uint8_t*) str3,
										sizeof(str3), 5000);
		#else
						u8g2_FirstPage(&u8g2);
 800094e:	4823      	ldr	r0, [pc, #140]	; (80009dc <main+0x448>)
 8000950:	f003 f979 	bl	8003c46 <u8g2_FirstPage>
						do {

							u8g2_DrawStr(&u8g2, 0, 30, str3);
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <main+0x450>)
 8000956:	221e      	movs	r2, #30
 8000958:	2100      	movs	r1, #0
 800095a:	4820      	ldr	r0, [pc, #128]	; (80009dc <main+0x448>)
 800095c:	f004 f8aa 	bl	8004ab4 <u8g2_DrawStr>
						} while (u8g2_NextPage(&u8g2));
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <main+0x448>)
 8000962:	f003 f984 	bl	8003c6e <u8g2_NextPage>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f3      	bne.n	8000954 <main+0x3c0>
#endif
						memset(str3, 0, 50);
 800096c:	2232      	movs	r2, #50	; 0x32
 800096e:	2100      	movs	r1, #0
 8000970:	481c      	ldr	r0, [pc, #112]	; (80009e4 <main+0x450>)
 8000972:	f005 f83f 	bl	80059f4 <memset>
 8000976:	e634      	b.n	80005e2 <main+0x4e>
					}
				} else if (buff[2] == 0x05) {
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <main+0x434>)
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	2b05      	cmp	r3, #5
 800097e:	f47f ae30 	bne.w	80005e2 <main+0x4e>
					int duration_time = (buff[3] << 8) | buff[4];
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <main+0x434>)
 8000984:	78db      	ldrb	r3, [r3, #3]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <main+0x434>)
 800098a:	7912      	ldrb	r2, [r2, #4]
 800098c:	4313      	orrs	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
					sprintf(str3, "timing mode interval : %d sec\r\n",
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	4916      	ldr	r1, [pc, #88]	; (80009ec <main+0x458>)
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <main+0x450>)
 8000996:	f005 f835 	bl	8005a04 <siprintf>
							duration_time);
#ifndef OLED
							HAL_UART_Transmit(&huart1, (uint8_t*) str3, sizeof(str3),
									5000);
		#else
					u8g2_FirstPage(&u8g2);
 800099a:	4810      	ldr	r0, [pc, #64]	; (80009dc <main+0x448>)
 800099c:	f003 f953 	bl	8003c46 <u8g2_FirstPage>
					do {

						u8g2_DrawStr(&u8g2, 0, 30, str3);
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <main+0x450>)
 80009a2:	221e      	movs	r2, #30
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <main+0x448>)
 80009a8:	f004 f884 	bl	8004ab4 <u8g2_DrawStr>
					} while (u8g2_NextPage(&u8g2));
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <main+0x448>)
 80009ae:	f003 f95e 	bl	8003c6e <u8g2_NextPage>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f3      	bne.n	80009a0 <main+0x40c>
#endif
					memset(str3, 0, 50);
 80009b8:	2232      	movs	r2, #50	; 0x32
 80009ba:	2100      	movs	r1, #0
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <main+0x450>)
 80009be:	f005 f819 	bl	80059f4 <memset>
		if (HAL_UART_Receive(&huart1, (uint8_t*) &cmd, 1, 5000) == HAL_OK) {
 80009c2:	e60e      	b.n	80005e2 <main+0x4e>
 80009c4:	20000264 	.word	0x20000264
 80009c8:	200001dc 	.word	0x200001dc
 80009cc:	080062f8 	.word	0x080062f8
 80009d0:	200001f0 	.word	0x200001f0
 80009d4:	08006308 	.word	0x08006308
 80009d8:	20000210 	.word	0x20000210
 80009dc:	2000026c 	.word	0x2000026c
 80009e0:	08006314 	.word	0x08006314
 80009e4:	20000230 	.word	0x20000230
 80009e8:	08006328 	.word	0x08006328
 80009ec:	08006344 	.word	0x08006344

080009f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f004 fff8 	bl	80059f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <SystemClock_Config+0xdc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a24      	ldr	r2, [pc, #144]	; (8000acc <SystemClock_Config+0xdc>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <SystemClock_Config+0xdc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000a64:	23b4      	movs	r3, #180	; 0xb4
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f84d 	bl	8001b14 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
		Error_Handler();
 8000a80:	f000 f9b4 	bl	8000dec <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000a84:	f000 fff6 	bl	8001a74 <HAL_PWREx_EnableOverDrive>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xa2>
		Error_Handler();
 8000a8e:	f000 f9ad 	bl	8000dec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2105      	movs	r1, #5
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 faa7 	bl	8002004 <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xd0>
		Error_Handler();
 8000abc:	f000 f996 	bl	8000dec <Error_Handler>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3750      	adds	r7, #80	; 0x50
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	201c      	movs	r0, #28
 8000ada:	f000 fdb6 	bl	800164a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ade:	201c      	movs	r0, #28
 8000ae0:	f000 fdcf 	bl	8001682 <HAL_NVIC_EnableIRQ>
	/* EXTI0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2006      	movs	r0, #6
 8000aea:	f000 fdae 	bl	800164a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000aee:	2006      	movs	r0, #6
 8000af0:	f000 fdc7 	bl	8001682 <HAL_NVIC_EnableIRQ>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_SPI2_Init+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_SPI2_Init+0x64>)
 8000b4a:	f001 fc7b 	bl	8002444 <HAL_SPI_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000b54:	f000 f94a 	bl	8000dec <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000b0 	.word	0x200000b0
 8000b60:	40003800 	.word	0x40003800

08000b64 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b86:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b8e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 539999;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b98:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <MX_TIM2_Init+0x98>)
 8000b9a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000baa:	f001 fedb 	bl	8002964 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000bb4:	f000 f91a 	bl	8000dec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000bc6:	f002 f895 	bl	8002cf4 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000bd0:	f000 f90c 	bl	8000dec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000be2:	f002 fab1 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000bec:	f000 f8fe 	bl	8000dec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000108 	.word	0x20000108
 8000bfc:	00083d5f 	.word	0x00083d5f

08000c00 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART1_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c10:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c38:	f002 fb16 	bl	8003268 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000c42:	f000 f8d3 	bl	8000dec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000150 	.word	0x20000150
 8000c50:	40011000 	.word	0x40011000

08000c54 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <MX_USART6_UART_Init+0x50>)
 8000c5c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c64:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_USART6_UART_Init+0x4c>)
 8000c8c:	f002 faec 	bl	8003268 <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8000c96:	f000 f8a9 	bl	8000dec <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000194 	.word	0x20000194
 8000ca4:	40011400 	.word	0x40011400

08000ca8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a2c      	ldr	r2, [pc, #176]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a25      	ldr	r2, [pc, #148]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_GPIO_Init+0xd0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin,
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2107      	movs	r1, #7
 8000d32:	4812      	ldr	r0, [pc, #72]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d34:	f000 fe6c 	bl	8001a10 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin OLED_CS_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2302      	movs	r3, #2
 8000d46:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <MX_GPIO_Init+0xd4>)
 8000d50:	f000 fcb2 	bl	80016b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : btn0_Pin */
	GPIO_InitStruct.Pin = btn0_Pin;
 8000d54:	2301      	movs	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d5c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(btn0_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0xd8>)
 8000d6a:	f000 fca5 	bl	80016b8 <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40020000 	.word	0x40020000

08000d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	//GPIO PIN OUTPUT HIGH
	if (htim->Instance == htim2.Instance) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d105      	bne.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x20>
		timerFlag = 1;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
		timerContinueFlag = 1;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
	}
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20000108 	.word	0x20000108
 8000db4:	20000262 	.word	0x20000262
 8000db8:	20000000 	.word	0x20000000

08000dbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == btn0_Pin) {
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x1c>

			btnFlag = 1;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
			btnContinueFlag = 1;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]

	}
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	20000263 	.word	0x20000263
 8000de8:	20000001 	.word	0x20000001

08000dec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <HAL_SPI_MspInit+0xc0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d14a      	bne.n	8000f00 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a26      	ldr	r2, [pc, #152]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_SPI_MspInit+0xc4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <HAL_SPI_MspInit+0xc8>)
 8000eda:	f000 fbed 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <HAL_SPI_MspInit+0xcc>)
 8000efc:	f000 fbdc 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40003800 	.word	0x40003800
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020400 	.word	0x40020400

08000f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f28:	d10d      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_TIM_Base_MspInit+0x3c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_TIM_Base_MspInit+0x3c>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_TIM_Base_MspInit+0x3c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a32      	ldr	r2, [pc, #200]	; (8001040 <HAL_UART_MspInit+0xe8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d12d      	bne.n	8000fd6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a30      	ldr	r2, [pc, #192]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a29      	ldr	r2, [pc, #164]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <HAL_UART_MspInit+0xf0>)
 8000fd0:	f000 fb72 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fd4:	e030      	b.n	8001038 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <HAL_UART_MspInit+0xf4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d12b      	bne.n	8001038 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_UART_MspInit+0xec>)
 8000ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_UART_MspInit+0xec>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_UART_MspInit+0xec>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_UART_MspInit+0xec>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001018:	23c0      	movs	r3, #192	; 0xc0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001028:	2308      	movs	r3, #8
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <HAL_UART_MspInit+0xf8>)
 8001034:	f000 fb40 	bl	80016b8 <HAL_GPIO_Init>
}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40011000 	.word	0x40011000
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000
 800104c:	40011400 	.word	0x40011400
 8001050:	40020800 	.word	0x40020800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f9b4 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn0_Pin);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f000 fcc9 	bl	8001a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM2_IRQHandler+0x10>)
 80010be:	f001 fd11 	bl	8002ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000108 	.word	0x20000108

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f004 fc50 	bl	80059a0 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20030000 	.word	0x20030000
 800112c:	00000400 	.word	0x00000400
 8001130:	20000300 	.word	0x20000300
 8001134:	20000718 	.word	0x20000718

08001138 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	72fb      	strb	r3, [r7, #11]
 8001146:	4613      	mov	r3, r2
 8001148:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	3b28      	subs	r3, #40	; 0x28
 800114e:	2b23      	cmp	r3, #35	; 0x23
 8001150:	d864      	bhi.n	800121c <u8x8_stm32_gpio_and_delay+0xe4>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <u8x8_stm32_gpio_and_delay+0x20>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	0800121d 	.word	0x0800121d
 800115c:	080011e9 	.word	0x080011e9
 8001160:	0800121d 	.word	0x0800121d
 8001164:	0800121d 	.word	0x0800121d
 8001168:	0800121d 	.word	0x0800121d
 800116c:	0800121d 	.word	0x0800121d
 8001170:	0800121d 	.word	0x0800121d
 8001174:	0800121d 	.word	0x0800121d
 8001178:	0800121d 	.word	0x0800121d
 800117c:	0800121d 	.word	0x0800121d
 8001180:	0800121d 	.word	0x0800121d
 8001184:	0800121d 	.word	0x0800121d
 8001188:	0800121d 	.word	0x0800121d
 800118c:	0800121d 	.word	0x0800121d
 8001190:	0800121d 	.word	0x0800121d
 8001194:	0800121d 	.word	0x0800121d
 8001198:	0800121d 	.word	0x0800121d
 800119c:	0800121d 	.word	0x0800121d
 80011a0:	0800121d 	.word	0x0800121d
 80011a4:	0800121d 	.word	0x0800121d
 80011a8:	0800121d 	.word	0x0800121d
 80011ac:	0800121d 	.word	0x0800121d
 80011b0:	0800121d 	.word	0x0800121d
 80011b4:	0800121d 	.word	0x0800121d
 80011b8:	0800121d 	.word	0x0800121d
 80011bc:	0800121d 	.word	0x0800121d
 80011c0:	0800121d 	.word	0x0800121d
 80011c4:	0800121d 	.word	0x0800121d
 80011c8:	0800121d 	.word	0x0800121d
 80011cc:	0800121d 	.word	0x0800121d
 80011d0:	0800121d 	.word	0x0800121d
 80011d4:	0800121d 	.word	0x0800121d
 80011d8:	0800121d 	.word	0x0800121d
 80011dc:	080011f3 	.word	0x080011f3
 80011e0:	08001201 	.word	0x08001201
 80011e4:	0800120f 	.word	0x0800120f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 80011e8:	7abb      	ldrb	r3, [r7, #10]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f92e 	bl	800144c <HAL_Delay>
		break;
 80011f0:	e014      	b.n	800121c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 80011f2:	7abb      	ldrb	r3, [r7, #10]
 80011f4:	461a      	mov	r2, r3
 80011f6:	2104      	movs	r1, #4
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <u8x8_stm32_gpio_and_delay+0xf0>)
 80011fa:	f000 fc09 	bl	8001a10 <HAL_GPIO_WritePin>
		break;
 80011fe:	e00d      	b.n	800121c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8001200:	7abb      	ldrb	r3, [r7, #10]
 8001202:	461a      	mov	r2, r3
 8001204:	2102      	movs	r1, #2
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001208:	f000 fc02 	bl	8001a10 <HAL_GPIO_WritePin>
		break;
 800120c:	e006      	b.n	800121c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 800120e:	7abb      	ldrb	r3, [r7, #10]
 8001210:	461a      	mov	r2, r3
 8001212:	2101      	movs	r1, #1
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001216:	f000 fbfb 	bl	8001a10 <HAL_GPIO_WritePin>
		break;
 800121a:	bf00      	nop
	}
	return 1;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020800 	.word	0x40020800

0800122c <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	72fb      	strb	r3, [r7, #11]
 800123a:	4613      	mov	r3, r2
 800123c:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	3b14      	subs	r3, #20
 8001242:	2b0c      	cmp	r3, #12
 8001244:	d847      	bhi.n	80012d6 <u8x8_byte_stm32_hw_spi+0xaa>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <u8x8_byte_stm32_hw_spi+0x20>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	080012db 	.word	0x080012db
 8001250:	080012d7 	.word	0x080012d7
 8001254:	080012d7 	.word	0x080012d7
 8001258:	08001281 	.word	0x08001281
 800125c:	080012a7 	.word	0x080012a7
 8001260:	080012bf 	.word	0x080012bf
 8001264:	080012d7 	.word	0x080012d7
 8001268:	080012d7 	.word	0x080012d7
 800126c:	080012d7 	.word	0x080012d7
 8001270:	080012d7 	.word	0x080012d7
 8001274:	080012d7 	.word	0x080012d7
 8001278:	080012d7 	.word	0x080012d7
 800127c:	08001299 	.word	0x08001299
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8001280:	7abb      	ldrb	r3, [r7, #10]
 8001282:	b29a      	uxth	r2, r3
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4818      	ldr	r0, [pc, #96]	; (80012ec <u8x8_byte_stm32_hw_spi+0xc0>)
 800128a:	f001 f964 	bl	8002556 <HAL_SPI_Transmit>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d024      	beq.n	80012de <u8x8_byte_stm32_hw_spi+0xb2>
 8001294:	2300      	movs	r3, #0
 8001296:	e024      	b.n	80012e2 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8001298:	7abb      	ldrb	r3, [r7, #10]
 800129a:	461a      	mov	r2, r3
 800129c:	214a      	movs	r1, #74	; 0x4a
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f004 fb0f 	bl	80058c2 <u8x8_gpio_call>
		break;
 80012a4:	e01c      	b.n	80012e0 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	2149      	movs	r1, #73	; 0x49
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f004 fb06 	bl	80058c2 <u8x8_gpio_call>
		HAL_Delay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 f8c8 	bl	800144c <HAL_Delay>
		break;
 80012bc:	e010      	b.n	80012e0 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 f8c4 	bl	800144c <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	461a      	mov	r2, r3
 80012cc:	2149      	movs	r1, #73	; 0x49
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f004 faf7 	bl	80058c2 <u8x8_gpio_call>
		break;
 80012d4:	e004      	b.n	80012e0 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e003      	b.n	80012e2 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 80012de:	bf00      	nop
	}
	return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000b0 	.word	0x200000b0

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001328 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f6:	490e      	ldr	r1, [pc, #56]	; (8001330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f8:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800130c:	4c0b      	ldr	r4, [pc, #44]	; (800133c <LoopFillZerobss+0x26>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800131a:	f000 f813 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f004 fb45 	bl	80059ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff f937 	bl	8000594 <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001328:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001334:	080067c0 	.word	0x080067c0
  ldr r2, =_sbss
 8001338:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800133c:	20000718 	.word	0x20000718

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_Init+0x40>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_Init+0x40>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x40>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 f94f 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	200f      	movs	r0, #15
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fd2c 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f967 	bl	800169e <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f000 f92f 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000024 	.word	0x20000024
 8001404:	2000002c 	.word	0x2000002c
 8001408:	20000028 	.word	0x20000028

0800140c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000002c 	.word	0x2000002c
 8001430:	20000304 	.word	0x20000304

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000304 	.word	0x20000304

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff ffee 	bl	8001434 <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_Delay+0x44>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001472:	bf00      	nop
 8001474:	f7ff ffde 	bl	8001434 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000002c 	.word	0x2000002c

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff29 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff3e 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff31 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e177      	b.n	80019c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8166 	bne.w	80019be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d005      	beq.n	800170a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	2b02      	cmp	r3, #2
 8001708:	d130      	bne.n	800176c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b03      	cmp	r3, #3
 8001776:	d017      	beq.n	80017a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	69b9      	ldr	r1, [r7, #24]
 80017f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80c0 	beq.w	80019be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b66      	ldr	r3, [pc, #408]	; (80019dc <HAL_GPIO_Init+0x324>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a65      	ldr	r2, [pc, #404]	; (80019dc <HAL_GPIO_Init+0x324>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_GPIO_Init+0x324>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185a:	4a61      	ldr	r2, [pc, #388]	; (80019e0 <HAL_GPIO_Init+0x328>)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_GPIO_Init+0x32c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d037      	beq.n	80018f6 <HAL_GPIO_Init+0x23e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a57      	ldr	r2, [pc, #348]	; (80019e8 <HAL_GPIO_Init+0x330>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d031      	beq.n	80018f2 <HAL_GPIO_Init+0x23a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a56      	ldr	r2, [pc, #344]	; (80019ec <HAL_GPIO_Init+0x334>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d02b      	beq.n	80018ee <HAL_GPIO_Init+0x236>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a55      	ldr	r2, [pc, #340]	; (80019f0 <HAL_GPIO_Init+0x338>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d025      	beq.n	80018ea <HAL_GPIO_Init+0x232>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a54      	ldr	r2, [pc, #336]	; (80019f4 <HAL_GPIO_Init+0x33c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01f      	beq.n	80018e6 <HAL_GPIO_Init+0x22e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a53      	ldr	r2, [pc, #332]	; (80019f8 <HAL_GPIO_Init+0x340>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x22a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_GPIO_Init+0x344>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x226>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a51      	ldr	r2, [pc, #324]	; (8001a00 <HAL_GPIO_Init+0x348>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x222>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a50      	ldr	r2, [pc, #320]	; (8001a04 <HAL_GPIO_Init+0x34c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x21e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4f      	ldr	r2, [pc, #316]	; (8001a08 <HAL_GPIO_Init+0x350>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x21a>
 80018ce:	2309      	movs	r3, #9
 80018d0:	e012      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018d2:	230a      	movs	r3, #10
 80018d4:	e010      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018d6:	2308      	movs	r3, #8
 80018d8:	e00e      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018da:	2307      	movs	r3, #7
 80018dc:	e00c      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018de:	2306      	movs	r3, #6
 80018e0:	e00a      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018e6:	2304      	movs	r3, #4
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x240>
 80018f6:	2300      	movs	r3, #0
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f002 0203 	and.w	r2, r2, #3
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	4093      	lsls	r3, r2
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001908:	4935      	ldr	r1, [pc, #212]	; (80019e0 <HAL_GPIO_Init+0x328>)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_GPIO_Init+0x354>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193a:	4a34      	ldr	r2, [pc, #208]	; (8001a0c <HAL_GPIO_Init+0x354>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_GPIO_Init+0x354>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001964:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <HAL_GPIO_Init+0x354>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_GPIO_Init+0x354>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800198e:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <HAL_GPIO_Init+0x354>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_GPIO_Init+0x354>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <HAL_GPIO_Init+0x354>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3301      	adds	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	f67f ae84 	bls.w	80016d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40013800 	.word	0x40013800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020c00 	.word	0x40020c00
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40021400 	.word	0x40021400
 80019fc:	40021800 	.word	0x40021800
 8001a00:	40021c00 	.word	0x40021c00
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40022400 	.word	0x40022400
 8001a0c:	40013c00 	.word	0x40013c00

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a2c:	e003      	b.n	8001a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	619a      	str	r2, [r3, #24]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f9aa 	bl	8000dbc <HAL_GPIO_EXTI_Callback>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40013c00 	.word	0x40013c00

08001a74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_PWREx_EnableOverDrive+0x94>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa0:	f7ff fcc8 	bl	8001434 <HAL_GetTick>
 8001aa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001aa6:	e009      	b.n	8001abc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001aa8:	f7ff fcc4 	bl	8001434 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ab6:	d901      	bls.n	8001abc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e01f      	b.n	8001afc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac8:	d1ee      	bne.n	8001aa8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad0:	f7ff fcb0 	bl	8001434 <HAL_GetTick>
 8001ad4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ad6:	e009      	b.n	8001aec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ad8:	f7ff fcac 	bl	8001434 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ae6:	d901      	bls.n	8001aec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e007      	b.n	8001afc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001af8:	d1ee      	bne.n	8001ad8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	420e0040 	.word	0x420e0040
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	420e0044 	.word	0x420e0044

08001b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e267      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d075      	beq.n	8001c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b32:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d00c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3e:	4b85      	ldr	r3, [pc, #532]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d112      	bne.n	8001b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4a:	4b82      	ldr	r3, [pc, #520]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b56:	d10b      	bne.n	8001b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	4b7e      	ldr	r3, [pc, #504]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d05b      	beq.n	8001c1c <HAL_RCC_OscConfig+0x108>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d157      	bne.n	8001c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e242      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x74>
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0xb0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x98>
 8001b92:	4b70      	ldr	r3, [pc, #448]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6f      	ldr	r2, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6c      	ldr	r2, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xb0>
 8001bac:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a68      	ldr	r2, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a65      	ldr	r2, [pc, #404]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fc32 	bl	8001434 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fc2e 	bl	8001434 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e207      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xc0>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fc1e 	bl	8001434 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fc1a 	bl	8001434 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1f3      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	4b51      	ldr	r3, [pc, #324]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0xe8>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d11c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x152>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1c7      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4937      	ldr	r1, [pc, #220]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <HAL_RCC_OscConfig+0x244>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fbd3 	bl	8001434 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff fbcf 	bl	8001434 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1a8      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4925      	ldr	r1, [pc, #148]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_RCC_OscConfig+0x244>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fbb2 	bl	8001434 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fbae 	bl	8001434 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e187      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d036      	beq.n	8001d6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d016      	beq.n	8001d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_RCC_OscConfig+0x248>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fb92 	bl	8001434 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff fb8e 	bl	8001434 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e167      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x240>)
 8001d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x200>
 8001d32:	e01b      	b.n	8001d6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_OscConfig+0x248>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fb7b 	bl	8001434 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	e00e      	b.n	8001d60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d42:	f7ff fb77 	bl	8001434 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d907      	bls.n	8001d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e150      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	42470000 	.word	0x42470000
 8001d5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ea      	bne.n	8001d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8097 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b81      	ldr	r3, [pc, #516]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b7d      	ldr	r3, [pc, #500]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a7c      	ldr	r2, [pc, #496]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b7a      	ldr	r3, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b77      	ldr	r3, [pc, #476]	; (8001f88 <HAL_RCC_OscConfig+0x474>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d118      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b74      	ldr	r3, [pc, #464]	; (8001f88 <HAL_RCC_OscConfig+0x474>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a73      	ldr	r2, [pc, #460]	; (8001f88 <HAL_RCC_OscConfig+0x474>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fb37 	bl	8001434 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dca:	f7ff fb33 	bl	8001434 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e10c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	; (8001f88 <HAL_RCC_OscConfig+0x474>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2ea>
 8001df0:	4b64      	ldr	r3, [pc, #400]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4a63      	ldr	r2, [pc, #396]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x324>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x30c>
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	4a5e      	ldr	r2, [pc, #376]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6713      	str	r3, [r2, #112]	; 0x70
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	4a5b      	ldr	r2, [pc, #364]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCC_OscConfig+0x324>
 8001e20:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	4a57      	ldr	r2, [pc, #348]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e32:	f023 0304 	bic.w	r3, r3, #4
 8001e36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d015      	beq.n	8001e6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff faf8 	bl	8001434 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7ff faf4 	bl	8001434 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0cb      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0ee      	beq.n	8001e48 <HAL_RCC_OscConfig+0x334>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fae2 	bl	8001434 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e74:	f7ff fade 	bl	8001434 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e0b5      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ee      	bne.n	8001e74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	4a38      	ldr	r2, [pc, #224]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a1 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d05c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d141      	bne.n	8001f4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_OscConfig+0x478>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fab2 	bl	8001434 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff faae 	bl	8001434 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e087      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	019b      	lsls	r3, r3, #6
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	041b      	lsls	r3, r3, #16
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	491b      	ldr	r1, [pc, #108]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x478>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa87 	bl	8001434 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff fa83 	bl	8001434 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e05c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x416>
 8001f48:	e054      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_RCC_OscConfig+0x478>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fa70 	bl	8001434 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff fa6c 	bl	8001434 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e045      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x444>
 8001f76:	e03d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e038      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x4ec>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d028      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d121      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d111      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0cc      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d90c      	bls.n	8002040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b65      	ldr	r3, [pc, #404]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0b8      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800207a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	494d      	ldr	r1, [pc, #308]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d044      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d119      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e07f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e067      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4934      	ldr	r1, [pc, #208]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7ff f99e 	bl	8001434 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff f99a 	bl	8001434 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e04f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d20c      	bcs.n	800214c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e032      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4916      	ldr	r1, [pc, #88]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	490e      	ldr	r1, [pc, #56]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800218a:	f000 f821 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 800218e:	4602      	mov	r2, r0
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	490a      	ldr	r1, [pc, #40]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	5ccb      	ldrb	r3, [r1, r3]
 800219e:	fa22 f303 	lsr.w	r3, r2, r3
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f8fe 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00
 80021c0:	40023800 	.word	0x40023800
 80021c4:	08006364 	.word	0x08006364
 80021c8:	20000024 	.word	0x20000024
 80021cc:	20000028 	.word	0x20000028

080021d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d4:	b094      	sub	sp, #80	; 0x50
 80021d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
 80021dc:	2300      	movs	r3, #0
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e0:	2300      	movs	r3, #0
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e8:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d00d      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x40>
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	f200 80e1 	bhi.w	80023bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x34>
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d003      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x3a>
 8002202:	e0db      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b73      	ldr	r3, [pc, #460]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002208:	e0db      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800220a:	4b73      	ldr	r3, [pc, #460]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800220c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800220e:	e0d8      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002210:	4b6f      	ldr	r3, [pc, #444]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002218:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d063      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002226:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	099b      	lsrs	r3, r3, #6
 800222c:	2200      	movs	r2, #0
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002230:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
 800223e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002242:	4622      	mov	r2, r4
 8002244:	462b      	mov	r3, r5
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	0159      	lsls	r1, r3, #5
 8002250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002254:	0150      	lsls	r0, r2, #5
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4621      	mov	r1, r4
 800225c:	1a51      	subs	r1, r2, r1
 800225e:	6139      	str	r1, [r7, #16]
 8002260:	4629      	mov	r1, r5
 8002262:	eb63 0301 	sbc.w	r3, r3, r1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002274:	4659      	mov	r1, fp
 8002276:	018b      	lsls	r3, r1, #6
 8002278:	4651      	mov	r1, sl
 800227a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800227e:	4651      	mov	r1, sl
 8002280:	018a      	lsls	r2, r1, #6
 8002282:	4651      	mov	r1, sl
 8002284:	ebb2 0801 	subs.w	r8, r2, r1
 8002288:	4659      	mov	r1, fp
 800228a:	eb63 0901 	sbc.w	r9, r3, r1
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800229a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800229e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022a2:	4690      	mov	r8, r2
 80022a4:	4699      	mov	r9, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	eb18 0303 	adds.w	r3, r8, r3
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	462b      	mov	r3, r5
 80022b0:	eb49 0303 	adc.w	r3, r9, r3
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022c2:	4629      	mov	r1, r5
 80022c4:	024b      	lsls	r3, r1, #9
 80022c6:	4621      	mov	r1, r4
 80022c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022cc:	4621      	mov	r1, r4
 80022ce:	024a      	lsls	r2, r1, #9
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d6:	2200      	movs	r2, #0
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e0:	f7fd ffd6 	bl	8000290 <__aeabi_uldivmod>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4613      	mov	r3, r2
 80022ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022ec:	e058      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	099b      	lsrs	r3, r3, #6
 80022f4:	2200      	movs	r2, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	4611      	mov	r1, r2
 80022fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022fe:	623b      	str	r3, [r7, #32]
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
 8002304:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002308:	4642      	mov	r2, r8
 800230a:	464b      	mov	r3, r9
 800230c:	f04f 0000 	mov.w	r0, #0
 8002310:	f04f 0100 	mov.w	r1, #0
 8002314:	0159      	lsls	r1, r3, #5
 8002316:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231a:	0150      	lsls	r0, r2, #5
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4641      	mov	r1, r8
 8002322:	ebb2 0a01 	subs.w	sl, r2, r1
 8002326:	4649      	mov	r1, r9
 8002328:	eb63 0b01 	sbc.w	fp, r3, r1
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002338:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800233c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002340:	ebb2 040a 	subs.w	r4, r2, sl
 8002344:	eb63 050b 	sbc.w	r5, r3, fp
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	00eb      	lsls	r3, r5, #3
 8002352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002356:	00e2      	lsls	r2, r4, #3
 8002358:	4614      	mov	r4, r2
 800235a:	461d      	mov	r5, r3
 800235c:	4643      	mov	r3, r8
 800235e:	18e3      	adds	r3, r4, r3
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	464b      	mov	r3, r9
 8002364:	eb45 0303 	adc.w	r3, r5, r3
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002376:	4629      	mov	r1, r5
 8002378:	028b      	lsls	r3, r1, #10
 800237a:	4621      	mov	r1, r4
 800237c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002380:	4621      	mov	r1, r4
 8002382:	028a      	lsls	r2, r1, #10
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	2200      	movs	r2, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	61fa      	str	r2, [r7, #28]
 8002390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002394:	f7fd ff7c 	bl	8000290 <__aeabi_uldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4613      	mov	r3, r2
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	3301      	adds	r3, #1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ba:	e002      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3750      	adds	r7, #80	; 0x50
 80023c8:	46bd      	mov	sp, r7
 80023ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	00f42400 	.word	0x00f42400
 80023d8:	007a1200 	.word	0x007a1200

080023dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000024 	.word	0x20000024

080023f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023f8:	f7ff fff0 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0a9b      	lsrs	r3, r3, #10
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	08006374 	.word	0x08006374

0800241c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002420:	f7ff ffdc 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	0b5b      	lsrs	r3, r3, #13
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4903      	ldr	r1, [pc, #12]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	08006374 	.word	0x08006374

08002444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07b      	b.n	800254e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002466:	d009      	beq.n	800247c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
 800246e:	e005      	b.n	800247c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fcd6 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	ea42 0103 	orr.w	r1, r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0104 	and.w	r1, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	f003 0210 	and.w	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b088      	sub	sp, #32
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_SPI_Transmit+0x22>
 8002574:	2302      	movs	r3, #2
 8002576:	e126      	b.n	80027c6 <HAL_SPI_Transmit+0x270>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002580:	f7fe ff58 	bl	8001434 <HAL_GetTick>
 8002584:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d002      	beq.n	800259c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	77fb      	strb	r3, [r7, #31]
    goto error;
 800259a:	e10b      	b.n	80027b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_Transmit+0x52>
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ac:	e102      	b.n	80027b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2203      	movs	r2, #3
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f4:	d10f      	bne.n	8002616 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002604:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002614:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d007      	beq.n	8002634 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800263c:	d14b      	bne.n	80026d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_SPI_Transmit+0xf6>
 8002646:	8afb      	ldrh	r3, [r7, #22]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d13e      	bne.n	80026ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	1c9a      	adds	r2, r3, #2
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002670:	e02b      	b.n	80026ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b02      	cmp	r3, #2
 800267e:	d112      	bne.n	80026a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	1c9a      	adds	r2, r3, #2
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80026a4:	e011      	b.n	80026ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026a6:	f7fe fec5 	bl	8001434 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d803      	bhi.n	80026be <HAL_SPI_Transmit+0x168>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d102      	bne.n	80026c4 <HAL_SPI_Transmit+0x16e>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026c8:	e074      	b.n	80027b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ce      	bne.n	8002672 <HAL_SPI_Transmit+0x11c>
 80026d4:	e04c      	b.n	8002770 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_SPI_Transmit+0x18e>
 80026de:	8afb      	ldrh	r3, [r7, #22]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d140      	bne.n	8002766 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	330c      	adds	r3, #12
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800270a:	e02c      	b.n	8002766 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d113      	bne.n	8002742 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	7812      	ldrb	r2, [r2, #0]
 8002726:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002740:	e011      	b.n	8002766 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002742:	f7fe fe77 	bl	8001434 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d803      	bhi.n	800275a <HAL_SPI_Transmit+0x204>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d102      	bne.n	8002760 <HAL_SPI_Transmit+0x20a>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002764:	e026      	b.n	80027b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1cd      	bne.n	800270c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f8b3 	bl	80028e0 <SPI_EndRxTxTransaction>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e000      	b.n	80027b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80027b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027e0:	f7fe fe28 	bl	8001434 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027f0:	f7fe fe20 	bl	8001434 <HAL_GetTick>
 80027f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027f6:	4b39      	ldr	r3, [pc, #228]	; (80028dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	015b      	lsls	r3, r3, #5
 80027fc:	0d1b      	lsrs	r3, r3, #20
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002806:	e054      	b.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d050      	beq.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002810:	f7fe fe10 	bl	8001434 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	429a      	cmp	r2, r3
 800281e:	d902      	bls.n	8002826 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d13d      	bne.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283e:	d111      	bne.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002848:	d004      	beq.n	8002854 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002852:	d107      	bne.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286c:	d10f      	bne.n	800288e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800288c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e017      	b.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d19b      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000024 	.word	0x20000024

080028e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <SPI_EndRxTxTransaction+0x7c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <SPI_EndRxTxTransaction+0x80>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0d5b      	lsrs	r3, r3, #21
 80028f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d112      	bne.n	8002932 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff ff5a 	bl	80027d0 <SPI_WaitFlagStateUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e00f      	b.n	8002952 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3b01      	subs	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d0f2      	beq.n	8002932 <SPI_EndRxTxTransaction+0x52>
 800294c:	e000      	b.n	8002950 <SPI_EndRxTxTransaction+0x70>
        break;
 800294e:	bf00      	nop
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000024 	.word	0x20000024
 8002960:	165e9f81 	.word	0x165e9f81

08002964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e041      	b.n	80029fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fac4 	bl	8000f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 fa96 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e04e      	b.n	8002aba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d022      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d01d      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <HAL_TIM_Base_Start_IT+0xc8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d018      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d013      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00e      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d009      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	; (8002adc <HAL_TIM_Base_Start_IT+0xd8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d111      	bne.n	8002aa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d010      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa6:	e007      	b.n	8002ab8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40010400 	.word	0x40010400
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40001800 	.word	0x40001800

08002ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0202 	mvn.w	r2, #2
 8002b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f9b5 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f9a7 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f9b8 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0204 	mvn.w	r2, #4
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f98b 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f97d 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f98e 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0208 	mvn.w	r2, #8
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f961 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f953 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f964 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0210 	mvn.w	r2, #16
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2208      	movs	r2, #8
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f937 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f929 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f93a 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0201 	mvn.w	r2, #1
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe f88e 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b80      	cmp	r3, #128	; 0x80
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fae0 	bl	8003254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b40      	cmp	r3, #64	; 0x40
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b40      	cmp	r3, #64	; 0x40
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8ff 	bl	8002ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0220 	mvn.w	r2, #32
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 faaa 	bl	8003240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIM_ConfigClockSource+0x1c>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0b4      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x186>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d48:	d03e      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4e:	f200 8087 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	f000 8086 	beq.w	8002e66 <HAL_TIM_ConfigClockSource+0x172>
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5e:	d87f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b70      	cmp	r3, #112	; 0x70
 8002d62:	d01a      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0xa6>
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d87b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b60      	cmp	r3, #96	; 0x60
 8002d6a:	d050      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x11a>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d877      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b50      	cmp	r3, #80	; 0x50
 8002d72:	d03c      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0xfa>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d873      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d058      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x13a>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d86f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b30      	cmp	r3, #48	; 0x30
 8002d82:	d064      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d86b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d060      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x15a>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d867      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05c      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x15a>
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d05a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x15a>
 8002d98:	e062      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f000 f9ad 	bl	8003108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	609a      	str	r2, [r3, #8]
      break;
 8002dc6:	e04f      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f000 f996 	bl	8003108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dea:	609a      	str	r2, [r3, #8]
      break;
 8002dec:	e03c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f000 f90a 	bl	8003014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2150      	movs	r1, #80	; 0x50
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f963 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e0c:	e02c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 f929 	bl	8003072 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2160      	movs	r1, #96	; 0x60
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f953 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e01c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 f8ea 	bl	8003014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f943 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e00c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f000 f93a 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e5e:	e003      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e000      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d00f      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3d      	ldr	r2, [pc, #244]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3c      	ldr	r2, [pc, #240]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d007      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <TIM_Base_SetConfig+0x120>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d108      	bne.n	8002f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a2f      	ldr	r2, [pc, #188]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d027      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d023      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <TIM_Base_SetConfig+0x120>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d017      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <TIM_Base_SetConfig+0x128>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a27      	ldr	r2, [pc, #156]	; (8003000 <TIM_Base_SetConfig+0x12c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00f      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a26      	ldr	r2, [pc, #152]	; (8003004 <TIM_Base_SetConfig+0x130>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a25      	ldr	r2, [pc, #148]	; (8003008 <TIM_Base_SetConfig+0x134>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a24      	ldr	r2, [pc, #144]	; (800300c <TIM_Base_SetConfig+0x138>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a23      	ldr	r2, [pc, #140]	; (8003010 <TIM_Base_SetConfig+0x13c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d108      	bne.n	8002f98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0xf8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40010400 	.word	0x40010400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800
 8003008:	40001800 	.word	0x40001800
 800300c:	40001c00 	.word	0x40001c00
 8003010:	40002000 	.word	0x40002000

08003014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800303e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 030a 	bic.w	r3, r3, #10
 8003050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b087      	sub	sp, #28
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f023 0210 	bic.w	r2, r3, #16
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800309c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	031b      	lsls	r3, r3, #12
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f043 0307 	orr.w	r3, r3, #7
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	431a      	orrs	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800315c:	2302      	movs	r3, #2
 800315e:	e05a      	b.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a21      	ldr	r2, [pc, #132]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ac:	d01d      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40010400 	.word	0x40010400
 8003238:	40014000 	.word	0x40014000
 800323c:	40001800 	.word	0x40001800

08003240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e03f      	b.n	80032fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fe62 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	; 0x24
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f9cb 	bl	8003648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b08a      	sub	sp, #40	; 0x28
 8003306:	af02      	add	r7, sp, #8
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b20      	cmp	r3, #32
 8003320:	d17c      	bne.n	800341c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_UART_Transmit+0x2c>
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e075      	b.n	800341e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_UART_Transmit+0x3e>
 800333c:	2302      	movs	r3, #2
 800333e:	e06e      	b.n	800341e <HAL_UART_Transmit+0x11c>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2221      	movs	r2, #33	; 0x21
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003356:	f7fe f86d 	bl	8001434 <HAL_GetTick>
 800335a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	88fa      	ldrh	r2, [r7, #6]
 8003366:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003370:	d108      	bne.n	8003384 <HAL_UART_Transmit+0x82>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	e003      	b.n	800338c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003394:	e02a      	b.n	80033ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2200      	movs	r2, #0
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f8e2 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e036      	b.n	800341e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	3302      	adds	r3, #2
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	e007      	b.n	80033de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	781a      	ldrb	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	3301      	adds	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1cf      	bne.n	8003396 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2140      	movs	r1, #64	; 0x40
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f8b2 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e006      	b.n	800341e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b08a      	sub	sp, #40	; 0x28
 800342a:	af02      	add	r7, sp, #8
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b20      	cmp	r3, #32
 8003444:	f040 808c 	bne.w	8003560 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_UART_Receive+0x2e>
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e084      	b.n	8003562 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_UART_Receive+0x40>
 8003462:	2302      	movs	r3, #2
 8003464:	e07d      	b.n	8003562 <HAL_UART_Receive+0x13c>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2222      	movs	r2, #34	; 0x22
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003482:	f7fd ffd7 	bl	8001434 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	88fa      	ldrh	r2, [r7, #6]
 8003492:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349c:	d108      	bne.n	80034b0 <HAL_UART_Receive+0x8a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d104      	bne.n	80034b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	e003      	b.n	80034b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034c0:	e043      	b.n	800354a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2120      	movs	r1, #32
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f84c 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e042      	b.n	8003562 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	3302      	adds	r3, #2
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	e01f      	b.n	800353c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d007      	beq.n	8003516 <HAL_UART_Receive+0xf0>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <HAL_UART_Receive+0xfe>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e008      	b.n	8003536 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003530:	b2da      	uxtb	r2, r3
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1b6      	bne.n	80034c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b090      	sub	sp, #64	; 0x40
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357a:	e050      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d04c      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x30>
 800358a:	f7fd ff53 	bl	8001434 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003596:	429a      	cmp	r2, r3
 8003598:	d241      	bcs.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ba:	637a      	str	r2, [r7, #52]	; 0x34
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e5      	bne.n	800359a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3314      	adds	r3, #20
 80035d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	613b      	str	r3, [r7, #16]
   return(result);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3314      	adds	r3, #20
 80035ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ee:	623a      	str	r2, [r7, #32]
 80035f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	69f9      	ldr	r1, [r7, #28]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e5      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e00f      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d09f      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3740      	adds	r7, #64	; 0x40
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800364c:	b0c0      	sub	sp, #256	; 0x100
 800364e:	af00      	add	r7, sp, #0
 8003650:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	68d9      	ldr	r1, [r3, #12]
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	ea40 0301 	orr.w	r3, r0, r1
 8003670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	431a      	orrs	r2, r3
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036a0:	f021 010c 	bic.w	r1, r1, #12
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ae:	430b      	orrs	r3, r1
 80036b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	6999      	ldr	r1, [r3, #24]
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	ea40 0301 	orr.w	r3, r0, r1
 80036ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <UART_SetConfig+0x2cc>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d005      	beq.n	80036e8 <UART_SetConfig+0xa0>
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <UART_SetConfig+0x2d0>)
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d104      	bne.n	80036f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7fe fe98 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 80036ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036f0:	e003      	b.n	80036fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036f2:	f7fe fe7f 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 80036f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003704:	f040 810c 	bne.w	8003920 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370c:	2200      	movs	r2, #0
 800370e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003712:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003716:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800371a:	4622      	mov	r2, r4
 800371c:	462b      	mov	r3, r5
 800371e:	1891      	adds	r1, r2, r2
 8003720:	65b9      	str	r1, [r7, #88]	; 0x58
 8003722:	415b      	adcs	r3, r3
 8003724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003726:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800372a:	4621      	mov	r1, r4
 800372c:	eb12 0801 	adds.w	r8, r2, r1
 8003730:	4629      	mov	r1, r5
 8003732:	eb43 0901 	adc.w	r9, r3, r1
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800374a:	4690      	mov	r8, r2
 800374c:	4699      	mov	r9, r3
 800374e:	4623      	mov	r3, r4
 8003750:	eb18 0303 	adds.w	r3, r8, r3
 8003754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003758:	462b      	mov	r3, r5
 800375a:	eb49 0303 	adc.w	r3, r9, r3
 800375e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800376e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003776:	460b      	mov	r3, r1
 8003778:	18db      	adds	r3, r3, r3
 800377a:	653b      	str	r3, [r7, #80]	; 0x50
 800377c:	4613      	mov	r3, r2
 800377e:	eb42 0303 	adc.w	r3, r2, r3
 8003782:	657b      	str	r3, [r7, #84]	; 0x54
 8003784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003788:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800378c:	f7fc fd80 	bl	8000290 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4b61      	ldr	r3, [pc, #388]	; (800391c <UART_SetConfig+0x2d4>)
 8003796:	fba3 2302 	umull	r2, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	011c      	lsls	r4, r3, #4
 800379e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80037b8:	415b      	adcs	r3, r3
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037c0:	4641      	mov	r1, r8
 80037c2:	eb12 0a01 	adds.w	sl, r2, r1
 80037c6:	4649      	mov	r1, r9
 80037c8:	eb43 0b01 	adc.w	fp, r3, r1
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e0:	4692      	mov	sl, r2
 80037e2:	469b      	mov	fp, r3
 80037e4:	4643      	mov	r3, r8
 80037e6:	eb1a 0303 	adds.w	r3, sl, r3
 80037ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037ee:	464b      	mov	r3, r9
 80037f0:	eb4b 0303 	adc.w	r3, fp, r3
 80037f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003804:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003808:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800380c:	460b      	mov	r3, r1
 800380e:	18db      	adds	r3, r3, r3
 8003810:	643b      	str	r3, [r7, #64]	; 0x40
 8003812:	4613      	mov	r3, r2
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
 800381a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800381e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003822:	f7fc fd35 	bl	8000290 <__aeabi_uldivmod>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4611      	mov	r1, r2
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <UART_SetConfig+0x2d4>)
 800382e:	fba3 2301 	umull	r2, r3, r3, r1
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2264      	movs	r2, #100	; 0x64
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	1acb      	subs	r3, r1, r3
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003842:	4b36      	ldr	r3, [pc, #216]	; (800391c <UART_SetConfig+0x2d4>)
 8003844:	fba3 2302 	umull	r2, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003850:	441c      	add	r4, r3
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800385c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003860:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	63b9      	str	r1, [r7, #56]	; 0x38
 800386c:	415b      	adcs	r3, r3
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003874:	4641      	mov	r1, r8
 8003876:	1851      	adds	r1, r2, r1
 8003878:	6339      	str	r1, [r7, #48]	; 0x30
 800387a:	4649      	mov	r1, r9
 800387c:	414b      	adcs	r3, r1
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800388c:	4659      	mov	r1, fp
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4651      	mov	r1, sl
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4642      	mov	r2, r8
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038a8:	464b      	mov	r3, r9
 80038aa:	460a      	mov	r2, r1
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038c8:	460b      	mov	r3, r1
 80038ca:	18db      	adds	r3, r3, r3
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ce:	4613      	mov	r3, r2
 80038d0:	eb42 0303 	adc.w	r3, r2, r3
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038de:	f7fc fcd7 	bl	8000290 <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <UART_SetConfig+0x2d4>)
 80038e8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	2164      	movs	r1, #100	; 0x64
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	3332      	adds	r3, #50	; 0x32
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <UART_SetConfig+0x2d4>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	f003 0207 	and.w	r2, r3, #7
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4422      	add	r2, r4
 800390e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003910:	e105      	b.n	8003b1e <UART_SetConfig+0x4d6>
 8003912:	bf00      	nop
 8003914:	40011000 	.word	0x40011000
 8003918:	40011400 	.word	0x40011400
 800391c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800392a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800392e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003932:	4642      	mov	r2, r8
 8003934:	464b      	mov	r3, r9
 8003936:	1891      	adds	r1, r2, r2
 8003938:	6239      	str	r1, [r7, #32]
 800393a:	415b      	adcs	r3, r3
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
 800393e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003942:	4641      	mov	r1, r8
 8003944:	1854      	adds	r4, r2, r1
 8003946:	4649      	mov	r1, r9
 8003948:	eb43 0501 	adc.w	r5, r3, r1
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	00eb      	lsls	r3, r5, #3
 8003956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800395a:	00e2      	lsls	r2, r4, #3
 800395c:	4614      	mov	r4, r2
 800395e:	461d      	mov	r5, r3
 8003960:	4643      	mov	r3, r8
 8003962:	18e3      	adds	r3, r4, r3
 8003964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003968:	464b      	mov	r3, r9
 800396a:	eb45 0303 	adc.w	r3, r5, r3
 800396e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800397e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800398e:	4629      	mov	r1, r5
 8003990:	008b      	lsls	r3, r1, #2
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003998:	4621      	mov	r1, r4
 800399a:	008a      	lsls	r2, r1, #2
 800399c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039a0:	f7fc fc76 	bl	8000290 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4b60      	ldr	r3, [pc, #384]	; (8003b2c <UART_SetConfig+0x4e4>)
 80039aa:	fba3 2302 	umull	r2, r3, r3, r2
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	011c      	lsls	r4, r3, #4
 80039b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039c4:	4642      	mov	r2, r8
 80039c6:	464b      	mov	r3, r9
 80039c8:	1891      	adds	r1, r2, r2
 80039ca:	61b9      	str	r1, [r7, #24]
 80039cc:	415b      	adcs	r3, r3
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d4:	4641      	mov	r1, r8
 80039d6:	1851      	adds	r1, r2, r1
 80039d8:	6139      	str	r1, [r7, #16]
 80039da:	4649      	mov	r1, r9
 80039dc:	414b      	adcs	r3, r1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039ec:	4659      	mov	r1, fp
 80039ee:	00cb      	lsls	r3, r1, #3
 80039f0:	4651      	mov	r1, sl
 80039f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f6:	4651      	mov	r1, sl
 80039f8:	00ca      	lsls	r2, r1, #3
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	4642      	mov	r2, r8
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a08:	464b      	mov	r3, r9
 8003a0a:	460a      	mov	r2, r1
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	008b      	lsls	r3, r1, #2
 8003a30:	4641      	mov	r1, r8
 8003a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a36:	4641      	mov	r1, r8
 8003a38:	008a      	lsls	r2, r1, #2
 8003a3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a3e:	f7fc fc27 	bl	8000290 <__aeabi_uldivmod>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <UART_SetConfig+0x4e4>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	2164      	movs	r1, #100	; 0x64
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	3332      	adds	r3, #50	; 0x32
 8003a5a:	4a34      	ldr	r2, [pc, #208]	; (8003b2c <UART_SetConfig+0x4e4>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a66:	441c      	add	r4, r3
 8003a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003a70:	677a      	str	r2, [r7, #116]	; 0x74
 8003a72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a76:	4642      	mov	r2, r8
 8003a78:	464b      	mov	r3, r9
 8003a7a:	1891      	adds	r1, r2, r2
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	415b      	adcs	r3, r3
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a86:	4641      	mov	r1, r8
 8003a88:	1851      	adds	r1, r2, r1
 8003a8a:	6039      	str	r1, [r7, #0]
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	414b      	adcs	r3, r1
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	00cb      	lsls	r3, r1, #3
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	00ca      	lsls	r2, r1, #3
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ab8:	464b      	mov	r3, r9
 8003aba:	460a      	mov	r2, r1
 8003abc:	eb42 0303 	adc.w	r3, r2, r3
 8003ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	663b      	str	r3, [r7, #96]	; 0x60
 8003acc:	667a      	str	r2, [r7, #100]	; 0x64
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ada:	4649      	mov	r1, r9
 8003adc:	008b      	lsls	r3, r1, #2
 8003ade:	4641      	mov	r1, r8
 8003ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	008a      	lsls	r2, r1, #2
 8003ae8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003aec:	f7fc fbd0 	bl	8000290 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <UART_SetConfig+0x4e4>)
 8003af6:	fba3 1302 	umull	r1, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2164      	movs	r1, #100	; 0x64
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	3332      	adds	r3, #50	; 0x32
 8003b08:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <UART_SetConfig+0x4e4>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4422      	add	r2, r4
 8003b1c:	609a      	str	r2, [r3, #8]
}
 8003b1e:	bf00      	nop
 8003b20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b24:	46bd      	mov	sp, r7
 8003b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2a:	bf00      	nop
 8003b2c:	51eb851f 	.word	0x51eb851f

08003b30 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	7c1b      	ldrb	r3, [r3, #16]
 8003b3e:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 ff48 	bl	80059f4 <memset>
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	7c1b      	ldrb	r3, [r3, #16]
 8003b82:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	89ba      	ldrh	r2, [r7, #12]
 8003b94:	fb12 f303 	smulbb	r3, r2, r3
 8003b98:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003b9a:	89bb      	ldrh	r3, [r7, #12]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003ba0:	89bb      	ldrh	r3, [r7, #12]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003ba8:	7bf9      	ldrb	r1, [r7, #15]
 8003baa:	78ba      	ldrb	r2, [r7, #2]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f001 fe24 	bl	8005802 <u8x8_DrawTile>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bd4:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bdc:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	7c5b      	ldrb	r3, [r3, #17]
 8003be4:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003be6:	7bba      	ldrb	r2, [r7, #14]
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ffbd 	bl	8003b6c <u8g2_send_tile_row>
    src_row++;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003bf8:	7bbb      	ldrb	r3, [r7, #14]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	7b7b      	ldrb	r3, [r7, #13]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d203      	bcs.n	8003c0e <u8g2_send_buffer+0x4c>
 8003c06:	7bba      	ldrb	r2, [r7, #14]
 8003c08:	7b3b      	ldrb	r3, [r7, #12]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d3eb      	bcc.n	8003be6 <u8g2_send_buffer+0x24>
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ff69 	bl	8003b30 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ffd8 	bl	8003c16 <u8g2_SetBufferCurrTileRow>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ffa3 	bl	8003bc2 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c82:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	7c5b      	ldrb	r3, [r3, #17]
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d304      	bcc.n	8003ca6 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f001 fe01 	bl	80058a4 <u8x8_RefreshDisplay>
    return 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e00d      	b.n	8003cc2 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff3d 	bl	8003b30 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ffab 	bl	8003c16 <u8g2_SetBufferCurrTileRow>
  return 1;
 8003cc0:	2301      	movs	r3, #1
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	701a      	strb	r2, [r3, #0]
  return buf;
 8003cda:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	20000308 	.word	0x20000308

08003cec <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8003d02:	490c      	ldr	r1, [pc, #48]	; (8003d34 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f001 fe2d 	bl	8005964 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003d0a:	f107 0313 	add.w	r3, r7, #19
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ffdc 	bl	8003ccc <u8g2_m_16_8_f>
 8003d14:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003d16:	7cfa      	ldrb	r2, [r7, #19]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f001 f9b4 	bl	800508e <u8g2_SetupBuffer>
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	08005525 	.word	0x08005525
 8003d34:	080056fd 	.word	0x080056fd
 8003d38:	08004f11 	.word	0x08004f11

08003d3c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	781b      	ldrb	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	81fb      	strh	r3, [r7, #14]
    font++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003d80:	89fb      	ldrh	r3, [r7, #14]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	4413      	add	r3, r2
 8003d90:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003d92:	89fb      	ldrh	r3, [r7, #14]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8003daa:	2100      	movs	r1, #0
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f7ff ffc5 	bl	8003d3c <u8g2_font_get_byte>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003dba:	2101      	movs	r1, #1
 8003dbc:	6838      	ldr	r0, [r7, #0]
 8003dbe:	f7ff ffbd 	bl	8003d3c <u8g2_font_get_byte>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003dca:	2102      	movs	r1, #2
 8003dcc:	6838      	ldr	r0, [r7, #0]
 8003dce:	f7ff ffb5 	bl	8003d3c <u8g2_font_get_byte>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8003dda:	2103      	movs	r1, #3
 8003ddc:	6838      	ldr	r0, [r7, #0]
 8003dde:	f7ff ffad 	bl	8003d3c <u8g2_font_get_byte>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003dea:	2104      	movs	r1, #4
 8003dec:	6838      	ldr	r0, [r7, #0]
 8003dee:	f7ff ffa5 	bl	8003d3c <u8g2_font_get_byte>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003dfa:	2105      	movs	r1, #5
 8003dfc:	6838      	ldr	r0, [r7, #0]
 8003dfe:	f7ff ff9d 	bl	8003d3c <u8g2_font_get_byte>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003e0a:	2106      	movs	r1, #6
 8003e0c:	6838      	ldr	r0, [r7, #0]
 8003e0e:	f7ff ff95 	bl	8003d3c <u8g2_font_get_byte>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003e1a:	2107      	movs	r1, #7
 8003e1c:	6838      	ldr	r0, [r7, #0]
 8003e1e:	f7ff ff8d 	bl	8003d3c <u8g2_font_get_byte>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003e2a:	2108      	movs	r1, #8
 8003e2c:	6838      	ldr	r0, [r7, #0]
 8003e2e:	f7ff ff85 	bl	8003d3c <u8g2_font_get_byte>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003e3a:	2109      	movs	r1, #9
 8003e3c:	6838      	ldr	r0, [r7, #0]
 8003e3e:	f7ff ff7d 	bl	8003d3c <u8g2_font_get_byte>
 8003e42:	4603      	mov	r3, r0
 8003e44:	b25a      	sxtb	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003e4a:	210a      	movs	r1, #10
 8003e4c:	6838      	ldr	r0, [r7, #0]
 8003e4e:	f7ff ff75 	bl	8003d3c <u8g2_font_get_byte>
 8003e52:	4603      	mov	r3, r0
 8003e54:	b25a      	sxtb	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003e5a:	210b      	movs	r1, #11
 8003e5c:	6838      	ldr	r0, [r7, #0]
 8003e5e:	f7ff ff6d 	bl	8003d3c <u8g2_font_get_byte>
 8003e62:	4603      	mov	r3, r0
 8003e64:	b25a      	sxtb	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003e6a:	210c      	movs	r1, #12
 8003e6c:	6838      	ldr	r0, [r7, #0]
 8003e6e:	f7ff ff65 	bl	8003d3c <u8g2_font_get_byte>
 8003e72:	4603      	mov	r3, r0
 8003e74:	b25a      	sxtb	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003e7a:	210d      	movs	r1, #13
 8003e7c:	6838      	ldr	r0, [r7, #0]
 8003e7e:	f7ff ff5d 	bl	8003d3c <u8g2_font_get_byte>
 8003e82:	4603      	mov	r3, r0
 8003e84:	b25a      	sxtb	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003e8a:	210e      	movs	r1, #14
 8003e8c:	6838      	ldr	r0, [r7, #0]
 8003e8e:	f7ff ff55 	bl	8003d3c <u8g2_font_get_byte>
 8003e92:	4603      	mov	r3, r0
 8003e94:	b25a      	sxtb	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003e9a:	210f      	movs	r1, #15
 8003e9c:	6838      	ldr	r0, [r7, #0]
 8003e9e:	f7ff ff4d 	bl	8003d3c <u8g2_font_get_byte>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	b25a      	sxtb	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003eaa:	2110      	movs	r1, #16
 8003eac:	6838      	ldr	r0, [r7, #0]
 8003eae:	f7ff ff45 	bl	8003d3c <u8g2_font_get_byte>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	b25a      	sxtb	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003eba:	2111      	movs	r1, #17
 8003ebc:	6838      	ldr	r0, [r7, #0]
 8003ebe:	f7ff ff4f 	bl	8003d60 <u8g2_font_get_word>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003eca:	2113      	movs	r1, #19
 8003ecc:	6838      	ldr	r0, [r7, #0]
 8003ece:	f7ff ff47 	bl	8003d60 <u8g2_font_get_word>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003eda:	2115      	movs	r1, #21
 8003edc:	6838      	ldr	r0, [r7, #0]
 8003ede:	f7ff ff3f 	bl	8003d60 <u8g2_font_get_word>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	82da      	strh	r2, [r3, #22]
#endif
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7b1b      	ldrb	r3, [r3, #12]
 8003f02:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	7b7b      	ldrb	r3, [r7, #13]
 8003f10:	fa42 f303 	asr.w	r3, r2, r3
 8003f14:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003f16:	7b7b      	ldrb	r3, [r7, #13]
 8003f18:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003f1a:	7bba      	ldrb	r2, [r7, #14]
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	4413      	add	r3, r2
 8003f20:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003f22:	7bbb      	ldrb	r3, [r7, #14]
 8003f24:	2b07      	cmp	r3, #7
 8003f26:	d91a      	bls.n	8003f5e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003f28:	2308      	movs	r3, #8
 8003f2a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003f2c:	7b3a      	ldrb	r2, [r7, #12]
 8003f2e:	7b7b      	ldrb	r3, [r7, #13]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	7b3b      	ldrb	r3, [r7, #12]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	b25a      	sxtb	r2, r3
 8003f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	b25b      	sxtb	r3, r3
 8003f56:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003f58:	7bbb      	ldrb	r3, [r7, #14]
 8003f5a:	3b08      	subs	r3, #8
 8003f5c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f04f 32ff 	mov.w	r2, #4294967295
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	4013      	ands	r3, r2
 8003f72:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	7bba      	ldrb	r2, [r7, #14]
 8003f78:	731a      	strb	r2, [r3, #12]
  return val;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff ffaa 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003fac:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	7bbb      	ldrb	r3, [r7, #14]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	73fb      	strb	r3, [r7, #15]
  return v;
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003fce:	b490      	push	{r4, r7}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	4611      	mov	r1, r2
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4623      	mov	r3, r4
 8003fde:	80fb      	strh	r3, [r7, #6]
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	717b      	strb	r3, [r7, #5]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	713b      	strb	r3, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d014      	beq.n	800401c <u8g2_add_vector_y+0x4e>
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	dc19      	bgt.n	800402a <u8g2_add_vector_y+0x5c>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <u8g2_add_vector_y+0x32>
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d007      	beq.n	800400e <u8g2_add_vector_y+0x40>
 8003ffe:	e014      	b.n	800402a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8004000:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004004:	b29a      	uxth	r2, r3
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	4413      	add	r3, r2
 800400a:	80fb      	strh	r3, [r7, #6]
      break;
 800400c:	e014      	b.n	8004038 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800400e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004012:	b29a      	uxth	r2, r3
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	4413      	add	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
      break;
 800401a:	e00d      	b.n	8004038 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800401c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004020:	b29b      	uxth	r3, r3
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	80fb      	strh	r3, [r7, #6]
      break;
 8004028:	e006      	b.n	8004038 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800402a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800402e:	b29b      	uxth	r3, r3
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	80fb      	strh	r3, [r7, #6]
      break;      
 8004036:	bf00      	nop
  }
  return dy;
 8004038:	88fb      	ldrh	r3, [r7, #6]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bc90      	pop	{r4, r7}
 8004042:	4770      	bx	lr

08004044 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8004044:	b490      	push	{r4, r7}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	4604      	mov	r4, r0
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4623      	mov	r3, r4
 8004054:	80fb      	strh	r3, [r7, #6]
 8004056:	4603      	mov	r3, r0
 8004058:	717b      	strb	r3, [r7, #5]
 800405a:	460b      	mov	r3, r1
 800405c:	713b      	strb	r3, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d014      	beq.n	8004092 <u8g2_add_vector_x+0x4e>
 8004068:	2b02      	cmp	r3, #2
 800406a:	dc19      	bgt.n	80040a0 <u8g2_add_vector_x+0x5c>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <u8g2_add_vector_x+0x32>
 8004070:	2b01      	cmp	r3, #1
 8004072:	d007      	beq.n	8004084 <u8g2_add_vector_x+0x40>
 8004074:	e014      	b.n	80040a0 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8004076:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800407a:	b29a      	uxth	r2, r3
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	4413      	add	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
      break;
 8004082:	e014      	b.n	80040ae <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8004084:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004088:	b29b      	uxth	r3, r3
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	80fb      	strh	r3, [r7, #6]
      break;
 8004090:	e00d      	b.n	80040ae <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8004092:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004096:	b29b      	uxth	r3, r3
 8004098:	88fa      	ldrh	r2, [r7, #6]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	80fb      	strh	r3, [r7, #6]
      break;
 800409e:	e006      	b.n	80040ae <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80040a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	4413      	add	r3, r2
 80040aa:	80fb      	strh	r3, [r7, #6]
      break;      
 80040ac:	bf00      	nop
  }
  return dx;
 80040ae:	88fb      	ldrh	r3, [r7, #6]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc90      	pop	{r4, r7}
 80040b8:	4770      	bx	lr

080040ba <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af02      	add	r7, sp, #8
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	70fb      	strb	r3, [r7, #3]
 80040c6:	4613      	mov	r3, r2
 80040c8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3360      	adds	r3, #96	; 0x60
 80040ce:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80040da:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80040e2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80040ea:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	7d7b      	ldrb	r3, [r7, #21]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80040f8:	7dfa      	ldrb	r2, [r7, #23]
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d201      	bcs.n	8004104 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	889b      	ldrh	r3, [r3, #4]
 8004108:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	88db      	ldrh	r3, [r3, #6]
 800410e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004110:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004114:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	7c1b      	ldrb	r3, [r3, #16]
 800411c:	89b8      	ldrh	r0, [r7, #12]
 800411e:	f7ff ff91 	bl	8004044 <u8g2_add_vector_x>
 8004122:	4603      	mov	r3, r0
 8004124:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004126:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800412a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	7c1b      	ldrb	r3, [r3, #16]
 8004132:	8978      	ldrh	r0, [r7, #10]
 8004134:	f7ff ff4b 	bl	8003fce <u8g2_add_vector_y>
 8004138:	4603      	mov	r3, r0
 800413a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800413c:	78bb      	ldrb	r3, [r7, #2]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d010      	beq.n	8004164 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	7b9a      	ldrb	r2, [r3, #14]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800414c:	7dbb      	ldrb	r3, [r7, #22]
 800414e:	b298      	uxth	r0, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	7c1b      	ldrb	r3, [r3, #16]
 8004154:	897a      	ldrh	r2, [r7, #10]
 8004156:	89b9      	ldrh	r1, [r7, #12]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4603      	mov	r3, r0
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fdee 	bl	8004d3e <u8g2_DrawHVLine>
 8004162:	e013      	b.n	800418c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	7b5b      	ldrb	r3, [r3, #13]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10f      	bne.n	800418c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	7bda      	ldrb	r2, [r3, #15]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004176:	7dbb      	ldrb	r3, [r7, #22]
 8004178:	b298      	uxth	r0, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	7c1b      	ldrb	r3, [r3, #16]
 800417e:	897a      	ldrh	r2, [r7, #10]
 8004180:	89b9      	ldrh	r1, [r7, #12]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	4603      	mov	r3, r0
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fdd9 	bl	8004d3e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800418c:	7dfa      	ldrb	r2, [r7, #23]
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	429a      	cmp	r2, r3
 8004192:	d309      	bcc.n	80041a8 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8004194:	7dfa      	ldrb	r2, [r7, #23]
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	757b      	strb	r3, [r7, #21]
    ly++;
 80041a0:	7d3b      	ldrb	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80041a6:	e79d      	b.n	80040e4 <u8g2_font_decode_len+0x2a>
      break;
 80041a8:	bf00      	nop
  }
  lx += cnt;
 80041aa:	7d7a      	ldrb	r2, [r7, #21]
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	4413      	add	r3, r2
 80041b0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80041b2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80041ba:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	725a      	strb	r2, [r3, #9]
}
 80041c2:	bf00      	nop
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <u8g2_font_2x_decode_len>:


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b088      	sub	sp, #32
 80041ce:	af02      	add	r7, sp, #8
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	70fb      	strb	r3, [r7, #3]
 80041d6:	4613      	mov	r3, r2
 80041d8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3360      	adds	r3, #96	; 0x60
 80041de:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80041ea:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80041f2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80041fa:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	7d7b      	ldrb	r3, [r7, #21]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004208:	7dfa      	ldrb	r2, [r7, #23]
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	429a      	cmp	r2, r3
 800420e:	d201      	bcs.n	8004214 <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	889b      	ldrh	r3, [r3, #4]
 8004218:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	88db      	ldrh	r3, [r3, #6]
 800421e:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 8004220:	7d7b      	ldrb	r3, [r7, #21]
 8004222:	b29b      	uxth	r3, r3
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	89bb      	ldrh	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 800422e:	7d3b      	ldrb	r3, [r7, #20]
 8004230:	b29b      	uxth	r3, r3
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	897b      	ldrh	r3, [r7, #10]
 8004238:	4413      	add	r3, r2
 800423a:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800423c:	78bb      	ldrb	r3, [r7, #2]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01d      	beq.n	800427e <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	7b9a      	ldrb	r2, [r3, #14]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800424c:	7dbb      	ldrb	r3, [r7, #22]
 800424e:	b29b      	uxth	r3, r3
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	897a      	ldrh	r2, [r7, #10]
 8004256:	89b9      	ldrh	r1, [r7, #12]
 8004258:	2000      	movs	r0, #0
 800425a:	9000      	str	r0, [sp, #0]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fd6e 	bl	8004d3e <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 8004262:	897b      	ldrh	r3, [r7, #10]
 8004264:	3301      	adds	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	7dbb      	ldrb	r3, [r7, #22]
 800426a:	b29b      	uxth	r3, r3
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	89b9      	ldrh	r1, [r7, #12]
 8004272:	2000      	movs	r0, #0
 8004274:	9000      	str	r0, [sp, #0]
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fd61 	bl	8004d3e <u8g2_DrawHVLine>
 800427c:	e020      	b.n	80042c0 <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	7b5b      	ldrb	r3, [r3, #13]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11c      	bne.n	80042c0 <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	7bda      	ldrb	r2, [r3, #15]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004290:	7dbb      	ldrb	r3, [r7, #22]
 8004292:	b29b      	uxth	r3, r3
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	b29b      	uxth	r3, r3
 8004298:	897a      	ldrh	r2, [r7, #10]
 800429a:	89b9      	ldrh	r1, [r7, #12]
 800429c:	2000      	movs	r0, #0
 800429e:	9000      	str	r0, [sp, #0]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fd4c 	bl	8004d3e <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	3301      	adds	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	7dbb      	ldrb	r3, [r7, #22]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	89b9      	ldrh	r1, [r7, #12]
 80042b6:	2000      	movs	r0, #0
 80042b8:	9000      	str	r0, [sp, #0]
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fd3f 	bl	8004d3e <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80042c0:	7dfa      	ldrb	r2, [r7, #23]
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d309      	bcc.n	80042dc <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 80042c8:	7dfa      	ldrb	r2, [r7, #23]
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	757b      	strb	r3, [r7, #21]
    ly++;
 80042d4:	7d3b      	ldrb	r3, [r7, #20]
 80042d6:	3301      	adds	r3, #1
 80042d8:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80042da:	e78b      	b.n	80041f4 <u8g2_font_2x_decode_len+0x2a>
      break;
 80042dc:	bf00      	nop
  }
  lx += cnt;
 80042de:	7d7a      	ldrb	r2, [r7, #21]
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	4413      	add	r3, r2
 80042e4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80042e6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80042ee:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	725a      	strb	r2, [r3, #9]
  
}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3360      	adds	r3, #96	; 0x60
 800430c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004320:	4619      	mov	r1, r3
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fde5 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 8004328:	4603      	mov	r3, r0
 800432a:	b25a      	sxtb	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8004336:	4619      	mov	r1, r3
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff fdda 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 800433e:	4603      	mov	r3, r0
 8004340:	b25a      	sxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	7b9b      	ldrb	r3, [r3, #14]
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	73da      	strb	r2, [r3, #15]
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af02      	add	r7, sp, #8
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3360      	adds	r3, #96	; 0x60
 800437a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ffbd 	bl	80042fe <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800438a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8004392:	4619      	mov	r1, r3
 8004394:	6978      	ldr	r0, [r7, #20]
 8004396:	f7ff fdf7 	bl	8003f88 <u8g2_font_decode_get_signed_bits>
 800439a:	4603      	mov	r3, r0
 800439c:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80043a4:	4619      	mov	r1, r3
 80043a6:	6978      	ldr	r0, [r7, #20]
 80043a8:	f7ff fdee 	bl	8003f88 <u8g2_font_decode_get_signed_bits>
 80043ac:	4603      	mov	r3, r0
 80043ae:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80043b6:	4619      	mov	r1, r3
 80043b8:	6978      	ldr	r0, [r7, #20]
 80043ba:	f7ff fde5 	bl	8003f88 <u8g2_font_decode_get_signed_bits>
 80043be:	4603      	mov	r3, r0
 80043c0:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f340 80d7 	ble.w	800457c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	8898      	ldrh	r0, [r3, #4]
 80043d2:	7cfa      	ldrb	r2, [r7, #19]
 80043d4:	7c7b      	ldrb	r3, [r7, #17]
 80043d6:	4413      	add	r3, r2
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	425b      	negs	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	b25a      	sxtb	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	7c1b      	ldrb	r3, [r3, #16]
 80043e4:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80043e8:	f7ff fe2c 	bl	8004044 <u8g2_add_vector_x>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	88d8      	ldrh	r0, [r3, #6]
 80043f8:	7cfa      	ldrb	r2, [r7, #19]
 80043fa:	7c7b      	ldrb	r3, [r7, #17]
 80043fc:	4413      	add	r3, r2
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	425b      	negs	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	b25a      	sxtb	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	7c1b      	ldrb	r3, [r3, #16]
 800440a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800440e:	f7ff fdde 	bl	8003fce <u8g2_add_vector_y>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	889b      	ldrh	r3, [r3, #4]
 800441e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	88db      	ldrh	r3, [r3, #6]
 8004424:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8004426:	8bfb      	ldrh	r3, [r7, #30]
 8004428:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800442a:	8b7b      	ldrh	r3, [r7, #26]
 800442c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	7c1b      	ldrb	r3, [r3, #16]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d85a      	bhi.n	80044ec <u8g2_font_decode_glyph+0x180>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <u8g2_font_decode_glyph+0xd0>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	0800444d 	.word	0x0800444d
 8004440:	08004469 	.word	0x08004469
 8004444:	08004491 	.word	0x08004491
 8004448:	080044c5 	.word	0x080044c5
      {
	case 0:
	    x1 += decode->glyph_width;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004452:	b29a      	uxth	r2, r3
 8004454:	8bbb      	ldrh	r3, [r7, #28]
 8004456:	4413      	add	r3, r2
 8004458:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800445a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800445e:	b29a      	uxth	r2, r3
 8004460:	8b3b      	ldrh	r3, [r7, #24]
 8004462:	4413      	add	r3, r2
 8004464:	833b      	strh	r3, [r7, #24]
	    break;
 8004466:	e041      	b.n	80044ec <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8004468:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800446c:	b29b      	uxth	r3, r3
 800446e:	8bfa      	ldrh	r2, [r7, #30]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004474:	8bfb      	ldrh	r3, [r7, #30]
 8004476:	3301      	adds	r3, #1
 8004478:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800447a:	8bbb      	ldrh	r3, [r7, #28]
 800447c:	3301      	adds	r3, #1
 800447e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004486:	b29a      	uxth	r2, r3
 8004488:	8b3b      	ldrh	r3, [r7, #24]
 800448a:	4413      	add	r3, r2
 800448c:	833b      	strh	r3, [r7, #24]
	    break;
 800448e:	e02d      	b.n	80044ec <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004496:	b29b      	uxth	r3, r3
 8004498:	8bfa      	ldrh	r2, [r7, #30]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800449e:	8bfb      	ldrh	r3, [r7, #30]
 80044a0:	3301      	adds	r3, #1
 80044a2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80044a4:	8bbb      	ldrh	r3, [r7, #28]
 80044a6:	3301      	adds	r3, #1
 80044a8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80044aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8b7a      	ldrh	r2, [r7, #26]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80044b6:	8b7b      	ldrh	r3, [r7, #26]
 80044b8:	3301      	adds	r3, #1
 80044ba:	837b      	strh	r3, [r7, #26]
	    y1++;
 80044bc:	8b3b      	ldrh	r3, [r7, #24]
 80044be:	3301      	adds	r3, #1
 80044c0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80044c2:	e013      	b.n	80044ec <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80044c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	8bbb      	ldrh	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	8b7a      	ldrh	r2, [r7, #26]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80044de:	8b7b      	ldrh	r3, [r7, #26]
 80044e0:	3301      	adds	r3, #1
 80044e2:	837b      	strh	r3, [r7, #26]
	    y1++;
 80044e4:	8b3b      	ldrh	r3, [r7, #24]
 80044e6:	3301      	adds	r3, #1
 80044e8:	833b      	strh	r3, [r7, #24]
	    break;	  
 80044ea:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80044ec:	8bb8      	ldrh	r0, [r7, #28]
 80044ee:	8b7a      	ldrh	r2, [r7, #26]
 80044f0:	8bf9      	ldrh	r1, [r7, #30]
 80044f2:	8b3b      	ldrh	r3, [r7, #24]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	4603      	mov	r3, r0
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fcde 	bl	8004eba <u8g2_IsIntersection>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <u8g2_font_decode_glyph+0x19e>
	return d;
 8004504:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8004508:	e03a      	b.n	8004580 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2200      	movs	r2, #0
 8004514:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800451c:	4619      	mov	r1, r3
 800451e:	6978      	ldr	r0, [r7, #20]
 8004520:	f7ff fce7 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800452e:	4619      	mov	r1, r3
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	f7ff fcde 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 8004536:	4603      	mov	r3, r0
 8004538:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2200      	movs	r2, #0
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fdba 	bl	80040ba <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004546:	7bbb      	ldrb	r3, [r7, #14]
 8004548:	2201      	movs	r2, #1
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff fdb4 	bl	80040ba <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004552:	2101      	movs	r1, #1
 8004554:	6978      	ldr	r0, [r7, #20]
 8004556:	f7ff fccc 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ec      	bne.n	800453a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004566:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800456a:	429a      	cmp	r2, r3
 800456c:	dd00      	ble.n	8004570 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800456e:	e7d2      	b.n	8004516 <u8g2_font_decode_glyph+0x1aa>
	break;
 8004570:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	7b9a      	ldrb	r2, [r3, #14]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 800457c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <u8g2_font_2x_decode_glyph>:


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af02      	add	r7, sp, #8
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3360      	adds	r3, #96	; 0x60
 8004596:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff feaf 	bl	80042fe <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80045a6:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80045ae:	4619      	mov	r1, r3
 80045b0:	69f8      	ldr	r0, [r7, #28]
 80045b2:	f7ff fce9 	bl	8003f88 <u8g2_font_decode_get_signed_bits>
 80045b6:	4603      	mov	r3, r0
 80045b8:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80045c0:	4619      	mov	r1, r3
 80045c2:	69f8      	ldr	r0, [r7, #28]
 80045c4:	f7ff fce0 	bl	8003f88 <u8g2_font_decode_get_signed_bits>
 80045c8:	4603      	mov	r3, r0
 80045ca:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045d2:	4619      	mov	r1, r3
 80045d4:	69f8      	ldr	r0, [r7, #28]
 80045d6:	f7ff fcd7 	bl	8003f88 <u8g2_font_decode_get_signed_bits>
 80045da:	4603      	mov	r3, r0
 80045dc:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	dd7b      	ble.n	80046e0 <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	889a      	ldrh	r2, [r3, #4]
 80045ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	88da      	ldrh	r2, [r3, #6]
 80045fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004602:	b29b      	uxth	r3, r3
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	b299      	uxth	r1, r3
 8004608:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800460c:	b29b      	uxth	r3, r3
 800460e:	440b      	add	r3, r1
 8004610:	b29b      	uxth	r3, r3
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	b29a      	uxth	r2, r3
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	889b      	ldrh	r3, [r3, #4]
 800461e:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	88db      	ldrh	r3, [r3, #6]
 8004624:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 800462a:	8abb      	ldrh	r3, [r7, #20]
 800462c:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004634:	b29b      	uxth	r3, r3
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	8a7b      	ldrh	r3, [r7, #18]
 800463c:	4413      	add	r3, r2
 800463e:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 8004640:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004644:	b29b      	uxth	r3, r3
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	8a3b      	ldrh	r3, [r7, #16]
 800464c:	4413      	add	r3, r2
 800464e:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004650:	8a78      	ldrh	r0, [r7, #18]
 8004652:	8aba      	ldrh	r2, [r7, #20]
 8004654:	8af9      	ldrh	r1, [r7, #22]
 8004656:	8a3b      	ldrh	r3, [r7, #16]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	4603      	mov	r3, r0
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fc2c 	bl	8004eba <u8g2_IsIntersection>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 8004668:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800466c:	e03c      	b.n	80046e8 <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2200      	movs	r2, #0
 8004672:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	2200      	movs	r2, #0
 8004678:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004680:	4619      	mov	r1, r3
 8004682:	69f8      	ldr	r0, [r7, #28]
 8004684:	f7ff fc35 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8004692:	4619      	mov	r1, r3
 8004694:	69f8      	ldr	r0, [r7, #28]
 8004696:	f7ff fc2c 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 800469a:	4603      	mov	r3, r0
 800469c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2200      	movs	r2, #0
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fd90 	bl	80041ca <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 80046aa:	7bbb      	ldrb	r3, [r7, #14]
 80046ac:	2201      	movs	r2, #1
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fd8a 	bl	80041ca <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80046b6:	2101      	movs	r1, #1
 80046b8:	69f8      	ldr	r0, [r7, #28]
 80046ba:	f7ff fc1a 	bl	8003ef2 <u8g2_font_decode_get_unsigned_bits>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ec      	bne.n	800469e <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80046ca:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	dd00      	ble.n	80046d4 <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80046d2:	e7d2      	b.n	800467a <u8g2_font_2x_decode_glyph+0xf2>
	break;
 80046d4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	7b9a      	ldrb	r2, [r3, #14]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 80046e0:	7e3b      	ldrb	r3, [r7, #24]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	b25b      	sxtb	r3, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	3317      	adds	r3, #23
 8004706:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004708:	887b      	ldrh	r3, [r7, #2]
 800470a:	2bff      	cmp	r3, #255	; 0xff
 800470c:	d82a      	bhi.n	8004764 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800470e:	887b      	ldrh	r3, [r7, #2]
 8004710:	2b60      	cmp	r3, #96	; 0x60
 8004712:	d907      	bls.n	8004724 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800471a:	461a      	mov	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e009      	b.n	8004738 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d906      	bls.n	8004738 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004730:	461a      	mov	r2, r3
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	3301      	adds	r3, #1
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d04e      	beq.n	80047e0 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	887a      	ldrh	r2, [r7, #2]
 800474a:	429a      	cmp	r2, r3
 800474c:	d102      	bne.n	8004754 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	3302      	adds	r3, #2
 8004752:	e049      	b.n	80047e8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3301      	adds	r3, #1
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	4413      	add	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004762:	e7e9      	b.n	8004738 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800476a:	461a      	mov	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	4413      	add	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004776:	2100      	movs	r1, #0
 8004778:	6938      	ldr	r0, [r7, #16]
 800477a:	f7ff faf1 	bl	8003d60 <u8g2_font_get_word>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004788:	2102      	movs	r1, #2
 800478a:	6938      	ldr	r0, [r7, #16]
 800478c:	f7ff fae8 	bl	8003d60 <u8g2_font_get_word>
 8004790:	4603      	mov	r3, r0
 8004792:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3304      	adds	r3, #4
 8004798:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800479a:	89fa      	ldrh	r2, [r7, #14]
 800479c:	887b      	ldrh	r3, [r7, #2]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d3e9      	bcc.n	8004776 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	3301      	adds	r3, #1
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	89fb      	ldrh	r3, [r7, #14]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80047bc:	89fb      	ldrh	r3, [r7, #14]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80047c2:	89fa      	ldrh	r2, [r7, #14]
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d102      	bne.n	80047d0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	3303      	adds	r3, #3
 80047ce:	e00b      	b.n	80047e8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3302      	adds	r3, #2
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4413      	add	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80047de:	e7e0      	b.n	80047a2 <u8g2_font_get_glyph_data+0xb2>
	break;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <u8g2_font_get_glyph_data+0xf6>
	break;
 80047e4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	897a      	ldrh	r2, [r7, #10]
 8004812:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	893a      	ldrh	r2, [r7, #8]
 800481a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	4619      	mov	r1, r3
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff ff64 	bl	80046f0 <u8g2_font_get_glyph_data>
 8004828:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004830:	6939      	ldr	r1, [r7, #16]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff fd9a 	bl	800436c <u8g2_font_decode_glyph>
 8004838:	4603      	mov	r3, r0
 800483a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800483c:	8afb      	ldrh	r3, [r7, #22]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <u8g2_font_2x_draw_glyph>:

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	461a      	mov	r2, r3
 8004854:	4603      	mov	r3, r0
 8004856:	817b      	strh	r3, [r7, #10]
 8004858:	460b      	mov	r3, r1
 800485a:	813b      	strh	r3, [r7, #8]
 800485c:	4613      	mov	r3, r2
 800485e:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	897a      	ldrh	r2, [r7, #10]
 8004868:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	893a      	ldrh	r2, [r7, #8]
 8004870:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	4619      	mov	r1, r3
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff ff39 	bl	80046f0 <u8g2_font_get_glyph_data>
 800487e:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 8004886:	6939      	ldr	r1, [r7, #16]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff fe7d 	bl	8004588 <u8g2_font_2x_decode_glyph>
 800488e:	4603      	mov	r3, r0
 8004890:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8004892:	8afb      	ldrh	r3, [r7, #22]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	461a      	mov	r2, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	460b      	mov	r3, r1
 80048b0:	813b      	strh	r3, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d833      	bhi.n	8004928 <u8g2_DrawGlyph+0x8c>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <u8g2_DrawGlyph+0x2c>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048ed 	.word	0x080048ed
 80048d0:	08004901 	.word	0x08004901
 80048d4:	08004915 	.word	0x08004915
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	4798      	blx	r3
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	4413      	add	r3, r2
 80048e8:	813b      	strh	r3, [r7, #8]
      break;
 80048ea:	e01d      	b.n	8004928 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	4798      	blx	r3
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	897b      	ldrh	r3, [r7, #10]
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	817b      	strh	r3, [r7, #10]
      break;
 80048fe:	e013      	b.n	8004928 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	4798      	blx	r3
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	893b      	ldrh	r3, [r7, #8]
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	813b      	strh	r3, [r7, #8]
      break;
 8004912:	e009      	b.n	8004928 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	4798      	blx	r3
 800491c:	4603      	mov	r3, r0
 800491e:	461a      	mov	r2, r3
 8004920:	897b      	ldrh	r3, [r7, #10]
 8004922:	4413      	add	r3, r2
 8004924:	817b      	strh	r3, [r7, #10]
      break;
 8004926:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	893a      	ldrh	r2, [r7, #8]
 800492c:	8979      	ldrh	r1, [r7, #10]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff ff5e 	bl	80047f0 <u8g2_font_draw_glyph>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop

08004940 <u8g2_DrawGlyphX2>:

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	461a      	mov	r2, r3
 800494e:	4603      	mov	r3, r0
 8004950:	817b      	strh	r3, [r7, #10]
 8004952:	460b      	mov	r3, r1
 8004954:	813b      	strh	r3, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	4798      	blx	r3
 8004962:	4603      	mov	r3, r0
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	893b      	ldrh	r3, [r7, #8]
 800496a:	4413      	add	r3, r2
 800496c:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	893a      	ldrh	r2, [r7, #8]
 8004972:	8979      	ldrh	r1, [r7, #10]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7ff ff66 	bl	8004846 <u8g2_font_2x_draw_glyph>
 800497a:	4603      	mov	r3, r0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	607b      	str	r3, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	817b      	strh	r3, [r7, #10]
 8004992:	4613      	mov	r3, r2
 8004994:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fcc0 	bl	800531c <u8x8_utf8_init>
  sum = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	7812      	ldrb	r2, [r2, #0]
 80049a8:	4611      	mov	r1, r2
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	4798      	blx	r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80049b2:	8abb      	ldrh	r3, [r7, #20]
 80049b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d038      	beq.n	8004a2e <u8g2_draw_string+0xaa>
      break;
    str++;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3301      	adds	r3, #1
 80049c0:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80049c2:	8abb      	ldrh	r3, [r7, #20]
 80049c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d0e9      	beq.n	80049a0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80049cc:	8abb      	ldrh	r3, [r7, #20]
 80049ce:	893a      	ldrh	r2, [r7, #8]
 80049d0:	8979      	ldrh	r1, [r7, #10]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff62 	bl	800489c <u8g2_DrawGlyph>
 80049d8:	4603      	mov	r3, r0
 80049da:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d81e      	bhi.n	8004a24 <u8g2_draw_string+0xa0>
 80049e6:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <u8g2_draw_string+0x68>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a07 	.word	0x08004a07
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	08004a1b 	.word	0x08004a1b
      {
	case 0:
	  x += delta;
 80049fc:	897a      	ldrh	r2, [r7, #10]
 80049fe:	8a7b      	ldrh	r3, [r7, #18]
 8004a00:	4413      	add	r3, r2
 8004a02:	817b      	strh	r3, [r7, #10]
	  break;
 8004a04:	e00e      	b.n	8004a24 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004a06:	893a      	ldrh	r2, [r7, #8]
 8004a08:	8a7b      	ldrh	r3, [r7, #18]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	813b      	strh	r3, [r7, #8]
	  break;
 8004a0e:	e009      	b.n	8004a24 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004a10:	897a      	ldrh	r2, [r7, #10]
 8004a12:	8a7b      	ldrh	r3, [r7, #18]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	817b      	strh	r3, [r7, #10]
	  break;
 8004a18:	e004      	b.n	8004a24 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004a1a:	893a      	ldrh	r2, [r7, #8]
 8004a1c:	8a7b      	ldrh	r3, [r7, #18]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	813b      	strh	r3, [r7, #8]
	  break;
 8004a22:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8004a24:	8afa      	ldrh	r2, [r7, #22]
 8004a26:	8a7b      	ldrh	r3, [r7, #18]
 8004a28:	4413      	add	r3, r2
 8004a2a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004a2c:	e7b8      	b.n	80049a0 <u8g2_draw_string+0x1c>
      break;
 8004a2e:	bf00      	nop
    }
  }
  return sum;
 8004a30:	8afb      	ldrh	r3, [r7, #22]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop

08004a3c <u8g2_draw_string_2x>:

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	817b      	strh	r3, [r7, #10]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fc64 	bl	800531c <u8x8_utf8_init>
  sum = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	7812      	ldrb	r2, [r2, #0]
 8004a60:	4611      	mov	r1, r2
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	4798      	blx	r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004a6a:	8abb      	ldrh	r3, [r7, #20]
 8004a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d018      	beq.n	8004aa6 <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3301      	adds	r3, #1
 8004a78:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004a7a:	8abb      	ldrh	r3, [r7, #20]
 8004a7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d0e9      	beq.n	8004a58 <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 8004a84:	8abb      	ldrh	r3, [r7, #20]
 8004a86:	893a      	ldrh	r2, [r7, #8]
 8004a88:	8979      	ldrh	r1, [r7, #10]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff ff58 	bl	8004940 <u8g2_DrawGlyphX2>
 8004a90:	4603      	mov	r3, r0
 8004a92:	827b      	strh	r3, [r7, #18]
      x += delta;
 8004a94:	897a      	ldrh	r2, [r7, #10]
 8004a96:	8a7b      	ldrh	r3, [r7, #18]
 8004a98:	4413      	add	r3, r2
 8004a9a:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 8004a9c:	8afa      	ldrh	r2, [r7, #22]
 8004a9e:	8a7b      	ldrh	r3, [r7, #18]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004aa4:	e7d8      	b.n	8004a58 <u8g2_draw_string_2x+0x1c>
      break;
 8004aa6:	bf00      	nop
    }
  }
  return sum;
 8004aa8:	8afb      	ldrh	r3, [r7, #22]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	817b      	strh	r3, [r7, #10]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a06      	ldr	r2, [pc, #24]	; (8004ae4 <u8g2_DrawStr+0x30>)
 8004aca:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004acc:	893a      	ldrh	r2, [r7, #8]
 8004ace:	8979      	ldrh	r1, [r7, #10]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff56 	bl	8004984 <u8g2_draw_string>
 8004ad8:	4603      	mov	r3, r0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	08005339 	.word	0x08005339

08004ae8 <u8g2_DrawStrX2>:

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	817b      	strh	r3, [r7, #10]
 8004af6:	4613      	mov	r3, r2
 8004af8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <u8g2_DrawStrX2+0x30>)
 8004afe:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 8004b00:	893a      	ldrh	r2, [r7, #8]
 8004b02:	8979      	ldrh	r1, [r7, #10]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff ff98 	bl	8004a3c <u8g2_draw_string_2x>
 8004b0c:	4603      	mov	r3, r0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	08005339 	.word	0x08005339

08004b1c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d05d      	beq.n	8004be8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d04d      	beq.n	8004bea <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d11c      	bne.n	8004b92 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8004b64:	429a      	cmp	r2, r3
 8004b66:	da05      	bge.n	8004b74 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8004b80:	429a      	cmp	r2, r3
 8004b82:	dd32      	ble.n	8004bea <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004b90:	e02b      	b.n	8004bea <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004ba8:	440b      	add	r3, r1
 8004baa:	429a      	cmp	r2, r3
 8004bac:	da0d      	bge.n	8004bca <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	b25a      	sxtb	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	dd07      	ble.n	8004bea <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004be6:	e000      	b.n	8004bea <u8g2_UpdateRefHeight+0xce>
    return;
 8004be8:	bf00      	nop
  }  
}
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  return 0;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <u8g2_SetFontPosBaseline+0x1c>)
 8004c18:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	08004bf5 	.word	0x08004bf5

08004c2c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d00b      	beq.n	8004c58 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3374      	adds	r3, #116	; 0x74
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff f8a7 	bl	8003da0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff62 	bl	8004b1c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	460b      	mov	r3, r1
 8004c70:	80fb      	strh	r3, [r7, #6]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8004c7c:	8afb      	ldrh	r3, [r7, #22]
 8004c7e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	881a      	ldrh	r2, [r3, #0]
 8004c84:	8abb      	ldrh	r3, [r7, #20]
 8004c86:	4413      	add	r3, r2
 8004c88:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004c8a:	8afa      	ldrh	r2, [r7, #22]
 8004c8c:	8abb      	ldrh	r3, [r7, #20]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d90b      	bls.n	8004caa <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004c92:	8afa      	ldrh	r2, [r7, #22]
 8004c94:	88bb      	ldrh	r3, [r7, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d205      	bcs.n	8004ca6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004c9a:	88bb      	ldrh	r3, [r7, #4]
 8004c9c:	82bb      	strh	r3, [r7, #20]
      b--;
 8004c9e:	8abb      	ldrh	r3, [r7, #20]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	82bb      	strh	r3, [r7, #20]
 8004ca4:	e001      	b.n	8004caa <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004caa:	8afa      	ldrh	r2, [r7, #22]
 8004cac:	88bb      	ldrh	r3, [r7, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d301      	bcc.n	8004cb6 <u8g2_clip_intersection2+0x56>
    return 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e01c      	b.n	8004cf0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004cb6:	8aba      	ldrh	r2, [r7, #20]
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d801      	bhi.n	8004cc2 <u8g2_clip_intersection2+0x62>
    return 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e016      	b.n	8004cf0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8004cc2:	8afa      	ldrh	r2, [r7, #22]
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d201      	bcs.n	8004cce <u8g2_clip_intersection2+0x6e>
    a = c;
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8004cce:	8aba      	ldrh	r2, [r7, #20]
 8004cd0:	88bb      	ldrh	r3, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d901      	bls.n	8004cda <u8g2_clip_intersection2+0x7a>
    b = d;
 8004cd6:	88bb      	ldrh	r3, [r7, #4]
 8004cd8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8afa      	ldrh	r2, [r7, #22]
 8004cde:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004ce0:	8aba      	ldrh	r2, [r7, #20]
 8004ce2:	8afb      	ldrh	r3, [r7, #22]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	8aba      	ldrh	r2, [r7, #20]
 8004cec:	801a      	strh	r2, [r3, #0]
  return 1;
 8004cee:	2301      	movs	r3, #1
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	4608      	mov	r0, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	817b      	strh	r3, [r7, #10]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	813b      	strh	r3, [r7, #8]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1a:	893a      	ldrh	r2, [r7, #8]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004d24:	88f8      	ldrh	r0, [r7, #6]
 8004d26:	893a      	ldrh	r2, [r7, #8]
 8004d28:	8979      	ldrh	r1, [r7, #10]
 8004d2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	4603      	mov	r3, r0
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	47a0      	blx	r4
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd90      	pop	{r4, r7, pc}

08004d3e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004d3e:	b590      	push	{r4, r7, lr}
 8004d40:	b087      	sub	sp, #28
 8004d42:	af02      	add	r7, sp, #8
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	4608      	mov	r0, r1
 8004d48:	4611      	mov	r1, r2
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	817b      	strh	r3, [r7, #10]
 8004d50:	460b      	mov	r3, r1
 8004d52:	813b      	strh	r3, [r7, #8]
 8004d54:	4613      	mov	r3, r2
 8004d56:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d075      	beq.n	8004e4e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d072      	beq.n	8004e4e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d91a      	bls.n	8004da4 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004d6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d109      	bne.n	8004d8a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8004d76:	897a      	ldrh	r2, [r7, #10]
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	817b      	strh	r3, [r7, #10]
	  x++;
 8004d80:	897b      	ldrh	r3, [r7, #10]
 8004d82:	3301      	adds	r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	817b      	strh	r3, [r7, #10]
 8004d88:	e00c      	b.n	8004da4 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8004d8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d108      	bne.n	8004da4 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8004d92:	893a      	ldrh	r2, [r7, #8]
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	813b      	strh	r3, [r7, #8]
	  y++;
 8004d9c:	893b      	ldrh	r3, [r7, #8]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8004da4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004db0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11a      	bne.n	8004dee <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004dbe:	893b      	ldrh	r3, [r7, #8]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d83b      	bhi.n	8004e3c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004dca:	893b      	ldrh	r3, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d937      	bls.n	8004e40 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004ddc:	1db9      	adds	r1, r7, #6
 8004dde:	f107 000a 	add.w	r0, r7, #10
 8004de2:	f7ff ff3d 	bl	8004c60 <u8g2_clip_intersection2>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d11a      	bne.n	8004e22 <u8g2_DrawHVLine+0xe4>
	  return;
 8004dec:	e02f      	b.n	8004e4e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004df4:	897b      	ldrh	r3, [r7, #10]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d824      	bhi.n	8004e44 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004e00:	897b      	ldrh	r3, [r7, #10]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d920      	bls.n	8004e48 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004e12:	1db9      	adds	r1, r7, #6
 8004e14:	f107 0008 	add.w	r0, r7, #8
 8004e18:	f7ff ff22 	bl	8004c60 <u8g2_clip_intersection2>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d014      	beq.n	8004e4c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	689c      	ldr	r4, [r3, #8]
 8004e28:	8979      	ldrh	r1, [r7, #10]
 8004e2a:	893a      	ldrh	r2, [r7, #8]
 8004e2c:	88f8      	ldrh	r0, [r7, #6]
 8004e2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	4603      	mov	r3, r0
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	47a0      	blx	r4
 8004e3a:	e008      	b.n	8004e4e <u8g2_DrawHVLine+0x110>
	  return;
 8004e3c:	bf00      	nop
 8004e3e:	e006      	b.n	8004e4e <u8g2_DrawHVLine+0x110>
	  return;
 8004e40:	bf00      	nop
 8004e42:	e004      	b.n	8004e4e <u8g2_DrawHVLine+0x110>
	  return;
 8004e44:	bf00      	nop
 8004e46:	e002      	b.n	8004e4e <u8g2_DrawHVLine+0x110>
	  return;
 8004e48:	bf00      	nop
 8004e4a:	e000      	b.n	8004e4e <u8g2_DrawHVLine+0x110>
	  return;
 8004e4c:	bf00      	nop
    }
}
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}

08004e54 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004e54:	b490      	push	{r4, r7}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	461a      	mov	r2, r3
 8004e62:	4623      	mov	r3, r4
 8004e64:	80fb      	strh	r3, [r7, #6]
 8004e66:	4603      	mov	r3, r0
 8004e68:	80bb      	strh	r3, [r7, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	807b      	strh	r3, [r7, #2]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004e72:	887a      	ldrh	r2, [r7, #2]
 8004e74:	88bb      	ldrh	r3, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d20d      	bcs.n	8004e96 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004e7a:	883a      	ldrh	r2, [r7, #0]
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d901      	bls.n	8004e86 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e014      	b.n	8004eb0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	883b      	ldrh	r3, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d901      	bls.n	8004e92 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e00e      	b.n	8004eb0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e00c      	b.n	8004eb0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004e96:	883a      	ldrh	r2, [r7, #0]
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d907      	bls.n	8004eae <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004e9e:	887a      	ldrh	r2, [r7, #2]
 8004ea0:	883b      	ldrh	r3, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d901      	bls.n	8004eaa <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e002      	b.n	8004eb0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e000      	b.n	8004eb0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004eae:	2300      	movs	r3, #0
    }
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc90      	pop	{r4, r7}
 8004eb8:	4770      	bx	lr

08004eba <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4603      	mov	r3, r0
 8004eca:	817b      	strh	r3, [r7, #10]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	813b      	strh	r3, [r7, #8]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8004ee0:	8b3b      	ldrh	r3, [r7, #24]
 8004ee2:	893a      	ldrh	r2, [r7, #8]
 8004ee4:	f7ff ffb6 	bl	8004e54 <u8g2_is_intersection_decision_tree>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <u8g2_IsIntersection+0x38>
    return 0; 
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e00a      	b.n	8004f08 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	897a      	ldrh	r2, [r7, #10]
 8004f02:	f7ff ffa7 	bl	8004e54 <u8g2_is_intersection_decision_tree>
 8004f06:	4603      	mov	r3, r0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b089      	sub	sp, #36	; 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	817b      	strh	r3, [r7, #10]
 8004f22:	460b      	mov	r3, r1
 8004f24:	813b      	strh	r3, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004f2e:	7efb      	ldrb	r3, [r7, #27]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8004f3a:	7e3a      	ldrb	r2, [r7, #24]
 8004f3c:	7efb      	ldrb	r3, [r7, #27]
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d801      	bhi.n	8004f5a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004f56:	7e3b      	ldrb	r3, [r7, #24]
 8004f58:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d001      	beq.n	8004f68 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8004f64:	7e3b      	ldrb	r3, [r7, #24]
 8004f66:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8004f68:	893b      	ldrh	r3, [r7, #8]
 8004f6a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8004f6c:	8afb      	ldrh	r3, [r7, #22]
 8004f6e:	f023 0307 	bic.w	r3, r3, #7
 8004f72:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	7c1b      	ldrb	r3, [r3, #16]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	8afa      	ldrh	r2, [r7, #22]
 8004f7e:	fb12 f303 	smulbb	r3, r2, r3
 8004f82:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004f8a:	8afb      	ldrh	r3, [r7, #22]
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004f92:	897b      	ldrh	r3, [r7, #10]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d117      	bne.n	8004fd2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	781a      	ldrb	r2, [r3, #0]
 8004fa6:	7ebb      	ldrb	r3, [r7, #26]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	7e7b      	ldrb	r3, [r7, #25]
 8004fb6:	4053      	eors	r3, r2
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
	len--;
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e8      	bne.n	8004fa2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004fd0:	e038      	b.n	8005044 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	7ebb      	ldrb	r3, [r7, #26]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	781a      	ldrb	r2, [r3, #0]
 8004fe4:	7e7b      	ldrb	r3, [r7, #25]
 8004fe6:	4053      	eors	r3, r2
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004fee:	7efb      	ldrb	r3, [r7, #27]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8004ff4:	7efb      	ldrb	r3, [r7, #27]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	76fb      	strb	r3, [r7, #27]
      len--;
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005002:	7efb      	ldrb	r3, [r7, #27]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d114      	bne.n	8005032 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800500c:	461a      	mov	r2, r3
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800501a:	2b01      	cmp	r3, #1
 800501c:	d801      	bhi.n	8005022 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800501e:	2301      	movs	r3, #1
 8005020:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005028:	2b01      	cmp	r3, #1
 800502a:	d008      	beq.n	800503e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800502c:	2301      	movs	r3, #1
 800502e:	767b      	strb	r3, [r7, #25]
 8005030:	e005      	b.n	800503e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005032:	7ebb      	ldrb	r3, [r7, #26]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8005038:	7e7b      	ldrb	r3, [r7, #25]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1c6      	bne.n	8004fd2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005044:	bf00      	nop
 8005046:	3724      	adds	r7, #36	; 0x24
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800506e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005078:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	79fa      	ldrb	r2, [r7, #7]
 80050b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff ffa9 	bl	8005050 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fd84 	bl	8004c0c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005128:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800512a:	89fb      	ldrh	r3, [r7, #14]
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	89fa      	ldrh	r2, [r7, #14]
 8005134:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	7c1b      	ldrb	r3, [r3, #16]
 800513a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800513c:	89fb      	ldrh	r3, [r7, #14]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	89fa      	ldrh	r2, [r7, #14]
 8005146:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800514e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005150:	89fb      	ldrh	r3, [r7, #14]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	89fa      	ldrh	r2, [r7, #14]
 800515a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005162:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005164:	89fb      	ldrh	r3, [r7, #14]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800516c:	4413      	add	r3, r2
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	7c52      	ldrb	r2, [r2, #17]
 8005172:	4293      	cmp	r3, r2
 8005174:	dd08      	ble.n	8005188 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	7c5b      	ldrb	r3, [r3, #17]
 800517a:	b29a      	uxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005182:	b29b      	uxth	r3, r3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	4413      	add	r3, r2
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	8a9a      	ldrh	r2, [r3, #20]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	8ada      	ldrh	r2, [r3, #22]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af02      	add	r7, sp, #8
 80051dc:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	4603      	mov	r3, r0
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fe5d 	bl	8004eba <u8g2_IsIntersection>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800520e:	e03b      	b.n	8005288 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	429a      	cmp	r2, r3
 8005226:	d205      	bcs.n	8005234 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005240:	429a      	cmp	r2, r3
 8005242:	d905      	bls.n	8005250 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800525c:	429a      	cmp	r2, r3
 800525e:	d205      	bcs.n	800526c <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005278:	429a      	cmp	r2, r3
 800527a:	d905      	bls.n	8005288 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff3b 	bl	8005114 <u8g2_update_dimension_common>
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ff7b 	bl	80051d6 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	817b      	strh	r3, [r7, #10]
 80052fa:	460b      	mov	r3, r1
 80052fc:	813b      	strh	r3, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005302:	88f8      	ldrh	r0, [r7, #6]
 8005304:	893a      	ldrh	r2, [r7, #8]
 8005306:	8979      	ldrh	r1, [r7, #10]
 8005308:	7e3b      	ldrb	r3, [r7, #24]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	4603      	mov	r3, r0
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff fcf4 	bl	8004cfc <u8g2_draw_hv_line_2dir>
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <u8x8_ascii_next+0x18>
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	2b0a      	cmp	r3, #10
 800534e:	d102      	bne.n	8005356 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005354:	e001      	b.n	800535a <u8x8_ascii_next+0x22>
  return b;
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	b29b      	uxth	r3, r3
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005366:	b590      	push	{r4, r7, lr}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691c      	ldr	r4, [r3, #16]
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	2300      	movs	r3, #0
 800537a:	2120      	movs	r1, #32
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	47a0      	blx	r4
 8005380:	4603      	mov	r3, r0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bd90      	pop	{r4, r7, pc}

0800538a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800538a:	b590      	push	{r4, r7, lr}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	460b      	mov	r3, r1
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	691c      	ldr	r4, [r3, #16]
 800539c:	7afa      	ldrb	r2, [r7, #11]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2117      	movs	r1, #23
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	47a0      	blx	r4
 80053a6:	4603      	mov	r3, r0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd90      	pop	{r4, r7, pc}

080053b0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80053bc:	1cfb      	adds	r3, r7, #3
 80053be:	461a      	mov	r2, r3
 80053c0:	2101      	movs	r1, #1
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff ffe1 	bl	800538a <u8x8_byte_SendBytes>
 80053c8:	4603      	mov	r3, r0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80053d2:	b590      	push	{r4, r7, lr}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68dc      	ldr	r4, [r3, #12]
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	2300      	movs	r3, #0
 80053e6:	2115      	movs	r1, #21
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	47a0      	blx	r4
 80053ec:	4603      	mov	r3, r0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}

080053f6 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80053f6:	b590      	push	{r4, r7, lr}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68dc      	ldr	r4, [r3, #12]
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	2300      	movs	r3, #0
 800540a:	2116      	movs	r1, #22
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	47a0      	blx	r4
 8005410:	4603      	mov	r3, r0
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bd90      	pop	{r4, r7, pc}

0800541a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800541a:	b590      	push	{r4, r7, lr}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	460b      	mov	r3, r1
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68dc      	ldr	r4, [r3, #12]
 800542c:	7afa      	ldrb	r2, [r7, #11]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2117      	movs	r1, #23
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	47a0      	blx	r4
 8005436:	4603      	mov	r3, r0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bd90      	pop	{r4, r7, pc}

08005440 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68dc      	ldr	r4, [r3, #12]
 800544c:	2300      	movs	r3, #0
 800544e:	2200      	movs	r2, #0
 8005450:	2118      	movs	r1, #24
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	47a0      	blx	r4
 8005456:	4603      	mov	r3, r0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bd90      	pop	{r4, r7, pc}

08005460 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68dc      	ldr	r4, [r3, #12]
 800546c:	2300      	movs	r3, #0
 800546e:	2200      	movs	r2, #0
 8005470:	2119      	movs	r1, #25
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	47a0      	blx	r4
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}

08005480 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	73fb      	strb	r3, [r7, #15]
    data++;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3301      	adds	r3, #1
 8005494:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2bfe      	cmp	r3, #254	; 0xfe
 800549a:	d031      	beq.n	8005500 <u8x8_cad_SendSequence+0x80>
 800549c:	2bfe      	cmp	r3, #254	; 0xfe
 800549e:	dc3d      	bgt.n	800551c <u8x8_cad_SendSequence+0x9c>
 80054a0:	2b19      	cmp	r3, #25
 80054a2:	dc3b      	bgt.n	800551c <u8x8_cad_SendSequence+0x9c>
 80054a4:	2b18      	cmp	r3, #24
 80054a6:	da23      	bge.n	80054f0 <u8x8_cad_SendSequence+0x70>
 80054a8:	2b16      	cmp	r3, #22
 80054aa:	dc02      	bgt.n	80054b2 <u8x8_cad_SendSequence+0x32>
 80054ac:	2b15      	cmp	r3, #21
 80054ae:	da03      	bge.n	80054b8 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80054b0:	e034      	b.n	800551c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80054b2:	2b17      	cmp	r3, #23
 80054b4:	d00e      	beq.n	80054d4 <u8x8_cad_SendSequence+0x54>
	return;
 80054b6:	e031      	b.n	800551c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68dc      	ldr	r4, [r3, #12]
 80054c2:	7bba      	ldrb	r2, [r7, #14]
 80054c4:	7bf9      	ldrb	r1, [r7, #15]
 80054c6:	2300      	movs	r3, #0
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	47a0      	blx	r4
	  data++;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	3301      	adds	r3, #1
 80054d0:	603b      	str	r3, [r7, #0]
	  break;
 80054d2:	e022      	b.n	800551a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80054da:	f107 030e 	add.w	r3, r7, #14
 80054de:	461a      	mov	r2, r3
 80054e0:	2101      	movs	r1, #1
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff ff99 	bl	800541a <u8x8_cad_SendData>
	  data++;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	603b      	str	r3, [r7, #0]
	  break;
 80054ee:	e014      	b.n	800551a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68dc      	ldr	r4, [r3, #12]
 80054f4:	7bf9      	ldrb	r1, [r7, #15]
 80054f6:	2300      	movs	r3, #0
 80054f8:	2200      	movs	r2, #0
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	47a0      	blx	r4
	  break;
 80054fe:	e00c      	b.n	800551a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005506:	7bbb      	ldrb	r3, [r7, #14]
 8005508:	461a      	mov	r2, r3
 800550a:	2129      	movs	r1, #41	; 0x29
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f9d8 	bl	80058c2 <u8x8_gpio_call>
	  data++;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	603b      	str	r3, [r7, #0]
	  break;
 8005518:	bf00      	nop
    cmd = *data;
 800551a:	e7b6      	b.n	800548a <u8x8_cad_SendSequence+0xa>
	return;
 800551c:	bf00      	nop
    }
  }
}
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	bd90      	pop	{r4, r7, pc}

08005524 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	72fb      	strb	r3, [r7, #11]
 8005532:	4613      	mov	r3, r2
 8005534:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	3b14      	subs	r3, #20
 800553a:	2b05      	cmp	r3, #5
 800553c:	d82f      	bhi.n	800559e <u8x8_cad_001+0x7a>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <u8x8_cad_001+0x20>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800558d 	.word	0x0800558d
 8005548:	0800555d 	.word	0x0800555d
 800554c:	08005571 	.word	0x08005571
 8005550:	08005585 	.word	0x08005585
 8005554:	0800558d 	.word	0x0800558d
 8005558:	0800558d 	.word	0x0800558d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800555c:	2100      	movs	r1, #0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff ff01 	bl	8005366 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005564:	7abb      	ldrb	r3, [r7, #10]
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff21 	bl	80053b0 <u8x8_byte_SendByte>
      break;
 800556e:	e018      	b.n	80055a2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8005570:	2100      	movs	r1, #0
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff fef7 	bl	8005366 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005578:	7abb      	ldrb	r3, [r7, #10]
 800557a:	4619      	mov	r1, r3
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f7ff ff17 	bl	80053b0 <u8x8_byte_SendByte>
      break;
 8005582:	e00e      	b.n	80055a2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8005584:	2101      	movs	r1, #1
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff feed 	bl	8005366 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	691c      	ldr	r4, [r3, #16]
 8005590:	7aba      	ldrb	r2, [r7, #10]
 8005592:	7af9      	ldrb	r1, [r7, #11]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	47a0      	blx	r4
 800559a:	4603      	mov	r3, r0
 800559c:	e002      	b.n	80055a4 <u8x8_cad_001+0x80>
    default:
      return 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <u8x8_cad_001+0x80>
  }
  return 1;
 80055a2:	2301      	movs	r3, #1
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd90      	pop	{r4, r7, pc}

080055ac <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	72fb      	strb	r3, [r7, #11]
 80055ba:	4613      	mov	r3, r2
 80055bc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	3b0b      	subs	r3, #11
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	f200 808a 	bhi.w	80056dc <u8x8_d_ssd1306_sh1106_generic+0x130>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055e5 	.word	0x080055e5
 80055d4:	080056dd 	.word	0x080056dd
 80055d8:	080055ff 	.word	0x080055ff
 80055dc:	08005631 	.word	0x08005631
 80055e0:	08005651 	.word	0x08005651
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80055e4:	7abb      	ldrb	r3, [r7, #10]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80055ea:	4940      	ldr	r1, [pc, #256]	; (80056ec <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff ff47 	bl	8005480 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80055f2:	e075      	b.n	80056e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80055f4:	493e      	ldr	r1, [pc, #248]	; (80056f0 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff ff42 	bl	8005480 <u8x8_cad_SendSequence>
      break;
 80055fc:	e070      	b.n	80056e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80055fe:	7abb      	ldrb	r3, [r7, #10]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8005604:	493b      	ldr	r1, [pc, #236]	; (80056f4 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff ff3a 	bl	8005480 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	7c9a      	ldrb	r2, [r3, #18]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8005618:	e062      	b.n	80056e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800561a:	4937      	ldr	r1, [pc, #220]	; (80056f8 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff ff2f 	bl	8005480 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	7cda      	ldrb	r2, [r3, #19]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800562e:	e057      	b.n	80056e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff ff05 	bl	8005440 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8005636:	2181      	movs	r1, #129	; 0x81
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff feca 	bl	80053d2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800563e:	7abb      	ldrb	r3, [r7, #10]
 8005640:	4619      	mov	r1, r3
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff fed7 	bl	80053f6 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff ff09 	bl	8005460 <u8x8_cad_EndTransfer>
      break;
 800564e:	e047      	b.n	80056e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff fef5 	bl	8005440 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	795b      	ldrb	r3, [r3, #5]
 800565a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	4413      	add	r3, r2
 800566c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800566e:	2140      	movs	r1, #64	; 0x40
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff feae 	bl	80053d2 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f043 0310 	orr.w	r3, r3, #16
 8005680:	b2db      	uxtb	r3, r3
 8005682:	4619      	mov	r1, r3
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fea4 	bl	80053d2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800568a:	7dfb      	ldrb	r3, [r7, #23]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	b2db      	uxtb	r3, r3
 8005692:	4619      	mov	r1, r3
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff feae 	bl	80053f6 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	799b      	ldrb	r3, [r3, #6]
 800569e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	4619      	mov	r1, r3
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fea5 	bl	80053f6 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	791b      	ldrb	r3, [r3, #4]
 80056b0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80056b8:	7dbb      	ldrb	r3, [r7, #22]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4619      	mov	r1, r3
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fea9 	bl	800541a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80056c8:	7abb      	ldrb	r3, [r7, #10]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80056ce:	7abb      	ldrb	r3, [r7, #10]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1eb      	bne.n	80056ac <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff fec3 	bl	8005460 <u8x8_cad_EndTransfer>
      break;
 80056da:	e001      	b.n	80056e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	e000      	b.n	80056e2 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80056e0:	2301      	movs	r3, #1
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	080066e4 	.word	0x080066e4
 80056f0:	080066ec 	.word	0x080066ec
 80056f4:	080066f4 	.word	0x080066f4
 80056f8:	080066fc 	.word	0x080066fc

080056fc <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	72fb      	strb	r3, [r7, #11]
 800570a:	4613      	mov	r3, r2
 800570c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800570e:	7aba      	ldrb	r2, [r7, #10]
 8005710:	7af9      	ldrb	r1, [r7, #11]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff ff49 	bl	80055ac <u8x8_d_ssd1306_sh1106_generic>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8005720:	2301      	movs	r3, #1
 8005722:	e014      	b.n	800574e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	2b09      	cmp	r3, #9
 8005728:	d009      	beq.n	800573e <u8x8_d_ssd1306_128x64_noname+0x42>
 800572a:	2b0a      	cmp	r3, #10
 800572c:	d10c      	bne.n	8005748 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f82a 	bl	8005788 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8005734:	4908      	ldr	r1, [pc, #32]	; (8005758 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff fea2 	bl	8005480 <u8x8_cad_SendSequence>
      break;
 800573c:	e006      	b.n	800574c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800573e:	4907      	ldr	r1, [pc, #28]	; (800575c <u8x8_d_ssd1306_128x64_noname+0x60>)
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f80d 	bl	8005760 <u8x8_d_helper_display_setup_memory>
      break;
 8005746:	e001      	b.n	800574c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800574c:	2301      	movs	r3, #1
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	080066ac 	.word	0x080066ac
 800575c:	08006704 	.word	0x08006704

08005760 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	7c9a      	ldrb	r2, [r3, #18]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695c      	ldr	r4, [r3, #20]
 8005794:	2300      	movs	r3, #0
 8005796:	2200      	movs	r2, #0
 8005798:	2128      	movs	r1, #40	; 0x28
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68dc      	ldr	r4, [r3, #12]
 80057a2:	2300      	movs	r3, #0
 80057a4:	2200      	movs	r2, #0
 80057a6:	2114      	movs	r1, #20
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80057ac:	2201      	movs	r2, #1
 80057ae:	214b      	movs	r1, #75	; 0x4b
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f886 	bl	80058c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	791b      	ldrb	r3, [r3, #4]
 80057bc:	461a      	mov	r2, r3
 80057be:	2129      	movs	r1, #41	; 0x29
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f87e 	bl	80058c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80057c6:	2200      	movs	r2, #0
 80057c8:	214b      	movs	r1, #75	; 0x4b
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f879 	bl	80058c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	791b      	ldrb	r3, [r3, #4]
 80057d6:	461a      	mov	r2, r3
 80057d8:	2129      	movs	r1, #41	; 0x29
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f871 	bl	80058c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80057e0:	2201      	movs	r2, #1
 80057e2:	214b      	movs	r1, #75	; 0x4b
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f86c 	bl	80058c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	795b      	ldrb	r3, [r3, #5]
 80057f0:	461a      	mov	r2, r3
 80057f2:	2129      	movs	r1, #41	; 0x29
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f864 	bl	80058c2 <u8x8_gpio_call>
}    
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd90      	pop	{r4, r7, pc}

08005802 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8005802:	b590      	push	{r4, r7, lr}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	4608      	mov	r0, r1
 800580c:	4611      	mov	r1, r2
 800580e:	461a      	mov	r2, r3
 8005810:	4603      	mov	r3, r0
 8005812:	70fb      	strb	r3, [r7, #3]
 8005814:	460b      	mov	r3, r1
 8005816:	70bb      	strb	r3, [r7, #2]
 8005818:	4613      	mov	r3, r2
 800581a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8005820:	78bb      	ldrb	r3, [r7, #2]
 8005822:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005824:	787b      	ldrb	r3, [r7, #1]
 8005826:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689c      	ldr	r4, [r3, #8]
 8005830:	f107 0308 	add.w	r3, r7, #8
 8005834:	2201      	movs	r2, #1
 8005836:	210f      	movs	r1, #15
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	47a0      	blx	r4
 800583c:	4603      	mov	r3, r0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bd90      	pop	{r4, r7, pc}

08005846 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005846:	b590      	push	{r4, r7, lr}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689c      	ldr	r4, [r3, #8]
 8005852:	2300      	movs	r3, #0
 8005854:	2200      	movs	r2, #0
 8005856:	2109      	movs	r1, #9
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	47a0      	blx	r4
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bd90      	pop	{r4, r7, pc}

08005864 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689c      	ldr	r4, [r3, #8]
 8005870:	2300      	movs	r3, #0
 8005872:	2200      	movs	r2, #0
 8005874:	210a      	movs	r1, #10
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	bd90      	pop	{r4, r7, pc}

08005882 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8005882:	b590      	push	{r4, r7, lr}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689c      	ldr	r4, [r3, #8]
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	2300      	movs	r3, #0
 8005896:	210b      	movs	r1, #11
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	47a0      	blx	r4
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd90      	pop	{r4, r7, pc}

080058a4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689c      	ldr	r4, [r3, #8]
 80058b0:	2300      	movs	r3, #0
 80058b2:	2200      	movs	r2, #0
 80058b4:	2110      	movs	r1, #16
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	47a0      	blx	r4
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}

080058c2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80058c2:	b590      	push	{r4, r7, lr}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	70fb      	strb	r3, [r7, #3]
 80058ce:	4613      	mov	r3, r2
 80058d0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695c      	ldr	r4, [r3, #20]
 80058d6:	78ba      	ldrb	r2, [r7, #2]
 80058d8:	78f9      	ldrb	r1, [r7, #3]
 80058da:	2300      	movs	r3, #0
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	47a0      	blx	r4
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	607b      	str	r3, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	72fb      	strb	r3, [r7, #11]
 80058f6:	4613      	mov	r3, r2
 80058f8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a11      	ldr	r2, [pc, #68]	; (8005960 <u8x8_SetupDefaults+0x58>)
 800591a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a10      	ldr	r2, [pc, #64]	; (8005960 <u8x8_SetupDefaults+0x58>)
 8005920:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a0e      	ldr	r2, [pc, #56]	; (8005960 <u8x8_SetupDefaults+0x58>)
 8005926:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a0d      	ldr	r2, [pc, #52]	; (8005960 <u8x8_SetupDefaults+0x58>)
 800592c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	22ff      	movs	r2, #255	; 0xff
 8005948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	22ff      	movs	r2, #255	; 0xff
 8005950:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	080058e9 	.word	0x080058e9

08005964 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff ffc8 	bl	8005908 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ff58 	bl	8005846 <u8x8_SetupMemory>
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <__errno>:
 80059a0:	4b01      	ldr	r3, [pc, #4]	; (80059a8 <__errno+0x8>)
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000030 	.word	0x20000030

080059ac <__libc_init_array>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4d0d      	ldr	r5, [pc, #52]	; (80059e4 <__libc_init_array+0x38>)
 80059b0:	4c0d      	ldr	r4, [pc, #52]	; (80059e8 <__libc_init_array+0x3c>)
 80059b2:	1b64      	subs	r4, r4, r5
 80059b4:	10a4      	asrs	r4, r4, #2
 80059b6:	2600      	movs	r6, #0
 80059b8:	42a6      	cmp	r6, r4
 80059ba:	d109      	bne.n	80059d0 <__libc_init_array+0x24>
 80059bc:	4d0b      	ldr	r5, [pc, #44]	; (80059ec <__libc_init_array+0x40>)
 80059be:	4c0c      	ldr	r4, [pc, #48]	; (80059f0 <__libc_init_array+0x44>)
 80059c0:	f000 fc8e 	bl	80062e0 <_init>
 80059c4:	1b64      	subs	r4, r4, r5
 80059c6:	10a4      	asrs	r4, r4, #2
 80059c8:	2600      	movs	r6, #0
 80059ca:	42a6      	cmp	r6, r4
 80059cc:	d105      	bne.n	80059da <__libc_init_array+0x2e>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d4:	4798      	blx	r3
 80059d6:	3601      	adds	r6, #1
 80059d8:	e7ee      	b.n	80059b8 <__libc_init_array+0xc>
 80059da:	f855 3b04 	ldr.w	r3, [r5], #4
 80059de:	4798      	blx	r3
 80059e0:	3601      	adds	r6, #1
 80059e2:	e7f2      	b.n	80059ca <__libc_init_array+0x1e>
 80059e4:	080067b8 	.word	0x080067b8
 80059e8:	080067b8 	.word	0x080067b8
 80059ec:	080067b8 	.word	0x080067b8
 80059f0:	080067bc 	.word	0x080067bc

080059f4 <memset>:
 80059f4:	4402      	add	r2, r0
 80059f6:	4603      	mov	r3, r0
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d100      	bne.n	80059fe <memset+0xa>
 80059fc:	4770      	bx	lr
 80059fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005a02:	e7f9      	b.n	80059f8 <memset+0x4>

08005a04 <siprintf>:
 8005a04:	b40e      	push	{r1, r2, r3}
 8005a06:	b500      	push	{lr}
 8005a08:	b09c      	sub	sp, #112	; 0x70
 8005a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a0c:	9002      	str	r0, [sp, #8]
 8005a0e:	9006      	str	r0, [sp, #24]
 8005a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a14:	4809      	ldr	r0, [pc, #36]	; (8005a3c <siprintf+0x38>)
 8005a16:	9107      	str	r1, [sp, #28]
 8005a18:	9104      	str	r1, [sp, #16]
 8005a1a:	4909      	ldr	r1, [pc, #36]	; (8005a40 <siprintf+0x3c>)
 8005a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a20:	9105      	str	r1, [sp, #20]
 8005a22:	6800      	ldr	r0, [r0, #0]
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	a902      	add	r1, sp, #8
 8005a28:	f000 f8fe 	bl	8005c28 <_svfiprintf_r>
 8005a2c:	9b02      	ldr	r3, [sp, #8]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	b01c      	add	sp, #112	; 0x70
 8005a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a38:	b003      	add	sp, #12
 8005a3a:	4770      	bx	lr
 8005a3c:	20000030 	.word	0x20000030
 8005a40:	ffff0208 	.word	0xffff0208

08005a44 <__retarget_lock_acquire_recursive>:
 8005a44:	4770      	bx	lr

08005a46 <__retarget_lock_release_recursive>:
 8005a46:	4770      	bx	lr

08005a48 <sbrk_aligned>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4e0e      	ldr	r6, [pc, #56]	; (8005a84 <sbrk_aligned+0x3c>)
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	6831      	ldr	r1, [r6, #0]
 8005a50:	4605      	mov	r5, r0
 8005a52:	b911      	cbnz	r1, 8005a5a <sbrk_aligned+0x12>
 8005a54:	f000 fb7c 	bl	8006150 <_sbrk_r>
 8005a58:	6030      	str	r0, [r6, #0]
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 fb77 	bl	8006150 <_sbrk_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d00a      	beq.n	8005a7c <sbrk_aligned+0x34>
 8005a66:	1cc4      	adds	r4, r0, #3
 8005a68:	f024 0403 	bic.w	r4, r4, #3
 8005a6c:	42a0      	cmp	r0, r4
 8005a6e:	d007      	beq.n	8005a80 <sbrk_aligned+0x38>
 8005a70:	1a21      	subs	r1, r4, r0
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 fb6c 	bl	8006150 <_sbrk_r>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d101      	bne.n	8005a80 <sbrk_aligned+0x38>
 8005a7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a80:	4620      	mov	r0, r4
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	20000710 	.word	0x20000710

08005a88 <_malloc_r>:
 8005a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8c:	1ccd      	adds	r5, r1, #3
 8005a8e:	f025 0503 	bic.w	r5, r5, #3
 8005a92:	3508      	adds	r5, #8
 8005a94:	2d0c      	cmp	r5, #12
 8005a96:	bf38      	it	cc
 8005a98:	250c      	movcc	r5, #12
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	db01      	blt.n	8005aa4 <_malloc_r+0x1c>
 8005aa0:	42a9      	cmp	r1, r5
 8005aa2:	d905      	bls.n	8005ab0 <_malloc_r+0x28>
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	4630      	mov	r0, r6
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab0:	4e2e      	ldr	r6, [pc, #184]	; (8005b6c <_malloc_r+0xe4>)
 8005ab2:	f000 fb85 	bl	80061c0 <__malloc_lock>
 8005ab6:	6833      	ldr	r3, [r6, #0]
 8005ab8:	461c      	mov	r4, r3
 8005aba:	bb34      	cbnz	r4, 8005b0a <_malloc_r+0x82>
 8005abc:	4629      	mov	r1, r5
 8005abe:	4638      	mov	r0, r7
 8005ac0:	f7ff ffc2 	bl	8005a48 <sbrk_aligned>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	d14d      	bne.n	8005b66 <_malloc_r+0xde>
 8005aca:	6834      	ldr	r4, [r6, #0]
 8005acc:	4626      	mov	r6, r4
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	d140      	bne.n	8005b54 <_malloc_r+0xcc>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	eb04 0803 	add.w	r8, r4, r3
 8005adc:	f000 fb38 	bl	8006150 <_sbrk_r>
 8005ae0:	4580      	cmp	r8, r0
 8005ae2:	d13a      	bne.n	8005b5a <_malloc_r+0xd2>
 8005ae4:	6821      	ldr	r1, [r4, #0]
 8005ae6:	3503      	adds	r5, #3
 8005ae8:	1a6d      	subs	r5, r5, r1
 8005aea:	f025 0503 	bic.w	r5, r5, #3
 8005aee:	3508      	adds	r5, #8
 8005af0:	2d0c      	cmp	r5, #12
 8005af2:	bf38      	it	cc
 8005af4:	250c      	movcc	r5, #12
 8005af6:	4629      	mov	r1, r5
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff ffa5 	bl	8005a48 <sbrk_aligned>
 8005afe:	3001      	adds	r0, #1
 8005b00:	d02b      	beq.n	8005b5a <_malloc_r+0xd2>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	442b      	add	r3, r5
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	e00e      	b.n	8005b28 <_malloc_r+0xa0>
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	1b52      	subs	r2, r2, r5
 8005b0e:	d41e      	bmi.n	8005b4e <_malloc_r+0xc6>
 8005b10:	2a0b      	cmp	r2, #11
 8005b12:	d916      	bls.n	8005b42 <_malloc_r+0xba>
 8005b14:	1961      	adds	r1, r4, r5
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	6025      	str	r5, [r4, #0]
 8005b1a:	bf18      	it	ne
 8005b1c:	6059      	strne	r1, [r3, #4]
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	bf08      	it	eq
 8005b22:	6031      	streq	r1, [r6, #0]
 8005b24:	5162      	str	r2, [r4, r5]
 8005b26:	604b      	str	r3, [r1, #4]
 8005b28:	4638      	mov	r0, r7
 8005b2a:	f104 060b 	add.w	r6, r4, #11
 8005b2e:	f000 fb4d 	bl	80061cc <__malloc_unlock>
 8005b32:	f026 0607 	bic.w	r6, r6, #7
 8005b36:	1d23      	adds	r3, r4, #4
 8005b38:	1af2      	subs	r2, r6, r3
 8005b3a:	d0b6      	beq.n	8005aaa <_malloc_r+0x22>
 8005b3c:	1b9b      	subs	r3, r3, r6
 8005b3e:	50a3      	str	r3, [r4, r2]
 8005b40:	e7b3      	b.n	8005aaa <_malloc_r+0x22>
 8005b42:	6862      	ldr	r2, [r4, #4]
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	bf0c      	ite	eq
 8005b48:	6032      	streq	r2, [r6, #0]
 8005b4a:	605a      	strne	r2, [r3, #4]
 8005b4c:	e7ec      	b.n	8005b28 <_malloc_r+0xa0>
 8005b4e:	4623      	mov	r3, r4
 8005b50:	6864      	ldr	r4, [r4, #4]
 8005b52:	e7b2      	b.n	8005aba <_malloc_r+0x32>
 8005b54:	4634      	mov	r4, r6
 8005b56:	6876      	ldr	r6, [r6, #4]
 8005b58:	e7b9      	b.n	8005ace <_malloc_r+0x46>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f000 fb34 	bl	80061cc <__malloc_unlock>
 8005b64:	e7a1      	b.n	8005aaa <_malloc_r+0x22>
 8005b66:	6025      	str	r5, [r4, #0]
 8005b68:	e7de      	b.n	8005b28 <_malloc_r+0xa0>
 8005b6a:	bf00      	nop
 8005b6c:	2000070c 	.word	0x2000070c

08005b70 <__ssputs_r>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	688e      	ldr	r6, [r1, #8]
 8005b76:	429e      	cmp	r6, r3
 8005b78:	4682      	mov	sl, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	4690      	mov	r8, r2
 8005b7e:	461f      	mov	r7, r3
 8005b80:	d838      	bhi.n	8005bf4 <__ssputs_r+0x84>
 8005b82:	898a      	ldrh	r2, [r1, #12]
 8005b84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b88:	d032      	beq.n	8005bf0 <__ssputs_r+0x80>
 8005b8a:	6825      	ldr	r5, [r4, #0]
 8005b8c:	6909      	ldr	r1, [r1, #16]
 8005b8e:	eba5 0901 	sub.w	r9, r5, r1
 8005b92:	6965      	ldr	r5, [r4, #20]
 8005b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	444b      	add	r3, r9
 8005ba0:	106d      	asrs	r5, r5, #1
 8005ba2:	429d      	cmp	r5, r3
 8005ba4:	bf38      	it	cc
 8005ba6:	461d      	movcc	r5, r3
 8005ba8:	0553      	lsls	r3, r2, #21
 8005baa:	d531      	bpl.n	8005c10 <__ssputs_r+0xa0>
 8005bac:	4629      	mov	r1, r5
 8005bae:	f7ff ff6b 	bl	8005a88 <_malloc_r>
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	b950      	cbnz	r0, 8005bcc <__ssputs_r+0x5c>
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	f8ca 3000 	str.w	r3, [sl]
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bcc:	6921      	ldr	r1, [r4, #16]
 8005bce:	464a      	mov	r2, r9
 8005bd0:	f000 face 	bl	8006170 <memcpy>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	6126      	str	r6, [r4, #16]
 8005be2:	6165      	str	r5, [r4, #20]
 8005be4:	444e      	add	r6, r9
 8005be6:	eba5 0509 	sub.w	r5, r5, r9
 8005bea:	6026      	str	r6, [r4, #0]
 8005bec:	60a5      	str	r5, [r4, #8]
 8005bee:	463e      	mov	r6, r7
 8005bf0:	42be      	cmp	r6, r7
 8005bf2:	d900      	bls.n	8005bf6 <__ssputs_r+0x86>
 8005bf4:	463e      	mov	r6, r7
 8005bf6:	6820      	ldr	r0, [r4, #0]
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	f000 fac6 	bl	800618c <memmove>
 8005c00:	68a3      	ldr	r3, [r4, #8]
 8005c02:	1b9b      	subs	r3, r3, r6
 8005c04:	60a3      	str	r3, [r4, #8]
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	4433      	add	r3, r6
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e7db      	b.n	8005bc8 <__ssputs_r+0x58>
 8005c10:	462a      	mov	r2, r5
 8005c12:	f000 fb2d 	bl	8006270 <_realloc_r>
 8005c16:	4606      	mov	r6, r0
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d1e1      	bne.n	8005be0 <__ssputs_r+0x70>
 8005c1c:	6921      	ldr	r1, [r4, #16]
 8005c1e:	4650      	mov	r0, sl
 8005c20:	f000 fada 	bl	80061d8 <_free_r>
 8005c24:	e7c7      	b.n	8005bb6 <__ssputs_r+0x46>
	...

08005c28 <_svfiprintf_r>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	4698      	mov	r8, r3
 8005c2e:	898b      	ldrh	r3, [r1, #12]
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	b09d      	sub	sp, #116	; 0x74
 8005c34:	4607      	mov	r7, r0
 8005c36:	460d      	mov	r5, r1
 8005c38:	4614      	mov	r4, r2
 8005c3a:	d50e      	bpl.n	8005c5a <_svfiprintf_r+0x32>
 8005c3c:	690b      	ldr	r3, [r1, #16]
 8005c3e:	b963      	cbnz	r3, 8005c5a <_svfiprintf_r+0x32>
 8005c40:	2140      	movs	r1, #64	; 0x40
 8005c42:	f7ff ff21 	bl	8005a88 <_malloc_r>
 8005c46:	6028      	str	r0, [r5, #0]
 8005c48:	6128      	str	r0, [r5, #16]
 8005c4a:	b920      	cbnz	r0, 8005c56 <_svfiprintf_r+0x2e>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	e0d1      	b.n	8005dfa <_svfiprintf_r+0x1d2>
 8005c56:	2340      	movs	r3, #64	; 0x40
 8005c58:	616b      	str	r3, [r5, #20]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c5e:	2320      	movs	r3, #32
 8005c60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c68:	2330      	movs	r3, #48	; 0x30
 8005c6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e14 <_svfiprintf_r+0x1ec>
 8005c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c72:	f04f 0901 	mov.w	r9, #1
 8005c76:	4623      	mov	r3, r4
 8005c78:	469a      	mov	sl, r3
 8005c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c7e:	b10a      	cbz	r2, 8005c84 <_svfiprintf_r+0x5c>
 8005c80:	2a25      	cmp	r2, #37	; 0x25
 8005c82:	d1f9      	bne.n	8005c78 <_svfiprintf_r+0x50>
 8005c84:	ebba 0b04 	subs.w	fp, sl, r4
 8005c88:	d00b      	beq.n	8005ca2 <_svfiprintf_r+0x7a>
 8005c8a:	465b      	mov	r3, fp
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4638      	mov	r0, r7
 8005c92:	f7ff ff6d 	bl	8005b70 <__ssputs_r>
 8005c96:	3001      	adds	r0, #1
 8005c98:	f000 80aa 	beq.w	8005df0 <_svfiprintf_r+0x1c8>
 8005c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c9e:	445a      	add	r2, fp
 8005ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80a2 	beq.w	8005df0 <_svfiprintf_r+0x1c8>
 8005cac:	2300      	movs	r3, #0
 8005cae:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cb6:	f10a 0a01 	add.w	sl, sl, #1
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	9307      	str	r3, [sp, #28]
 8005cbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8005cc4:	4654      	mov	r4, sl
 8005cc6:	2205      	movs	r2, #5
 8005cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ccc:	4851      	ldr	r0, [pc, #324]	; (8005e14 <_svfiprintf_r+0x1ec>)
 8005cce:	f7fa fa8f 	bl	80001f0 <memchr>
 8005cd2:	9a04      	ldr	r2, [sp, #16]
 8005cd4:	b9d8      	cbnz	r0, 8005d0e <_svfiprintf_r+0xe6>
 8005cd6:	06d0      	lsls	r0, r2, #27
 8005cd8:	bf44      	itt	mi
 8005cda:	2320      	movmi	r3, #32
 8005cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ce0:	0711      	lsls	r1, r2, #28
 8005ce2:	bf44      	itt	mi
 8005ce4:	232b      	movmi	r3, #43	; 0x2b
 8005ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cea:	f89a 3000 	ldrb.w	r3, [sl]
 8005cee:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf0:	d015      	beq.n	8005d1e <_svfiprintf_r+0xf6>
 8005cf2:	9a07      	ldr	r2, [sp, #28]
 8005cf4:	4654      	mov	r4, sl
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f04f 0c0a 	mov.w	ip, #10
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d02:	3b30      	subs	r3, #48	; 0x30
 8005d04:	2b09      	cmp	r3, #9
 8005d06:	d94e      	bls.n	8005da6 <_svfiprintf_r+0x17e>
 8005d08:	b1b0      	cbz	r0, 8005d38 <_svfiprintf_r+0x110>
 8005d0a:	9207      	str	r2, [sp, #28]
 8005d0c:	e014      	b.n	8005d38 <_svfiprintf_r+0x110>
 8005d0e:	eba0 0308 	sub.w	r3, r0, r8
 8005d12:	fa09 f303 	lsl.w	r3, r9, r3
 8005d16:	4313      	orrs	r3, r2
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	46a2      	mov	sl, r4
 8005d1c:	e7d2      	b.n	8005cc4 <_svfiprintf_r+0x9c>
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	1d19      	adds	r1, r3, #4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	9103      	str	r1, [sp, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bfbb      	ittet	lt
 8005d2a:	425b      	neglt	r3, r3
 8005d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d30:	9307      	strge	r3, [sp, #28]
 8005d32:	9307      	strlt	r3, [sp, #28]
 8005d34:	bfb8      	it	lt
 8005d36:	9204      	strlt	r2, [sp, #16]
 8005d38:	7823      	ldrb	r3, [r4, #0]
 8005d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d3c:	d10c      	bne.n	8005d58 <_svfiprintf_r+0x130>
 8005d3e:	7863      	ldrb	r3, [r4, #1]
 8005d40:	2b2a      	cmp	r3, #42	; 0x2a
 8005d42:	d135      	bne.n	8005db0 <_svfiprintf_r+0x188>
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	1d1a      	adds	r2, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	9203      	str	r2, [sp, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bfb8      	it	lt
 8005d50:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d54:	3402      	adds	r4, #2
 8005d56:	9305      	str	r3, [sp, #20]
 8005d58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e24 <_svfiprintf_r+0x1fc>
 8005d5c:	7821      	ldrb	r1, [r4, #0]
 8005d5e:	2203      	movs	r2, #3
 8005d60:	4650      	mov	r0, sl
 8005d62:	f7fa fa45 	bl	80001f0 <memchr>
 8005d66:	b140      	cbz	r0, 8005d7a <_svfiprintf_r+0x152>
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	eba0 000a 	sub.w	r0, r0, sl
 8005d6e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d72:	9b04      	ldr	r3, [sp, #16]
 8005d74:	4303      	orrs	r3, r0
 8005d76:	3401      	adds	r4, #1
 8005d78:	9304      	str	r3, [sp, #16]
 8005d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d7e:	4826      	ldr	r0, [pc, #152]	; (8005e18 <_svfiprintf_r+0x1f0>)
 8005d80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d84:	2206      	movs	r2, #6
 8005d86:	f7fa fa33 	bl	80001f0 <memchr>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d038      	beq.n	8005e00 <_svfiprintf_r+0x1d8>
 8005d8e:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <_svfiprintf_r+0x1f4>)
 8005d90:	bb1b      	cbnz	r3, 8005dda <_svfiprintf_r+0x1b2>
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	3307      	adds	r3, #7
 8005d96:	f023 0307 	bic.w	r3, r3, #7
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da0:	4433      	add	r3, r6
 8005da2:	9309      	str	r3, [sp, #36]	; 0x24
 8005da4:	e767      	b.n	8005c76 <_svfiprintf_r+0x4e>
 8005da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005daa:	460c      	mov	r4, r1
 8005dac:	2001      	movs	r0, #1
 8005dae:	e7a5      	b.n	8005cfc <_svfiprintf_r+0xd4>
 8005db0:	2300      	movs	r3, #0
 8005db2:	3401      	adds	r4, #1
 8005db4:	9305      	str	r3, [sp, #20]
 8005db6:	4619      	mov	r1, r3
 8005db8:	f04f 0c0a 	mov.w	ip, #10
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dc2:	3a30      	subs	r2, #48	; 0x30
 8005dc4:	2a09      	cmp	r2, #9
 8005dc6:	d903      	bls.n	8005dd0 <_svfiprintf_r+0x1a8>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0c5      	beq.n	8005d58 <_svfiprintf_r+0x130>
 8005dcc:	9105      	str	r1, [sp, #20]
 8005dce:	e7c3      	b.n	8005d58 <_svfiprintf_r+0x130>
 8005dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e7f0      	b.n	8005dbc <_svfiprintf_r+0x194>
 8005dda:	ab03      	add	r3, sp, #12
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	462a      	mov	r2, r5
 8005de0:	4b0f      	ldr	r3, [pc, #60]	; (8005e20 <_svfiprintf_r+0x1f8>)
 8005de2:	a904      	add	r1, sp, #16
 8005de4:	4638      	mov	r0, r7
 8005de6:	f3af 8000 	nop.w
 8005dea:	1c42      	adds	r2, r0, #1
 8005dec:	4606      	mov	r6, r0
 8005dee:	d1d6      	bne.n	8005d9e <_svfiprintf_r+0x176>
 8005df0:	89ab      	ldrh	r3, [r5, #12]
 8005df2:	065b      	lsls	r3, r3, #25
 8005df4:	f53f af2c 	bmi.w	8005c50 <_svfiprintf_r+0x28>
 8005df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dfa:	b01d      	add	sp, #116	; 0x74
 8005dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e00:	ab03      	add	r3, sp, #12
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	462a      	mov	r2, r5
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <_svfiprintf_r+0x1f8>)
 8005e08:	a904      	add	r1, sp, #16
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f000 f87a 	bl	8005f04 <_printf_i>
 8005e10:	e7eb      	b.n	8005dea <_svfiprintf_r+0x1c2>
 8005e12:	bf00      	nop
 8005e14:	0800677c 	.word	0x0800677c
 8005e18:	08006786 	.word	0x08006786
 8005e1c:	00000000 	.word	0x00000000
 8005e20:	08005b71 	.word	0x08005b71
 8005e24:	08006782 	.word	0x08006782

08005e28 <_printf_common>:
 8005e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	4699      	mov	r9, r3
 8005e30:	688a      	ldr	r2, [r1, #8]
 8005e32:	690b      	ldr	r3, [r1, #16]
 8005e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	bfb8      	it	lt
 8005e3c:	4613      	movlt	r3, r2
 8005e3e:	6033      	str	r3, [r6, #0]
 8005e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e44:	4607      	mov	r7, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	b10a      	cbz	r2, 8005e4e <_printf_common+0x26>
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	6033      	str	r3, [r6, #0]
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	0699      	lsls	r1, r3, #26
 8005e52:	bf42      	ittt	mi
 8005e54:	6833      	ldrmi	r3, [r6, #0]
 8005e56:	3302      	addmi	r3, #2
 8005e58:	6033      	strmi	r3, [r6, #0]
 8005e5a:	6825      	ldr	r5, [r4, #0]
 8005e5c:	f015 0506 	ands.w	r5, r5, #6
 8005e60:	d106      	bne.n	8005e70 <_printf_common+0x48>
 8005e62:	f104 0a19 	add.w	sl, r4, #25
 8005e66:	68e3      	ldr	r3, [r4, #12]
 8005e68:	6832      	ldr	r2, [r6, #0]
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	42ab      	cmp	r3, r5
 8005e6e:	dc26      	bgt.n	8005ebe <_printf_common+0x96>
 8005e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e74:	1e13      	subs	r3, r2, #0
 8005e76:	6822      	ldr	r2, [r4, #0]
 8005e78:	bf18      	it	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	0692      	lsls	r2, r2, #26
 8005e7e:	d42b      	bmi.n	8005ed8 <_printf_common+0xb0>
 8005e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e84:	4649      	mov	r1, r9
 8005e86:	4638      	mov	r0, r7
 8005e88:	47c0      	blx	r8
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d01e      	beq.n	8005ecc <_printf_common+0xa4>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	68e5      	ldr	r5, [r4, #12]
 8005e92:	6832      	ldr	r2, [r6, #0]
 8005e94:	f003 0306 	and.w	r3, r3, #6
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	bf08      	it	eq
 8005e9c:	1aad      	subeq	r5, r5, r2
 8005e9e:	68a3      	ldr	r3, [r4, #8]
 8005ea0:	6922      	ldr	r2, [r4, #16]
 8005ea2:	bf0c      	ite	eq
 8005ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea8:	2500      	movne	r5, #0
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	bfc4      	itt	gt
 8005eae:	1a9b      	subgt	r3, r3, r2
 8005eb0:	18ed      	addgt	r5, r5, r3
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	341a      	adds	r4, #26
 8005eb6:	42b5      	cmp	r5, r6
 8005eb8:	d11a      	bne.n	8005ef0 <_printf_common+0xc8>
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e008      	b.n	8005ed0 <_printf_common+0xa8>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	47c0      	blx	r8
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d103      	bne.n	8005ed4 <_printf_common+0xac>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	e7c6      	b.n	8005e66 <_printf_common+0x3e>
 8005ed8:	18e1      	adds	r1, r4, r3
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	2030      	movs	r0, #48	; 0x30
 8005ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ee2:	4422      	add	r2, r4
 8005ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eec:	3302      	adds	r3, #2
 8005eee:	e7c7      	b.n	8005e80 <_printf_common+0x58>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	47c0      	blx	r8
 8005efa:	3001      	adds	r0, #1
 8005efc:	d0e6      	beq.n	8005ecc <_printf_common+0xa4>
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7d9      	b.n	8005eb6 <_printf_common+0x8e>
	...

08005f04 <_printf_i>:
 8005f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	7e0f      	ldrb	r7, [r1, #24]
 8005f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f0c:	2f78      	cmp	r7, #120	; 0x78
 8005f0e:	4691      	mov	r9, r2
 8005f10:	4680      	mov	r8, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	469a      	mov	sl, r3
 8005f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f1a:	d807      	bhi.n	8005f2c <_printf_i+0x28>
 8005f1c:	2f62      	cmp	r7, #98	; 0x62
 8005f1e:	d80a      	bhi.n	8005f36 <_printf_i+0x32>
 8005f20:	2f00      	cmp	r7, #0
 8005f22:	f000 80d8 	beq.w	80060d6 <_printf_i+0x1d2>
 8005f26:	2f58      	cmp	r7, #88	; 0x58
 8005f28:	f000 80a3 	beq.w	8006072 <_printf_i+0x16e>
 8005f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f34:	e03a      	b.n	8005fac <_printf_i+0xa8>
 8005f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f3a:	2b15      	cmp	r3, #21
 8005f3c:	d8f6      	bhi.n	8005f2c <_printf_i+0x28>
 8005f3e:	a101      	add	r1, pc, #4	; (adr r1, 8005f44 <_printf_i+0x40>)
 8005f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f44:	08005f9d 	.word	0x08005f9d
 8005f48:	08005fb1 	.word	0x08005fb1
 8005f4c:	08005f2d 	.word	0x08005f2d
 8005f50:	08005f2d 	.word	0x08005f2d
 8005f54:	08005f2d 	.word	0x08005f2d
 8005f58:	08005f2d 	.word	0x08005f2d
 8005f5c:	08005fb1 	.word	0x08005fb1
 8005f60:	08005f2d 	.word	0x08005f2d
 8005f64:	08005f2d 	.word	0x08005f2d
 8005f68:	08005f2d 	.word	0x08005f2d
 8005f6c:	08005f2d 	.word	0x08005f2d
 8005f70:	080060bd 	.word	0x080060bd
 8005f74:	08005fe1 	.word	0x08005fe1
 8005f78:	0800609f 	.word	0x0800609f
 8005f7c:	08005f2d 	.word	0x08005f2d
 8005f80:	08005f2d 	.word	0x08005f2d
 8005f84:	080060df 	.word	0x080060df
 8005f88:	08005f2d 	.word	0x08005f2d
 8005f8c:	08005fe1 	.word	0x08005fe1
 8005f90:	08005f2d 	.word	0x08005f2d
 8005f94:	08005f2d 	.word	0x08005f2d
 8005f98:	080060a7 	.word	0x080060a7
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	1d1a      	adds	r2, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	602a      	str	r2, [r5, #0]
 8005fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0a3      	b.n	80060f8 <_printf_i+0x1f4>
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	6829      	ldr	r1, [r5, #0]
 8005fb4:	0606      	lsls	r6, r0, #24
 8005fb6:	f101 0304 	add.w	r3, r1, #4
 8005fba:	d50a      	bpl.n	8005fd2 <_printf_i+0xce>
 8005fbc:	680e      	ldr	r6, [r1, #0]
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	2e00      	cmp	r6, #0
 8005fc2:	da03      	bge.n	8005fcc <_printf_i+0xc8>
 8005fc4:	232d      	movs	r3, #45	; 0x2d
 8005fc6:	4276      	negs	r6, r6
 8005fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fcc:	485e      	ldr	r0, [pc, #376]	; (8006148 <_printf_i+0x244>)
 8005fce:	230a      	movs	r3, #10
 8005fd0:	e019      	b.n	8006006 <_printf_i+0x102>
 8005fd2:	680e      	ldr	r6, [r1, #0]
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fda:	bf18      	it	ne
 8005fdc:	b236      	sxthne	r6, r6
 8005fde:	e7ef      	b.n	8005fc0 <_printf_i+0xbc>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	6820      	ldr	r0, [r4, #0]
 8005fe4:	1d19      	adds	r1, r3, #4
 8005fe6:	6029      	str	r1, [r5, #0]
 8005fe8:	0601      	lsls	r1, r0, #24
 8005fea:	d501      	bpl.n	8005ff0 <_printf_i+0xec>
 8005fec:	681e      	ldr	r6, [r3, #0]
 8005fee:	e002      	b.n	8005ff6 <_printf_i+0xf2>
 8005ff0:	0646      	lsls	r6, r0, #25
 8005ff2:	d5fb      	bpl.n	8005fec <_printf_i+0xe8>
 8005ff4:	881e      	ldrh	r6, [r3, #0]
 8005ff6:	4854      	ldr	r0, [pc, #336]	; (8006148 <_printf_i+0x244>)
 8005ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2308      	moveq	r3, #8
 8005ffe:	230a      	movne	r3, #10
 8006000:	2100      	movs	r1, #0
 8006002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006006:	6865      	ldr	r5, [r4, #4]
 8006008:	60a5      	str	r5, [r4, #8]
 800600a:	2d00      	cmp	r5, #0
 800600c:	bfa2      	ittt	ge
 800600e:	6821      	ldrge	r1, [r4, #0]
 8006010:	f021 0104 	bicge.w	r1, r1, #4
 8006014:	6021      	strge	r1, [r4, #0]
 8006016:	b90e      	cbnz	r6, 800601c <_printf_i+0x118>
 8006018:	2d00      	cmp	r5, #0
 800601a:	d04d      	beq.n	80060b8 <_printf_i+0x1b4>
 800601c:	4615      	mov	r5, r2
 800601e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006022:	fb03 6711 	mls	r7, r3, r1, r6
 8006026:	5dc7      	ldrb	r7, [r0, r7]
 8006028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800602c:	4637      	mov	r7, r6
 800602e:	42bb      	cmp	r3, r7
 8006030:	460e      	mov	r6, r1
 8006032:	d9f4      	bls.n	800601e <_printf_i+0x11a>
 8006034:	2b08      	cmp	r3, #8
 8006036:	d10b      	bne.n	8006050 <_printf_i+0x14c>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	07de      	lsls	r6, r3, #31
 800603c:	d508      	bpl.n	8006050 <_printf_i+0x14c>
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	6861      	ldr	r1, [r4, #4]
 8006042:	4299      	cmp	r1, r3
 8006044:	bfde      	ittt	le
 8006046:	2330      	movle	r3, #48	; 0x30
 8006048:	f805 3c01 	strble.w	r3, [r5, #-1]
 800604c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006050:	1b52      	subs	r2, r2, r5
 8006052:	6122      	str	r2, [r4, #16]
 8006054:	f8cd a000 	str.w	sl, [sp]
 8006058:	464b      	mov	r3, r9
 800605a:	aa03      	add	r2, sp, #12
 800605c:	4621      	mov	r1, r4
 800605e:	4640      	mov	r0, r8
 8006060:	f7ff fee2 	bl	8005e28 <_printf_common>
 8006064:	3001      	adds	r0, #1
 8006066:	d14c      	bne.n	8006102 <_printf_i+0x1fe>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	b004      	add	sp, #16
 800606e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006072:	4835      	ldr	r0, [pc, #212]	; (8006148 <_printf_i+0x244>)
 8006074:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006078:	6829      	ldr	r1, [r5, #0]
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006080:	6029      	str	r1, [r5, #0]
 8006082:	061d      	lsls	r5, r3, #24
 8006084:	d514      	bpl.n	80060b0 <_printf_i+0x1ac>
 8006086:	07df      	lsls	r7, r3, #31
 8006088:	bf44      	itt	mi
 800608a:	f043 0320 	orrmi.w	r3, r3, #32
 800608e:	6023      	strmi	r3, [r4, #0]
 8006090:	b91e      	cbnz	r6, 800609a <_printf_i+0x196>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f023 0320 	bic.w	r3, r3, #32
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	2310      	movs	r3, #16
 800609c:	e7b0      	b.n	8006000 <_printf_i+0xfc>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f043 0320 	orr.w	r3, r3, #32
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	2378      	movs	r3, #120	; 0x78
 80060a8:	4828      	ldr	r0, [pc, #160]	; (800614c <_printf_i+0x248>)
 80060aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ae:	e7e3      	b.n	8006078 <_printf_i+0x174>
 80060b0:	0659      	lsls	r1, r3, #25
 80060b2:	bf48      	it	mi
 80060b4:	b2b6      	uxthmi	r6, r6
 80060b6:	e7e6      	b.n	8006086 <_printf_i+0x182>
 80060b8:	4615      	mov	r5, r2
 80060ba:	e7bb      	b.n	8006034 <_printf_i+0x130>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	6826      	ldr	r6, [r4, #0]
 80060c0:	6961      	ldr	r1, [r4, #20]
 80060c2:	1d18      	adds	r0, r3, #4
 80060c4:	6028      	str	r0, [r5, #0]
 80060c6:	0635      	lsls	r5, r6, #24
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	d501      	bpl.n	80060d0 <_printf_i+0x1cc>
 80060cc:	6019      	str	r1, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <_printf_i+0x1d2>
 80060d0:	0670      	lsls	r0, r6, #25
 80060d2:	d5fb      	bpl.n	80060cc <_printf_i+0x1c8>
 80060d4:	8019      	strh	r1, [r3, #0]
 80060d6:	2300      	movs	r3, #0
 80060d8:	6123      	str	r3, [r4, #16]
 80060da:	4615      	mov	r5, r2
 80060dc:	e7ba      	b.n	8006054 <_printf_i+0x150>
 80060de:	682b      	ldr	r3, [r5, #0]
 80060e0:	1d1a      	adds	r2, r3, #4
 80060e2:	602a      	str	r2, [r5, #0]
 80060e4:	681d      	ldr	r5, [r3, #0]
 80060e6:	6862      	ldr	r2, [r4, #4]
 80060e8:	2100      	movs	r1, #0
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7fa f880 	bl	80001f0 <memchr>
 80060f0:	b108      	cbz	r0, 80060f6 <_printf_i+0x1f2>
 80060f2:	1b40      	subs	r0, r0, r5
 80060f4:	6060      	str	r0, [r4, #4]
 80060f6:	6863      	ldr	r3, [r4, #4]
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	2300      	movs	r3, #0
 80060fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006100:	e7a8      	b.n	8006054 <_printf_i+0x150>
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	462a      	mov	r2, r5
 8006106:	4649      	mov	r1, r9
 8006108:	4640      	mov	r0, r8
 800610a:	47d0      	blx	sl
 800610c:	3001      	adds	r0, #1
 800610e:	d0ab      	beq.n	8006068 <_printf_i+0x164>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	079b      	lsls	r3, r3, #30
 8006114:	d413      	bmi.n	800613e <_printf_i+0x23a>
 8006116:	68e0      	ldr	r0, [r4, #12]
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	4298      	cmp	r0, r3
 800611c:	bfb8      	it	lt
 800611e:	4618      	movlt	r0, r3
 8006120:	e7a4      	b.n	800606c <_printf_i+0x168>
 8006122:	2301      	movs	r3, #1
 8006124:	4632      	mov	r2, r6
 8006126:	4649      	mov	r1, r9
 8006128:	4640      	mov	r0, r8
 800612a:	47d0      	blx	sl
 800612c:	3001      	adds	r0, #1
 800612e:	d09b      	beq.n	8006068 <_printf_i+0x164>
 8006130:	3501      	adds	r5, #1
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	9903      	ldr	r1, [sp, #12]
 8006136:	1a5b      	subs	r3, r3, r1
 8006138:	42ab      	cmp	r3, r5
 800613a:	dcf2      	bgt.n	8006122 <_printf_i+0x21e>
 800613c:	e7eb      	b.n	8006116 <_printf_i+0x212>
 800613e:	2500      	movs	r5, #0
 8006140:	f104 0619 	add.w	r6, r4, #25
 8006144:	e7f5      	b.n	8006132 <_printf_i+0x22e>
 8006146:	bf00      	nop
 8006148:	0800678d 	.word	0x0800678d
 800614c:	0800679e 	.word	0x0800679e

08006150 <_sbrk_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d06      	ldr	r5, [pc, #24]	; (800616c <_sbrk_r+0x1c>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	f7fa ffb6 	bl	80010cc <_sbrk>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_sbrk_r+0x1a>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_sbrk_r+0x1a>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20000714 	.word	0x20000714

08006170 <memcpy>:
 8006170:	440a      	add	r2, r1
 8006172:	4291      	cmp	r1, r2
 8006174:	f100 33ff 	add.w	r3, r0, #4294967295
 8006178:	d100      	bne.n	800617c <memcpy+0xc>
 800617a:	4770      	bx	lr
 800617c:	b510      	push	{r4, lr}
 800617e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006186:	4291      	cmp	r1, r2
 8006188:	d1f9      	bne.n	800617e <memcpy+0xe>
 800618a:	bd10      	pop	{r4, pc}

0800618c <memmove>:
 800618c:	4288      	cmp	r0, r1
 800618e:	b510      	push	{r4, lr}
 8006190:	eb01 0402 	add.w	r4, r1, r2
 8006194:	d902      	bls.n	800619c <memmove+0x10>
 8006196:	4284      	cmp	r4, r0
 8006198:	4623      	mov	r3, r4
 800619a:	d807      	bhi.n	80061ac <memmove+0x20>
 800619c:	1e43      	subs	r3, r0, #1
 800619e:	42a1      	cmp	r1, r4
 80061a0:	d008      	beq.n	80061b4 <memmove+0x28>
 80061a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061aa:	e7f8      	b.n	800619e <memmove+0x12>
 80061ac:	4402      	add	r2, r0
 80061ae:	4601      	mov	r1, r0
 80061b0:	428a      	cmp	r2, r1
 80061b2:	d100      	bne.n	80061b6 <memmove+0x2a>
 80061b4:	bd10      	pop	{r4, pc}
 80061b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061be:	e7f7      	b.n	80061b0 <memmove+0x24>

080061c0 <__malloc_lock>:
 80061c0:	4801      	ldr	r0, [pc, #4]	; (80061c8 <__malloc_lock+0x8>)
 80061c2:	f7ff bc3f 	b.w	8005a44 <__retarget_lock_acquire_recursive>
 80061c6:	bf00      	nop
 80061c8:	20000708 	.word	0x20000708

080061cc <__malloc_unlock>:
 80061cc:	4801      	ldr	r0, [pc, #4]	; (80061d4 <__malloc_unlock+0x8>)
 80061ce:	f7ff bc3a 	b.w	8005a46 <__retarget_lock_release_recursive>
 80061d2:	bf00      	nop
 80061d4:	20000708 	.word	0x20000708

080061d8 <_free_r>:
 80061d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061da:	2900      	cmp	r1, #0
 80061dc:	d044      	beq.n	8006268 <_free_r+0x90>
 80061de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e2:	9001      	str	r0, [sp, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f1a1 0404 	sub.w	r4, r1, #4
 80061ea:	bfb8      	it	lt
 80061ec:	18e4      	addlt	r4, r4, r3
 80061ee:	f7ff ffe7 	bl	80061c0 <__malloc_lock>
 80061f2:	4a1e      	ldr	r2, [pc, #120]	; (800626c <_free_r+0x94>)
 80061f4:	9801      	ldr	r0, [sp, #4]
 80061f6:	6813      	ldr	r3, [r2, #0]
 80061f8:	b933      	cbnz	r3, 8006208 <_free_r+0x30>
 80061fa:	6063      	str	r3, [r4, #4]
 80061fc:	6014      	str	r4, [r2, #0]
 80061fe:	b003      	add	sp, #12
 8006200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006204:	f7ff bfe2 	b.w	80061cc <__malloc_unlock>
 8006208:	42a3      	cmp	r3, r4
 800620a:	d908      	bls.n	800621e <_free_r+0x46>
 800620c:	6825      	ldr	r5, [r4, #0]
 800620e:	1961      	adds	r1, r4, r5
 8006210:	428b      	cmp	r3, r1
 8006212:	bf01      	itttt	eq
 8006214:	6819      	ldreq	r1, [r3, #0]
 8006216:	685b      	ldreq	r3, [r3, #4]
 8006218:	1949      	addeq	r1, r1, r5
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	e7ed      	b.n	80061fa <_free_r+0x22>
 800621e:	461a      	mov	r2, r3
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	b10b      	cbz	r3, 8006228 <_free_r+0x50>
 8006224:	42a3      	cmp	r3, r4
 8006226:	d9fa      	bls.n	800621e <_free_r+0x46>
 8006228:	6811      	ldr	r1, [r2, #0]
 800622a:	1855      	adds	r5, r2, r1
 800622c:	42a5      	cmp	r5, r4
 800622e:	d10b      	bne.n	8006248 <_free_r+0x70>
 8006230:	6824      	ldr	r4, [r4, #0]
 8006232:	4421      	add	r1, r4
 8006234:	1854      	adds	r4, r2, r1
 8006236:	42a3      	cmp	r3, r4
 8006238:	6011      	str	r1, [r2, #0]
 800623a:	d1e0      	bne.n	80061fe <_free_r+0x26>
 800623c:	681c      	ldr	r4, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	6053      	str	r3, [r2, #4]
 8006242:	4421      	add	r1, r4
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	e7da      	b.n	80061fe <_free_r+0x26>
 8006248:	d902      	bls.n	8006250 <_free_r+0x78>
 800624a:	230c      	movs	r3, #12
 800624c:	6003      	str	r3, [r0, #0]
 800624e:	e7d6      	b.n	80061fe <_free_r+0x26>
 8006250:	6825      	ldr	r5, [r4, #0]
 8006252:	1961      	adds	r1, r4, r5
 8006254:	428b      	cmp	r3, r1
 8006256:	bf04      	itt	eq
 8006258:	6819      	ldreq	r1, [r3, #0]
 800625a:	685b      	ldreq	r3, [r3, #4]
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	bf04      	itt	eq
 8006260:	1949      	addeq	r1, r1, r5
 8006262:	6021      	streq	r1, [r4, #0]
 8006264:	6054      	str	r4, [r2, #4]
 8006266:	e7ca      	b.n	80061fe <_free_r+0x26>
 8006268:	b003      	add	sp, #12
 800626a:	bd30      	pop	{r4, r5, pc}
 800626c:	2000070c 	.word	0x2000070c

08006270 <_realloc_r>:
 8006270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	4680      	mov	r8, r0
 8006276:	4614      	mov	r4, r2
 8006278:	460e      	mov	r6, r1
 800627a:	b921      	cbnz	r1, 8006286 <_realloc_r+0x16>
 800627c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006280:	4611      	mov	r1, r2
 8006282:	f7ff bc01 	b.w	8005a88 <_malloc_r>
 8006286:	b92a      	cbnz	r2, 8006294 <_realloc_r+0x24>
 8006288:	f7ff ffa6 	bl	80061d8 <_free_r>
 800628c:	4625      	mov	r5, r4
 800628e:	4628      	mov	r0, r5
 8006290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006294:	f000 f81b 	bl	80062ce <_malloc_usable_size_r>
 8006298:	4284      	cmp	r4, r0
 800629a:	4607      	mov	r7, r0
 800629c:	d802      	bhi.n	80062a4 <_realloc_r+0x34>
 800629e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062a2:	d812      	bhi.n	80062ca <_realloc_r+0x5a>
 80062a4:	4621      	mov	r1, r4
 80062a6:	4640      	mov	r0, r8
 80062a8:	f7ff fbee 	bl	8005a88 <_malloc_r>
 80062ac:	4605      	mov	r5, r0
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d0ed      	beq.n	800628e <_realloc_r+0x1e>
 80062b2:	42bc      	cmp	r4, r7
 80062b4:	4622      	mov	r2, r4
 80062b6:	4631      	mov	r1, r6
 80062b8:	bf28      	it	cs
 80062ba:	463a      	movcs	r2, r7
 80062bc:	f7ff ff58 	bl	8006170 <memcpy>
 80062c0:	4631      	mov	r1, r6
 80062c2:	4640      	mov	r0, r8
 80062c4:	f7ff ff88 	bl	80061d8 <_free_r>
 80062c8:	e7e1      	b.n	800628e <_realloc_r+0x1e>
 80062ca:	4635      	mov	r5, r6
 80062cc:	e7df      	b.n	800628e <_realloc_r+0x1e>

080062ce <_malloc_usable_size_r>:
 80062ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d2:	1f18      	subs	r0, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bfbc      	itt	lt
 80062d8:	580b      	ldrlt	r3, [r1, r0]
 80062da:	18c0      	addlt	r0, r0, r3
 80062dc:	4770      	bx	lr
	...

080062e0 <_init>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr

080062ec <_fini>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr
