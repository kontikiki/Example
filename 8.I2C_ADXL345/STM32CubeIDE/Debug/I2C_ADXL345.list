
I2C_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800afc0  0800afc0  0001afc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b51c  0800b51c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b524  0800b524  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b528  0800b528  0001b528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000618  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007f8  200007f8  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000387b2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bc5  00000000  00000000  000589c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003440  00000000  00000000  0005c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003298  00000000  00000000  0005f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026381  00000000  00000000  00062c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd38  00000000  00000000  00088fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5875  00000000  00000000  000a8d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018e58e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fb5c  00000000  00000000  0018e5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800afa4 	.word	0x0800afa4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800afa4 	.word	0x0800afa4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	2201      	movs	r2, #1
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <__io_putchar+0x20>)
 8001028:	f003 f9e5 	bl	80043f6 <HAL_UART_Transmit>
	return ch;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002a8 	.word	0x200002a8

0800103c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001042:	f000 fdf7 	bl	8001c34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001046:	f000 f941 	bl	80012cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800104a:	f000 fa5b 	bl	8001504 <MX_GPIO_Init>
	MX_I2C1_Init();
 800104e:	f000 f9b9 	bl	80013c4 <MX_I2C1_Init>
	MX_SPI2_Init();
 8001052:	f000 f9f7 	bl	8001444 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8001056:	f000 fa2b 	bl	80014b0 <MX_USART1_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800105a:	f000 f9a7 	bl	80013ac <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800105e:	4b94      	ldr	r3, [pc, #592]	; (80012b0 <main+0x274>)
 8001060:	4a94      	ldr	r2, [pc, #592]	; (80012b4 <main+0x278>)
 8001062:	4995      	ldr	r1, [pc, #596]	; (80012b8 <main+0x27c>)
 8001064:	4895      	ldr	r0, [pc, #596]	; (80012bc <main+0x280>)
 8001066:	f004 fb7b 	bl	8005760 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 800106a:	4894      	ldr	r0, [pc, #592]	; (80012bc <main+0x280>)
 800106c:	f005 f9cc 	bl	8006408 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8001070:	2100      	movs	r1, #0
 8001072:	4892      	ldr	r0, [pc, #584]	; (80012bc <main+0x280>)
 8001074:	f005 f9d7 	bl	8006426 <u8x8_SetPowerSave>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	ADXL345Init();
 8001078:	f004 fa0a 	bl	8005490 <ADXL345Init>
	accelAverage();
 800107c:	f004 fa3a 	bl	80054f4 <accelAverage>

	point[0].x = 64;
 8001080:	4b8f      	ldr	r3, [pc, #572]	; (80012c0 <main+0x284>)
 8001082:	2240      	movs	r2, #64	; 0x40
 8001084:	601a      	str	r2, [r3, #0]
	point[0].y = 32;
 8001086:	4b8e      	ldr	r3, [pc, #568]	; (80012c0 <main+0x284>)
 8001088:	2220      	movs	r2, #32
 800108a:	605a      	str	r2, [r3, #4]

	point[1].x = 63;
 800108c:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <main+0x284>)
 800108e:	223f      	movs	r2, #63	; 0x3f
 8001090:	609a      	str	r2, [r3, #8]
	point[1].y = 31;
 8001092:	4b8b      	ldr	r3, [pc, #556]	; (80012c0 <main+0x284>)
 8001094:	221f      	movs	r2, #31
 8001096:	60da      	str	r2, [r3, #12]

	point[2].x = 64;
 8001098:	4b89      	ldr	r3, [pc, #548]	; (80012c0 <main+0x284>)
 800109a:	2240      	movs	r2, #64	; 0x40
 800109c:	611a      	str	r2, [r3, #16]
	point[2].y = 31;
 800109e:	4b88      	ldr	r3, [pc, #544]	; (80012c0 <main+0x284>)
 80010a0:	221f      	movs	r2, #31
 80010a2:	615a      	str	r2, [r3, #20]

	point[3].x = 65;
 80010a4:	4b86      	ldr	r3, [pc, #536]	; (80012c0 <main+0x284>)
 80010a6:	2241      	movs	r2, #65	; 0x41
 80010a8:	619a      	str	r2, [r3, #24]
	point[3].y = 31;
 80010aa:	4b85      	ldr	r3, [pc, #532]	; (80012c0 <main+0x284>)
 80010ac:	221f      	movs	r2, #31
 80010ae:	61da      	str	r2, [r3, #28]

	point[4].x = 63;
 80010b0:	4b83      	ldr	r3, [pc, #524]	; (80012c0 <main+0x284>)
 80010b2:	223f      	movs	r2, #63	; 0x3f
 80010b4:	621a      	str	r2, [r3, #32]
	point[4].y = 32;
 80010b6:	4b82      	ldr	r3, [pc, #520]	; (80012c0 <main+0x284>)
 80010b8:	2220      	movs	r2, #32
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24

	point[5].x = 65;
 80010bc:	4b80      	ldr	r3, [pc, #512]	; (80012c0 <main+0x284>)
 80010be:	2241      	movs	r2, #65	; 0x41
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
	point[5].y = 32;
 80010c2:	4b7f      	ldr	r3, [pc, #508]	; (80012c0 <main+0x284>)
 80010c4:	2220      	movs	r2, #32
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c

	point[6].x = 63;
 80010c8:	4b7d      	ldr	r3, [pc, #500]	; (80012c0 <main+0x284>)
 80010ca:	223f      	movs	r2, #63	; 0x3f
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
	point[6].y = 33;
 80010ce:	4b7c      	ldr	r3, [pc, #496]	; (80012c0 <main+0x284>)
 80010d0:	2221      	movs	r2, #33	; 0x21
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

	point[7].x = 64;
 80010d4:	4b7a      	ldr	r3, [pc, #488]	; (80012c0 <main+0x284>)
 80010d6:	2240      	movs	r2, #64	; 0x40
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
	point[7].y = 33;
 80010da:	4b79      	ldr	r3, [pc, #484]	; (80012c0 <main+0x284>)
 80010dc:	2221      	movs	r2, #33	; 0x21
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c

	point[8].x = 65;
 80010e0:	4b77      	ldr	r3, [pc, #476]	; (80012c0 <main+0x284>)
 80010e2:	2241      	movs	r2, #65	; 0x41
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
	point[8].y = 33;
 80010e6:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <main+0x284>)
 80010e8:	2221      	movs	r2, #33	; 0x21
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44

	for (int i = 0; i < 9; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e00c      	b.n	800110c <main+0xd0>
		u8g2_DrawPixel(&u8g2, point[0].x, point[0].y);
 80010f2:	4b73      	ldr	r3, [pc, #460]	; (80012c0 <main+0x284>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4a71      	ldr	r2, [pc, #452]	; (80012c0 <main+0x284>)
 80010fa:	6852      	ldr	r2, [r2, #4]
 80010fc:	b292      	uxth	r2, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	486e      	ldr	r0, [pc, #440]	; (80012bc <main+0x280>)
 8001102:	f004 fc6b 	bl	80059dc <u8g2_DrawPixel>
	for (int i = 0; i < 9; i++) {
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b08      	cmp	r3, #8
 8001110:	ddef      	ble.n	80010f2 <main+0xb6>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		u8g2_FirstPage(&u8g2);
 8001112:	486a      	ldr	r0, [pc, #424]	; (80012bc <main+0x280>)
 8001114:	f004 fad1 	bl	80056ba <u8g2_FirstPage>

		do {
			int16_t x, y, z = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	807b      	strh	r3, [r7, #2]
			multiDataRead(&x, &y, &z);
 800111c:	1cba      	adds	r2, r7, #2
 800111e:	1d39      	adds	r1, r7, #4
 8001120:	1dbb      	adds	r3, r7, #6
 8001122:	4618      	mov	r0, r3
 8001124:	f004 f94e 	bl	80053c4 <multiDataRead>
			x -= readings[0];
 8001128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001134:	4b63      	ldr	r3, [pc, #396]	; (80012c4 <main+0x288>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001142:	ee17 3a90 	vmov	r3, s15
 8001146:	b21b      	sxth	r3, r3
 8001148:	80fb      	strh	r3, [r7, #6]
			y -= readings[1];
 800114a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <main+0x288>)
 8001158:	edd3 7a01 	vldr	s15, [r3, #4]
 800115c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001164:	ee17 3a90 	vmov	r3, s15
 8001168:	b21b      	sxth	r3, r3
 800116a:	80bb      	strh	r3, [r7, #4]
			z -= readings[2];
 800116c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001178:	4b52      	ldr	r3, [pc, #328]	; (80012c4 <main+0x288>)
 800117a:	edd3 7a02 	vldr	s15, [r3, #8]
 800117e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 3a90 	vmov	r3, s15
 800118a:	b21b      	sxth	r3, r3
 800118c:	807b      	strh	r3, [r7, #2]
			z += 256;
 800118e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001192:	b29b      	uxth	r3, r3
 8001194:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21b      	sxth	r3, r3
 800119c:	807b      	strh	r3, [r7, #2]
			printf("%d %d %d\r\n", x, y, z);
 800119e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a2:	4619      	mov	r1, r3
 80011a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011a8:	461a      	mov	r2, r3
 80011aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011ae:	4846      	ldr	r0, [pc, #280]	; (80012c8 <main+0x28c>)
 80011b0:	f006 f874 	bl	800729c <iprintf>

#ifdef POINT_MODE
	  			int pixel_y=x*32/512;
 80011b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da00      	bge.n	80011be <main+0x182>
 80011bc:	330f      	adds	r3, #15
 80011be:	111b      	asrs	r3, r3, #4
 80011c0:	60fb      	str	r3, [r7, #12]
	  			int pixel_x=y*64/512;
 80011c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da00      	bge.n	80011cc <main+0x190>
 80011ca:	3307      	adds	r3, #7
 80011cc:	10db      	asrs	r3, r3, #3
 80011ce:	60bb      	str	r3, [r7, #8]

	  			for(int i=0;i<9;i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	e061      	b.n	800129a <main+0x25e>
	  			{
	  				u8g2_DrawPixel(&u8g2,point[i].x-pixel_x,point[i].y-pixel_y);
 80011d6:	4a3a      	ldr	r2, [pc, #232]	; (80012c0 <main+0x284>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	b299      	uxth	r1, r3
 80011e8:	4a35      	ldr	r2, [pc, #212]	; (80012c0 <main+0x284>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	482f      	ldr	r0, [pc, #188]	; (80012bc <main+0x280>)
 8001200:	f004 fbec 	bl	80059dc <u8g2_DrawPixel>
	  				point[i].x=point[i].x-pixel_x;
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <main+0x284>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1ad2      	subs	r2, r2, r3
 8001210:	492b      	ldr	r1, [pc, #172]	; (80012c0 <main+0x284>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  				point[i].y=point[i].y-pixel_y;
 8001218:	4a29      	ldr	r2, [pc, #164]	; (80012c0 <main+0x284>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad2      	subs	r2, r2, r3
 8001226:	4926      	ldr	r1, [pc, #152]	; (80012c0 <main+0x284>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	605a      	str	r2, [r3, #4]

	  				if(point[i].x>127)
 8001230:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <main+0x284>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001238:	2b7f      	cmp	r3, #127	; 0x7f
 800123a:	dd05      	ble.n	8001248 <main+0x20c>
	  				{
	  					point[i].x=0;
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <main+0x284>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2100      	movs	r1, #0
 8001242:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001246:	e00a      	b.n	800125e <main+0x222>
	  				}
	  				else if(point[i].x<0)
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <main+0x284>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001250:	2b00      	cmp	r3, #0
 8001252:	da04      	bge.n	800125e <main+0x222>
	  				{
	  					point[i].x=127;
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <main+0x284>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	217f      	movs	r1, #127	; 0x7f
 800125a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	  				}

	  				if(point[i].y>63)
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <main+0x284>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4413      	add	r3, r2
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b3f      	cmp	r3, #63	; 0x3f
 800126a:	dd06      	ble.n	800127a <main+0x23e>
	  				{
	  					point[i].y=0;
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <main+0x284>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	e00c      	b.n	8001294 <main+0x258>
	  				}
	  				else if(point[i].y<0)
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <main+0x284>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4413      	add	r3, r2
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	da05      	bge.n	8001294 <main+0x258>
	  				{
	  					point[i].y=63;
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <main+0x284>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	223f      	movs	r2, #63	; 0x3f
 8001292:	605a      	str	r2, [r3, #4]
	  			for(int i=0;i<9;i++)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	3301      	adds	r3, #1
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2b08      	cmp	r3, #8
 800129e:	dd9a      	ble.n	80011d6 <main+0x19a>
			u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
			u8g2_DrawStrX2(&u8g2, 0, 45, "z:");
			u8g2_DrawStrX2(&u8g2, 20, 45, buffer);
#endif

		} while (u8g2_NextPage(&u8g2));
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <main+0x280>)
 80012a2:	f004 fa1e 	bl	80056e2 <u8g2_NextPage>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f47f af35 	bne.w	8001118 <main+0xdc>
		u8g2_FirstPage(&u8g2);
 80012ae:	e730      	b.n	8001112 <main+0xd6>
 80012b0:	08001a05 	.word	0x08001a05
 80012b4:	08001af9 	.word	0x08001af9
 80012b8:	0800aff4 	.word	0x0800aff4
 80012bc:	20000340 	.word	0x20000340
 80012c0:	200002ec 	.word	0x200002ec
 80012c4:	20000334 	.word	0x20000334
 80012c8:	0800afc0 	.word	0x0800afc0

080012cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	; 0x50
 80012d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	2230      	movs	r2, #48	; 0x30
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 f95c 	bl	8006598 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <SystemClock_Config+0xd8>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <SystemClock_Config+0xd8>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <SystemClock_Config+0xd8>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <SystemClock_Config+0xdc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <SystemClock_Config+0xdc>)
 8001316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <SystemClock_Config+0xdc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800133c:	2304      	movs	r3, #4
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001340:	23b4      	movs	r3, #180	; 0xb4
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001344:	2302      	movs	r3, #2
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001348:	2304      	movs	r3, #4
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4618      	mov	r0, r3
 8001352:	f002 f8db 	bl	800350c <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x94>
		Error_Handler();
 800135c:	f000 f930 	bl	80015c0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001360:	f002 f884 	bl	800346c <HAL_PWREx_EnableOverDrive>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0xa2>
		Error_Handler();
 800136a:	f000 f929 	bl	80015c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2302      	movs	r3, #2
 8001374:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800137a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800137e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2105      	movs	r1, #5
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fb35 	bl	80039fc <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xd0>
		Error_Handler();
 8001398:	f000 f912 	bl	80015c0 <Error_Handler>
	}
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	; 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2025      	movs	r0, #37	; 0x25
 80013b6:	f000 fdae 	bl	8001f16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ba:	2025      	movs	r0, #37	; 0x25
 80013bc:	f000 fdc7 	bl	8001f4e <HAL_NVIC_EnableIRQ>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_I2C1_Init+0x74>)
 80013ca:	4a1c      	ldr	r2, [pc, #112]	; (800143c <MX_I2C1_Init+0x78>)
 80013cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_I2C1_Init+0x74>)
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <MX_I2C1_Init+0x7c>)
 80013d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_I2C1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_I2C1_Init+0x74>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_I2C1_Init+0x74>)
 8001402:	f001 f823 	bl	800244c <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800140c:	f000 f8d8 	bl	80015c0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001410:	2100      	movs	r1, #0
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <MX_I2C1_Init+0x74>)
 8001414:	f001 ffaf 	bl	8003376 <HAL_I2CEx_ConfigAnalogFilter>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800141e:	f000 f8cf 	bl	80015c0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001422:	2100      	movs	r1, #0
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_I2C1_Init+0x74>)
 8001426:	f001 ffe2 	bl	80033ee <HAL_I2CEx_ConfigDigitalFilter>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x70>
		Error_Handler();
 8001430:	f000 f8c6 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200001fc 	.word	0x200001fc
 800143c:	40005400 	.word	0x40005400
 8001440:	000186a0 	.word	0x000186a0

08001444 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_SPI2_Init+0x64>)
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_SPI2_Init+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001454:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_SPI2_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_SPI2_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_SPI2_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_SPI2_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001490:	220a      	movs	r2, #10
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001496:	f002 fcd1 	bl	8003e3c <HAL_SPI_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_SPI2_Init+0x60>
		Error_Handler();
 80014a0:	f000 f88e 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000250 	.word	0x20000250
 80014ac:	40003800 	.word	0x40003800

080014b0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <MX_USART1_UART_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_USART1_UART_Init+0x4c>)
 80014e8:	f002 ff38 	bl	800435c <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80014f2:	f000 f865 	bl	80015c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200002a8 	.word	0x200002a8
 8001500:	40011000 	.word	0x40011000

08001504 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <MX_GPIO_Init+0xb4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <MX_GPIO_Init+0xb4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <MX_GPIO_Init+0xb4>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_GPIO_Init+0xb4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin,
 800158a:	2201      	movs	r2, #1
 800158c:	2107      	movs	r1, #7
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <MX_GPIO_Init+0xb8>)
 8001590:	f000 ff42 	bl	8002418 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin OLED_CS_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin;
 8001594:	2307      	movs	r3, #7
 8001596:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_GPIO_Init+0xb8>)
 80015ac:	f000 fd88 	bl	80020c0 <HAL_GPIO_Init>

}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020800 	.word	0x40020800

080015c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015c8:	e7fe      	b.n	80015c8 <Error_Handler+0x8>
	...

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_MspInit+0x4c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_MspInit+0x4c>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_MspInit+0x4c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_MspInit+0x4c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_MspInit+0x4c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_I2C_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12b      	bne.n	8001696 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165a:	23c0      	movs	r3, #192	; 0xc0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165e:	2312      	movs	r3, #18
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166a:	2304      	movs	r3, #4
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <HAL_I2C_MspInit+0x8c>)
 8001676:	f000 fd23 	bl	80020c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400

080016ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a28      	ldr	r2, [pc, #160]	; (800176c <HAL_SPI_MspInit+0xc0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d14a      	bne.n	8001764 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a26      	ldr	r2, [pc, #152]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a18      	ldr	r2, [pc, #96]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_SPI_MspInit+0xc4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001722:	2308      	movs	r3, #8
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001732:	2305      	movs	r3, #5
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <HAL_SPI_MspInit+0xc8>)
 800173e:	f000 fcbf 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001754:	2305      	movs	r3, #5
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <HAL_SPI_MspInit+0xcc>)
 8001760:	f000 fcae 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40003800 	.word	0x40003800
 8001770:	40023800 	.word	0x40023800
 8001774:	40020800 	.word	0x40020800
 8001778:	40020400 	.word	0x40020400

0800177c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <HAL_UART_MspInit+0x84>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d12c      	bne.n	80017f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_UART_MspInit+0x88>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x88>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_UART_MspInit+0x88>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_UART_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_UART_MspInit+0x88>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_UART_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e8:	2307      	movs	r3, #7
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_UART_MspInit+0x8c>)
 80017f4:	f000 fc64 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40011000 	.word	0x40011000
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <NMI_Handler+0x4>

08001812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <MemManage_Handler+0x4>

0800181e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <UsageFault_Handler+0x4>

0800182a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 fa3e 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800185c:	f000 fb91 	bl	8001f82 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART1_IRQHandler+0x10>)
 800186a:	f002 fe57 	bl	800451c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200002a8 	.word	0x200002a8

08001878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return 1;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_kill>:

int _kill(int pid, int sig)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001892:	f004 fe57 	bl	8006544 <__errno>
 8001896:	4603      	mov	r3, r0
 8001898:	2216      	movs	r2, #22
 800189a:	601a      	str	r2, [r3, #0]
  return -1;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_exit>:

void _exit (int status)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ffe7 	bl	8001888 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ba:	e7fe      	b.n	80018ba <_exit+0x12>

080018bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e00a      	b.n	80018e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ce:	f3af 8000 	nop.w
 80018d2:	4601      	mov	r1, r0
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf0      	blt.n	80018ce <_read+0x12>
  }

  return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e009      	b.n	800191c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fb81 	bl	8001018 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf1      	blt.n	8001908 <_write+0x12>
  }
  return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_close>:

int _close(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001956:	605a      	str	r2, [r3, #4]
  return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_isatty>:

int _isatty(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f004 fdbc 	bl	8006544 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20030000 	.word	0x20030000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	200003d4 	.word	0x200003d4
 8001a00:	200007f8 	.word	0x200007f8

08001a04 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	72fb      	strb	r3, [r7, #11]
 8001a12:	4613      	mov	r3, r2
 8001a14:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	3b28      	subs	r3, #40	; 0x28
 8001a1a:	2b23      	cmp	r3, #35	; 0x23
 8001a1c:	d864      	bhi.n	8001ae8 <u8x8_stm32_gpio_and_delay+0xe4>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <u8x8_stm32_gpio_and_delay+0x20>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001ae9 	.word	0x08001ae9
 8001a28:	08001ab5 	.word	0x08001ab5
 8001a2c:	08001ae9 	.word	0x08001ae9
 8001a30:	08001ae9 	.word	0x08001ae9
 8001a34:	08001ae9 	.word	0x08001ae9
 8001a38:	08001ae9 	.word	0x08001ae9
 8001a3c:	08001ae9 	.word	0x08001ae9
 8001a40:	08001ae9 	.word	0x08001ae9
 8001a44:	08001ae9 	.word	0x08001ae9
 8001a48:	08001ae9 	.word	0x08001ae9
 8001a4c:	08001ae9 	.word	0x08001ae9
 8001a50:	08001ae9 	.word	0x08001ae9
 8001a54:	08001ae9 	.word	0x08001ae9
 8001a58:	08001ae9 	.word	0x08001ae9
 8001a5c:	08001ae9 	.word	0x08001ae9
 8001a60:	08001ae9 	.word	0x08001ae9
 8001a64:	08001ae9 	.word	0x08001ae9
 8001a68:	08001ae9 	.word	0x08001ae9
 8001a6c:	08001ae9 	.word	0x08001ae9
 8001a70:	08001ae9 	.word	0x08001ae9
 8001a74:	08001ae9 	.word	0x08001ae9
 8001a78:	08001ae9 	.word	0x08001ae9
 8001a7c:	08001ae9 	.word	0x08001ae9
 8001a80:	08001ae9 	.word	0x08001ae9
 8001a84:	08001ae9 	.word	0x08001ae9
 8001a88:	08001ae9 	.word	0x08001ae9
 8001a8c:	08001ae9 	.word	0x08001ae9
 8001a90:	08001ae9 	.word	0x08001ae9
 8001a94:	08001ae9 	.word	0x08001ae9
 8001a98:	08001ae9 	.word	0x08001ae9
 8001a9c:	08001ae9 	.word	0x08001ae9
 8001aa0:	08001ae9 	.word	0x08001ae9
 8001aa4:	08001ae9 	.word	0x08001ae9
 8001aa8:	08001abf 	.word	0x08001abf
 8001aac:	08001acd 	.word	0x08001acd
 8001ab0:	08001adb 	.word	0x08001adb
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8001ab4:	7abb      	ldrb	r3, [r7, #10]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f92e 	bl	8001d18 <HAL_Delay>
		break;
 8001abc:	e014      	b.n	8001ae8 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8001abe:	7abb      	ldrb	r3, [r7, #10]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001ac6:	f000 fca7 	bl	8002418 <HAL_GPIO_WritePin>
		break;
 8001aca:	e00d      	b.n	8001ae8 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8001acc:	7abb      	ldrb	r3, [r7, #10]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	4808      	ldr	r0, [pc, #32]	; (8001af4 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001ad4:	f000 fca0 	bl	8002418 <HAL_GPIO_WritePin>
		break;
 8001ad8:	e006      	b.n	8001ae8 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8001ada:	7abb      	ldrb	r3, [r7, #10]
 8001adc:	461a      	mov	r2, r3
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001ae2:	f000 fc99 	bl	8002418 <HAL_GPIO_WritePin>
		break;
 8001ae6:	bf00      	nop
	}
	return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40020800 	.word	0x40020800

08001af8 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	72fb      	strb	r3, [r7, #11]
 8001b06:	4613      	mov	r3, r2
 8001b08:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	3b14      	subs	r3, #20
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d847      	bhi.n	8001ba2 <u8x8_byte_stm32_hw_spi+0xaa>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <u8x8_byte_stm32_hw_spi+0x20>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001ba7 	.word	0x08001ba7
 8001b1c:	08001ba3 	.word	0x08001ba3
 8001b20:	08001ba3 	.word	0x08001ba3
 8001b24:	08001b4d 	.word	0x08001b4d
 8001b28:	08001b73 	.word	0x08001b73
 8001b2c:	08001b8b 	.word	0x08001b8b
 8001b30:	08001ba3 	.word	0x08001ba3
 8001b34:	08001ba3 	.word	0x08001ba3
 8001b38:	08001ba3 	.word	0x08001ba3
 8001b3c:	08001ba3 	.word	0x08001ba3
 8001b40:	08001ba3 	.word	0x08001ba3
 8001b44:	08001ba3 	.word	0x08001ba3
 8001b48:	08001b65 	.word	0x08001b65
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8001b4c:	7abb      	ldrb	r3, [r7, #10]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <u8x8_byte_stm32_hw_spi+0xc0>)
 8001b56:	f002 f9fa 	bl	8003f4e <HAL_SPI_Transmit>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d024      	beq.n	8001baa <u8x8_byte_stm32_hw_spi+0xb2>
 8001b60:	2300      	movs	r3, #0
 8001b62:	e024      	b.n	8001bae <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8001b64:	7abb      	ldrb	r3, [r7, #10]
 8001b66:	461a      	mov	r2, r3
 8001b68:	214a      	movs	r1, #74	; 0x4a
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f004 fc7b 	bl	8006466 <u8x8_gpio_call>
		break;
 8001b70:	e01c      	b.n	8001bac <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2149      	movs	r1, #73	; 0x49
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f004 fc72 	bl	8006466 <u8x8_gpio_call>
		HAL_Delay(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f000 f8c8 	bl	8001d18 <HAL_Delay>
		break;
 8001b88:	e010      	b.n	8001bac <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f000 f8c4 	bl	8001d18 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	461a      	mov	r2, r3
 8001b98:	2149      	movs	r1, #73	; 0x49
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f004 fc63 	bl	8006466 <u8x8_gpio_call>
		break;
 8001ba0:	e004      	b.n	8001bac <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e003      	b.n	8001bae <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8001baa:	bf00      	nop
	}
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000250 	.word	0x20000250

08001bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bc2:	490e      	ldr	r1, [pc, #56]	; (8001bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd8:	4c0b      	ldr	r4, [pc, #44]	; (8001c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be6:	f000 f813 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f004 fcb1 	bl	8006550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bee:	f7ff fa25 	bl	800103c <main>
  bx  lr    
 8001bf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bf4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c00:	0800b52c 	.word	0x0800b52c
  ldr r2, =_sbss
 8001c04:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c08:	200007f8 	.word	0x200007f8

08001c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC_IRQHandler>
	...

08001c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_Init+0x40>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_Init+0x40>)
 8001c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_Init+0x40>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f94f 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff fcb0 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f967 	bl	8001f6a <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 f92f 	bl	8001f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	200003d8 	.word	0x200003d8

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200003d8 	.word	0x200003d8

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff ffee 	bl	8001d00 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d005      	beq.n	8001d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_Delay+0x44>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3e:	bf00      	nop
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f7      	bhi.n	8001d40 <HAL_Delay+0x28>
  {
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	; (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f7ff ff8e 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff29 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff3e 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff8e 	bl	8001e54 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5d 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff31 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffa2 	bl	8001ebc <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f86:	f000 f802 	bl	8001f8e <HAL_SYSTICK_Callback>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001faa:	f7ff fea9 	bl	8001d00 <HAL_GetTick>
 8001fae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d008      	beq.n	8001fce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e052      	b.n	8002074 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0216 	bic.w	r2, r2, #22
 8001fdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <HAL_DMA_Abort+0x62>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0208 	bic.w	r2, r2, #8
 800200c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800201e:	e013      	b.n	8002048 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002020:	f7ff fe6e 	bl	8001d00 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b05      	cmp	r3, #5
 800202c:	d90c      	bls.n	8002048 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2220      	movs	r2, #32
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2203      	movs	r2, #3
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e015      	b.n	8002074 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1e4      	bne.n	8002020 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	223f      	movs	r2, #63	; 0x3f
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d004      	beq.n	800209a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00c      	b.n	80020b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2205      	movs	r2, #5
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e177      	b.n	80023cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f040 8166 	bne.w	80023c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d005      	beq.n	8002112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	2b02      	cmp	r3, #2
 8002110:	d130      	bne.n	8002174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0201 	and.w	r2, r3, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b03      	cmp	r3, #3
 800217e:	d017      	beq.n	80021b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d123      	bne.n	8002204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80c0 	beq.w	80023c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_GPIO_Init+0x324>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_GPIO_Init+0x324>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_GPIO_Init+0x324>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002262:	4a61      	ldr	r2, [pc, #388]	; (80023e8 <HAL_GPIO_Init+0x328>)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_GPIO_Init+0x32c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d037      	beq.n	80022fe <HAL_GPIO_Init+0x23e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <HAL_GPIO_Init+0x330>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d031      	beq.n	80022fa <HAL_GPIO_Init+0x23a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_GPIO_Init+0x334>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02b      	beq.n	80022f6 <HAL_GPIO_Init+0x236>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a55      	ldr	r2, [pc, #340]	; (80023f8 <HAL_GPIO_Init+0x338>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d025      	beq.n	80022f2 <HAL_GPIO_Init+0x232>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a54      	ldr	r2, [pc, #336]	; (80023fc <HAL_GPIO_Init+0x33c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01f      	beq.n	80022ee <HAL_GPIO_Init+0x22e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a53      	ldr	r2, [pc, #332]	; (8002400 <HAL_GPIO_Init+0x340>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d019      	beq.n	80022ea <HAL_GPIO_Init+0x22a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_GPIO_Init+0x344>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x226>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a51      	ldr	r2, [pc, #324]	; (8002408 <HAL_GPIO_Init+0x348>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x222>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a50      	ldr	r2, [pc, #320]	; (800240c <HAL_GPIO_Init+0x34c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x21e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4f      	ldr	r2, [pc, #316]	; (8002410 <HAL_GPIO_Init+0x350>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x21a>
 80022d6:	2309      	movs	r3, #9
 80022d8:	e012      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022da:	230a      	movs	r3, #10
 80022dc:	e010      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022de:	2308      	movs	r3, #8
 80022e0:	e00e      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022e2:	2307      	movs	r3, #7
 80022e4:	e00c      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022e6:	2306      	movs	r3, #6
 80022e8:	e00a      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022ea:	2305      	movs	r3, #5
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022fe:	2300      	movs	r3, #0
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_GPIO_Init+0x328>)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_GPIO_Init+0x354>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a34      	ldr	r2, [pc, #208]	; (8002414 <HAL_GPIO_Init+0x354>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_GPIO_Init+0x354>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a29      	ldr	r2, [pc, #164]	; (8002414 <HAL_GPIO_Init+0x354>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_GPIO_Init+0x354>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_GPIO_Init+0x354>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_GPIO_Init+0x354>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_GPIO_Init+0x354>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	f67f ae84 	bls.w	80020dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40013800 	.word	0x40013800
 80023ec:	40020000 	.word	0x40020000
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40021400 	.word	0x40021400
 8002404:	40021800 	.word	0x40021800
 8002408:	40021c00 	.word	0x40021c00
 800240c:	40022000 	.word	0x40022000
 8002410:	40022400 	.word	0x40022400
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002434:	e003      	b.n	800243e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12b      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff f8d2 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f001 fc9c 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a81      	ldr	r2, [pc, #516]	; (80026c0 <HAL_I2C_Init+0x274>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x84>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_I2C_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x92>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7d      	ldr	r2, [pc, #500]	; (80026c8 <HAL_I2C_Init+0x27c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0e7      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a78      	ldr	r2, [pc, #480]	; (80026cc <HAL_I2C_Init+0x280>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a6a      	ldr	r2, [pc, #424]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xd4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xe8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_I2C_Init+0x284>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	495c      	ldr	r1, [pc, #368]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d819      	bhi.n	8002588 <HAL_I2C_Init+0x13c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002568:	400b      	ands	r3, r1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_I2C_Init+0x138>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e59      	subs	r1, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	e051      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002584:	2304      	movs	r3, #4
 8002586:	e04f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_I2C_Init+0x168>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e012      	b.n	80025da <HAL_I2C_Init+0x18e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x196>
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <HAL_I2C_Init+0x1bc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e58      	subs	r0, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	e00f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	6809      	ldr	r1, [r1, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6911      	ldr	r1, [r2, #16]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	000186a0 	.word	0x000186a0
 80026c4:	001e847f 	.word	0x001e847f
 80026c8:	003d08ff 	.word	0x003d08ff
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	461a      	mov	r2, r3
 80026e0:	460b      	mov	r3, r1
 80026e2:	817b      	strh	r3, [r7, #10]
 80026e4:	4613      	mov	r3, r2
 80026e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff fb0a 	bl	8001d00 <HAL_GetTick>
 80026ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	f040 80e0 	bne.w	80028bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2319      	movs	r3, #25
 8002702:	2201      	movs	r2, #1
 8002704:	4970      	ldr	r1, [pc, #448]	; (80028c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fc58 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	e0d3      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2C_Master_Transmit+0x50>
 8002720:	2302      	movs	r3, #2
 8002722:	e0cc      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d007      	beq.n	800274a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002758:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2221      	movs	r2, #33	; 0x21
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2210      	movs	r2, #16
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	893a      	ldrh	r2, [r7, #8]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a50      	ldr	r2, [pc, #320]	; (80028cc <HAL_I2C_Master_Transmit+0x1f8>)
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	6a3a      	ldr	r2, [r7, #32]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fac2 	bl	8002d1c <I2C_MasterRequestWrite>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e08d      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027b8:	e066      	b.n	8002888 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fcd2 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d107      	bne.n	80027e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b04      	cmp	r3, #4
 8002822:	d11b      	bne.n	800285c <HAL_I2C_Master_Transmit+0x188>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d017      	beq.n	800285c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	6a39      	ldr	r1, [r7, #32]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fcc2 	bl	80031ea <I2C_WaitOnBTFFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00d      	beq.n	8002888 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	2b04      	cmp	r3, #4
 8002872:	d107      	bne.n	8002884 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e01a      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d194      	bne.n	80027ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e000      	b.n	80028be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	00100002 	.word	0x00100002
 80028cc:	ffff0000 	.word	0xffff0000

080028d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08c      	sub	sp, #48	; 0x30
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	460b      	mov	r3, r1
 80028de:	817b      	strh	r3, [r7, #10]
 80028e0:	4613      	mov	r3, r2
 80028e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff fa0c 	bl	8001d00 <HAL_GetTick>
 80028e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	f040 820b 	bne.w	8002d0e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2319      	movs	r3, #25
 80028fe:	2201      	movs	r2, #1
 8002900:	497c      	ldr	r1, [pc, #496]	; (8002af4 <HAL_I2C_Master_Receive+0x224>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fb5a 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
 8002910:	e1fe      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_I2C_Master_Receive+0x50>
 800291c:	2302      	movs	r3, #2
 800291e:	e1f7      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d007      	beq.n	8002946 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2222      	movs	r2, #34	; 0x22
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2210      	movs	r2, #16
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	893a      	ldrh	r2, [r7, #8]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a5c      	ldr	r2, [pc, #368]	; (8002af8 <HAL_I2C_Master_Receive+0x228>)
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002988:	8979      	ldrh	r1, [r7, #10]
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa46 	bl	8002e20 <I2C_MasterRequestRead>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1b8      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d113      	bne.n	80029ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e18c      	b.n	8002ce8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d11b      	bne.n	8002a0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e16c      	b.n	8002ce8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d11b      	bne.n	8002a4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	e14c      	b.n	8002ce8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a74:	e138      	b.n	8002ce8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	f200 80f1 	bhi.w	8002c62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d123      	bne.n	8002ad0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fbed 	bl	800326c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e139      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ace:	e10b      	b.n	8002ce8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d14e      	bne.n	8002b76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4906      	ldr	r1, [pc, #24]	; (8002afc <HAL_I2C_Master_Receive+0x22c>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fa6a 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e10e      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
 8002af2:	bf00      	nop
 8002af4:	00100002 	.word	0x00100002
 8002af8:	ffff0000 	.word	0xffff0000
 8002afc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b74:	e0b8      	b.n	8002ce8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4966      	ldr	r1, [pc, #408]	; (8002d18 <HAL_I2C_Master_Receive+0x448>)
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fa1b 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0bf      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	2200      	movs	r2, #0
 8002bda:	494f      	ldr	r1, [pc, #316]	; (8002d18 <HAL_I2C_Master_Receive+0x448>)
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f9ed 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e091      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c60:	e042      	b.n	8002ce8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fb00 	bl	800326c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e04c      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d118      	bne.n	8002ce8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f47f aec2 	bne.w	8002a76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3728      	adds	r7, #40	; 0x28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	00010004 	.word	0x00010004

08002d1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d006      	beq.n	8002d46 <I2C_MasterRequestWrite+0x2a>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d003      	beq.n	8002d46 <I2C_MasterRequestWrite+0x2a>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d44:	d108      	bne.n	8002d58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e00b      	b.n	8002d70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	2b12      	cmp	r3, #18
 8002d5e:	d107      	bne.n	8002d70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f91d 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d96:	d103      	bne.n	8002da0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e035      	b.n	8002e10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dac:	d108      	bne.n	8002dc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dae:	897b      	ldrh	r3, [r7, #10]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dbc:	611a      	str	r2, [r3, #16]
 8002dbe:	e01b      	b.n	8002df8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dc0:	897b      	ldrh	r3, [r7, #10]
 8002dc2:	11db      	asrs	r3, r3, #7
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 0306 	and.w	r3, r3, #6
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f063 030f 	orn	r3, r3, #15
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	490e      	ldr	r1, [pc, #56]	; (8002e18 <I2C_MasterRequestWrite+0xfc>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f943 	bl	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e010      	b.n	8002e10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4907      	ldr	r1, [pc, #28]	; (8002e1c <I2C_MasterRequestWrite+0x100>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f933 	bl	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	00010008 	.word	0x00010008
 8002e1c:	00010002 	.word	0x00010002

08002e20 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e44:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d006      	beq.n	8002e5a <I2C_MasterRequestRead+0x3a>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d003      	beq.n	8002e5a <I2C_MasterRequestRead+0x3a>
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e58:	d108      	bne.n	8002e6c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e00b      	b.n	8002e84 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	2b11      	cmp	r3, #17
 8002e72:	d107      	bne.n	8002e84 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f893 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eaa:	d103      	bne.n	8002eb4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e079      	b.n	8002fac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec0:	d108      	bne.n	8002ed4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	611a      	str	r2, [r3, #16]
 8002ed2:	e05f      	b.n	8002f94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ed4:	897b      	ldrh	r3, [r7, #10]
 8002ed6:	11db      	asrs	r3, r3, #7
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 0306 	and.w	r3, r3, #6
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f063 030f 	orn	r3, r3, #15
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4930      	ldr	r1, [pc, #192]	; (8002fb4 <I2C_MasterRequestRead+0x194>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8b9 	bl	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e054      	b.n	8002fac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f02:	897b      	ldrh	r3, [r7, #10]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4929      	ldr	r1, [pc, #164]	; (8002fb8 <I2C_MasterRequestRead+0x198>)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f8a9 	bl	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e044      	b.n	8002fac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f831 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	d103      	bne.n	8002f78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e017      	b.n	8002fac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f7c:	897b      	ldrh	r3, [r7, #10]
 8002f7e:	11db      	asrs	r3, r3, #7
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 0306 	and.w	r3, r3, #6
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f063 030e 	orn	r3, r3, #14
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4907      	ldr	r1, [pc, #28]	; (8002fb8 <I2C_MasterRequestRead+0x198>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f865 	bl	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	00010008 	.word	0x00010008
 8002fb8:	00010002 	.word	0x00010002

08002fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fcc:	e025      	b.n	800301a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d021      	beq.n	800301a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe fe93 	bl	8001d00 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e023      	b.n	8003062 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10d      	bne.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	e00c      	b.n	800305a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	429a      	cmp	r2, r3
 800305e:	d0b6      	beq.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003078:	e051      	b.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d123      	bne.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003098:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e046      	b.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d021      	beq.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fe fe11 	bl	8001d00 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d116      	bne.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f043 0220 	orr.w	r2, r3, #32
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e020      	b.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10c      	bne.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	e00b      	b.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	43da      	mvns	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4013      	ands	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d18d      	bne.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003174:	e02d      	b.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8ce 	bl	8003318 <I2C_IsAcknowledgeFailed>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e02d      	b.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d021      	beq.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7fe fdb7 	bl	8001d00 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d116      	bne.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d1ca      	bne.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f6:	e02d      	b.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f88d 	bl	8003318 <I2C_IsAcknowledgeFailed>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e02d      	b.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d021      	beq.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003210:	f7fe fd76 	bl	8001d00 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	429a      	cmp	r2, r3
 800321e:	d302      	bcc.n	8003226 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d116      	bne.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e007      	b.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d1ca      	bne.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003278:	e042      	b.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d119      	bne.n	80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0210 	mvn.w	r2, #16
 8003290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e029      	b.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032bc:	f7fe fd20 	bl	8001d00 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d116      	bne.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d1b5      	bne.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d11b      	bne.n	8003368 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003338:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f043 0204 	orr.w	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b20      	cmp	r3, #32
 800338a:	d129      	bne.n	80033e0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2224      	movs	r2, #36	; 0x24
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0210 	bic.w	r2, r2, #16
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e000      	b.n	80033e2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	d12a      	bne.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003428:	89fb      	ldrh	r3, [r7, #14]
 800342a:	f023 030f 	bic.w	r3, r3, #15
 800342e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b29a      	uxth	r2, r3
 8003434:	89fb      	ldrh	r3, [r7, #14]
 8003436:	4313      	orrs	r3, r2
 8003438:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	89fa      	ldrh	r2, [r7, #14]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800345e:	2302      	movs	r3, #2
  }
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_PWREx_EnableOverDrive+0x90>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <HAL_PWREx_EnableOverDrive+0x90>)
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003484:	6413      	str	r3, [r2, #64]	; 0x40
 8003486:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_PWREx_EnableOverDrive+0x90>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_PWREx_EnableOverDrive+0x94>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003498:	f7fe fc32 	bl	8001d00 <HAL_GetTick>
 800349c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800349e:	e009      	b.n	80034b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034a0:	f7fe fc2e 	bl	8001d00 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ae:	d901      	bls.n	80034b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e01f      	b.n	80034f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d1ee      	bne.n	80034a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c8:	f7fe fc1a 	bl	8001d00 <HAL_GetTick>
 80034cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034ce:	e009      	b.n	80034e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034d0:	f7fe fc16 	bl	8001d00 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034de:	d901      	bls.n	80034e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e007      	b.n	80034f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_PWREx_EnableOverDrive+0x98>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f0:	d1ee      	bne.n	80034d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	420e0040 	.word	0x420e0040
 8003504:	40007000 	.word	0x40007000
 8003508:	420e0044 	.word	0x420e0044

0800350c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e267      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d075      	beq.n	8003616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	4b88      	ldr	r3, [pc, #544]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00c      	beq.n	8003550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4b85      	ldr	r3, [pc, #532]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d112      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b82      	ldr	r3, [pc, #520]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354e:	d10b      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	4b7e      	ldr	r3, [pc, #504]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05b      	beq.n	8003614 <HAL_RCC_OscConfig+0x108>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d157      	bne.n	8003614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e242      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x74>
 8003572:	4b76      	ldr	r3, [pc, #472]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a75      	ldr	r2, [pc, #468]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x98>
 800358a:	4b70      	ldr	r3, [pc, #448]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6f      	ldr	r2, [pc, #444]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b6d      	ldr	r3, [pc, #436]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6c      	ldr	r2, [pc, #432]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 80035a4:	4b69      	ldr	r3, [pc, #420]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a68      	ldr	r2, [pc, #416]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a65      	ldr	r2, [pc, #404]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fb9c 	bl	8001d00 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe fb98 	bl	8001d00 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e207      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b5b      	ldr	r3, [pc, #364]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xc0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fb88 	bl	8001d00 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe fb84 	bl	8001d00 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1f3      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b51      	ldr	r3, [pc, #324]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0xe8>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b44      	ldr	r3, [pc, #272]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1c7      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4937      	ldr	r1, [pc, #220]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCC_OscConfig+0x244>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe fb3d 	bl	8001d00 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368a:	f7fe fb39 	bl	8001d00 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1a8      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4925      	ldr	r1, [pc, #148]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCC_OscConfig+0x244>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe fb1c 	bl	8001d00 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fe fb18 	bl	8001d00 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e187      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d036      	beq.n	8003764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_RCC_OscConfig+0x248>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fe fafc 	bl	8001d00 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370c:	f7fe faf8 	bl	8001d00 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e167      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x200>
 800372a:	e01b      	b.n	8003764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_OscConfig+0x248>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fe fae5 	bl	8001d00 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	e00e      	b.n	8003758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373a:	f7fe fae1 	bl	8001d00 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d907      	bls.n	8003758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e150      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
 800374c:	40023800 	.word	0x40023800
 8003750:	42470000 	.word	0x42470000
 8003754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800375a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ea      	bne.n	800373a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8097 	beq.w	80038a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003776:	4b81      	ldr	r3, [pc, #516]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4b7d      	ldr	r3, [pc, #500]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a7c      	ldr	r2, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b7a      	ldr	r3, [pc, #488]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b77      	ldr	r3, [pc, #476]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b74      	ldr	r3, [pc, #464]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe faa1 	bl	8001d00 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe fa9d 	bl	8001d00 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e10c      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x2ea>
 80037e8:	4b64      	ldr	r3, [pc, #400]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a63      	ldr	r2, [pc, #396]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e01c      	b.n	8003830 <HAL_RCC_OscConfig+0x324>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x30c>
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a5e      	ldr	r2, [pc, #376]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	4b5c      	ldr	r3, [pc, #368]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a5b      	ldr	r2, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0x324>
 8003818:	4b58      	ldr	r3, [pc, #352]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6713      	str	r3, [r2, #112]	; 0x70
 8003824:	4b55      	ldr	r3, [pc, #340]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 0304 	bic.w	r3, r3, #4
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d015      	beq.n	8003864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe fa62 	bl	8001d00 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe fa5e 	bl	8001d00 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0cb      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	4b49      	ldr	r3, [pc, #292]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ee      	beq.n	8003840 <HAL_RCC_OscConfig+0x334>
 8003862:	e014      	b.n	800388e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe fa4c 	bl	8001d00 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fe fa48 	bl	8001d00 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0b5      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003882:	4b3e      	ldr	r3, [pc, #248]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ee      	bne.n	800386c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	4a38      	ldr	r2, [pc, #224]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80a1 	beq.w	80039ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d05c      	beq.n	8003970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d141      	bne.n	8003942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe fa1c 	bl	8001d00 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe fa18 	bl	8001d00 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e087      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	3b01      	subs	r3, #1
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	491b      	ldr	r1, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe f9f1 	bl	8001d00 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe f9ed 	bl	8001d00 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e05c      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x416>
 8003940:	e054      	b.n	80039ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe f9da 	bl	8001d00 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe f9d6 	bl	8001d00 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e045      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x444>
 800396e:	e03d      	b.n	80039ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e038      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
 800397c:	40023800 	.word	0x40023800
 8003980:	40007000 	.word	0x40007000
 8003984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x4ec>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d028      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d121      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d11a      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d111      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	3b01      	subs	r3, #1
 80039d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0cc      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d90c      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b63      	ldr	r3, [pc, #396]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	494d      	ldr	r1, [pc, #308]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d044      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d119      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e06f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e067      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4934      	ldr	r1, [pc, #208]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7fe f908 	bl	8001d00 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fe f904 	bl	8001d00 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e04f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d20c      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4916      	ldr	r1, [pc, #88]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 f821 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490a      	ldr	r1, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe f868 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023c00 	.word	0x40023c00
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	0800afdc 	.word	0x0800afdc
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	20000004 	.word	0x20000004

08003bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bcc:	b094      	sub	sp, #80	; 0x50
 8003bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd8:	2300      	movs	r3, #0
 8003bda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be0:	4b79      	ldr	r3, [pc, #484]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d00d      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x40>
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	f200 80e1 	bhi.w	8003db4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x34>
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfa:	e0db      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b73      	ldr	r3, [pc, #460]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c00:	e0db      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c02:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c06:	e0d8      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c08:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c12:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d063      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	099b      	lsrs	r3, r3, #6
 8003c24:	2200      	movs	r2, #0
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c30:	633b      	str	r3, [r7, #48]	; 0x30
 8003c32:	2300      	movs	r3, #0
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
 8003c36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	0159      	lsls	r1, r3, #5
 8003c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c4c:	0150      	lsls	r0, r2, #5
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4621      	mov	r1, r4
 8003c54:	1a51      	subs	r1, r2, r1
 8003c56:	6139      	str	r1, [r7, #16]
 8003c58:	4629      	mov	r1, r5
 8003c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	018b      	lsls	r3, r1, #6
 8003c70:	4651      	mov	r1, sl
 8003c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c76:	4651      	mov	r1, sl
 8003c78:	018a      	lsls	r2, r1, #6
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c80:	4659      	mov	r1, fp
 8003c82:	eb63 0901 	sbc.w	r9, r3, r1
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9a:	4690      	mov	r8, r2
 8003c9c:	4699      	mov	r9, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	eb18 0303 	adds.w	r3, r8, r3
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	eb49 0303 	adc.w	r3, r9, r3
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	024b      	lsls	r3, r1, #9
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	024a      	lsls	r2, r1, #9
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cce:	2200      	movs	r2, #0
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd8:	f7fc ffe6 	bl	8000ca8 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce4:	e058      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	2200      	movs	r2, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d00:	4642      	mov	r2, r8
 8003d02:	464b      	mov	r3, r9
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	0159      	lsls	r1, r3, #5
 8003d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d12:	0150      	lsls	r0, r2, #5
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4641      	mov	r1, r8
 8003d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d1e:	4649      	mov	r1, r9
 8003d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d38:	ebb2 040a 	subs.w	r4, r2, sl
 8003d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	00eb      	lsls	r3, r5, #3
 8003d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4e:	00e2      	lsls	r2, r4, #3
 8003d50:	4614      	mov	r4, r2
 8003d52:	461d      	mov	r5, r3
 8003d54:	4643      	mov	r3, r8
 8003d56:	18e3      	adds	r3, r4, r3
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	eb45 0303 	adc.w	r3, r5, r3
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d6e:	4629      	mov	r1, r5
 8003d70:	028b      	lsls	r3, r1, #10
 8003d72:	4621      	mov	r1, r4
 8003d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d78:	4621      	mov	r1, r4
 8003d7a:	028a      	lsls	r2, r1, #10
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d82:	2200      	movs	r2, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	61fa      	str	r2, [r7, #28]
 8003d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8c:	f7fc ff8c 	bl	8000ca8 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4613      	mov	r3, r2
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003da8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db2:	e002      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3750      	adds	r7, #80	; 0x50
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	007a1200 	.word	0x007a1200

08003dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	0800afec 	.word	0x0800afec

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffdc 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0b5b      	lsrs	r3, r3, #13
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	0800afec 	.word	0x0800afec

08003e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e07b      	b.n	8003f46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d108      	bne.n	8003e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5e:	d009      	beq.n	8003e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]
 8003e66:	e005      	b.n	8003e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fd fc0c 	bl	80016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	ea42 0103 	orr.w	r1, r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0104 	and.w	r1, r3, #4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0210 	and.w	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b088      	sub	sp, #32
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_SPI_Transmit+0x22>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e126      	b.n	80041be <HAL_SPI_Transmit+0x270>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f78:	f7fd fec2 	bl	8001d00 <HAL_GetTick>
 8003f7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d002      	beq.n	8003f94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f92:	e10b      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0x52>
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fa4:	e102      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	d10f      	bne.n	800400e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800400c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d007      	beq.n	800402c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004034:	d14b      	bne.n	80040ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_SPI_Transmit+0xf6>
 800403e:	8afb      	ldrh	r3, [r7, #22]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d13e      	bne.n	80040c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	881a      	ldrh	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	1c9a      	adds	r2, r3, #2
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004068:	e02b      	b.n	80040c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	d112      	bne.n	800409e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	881a      	ldrh	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	86da      	strh	r2, [r3, #54]	; 0x36
 800409c:	e011      	b.n	80040c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800409e:	f7fd fe2f 	bl	8001d00 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d803      	bhi.n	80040b6 <HAL_SPI_Transmit+0x168>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d102      	bne.n	80040bc <HAL_SPI_Transmit+0x16e>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040c0:	e074      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ce      	bne.n	800406a <HAL_SPI_Transmit+0x11c>
 80040cc:	e04c      	b.n	8004168 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_SPI_Transmit+0x18e>
 80040d6:	8afb      	ldrh	r3, [r7, #22]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d140      	bne.n	800415e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004102:	e02c      	b.n	800415e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d113      	bne.n	800413a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	; 0x36
 8004138:	e011      	b.n	800415e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800413a:	f7fd fde1 	bl	8001d00 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d803      	bhi.n	8004152 <HAL_SPI_Transmit+0x204>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d102      	bne.n	8004158 <HAL_SPI_Transmit+0x20a>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800415c:	e026      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1cd      	bne.n	8004104 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	6839      	ldr	r1, [r7, #0]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f8b3 	bl	80042d8 <SPI_EndRxTxTransaction>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e000      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80041aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041d8:	f7fd fd92 	bl	8001d00 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041e8:	f7fd fd8a 	bl	8001d00 <HAL_GetTick>
 80041ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ee:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	015b      	lsls	r3, r3, #5
 80041f4:	0d1b      	lsrs	r3, r3, #20
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041fe:	e054      	b.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d050      	beq.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004208:	f7fd fd7a 	bl	8001d00 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	429a      	cmp	r2, r3
 8004216:	d902      	bls.n	800421e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d13d      	bne.n	800429a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800422c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004236:	d111      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004240:	d004      	beq.n	800424c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424a:	d107      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004264:	d10f      	bne.n	8004286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e017      	b.n	80042ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d19b      	bne.n	8004200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000000 	.word	0x20000000

080042d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <SPI_EndRxTxTransaction+0x7c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <SPI_EndRxTxTransaction+0x80>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0d5b      	lsrs	r3, r3, #21
 80042f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004302:	d112      	bne.n	800432a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff ff5a 	bl	80041c8 <SPI_WaitFlagStateUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e00f      	b.n	800434a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3b01      	subs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d0f2      	beq.n	800432a <SPI_EndRxTxTransaction+0x52>
 8004344:	e000      	b.n	8004348 <SPI_EndRxTxTransaction+0x70>
        break;
 8004346:	bf00      	nop
  }

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000000 	.word	0x20000000
 8004358:	165e9f81 	.word	0x165e9f81

0800435c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e03f      	b.n	80043ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd f9fa 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	; 0x24
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fd7b 	bl	8004e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b08a      	sub	sp, #40	; 0x28
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b20      	cmp	r3, #32
 8004414:	d17c      	bne.n	8004510 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_UART_Transmit+0x2c>
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e075      	b.n	8004512 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_UART_Transmit+0x3e>
 8004430:	2302      	movs	r3, #2
 8004432:	e06e      	b.n	8004512 <HAL_UART_Transmit+0x11c>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2221      	movs	r2, #33	; 0x21
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444a:	f7fd fc59 	bl	8001d00 <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004464:	d108      	bne.n	8004478 <HAL_UART_Transmit+0x82>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e003      	b.n	8004480 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004488:	e02a      	b.n	80044e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 faf9 	bl	8004a8c <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e036      	b.n	8004512 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3302      	adds	r3, #2
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	e007      	b.n	80044d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3301      	adds	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1cf      	bne.n	800448a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fac9 	bl	8004a8c <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0ba      	sub	sp, #232	; 0xe8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800455a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_UART_IRQHandler+0x66>
 800456e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fbd3 	bl	8004d26 <UART_Receive_IT>
      return;
 8004580:	e256      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80de 	beq.w	8004748 <HAL_UART_IRQHandler+0x22c>
 800458c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80d1 	beq.w	8004748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_UART_IRQHandler+0xae>
 80045b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0201 	orr.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_UART_IRQHandler+0xd2>
 80045d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_UART_IRQHandler+0xf6>
 80045fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <HAL_UART_IRQHandler+0x126>
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800462a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0208 	orr.w	r2, r3, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 81ed 	beq.w	8004a26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_UART_IRQHandler+0x14e>
 8004658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fb5e 	bl	8004d26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <HAL_UART_IRQHandler+0x17a>
 800468e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d04f      	beq.n	8004736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa66 	bl	8004b68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d141      	bne.n	800472e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1d9      	bne.n	80046aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d013      	beq.n	8004726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	4a7d      	ldr	r2, [pc, #500]	; (80048f8 <HAL_UART_IRQHandler+0x3dc>)
 8004704:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd fcb6 	bl	800207c <HAL_DMA_Abort_IT>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004720:	4610      	mov	r0, r2
 8004722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	e00e      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f99a 	bl	8004a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e00a      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f996 	bl	8004a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e006      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f992 	bl	8004a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004742:	e170      	b.n	8004a26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	bf00      	nop
    return;
 8004746:	e16e      	b.n	8004a26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 814a 	bne.w	80049e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8143 	beq.w	80049e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 813c 	beq.w	80049e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	f040 80b4 	bne.w	80048fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8140 	beq.w	8004a2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047b2:	429a      	cmp	r2, r3
 80047b4:	f080 8139 	bcs.w	8004a2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ca:	f000 8088 	beq.w	80048de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1d9      	bne.n	80047ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3314      	adds	r3, #20
 8004820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800482a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800483e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e1      	bne.n	800481a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800487a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800487c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e3      	bne.n	8004856 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ae:	f023 0310 	bic.w	r3, r3, #16
 80048b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80048c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e3      	bne.n	800489c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fd fb5f 	bl	8001f9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8c0 	bl	8004a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048f4:	e099      	b.n	8004a2a <HAL_UART_IRQHandler+0x50e>
 80048f6:	bf00      	nop
 80048f8:	08004c2f 	.word	0x08004c2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004904:	b29b      	uxth	r3, r3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 808b 	beq.w	8004a2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8086 	beq.w	8004a2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004946:	647a      	str	r2, [r7, #68]	; 0x44
 8004948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800494c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	623b      	str	r3, [r7, #32]
   return(result);
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3314      	adds	r3, #20
 800497a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800497e:	633a      	str	r2, [r7, #48]	; 0x30
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e3      	bne.n	800495a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0310 	bic.w	r3, r3, #16
 80049b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049c4:	61fa      	str	r2, [r7, #28]
 80049c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	69b9      	ldr	r1, [r7, #24]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	617b      	str	r3, [r7, #20]
   return(result);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e3      	bne.n	80049a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f848 	bl	8004a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049e4:	e023      	b.n	8004a2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_UART_IRQHandler+0x4ea>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f929 	bl	8004c56 <UART_Transmit_IT>
    return;
 8004a04:	e014      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00e      	beq.n	8004a30 <HAL_UART_IRQHandler+0x514>
 8004a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f969 	bl	8004cf6 <UART_EndTransmit_IT>
    return;
 8004a24:	e004      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
    return;
 8004a26:	bf00      	nop
 8004a28:	e002      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
      return;
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
      return;
 8004a2e:	bf00      	nop
  }
}
 8004a30:	37e8      	adds	r7, #232	; 0xe8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop

08004a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b090      	sub	sp, #64	; 0x40
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9c:	e050      	b.n	8004b40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d04c      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0x30>
 8004aac:	f7fd f928 	bl	8001d00 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d241      	bcs.n	8004b40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004adc:	637a      	str	r2, [r7, #52]	; 0x34
 8004ade:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	613b      	str	r3, [r7, #16]
   return(result);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3314      	adds	r3, #20
 8004b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b10:	623a      	str	r2, [r7, #32]
 8004b12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	6a3a      	ldr	r2, [r7, #32]
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e5      	bne.n	8004af0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e00f      	b.n	8004b60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d09f      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3740      	adds	r7, #64	; 0x40
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b095      	sub	sp, #84	; 0x54
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b90:	643a      	str	r2, [r7, #64]	; 0x40
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e5      	bne.n	8004b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f023 0301 	bic.w	r3, r3, #1
 8004bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e5      	bne.n	8004ba4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d119      	bne.n	8004c14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f023 0310 	bic.w	r3, r3, #16
 8004bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c00:	61ba      	str	r2, [r7, #24]
 8004c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6979      	ldr	r1, [r7, #20]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e5      	bne.n	8004be0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c22:	bf00      	nop
 8004c24:	3754      	adds	r7, #84	; 0x54
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff ff09 	bl	8004a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b21      	cmp	r3, #33	; 0x21
 8004c68:	d13e      	bne.n	8004ce8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	d114      	bne.n	8004c9e <UART_Transmit_IT+0x48>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d110      	bne.n	8004c9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	621a      	str	r2, [r3, #32]
 8004c9c:	e008      	b.n	8004cb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	1c59      	adds	r1, r3, #1
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6211      	str	r1, [r2, #32]
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10f      	bne.n	8004ce4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fe8e 	bl	8004a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b08c      	sub	sp, #48	; 0x30
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b22      	cmp	r3, #34	; 0x22
 8004d38:	f040 80ab 	bne.w	8004e92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d44:	d117      	bne.n	8004d76 <UART_Receive_IT+0x50>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d113      	bne.n	8004d76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	1c9a      	adds	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
 8004d74:	e026      	b.n	8004dc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d88:	d007      	beq.n	8004d9a <UART_Receive_IT+0x74>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <UART_Receive_IT+0x82>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e008      	b.n	8004dba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d15a      	bne.n	8004e8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0220 	bic.w	r2, r2, #32
 8004de6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004df6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0201 	bic.w	r2, r2, #1
 8004e06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d135      	bne.n	8004e84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f023 0310 	bic.w	r3, r3, #16
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	623a      	str	r2, [r7, #32]
 8004e40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	69f9      	ldr	r1, [r7, #28]
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d10a      	bne.n	8004e76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff fdf9 	bl	8004a74 <HAL_UARTEx_RxEventCallback>
 8004e82:	e002      	b.n	8004e8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fde1 	bl	8004a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e002      	b.n	8004e94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e000      	b.n	8004e94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
  }
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3730      	adds	r7, #48	; 0x30
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b0c0      	sub	sp, #256	; 0x100
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	68d9      	ldr	r1, [r3, #12]
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	ea40 0301 	orr.w	r3, r0, r1
 8004ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ef4:	f021 010c 	bic.w	r1, r1, #12
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f02:	430b      	orrs	r3, r1
 8004f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f16:	6999      	ldr	r1, [r3, #24]
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	ea40 0301 	orr.w	r3, r0, r1
 8004f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b8f      	ldr	r3, [pc, #572]	; (8005168 <UART_SetConfig+0x2cc>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d005      	beq.n	8004f3c <UART_SetConfig+0xa0>
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b8d      	ldr	r3, [pc, #564]	; (800516c <UART_SetConfig+0x2d0>)
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d104      	bne.n	8004f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f3c:	f7fe ff6a 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004f40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f44:	e003      	b.n	8004f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f46:	f7fe ff51 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f58:	f040 810c 	bne.w	8005174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	1891      	adds	r1, r2, r2
 8004f74:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f76:	415b      	adcs	r3, r3
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f7e:	4621      	mov	r1, r4
 8004f80:	eb12 0801 	adds.w	r8, r2, r1
 8004f84:	4629      	mov	r1, r5
 8004f86:	eb43 0901 	adc.w	r9, r3, r1
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9e:	4690      	mov	r8, r2
 8004fa0:	4699      	mov	r9, r3
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	eb18 0303 	adds.w	r3, r8, r3
 8004fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fac:	462b      	mov	r3, r5
 8004fae:	eb49 0303 	adc.w	r3, r9, r3
 8004fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fca:	460b      	mov	r3, r1
 8004fcc:	18db      	adds	r3, r3, r3
 8004fce:	653b      	str	r3, [r7, #80]	; 0x50
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	eb42 0303 	adc.w	r3, r2, r3
 8004fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fe0:	f7fb fe62 	bl	8000ca8 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4b61      	ldr	r3, [pc, #388]	; (8005170 <UART_SetConfig+0x2d4>)
 8004fea:	fba3 2302 	umull	r2, r3, r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	011c      	lsls	r4, r3, #4
 8004ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005004:	4642      	mov	r2, r8
 8005006:	464b      	mov	r3, r9
 8005008:	1891      	adds	r1, r2, r2
 800500a:	64b9      	str	r1, [r7, #72]	; 0x48
 800500c:	415b      	adcs	r3, r3
 800500e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005014:	4641      	mov	r1, r8
 8005016:	eb12 0a01 	adds.w	sl, r2, r1
 800501a:	4649      	mov	r1, r9
 800501c:	eb43 0b01 	adc.w	fp, r3, r1
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800502c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005034:	4692      	mov	sl, r2
 8005036:	469b      	mov	fp, r3
 8005038:	4643      	mov	r3, r8
 800503a:	eb1a 0303 	adds.w	r3, sl, r3
 800503e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005042:	464b      	mov	r3, r9
 8005044:	eb4b 0303 	adc.w	r3, fp, r3
 8005048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005058:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800505c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005060:	460b      	mov	r3, r1
 8005062:	18db      	adds	r3, r3, r3
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
 8005066:	4613      	mov	r3, r2
 8005068:	eb42 0303 	adc.w	r3, r2, r3
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
 800506e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005076:	f7fb fe17 	bl	8000ca8 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4611      	mov	r1, r2
 8005080:	4b3b      	ldr	r3, [pc, #236]	; (8005170 <UART_SetConfig+0x2d4>)
 8005082:	fba3 2301 	umull	r2, r3, r3, r1
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	2264      	movs	r2, #100	; 0x64
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	1acb      	subs	r3, r1, r3
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005096:	4b36      	ldr	r3, [pc, #216]	; (8005170 <UART_SetConfig+0x2d4>)
 8005098:	fba3 2302 	umull	r2, r3, r3, r2
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050a4:	441c      	add	r4, r3
 80050a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050b8:	4642      	mov	r2, r8
 80050ba:	464b      	mov	r3, r9
 80050bc:	1891      	adds	r1, r2, r2
 80050be:	63b9      	str	r1, [r7, #56]	; 0x38
 80050c0:	415b      	adcs	r3, r3
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050c8:	4641      	mov	r1, r8
 80050ca:	1851      	adds	r1, r2, r1
 80050cc:	6339      	str	r1, [r7, #48]	; 0x30
 80050ce:	4649      	mov	r1, r9
 80050d0:	414b      	adcs	r3, r1
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050e0:	4659      	mov	r1, fp
 80050e2:	00cb      	lsls	r3, r1, #3
 80050e4:	4651      	mov	r1, sl
 80050e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ea:	4651      	mov	r1, sl
 80050ec:	00ca      	lsls	r2, r1, #3
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	4642      	mov	r2, r8
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050fc:	464b      	mov	r3, r9
 80050fe:	460a      	mov	r2, r1
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005114:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800511c:	460b      	mov	r3, r1
 800511e:	18db      	adds	r3, r3, r3
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
 8005122:	4613      	mov	r3, r2
 8005124:	eb42 0303 	adc.w	r3, r2, r3
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800512e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005132:	f7fb fdb9 	bl	8000ca8 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <UART_SetConfig+0x2d4>)
 800513c:	fba3 1302 	umull	r1, r3, r3, r2
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2164      	movs	r1, #100	; 0x64
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	3332      	adds	r3, #50	; 0x32
 800514e:	4a08      	ldr	r2, [pc, #32]	; (8005170 <UART_SetConfig+0x2d4>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f003 0207 	and.w	r2, r3, #7
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4422      	add	r2, r4
 8005162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005164:	e105      	b.n	8005372 <UART_SetConfig+0x4d6>
 8005166:	bf00      	nop
 8005168:	40011000 	.word	0x40011000
 800516c:	40011400 	.word	0x40011400
 8005170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005178:	2200      	movs	r2, #0
 800517a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800517e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005186:	4642      	mov	r2, r8
 8005188:	464b      	mov	r3, r9
 800518a:	1891      	adds	r1, r2, r2
 800518c:	6239      	str	r1, [r7, #32]
 800518e:	415b      	adcs	r3, r3
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
 8005192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005196:	4641      	mov	r1, r8
 8005198:	1854      	adds	r4, r2, r1
 800519a:	4649      	mov	r1, r9
 800519c:	eb43 0501 	adc.w	r5, r3, r1
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	00eb      	lsls	r3, r5, #3
 80051aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ae:	00e2      	lsls	r2, r4, #3
 80051b0:	4614      	mov	r4, r2
 80051b2:	461d      	mov	r5, r3
 80051b4:	4643      	mov	r3, r8
 80051b6:	18e3      	adds	r3, r4, r3
 80051b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051bc:	464b      	mov	r3, r9
 80051be:	eb45 0303 	adc.w	r3, r5, r3
 80051c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051e2:	4629      	mov	r1, r5
 80051e4:	008b      	lsls	r3, r1, #2
 80051e6:	4621      	mov	r1, r4
 80051e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ec:	4621      	mov	r1, r4
 80051ee:	008a      	lsls	r2, r1, #2
 80051f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051f4:	f7fb fd58 	bl	8000ca8 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4b60      	ldr	r3, [pc, #384]	; (8005380 <UART_SetConfig+0x4e4>)
 80051fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	011c      	lsls	r4, r3, #4
 8005206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800520a:	2200      	movs	r2, #0
 800520c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005210:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005218:	4642      	mov	r2, r8
 800521a:	464b      	mov	r3, r9
 800521c:	1891      	adds	r1, r2, r2
 800521e:	61b9      	str	r1, [r7, #24]
 8005220:	415b      	adcs	r3, r3
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005228:	4641      	mov	r1, r8
 800522a:	1851      	adds	r1, r2, r1
 800522c:	6139      	str	r1, [r7, #16]
 800522e:	4649      	mov	r1, r9
 8005230:	414b      	adcs	r3, r1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005240:	4659      	mov	r1, fp
 8005242:	00cb      	lsls	r3, r1, #3
 8005244:	4651      	mov	r1, sl
 8005246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800524a:	4651      	mov	r1, sl
 800524c:	00ca      	lsls	r2, r1, #3
 800524e:	4610      	mov	r0, r2
 8005250:	4619      	mov	r1, r3
 8005252:	4603      	mov	r3, r0
 8005254:	4642      	mov	r2, r8
 8005256:	189b      	adds	r3, r3, r2
 8005258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800525c:	464b      	mov	r3, r9
 800525e:	460a      	mov	r2, r1
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	67bb      	str	r3, [r7, #120]	; 0x78
 8005272:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005280:	4649      	mov	r1, r9
 8005282:	008b      	lsls	r3, r1, #2
 8005284:	4641      	mov	r1, r8
 8005286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528a:	4641      	mov	r1, r8
 800528c:	008a      	lsls	r2, r1, #2
 800528e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005292:	f7fb fd09 	bl	8000ca8 <__aeabi_uldivmod>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4b39      	ldr	r3, [pc, #228]	; (8005380 <UART_SetConfig+0x4e4>)
 800529c:	fba3 1302 	umull	r1, r3, r3, r2
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	2164      	movs	r1, #100	; 0x64
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	3332      	adds	r3, #50	; 0x32
 80052ae:	4a34      	ldr	r2, [pc, #208]	; (8005380 <UART_SetConfig+0x4e4>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ba:	441c      	add	r4, r3
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c0:	2200      	movs	r2, #0
 80052c2:	673b      	str	r3, [r7, #112]	; 0x70
 80052c4:	677a      	str	r2, [r7, #116]	; 0x74
 80052c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052ca:	4642      	mov	r2, r8
 80052cc:	464b      	mov	r3, r9
 80052ce:	1891      	adds	r1, r2, r2
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	415b      	adcs	r3, r3
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052da:	4641      	mov	r1, r8
 80052dc:	1851      	adds	r1, r2, r1
 80052de:	6039      	str	r1, [r7, #0]
 80052e0:	4649      	mov	r1, r9
 80052e2:	414b      	adcs	r3, r1
 80052e4:	607b      	str	r3, [r7, #4]
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052f2:	4659      	mov	r1, fp
 80052f4:	00cb      	lsls	r3, r1, #3
 80052f6:	4651      	mov	r1, sl
 80052f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052fc:	4651      	mov	r1, sl
 80052fe:	00ca      	lsls	r2, r1, #3
 8005300:	4610      	mov	r0, r2
 8005302:	4619      	mov	r1, r3
 8005304:	4603      	mov	r3, r0
 8005306:	4642      	mov	r2, r8
 8005308:	189b      	adds	r3, r3, r2
 800530a:	66bb      	str	r3, [r7, #104]	; 0x68
 800530c:	464b      	mov	r3, r9
 800530e:	460a      	mov	r2, r1
 8005310:	eb42 0303 	adc.w	r3, r2, r3
 8005314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	663b      	str	r3, [r7, #96]	; 0x60
 8005320:	667a      	str	r2, [r7, #100]	; 0x64
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800532e:	4649      	mov	r1, r9
 8005330:	008b      	lsls	r3, r1, #2
 8005332:	4641      	mov	r1, r8
 8005334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005338:	4641      	mov	r1, r8
 800533a:	008a      	lsls	r2, r1, #2
 800533c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005340:	f7fb fcb2 	bl	8000ca8 <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <UART_SetConfig+0x4e4>)
 800534a:	fba3 1302 	umull	r1, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2164      	movs	r1, #100	; 0x64
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	3332      	adds	r3, #50	; 0x32
 800535c:	4a08      	ldr	r2, [pc, #32]	; (8005380 <UART_SetConfig+0x4e4>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4422      	add	r2, r4
 8005370:	609a      	str	r2, [r3, #8]
}
 8005372:	bf00      	nop
 8005374:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005378:	46bd      	mov	sp, r7
 800537a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537e:	bf00      	nop
 8005380:	51eb851f 	.word	0x51eb851f

08005384 <singleByteWrite>:
extern I2C_HandleTypeDef hi2c1;
uint8_t data[10];
extern float readings[3];

void singleByteWrite(uint16_t address,uint16_t  data1)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af02      	add	r7, sp, #8
 800538a:	4603      	mov	r3, r0
 800538c:	460a      	mov	r2, r1
 800538e:	80fb      	strh	r3, [r7, #6]
 8005390:	4613      	mov	r3, r2
 8005392:	80bb      	strh	r3, [r7, #4]
	data[0]=address;
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	4b08      	ldr	r3, [pc, #32]	; (80053bc <singleByteWrite+0x38>)
 800539a:	701a      	strb	r2, [r3, #0]
	data[1]=data1;
 800539c:	88bb      	ldrh	r3, [r7, #4]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <singleByteWrite+0x38>)
 80053a2:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&hi2c1,ACCEL_ADDRESS<<1,data,2,100);
 80053a4:	2364      	movs	r3, #100	; 0x64
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	2302      	movs	r3, #2
 80053aa:	4a04      	ldr	r2, [pc, #16]	; (80053bc <singleByteWrite+0x38>)
 80053ac:	21a6      	movs	r1, #166	; 0xa6
 80053ae:	4804      	ldr	r0, [pc, #16]	; (80053c0 <singleByteWrite+0x3c>)
 80053b0:	f7fd f990 	bl	80026d4 <HAL_I2C_Master_Transmit>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	200003dc 	.word	0x200003dc
 80053c0:	200001fc 	.word	0x200001fc

080053c4 <multiDataRead>:


void multiDataRead(int16_t* data_X, int16_t* data_Y, int16_t* data_Z)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
	data[0]=DATAX0;
 80053d0:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <multiDataRead+0x7c>)
 80053d2:	2232      	movs	r2, #50	; 0x32
 80053d4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 80053d6:	2332      	movs	r3, #50	; 0x32
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2301      	movs	r3, #1
 80053dc:	4a18      	ldr	r2, [pc, #96]	; (8005440 <multiDataRead+0x7c>)
 80053de:	21a6      	movs	r1, #166	; 0xa6
 80053e0:	4818      	ldr	r0, [pc, #96]	; (8005444 <multiDataRead+0x80>)
 80053e2:	f7fd f977 	bl	80026d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ACCEL_ADDRESS<<1, data, 6, 50);
 80053e6:	2332      	movs	r3, #50	; 0x32
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2306      	movs	r3, #6
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <multiDataRead+0x7c>)
 80053ee:	21a6      	movs	r1, #166	; 0xa6
 80053f0:	4814      	ldr	r0, [pc, #80]	; (8005444 <multiDataRead+0x80>)
 80053f2:	f7fd fa6d 	bl	80028d0 <HAL_I2C_Master_Receive>

	*data_X =(data[0] | (data[1] << 8));
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <multiDataRead+0x7c>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	b21a      	sxth	r2, r3
 80053fc:	4b10      	ldr	r3, [pc, #64]	; (8005440 <multiDataRead+0x7c>)
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	b21b      	sxth	r3, r3
 8005404:	4313      	orrs	r3, r2
 8005406:	b21a      	sxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	801a      	strh	r2, [r3, #0]
	*data_Y =(data[2] | (data[3] << 8));
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <multiDataRead+0x7c>)
 800540e:	789b      	ldrb	r3, [r3, #2]
 8005410:	b21a      	sxth	r2, r3
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <multiDataRead+0x7c>)
 8005414:	78db      	ldrb	r3, [r3, #3]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	b21b      	sxth	r3, r3
 800541a:	4313      	orrs	r3, r2
 800541c:	b21a      	sxth	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	801a      	strh	r2, [r3, #0]
	*data_Z =(data[4] | (data[5] << 8));
 8005422:	4b07      	ldr	r3, [pc, #28]	; (8005440 <multiDataRead+0x7c>)
 8005424:	791b      	ldrb	r3, [r3, #4]
 8005426:	b21a      	sxth	r2, r3
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <multiDataRead+0x7c>)
 800542a:	795b      	ldrb	r3, [r3, #5]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	b21b      	sxth	r3, r3
 8005430:	4313      	orrs	r3, r2
 8005432:	b21a      	sxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	801a      	strh	r2, [r3, #0]
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	200003dc 	.word	0x200003dc
 8005444:	200001fc 	.word	0x200001fc

08005448 <singleByteRead>:


uint16_t singleByteRead(uint16_t address)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af02      	add	r7, sp, #8
 800544e:	4603      	mov	r3, r0
 8005450:	80fb      	strh	r3, [r7, #6]
	data[0] = address;
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <singleByteRead+0x40>)
 8005458:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 800545a:	2332      	movs	r3, #50	; 0x32
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	2301      	movs	r3, #1
 8005460:	4a09      	ldr	r2, [pc, #36]	; (8005488 <singleByteRead+0x40>)
 8005462:	21a6      	movs	r1, #166	; 0xa6
 8005464:	4809      	ldr	r0, [pc, #36]	; (800548c <singleByteRead+0x44>)
 8005466:	f7fd f935 	bl	80026d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 800546a:	2332      	movs	r3, #50	; 0x32
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2301      	movs	r3, #1
 8005470:	4a05      	ldr	r2, [pc, #20]	; (8005488 <singleByteRead+0x40>)
 8005472:	21a6      	movs	r1, #166	; 0xa6
 8005474:	4805      	ldr	r0, [pc, #20]	; (800548c <singleByteRead+0x44>)
 8005476:	f7fd fa2b 	bl	80028d0 <HAL_I2C_Master_Receive>
	return data[0];
 800547a:	4b03      	ldr	r3, [pc, #12]	; (8005488 <singleByteRead+0x40>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200003dc 	.word	0x200003dc
 800548c:	200001fc 	.word	0x200001fc

08005490 <ADXL345Init>:

int8_t ADXL345Init()
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
	char id = 0x00;
 8005496:	2300      	movs	r3, #0
 8005498:	71fb      	strb	r3, [r7, #7]
		// Go into standby mode to configure the device.
		singleByteWrite(0x2D, 0x00);
 800549a:	2100      	movs	r1, #0
 800549c:	202d      	movs	r0, #45	; 0x2d
 800549e:	f7ff ff71 	bl	8005384 <singleByteWrite>
		id = singleByteRead(0x00);
 80054a2:	2000      	movs	r0, #0
 80054a4:	f7ff ffd0 	bl	8005448 <singleByteRead>
 80054a8:	4603      	mov	r3, r0
 80054aa:	71fb      	strb	r3, [r7, #7]
		if (id != 0xE5)
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	2be5      	cmp	r3, #229	; 0xe5
 80054b0:	d004      	beq.n	80054bc <ADXL345Init+0x2c>
		{
			printf("ERROR\n");
 80054b2:	480e      	ldr	r0, [pc, #56]	; (80054ec <ADXL345Init+0x5c>)
 80054b4:	f001 ff78 	bl	80073a8 <puts>
			return ACCEL_ERROR;
 80054b8:	2302      	movs	r3, #2
 80054ba:	e013      	b.n	80054e4 <ADXL345Init+0x54>
		}
		else
		{
			printf("ENABLE\n");
 80054bc:	480c      	ldr	r0, [pc, #48]	; (80054f0 <ADXL345Init+0x60>)
 80054be:	f001 ff73 	bl	80073a8 <puts>
			singleByteWrite(DATA_FORMAT, 0x08);       // Full resolution, +/-2g, 4mg/LSB, right justified
 80054c2:	2108      	movs	r1, #8
 80054c4:	2031      	movs	r0, #49	; 0x31
 80054c6:	f7ff ff5d 	bl	8005384 <singleByteWrite>
			singleByteWrite(BW_RATE, 0x0A);           // Set 100 Hz data rate
 80054ca:	210a      	movs	r1, #10
 80054cc:	202c      	movs	r0, #44	; 0x2c
 80054ce:	f7ff ff59 	bl	8005384 <singleByteWrite>
			singleByteWrite(FIFO_CTL, 0x80);          // stream mode
 80054d2:	2180      	movs	r1, #128	; 0x80
 80054d4:	2038      	movs	r0, #56	; 0x38
 80054d6:	f7ff ff55 	bl	8005384 <singleByteWrite>
			singleByteWrite(POWER_CTL, 0x08);         // POWER_CTL reg: measurement mode
 80054da:	2108      	movs	r1, #8
 80054dc:	202d      	movs	r0, #45	; 0x2d
 80054de:	f7ff ff51 	bl	8005384 <singleByteWrite>
			return 0x00;
 80054e2:	2300      	movs	r3, #0
		}
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	0800afcc 	.word	0x0800afcc
 80054f0:	0800afd4 	.word	0x0800afd4

080054f4 <accelAverage>:

void accelAverage()
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
	int16_t i, sx, sy, sz, xx, yy, zz;

		// sum
		sx = sy = sz = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	813b      	strh	r3, [r7, #8]
 80054fe:	893b      	ldrh	r3, [r7, #8]
 8005500:	817b      	strh	r3, [r7, #10]
 8005502:	897b      	ldrh	r3, [r7, #10]
 8005504:	81bb      	strh	r3, [r7, #12]
		// average accelerometer reading over last 16 samples
		for (i=0; i<16; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	81fb      	strh	r3, [r7, #14]
 800550a:	e020      	b.n	800554e <accelAverage+0x5a>
		{
			multiDataRead(&xx, &yy, &zz);
 800550c:	1cba      	adds	r2, r7, #2
 800550e:	1d39      	adds	r1, r7, #4
 8005510:	1dbb      	adds	r3, r7, #6
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff ff56 	bl	80053c4 <multiDataRead>
			sx += xx;
 8005518:	89ba      	ldrh	r2, [r7, #12]
 800551a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551e:	b29b      	uxth	r3, r3
 8005520:	4413      	add	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	81bb      	strh	r3, [r7, #12]
			sy += yy;
 8005526:	897a      	ldrh	r2, [r7, #10]
 8005528:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800552c:	b29b      	uxth	r3, r3
 800552e:	4413      	add	r3, r2
 8005530:	b29b      	uxth	r3, r3
 8005532:	817b      	strh	r3, [r7, #10]
			sz += zz;
 8005534:	893a      	ldrh	r2, [r7, #8]
 8005536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800553a:	b29b      	uxth	r3, r3
 800553c:	4413      	add	r3, r2
 800553e:	b29b      	uxth	r3, r3
 8005540:	813b      	strh	r3, [r7, #8]
		for (i=0; i<16; i++)
 8005542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005546:	b29b      	uxth	r3, r3
 8005548:	3301      	adds	r3, #1
 800554a:	b29b      	uxth	r3, r3
 800554c:	81fb      	strh	r3, [r7, #14]
 800554e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	ddda      	ble.n	800550c <accelAverage+0x18>
		}
		// average
		readings[0] = sx >> 4;
 8005556:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800555a:	111b      	asrs	r3, r3, #4
 800555c:	b21b      	sxth	r3, r3
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005566:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <accelAverage+0xac>)
 8005568:	edc3 7a00 	vstr	s15, [r3]
		readings[1] = sy >> 4;
 800556c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005570:	111b      	asrs	r3, r3, #4
 8005572:	b21b      	sxth	r3, r3
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <accelAverage+0xac>)
 800557e:	edc3 7a01 	vstr	s15, [r3, #4]
		readings[2] = sz >> 4;
 8005582:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005586:	111b      	asrs	r3, r3, #4
 8005588:	b21b      	sxth	r3, r3
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005592:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <accelAverage+0xac>)
 8005594:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20000334 	.word	0x20000334

080055a4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	7c1b      	ldrb	r3, [r3, #16]
 80055b2:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055ba:	461a      	mov	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	2100      	movs	r1, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 ffe0 	bl	8006598 <memset>
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
 80055ec:	4613      	mov	r3, r2
 80055ee:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	7c1b      	ldrb	r3, [r3, #16]
 80055f6:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	b29b      	uxth	r3, r3
 8005606:	89ba      	ldrh	r2, [r7, #12]
 8005608:	fb12 f303 	smulbb	r3, r2, r3
 800560c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800560e:	89bb      	ldrh	r3, [r7, #12]
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8005614:	89bb      	ldrh	r3, [r7, #12]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4413      	add	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800561c:	7bf9      	ldrb	r1, [r7, #15]
 800561e:	78ba      	ldrb	r2, [r7, #2]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	460b      	mov	r3, r1
 8005626:	2100      	movs	r1, #0
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 febc 	bl	80063a6 <u8x8_DrawTile>
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005648:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005650:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	7c5b      	ldrb	r3, [r3, #17]
 8005658:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800565a:	7bba      	ldrb	r2, [r7, #14]
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ffbd 	bl	80055e0 <u8g2_send_tile_row>
    src_row++;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	3301      	adds	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800566c:	7bbb      	ldrb	r3, [r7, #14]
 800566e:	3301      	adds	r3, #1
 8005670:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	7b7b      	ldrb	r3, [r7, #13]
 8005676:	429a      	cmp	r2, r3
 8005678:	d203      	bcs.n	8005682 <u8g2_send_buffer+0x4c>
 800567a:	7bba      	ldrb	r2, [r7, #14]
 800567c:	7b3b      	ldrb	r3, [r7, #12]
 800567e:	429a      	cmp	r2, r3
 8005680:	d3eb      	bcc.n	800565a <u8g2_send_buffer+0x24>
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
}
 80056b2:	bf00      	nop
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff ff69 	bl	80055a4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80056d2:	2100      	movs	r1, #0
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff ffd8 	bl	800568a <u8g2_SetBufferCurrTileRow>
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff ffa3 	bl	8005636 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056f6:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	4413      	add	r3, r2
 8005702:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	7c5b      	ldrb	r3, [r3, #17]
 800570a:	7bfa      	ldrb	r2, [r7, #15]
 800570c:	429a      	cmp	r2, r3
 800570e:	d304      	bcc.n	800571a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fe99 	bl	8006448 <u8x8_RefreshDisplay>
    return 0;
 8005716:	2300      	movs	r3, #0
 8005718:	e00d      	b.n	8005736 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff3d 	bl	80055a4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff ffab 	bl	800568a <u8g2_SetBufferCurrTileRow>
  return 1;
 8005734:	2301      	movs	r3, #1
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2208      	movs	r2, #8
 800574c:	701a      	strb	r2, [r3, #0]
  return buf;
 800574e:	4b03      	ldr	r3, [pc, #12]	; (800575c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	200003e8 	.word	0x200003e8

08005760 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8005776:	490c      	ldr	r1, [pc, #48]	; (80057a8 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fec5 	bl	8006508 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800577e:	f107 0313 	add.w	r3, r7, #19
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff ffdc 	bl	8005740 <u8g2_m_16_8_f>
 8005788:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800578a:	7cfa      	ldrb	r2, [r7, #19]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fa71 	bl	8005c7c <u8g2_SetupBuffer>
}
 800579a:	bf00      	nop
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	080060c9 	.word	0x080060c9
 80057a8:	080062a1 	.word	0x080062a1
 80057ac:	08005aff 	.word	0x08005aff

080057b0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  return 0;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <u8g2_SetFontPosBaseline+0x1c>)
 80057d4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	080057b1 	.word	0x080057b1

080057e8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4611      	mov	r1, r2
 80057f4:	461a      	mov	r2, r3
 80057f6:	460b      	mov	r3, r1
 80057f8:	80fb      	strh	r3, [r7, #6]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8005804:	8afb      	ldrh	r3, [r7, #22]
 8005806:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	8abb      	ldrh	r3, [r7, #20]
 800580e:	4413      	add	r3, r2
 8005810:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8005812:	8afa      	ldrh	r2, [r7, #22]
 8005814:	8abb      	ldrh	r3, [r7, #20]
 8005816:	429a      	cmp	r2, r3
 8005818:	d90b      	bls.n	8005832 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800581a:	8afa      	ldrh	r2, [r7, #22]
 800581c:	88bb      	ldrh	r3, [r7, #4]
 800581e:	429a      	cmp	r2, r3
 8005820:	d205      	bcs.n	800582e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8005822:	88bb      	ldrh	r3, [r7, #4]
 8005824:	82bb      	strh	r3, [r7, #20]
      b--;
 8005826:	8abb      	ldrh	r3, [r7, #20]
 8005828:	3b01      	subs	r3, #1
 800582a:	82bb      	strh	r3, [r7, #20]
 800582c:	e001      	b.n	8005832 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8005832:	8afa      	ldrh	r2, [r7, #22]
 8005834:	88bb      	ldrh	r3, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d301      	bcc.n	800583e <u8g2_clip_intersection2+0x56>
    return 0;
 800583a:	2300      	movs	r3, #0
 800583c:	e01c      	b.n	8005878 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800583e:	8aba      	ldrh	r2, [r7, #20]
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	429a      	cmp	r2, r3
 8005844:	d801      	bhi.n	800584a <u8g2_clip_intersection2+0x62>
    return 0;
 8005846:	2300      	movs	r3, #0
 8005848:	e016      	b.n	8005878 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800584a:	8afa      	ldrh	r2, [r7, #22]
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	429a      	cmp	r2, r3
 8005850:	d201      	bcs.n	8005856 <u8g2_clip_intersection2+0x6e>
    a = c;
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8005856:	8aba      	ldrh	r2, [r7, #20]
 8005858:	88bb      	ldrh	r3, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d901      	bls.n	8005862 <u8g2_clip_intersection2+0x7a>
    b = d;
 800585e:	88bb      	ldrh	r3, [r7, #4]
 8005860:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8afa      	ldrh	r2, [r7, #22]
 8005866:	801a      	strh	r2, [r3, #0]
  b -= a;
 8005868:	8aba      	ldrh	r2, [r7, #20]
 800586a:	8afb      	ldrh	r3, [r7, #22]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	8aba      	ldrh	r2, [r7, #20]
 8005874:	801a      	strh	r2, [r3, #0]
  return 1;
 8005876:	2301      	movs	r3, #1
}
 8005878:	4618      	mov	r0, r3
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b087      	sub	sp, #28
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	4608      	mov	r0, r1
 800588e:	4611      	mov	r1, r2
 8005890:	461a      	mov	r2, r3
 8005892:	4603      	mov	r3, r0
 8005894:	817b      	strh	r3, [r7, #10]
 8005896:	460b      	mov	r3, r1
 8005898:	813b      	strh	r3, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a2:	893a      	ldrh	r2, [r7, #8]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80058ac:	88f8      	ldrh	r0, [r7, #6]
 80058ae:	893a      	ldrh	r2, [r7, #8]
 80058b0:	8979      	ldrh	r1, [r7, #10]
 80058b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4603      	mov	r3, r0
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	47a0      	blx	r4
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd90      	pop	{r4, r7, pc}

080058c6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80058c6:	b590      	push	{r4, r7, lr}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af02      	add	r7, sp, #8
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	4608      	mov	r0, r1
 80058d0:	4611      	mov	r1, r2
 80058d2:	461a      	mov	r2, r3
 80058d4:	4603      	mov	r3, r0
 80058d6:	817b      	strh	r3, [r7, #10]
 80058d8:	460b      	mov	r3, r1
 80058da:	813b      	strh	r3, [r7, #8]
 80058dc:	4613      	mov	r3, r2
 80058de:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d075      	beq.n	80059d6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d072      	beq.n	80059d6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d91a      	bls.n	800592c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80058f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d109      	bne.n	8005912 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80058fe:	897a      	ldrh	r2, [r7, #10]
 8005900:	88fb      	ldrh	r3, [r7, #6]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	b29b      	uxth	r3, r3
 8005906:	817b      	strh	r3, [r7, #10]
	  x++;
 8005908:	897b      	ldrh	r3, [r7, #10]
 800590a:	3301      	adds	r3, #1
 800590c:	b29b      	uxth	r3, r3
 800590e:	817b      	strh	r3, [r7, #10]
 8005910:	e00c      	b.n	800592c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8005912:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005916:	2b03      	cmp	r3, #3
 8005918:	d108      	bne.n	800592c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800591a:	893a      	ldrh	r2, [r7, #8]
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	b29b      	uxth	r3, r3
 8005922:	813b      	strh	r3, [r7, #8]
	  y++;
 8005924:	893b      	ldrh	r3, [r7, #8]
 8005926:	3301      	adds	r3, #1
 8005928:	b29b      	uxth	r3, r3
 800592a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800592c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8005938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11a      	bne.n	8005976 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005946:	893b      	ldrh	r3, [r7, #8]
 8005948:	429a      	cmp	r2, r3
 800594a:	d83b      	bhi.n	80059c4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005952:	893b      	ldrh	r3, [r7, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	d937      	bls.n	80059c8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005964:	1db9      	adds	r1, r7, #6
 8005966:	f107 000a 	add.w	r0, r7, #10
 800596a:	f7ff ff3d 	bl	80057e8 <u8g2_clip_intersection2>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11a      	bne.n	80059aa <u8g2_DrawHVLine+0xe4>
	  return;
 8005974:	e02f      	b.n	80059d6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800597c:	897b      	ldrh	r3, [r7, #10]
 800597e:	429a      	cmp	r2, r3
 8005980:	d824      	bhi.n	80059cc <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	429a      	cmp	r2, r3
 800598c:	d920      	bls.n	80059d0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800599a:	1db9      	adds	r1, r7, #6
 800599c:	f107 0008 	add.w	r0, r7, #8
 80059a0:	f7ff ff22 	bl	80057e8 <u8g2_clip_intersection2>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	689c      	ldr	r4, [r3, #8]
 80059b0:	8979      	ldrh	r1, [r7, #10]
 80059b2:	893a      	ldrh	r2, [r7, #8]
 80059b4:	88f8      	ldrh	r0, [r7, #6]
 80059b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	4603      	mov	r3, r0
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	47a0      	blx	r4
 80059c2:	e008      	b.n	80059d6 <u8g2_DrawHVLine+0x110>
	  return;
 80059c4:	bf00      	nop
 80059c6:	e006      	b.n	80059d6 <u8g2_DrawHVLine+0x110>
	  return;
 80059c8:	bf00      	nop
 80059ca:	e004      	b.n	80059d6 <u8g2_DrawHVLine+0x110>
	  return;
 80059cc:	bf00      	nop
 80059ce:	e002      	b.n	80059d6 <u8g2_DrawHVLine+0x110>
	  return;
 80059d0:	bf00      	nop
 80059d2:	e000      	b.n	80059d6 <u8g2_DrawHVLine+0x110>
	  return;
 80059d4:	bf00      	nop
    }
}
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd90      	pop	{r4, r7, pc}

080059dc <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
 80059e8:	4613      	mov	r3, r2
 80059ea:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80059f2:	883a      	ldrh	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d31a      	bcc.n	8005a2e <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80059fe:	883a      	ldrh	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d216      	bcs.n	8005a32 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005a0a:	887a      	ldrh	r2, [r7, #2]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d312      	bcc.n	8005a36 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005a16:	887a      	ldrh	r2, [r7, #2]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d20e      	bcs.n	8005a3a <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005a1c:	883a      	ldrh	r2, [r7, #0]
 8005a1e:	8879      	ldrh	r1, [r7, #2]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	2301      	movs	r3, #1
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ff4d 	bl	80058c6 <u8g2_DrawHVLine>
 8005a2c:	e006      	b.n	8005a3c <u8g2_DrawPixel+0x60>
    return;
 8005a2e:	bf00      	nop
 8005a30:	e004      	b.n	8005a3c <u8g2_DrawPixel+0x60>
    return;
 8005a32:	bf00      	nop
 8005a34:	e002      	b.n	8005a3c <u8g2_DrawPixel+0x60>
    return;
 8005a36:	bf00      	nop
 8005a38:	e000      	b.n	8005a3c <u8g2_DrawPixel+0x60>
    return;
 8005a3a:	bf00      	nop
}
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8005a42:	b490      	push	{r4, r7}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	4604      	mov	r4, r0
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4623      	mov	r3, r4
 8005a52:	80fb      	strh	r3, [r7, #6]
 8005a54:	4603      	mov	r3, r0
 8005a56:	80bb      	strh	r3, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	807b      	strh	r3, [r7, #2]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8005a60:	887a      	ldrh	r2, [r7, #2]
 8005a62:	88bb      	ldrh	r3, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d20d      	bcs.n	8005a84 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005a68:	883a      	ldrh	r2, [r7, #0]
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d901      	bls.n	8005a74 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e014      	b.n	8005a9e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8005a74:	887a      	ldrh	r2, [r7, #2]
 8005a76:	883b      	ldrh	r3, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d901      	bls.n	8005a80 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e00e      	b.n	8005a9e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e00c      	b.n	8005a9e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8005a84:	883a      	ldrh	r2, [r7, #0]
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d907      	bls.n	8005a9c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8005a8c:	887a      	ldrh	r2, [r7, #2]
 8005a8e:	883b      	ldrh	r3, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d901      	bls.n	8005a98 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e002      	b.n	8005a9e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8005a9c:	2300      	movs	r3, #0
    }
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc90      	pop	{r4, r7}
 8005aa6:	4770      	bx	lr

08005aa8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	817b      	strh	r3, [r7, #10]
 8005aba:	460b      	mov	r3, r1
 8005abc:	813b      	strh	r3, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8005ace:	8b3b      	ldrh	r3, [r7, #24]
 8005ad0:	893a      	ldrh	r2, [r7, #8]
 8005ad2:	f7ff ffb6 	bl	8005a42 <u8g2_is_intersection_decision_tree>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <u8g2_IsIntersection+0x38>
    return 0; 
 8005adc:	2300      	movs	r3, #0
 8005ade:	e00a      	b.n	8005af6 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	897a      	ldrh	r2, [r7, #10]
 8005af0:	f7ff ffa7 	bl	8005a42 <u8g2_is_intersection_decision_tree>
 8005af4:	4603      	mov	r3, r0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b089      	sub	sp, #36	; 0x24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	817b      	strh	r3, [r7, #10]
 8005b10:	460b      	mov	r3, r1
 8005b12:	813b      	strh	r3, [r7, #8]
 8005b14:	4613      	mov	r3, r2
 8005b16:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005b1c:	7efb      	ldrb	r3, [r7, #27]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8005b24:	2301      	movs	r3, #1
 8005b26:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8005b28:	7e3a      	ldrb	r2, [r7, #24]
 8005b2a:	7efb      	ldrb	r3, [r7, #27]
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d801      	bhi.n	8005b48 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8005b44:	7e3b      	ldrb	r3, [r7, #24]
 8005b46:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d001      	beq.n	8005b56 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8005b52:	7e3b      	ldrb	r3, [r7, #24]
 8005b54:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8005b56:	893b      	ldrh	r3, [r7, #8]
 8005b58:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8005b5a:	8afb      	ldrh	r3, [r7, #22]
 8005b5c:	f023 0307 	bic.w	r3, r3, #7
 8005b60:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	7c1b      	ldrb	r3, [r3, #16]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8afa      	ldrh	r2, [r7, #22]
 8005b6c:	fb12 f303 	smulbb	r3, r2, r3
 8005b70:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8005b78:	8afb      	ldrh	r3, [r7, #22]
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8005b80:	897b      	ldrh	r3, [r7, #10]
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8005b88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d117      	bne.n	8005bc0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	781a      	ldrb	r2, [r3, #0]
 8005b94:	7ebb      	ldrb	r3, [r7, #26]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	7e7b      	ldrb	r3, [r7, #25]
 8005ba4:	4053      	eors	r3, r2
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
	len--;
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e8      	bne.n	8005b90 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005bbe:	e038      	b.n	8005c32 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	781a      	ldrb	r2, [r3, #0]
 8005bc4:	7ebb      	ldrb	r3, [r7, #26]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	7e7b      	ldrb	r3, [r7, #25]
 8005bd4:	4053      	eors	r3, r2
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005bdc:	7efb      	ldrb	r3, [r7, #27]
 8005bde:	3301      	adds	r3, #1
 8005be0:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005be2:	7efb      	ldrb	r3, [r7, #27]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	76fb      	strb	r3, [r7, #27]
      len--;
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005bf0:	7efb      	ldrb	r3, [r7, #27]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d114      	bne.n	8005c20 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d801      	bhi.n	8005c10 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d008      	beq.n	8005c2c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	767b      	strb	r3, [r7, #25]
 8005c1e:	e005      	b.n	8005c2c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005c20:	7ebb      	ldrb	r3, [r7, #26]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8005c26:	7e7b      	ldrb	r3, [r7, #25]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1c6      	bne.n	8005bc0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005c32:	bf00      	nop
 8005c34:	3724      	adds	r7, #36	; 0x24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	79fa      	ldrb	r2, [r7, #7]
 8005ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff ffa9 	bl	8005c3e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff fd6b 	bl	80057c8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8005cfa:	bf00      	nop
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d16:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d18:	89fb      	ldrh	r3, [r7, #14]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	89fa      	ldrh	r2, [r7, #14]
 8005d22:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	7c1b      	ldrb	r3, [r3, #16]
 8005d28:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	89fa      	ldrh	r2, [r7, #14]
 8005d34:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d3c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d3e:	89fb      	ldrh	r3, [r7, #14]
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	89fa      	ldrh	r2, [r7, #14]
 8005d48:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d50:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005d52:	89fb      	ldrh	r3, [r7, #14]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8005d5a:	4413      	add	r3, r2
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	7c52      	ldrb	r2, [r2, #17]
 8005d60:	4293      	cmp	r3, r2
 8005d62:	dd08      	ble.n	8005d76 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	7c5b      	ldrb	r3, [r3, #17]
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d76:	89fb      	ldrh	r3, [r7, #14]
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	8a9a      	ldrh	r2, [r3, #20]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	8ada      	ldrh	r2, [r3, #22]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	4603      	mov	r3, r0
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fe5d 	bl	8005aa8 <u8g2_IsIntersection>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005dfc:	e03b      	b.n	8005e76 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d205      	bcs.n	8005e22 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d905      	bls.n	8005e3e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d205      	bcs.n	8005e5a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d905      	bls.n	8005e76 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ff3b 	bl	8005d02 <u8g2_update_dimension_common>
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ff7b 	bl	8005dc4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af02      	add	r7, sp, #8
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	4608      	mov	r0, r1
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	817b      	strh	r3, [r7, #10]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	813b      	strh	r3, [r7, #8]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005ef0:	88f8      	ldrh	r0, [r7, #6]
 8005ef2:	893a      	ldrh	r2, [r7, #8]
 8005ef4:	8979      	ldrh	r1, [r7, #10]
 8005ef6:	7e3b      	ldrb	r3, [r7, #24]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4603      	mov	r3, r0
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff fcc1 	bl	8005884 <u8g2_draw_hv_line_2dir>
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005f0a:	b590      	push	{r4, r7, lr}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691c      	ldr	r4, [r3, #16]
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2120      	movs	r1, #32
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	47a0      	blx	r4
 8005f24:	4603      	mov	r3, r0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}

08005f2e <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005f2e:	b590      	push	{r4, r7, lr}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	460b      	mov	r3, r1
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	691c      	ldr	r4, [r3, #16]
 8005f40:	7afa      	ldrb	r2, [r7, #11]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2117      	movs	r1, #23
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	47a0      	blx	r4
 8005f4a:	4603      	mov	r3, r0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd90      	pop	{r4, r7, pc}

08005f54 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005f60:	1cfb      	adds	r3, r7, #3
 8005f62:	461a      	mov	r2, r3
 8005f64:	2101      	movs	r1, #1
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff ffe1 	bl	8005f2e <u8x8_byte_SendBytes>
 8005f6c:	4603      	mov	r3, r0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005f76:	b590      	push	{r4, r7, lr}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68dc      	ldr	r4, [r3, #12]
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2115      	movs	r1, #21
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	47a0      	blx	r4
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd90      	pop	{r4, r7, pc}

08005f9a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005f9a:	b590      	push	{r4, r7, lr}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68dc      	ldr	r4, [r3, #12]
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	2300      	movs	r3, #0
 8005fae:	2116      	movs	r1, #22
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	47a0      	blx	r4
 8005fb4:	4603      	mov	r3, r0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd90      	pop	{r4, r7, pc}

08005fbe <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005fbe:	b590      	push	{r4, r7, lr}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68dc      	ldr	r4, [r3, #12]
 8005fd0:	7afa      	ldrb	r2, [r7, #11]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2117      	movs	r1, #23
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	47a0      	blx	r4
 8005fda:	4603      	mov	r3, r0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd90      	pop	{r4, r7, pc}

08005fe4 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68dc      	ldr	r4, [r3, #12]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2118      	movs	r1, #24
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	47a0      	blx	r4
 8005ffa:	4603      	mov	r3, r0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	bd90      	pop	{r4, r7, pc}

08006004 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8006004:	b590      	push	{r4, r7, lr}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68dc      	ldr	r4, [r3, #12]
 8006010:	2300      	movs	r3, #0
 8006012:	2200      	movs	r2, #0
 8006014:	2119      	movs	r1, #25
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	47a0      	blx	r4
 800601a:	4603      	mov	r3, r0
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	bd90      	pop	{r4, r7, pc}

08006024 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	73fb      	strb	r3, [r7, #15]
    data++;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2bfe      	cmp	r3, #254	; 0xfe
 800603e:	d031      	beq.n	80060a4 <u8x8_cad_SendSequence+0x80>
 8006040:	2bfe      	cmp	r3, #254	; 0xfe
 8006042:	dc3d      	bgt.n	80060c0 <u8x8_cad_SendSequence+0x9c>
 8006044:	2b19      	cmp	r3, #25
 8006046:	dc3b      	bgt.n	80060c0 <u8x8_cad_SendSequence+0x9c>
 8006048:	2b18      	cmp	r3, #24
 800604a:	da23      	bge.n	8006094 <u8x8_cad_SendSequence+0x70>
 800604c:	2b16      	cmp	r3, #22
 800604e:	dc02      	bgt.n	8006056 <u8x8_cad_SendSequence+0x32>
 8006050:	2b15      	cmp	r3, #21
 8006052:	da03      	bge.n	800605c <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8006054:	e034      	b.n	80060c0 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8006056:	2b17      	cmp	r3, #23
 8006058:	d00e      	beq.n	8006078 <u8x8_cad_SendSequence+0x54>
	return;
 800605a:	e031      	b.n	80060c0 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68dc      	ldr	r4, [r3, #12]
 8006066:	7bba      	ldrb	r2, [r7, #14]
 8006068:	7bf9      	ldrb	r1, [r7, #15]
 800606a:	2300      	movs	r3, #0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	47a0      	blx	r4
	  data++;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	3301      	adds	r3, #1
 8006074:	603b      	str	r3, [r7, #0]
	  break;
 8006076:	e022      	b.n	80060be <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800607e:	f107 030e 	add.w	r3, r7, #14
 8006082:	461a      	mov	r2, r3
 8006084:	2101      	movs	r1, #1
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff99 	bl	8005fbe <u8x8_cad_SendData>
	  data++;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	603b      	str	r3, [r7, #0]
	  break;
 8006092:	e014      	b.n	80060be <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68dc      	ldr	r4, [r3, #12]
 8006098:	7bf9      	ldrb	r1, [r7, #15]
 800609a:	2300      	movs	r3, #0
 800609c:	2200      	movs	r2, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	47a0      	blx	r4
	  break;
 80060a2:	e00c      	b.n	80060be <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	461a      	mov	r2, r3
 80060ae:	2129      	movs	r1, #41	; 0x29
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f9d8 	bl	8006466 <u8x8_gpio_call>
	  data++;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	3301      	adds	r3, #1
 80060ba:	603b      	str	r3, [r7, #0]
	  break;
 80060bc:	bf00      	nop
    cmd = *data;
 80060be:	e7b6      	b.n	800602e <u8x8_cad_SendSequence+0xa>
	return;
 80060c0:	bf00      	nop
    }
  }
}
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd90      	pop	{r4, r7, pc}

080060c8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	72fb      	strb	r3, [r7, #11]
 80060d6:	4613      	mov	r3, r2
 80060d8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	3b14      	subs	r3, #20
 80060de:	2b05      	cmp	r3, #5
 80060e0:	d82f      	bhi.n	8006142 <u8x8_cad_001+0x7a>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <u8x8_cad_001+0x20>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	08006131 	.word	0x08006131
 80060ec:	08006101 	.word	0x08006101
 80060f0:	08006115 	.word	0x08006115
 80060f4:	08006129 	.word	0x08006129
 80060f8:	08006131 	.word	0x08006131
 80060fc:	08006131 	.word	0x08006131
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8006100:	2100      	movs	r1, #0
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff ff01 	bl	8005f0a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8006108:	7abb      	ldrb	r3, [r7, #10]
 800610a:	4619      	mov	r1, r3
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f7ff ff21 	bl	8005f54 <u8x8_byte_SendByte>
      break;
 8006112:	e018      	b.n	8006146 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8006114:	2100      	movs	r1, #0
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fef7 	bl	8005f0a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800611c:	7abb      	ldrb	r3, [r7, #10]
 800611e:	4619      	mov	r1, r3
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ff17 	bl	8005f54 <u8x8_byte_SendByte>
      break;
 8006126:	e00e      	b.n	8006146 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8006128:	2101      	movs	r1, #1
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff feed 	bl	8005f0a <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	691c      	ldr	r4, [r3, #16]
 8006134:	7aba      	ldrb	r2, [r7, #10]
 8006136:	7af9      	ldrb	r1, [r7, #11]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	47a0      	blx	r4
 800613e:	4603      	mov	r3, r0
 8006140:	e002      	b.n	8006148 <u8x8_cad_001+0x80>
    default:
      return 0;
 8006142:	2300      	movs	r3, #0
 8006144:	e000      	b.n	8006148 <u8x8_cad_001+0x80>
  }
  return 1;
 8006146:	2301      	movs	r3, #1
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	bd90      	pop	{r4, r7, pc}

08006150 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	72fb      	strb	r3, [r7, #11]
 800615e:	4613      	mov	r3, r2
 8006160:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	3b0b      	subs	r3, #11
 8006166:	2b04      	cmp	r3, #4
 8006168:	f200 808a 	bhi.w	8006280 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006189 	.word	0x08006189
 8006178:	08006281 	.word	0x08006281
 800617c:	080061a3 	.word	0x080061a3
 8006180:	080061d5 	.word	0x080061d5
 8006184:	080061f5 	.word	0x080061f5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8006188:	7abb      	ldrb	r3, [r7, #10]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800618e:	4940      	ldr	r1, [pc, #256]	; (8006290 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff ff47 	bl	8006024 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8006196:	e075      	b.n	8006284 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8006198:	493e      	ldr	r1, [pc, #248]	; (8006294 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff ff42 	bl	8006024 <u8x8_cad_SendSequence>
      break;
 80061a0:	e070      	b.n	8006284 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80061a2:	7abb      	ldrb	r3, [r7, #10]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80061a8:	493b      	ldr	r1, [pc, #236]	; (8006298 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff ff3a 	bl	8006024 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	7c9a      	ldrb	r2, [r3, #18]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80061bc:	e062      	b.n	8006284 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80061be:	4937      	ldr	r1, [pc, #220]	; (800629c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff ff2f 	bl	8006024 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	7cda      	ldrb	r2, [r3, #19]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80061d2:	e057      	b.n	8006284 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff ff05 	bl	8005fe4 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80061da:	2181      	movs	r1, #129	; 0x81
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7ff feca 	bl	8005f76 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80061e2:	7abb      	ldrb	r3, [r7, #10]
 80061e4:	4619      	mov	r1, r3
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff fed7 	bl	8005f9a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ff09 	bl	8006004 <u8x8_cad_EndTransfer>
      break;
 80061f2:	e047      	b.n	8006284 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fef5 	bl	8005fe4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	795b      	ldrb	r3, [r3, #5]
 80061fe:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	4413      	add	r3, r2
 8006210:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8006212:	2140      	movs	r1, #64	; 0x40
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7ff feae 	bl	8005f76 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f043 0310 	orr.w	r3, r3, #16
 8006224:	b2db      	uxtb	r3, r3
 8006226:	4619      	mov	r1, r3
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff fea4 	bl	8005f76 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	b2db      	uxtb	r3, r3
 8006236:	4619      	mov	r1, r3
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff feae 	bl	8005f9a <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	799b      	ldrb	r3, [r3, #6]
 8006242:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8006246:	b2db      	uxtb	r3, r3
 8006248:	4619      	mov	r1, r3
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff fea5 	bl	8005f9a <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	791b      	ldrb	r3, [r3, #4]
 8006254:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800625c:	7dbb      	ldrb	r3, [r7, #22]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	b2db      	uxtb	r3, r3
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4619      	mov	r1, r3
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f7ff fea9 	bl	8005fbe <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800626c:	7abb      	ldrb	r3, [r7, #10]
 800626e:	3b01      	subs	r3, #1
 8006270:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8006272:	7abb      	ldrb	r3, [r7, #10]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1eb      	bne.n	8006250 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fec3 	bl	8006004 <u8x8_cad_EndTransfer>
      break;
 800627e:	e001      	b.n	8006284 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8006280:	2300      	movs	r3, #0
 8006282:	e000      	b.n	8006286 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8006284:	2301      	movs	r3, #1
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	0800b038 	.word	0x0800b038
 8006294:	0800b040 	.word	0x0800b040
 8006298:	0800b048 	.word	0x0800b048
 800629c:	0800b050 	.word	0x0800b050

080062a0 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	72fb      	strb	r3, [r7, #11]
 80062ae:	4613      	mov	r3, r2
 80062b0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80062b2:	7aba      	ldrb	r2, [r7, #10]
 80062b4:	7af9      	ldrb	r1, [r7, #11]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f7ff ff49 	bl	8006150 <u8x8_d_ssd1306_sh1106_generic>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e014      	b.n	80062f2 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80062c8:	7afb      	ldrb	r3, [r7, #11]
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	d009      	beq.n	80062e2 <u8x8_d_ssd1306_128x64_noname+0x42>
 80062ce:	2b0a      	cmp	r3, #10
 80062d0:	d10c      	bne.n	80062ec <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f82a 	bl	800632c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80062d8:	4908      	ldr	r1, [pc, #32]	; (80062fc <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff fea2 	bl	8006024 <u8x8_cad_SendSequence>
      break;
 80062e0:	e006      	b.n	80062f0 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80062e2:	4907      	ldr	r1, [pc, #28]	; (8006300 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f80d 	bl	8006304 <u8x8_d_helper_display_setup_memory>
      break;
 80062ea:	e001      	b.n	80062f0 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e000      	b.n	80062f2 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80062f0:	2301      	movs	r3, #1
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	0800b000 	.word	0x0800b000
 8006300:	0800b058 	.word	0x0800b058

08006304 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	7c9a      	ldrb	r2, [r3, #18]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800632c:	b590      	push	{r4, r7, lr}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695c      	ldr	r4, [r3, #20]
 8006338:	2300      	movs	r3, #0
 800633a:	2200      	movs	r2, #0
 800633c:	2128      	movs	r1, #40	; 0x28
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68dc      	ldr	r4, [r3, #12]
 8006346:	2300      	movs	r3, #0
 8006348:	2200      	movs	r2, #0
 800634a:	2114      	movs	r1, #20
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8006350:	2201      	movs	r2, #1
 8006352:	214b      	movs	r1, #75	; 0x4b
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f886 	bl	8006466 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	791b      	ldrb	r3, [r3, #4]
 8006360:	461a      	mov	r2, r3
 8006362:	2129      	movs	r1, #41	; 0x29
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f87e 	bl	8006466 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800636a:	2200      	movs	r2, #0
 800636c:	214b      	movs	r1, #75	; 0x4b
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f879 	bl	8006466 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	791b      	ldrb	r3, [r3, #4]
 800637a:	461a      	mov	r2, r3
 800637c:	2129      	movs	r1, #41	; 0x29
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f871 	bl	8006466 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8006384:	2201      	movs	r2, #1
 8006386:	214b      	movs	r1, #75	; 0x4b
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f86c 	bl	8006466 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	795b      	ldrb	r3, [r3, #5]
 8006394:	461a      	mov	r2, r3
 8006396:	2129      	movs	r1, #41	; 0x29
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f864 	bl	8006466 <u8x8_gpio_call>
}    
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd90      	pop	{r4, r7, pc}

080063a6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80063a6:	b590      	push	{r4, r7, lr}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	461a      	mov	r2, r3
 80063b4:	4603      	mov	r3, r0
 80063b6:	70fb      	strb	r3, [r7, #3]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70bb      	strb	r3, [r7, #2]
 80063bc:	4613      	mov	r3, r2
 80063be:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80063c4:	78bb      	ldrb	r3, [r7, #2]
 80063c6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80063c8:	787b      	ldrb	r3, [r7, #1]
 80063ca:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689c      	ldr	r4, [r3, #8]
 80063d4:	f107 0308 	add.w	r3, r7, #8
 80063d8:	2201      	movs	r2, #1
 80063da:	210f      	movs	r1, #15
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	47a0      	blx	r4
 80063e0:	4603      	mov	r3, r0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd90      	pop	{r4, r7, pc}

080063ea <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80063ea:	b590      	push	{r4, r7, lr}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689c      	ldr	r4, [r3, #8]
 80063f6:	2300      	movs	r3, #0
 80063f8:	2200      	movs	r2, #0
 80063fa:	2109      	movs	r1, #9
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	47a0      	blx	r4
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bd90      	pop	{r4, r7, pc}

08006408 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8006408:	b590      	push	{r4, r7, lr}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689c      	ldr	r4, [r3, #8]
 8006414:	2300      	movs	r3, #0
 8006416:	2200      	movs	r2, #0
 8006418:	210a      	movs	r1, #10
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	bd90      	pop	{r4, r7, pc}

08006426 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8006426:	b590      	push	{r4, r7, lr}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689c      	ldr	r4, [r3, #8]
 8006436:	78fa      	ldrb	r2, [r7, #3]
 8006438:	2300      	movs	r3, #0
 800643a:	210b      	movs	r1, #11
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	47a0      	blx	r4
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	bd90      	pop	{r4, r7, pc}

08006448 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8006448:	b590      	push	{r4, r7, lr}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689c      	ldr	r4, [r3, #8]
 8006454:	2300      	movs	r3, #0
 8006456:	2200      	movs	r2, #0
 8006458:	2110      	movs	r1, #16
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	47a0      	blx	r4
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	bd90      	pop	{r4, r7, pc}

08006466 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8006466:	b590      	push	{r4, r7, lr}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
 8006472:	4613      	mov	r3, r2
 8006474:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695c      	ldr	r4, [r3, #20]
 800647a:	78ba      	ldrb	r2, [r7, #2]
 800647c:	78f9      	ldrb	r1, [r7, #3]
 800647e:	2300      	movs	r3, #0
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	47a0      	blx	r4
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	bd90      	pop	{r4, r7, pc}

0800648c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	607b      	str	r3, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	72fb      	strb	r3, [r7, #11]
 800649a:	4613      	mov	r3, r2
 800649c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <u8x8_SetupDefaults+0x58>)
 80064be:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a10      	ldr	r2, [pc, #64]	; (8006504 <u8x8_SetupDefaults+0x58>)
 80064c4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a0e      	ldr	r2, [pc, #56]	; (8006504 <u8x8_SetupDefaults+0x58>)
 80064ca:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a0d      	ldr	r2, [pc, #52]	; (8006504 <u8x8_SetupDefaults+0x58>)
 80064d0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	22ff      	movs	r2, #255	; 0xff
 80064ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	22ff      	movs	r2, #255	; 0xff
 80064f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	0800648d 	.word	0x0800648d

08006508 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f7ff ffc8 	bl	80064ac <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff ff58 	bl	80063ea <u8x8_SetupMemory>
}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <__errno>:
 8006544:	4b01      	ldr	r3, [pc, #4]	; (800654c <__errno+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	2000000c 	.word	0x2000000c

08006550 <__libc_init_array>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4d0d      	ldr	r5, [pc, #52]	; (8006588 <__libc_init_array+0x38>)
 8006554:	4c0d      	ldr	r4, [pc, #52]	; (800658c <__libc_init_array+0x3c>)
 8006556:	1b64      	subs	r4, r4, r5
 8006558:	10a4      	asrs	r4, r4, #2
 800655a:	2600      	movs	r6, #0
 800655c:	42a6      	cmp	r6, r4
 800655e:	d109      	bne.n	8006574 <__libc_init_array+0x24>
 8006560:	4d0b      	ldr	r5, [pc, #44]	; (8006590 <__libc_init_array+0x40>)
 8006562:	4c0c      	ldr	r4, [pc, #48]	; (8006594 <__libc_init_array+0x44>)
 8006564:	f004 fd1e 	bl	800afa4 <_init>
 8006568:	1b64      	subs	r4, r4, r5
 800656a:	10a4      	asrs	r4, r4, #2
 800656c:	2600      	movs	r6, #0
 800656e:	42a6      	cmp	r6, r4
 8006570:	d105      	bne.n	800657e <__libc_init_array+0x2e>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f855 3b04 	ldr.w	r3, [r5], #4
 8006578:	4798      	blx	r3
 800657a:	3601      	adds	r6, #1
 800657c:	e7ee      	b.n	800655c <__libc_init_array+0xc>
 800657e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006582:	4798      	blx	r3
 8006584:	3601      	adds	r6, #1
 8006586:	e7f2      	b.n	800656e <__libc_init_array+0x1e>
 8006588:	0800b524 	.word	0x0800b524
 800658c:	0800b524 	.word	0x0800b524
 8006590:	0800b524 	.word	0x0800b524
 8006594:	0800b528 	.word	0x0800b528

08006598 <memset>:
 8006598:	4402      	add	r2, r0
 800659a:	4603      	mov	r3, r0
 800659c:	4293      	cmp	r3, r2
 800659e:	d100      	bne.n	80065a2 <memset+0xa>
 80065a0:	4770      	bx	lr
 80065a2:	f803 1b01 	strb.w	r1, [r3], #1
 80065a6:	e7f9      	b.n	800659c <memset+0x4>

080065a8 <__cvt>:
 80065a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065ac:	ec55 4b10 	vmov	r4, r5, d0
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	460e      	mov	r6, r1
 80065b4:	4619      	mov	r1, r3
 80065b6:	462b      	mov	r3, r5
 80065b8:	bfbb      	ittet	lt
 80065ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065be:	461d      	movlt	r5, r3
 80065c0:	2300      	movge	r3, #0
 80065c2:	232d      	movlt	r3, #45	; 0x2d
 80065c4:	700b      	strb	r3, [r1, #0]
 80065c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065cc:	4691      	mov	r9, r2
 80065ce:	f023 0820 	bic.w	r8, r3, #32
 80065d2:	bfbc      	itt	lt
 80065d4:	4622      	movlt	r2, r4
 80065d6:	4614      	movlt	r4, r2
 80065d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065dc:	d005      	beq.n	80065ea <__cvt+0x42>
 80065de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065e2:	d100      	bne.n	80065e6 <__cvt+0x3e>
 80065e4:	3601      	adds	r6, #1
 80065e6:	2102      	movs	r1, #2
 80065e8:	e000      	b.n	80065ec <__cvt+0x44>
 80065ea:	2103      	movs	r1, #3
 80065ec:	ab03      	add	r3, sp, #12
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	ab02      	add	r3, sp, #8
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	ec45 4b10 	vmov	d0, r4, r5
 80065f8:	4653      	mov	r3, sl
 80065fa:	4632      	mov	r2, r6
 80065fc:	f001 fefc 	bl	80083f8 <_dtoa_r>
 8006600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006604:	4607      	mov	r7, r0
 8006606:	d102      	bne.n	800660e <__cvt+0x66>
 8006608:	f019 0f01 	tst.w	r9, #1
 800660c:	d022      	beq.n	8006654 <__cvt+0xac>
 800660e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006612:	eb07 0906 	add.w	r9, r7, r6
 8006616:	d110      	bne.n	800663a <__cvt+0x92>
 8006618:	783b      	ldrb	r3, [r7, #0]
 800661a:	2b30      	cmp	r3, #48	; 0x30
 800661c:	d10a      	bne.n	8006634 <__cvt+0x8c>
 800661e:	2200      	movs	r2, #0
 8006620:	2300      	movs	r3, #0
 8006622:	4620      	mov	r0, r4
 8006624:	4629      	mov	r1, r5
 8006626:	f7fa fa5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800662a:	b918      	cbnz	r0, 8006634 <__cvt+0x8c>
 800662c:	f1c6 0601 	rsb	r6, r6, #1
 8006630:	f8ca 6000 	str.w	r6, [sl]
 8006634:	f8da 3000 	ldr.w	r3, [sl]
 8006638:	4499      	add	r9, r3
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	f7fa fa51 	bl	8000ae8 <__aeabi_dcmpeq>
 8006646:	b108      	cbz	r0, 800664c <__cvt+0xa4>
 8006648:	f8cd 900c 	str.w	r9, [sp, #12]
 800664c:	2230      	movs	r2, #48	; 0x30
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	454b      	cmp	r3, r9
 8006652:	d307      	bcc.n	8006664 <__cvt+0xbc>
 8006654:	9b03      	ldr	r3, [sp, #12]
 8006656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006658:	1bdb      	subs	r3, r3, r7
 800665a:	4638      	mov	r0, r7
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	b004      	add	sp, #16
 8006660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	9103      	str	r1, [sp, #12]
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	e7f0      	b.n	800664e <__cvt+0xa6>

0800666c <__exponent>:
 800666c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800666e:	4603      	mov	r3, r0
 8006670:	2900      	cmp	r1, #0
 8006672:	bfb8      	it	lt
 8006674:	4249      	neglt	r1, r1
 8006676:	f803 2b02 	strb.w	r2, [r3], #2
 800667a:	bfb4      	ite	lt
 800667c:	222d      	movlt	r2, #45	; 0x2d
 800667e:	222b      	movge	r2, #43	; 0x2b
 8006680:	2909      	cmp	r1, #9
 8006682:	7042      	strb	r2, [r0, #1]
 8006684:	dd2a      	ble.n	80066dc <__exponent+0x70>
 8006686:	f10d 0407 	add.w	r4, sp, #7
 800668a:	46a4      	mov	ip, r4
 800668c:	270a      	movs	r7, #10
 800668e:	46a6      	mov	lr, r4
 8006690:	460a      	mov	r2, r1
 8006692:	fb91 f6f7 	sdiv	r6, r1, r7
 8006696:	fb07 1516 	mls	r5, r7, r6, r1
 800669a:	3530      	adds	r5, #48	; 0x30
 800669c:	2a63      	cmp	r2, #99	; 0x63
 800669e:	f104 34ff 	add.w	r4, r4, #4294967295
 80066a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066a6:	4631      	mov	r1, r6
 80066a8:	dcf1      	bgt.n	800668e <__exponent+0x22>
 80066aa:	3130      	adds	r1, #48	; 0x30
 80066ac:	f1ae 0502 	sub.w	r5, lr, #2
 80066b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066b4:	1c44      	adds	r4, r0, #1
 80066b6:	4629      	mov	r1, r5
 80066b8:	4561      	cmp	r1, ip
 80066ba:	d30a      	bcc.n	80066d2 <__exponent+0x66>
 80066bc:	f10d 0209 	add.w	r2, sp, #9
 80066c0:	eba2 020e 	sub.w	r2, r2, lr
 80066c4:	4565      	cmp	r5, ip
 80066c6:	bf88      	it	hi
 80066c8:	2200      	movhi	r2, #0
 80066ca:	4413      	add	r3, r2
 80066cc:	1a18      	subs	r0, r3, r0
 80066ce:	b003      	add	sp, #12
 80066d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066da:	e7ed      	b.n	80066b8 <__exponent+0x4c>
 80066dc:	2330      	movs	r3, #48	; 0x30
 80066de:	3130      	adds	r1, #48	; 0x30
 80066e0:	7083      	strb	r3, [r0, #2]
 80066e2:	70c1      	strb	r1, [r0, #3]
 80066e4:	1d03      	adds	r3, r0, #4
 80066e6:	e7f1      	b.n	80066cc <__exponent+0x60>

080066e8 <_printf_float>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	ed2d 8b02 	vpush	{d8}
 80066f0:	b08d      	sub	sp, #52	; 0x34
 80066f2:	460c      	mov	r4, r1
 80066f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066f8:	4616      	mov	r6, r2
 80066fa:	461f      	mov	r7, r3
 80066fc:	4605      	mov	r5, r0
 80066fe:	f003 f98f 	bl	8009a20 <_localeconv_r>
 8006702:	f8d0 a000 	ldr.w	sl, [r0]
 8006706:	4650      	mov	r0, sl
 8006708:	f7f9 fd72 	bl	80001f0 <strlen>
 800670c:	2300      	movs	r3, #0
 800670e:	930a      	str	r3, [sp, #40]	; 0x28
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	9305      	str	r3, [sp, #20]
 8006714:	f8d8 3000 	ldr.w	r3, [r8]
 8006718:	f894 b018 	ldrb.w	fp, [r4, #24]
 800671c:	3307      	adds	r3, #7
 800671e:	f023 0307 	bic.w	r3, r3, #7
 8006722:	f103 0208 	add.w	r2, r3, #8
 8006726:	f8c8 2000 	str.w	r2, [r8]
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006732:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006736:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800673a:	9307      	str	r3, [sp, #28]
 800673c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006740:	ee08 0a10 	vmov	s16, r0
 8006744:	4b9f      	ldr	r3, [pc, #636]	; (80069c4 <_printf_float+0x2dc>)
 8006746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800674a:	f04f 32ff 	mov.w	r2, #4294967295
 800674e:	f7fa f9fd 	bl	8000b4c <__aeabi_dcmpun>
 8006752:	bb88      	cbnz	r0, 80067b8 <_printf_float+0xd0>
 8006754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006758:	4b9a      	ldr	r3, [pc, #616]	; (80069c4 <_printf_float+0x2dc>)
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	f7fa f9d7 	bl	8000b10 <__aeabi_dcmple>
 8006762:	bb48      	cbnz	r0, 80067b8 <_printf_float+0xd0>
 8006764:	2200      	movs	r2, #0
 8006766:	2300      	movs	r3, #0
 8006768:	4640      	mov	r0, r8
 800676a:	4649      	mov	r1, r9
 800676c:	f7fa f9c6 	bl	8000afc <__aeabi_dcmplt>
 8006770:	b110      	cbz	r0, 8006778 <_printf_float+0x90>
 8006772:	232d      	movs	r3, #45	; 0x2d
 8006774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006778:	4b93      	ldr	r3, [pc, #588]	; (80069c8 <_printf_float+0x2e0>)
 800677a:	4894      	ldr	r0, [pc, #592]	; (80069cc <_printf_float+0x2e4>)
 800677c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006780:	bf94      	ite	ls
 8006782:	4698      	movls	r8, r3
 8006784:	4680      	movhi	r8, r0
 8006786:	2303      	movs	r3, #3
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	9b05      	ldr	r3, [sp, #20]
 800678c:	f023 0204 	bic.w	r2, r3, #4
 8006790:	6022      	str	r2, [r4, #0]
 8006792:	f04f 0900 	mov.w	r9, #0
 8006796:	9700      	str	r7, [sp, #0]
 8006798:	4633      	mov	r3, r6
 800679a:	aa0b      	add	r2, sp, #44	; 0x2c
 800679c:	4621      	mov	r1, r4
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 f9d8 	bl	8006b54 <_printf_common>
 80067a4:	3001      	adds	r0, #1
 80067a6:	f040 8090 	bne.w	80068ca <_printf_float+0x1e2>
 80067aa:	f04f 30ff 	mov.w	r0, #4294967295
 80067ae:	b00d      	add	sp, #52	; 0x34
 80067b0:	ecbd 8b02 	vpop	{d8}
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	4640      	mov	r0, r8
 80067be:	4649      	mov	r1, r9
 80067c0:	f7fa f9c4 	bl	8000b4c <__aeabi_dcmpun>
 80067c4:	b140      	cbz	r0, 80067d8 <_printf_float+0xf0>
 80067c6:	464b      	mov	r3, r9
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bfbc      	itt	lt
 80067cc:	232d      	movlt	r3, #45	; 0x2d
 80067ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067d2:	487f      	ldr	r0, [pc, #508]	; (80069d0 <_printf_float+0x2e8>)
 80067d4:	4b7f      	ldr	r3, [pc, #508]	; (80069d4 <_printf_float+0x2ec>)
 80067d6:	e7d1      	b.n	800677c <_printf_float+0x94>
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067de:	9206      	str	r2, [sp, #24]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	d13f      	bne.n	8006864 <_printf_float+0x17c>
 80067e4:	2306      	movs	r3, #6
 80067e6:	6063      	str	r3, [r4, #4]
 80067e8:	9b05      	ldr	r3, [sp, #20]
 80067ea:	6861      	ldr	r1, [r4, #4]
 80067ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067f0:	2300      	movs	r3, #0
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	ab0a      	add	r3, sp, #40	; 0x28
 80067f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067fa:	ab09      	add	r3, sp, #36	; 0x24
 80067fc:	ec49 8b10 	vmov	d0, r8, r9
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006808:	4628      	mov	r0, r5
 800680a:	f7ff fecd 	bl	80065a8 <__cvt>
 800680e:	9b06      	ldr	r3, [sp, #24]
 8006810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006812:	2b47      	cmp	r3, #71	; 0x47
 8006814:	4680      	mov	r8, r0
 8006816:	d108      	bne.n	800682a <_printf_float+0x142>
 8006818:	1cc8      	adds	r0, r1, #3
 800681a:	db02      	blt.n	8006822 <_printf_float+0x13a>
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	4299      	cmp	r1, r3
 8006820:	dd41      	ble.n	80068a6 <_printf_float+0x1be>
 8006822:	f1ab 0b02 	sub.w	fp, fp, #2
 8006826:	fa5f fb8b 	uxtb.w	fp, fp
 800682a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800682e:	d820      	bhi.n	8006872 <_printf_float+0x18a>
 8006830:	3901      	subs	r1, #1
 8006832:	465a      	mov	r2, fp
 8006834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006838:	9109      	str	r1, [sp, #36]	; 0x24
 800683a:	f7ff ff17 	bl	800666c <__exponent>
 800683e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006840:	1813      	adds	r3, r2, r0
 8006842:	2a01      	cmp	r2, #1
 8006844:	4681      	mov	r9, r0
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	dc02      	bgt.n	8006850 <_printf_float+0x168>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	07d2      	lsls	r2, r2, #31
 800684e:	d501      	bpl.n	8006854 <_printf_float+0x16c>
 8006850:	3301      	adds	r3, #1
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006858:	2b00      	cmp	r3, #0
 800685a:	d09c      	beq.n	8006796 <_printf_float+0xae>
 800685c:	232d      	movs	r3, #45	; 0x2d
 800685e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006862:	e798      	b.n	8006796 <_printf_float+0xae>
 8006864:	9a06      	ldr	r2, [sp, #24]
 8006866:	2a47      	cmp	r2, #71	; 0x47
 8006868:	d1be      	bne.n	80067e8 <_printf_float+0x100>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1bc      	bne.n	80067e8 <_printf_float+0x100>
 800686e:	2301      	movs	r3, #1
 8006870:	e7b9      	b.n	80067e6 <_printf_float+0xfe>
 8006872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006876:	d118      	bne.n	80068aa <_printf_float+0x1c2>
 8006878:	2900      	cmp	r1, #0
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	dd0b      	ble.n	8006896 <_printf_float+0x1ae>
 800687e:	6121      	str	r1, [r4, #16]
 8006880:	b913      	cbnz	r3, 8006888 <_printf_float+0x1a0>
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	07d0      	lsls	r0, r2, #31
 8006886:	d502      	bpl.n	800688e <_printf_float+0x1a6>
 8006888:	3301      	adds	r3, #1
 800688a:	440b      	add	r3, r1
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006890:	f04f 0900 	mov.w	r9, #0
 8006894:	e7de      	b.n	8006854 <_printf_float+0x16c>
 8006896:	b913      	cbnz	r3, 800689e <_printf_float+0x1b6>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	07d2      	lsls	r2, r2, #31
 800689c:	d501      	bpl.n	80068a2 <_printf_float+0x1ba>
 800689e:	3302      	adds	r3, #2
 80068a0:	e7f4      	b.n	800688c <_printf_float+0x1a4>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e7f2      	b.n	800688c <_printf_float+0x1a4>
 80068a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ac:	4299      	cmp	r1, r3
 80068ae:	db05      	blt.n	80068bc <_printf_float+0x1d4>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	6121      	str	r1, [r4, #16]
 80068b4:	07d8      	lsls	r0, r3, #31
 80068b6:	d5ea      	bpl.n	800688e <_printf_float+0x1a6>
 80068b8:	1c4b      	adds	r3, r1, #1
 80068ba:	e7e7      	b.n	800688c <_printf_float+0x1a4>
 80068bc:	2900      	cmp	r1, #0
 80068be:	bfd4      	ite	le
 80068c0:	f1c1 0202 	rsble	r2, r1, #2
 80068c4:	2201      	movgt	r2, #1
 80068c6:	4413      	add	r3, r2
 80068c8:	e7e0      	b.n	800688c <_printf_float+0x1a4>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	055a      	lsls	r2, r3, #21
 80068ce:	d407      	bmi.n	80068e0 <_printf_float+0x1f8>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	4642      	mov	r2, r8
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	d12c      	bne.n	8006938 <_printf_float+0x250>
 80068de:	e764      	b.n	80067aa <_printf_float+0xc2>
 80068e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068e4:	f240 80e0 	bls.w	8006aa8 <_printf_float+0x3c0>
 80068e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068ec:	2200      	movs	r2, #0
 80068ee:	2300      	movs	r3, #0
 80068f0:	f7fa f8fa 	bl	8000ae8 <__aeabi_dcmpeq>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d034      	beq.n	8006962 <_printf_float+0x27a>
 80068f8:	4a37      	ldr	r2, [pc, #220]	; (80069d8 <_printf_float+0x2f0>)
 80068fa:	2301      	movs	r3, #1
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f af51 	beq.w	80067aa <_printf_float+0xc2>
 8006908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800690c:	429a      	cmp	r2, r3
 800690e:	db02      	blt.n	8006916 <_printf_float+0x22e>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07d8      	lsls	r0, r3, #31
 8006914:	d510      	bpl.n	8006938 <_printf_float+0x250>
 8006916:	ee18 3a10 	vmov	r3, s16
 800691a:	4652      	mov	r2, sl
 800691c:	4631      	mov	r1, r6
 800691e:	4628      	mov	r0, r5
 8006920:	47b8      	blx	r7
 8006922:	3001      	adds	r0, #1
 8006924:	f43f af41 	beq.w	80067aa <_printf_float+0xc2>
 8006928:	f04f 0800 	mov.w	r8, #0
 800692c:	f104 091a 	add.w	r9, r4, #26
 8006930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006932:	3b01      	subs	r3, #1
 8006934:	4543      	cmp	r3, r8
 8006936:	dc09      	bgt.n	800694c <_printf_float+0x264>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	079b      	lsls	r3, r3, #30
 800693c:	f100 8105 	bmi.w	8006b4a <_printf_float+0x462>
 8006940:	68e0      	ldr	r0, [r4, #12]
 8006942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006944:	4298      	cmp	r0, r3
 8006946:	bfb8      	it	lt
 8006948:	4618      	movlt	r0, r3
 800694a:	e730      	b.n	80067ae <_printf_float+0xc6>
 800694c:	2301      	movs	r3, #1
 800694e:	464a      	mov	r2, r9
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	f43f af27 	beq.w	80067aa <_printf_float+0xc2>
 800695c:	f108 0801 	add.w	r8, r8, #1
 8006960:	e7e6      	b.n	8006930 <_printf_float+0x248>
 8006962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	dc39      	bgt.n	80069dc <_printf_float+0x2f4>
 8006968:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <_printf_float+0x2f0>)
 800696a:	2301      	movs	r3, #1
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f af19 	beq.w	80067aa <_printf_float+0xc2>
 8006978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800697c:	4313      	orrs	r3, r2
 800697e:	d102      	bne.n	8006986 <_printf_float+0x29e>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07d9      	lsls	r1, r3, #31
 8006984:	d5d8      	bpl.n	8006938 <_printf_float+0x250>
 8006986:	ee18 3a10 	vmov	r3, s16
 800698a:	4652      	mov	r2, sl
 800698c:	4631      	mov	r1, r6
 800698e:	4628      	mov	r0, r5
 8006990:	47b8      	blx	r7
 8006992:	3001      	adds	r0, #1
 8006994:	f43f af09 	beq.w	80067aa <_printf_float+0xc2>
 8006998:	f04f 0900 	mov.w	r9, #0
 800699c:	f104 0a1a 	add.w	sl, r4, #26
 80069a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a2:	425b      	negs	r3, r3
 80069a4:	454b      	cmp	r3, r9
 80069a6:	dc01      	bgt.n	80069ac <_printf_float+0x2c4>
 80069a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069aa:	e792      	b.n	80068d2 <_printf_float+0x1ea>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4652      	mov	r2, sl
 80069b0:	4631      	mov	r1, r6
 80069b2:	4628      	mov	r0, r5
 80069b4:	47b8      	blx	r7
 80069b6:	3001      	adds	r0, #1
 80069b8:	f43f aef7 	beq.w	80067aa <_printf_float+0xc2>
 80069bc:	f109 0901 	add.w	r9, r9, #1
 80069c0:	e7ee      	b.n	80069a0 <_printf_float+0x2b8>
 80069c2:	bf00      	nop
 80069c4:	7fefffff 	.word	0x7fefffff
 80069c8:	0800b074 	.word	0x0800b074
 80069cc:	0800b078 	.word	0x0800b078
 80069d0:	0800b080 	.word	0x0800b080
 80069d4:	0800b07c 	.word	0x0800b07c
 80069d8:	0800b084 	.word	0x0800b084
 80069dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069e0:	429a      	cmp	r2, r3
 80069e2:	bfa8      	it	ge
 80069e4:	461a      	movge	r2, r3
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	4691      	mov	r9, r2
 80069ea:	dc37      	bgt.n	8006a5c <_printf_float+0x374>
 80069ec:	f04f 0b00 	mov.w	fp, #0
 80069f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069f4:	f104 021a 	add.w	r2, r4, #26
 80069f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069fa:	9305      	str	r3, [sp, #20]
 80069fc:	eba3 0309 	sub.w	r3, r3, r9
 8006a00:	455b      	cmp	r3, fp
 8006a02:	dc33      	bgt.n	8006a6c <_printf_float+0x384>
 8006a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	db3b      	blt.n	8006a84 <_printf_float+0x39c>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	07da      	lsls	r2, r3, #31
 8006a10:	d438      	bmi.n	8006a84 <_printf_float+0x39c>
 8006a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a14:	9a05      	ldr	r2, [sp, #20]
 8006a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a18:	1a9a      	subs	r2, r3, r2
 8006a1a:	eba3 0901 	sub.w	r9, r3, r1
 8006a1e:	4591      	cmp	r9, r2
 8006a20:	bfa8      	it	ge
 8006a22:	4691      	movge	r9, r2
 8006a24:	f1b9 0f00 	cmp.w	r9, #0
 8006a28:	dc35      	bgt.n	8006a96 <_printf_float+0x3ae>
 8006a2a:	f04f 0800 	mov.w	r8, #0
 8006a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a32:	f104 0a1a 	add.w	sl, r4, #26
 8006a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	eba3 0309 	sub.w	r3, r3, r9
 8006a40:	4543      	cmp	r3, r8
 8006a42:	f77f af79 	ble.w	8006938 <_printf_float+0x250>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4652      	mov	r2, sl
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f aeaa 	beq.w	80067aa <_printf_float+0xc2>
 8006a56:	f108 0801 	add.w	r8, r8, #1
 8006a5a:	e7ec      	b.n	8006a36 <_printf_float+0x34e>
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4642      	mov	r2, r8
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	d1c0      	bne.n	80069ec <_printf_float+0x304>
 8006a6a:	e69e      	b.n	80067aa <_printf_float+0xc2>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	9205      	str	r2, [sp, #20]
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f ae97 	beq.w	80067aa <_printf_float+0xc2>
 8006a7c:	9a05      	ldr	r2, [sp, #20]
 8006a7e:	f10b 0b01 	add.w	fp, fp, #1
 8006a82:	e7b9      	b.n	80069f8 <_printf_float+0x310>
 8006a84:	ee18 3a10 	vmov	r3, s16
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	d1be      	bne.n	8006a12 <_printf_float+0x32a>
 8006a94:	e689      	b.n	80067aa <_printf_float+0xc2>
 8006a96:	9a05      	ldr	r2, [sp, #20]
 8006a98:	464b      	mov	r3, r9
 8006a9a:	4442      	add	r2, r8
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d1c1      	bne.n	8006a2a <_printf_float+0x342>
 8006aa6:	e680      	b.n	80067aa <_printf_float+0xc2>
 8006aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aaa:	2a01      	cmp	r2, #1
 8006aac:	dc01      	bgt.n	8006ab2 <_printf_float+0x3ca>
 8006aae:	07db      	lsls	r3, r3, #31
 8006ab0:	d538      	bpl.n	8006b24 <_printf_float+0x43c>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4642      	mov	r2, r8
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	f43f ae74 	beq.w	80067aa <_printf_float+0xc2>
 8006ac2:	ee18 3a10 	vmov	r3, s16
 8006ac6:	4652      	mov	r2, sl
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f ae6b 	beq.w	80067aa <_printf_float+0xc2>
 8006ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	f7fa f804 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ae0:	b9d8      	cbnz	r0, 8006b1a <_printf_float+0x432>
 8006ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae4:	f108 0201 	add.w	r2, r8, #1
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	4631      	mov	r1, r6
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b8      	blx	r7
 8006af0:	3001      	adds	r0, #1
 8006af2:	d10e      	bne.n	8006b12 <_printf_float+0x42a>
 8006af4:	e659      	b.n	80067aa <_printf_float+0xc2>
 8006af6:	2301      	movs	r3, #1
 8006af8:	4652      	mov	r2, sl
 8006afa:	4631      	mov	r1, r6
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b8      	blx	r7
 8006b00:	3001      	adds	r0, #1
 8006b02:	f43f ae52 	beq.w	80067aa <_printf_float+0xc2>
 8006b06:	f108 0801 	add.w	r8, r8, #1
 8006b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	4543      	cmp	r3, r8
 8006b10:	dcf1      	bgt.n	8006af6 <_printf_float+0x40e>
 8006b12:	464b      	mov	r3, r9
 8006b14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b18:	e6dc      	b.n	80068d4 <_printf_float+0x1ec>
 8006b1a:	f04f 0800 	mov.w	r8, #0
 8006b1e:	f104 0a1a 	add.w	sl, r4, #26
 8006b22:	e7f2      	b.n	8006b0a <_printf_float+0x422>
 8006b24:	2301      	movs	r3, #1
 8006b26:	4642      	mov	r2, r8
 8006b28:	e7df      	b.n	8006aea <_printf_float+0x402>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	464a      	mov	r2, r9
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f ae38 	beq.w	80067aa <_printf_float+0xc2>
 8006b3a:	f108 0801 	add.w	r8, r8, #1
 8006b3e:	68e3      	ldr	r3, [r4, #12]
 8006b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b42:	1a5b      	subs	r3, r3, r1
 8006b44:	4543      	cmp	r3, r8
 8006b46:	dcf0      	bgt.n	8006b2a <_printf_float+0x442>
 8006b48:	e6fa      	b.n	8006940 <_printf_float+0x258>
 8006b4a:	f04f 0800 	mov.w	r8, #0
 8006b4e:	f104 0919 	add.w	r9, r4, #25
 8006b52:	e7f4      	b.n	8006b3e <_printf_float+0x456>

08006b54 <_printf_common>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	4616      	mov	r6, r2
 8006b5a:	4699      	mov	r9, r3
 8006b5c:	688a      	ldr	r2, [r1, #8]
 8006b5e:	690b      	ldr	r3, [r1, #16]
 8006b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	bfb8      	it	lt
 8006b68:	4613      	movlt	r3, r2
 8006b6a:	6033      	str	r3, [r6, #0]
 8006b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b70:	4607      	mov	r7, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	b10a      	cbz	r2, 8006b7a <_printf_common+0x26>
 8006b76:	3301      	adds	r3, #1
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	0699      	lsls	r1, r3, #26
 8006b7e:	bf42      	ittt	mi
 8006b80:	6833      	ldrmi	r3, [r6, #0]
 8006b82:	3302      	addmi	r3, #2
 8006b84:	6033      	strmi	r3, [r6, #0]
 8006b86:	6825      	ldr	r5, [r4, #0]
 8006b88:	f015 0506 	ands.w	r5, r5, #6
 8006b8c:	d106      	bne.n	8006b9c <_printf_common+0x48>
 8006b8e:	f104 0a19 	add.w	sl, r4, #25
 8006b92:	68e3      	ldr	r3, [r4, #12]
 8006b94:	6832      	ldr	r2, [r6, #0]
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	42ab      	cmp	r3, r5
 8006b9a:	dc26      	bgt.n	8006bea <_printf_common+0x96>
 8006b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ba0:	1e13      	subs	r3, r2, #0
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	bf18      	it	ne
 8006ba6:	2301      	movne	r3, #1
 8006ba8:	0692      	lsls	r2, r2, #26
 8006baa:	d42b      	bmi.n	8006c04 <_printf_common+0xb0>
 8006bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c0      	blx	r8
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d01e      	beq.n	8006bf8 <_printf_common+0xa4>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	68e5      	ldr	r5, [r4, #12]
 8006bbe:	6832      	ldr	r2, [r6, #0]
 8006bc0:	f003 0306 	and.w	r3, r3, #6
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	bf08      	it	eq
 8006bc8:	1aad      	subeq	r5, r5, r2
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	6922      	ldr	r2, [r4, #16]
 8006bce:	bf0c      	ite	eq
 8006bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bd4:	2500      	movne	r5, #0
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	bfc4      	itt	gt
 8006bda:	1a9b      	subgt	r3, r3, r2
 8006bdc:	18ed      	addgt	r5, r5, r3
 8006bde:	2600      	movs	r6, #0
 8006be0:	341a      	adds	r4, #26
 8006be2:	42b5      	cmp	r5, r6
 8006be4:	d11a      	bne.n	8006c1c <_printf_common+0xc8>
 8006be6:	2000      	movs	r0, #0
 8006be8:	e008      	b.n	8006bfc <_printf_common+0xa8>
 8006bea:	2301      	movs	r3, #1
 8006bec:	4652      	mov	r2, sl
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	47c0      	blx	r8
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d103      	bne.n	8006c00 <_printf_common+0xac>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c00:	3501      	adds	r5, #1
 8006c02:	e7c6      	b.n	8006b92 <_printf_common+0x3e>
 8006c04:	18e1      	adds	r1, r4, r3
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	2030      	movs	r0, #48	; 0x30
 8006c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c0e:	4422      	add	r2, r4
 8006c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c18:	3302      	adds	r3, #2
 8006c1a:	e7c7      	b.n	8006bac <_printf_common+0x58>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4649      	mov	r1, r9
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c0      	blx	r8
 8006c26:	3001      	adds	r0, #1
 8006c28:	d0e6      	beq.n	8006bf8 <_printf_common+0xa4>
 8006c2a:	3601      	adds	r6, #1
 8006c2c:	e7d9      	b.n	8006be2 <_printf_common+0x8e>
	...

08006c30 <_printf_i>:
 8006c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c34:	7e0f      	ldrb	r7, [r1, #24]
 8006c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c38:	2f78      	cmp	r7, #120	; 0x78
 8006c3a:	4691      	mov	r9, r2
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	469a      	mov	sl, r3
 8006c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c46:	d807      	bhi.n	8006c58 <_printf_i+0x28>
 8006c48:	2f62      	cmp	r7, #98	; 0x62
 8006c4a:	d80a      	bhi.n	8006c62 <_printf_i+0x32>
 8006c4c:	2f00      	cmp	r7, #0
 8006c4e:	f000 80d8 	beq.w	8006e02 <_printf_i+0x1d2>
 8006c52:	2f58      	cmp	r7, #88	; 0x58
 8006c54:	f000 80a3 	beq.w	8006d9e <_printf_i+0x16e>
 8006c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c60:	e03a      	b.n	8006cd8 <_printf_i+0xa8>
 8006c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c66:	2b15      	cmp	r3, #21
 8006c68:	d8f6      	bhi.n	8006c58 <_printf_i+0x28>
 8006c6a:	a101      	add	r1, pc, #4	; (adr r1, 8006c70 <_printf_i+0x40>)
 8006c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c70:	08006cc9 	.word	0x08006cc9
 8006c74:	08006cdd 	.word	0x08006cdd
 8006c78:	08006c59 	.word	0x08006c59
 8006c7c:	08006c59 	.word	0x08006c59
 8006c80:	08006c59 	.word	0x08006c59
 8006c84:	08006c59 	.word	0x08006c59
 8006c88:	08006cdd 	.word	0x08006cdd
 8006c8c:	08006c59 	.word	0x08006c59
 8006c90:	08006c59 	.word	0x08006c59
 8006c94:	08006c59 	.word	0x08006c59
 8006c98:	08006c59 	.word	0x08006c59
 8006c9c:	08006de9 	.word	0x08006de9
 8006ca0:	08006d0d 	.word	0x08006d0d
 8006ca4:	08006dcb 	.word	0x08006dcb
 8006ca8:	08006c59 	.word	0x08006c59
 8006cac:	08006c59 	.word	0x08006c59
 8006cb0:	08006e0b 	.word	0x08006e0b
 8006cb4:	08006c59 	.word	0x08006c59
 8006cb8:	08006d0d 	.word	0x08006d0d
 8006cbc:	08006c59 	.word	0x08006c59
 8006cc0:	08006c59 	.word	0x08006c59
 8006cc4:	08006dd3 	.word	0x08006dd3
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	1d1a      	adds	r2, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	602a      	str	r2, [r5, #0]
 8006cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0a3      	b.n	8006e24 <_printf_i+0x1f4>
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	6829      	ldr	r1, [r5, #0]
 8006ce0:	0606      	lsls	r6, r0, #24
 8006ce2:	f101 0304 	add.w	r3, r1, #4
 8006ce6:	d50a      	bpl.n	8006cfe <_printf_i+0xce>
 8006ce8:	680e      	ldr	r6, [r1, #0]
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	da03      	bge.n	8006cf8 <_printf_i+0xc8>
 8006cf0:	232d      	movs	r3, #45	; 0x2d
 8006cf2:	4276      	negs	r6, r6
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf8:	485e      	ldr	r0, [pc, #376]	; (8006e74 <_printf_i+0x244>)
 8006cfa:	230a      	movs	r3, #10
 8006cfc:	e019      	b.n	8006d32 <_printf_i+0x102>
 8006cfe:	680e      	ldr	r6, [r1, #0]
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d06:	bf18      	it	ne
 8006d08:	b236      	sxthne	r6, r6
 8006d0a:	e7ef      	b.n	8006cec <_printf_i+0xbc>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	1d19      	adds	r1, r3, #4
 8006d12:	6029      	str	r1, [r5, #0]
 8006d14:	0601      	lsls	r1, r0, #24
 8006d16:	d501      	bpl.n	8006d1c <_printf_i+0xec>
 8006d18:	681e      	ldr	r6, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <_printf_i+0xf2>
 8006d1c:	0646      	lsls	r6, r0, #25
 8006d1e:	d5fb      	bpl.n	8006d18 <_printf_i+0xe8>
 8006d20:	881e      	ldrh	r6, [r3, #0]
 8006d22:	4854      	ldr	r0, [pc, #336]	; (8006e74 <_printf_i+0x244>)
 8006d24:	2f6f      	cmp	r7, #111	; 0x6f
 8006d26:	bf0c      	ite	eq
 8006d28:	2308      	moveq	r3, #8
 8006d2a:	230a      	movne	r3, #10
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d32:	6865      	ldr	r5, [r4, #4]
 8006d34:	60a5      	str	r5, [r4, #8]
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	bfa2      	ittt	ge
 8006d3a:	6821      	ldrge	r1, [r4, #0]
 8006d3c:	f021 0104 	bicge.w	r1, r1, #4
 8006d40:	6021      	strge	r1, [r4, #0]
 8006d42:	b90e      	cbnz	r6, 8006d48 <_printf_i+0x118>
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	d04d      	beq.n	8006de4 <_printf_i+0x1b4>
 8006d48:	4615      	mov	r5, r2
 8006d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d52:	5dc7      	ldrb	r7, [r0, r7]
 8006d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d58:	4637      	mov	r7, r6
 8006d5a:	42bb      	cmp	r3, r7
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	d9f4      	bls.n	8006d4a <_printf_i+0x11a>
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d10b      	bne.n	8006d7c <_printf_i+0x14c>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	07de      	lsls	r6, r3, #31
 8006d68:	d508      	bpl.n	8006d7c <_printf_i+0x14c>
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	6861      	ldr	r1, [r4, #4]
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	bfde      	ittt	le
 8006d72:	2330      	movle	r3, #48	; 0x30
 8006d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d7c:	1b52      	subs	r2, r2, r5
 8006d7e:	6122      	str	r2, [r4, #16]
 8006d80:	f8cd a000 	str.w	sl, [sp]
 8006d84:	464b      	mov	r3, r9
 8006d86:	aa03      	add	r2, sp, #12
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f7ff fee2 	bl	8006b54 <_printf_common>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d14c      	bne.n	8006e2e <_printf_i+0x1fe>
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	b004      	add	sp, #16
 8006d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9e:	4835      	ldr	r0, [pc, #212]	; (8006e74 <_printf_i+0x244>)
 8006da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006da4:	6829      	ldr	r1, [r5, #0]
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dac:	6029      	str	r1, [r5, #0]
 8006dae:	061d      	lsls	r5, r3, #24
 8006db0:	d514      	bpl.n	8006ddc <_printf_i+0x1ac>
 8006db2:	07df      	lsls	r7, r3, #31
 8006db4:	bf44      	itt	mi
 8006db6:	f043 0320 	orrmi.w	r3, r3, #32
 8006dba:	6023      	strmi	r3, [r4, #0]
 8006dbc:	b91e      	cbnz	r6, 8006dc6 <_printf_i+0x196>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	f023 0320 	bic.w	r3, r3, #32
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	e7b0      	b.n	8006d2c <_printf_i+0xfc>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	f043 0320 	orr.w	r3, r3, #32
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	2378      	movs	r3, #120	; 0x78
 8006dd4:	4828      	ldr	r0, [pc, #160]	; (8006e78 <_printf_i+0x248>)
 8006dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dda:	e7e3      	b.n	8006da4 <_printf_i+0x174>
 8006ddc:	0659      	lsls	r1, r3, #25
 8006dde:	bf48      	it	mi
 8006de0:	b2b6      	uxthmi	r6, r6
 8006de2:	e7e6      	b.n	8006db2 <_printf_i+0x182>
 8006de4:	4615      	mov	r5, r2
 8006de6:	e7bb      	b.n	8006d60 <_printf_i+0x130>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	6826      	ldr	r6, [r4, #0]
 8006dec:	6961      	ldr	r1, [r4, #20]
 8006dee:	1d18      	adds	r0, r3, #4
 8006df0:	6028      	str	r0, [r5, #0]
 8006df2:	0635      	lsls	r5, r6, #24
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	d501      	bpl.n	8006dfc <_printf_i+0x1cc>
 8006df8:	6019      	str	r1, [r3, #0]
 8006dfa:	e002      	b.n	8006e02 <_printf_i+0x1d2>
 8006dfc:	0670      	lsls	r0, r6, #25
 8006dfe:	d5fb      	bpl.n	8006df8 <_printf_i+0x1c8>
 8006e00:	8019      	strh	r1, [r3, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	6123      	str	r3, [r4, #16]
 8006e06:	4615      	mov	r5, r2
 8006e08:	e7ba      	b.n	8006d80 <_printf_i+0x150>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	1d1a      	adds	r2, r3, #4
 8006e0e:	602a      	str	r2, [r5, #0]
 8006e10:	681d      	ldr	r5, [r3, #0]
 8006e12:	6862      	ldr	r2, [r4, #4]
 8006e14:	2100      	movs	r1, #0
 8006e16:	4628      	mov	r0, r5
 8006e18:	f7f9 f9f2 	bl	8000200 <memchr>
 8006e1c:	b108      	cbz	r0, 8006e22 <_printf_i+0x1f2>
 8006e1e:	1b40      	subs	r0, r0, r5
 8006e20:	6060      	str	r0, [r4, #4]
 8006e22:	6863      	ldr	r3, [r4, #4]
 8006e24:	6123      	str	r3, [r4, #16]
 8006e26:	2300      	movs	r3, #0
 8006e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e2c:	e7a8      	b.n	8006d80 <_printf_i+0x150>
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	462a      	mov	r2, r5
 8006e32:	4649      	mov	r1, r9
 8006e34:	4640      	mov	r0, r8
 8006e36:	47d0      	blx	sl
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d0ab      	beq.n	8006d94 <_printf_i+0x164>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	079b      	lsls	r3, r3, #30
 8006e40:	d413      	bmi.n	8006e6a <_printf_i+0x23a>
 8006e42:	68e0      	ldr	r0, [r4, #12]
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	4298      	cmp	r0, r3
 8006e48:	bfb8      	it	lt
 8006e4a:	4618      	movlt	r0, r3
 8006e4c:	e7a4      	b.n	8006d98 <_printf_i+0x168>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4632      	mov	r2, r6
 8006e52:	4649      	mov	r1, r9
 8006e54:	4640      	mov	r0, r8
 8006e56:	47d0      	blx	sl
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d09b      	beq.n	8006d94 <_printf_i+0x164>
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	68e3      	ldr	r3, [r4, #12]
 8006e60:	9903      	ldr	r1, [sp, #12]
 8006e62:	1a5b      	subs	r3, r3, r1
 8006e64:	42ab      	cmp	r3, r5
 8006e66:	dcf2      	bgt.n	8006e4e <_printf_i+0x21e>
 8006e68:	e7eb      	b.n	8006e42 <_printf_i+0x212>
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	f104 0619 	add.w	r6, r4, #25
 8006e70:	e7f5      	b.n	8006e5e <_printf_i+0x22e>
 8006e72:	bf00      	nop
 8006e74:	0800b086 	.word	0x0800b086
 8006e78:	0800b097 	.word	0x0800b097

08006e7c <_scanf_float>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	b087      	sub	sp, #28
 8006e82:	4617      	mov	r7, r2
 8006e84:	9303      	str	r3, [sp, #12]
 8006e86:	688b      	ldr	r3, [r1, #8]
 8006e88:	1e5a      	subs	r2, r3, #1
 8006e8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e8e:	bf83      	ittte	hi
 8006e90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e94:	195b      	addhi	r3, r3, r5
 8006e96:	9302      	strhi	r3, [sp, #8]
 8006e98:	2300      	movls	r3, #0
 8006e9a:	bf86      	itte	hi
 8006e9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ea0:	608b      	strhi	r3, [r1, #8]
 8006ea2:	9302      	strls	r3, [sp, #8]
 8006ea4:	680b      	ldr	r3, [r1, #0]
 8006ea6:	468b      	mov	fp, r1
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006eae:	f84b 3b1c 	str.w	r3, [fp], #28
 8006eb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006eb6:	4680      	mov	r8, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	465e      	mov	r6, fp
 8006ebc:	46aa      	mov	sl, r5
 8006ebe:	46a9      	mov	r9, r5
 8006ec0:	9501      	str	r5, [sp, #4]
 8006ec2:	68a2      	ldr	r2, [r4, #8]
 8006ec4:	b152      	cbz	r2, 8006edc <_scanf_float+0x60>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b4e      	cmp	r3, #78	; 0x4e
 8006ecc:	d864      	bhi.n	8006f98 <_scanf_float+0x11c>
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	d83c      	bhi.n	8006f4c <_scanf_float+0xd0>
 8006ed2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ed6:	b2c8      	uxtb	r0, r1
 8006ed8:	280e      	cmp	r0, #14
 8006eda:	d93a      	bls.n	8006f52 <_scanf_float+0xd6>
 8006edc:	f1b9 0f00 	cmp.w	r9, #0
 8006ee0:	d003      	beq.n	8006eea <_scanf_float+0x6e>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eee:	f1ba 0f01 	cmp.w	sl, #1
 8006ef2:	f200 8113 	bhi.w	800711c <_scanf_float+0x2a0>
 8006ef6:	455e      	cmp	r6, fp
 8006ef8:	f200 8105 	bhi.w	8007106 <_scanf_float+0x28a>
 8006efc:	2501      	movs	r5, #1
 8006efe:	4628      	mov	r0, r5
 8006f00:	b007      	add	sp, #28
 8006f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f0a:	2a0d      	cmp	r2, #13
 8006f0c:	d8e6      	bhi.n	8006edc <_scanf_float+0x60>
 8006f0e:	a101      	add	r1, pc, #4	; (adr r1, 8006f14 <_scanf_float+0x98>)
 8006f10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f14:	08007053 	.word	0x08007053
 8006f18:	08006edd 	.word	0x08006edd
 8006f1c:	08006edd 	.word	0x08006edd
 8006f20:	08006edd 	.word	0x08006edd
 8006f24:	080070b3 	.word	0x080070b3
 8006f28:	0800708b 	.word	0x0800708b
 8006f2c:	08006edd 	.word	0x08006edd
 8006f30:	08006edd 	.word	0x08006edd
 8006f34:	08007061 	.word	0x08007061
 8006f38:	08006edd 	.word	0x08006edd
 8006f3c:	08006edd 	.word	0x08006edd
 8006f40:	08006edd 	.word	0x08006edd
 8006f44:	08006edd 	.word	0x08006edd
 8006f48:	08007019 	.word	0x08007019
 8006f4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f50:	e7db      	b.n	8006f0a <_scanf_float+0x8e>
 8006f52:	290e      	cmp	r1, #14
 8006f54:	d8c2      	bhi.n	8006edc <_scanf_float+0x60>
 8006f56:	a001      	add	r0, pc, #4	; (adr r0, 8006f5c <_scanf_float+0xe0>)
 8006f58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f5c:	0800700b 	.word	0x0800700b
 8006f60:	08006edd 	.word	0x08006edd
 8006f64:	0800700b 	.word	0x0800700b
 8006f68:	0800709f 	.word	0x0800709f
 8006f6c:	08006edd 	.word	0x08006edd
 8006f70:	08006fb9 	.word	0x08006fb9
 8006f74:	08006ff5 	.word	0x08006ff5
 8006f78:	08006ff5 	.word	0x08006ff5
 8006f7c:	08006ff5 	.word	0x08006ff5
 8006f80:	08006ff5 	.word	0x08006ff5
 8006f84:	08006ff5 	.word	0x08006ff5
 8006f88:	08006ff5 	.word	0x08006ff5
 8006f8c:	08006ff5 	.word	0x08006ff5
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08006ff5 	.word	0x08006ff5
 8006f98:	2b6e      	cmp	r3, #110	; 0x6e
 8006f9a:	d809      	bhi.n	8006fb0 <_scanf_float+0x134>
 8006f9c:	2b60      	cmp	r3, #96	; 0x60
 8006f9e:	d8b2      	bhi.n	8006f06 <_scanf_float+0x8a>
 8006fa0:	2b54      	cmp	r3, #84	; 0x54
 8006fa2:	d077      	beq.n	8007094 <_scanf_float+0x218>
 8006fa4:	2b59      	cmp	r3, #89	; 0x59
 8006fa6:	d199      	bne.n	8006edc <_scanf_float+0x60>
 8006fa8:	2d07      	cmp	r5, #7
 8006faa:	d197      	bne.n	8006edc <_scanf_float+0x60>
 8006fac:	2508      	movs	r5, #8
 8006fae:	e029      	b.n	8007004 <_scanf_float+0x188>
 8006fb0:	2b74      	cmp	r3, #116	; 0x74
 8006fb2:	d06f      	beq.n	8007094 <_scanf_float+0x218>
 8006fb4:	2b79      	cmp	r3, #121	; 0x79
 8006fb6:	e7f6      	b.n	8006fa6 <_scanf_float+0x12a>
 8006fb8:	6821      	ldr	r1, [r4, #0]
 8006fba:	05c8      	lsls	r0, r1, #23
 8006fbc:	d51a      	bpl.n	8006ff4 <_scanf_float+0x178>
 8006fbe:	9b02      	ldr	r3, [sp, #8]
 8006fc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fc4:	6021      	str	r1, [r4, #0]
 8006fc6:	f109 0901 	add.w	r9, r9, #1
 8006fca:	b11b      	cbz	r3, 8006fd4 <_scanf_float+0x158>
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	3201      	adds	r2, #1
 8006fd0:	9302      	str	r3, [sp, #8]
 8006fd2:	60a2      	str	r2, [r4, #8]
 8006fd4:	68a3      	ldr	r3, [r4, #8]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	60a3      	str	r3, [r4, #8]
 8006fda:	6923      	ldr	r3, [r4, #16]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	6123      	str	r3, [r4, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	607b      	str	r3, [r7, #4]
 8006fe8:	f340 8084 	ble.w	80070f4 <_scanf_float+0x278>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	603b      	str	r3, [r7, #0]
 8006ff2:	e766      	b.n	8006ec2 <_scanf_float+0x46>
 8006ff4:	eb1a 0f05 	cmn.w	sl, r5
 8006ff8:	f47f af70 	bne.w	8006edc <_scanf_float+0x60>
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007002:	6022      	str	r2, [r4, #0]
 8007004:	f806 3b01 	strb.w	r3, [r6], #1
 8007008:	e7e4      	b.n	8006fd4 <_scanf_float+0x158>
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	0610      	lsls	r0, r2, #24
 800700e:	f57f af65 	bpl.w	8006edc <_scanf_float+0x60>
 8007012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007016:	e7f4      	b.n	8007002 <_scanf_float+0x186>
 8007018:	f1ba 0f00 	cmp.w	sl, #0
 800701c:	d10e      	bne.n	800703c <_scanf_float+0x1c0>
 800701e:	f1b9 0f00 	cmp.w	r9, #0
 8007022:	d10e      	bne.n	8007042 <_scanf_float+0x1c6>
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800702a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800702e:	d108      	bne.n	8007042 <_scanf_float+0x1c6>
 8007030:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007034:	6022      	str	r2, [r4, #0]
 8007036:	f04f 0a01 	mov.w	sl, #1
 800703a:	e7e3      	b.n	8007004 <_scanf_float+0x188>
 800703c:	f1ba 0f02 	cmp.w	sl, #2
 8007040:	d055      	beq.n	80070ee <_scanf_float+0x272>
 8007042:	2d01      	cmp	r5, #1
 8007044:	d002      	beq.n	800704c <_scanf_float+0x1d0>
 8007046:	2d04      	cmp	r5, #4
 8007048:	f47f af48 	bne.w	8006edc <_scanf_float+0x60>
 800704c:	3501      	adds	r5, #1
 800704e:	b2ed      	uxtb	r5, r5
 8007050:	e7d8      	b.n	8007004 <_scanf_float+0x188>
 8007052:	f1ba 0f01 	cmp.w	sl, #1
 8007056:	f47f af41 	bne.w	8006edc <_scanf_float+0x60>
 800705a:	f04f 0a02 	mov.w	sl, #2
 800705e:	e7d1      	b.n	8007004 <_scanf_float+0x188>
 8007060:	b97d      	cbnz	r5, 8007082 <_scanf_float+0x206>
 8007062:	f1b9 0f00 	cmp.w	r9, #0
 8007066:	f47f af3c 	bne.w	8006ee2 <_scanf_float+0x66>
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007070:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007074:	f47f af39 	bne.w	8006eea <_scanf_float+0x6e>
 8007078:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800707c:	6022      	str	r2, [r4, #0]
 800707e:	2501      	movs	r5, #1
 8007080:	e7c0      	b.n	8007004 <_scanf_float+0x188>
 8007082:	2d03      	cmp	r5, #3
 8007084:	d0e2      	beq.n	800704c <_scanf_float+0x1d0>
 8007086:	2d05      	cmp	r5, #5
 8007088:	e7de      	b.n	8007048 <_scanf_float+0x1cc>
 800708a:	2d02      	cmp	r5, #2
 800708c:	f47f af26 	bne.w	8006edc <_scanf_float+0x60>
 8007090:	2503      	movs	r5, #3
 8007092:	e7b7      	b.n	8007004 <_scanf_float+0x188>
 8007094:	2d06      	cmp	r5, #6
 8007096:	f47f af21 	bne.w	8006edc <_scanf_float+0x60>
 800709a:	2507      	movs	r5, #7
 800709c:	e7b2      	b.n	8007004 <_scanf_float+0x188>
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	0591      	lsls	r1, r2, #22
 80070a2:	f57f af1b 	bpl.w	8006edc <_scanf_float+0x60>
 80070a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070aa:	6022      	str	r2, [r4, #0]
 80070ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80070b0:	e7a8      	b.n	8007004 <_scanf_float+0x188>
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070bc:	d006      	beq.n	80070cc <_scanf_float+0x250>
 80070be:	0550      	lsls	r0, r2, #21
 80070c0:	f57f af0c 	bpl.w	8006edc <_scanf_float+0x60>
 80070c4:	f1b9 0f00 	cmp.w	r9, #0
 80070c8:	f43f af0f 	beq.w	8006eea <_scanf_float+0x6e>
 80070cc:	0591      	lsls	r1, r2, #22
 80070ce:	bf58      	it	pl
 80070d0:	9901      	ldrpl	r1, [sp, #4]
 80070d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070d6:	bf58      	it	pl
 80070d8:	eba9 0101 	subpl.w	r1, r9, r1
 80070dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80070e0:	bf58      	it	pl
 80070e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070e6:	6022      	str	r2, [r4, #0]
 80070e8:	f04f 0900 	mov.w	r9, #0
 80070ec:	e78a      	b.n	8007004 <_scanf_float+0x188>
 80070ee:	f04f 0a03 	mov.w	sl, #3
 80070f2:	e787      	b.n	8007004 <_scanf_float+0x188>
 80070f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070f8:	4639      	mov	r1, r7
 80070fa:	4640      	mov	r0, r8
 80070fc:	4798      	blx	r3
 80070fe:	2800      	cmp	r0, #0
 8007100:	f43f aedf 	beq.w	8006ec2 <_scanf_float+0x46>
 8007104:	e6ea      	b.n	8006edc <_scanf_float+0x60>
 8007106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800710a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800710e:	463a      	mov	r2, r7
 8007110:	4640      	mov	r0, r8
 8007112:	4798      	blx	r3
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	3b01      	subs	r3, #1
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	e6ec      	b.n	8006ef6 <_scanf_float+0x7a>
 800711c:	1e6b      	subs	r3, r5, #1
 800711e:	2b06      	cmp	r3, #6
 8007120:	d825      	bhi.n	800716e <_scanf_float+0x2f2>
 8007122:	2d02      	cmp	r5, #2
 8007124:	d836      	bhi.n	8007194 <_scanf_float+0x318>
 8007126:	455e      	cmp	r6, fp
 8007128:	f67f aee8 	bls.w	8006efc <_scanf_float+0x80>
 800712c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007130:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007134:	463a      	mov	r2, r7
 8007136:	4640      	mov	r0, r8
 8007138:	4798      	blx	r3
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	3b01      	subs	r3, #1
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	e7f1      	b.n	8007126 <_scanf_float+0x2aa>
 8007142:	9802      	ldr	r0, [sp, #8]
 8007144:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007148:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800714c:	9002      	str	r0, [sp, #8]
 800714e:	463a      	mov	r2, r7
 8007150:	4640      	mov	r0, r8
 8007152:	4798      	blx	r3
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	3b01      	subs	r3, #1
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800715e:	fa5f fa8a 	uxtb.w	sl, sl
 8007162:	f1ba 0f02 	cmp.w	sl, #2
 8007166:	d1ec      	bne.n	8007142 <_scanf_float+0x2c6>
 8007168:	3d03      	subs	r5, #3
 800716a:	b2ed      	uxtb	r5, r5
 800716c:	1b76      	subs	r6, r6, r5
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	05da      	lsls	r2, r3, #23
 8007172:	d52f      	bpl.n	80071d4 <_scanf_float+0x358>
 8007174:	055b      	lsls	r3, r3, #21
 8007176:	d510      	bpl.n	800719a <_scanf_float+0x31e>
 8007178:	455e      	cmp	r6, fp
 800717a:	f67f aebf 	bls.w	8006efc <_scanf_float+0x80>
 800717e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007182:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007186:	463a      	mov	r2, r7
 8007188:	4640      	mov	r0, r8
 800718a:	4798      	blx	r3
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	3b01      	subs	r3, #1
 8007190:	6123      	str	r3, [r4, #16]
 8007192:	e7f1      	b.n	8007178 <_scanf_float+0x2fc>
 8007194:	46aa      	mov	sl, r5
 8007196:	9602      	str	r6, [sp, #8]
 8007198:	e7df      	b.n	800715a <_scanf_float+0x2de>
 800719a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	2965      	cmp	r1, #101	; 0x65
 80071a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80071a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	d00c      	beq.n	80071c8 <_scanf_float+0x34c>
 80071ae:	2945      	cmp	r1, #69	; 0x45
 80071b0:	d00a      	beq.n	80071c8 <_scanf_float+0x34c>
 80071b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071b6:	463a      	mov	r2, r7
 80071b8:	4640      	mov	r0, r8
 80071ba:	4798      	blx	r3
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	1eb5      	subs	r5, r6, #2
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071cc:	463a      	mov	r2, r7
 80071ce:	4640      	mov	r0, r8
 80071d0:	4798      	blx	r3
 80071d2:	462e      	mov	r6, r5
 80071d4:	6825      	ldr	r5, [r4, #0]
 80071d6:	f015 0510 	ands.w	r5, r5, #16
 80071da:	d159      	bne.n	8007290 <_scanf_float+0x414>
 80071dc:	7035      	strb	r5, [r6, #0]
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e8:	d11b      	bne.n	8007222 <_scanf_float+0x3a6>
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	454b      	cmp	r3, r9
 80071ee:	eba3 0209 	sub.w	r2, r3, r9
 80071f2:	d123      	bne.n	800723c <_scanf_float+0x3c0>
 80071f4:	2200      	movs	r2, #0
 80071f6:	4659      	mov	r1, fp
 80071f8:	4640      	mov	r0, r8
 80071fa:	f000 ff27 	bl	800804c <_strtod_r>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	f012 0f02 	tst.w	r2, #2
 8007206:	ec57 6b10 	vmov	r6, r7, d0
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	d021      	beq.n	8007252 <_scanf_float+0x3d6>
 800720e:	9903      	ldr	r1, [sp, #12]
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	600a      	str	r2, [r1, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	e9c3 6700 	strd	r6, r7, [r3]
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	3301      	adds	r3, #1
 800721e:	60e3      	str	r3, [r4, #12]
 8007220:	e66d      	b.n	8006efe <_scanf_float+0x82>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0e5      	beq.n	80071f4 <_scanf_float+0x378>
 8007228:	9905      	ldr	r1, [sp, #20]
 800722a:	230a      	movs	r3, #10
 800722c:	462a      	mov	r2, r5
 800722e:	3101      	adds	r1, #1
 8007230:	4640      	mov	r0, r8
 8007232:	f000 ff93 	bl	800815c <_strtol_r>
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	9e05      	ldr	r6, [sp, #20]
 800723a:	1ac2      	subs	r2, r0, r3
 800723c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007240:	429e      	cmp	r6, r3
 8007242:	bf28      	it	cs
 8007244:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007248:	4912      	ldr	r1, [pc, #72]	; (8007294 <_scanf_float+0x418>)
 800724a:	4630      	mov	r0, r6
 800724c:	f000 f8ba 	bl	80073c4 <siprintf>
 8007250:	e7d0      	b.n	80071f4 <_scanf_float+0x378>
 8007252:	9903      	ldr	r1, [sp, #12]
 8007254:	f012 0f04 	tst.w	r2, #4
 8007258:	f103 0204 	add.w	r2, r3, #4
 800725c:	600a      	str	r2, [r1, #0]
 800725e:	d1d9      	bne.n	8007214 <_scanf_float+0x398>
 8007260:	f8d3 8000 	ldr.w	r8, [r3]
 8007264:	ee10 2a10 	vmov	r2, s0
 8007268:	ee10 0a10 	vmov	r0, s0
 800726c:	463b      	mov	r3, r7
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 fc6c 	bl	8000b4c <__aeabi_dcmpun>
 8007274:	b128      	cbz	r0, 8007282 <_scanf_float+0x406>
 8007276:	4808      	ldr	r0, [pc, #32]	; (8007298 <_scanf_float+0x41c>)
 8007278:	f000 f89e 	bl	80073b8 <nanf>
 800727c:	ed88 0a00 	vstr	s0, [r8]
 8007280:	e7cb      	b.n	800721a <_scanf_float+0x39e>
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f9 fcbf 	bl	8000c08 <__aeabi_d2f>
 800728a:	f8c8 0000 	str.w	r0, [r8]
 800728e:	e7c4      	b.n	800721a <_scanf_float+0x39e>
 8007290:	2500      	movs	r5, #0
 8007292:	e634      	b.n	8006efe <_scanf_float+0x82>
 8007294:	0800b0a8 	.word	0x0800b0a8
 8007298:	0800b518 	.word	0x0800b518

0800729c <iprintf>:
 800729c:	b40f      	push	{r0, r1, r2, r3}
 800729e:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <iprintf+0x2c>)
 80072a0:	b513      	push	{r0, r1, r4, lr}
 80072a2:	681c      	ldr	r4, [r3, #0]
 80072a4:	b124      	cbz	r4, 80072b0 <iprintf+0x14>
 80072a6:	69a3      	ldr	r3, [r4, #24]
 80072a8:	b913      	cbnz	r3, 80072b0 <iprintf+0x14>
 80072aa:	4620      	mov	r0, r4
 80072ac:	f001 ffac 	bl	8009208 <__sinit>
 80072b0:	ab05      	add	r3, sp, #20
 80072b2:	9a04      	ldr	r2, [sp, #16]
 80072b4:	68a1      	ldr	r1, [r4, #8]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	4620      	mov	r0, r4
 80072ba:	f003 fb83 	bl	800a9c4 <_vfiprintf_r>
 80072be:	b002      	add	sp, #8
 80072c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c4:	b004      	add	sp, #16
 80072c6:	4770      	bx	lr
 80072c8:	2000000c 	.word	0x2000000c

080072cc <_puts_r>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	460e      	mov	r6, r1
 80072d0:	4605      	mov	r5, r0
 80072d2:	b118      	cbz	r0, 80072dc <_puts_r+0x10>
 80072d4:	6983      	ldr	r3, [r0, #24]
 80072d6:	b90b      	cbnz	r3, 80072dc <_puts_r+0x10>
 80072d8:	f001 ff96 	bl	8009208 <__sinit>
 80072dc:	69ab      	ldr	r3, [r5, #24]
 80072de:	68ac      	ldr	r4, [r5, #8]
 80072e0:	b913      	cbnz	r3, 80072e8 <_puts_r+0x1c>
 80072e2:	4628      	mov	r0, r5
 80072e4:	f001 ff90 	bl	8009208 <__sinit>
 80072e8:	4b2c      	ldr	r3, [pc, #176]	; (800739c <_puts_r+0xd0>)
 80072ea:	429c      	cmp	r4, r3
 80072ec:	d120      	bne.n	8007330 <_puts_r+0x64>
 80072ee:	686c      	ldr	r4, [r5, #4]
 80072f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072f2:	07db      	lsls	r3, r3, #31
 80072f4:	d405      	bmi.n	8007302 <_puts_r+0x36>
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	0598      	lsls	r0, r3, #22
 80072fa:	d402      	bmi.n	8007302 <_puts_r+0x36>
 80072fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072fe:	f002 fb94 	bl	8009a2a <__retarget_lock_acquire_recursive>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	0719      	lsls	r1, r3, #28
 8007306:	d51d      	bpl.n	8007344 <_puts_r+0x78>
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	b1db      	cbz	r3, 8007344 <_puts_r+0x78>
 800730c:	3e01      	subs	r6, #1
 800730e:	68a3      	ldr	r3, [r4, #8]
 8007310:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007314:	3b01      	subs	r3, #1
 8007316:	60a3      	str	r3, [r4, #8]
 8007318:	bb39      	cbnz	r1, 800736a <_puts_r+0x9e>
 800731a:	2b00      	cmp	r3, #0
 800731c:	da38      	bge.n	8007390 <_puts_r+0xc4>
 800731e:	4622      	mov	r2, r4
 8007320:	210a      	movs	r1, #10
 8007322:	4628      	mov	r0, r5
 8007324:	f000 ff1c 	bl	8008160 <__swbuf_r>
 8007328:	3001      	adds	r0, #1
 800732a:	d011      	beq.n	8007350 <_puts_r+0x84>
 800732c:	250a      	movs	r5, #10
 800732e:	e011      	b.n	8007354 <_puts_r+0x88>
 8007330:	4b1b      	ldr	r3, [pc, #108]	; (80073a0 <_puts_r+0xd4>)
 8007332:	429c      	cmp	r4, r3
 8007334:	d101      	bne.n	800733a <_puts_r+0x6e>
 8007336:	68ac      	ldr	r4, [r5, #8]
 8007338:	e7da      	b.n	80072f0 <_puts_r+0x24>
 800733a:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <_puts_r+0xd8>)
 800733c:	429c      	cmp	r4, r3
 800733e:	bf08      	it	eq
 8007340:	68ec      	ldreq	r4, [r5, #12]
 8007342:	e7d5      	b.n	80072f0 <_puts_r+0x24>
 8007344:	4621      	mov	r1, r4
 8007346:	4628      	mov	r0, r5
 8007348:	f000 ff5c 	bl	8008204 <__swsetup_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	d0dd      	beq.n	800730c <_puts_r+0x40>
 8007350:	f04f 35ff 	mov.w	r5, #4294967295
 8007354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007356:	07da      	lsls	r2, r3, #31
 8007358:	d405      	bmi.n	8007366 <_puts_r+0x9a>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	059b      	lsls	r3, r3, #22
 800735e:	d402      	bmi.n	8007366 <_puts_r+0x9a>
 8007360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007362:	f002 fb63 	bl	8009a2c <__retarget_lock_release_recursive>
 8007366:	4628      	mov	r0, r5
 8007368:	bd70      	pop	{r4, r5, r6, pc}
 800736a:	2b00      	cmp	r3, #0
 800736c:	da04      	bge.n	8007378 <_puts_r+0xac>
 800736e:	69a2      	ldr	r2, [r4, #24]
 8007370:	429a      	cmp	r2, r3
 8007372:	dc06      	bgt.n	8007382 <_puts_r+0xb6>
 8007374:	290a      	cmp	r1, #10
 8007376:	d004      	beq.n	8007382 <_puts_r+0xb6>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	6022      	str	r2, [r4, #0]
 800737e:	7019      	strb	r1, [r3, #0]
 8007380:	e7c5      	b.n	800730e <_puts_r+0x42>
 8007382:	4622      	mov	r2, r4
 8007384:	4628      	mov	r0, r5
 8007386:	f000 feeb 	bl	8008160 <__swbuf_r>
 800738a:	3001      	adds	r0, #1
 800738c:	d1bf      	bne.n	800730e <_puts_r+0x42>
 800738e:	e7df      	b.n	8007350 <_puts_r+0x84>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	250a      	movs	r5, #10
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	6022      	str	r2, [r4, #0]
 8007398:	701d      	strb	r5, [r3, #0]
 800739a:	e7db      	b.n	8007354 <_puts_r+0x88>
 800739c:	0800b2b4 	.word	0x0800b2b4
 80073a0:	0800b2d4 	.word	0x0800b2d4
 80073a4:	0800b294 	.word	0x0800b294

080073a8 <puts>:
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <puts+0xc>)
 80073aa:	4601      	mov	r1, r0
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f7ff bf8d 	b.w	80072cc <_puts_r>
 80073b2:	bf00      	nop
 80073b4:	2000000c 	.word	0x2000000c

080073b8 <nanf>:
 80073b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80073c0 <nanf+0x8>
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	7fc00000 	.word	0x7fc00000

080073c4 <siprintf>:
 80073c4:	b40e      	push	{r1, r2, r3}
 80073c6:	b500      	push	{lr}
 80073c8:	b09c      	sub	sp, #112	; 0x70
 80073ca:	ab1d      	add	r3, sp, #116	; 0x74
 80073cc:	9002      	str	r0, [sp, #8]
 80073ce:	9006      	str	r0, [sp, #24]
 80073d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073d4:	4809      	ldr	r0, [pc, #36]	; (80073fc <siprintf+0x38>)
 80073d6:	9107      	str	r1, [sp, #28]
 80073d8:	9104      	str	r1, [sp, #16]
 80073da:	4909      	ldr	r1, [pc, #36]	; (8007400 <siprintf+0x3c>)
 80073dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e0:	9105      	str	r1, [sp, #20]
 80073e2:	6800      	ldr	r0, [r0, #0]
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	a902      	add	r1, sp, #8
 80073e8:	f003 f9c2 	bl	800a770 <_svfiprintf_r>
 80073ec:	9b02      	ldr	r3, [sp, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	b01c      	add	sp, #112	; 0x70
 80073f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f8:	b003      	add	sp, #12
 80073fa:	4770      	bx	lr
 80073fc:	2000000c 	.word	0x2000000c
 8007400:	ffff0208 	.word	0xffff0208

08007404 <sulp>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
 800740a:	ec45 4b10 	vmov	d0, r4, r5
 800740e:	4616      	mov	r6, r2
 8007410:	f002 ff0c 	bl	800a22c <__ulp>
 8007414:	ec51 0b10 	vmov	r0, r1, d0
 8007418:	b17e      	cbz	r6, 800743a <sulp+0x36>
 800741a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800741e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007422:	2b00      	cmp	r3, #0
 8007424:	dd09      	ble.n	800743a <sulp+0x36>
 8007426:	051b      	lsls	r3, r3, #20
 8007428:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800742c:	2400      	movs	r4, #0
 800742e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	f7f9 f8ef 	bl	8000618 <__aeabi_dmul>
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	0000      	movs	r0, r0
	...

08007440 <_strtod_l>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	ed2d 8b02 	vpush	{d8}
 8007448:	b09d      	sub	sp, #116	; 0x74
 800744a:	461f      	mov	r7, r3
 800744c:	2300      	movs	r3, #0
 800744e:	9318      	str	r3, [sp, #96]	; 0x60
 8007450:	4ba2      	ldr	r3, [pc, #648]	; (80076dc <_strtod_l+0x29c>)
 8007452:	9213      	str	r2, [sp, #76]	; 0x4c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9305      	str	r3, [sp, #20]
 8007458:	4604      	mov	r4, r0
 800745a:	4618      	mov	r0, r3
 800745c:	4688      	mov	r8, r1
 800745e:	f7f8 fec7 	bl	80001f0 <strlen>
 8007462:	f04f 0a00 	mov.w	sl, #0
 8007466:	4605      	mov	r5, r0
 8007468:	f04f 0b00 	mov.w	fp, #0
 800746c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	2a2b      	cmp	r2, #43	; 0x2b
 8007476:	d04e      	beq.n	8007516 <_strtod_l+0xd6>
 8007478:	d83b      	bhi.n	80074f2 <_strtod_l+0xb2>
 800747a:	2a0d      	cmp	r2, #13
 800747c:	d834      	bhi.n	80074e8 <_strtod_l+0xa8>
 800747e:	2a08      	cmp	r2, #8
 8007480:	d834      	bhi.n	80074ec <_strtod_l+0xac>
 8007482:	2a00      	cmp	r2, #0
 8007484:	d03e      	beq.n	8007504 <_strtod_l+0xc4>
 8007486:	2300      	movs	r3, #0
 8007488:	930a      	str	r3, [sp, #40]	; 0x28
 800748a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800748c:	7833      	ldrb	r3, [r6, #0]
 800748e:	2b30      	cmp	r3, #48	; 0x30
 8007490:	f040 80b0 	bne.w	80075f4 <_strtod_l+0x1b4>
 8007494:	7873      	ldrb	r3, [r6, #1]
 8007496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800749a:	2b58      	cmp	r3, #88	; 0x58
 800749c:	d168      	bne.n	8007570 <_strtod_l+0x130>
 800749e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	ab18      	add	r3, sp, #96	; 0x60
 80074a4:	9702      	str	r7, [sp, #8]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	4a8d      	ldr	r2, [pc, #564]	; (80076e0 <_strtod_l+0x2a0>)
 80074aa:	ab19      	add	r3, sp, #100	; 0x64
 80074ac:	a917      	add	r1, sp, #92	; 0x5c
 80074ae:	4620      	mov	r0, r4
 80074b0:	f001 ffae 	bl	8009410 <__gethex>
 80074b4:	f010 0707 	ands.w	r7, r0, #7
 80074b8:	4605      	mov	r5, r0
 80074ba:	d005      	beq.n	80074c8 <_strtod_l+0x88>
 80074bc:	2f06      	cmp	r7, #6
 80074be:	d12c      	bne.n	800751a <_strtod_l+0xda>
 80074c0:	3601      	adds	r6, #1
 80074c2:	2300      	movs	r3, #0
 80074c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80074c6:	930a      	str	r3, [sp, #40]	; 0x28
 80074c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f040 8590 	bne.w	8007ff0 <_strtod_l+0xbb0>
 80074d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d2:	b1eb      	cbz	r3, 8007510 <_strtod_l+0xd0>
 80074d4:	4652      	mov	r2, sl
 80074d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074da:	ec43 2b10 	vmov	d0, r2, r3
 80074de:	b01d      	add	sp, #116	; 0x74
 80074e0:	ecbd 8b02 	vpop	{d8}
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	2a20      	cmp	r2, #32
 80074ea:	d1cc      	bne.n	8007486 <_strtod_l+0x46>
 80074ec:	3301      	adds	r3, #1
 80074ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80074f0:	e7be      	b.n	8007470 <_strtod_l+0x30>
 80074f2:	2a2d      	cmp	r2, #45	; 0x2d
 80074f4:	d1c7      	bne.n	8007486 <_strtod_l+0x46>
 80074f6:	2201      	movs	r2, #1
 80074f8:	920a      	str	r2, [sp, #40]	; 0x28
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1c2      	bne.n	800748a <_strtod_l+0x4a>
 8007504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007506:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 856e 	bne.w	8007fec <_strtod_l+0xbac>
 8007510:	4652      	mov	r2, sl
 8007512:	465b      	mov	r3, fp
 8007514:	e7e1      	b.n	80074da <_strtod_l+0x9a>
 8007516:	2200      	movs	r2, #0
 8007518:	e7ee      	b.n	80074f8 <_strtod_l+0xb8>
 800751a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800751c:	b13a      	cbz	r2, 800752e <_strtod_l+0xee>
 800751e:	2135      	movs	r1, #53	; 0x35
 8007520:	a81a      	add	r0, sp, #104	; 0x68
 8007522:	f002 ff8e 	bl	800a442 <__copybits>
 8007526:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007528:	4620      	mov	r0, r4
 800752a:	f002 fb4d 	bl	8009bc8 <_Bfree>
 800752e:	3f01      	subs	r7, #1
 8007530:	2f04      	cmp	r7, #4
 8007532:	d806      	bhi.n	8007542 <_strtod_l+0x102>
 8007534:	e8df f007 	tbb	[pc, r7]
 8007538:	1714030a 	.word	0x1714030a
 800753c:	0a          	.byte	0x0a
 800753d:	00          	.byte	0x00
 800753e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007542:	0728      	lsls	r0, r5, #28
 8007544:	d5c0      	bpl.n	80074c8 <_strtod_l+0x88>
 8007546:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800754a:	e7bd      	b.n	80074c8 <_strtod_l+0x88>
 800754c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007550:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007552:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007556:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800755a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800755e:	e7f0      	b.n	8007542 <_strtod_l+0x102>
 8007560:	f8df b180 	ldr.w	fp, [pc, #384]	; 80076e4 <_strtod_l+0x2a4>
 8007564:	e7ed      	b.n	8007542 <_strtod_l+0x102>
 8007566:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800756a:	f04f 3aff 	mov.w	sl, #4294967295
 800756e:	e7e8      	b.n	8007542 <_strtod_l+0x102>
 8007570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	9217      	str	r2, [sp, #92]	; 0x5c
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b30      	cmp	r3, #48	; 0x30
 800757a:	d0f9      	beq.n	8007570 <_strtod_l+0x130>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0a3      	beq.n	80074c8 <_strtod_l+0x88>
 8007580:	2301      	movs	r3, #1
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800758a:	9308      	str	r3, [sp, #32]
 800758c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007590:	464f      	mov	r7, r9
 8007592:	220a      	movs	r2, #10
 8007594:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007596:	7806      	ldrb	r6, [r0, #0]
 8007598:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800759c:	b2d9      	uxtb	r1, r3
 800759e:	2909      	cmp	r1, #9
 80075a0:	d92a      	bls.n	80075f8 <_strtod_l+0x1b8>
 80075a2:	9905      	ldr	r1, [sp, #20]
 80075a4:	462a      	mov	r2, r5
 80075a6:	f003 fb9a 	bl	800acde <strncmp>
 80075aa:	b398      	cbz	r0, 8007614 <_strtod_l+0x1d4>
 80075ac:	2000      	movs	r0, #0
 80075ae:	4632      	mov	r2, r6
 80075b0:	463d      	mov	r5, r7
 80075b2:	9005      	str	r0, [sp, #20]
 80075b4:	4603      	mov	r3, r0
 80075b6:	2a65      	cmp	r2, #101	; 0x65
 80075b8:	d001      	beq.n	80075be <_strtod_l+0x17e>
 80075ba:	2a45      	cmp	r2, #69	; 0x45
 80075bc:	d118      	bne.n	80075f0 <_strtod_l+0x1b0>
 80075be:	b91d      	cbnz	r5, 80075c8 <_strtod_l+0x188>
 80075c0:	9a04      	ldr	r2, [sp, #16]
 80075c2:	4302      	orrs	r2, r0
 80075c4:	d09e      	beq.n	8007504 <_strtod_l+0xc4>
 80075c6:	2500      	movs	r5, #0
 80075c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80075cc:	f108 0201 	add.w	r2, r8, #1
 80075d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80075d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80075d6:	2a2b      	cmp	r2, #43	; 0x2b
 80075d8:	d075      	beq.n	80076c6 <_strtod_l+0x286>
 80075da:	2a2d      	cmp	r2, #45	; 0x2d
 80075dc:	d07b      	beq.n	80076d6 <_strtod_l+0x296>
 80075de:	f04f 0c00 	mov.w	ip, #0
 80075e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80075e6:	2909      	cmp	r1, #9
 80075e8:	f240 8082 	bls.w	80076f0 <_strtod_l+0x2b0>
 80075ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80075f0:	2600      	movs	r6, #0
 80075f2:	e09d      	b.n	8007730 <_strtod_l+0x2f0>
 80075f4:	2300      	movs	r3, #0
 80075f6:	e7c4      	b.n	8007582 <_strtod_l+0x142>
 80075f8:	2f08      	cmp	r7, #8
 80075fa:	bfd8      	it	le
 80075fc:	9907      	ldrle	r1, [sp, #28]
 80075fe:	f100 0001 	add.w	r0, r0, #1
 8007602:	bfda      	itte	le
 8007604:	fb02 3301 	mlale	r3, r2, r1, r3
 8007608:	9307      	strle	r3, [sp, #28]
 800760a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800760e:	3701      	adds	r7, #1
 8007610:	9017      	str	r0, [sp, #92]	; 0x5c
 8007612:	e7bf      	b.n	8007594 <_strtod_l+0x154>
 8007614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007616:	195a      	adds	r2, r3, r5
 8007618:	9217      	str	r2, [sp, #92]	; 0x5c
 800761a:	5d5a      	ldrb	r2, [r3, r5]
 800761c:	2f00      	cmp	r7, #0
 800761e:	d037      	beq.n	8007690 <_strtod_l+0x250>
 8007620:	9005      	str	r0, [sp, #20]
 8007622:	463d      	mov	r5, r7
 8007624:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007628:	2b09      	cmp	r3, #9
 800762a:	d912      	bls.n	8007652 <_strtod_l+0x212>
 800762c:	2301      	movs	r3, #1
 800762e:	e7c2      	b.n	80075b6 <_strtod_l+0x176>
 8007630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	9217      	str	r2, [sp, #92]	; 0x5c
 8007636:	785a      	ldrb	r2, [r3, #1]
 8007638:	3001      	adds	r0, #1
 800763a:	2a30      	cmp	r2, #48	; 0x30
 800763c:	d0f8      	beq.n	8007630 <_strtod_l+0x1f0>
 800763e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007642:	2b08      	cmp	r3, #8
 8007644:	f200 84d9 	bhi.w	8007ffa <_strtod_l+0xbba>
 8007648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800764a:	9005      	str	r0, [sp, #20]
 800764c:	2000      	movs	r0, #0
 800764e:	9308      	str	r3, [sp, #32]
 8007650:	4605      	mov	r5, r0
 8007652:	3a30      	subs	r2, #48	; 0x30
 8007654:	f100 0301 	add.w	r3, r0, #1
 8007658:	d014      	beq.n	8007684 <_strtod_l+0x244>
 800765a:	9905      	ldr	r1, [sp, #20]
 800765c:	4419      	add	r1, r3
 800765e:	9105      	str	r1, [sp, #20]
 8007660:	462b      	mov	r3, r5
 8007662:	eb00 0e05 	add.w	lr, r0, r5
 8007666:	210a      	movs	r1, #10
 8007668:	4573      	cmp	r3, lr
 800766a:	d113      	bne.n	8007694 <_strtod_l+0x254>
 800766c:	182b      	adds	r3, r5, r0
 800766e:	2b08      	cmp	r3, #8
 8007670:	f105 0501 	add.w	r5, r5, #1
 8007674:	4405      	add	r5, r0
 8007676:	dc1c      	bgt.n	80076b2 <_strtod_l+0x272>
 8007678:	9907      	ldr	r1, [sp, #28]
 800767a:	230a      	movs	r3, #10
 800767c:	fb03 2301 	mla	r3, r3, r1, r2
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	2300      	movs	r3, #0
 8007684:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007686:	1c51      	adds	r1, r2, #1
 8007688:	9117      	str	r1, [sp, #92]	; 0x5c
 800768a:	7852      	ldrb	r2, [r2, #1]
 800768c:	4618      	mov	r0, r3
 800768e:	e7c9      	b.n	8007624 <_strtod_l+0x1e4>
 8007690:	4638      	mov	r0, r7
 8007692:	e7d2      	b.n	800763a <_strtod_l+0x1fa>
 8007694:	2b08      	cmp	r3, #8
 8007696:	dc04      	bgt.n	80076a2 <_strtod_l+0x262>
 8007698:	9e07      	ldr	r6, [sp, #28]
 800769a:	434e      	muls	r6, r1
 800769c:	9607      	str	r6, [sp, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	e7e2      	b.n	8007668 <_strtod_l+0x228>
 80076a2:	f103 0c01 	add.w	ip, r3, #1
 80076a6:	f1bc 0f10 	cmp.w	ip, #16
 80076aa:	bfd8      	it	le
 80076ac:	fb01 f909 	mulle.w	r9, r1, r9
 80076b0:	e7f5      	b.n	800769e <_strtod_l+0x25e>
 80076b2:	2d10      	cmp	r5, #16
 80076b4:	bfdc      	itt	le
 80076b6:	230a      	movle	r3, #10
 80076b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80076bc:	e7e1      	b.n	8007682 <_strtod_l+0x242>
 80076be:	2300      	movs	r3, #0
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	2301      	movs	r3, #1
 80076c4:	e77c      	b.n	80075c0 <_strtod_l+0x180>
 80076c6:	f04f 0c00 	mov.w	ip, #0
 80076ca:	f108 0202 	add.w	r2, r8, #2
 80076ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80076d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80076d4:	e785      	b.n	80075e2 <_strtod_l+0x1a2>
 80076d6:	f04f 0c01 	mov.w	ip, #1
 80076da:	e7f6      	b.n	80076ca <_strtod_l+0x28a>
 80076dc:	0800b35c 	.word	0x0800b35c
 80076e0:	0800b0b0 	.word	0x0800b0b0
 80076e4:	7ff00000 	.word	0x7ff00000
 80076e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076ea:	1c51      	adds	r1, r2, #1
 80076ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80076ee:	7852      	ldrb	r2, [r2, #1]
 80076f0:	2a30      	cmp	r2, #48	; 0x30
 80076f2:	d0f9      	beq.n	80076e8 <_strtod_l+0x2a8>
 80076f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80076f8:	2908      	cmp	r1, #8
 80076fa:	f63f af79 	bhi.w	80075f0 <_strtod_l+0x1b0>
 80076fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007704:	9206      	str	r2, [sp, #24]
 8007706:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007708:	1c51      	adds	r1, r2, #1
 800770a:	9117      	str	r1, [sp, #92]	; 0x5c
 800770c:	7852      	ldrb	r2, [r2, #1]
 800770e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007712:	2e09      	cmp	r6, #9
 8007714:	d937      	bls.n	8007786 <_strtod_l+0x346>
 8007716:	9e06      	ldr	r6, [sp, #24]
 8007718:	1b89      	subs	r1, r1, r6
 800771a:	2908      	cmp	r1, #8
 800771c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007720:	dc02      	bgt.n	8007728 <_strtod_l+0x2e8>
 8007722:	4576      	cmp	r6, lr
 8007724:	bfa8      	it	ge
 8007726:	4676      	movge	r6, lr
 8007728:	f1bc 0f00 	cmp.w	ip, #0
 800772c:	d000      	beq.n	8007730 <_strtod_l+0x2f0>
 800772e:	4276      	negs	r6, r6
 8007730:	2d00      	cmp	r5, #0
 8007732:	d14d      	bne.n	80077d0 <_strtod_l+0x390>
 8007734:	9904      	ldr	r1, [sp, #16]
 8007736:	4301      	orrs	r1, r0
 8007738:	f47f aec6 	bne.w	80074c8 <_strtod_l+0x88>
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f aee1 	bne.w	8007504 <_strtod_l+0xc4>
 8007742:	2a69      	cmp	r2, #105	; 0x69
 8007744:	d027      	beq.n	8007796 <_strtod_l+0x356>
 8007746:	dc24      	bgt.n	8007792 <_strtod_l+0x352>
 8007748:	2a49      	cmp	r2, #73	; 0x49
 800774a:	d024      	beq.n	8007796 <_strtod_l+0x356>
 800774c:	2a4e      	cmp	r2, #78	; 0x4e
 800774e:	f47f aed9 	bne.w	8007504 <_strtod_l+0xc4>
 8007752:	499f      	ldr	r1, [pc, #636]	; (80079d0 <_strtod_l+0x590>)
 8007754:	a817      	add	r0, sp, #92	; 0x5c
 8007756:	f002 f8b3 	bl	80098c0 <__match>
 800775a:	2800      	cmp	r0, #0
 800775c:	f43f aed2 	beq.w	8007504 <_strtod_l+0xc4>
 8007760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b28      	cmp	r3, #40	; 0x28
 8007766:	d12d      	bne.n	80077c4 <_strtod_l+0x384>
 8007768:	499a      	ldr	r1, [pc, #616]	; (80079d4 <_strtod_l+0x594>)
 800776a:	aa1a      	add	r2, sp, #104	; 0x68
 800776c:	a817      	add	r0, sp, #92	; 0x5c
 800776e:	f002 f8bb 	bl	80098e8 <__hexnan>
 8007772:	2805      	cmp	r0, #5
 8007774:	d126      	bne.n	80077c4 <_strtod_l+0x384>
 8007776:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007778:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800777c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007780:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007784:	e6a0      	b.n	80074c8 <_strtod_l+0x88>
 8007786:	210a      	movs	r1, #10
 8007788:	fb01 2e0e 	mla	lr, r1, lr, r2
 800778c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007790:	e7b9      	b.n	8007706 <_strtod_l+0x2c6>
 8007792:	2a6e      	cmp	r2, #110	; 0x6e
 8007794:	e7db      	b.n	800774e <_strtod_l+0x30e>
 8007796:	4990      	ldr	r1, [pc, #576]	; (80079d8 <_strtod_l+0x598>)
 8007798:	a817      	add	r0, sp, #92	; 0x5c
 800779a:	f002 f891 	bl	80098c0 <__match>
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f aeb0 	beq.w	8007504 <_strtod_l+0xc4>
 80077a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a6:	498d      	ldr	r1, [pc, #564]	; (80079dc <_strtod_l+0x59c>)
 80077a8:	3b01      	subs	r3, #1
 80077aa:	a817      	add	r0, sp, #92	; 0x5c
 80077ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80077ae:	f002 f887 	bl	80098c0 <__match>
 80077b2:	b910      	cbnz	r0, 80077ba <_strtod_l+0x37a>
 80077b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077b6:	3301      	adds	r3, #1
 80077b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80077ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80079ec <_strtod_l+0x5ac>
 80077be:	f04f 0a00 	mov.w	sl, #0
 80077c2:	e681      	b.n	80074c8 <_strtod_l+0x88>
 80077c4:	4886      	ldr	r0, [pc, #536]	; (80079e0 <_strtod_l+0x5a0>)
 80077c6:	f003 fa2f 	bl	800ac28 <nan>
 80077ca:	ec5b ab10 	vmov	sl, fp, d0
 80077ce:	e67b      	b.n	80074c8 <_strtod_l+0x88>
 80077d0:	9b05      	ldr	r3, [sp, #20]
 80077d2:	9807      	ldr	r0, [sp, #28]
 80077d4:	1af3      	subs	r3, r6, r3
 80077d6:	2f00      	cmp	r7, #0
 80077d8:	bf08      	it	eq
 80077da:	462f      	moveq	r7, r5
 80077dc:	2d10      	cmp	r5, #16
 80077de:	9306      	str	r3, [sp, #24]
 80077e0:	46a8      	mov	r8, r5
 80077e2:	bfa8      	it	ge
 80077e4:	f04f 0810 	movge.w	r8, #16
 80077e8:	f7f8 fe9c 	bl	8000524 <__aeabi_ui2d>
 80077ec:	2d09      	cmp	r5, #9
 80077ee:	4682      	mov	sl, r0
 80077f0:	468b      	mov	fp, r1
 80077f2:	dd13      	ble.n	800781c <_strtod_l+0x3dc>
 80077f4:	4b7b      	ldr	r3, [pc, #492]	; (80079e4 <_strtod_l+0x5a4>)
 80077f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80077fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80077fe:	f7f8 ff0b 	bl	8000618 <__aeabi_dmul>
 8007802:	4682      	mov	sl, r0
 8007804:	4648      	mov	r0, r9
 8007806:	468b      	mov	fp, r1
 8007808:	f7f8 fe8c 	bl	8000524 <__aeabi_ui2d>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4650      	mov	r0, sl
 8007812:	4659      	mov	r1, fp
 8007814:	f7f8 fd4a 	bl	80002ac <__adddf3>
 8007818:	4682      	mov	sl, r0
 800781a:	468b      	mov	fp, r1
 800781c:	2d0f      	cmp	r5, #15
 800781e:	dc38      	bgt.n	8007892 <_strtod_l+0x452>
 8007820:	9b06      	ldr	r3, [sp, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	f43f ae50 	beq.w	80074c8 <_strtod_l+0x88>
 8007828:	dd24      	ble.n	8007874 <_strtod_l+0x434>
 800782a:	2b16      	cmp	r3, #22
 800782c:	dc0b      	bgt.n	8007846 <_strtod_l+0x406>
 800782e:	496d      	ldr	r1, [pc, #436]	; (80079e4 <_strtod_l+0x5a4>)
 8007830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007838:	4652      	mov	r2, sl
 800783a:	465b      	mov	r3, fp
 800783c:	f7f8 feec 	bl	8000618 <__aeabi_dmul>
 8007840:	4682      	mov	sl, r0
 8007842:	468b      	mov	fp, r1
 8007844:	e640      	b.n	80074c8 <_strtod_l+0x88>
 8007846:	9a06      	ldr	r2, [sp, #24]
 8007848:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800784c:	4293      	cmp	r3, r2
 800784e:	db20      	blt.n	8007892 <_strtod_l+0x452>
 8007850:	4c64      	ldr	r4, [pc, #400]	; (80079e4 <_strtod_l+0x5a4>)
 8007852:	f1c5 050f 	rsb	r5, r5, #15
 8007856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800785a:	4652      	mov	r2, sl
 800785c:	465b      	mov	r3, fp
 800785e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007862:	f7f8 fed9 	bl	8000618 <__aeabi_dmul>
 8007866:	9b06      	ldr	r3, [sp, #24]
 8007868:	1b5d      	subs	r5, r3, r5
 800786a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800786e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007872:	e7e3      	b.n	800783c <_strtod_l+0x3fc>
 8007874:	9b06      	ldr	r3, [sp, #24]
 8007876:	3316      	adds	r3, #22
 8007878:	db0b      	blt.n	8007892 <_strtod_l+0x452>
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	1b9e      	subs	r6, r3, r6
 800787e:	4b59      	ldr	r3, [pc, #356]	; (80079e4 <_strtod_l+0x5a4>)
 8007880:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007884:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007888:	4650      	mov	r0, sl
 800788a:	4659      	mov	r1, fp
 800788c:	f7f8 ffee 	bl	800086c <__aeabi_ddiv>
 8007890:	e7d6      	b.n	8007840 <_strtod_l+0x400>
 8007892:	9b06      	ldr	r3, [sp, #24]
 8007894:	eba5 0808 	sub.w	r8, r5, r8
 8007898:	4498      	add	r8, r3
 800789a:	f1b8 0f00 	cmp.w	r8, #0
 800789e:	dd74      	ble.n	800798a <_strtod_l+0x54a>
 80078a0:	f018 030f 	ands.w	r3, r8, #15
 80078a4:	d00a      	beq.n	80078bc <_strtod_l+0x47c>
 80078a6:	494f      	ldr	r1, [pc, #316]	; (80079e4 <_strtod_l+0x5a4>)
 80078a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078ac:	4652      	mov	r2, sl
 80078ae:	465b      	mov	r3, fp
 80078b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b4:	f7f8 feb0 	bl	8000618 <__aeabi_dmul>
 80078b8:	4682      	mov	sl, r0
 80078ba:	468b      	mov	fp, r1
 80078bc:	f038 080f 	bics.w	r8, r8, #15
 80078c0:	d04f      	beq.n	8007962 <_strtod_l+0x522>
 80078c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80078c6:	dd22      	ble.n	800790e <_strtod_l+0x4ce>
 80078c8:	2500      	movs	r5, #0
 80078ca:	462e      	mov	r6, r5
 80078cc:	9507      	str	r5, [sp, #28]
 80078ce:	9505      	str	r5, [sp, #20]
 80078d0:	2322      	movs	r3, #34	; 0x22
 80078d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80079ec <_strtod_l+0x5ac>
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	f04f 0a00 	mov.w	sl, #0
 80078dc:	9b07      	ldr	r3, [sp, #28]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f43f adf2 	beq.w	80074c8 <_strtod_l+0x88>
 80078e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078e6:	4620      	mov	r0, r4
 80078e8:	f002 f96e 	bl	8009bc8 <_Bfree>
 80078ec:	9905      	ldr	r1, [sp, #20]
 80078ee:	4620      	mov	r0, r4
 80078f0:	f002 f96a 	bl	8009bc8 <_Bfree>
 80078f4:	4631      	mov	r1, r6
 80078f6:	4620      	mov	r0, r4
 80078f8:	f002 f966 	bl	8009bc8 <_Bfree>
 80078fc:	9907      	ldr	r1, [sp, #28]
 80078fe:	4620      	mov	r0, r4
 8007900:	f002 f962 	bl	8009bc8 <_Bfree>
 8007904:	4629      	mov	r1, r5
 8007906:	4620      	mov	r0, r4
 8007908:	f002 f95e 	bl	8009bc8 <_Bfree>
 800790c:	e5dc      	b.n	80074c8 <_strtod_l+0x88>
 800790e:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <_strtod_l+0x5a8>)
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	2300      	movs	r3, #0
 8007914:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007918:	4650      	mov	r0, sl
 800791a:	4659      	mov	r1, fp
 800791c:	4699      	mov	r9, r3
 800791e:	f1b8 0f01 	cmp.w	r8, #1
 8007922:	dc21      	bgt.n	8007968 <_strtod_l+0x528>
 8007924:	b10b      	cbz	r3, 800792a <_strtod_l+0x4ea>
 8007926:	4682      	mov	sl, r0
 8007928:	468b      	mov	fp, r1
 800792a:	4b2f      	ldr	r3, [pc, #188]	; (80079e8 <_strtod_l+0x5a8>)
 800792c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007930:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007934:	4652      	mov	r2, sl
 8007936:	465b      	mov	r3, fp
 8007938:	e9d9 0100 	ldrd	r0, r1, [r9]
 800793c:	f7f8 fe6c 	bl	8000618 <__aeabi_dmul>
 8007940:	4b2a      	ldr	r3, [pc, #168]	; (80079ec <_strtod_l+0x5ac>)
 8007942:	460a      	mov	r2, r1
 8007944:	400b      	ands	r3, r1
 8007946:	492a      	ldr	r1, [pc, #168]	; (80079f0 <_strtod_l+0x5b0>)
 8007948:	428b      	cmp	r3, r1
 800794a:	4682      	mov	sl, r0
 800794c:	d8bc      	bhi.n	80078c8 <_strtod_l+0x488>
 800794e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007952:	428b      	cmp	r3, r1
 8007954:	bf86      	itte	hi
 8007956:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80079f4 <_strtod_l+0x5b4>
 800795a:	f04f 3aff 	movhi.w	sl, #4294967295
 800795e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007962:	2300      	movs	r3, #0
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	e084      	b.n	8007a72 <_strtod_l+0x632>
 8007968:	f018 0f01 	tst.w	r8, #1
 800796c:	d005      	beq.n	800797a <_strtod_l+0x53a>
 800796e:	9b04      	ldr	r3, [sp, #16]
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f7f8 fe50 	bl	8000618 <__aeabi_dmul>
 8007978:	2301      	movs	r3, #1
 800797a:	9a04      	ldr	r2, [sp, #16]
 800797c:	3208      	adds	r2, #8
 800797e:	f109 0901 	add.w	r9, r9, #1
 8007982:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007986:	9204      	str	r2, [sp, #16]
 8007988:	e7c9      	b.n	800791e <_strtod_l+0x4de>
 800798a:	d0ea      	beq.n	8007962 <_strtod_l+0x522>
 800798c:	f1c8 0800 	rsb	r8, r8, #0
 8007990:	f018 020f 	ands.w	r2, r8, #15
 8007994:	d00a      	beq.n	80079ac <_strtod_l+0x56c>
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <_strtod_l+0x5a4>)
 8007998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800799c:	4650      	mov	r0, sl
 800799e:	4659      	mov	r1, fp
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f7f8 ff62 	bl	800086c <__aeabi_ddiv>
 80079a8:	4682      	mov	sl, r0
 80079aa:	468b      	mov	fp, r1
 80079ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 80079b0:	d0d7      	beq.n	8007962 <_strtod_l+0x522>
 80079b2:	f1b8 0f1f 	cmp.w	r8, #31
 80079b6:	dd1f      	ble.n	80079f8 <_strtod_l+0x5b8>
 80079b8:	2500      	movs	r5, #0
 80079ba:	462e      	mov	r6, r5
 80079bc:	9507      	str	r5, [sp, #28]
 80079be:	9505      	str	r5, [sp, #20]
 80079c0:	2322      	movs	r3, #34	; 0x22
 80079c2:	f04f 0a00 	mov.w	sl, #0
 80079c6:	f04f 0b00 	mov.w	fp, #0
 80079ca:	6023      	str	r3, [r4, #0]
 80079cc:	e786      	b.n	80078dc <_strtod_l+0x49c>
 80079ce:	bf00      	nop
 80079d0:	0800b081 	.word	0x0800b081
 80079d4:	0800b0c4 	.word	0x0800b0c4
 80079d8:	0800b079 	.word	0x0800b079
 80079dc:	0800b204 	.word	0x0800b204
 80079e0:	0800b518 	.word	0x0800b518
 80079e4:	0800b3f8 	.word	0x0800b3f8
 80079e8:	0800b3d0 	.word	0x0800b3d0
 80079ec:	7ff00000 	.word	0x7ff00000
 80079f0:	7ca00000 	.word	0x7ca00000
 80079f4:	7fefffff 	.word	0x7fefffff
 80079f8:	f018 0310 	ands.w	r3, r8, #16
 80079fc:	bf18      	it	ne
 80079fe:	236a      	movne	r3, #106	; 0x6a
 8007a00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007db0 <_strtod_l+0x970>
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	4650      	mov	r0, sl
 8007a08:	4659      	mov	r1, fp
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f018 0f01 	tst.w	r8, #1
 8007a10:	d004      	beq.n	8007a1c <_strtod_l+0x5dc>
 8007a12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a16:	f7f8 fdff 	bl	8000618 <__aeabi_dmul>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a20:	f109 0908 	add.w	r9, r9, #8
 8007a24:	d1f2      	bne.n	8007a0c <_strtod_l+0x5cc>
 8007a26:	b10b      	cbz	r3, 8007a2c <_strtod_l+0x5ec>
 8007a28:	4682      	mov	sl, r0
 8007a2a:	468b      	mov	fp, r1
 8007a2c:	9b04      	ldr	r3, [sp, #16]
 8007a2e:	b1c3      	cbz	r3, 8007a62 <_strtod_l+0x622>
 8007a30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	4659      	mov	r1, fp
 8007a3c:	dd11      	ble.n	8007a62 <_strtod_l+0x622>
 8007a3e:	2b1f      	cmp	r3, #31
 8007a40:	f340 8124 	ble.w	8007c8c <_strtod_l+0x84c>
 8007a44:	2b34      	cmp	r3, #52	; 0x34
 8007a46:	bfde      	ittt	le
 8007a48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a4c:	f04f 33ff 	movle.w	r3, #4294967295
 8007a50:	fa03 f202 	lslle.w	r2, r3, r2
 8007a54:	f04f 0a00 	mov.w	sl, #0
 8007a58:	bfcc      	ite	gt
 8007a5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007a5e:	ea02 0b01 	andle.w	fp, r2, r1
 8007a62:	2200      	movs	r2, #0
 8007a64:	2300      	movs	r3, #0
 8007a66:	4650      	mov	r0, sl
 8007a68:	4659      	mov	r1, fp
 8007a6a:	f7f9 f83d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d1a2      	bne.n	80079b8 <_strtod_l+0x578>
 8007a72:	9b07      	ldr	r3, [sp, #28]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	9908      	ldr	r1, [sp, #32]
 8007a78:	462b      	mov	r3, r5
 8007a7a:	463a      	mov	r2, r7
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f002 f90b 	bl	8009c98 <__s2b>
 8007a82:	9007      	str	r0, [sp, #28]
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f43f af1f 	beq.w	80078c8 <_strtod_l+0x488>
 8007a8a:	9b05      	ldr	r3, [sp, #20]
 8007a8c:	1b9e      	subs	r6, r3, r6
 8007a8e:	9b06      	ldr	r3, [sp, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	bfb4      	ite	lt
 8007a94:	4633      	movlt	r3, r6
 8007a96:	2300      	movge	r3, #0
 8007a98:	930c      	str	r3, [sp, #48]	; 0x30
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	2500      	movs	r5, #0
 8007a9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8007aa4:	462e      	mov	r6, r5
 8007aa6:	9b07      	ldr	r3, [sp, #28]
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	6859      	ldr	r1, [r3, #4]
 8007aac:	f002 f84c 	bl	8009b48 <_Balloc>
 8007ab0:	9005      	str	r0, [sp, #20]
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f43f af0c 	beq.w	80078d0 <_strtod_l+0x490>
 8007ab8:	9b07      	ldr	r3, [sp, #28]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	3202      	adds	r2, #2
 8007abe:	f103 010c 	add.w	r1, r3, #12
 8007ac2:	0092      	lsls	r2, r2, #2
 8007ac4:	300c      	adds	r0, #12
 8007ac6:	f002 f831 	bl	8009b2c <memcpy>
 8007aca:	ec4b ab10 	vmov	d0, sl, fp
 8007ace:	aa1a      	add	r2, sp, #104	; 0x68
 8007ad0:	a919      	add	r1, sp, #100	; 0x64
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f002 fc26 	bl	800a324 <__d2b>
 8007ad8:	ec4b ab18 	vmov	d8, sl, fp
 8007adc:	9018      	str	r0, [sp, #96]	; 0x60
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f aef6 	beq.w	80078d0 <_strtod_l+0x490>
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f002 f970 	bl	8009dcc <__i2b>
 8007aec:	4606      	mov	r6, r0
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f43f aeee 	beq.w	80078d0 <_strtod_l+0x490>
 8007af4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007af6:	9904      	ldr	r1, [sp, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bfab      	itete	ge
 8007afc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007afe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b06:	bfac      	ite	ge
 8007b08:	eb03 0902 	addge.w	r9, r3, r2
 8007b0c:	1ad7      	sublt	r7, r2, r3
 8007b0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b10:	eba3 0801 	sub.w	r8, r3, r1
 8007b14:	4490      	add	r8, r2
 8007b16:	4ba1      	ldr	r3, [pc, #644]	; (8007d9c <_strtod_l+0x95c>)
 8007b18:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b1c:	4598      	cmp	r8, r3
 8007b1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b22:	f280 80c7 	bge.w	8007cb4 <_strtod_l+0x874>
 8007b26:	eba3 0308 	sub.w	r3, r3, r8
 8007b2a:	2b1f      	cmp	r3, #31
 8007b2c:	eba2 0203 	sub.w	r2, r2, r3
 8007b30:	f04f 0101 	mov.w	r1, #1
 8007b34:	f300 80b1 	bgt.w	8007c9a <_strtod_l+0x85a>
 8007b38:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9308      	str	r3, [sp, #32]
 8007b42:	eb09 0802 	add.w	r8, r9, r2
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	45c1      	cmp	r9, r8
 8007b4a:	4417      	add	r7, r2
 8007b4c:	441f      	add	r7, r3
 8007b4e:	464b      	mov	r3, r9
 8007b50:	bfa8      	it	ge
 8007b52:	4643      	movge	r3, r8
 8007b54:	42bb      	cmp	r3, r7
 8007b56:	bfa8      	it	ge
 8007b58:	463b      	movge	r3, r7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfc2      	ittt	gt
 8007b5e:	eba8 0803 	subgt.w	r8, r8, r3
 8007b62:	1aff      	subgt	r7, r7, r3
 8007b64:	eba9 0903 	subgt.w	r9, r9, r3
 8007b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dd17      	ble.n	8007b9e <_strtod_l+0x75e>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	461a      	mov	r2, r3
 8007b72:	4620      	mov	r0, r4
 8007b74:	f002 f9ea 	bl	8009f4c <__pow5mult>
 8007b78:	4606      	mov	r6, r0
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f43f aea8 	beq.w	80078d0 <_strtod_l+0x490>
 8007b80:	4601      	mov	r1, r0
 8007b82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b84:	4620      	mov	r0, r4
 8007b86:	f002 f937 	bl	8009df8 <__multiply>
 8007b8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f43f ae9f 	beq.w	80078d0 <_strtod_l+0x490>
 8007b92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b94:	4620      	mov	r0, r4
 8007b96:	f002 f817 	bl	8009bc8 <_Bfree>
 8007b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b9c:	9318      	str	r3, [sp, #96]	; 0x60
 8007b9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ba2:	f300 808c 	bgt.w	8007cbe <_strtod_l+0x87e>
 8007ba6:	9b06      	ldr	r3, [sp, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dd08      	ble.n	8007bbe <_strtod_l+0x77e>
 8007bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bae:	9905      	ldr	r1, [sp, #20]
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f002 f9cb 	bl	8009f4c <__pow5mult>
 8007bb6:	9005      	str	r0, [sp, #20]
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f43f ae89 	beq.w	80078d0 <_strtod_l+0x490>
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	dd08      	ble.n	8007bd4 <_strtod_l+0x794>
 8007bc2:	9905      	ldr	r1, [sp, #20]
 8007bc4:	463a      	mov	r2, r7
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f002 fa1a 	bl	800a000 <__lshift>
 8007bcc:	9005      	str	r0, [sp, #20]
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f43f ae7e 	beq.w	80078d0 <_strtod_l+0x490>
 8007bd4:	f1b9 0f00 	cmp.w	r9, #0
 8007bd8:	dd08      	ble.n	8007bec <_strtod_l+0x7ac>
 8007bda:	4631      	mov	r1, r6
 8007bdc:	464a      	mov	r2, r9
 8007bde:	4620      	mov	r0, r4
 8007be0:	f002 fa0e 	bl	800a000 <__lshift>
 8007be4:	4606      	mov	r6, r0
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f43f ae72 	beq.w	80078d0 <_strtod_l+0x490>
 8007bec:	9a05      	ldr	r2, [sp, #20]
 8007bee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f002 fa91 	bl	800a118 <__mdiff>
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f43f ae69 	beq.w	80078d0 <_strtod_l+0x490>
 8007bfe:	68c3      	ldr	r3, [r0, #12]
 8007c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c02:	2300      	movs	r3, #0
 8007c04:	60c3      	str	r3, [r0, #12]
 8007c06:	4631      	mov	r1, r6
 8007c08:	f002 fa6a 	bl	800a0e0 <__mcmp>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	da60      	bge.n	8007cd2 <_strtod_l+0x892>
 8007c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c12:	ea53 030a 	orrs.w	r3, r3, sl
 8007c16:	f040 8082 	bne.w	8007d1e <_strtod_l+0x8de>
 8007c1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d17d      	bne.n	8007d1e <_strtod_l+0x8de>
 8007c22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c26:	0d1b      	lsrs	r3, r3, #20
 8007c28:	051b      	lsls	r3, r3, #20
 8007c2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c2e:	d976      	bls.n	8007d1e <_strtod_l+0x8de>
 8007c30:	696b      	ldr	r3, [r5, #20]
 8007c32:	b913      	cbnz	r3, 8007c3a <_strtod_l+0x7fa>
 8007c34:	692b      	ldr	r3, [r5, #16]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	dd71      	ble.n	8007d1e <_strtod_l+0x8de>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f002 f9de 	bl	800a000 <__lshift>
 8007c44:	4631      	mov	r1, r6
 8007c46:	4605      	mov	r5, r0
 8007c48:	f002 fa4a 	bl	800a0e0 <__mcmp>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	dd66      	ble.n	8007d1e <_strtod_l+0x8de>
 8007c50:	9904      	ldr	r1, [sp, #16]
 8007c52:	4a53      	ldr	r2, [pc, #332]	; (8007da0 <_strtod_l+0x960>)
 8007c54:	465b      	mov	r3, fp
 8007c56:	2900      	cmp	r1, #0
 8007c58:	f000 8081 	beq.w	8007d5e <_strtod_l+0x91e>
 8007c5c:	ea02 010b 	and.w	r1, r2, fp
 8007c60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c64:	dc7b      	bgt.n	8007d5e <_strtod_l+0x91e>
 8007c66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c6a:	f77f aea9 	ble.w	80079c0 <_strtod_l+0x580>
 8007c6e:	4b4d      	ldr	r3, [pc, #308]	; (8007da4 <_strtod_l+0x964>)
 8007c70:	4650      	mov	r0, sl
 8007c72:	4659      	mov	r1, fp
 8007c74:	2200      	movs	r2, #0
 8007c76:	f7f8 fccf 	bl	8000618 <__aeabi_dmul>
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4303      	orrs	r3, r0
 8007c7e:	bf08      	it	eq
 8007c80:	2322      	moveq	r3, #34	; 0x22
 8007c82:	4682      	mov	sl, r0
 8007c84:	468b      	mov	fp, r1
 8007c86:	bf08      	it	eq
 8007c88:	6023      	streq	r3, [r4, #0]
 8007c8a:	e62b      	b.n	80078e4 <_strtod_l+0x4a4>
 8007c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	ea03 0a0a 	and.w	sl, r3, sl
 8007c98:	e6e3      	b.n	8007a62 <_strtod_l+0x622>
 8007c9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007c9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007ca2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007ca6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007caa:	fa01 f308 	lsl.w	r3, r1, r8
 8007cae:	9308      	str	r3, [sp, #32]
 8007cb0:	910d      	str	r1, [sp, #52]	; 0x34
 8007cb2:	e746      	b.n	8007b42 <_strtod_l+0x702>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9308      	str	r3, [sp, #32]
 8007cb8:	2301      	movs	r3, #1
 8007cba:	930d      	str	r3, [sp, #52]	; 0x34
 8007cbc:	e741      	b.n	8007b42 <_strtod_l+0x702>
 8007cbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f002 f99c 	bl	800a000 <__lshift>
 8007cc8:	9018      	str	r0, [sp, #96]	; 0x60
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	f47f af6b 	bne.w	8007ba6 <_strtod_l+0x766>
 8007cd0:	e5fe      	b.n	80078d0 <_strtod_l+0x490>
 8007cd2:	465f      	mov	r7, fp
 8007cd4:	d16e      	bne.n	8007db4 <_strtod_l+0x974>
 8007cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cdc:	b342      	cbz	r2, 8007d30 <_strtod_l+0x8f0>
 8007cde:	4a32      	ldr	r2, [pc, #200]	; (8007da8 <_strtod_l+0x968>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d128      	bne.n	8007d36 <_strtod_l+0x8f6>
 8007ce4:	9b04      	ldr	r3, [sp, #16]
 8007ce6:	4651      	mov	r1, sl
 8007ce8:	b1eb      	cbz	r3, 8007d26 <_strtod_l+0x8e6>
 8007cea:	4b2d      	ldr	r3, [pc, #180]	; (8007da0 <_strtod_l+0x960>)
 8007cec:	403b      	ands	r3, r7
 8007cee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf6:	d819      	bhi.n	8007d2c <_strtod_l+0x8ec>
 8007cf8:	0d1b      	lsrs	r3, r3, #20
 8007cfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	4299      	cmp	r1, r3
 8007d04:	d117      	bne.n	8007d36 <_strtod_l+0x8f6>
 8007d06:	4b29      	ldr	r3, [pc, #164]	; (8007dac <_strtod_l+0x96c>)
 8007d08:	429f      	cmp	r7, r3
 8007d0a:	d102      	bne.n	8007d12 <_strtod_l+0x8d2>
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	f43f addf 	beq.w	80078d0 <_strtod_l+0x490>
 8007d12:	4b23      	ldr	r3, [pc, #140]	; (8007da0 <_strtod_l+0x960>)
 8007d14:	403b      	ands	r3, r7
 8007d16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d1a:	f04f 0a00 	mov.w	sl, #0
 8007d1e:	9b04      	ldr	r3, [sp, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1a4      	bne.n	8007c6e <_strtod_l+0x82e>
 8007d24:	e5de      	b.n	80078e4 <_strtod_l+0x4a4>
 8007d26:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2a:	e7ea      	b.n	8007d02 <_strtod_l+0x8c2>
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	e7e8      	b.n	8007d02 <_strtod_l+0x8c2>
 8007d30:	ea53 030a 	orrs.w	r3, r3, sl
 8007d34:	d08c      	beq.n	8007c50 <_strtod_l+0x810>
 8007d36:	9b08      	ldr	r3, [sp, #32]
 8007d38:	b1db      	cbz	r3, 8007d72 <_strtod_l+0x932>
 8007d3a:	423b      	tst	r3, r7
 8007d3c:	d0ef      	beq.n	8007d1e <_strtod_l+0x8de>
 8007d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d40:	9a04      	ldr	r2, [sp, #16]
 8007d42:	4650      	mov	r0, sl
 8007d44:	4659      	mov	r1, fp
 8007d46:	b1c3      	cbz	r3, 8007d7a <_strtod_l+0x93a>
 8007d48:	f7ff fb5c 	bl	8007404 <sulp>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	ec51 0b18 	vmov	r0, r1, d8
 8007d54:	f7f8 faaa 	bl	80002ac <__adddf3>
 8007d58:	4682      	mov	sl, r0
 8007d5a:	468b      	mov	fp, r1
 8007d5c:	e7df      	b.n	8007d1e <_strtod_l+0x8de>
 8007d5e:	4013      	ands	r3, r2
 8007d60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d6c:	f04f 3aff 	mov.w	sl, #4294967295
 8007d70:	e7d5      	b.n	8007d1e <_strtod_l+0x8de>
 8007d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d74:	ea13 0f0a 	tst.w	r3, sl
 8007d78:	e7e0      	b.n	8007d3c <_strtod_l+0x8fc>
 8007d7a:	f7ff fb43 	bl	8007404 <sulp>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	ec51 0b18 	vmov	r0, r1, d8
 8007d86:	f7f8 fa8f 	bl	80002a8 <__aeabi_dsub>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4682      	mov	sl, r0
 8007d90:	468b      	mov	fp, r1
 8007d92:	f7f8 fea9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d0c1      	beq.n	8007d1e <_strtod_l+0x8de>
 8007d9a:	e611      	b.n	80079c0 <_strtod_l+0x580>
 8007d9c:	fffffc02 	.word	0xfffffc02
 8007da0:	7ff00000 	.word	0x7ff00000
 8007da4:	39500000 	.word	0x39500000
 8007da8:	000fffff 	.word	0x000fffff
 8007dac:	7fefffff 	.word	0x7fefffff
 8007db0:	0800b0d8 	.word	0x0800b0d8
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	f002 fb10 	bl	800a3dc <__ratio>
 8007dbc:	ec59 8b10 	vmov	r8, r9, d0
 8007dc0:	ee10 0a10 	vmov	r0, s0
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dca:	4649      	mov	r1, r9
 8007dcc:	f7f8 fea0 	bl	8000b10 <__aeabi_dcmple>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d07a      	beq.n	8007eca <_strtod_l+0xa8a>
 8007dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d04a      	beq.n	8007e70 <_strtod_l+0xa30>
 8007dda:	4b95      	ldr	r3, [pc, #596]	; (8008030 <_strtod_l+0xbf0>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007de2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008030 <_strtod_l+0xbf0>
 8007de6:	f04f 0800 	mov.w	r8, #0
 8007dea:	4b92      	ldr	r3, [pc, #584]	; (8008034 <_strtod_l+0xbf4>)
 8007dec:	403b      	ands	r3, r7
 8007dee:	930d      	str	r3, [sp, #52]	; 0x34
 8007df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007df2:	4b91      	ldr	r3, [pc, #580]	; (8008038 <_strtod_l+0xbf8>)
 8007df4:	429a      	cmp	r2, r3
 8007df6:	f040 80b0 	bne.w	8007f5a <_strtod_l+0xb1a>
 8007dfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007dfe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e02:	ec4b ab10 	vmov	d0, sl, fp
 8007e06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e0a:	f002 fa0f 	bl	800a22c <__ulp>
 8007e0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e12:	ec53 2b10 	vmov	r2, r3, d0
 8007e16:	f7f8 fbff 	bl	8000618 <__aeabi_dmul>
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	f7f8 fa45 	bl	80002ac <__adddf3>
 8007e22:	460b      	mov	r3, r1
 8007e24:	4983      	ldr	r1, [pc, #524]	; (8008034 <_strtod_l+0xbf4>)
 8007e26:	4a85      	ldr	r2, [pc, #532]	; (800803c <_strtod_l+0xbfc>)
 8007e28:	4019      	ands	r1, r3
 8007e2a:	4291      	cmp	r1, r2
 8007e2c:	4682      	mov	sl, r0
 8007e2e:	d960      	bls.n	8007ef2 <_strtod_l+0xab2>
 8007e30:	ee18 3a90 	vmov	r3, s17
 8007e34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d104      	bne.n	8007e46 <_strtod_l+0xa06>
 8007e3c:	ee18 3a10 	vmov	r3, s16
 8007e40:	3301      	adds	r3, #1
 8007e42:	f43f ad45 	beq.w	80078d0 <_strtod_l+0x490>
 8007e46:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008048 <_strtod_l+0xc08>
 8007e4a:	f04f 3aff 	mov.w	sl, #4294967295
 8007e4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e50:	4620      	mov	r0, r4
 8007e52:	f001 feb9 	bl	8009bc8 <_Bfree>
 8007e56:	9905      	ldr	r1, [sp, #20]
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f001 feb5 	bl	8009bc8 <_Bfree>
 8007e5e:	4631      	mov	r1, r6
 8007e60:	4620      	mov	r0, r4
 8007e62:	f001 feb1 	bl	8009bc8 <_Bfree>
 8007e66:	4629      	mov	r1, r5
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f001 fead 	bl	8009bc8 <_Bfree>
 8007e6e:	e61a      	b.n	8007aa6 <_strtod_l+0x666>
 8007e70:	f1ba 0f00 	cmp.w	sl, #0
 8007e74:	d11b      	bne.n	8007eae <_strtod_l+0xa6e>
 8007e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e7a:	b9f3      	cbnz	r3, 8007eba <_strtod_l+0xa7a>
 8007e7c:	4b6c      	ldr	r3, [pc, #432]	; (8008030 <_strtod_l+0xbf0>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fe3a 	bl	8000afc <__aeabi_dcmplt>
 8007e88:	b9d0      	cbnz	r0, 8007ec0 <_strtod_l+0xa80>
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	4b6c      	ldr	r3, [pc, #432]	; (8008040 <_strtod_l+0xc00>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	f7f8 fbc1 	bl	8000618 <__aeabi_dmul>
 8007e96:	4680      	mov	r8, r0
 8007e98:	4689      	mov	r9, r1
 8007e9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007ea2:	9315      	str	r3, [sp, #84]	; 0x54
 8007ea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ea8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007eac:	e79d      	b.n	8007dea <_strtod_l+0x9aa>
 8007eae:	f1ba 0f01 	cmp.w	sl, #1
 8007eb2:	d102      	bne.n	8007eba <_strtod_l+0xa7a>
 8007eb4:	2f00      	cmp	r7, #0
 8007eb6:	f43f ad83 	beq.w	80079c0 <_strtod_l+0x580>
 8007eba:	4b62      	ldr	r3, [pc, #392]	; (8008044 <_strtod_l+0xc04>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	e78e      	b.n	8007dde <_strtod_l+0x99e>
 8007ec0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008040 <_strtod_l+0xc00>
 8007ec4:	f04f 0800 	mov.w	r8, #0
 8007ec8:	e7e7      	b.n	8007e9a <_strtod_l+0xa5a>
 8007eca:	4b5d      	ldr	r3, [pc, #372]	; (8008040 <_strtod_l+0xc00>)
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f7f8 fba1 	bl	8000618 <__aeabi_dmul>
 8007ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed8:	4680      	mov	r8, r0
 8007eda:	4689      	mov	r9, r1
 8007edc:	b933      	cbnz	r3, 8007eec <_strtod_l+0xaac>
 8007ede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee2:	900e      	str	r0, [sp, #56]	; 0x38
 8007ee4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ee6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007eea:	e7dd      	b.n	8007ea8 <_strtod_l+0xa68>
 8007eec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ef0:	e7f9      	b.n	8007ee6 <_strtod_l+0xaa6>
 8007ef2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1a8      	bne.n	8007e4e <_strtod_l+0xa0e>
 8007efc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f02:	0d1b      	lsrs	r3, r3, #20
 8007f04:	051b      	lsls	r3, r3, #20
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d1a1      	bne.n	8007e4e <_strtod_l+0xa0e>
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	f7f8 fee3 	bl	8000cd8 <__aeabi_d2lz>
 8007f12:	f7f8 fb53 	bl	80005bc <__aeabi_l2d>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	f7f8 f9c3 	bl	80002a8 <__aeabi_dsub>
 8007f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f28:	ea43 030a 	orr.w	r3, r3, sl
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	4680      	mov	r8, r0
 8007f30:	4689      	mov	r9, r1
 8007f32:	d055      	beq.n	8007fe0 <_strtod_l+0xba0>
 8007f34:	a336      	add	r3, pc, #216	; (adr r3, 8008010 <_strtod_l+0xbd0>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f7f8 fddf 	bl	8000afc <__aeabi_dcmplt>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f47f acd0 	bne.w	80078e4 <_strtod_l+0x4a4>
 8007f44:	a334      	add	r3, pc, #208	; (adr r3, 8008018 <_strtod_l+0xbd8>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 fdf3 	bl	8000b38 <__aeabi_dcmpgt>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f43f af7b 	beq.w	8007e4e <_strtod_l+0xa0e>
 8007f58:	e4c4      	b.n	80078e4 <_strtod_l+0x4a4>
 8007f5a:	9b04      	ldr	r3, [sp, #16]
 8007f5c:	b333      	cbz	r3, 8007fac <_strtod_l+0xb6c>
 8007f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f64:	d822      	bhi.n	8007fac <_strtod_l+0xb6c>
 8007f66:	a32e      	add	r3, pc, #184	; (adr r3, 8008020 <_strtod_l+0xbe0>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	f7f8 fdce 	bl	8000b10 <__aeabi_dcmple>
 8007f74:	b1a0      	cbz	r0, 8007fa0 <_strtod_l+0xb60>
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	f7f8 fe25 	bl	8000bc8 <__aeabi_d2uiz>
 8007f7e:	2801      	cmp	r0, #1
 8007f80:	bf38      	it	cc
 8007f82:	2001      	movcc	r0, #1
 8007f84:	f7f8 face 	bl	8000524 <__aeabi_ui2d>
 8007f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	4689      	mov	r9, r1
 8007f8e:	bb23      	cbnz	r3, 8007fda <_strtod_l+0xb9a>
 8007f90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f94:	9010      	str	r0, [sp, #64]	; 0x40
 8007f96:	9311      	str	r3, [sp, #68]	; 0x44
 8007f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fa4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	9309      	str	r3, [sp, #36]	; 0x24
 8007fac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8007fb4:	eef0 0a68 	vmov.f32	s1, s17
 8007fb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fbc:	f002 f936 	bl	800a22c <__ulp>
 8007fc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fc4:	ec53 2b10 	vmov	r2, r3, d0
 8007fc8:	f7f8 fb26 	bl	8000618 <__aeabi_dmul>
 8007fcc:	ec53 2b18 	vmov	r2, r3, d8
 8007fd0:	f7f8 f96c 	bl	80002ac <__adddf3>
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	468b      	mov	fp, r1
 8007fd8:	e78d      	b.n	8007ef6 <_strtod_l+0xab6>
 8007fda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007fde:	e7db      	b.n	8007f98 <_strtod_l+0xb58>
 8007fe0:	a311      	add	r3, pc, #68	; (adr r3, 8008028 <_strtod_l+0xbe8>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 fd89 	bl	8000afc <__aeabi_dcmplt>
 8007fea:	e7b2      	b.n	8007f52 <_strtod_l+0xb12>
 8007fec:	2300      	movs	r3, #0
 8007fee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	f7ff ba6b 	b.w	80074d0 <_strtod_l+0x90>
 8007ffa:	2a65      	cmp	r2, #101	; 0x65
 8007ffc:	f43f ab5f 	beq.w	80076be <_strtod_l+0x27e>
 8008000:	2a45      	cmp	r2, #69	; 0x45
 8008002:	f43f ab5c 	beq.w	80076be <_strtod_l+0x27e>
 8008006:	2301      	movs	r3, #1
 8008008:	f7ff bb94 	b.w	8007734 <_strtod_l+0x2f4>
 800800c:	f3af 8000 	nop.w
 8008010:	94a03595 	.word	0x94a03595
 8008014:	3fdfffff 	.word	0x3fdfffff
 8008018:	35afe535 	.word	0x35afe535
 800801c:	3fe00000 	.word	0x3fe00000
 8008020:	ffc00000 	.word	0xffc00000
 8008024:	41dfffff 	.word	0x41dfffff
 8008028:	94a03595 	.word	0x94a03595
 800802c:	3fcfffff 	.word	0x3fcfffff
 8008030:	3ff00000 	.word	0x3ff00000
 8008034:	7ff00000 	.word	0x7ff00000
 8008038:	7fe00000 	.word	0x7fe00000
 800803c:	7c9fffff 	.word	0x7c9fffff
 8008040:	3fe00000 	.word	0x3fe00000
 8008044:	bff00000 	.word	0xbff00000
 8008048:	7fefffff 	.word	0x7fefffff

0800804c <_strtod_r>:
 800804c:	4b01      	ldr	r3, [pc, #4]	; (8008054 <_strtod_r+0x8>)
 800804e:	f7ff b9f7 	b.w	8007440 <_strtod_l>
 8008052:	bf00      	nop
 8008054:	20000074 	.word	0x20000074

08008058 <_strtol_l.constprop.0>:
 8008058:	2b01      	cmp	r3, #1
 800805a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805e:	d001      	beq.n	8008064 <_strtol_l.constprop.0+0xc>
 8008060:	2b24      	cmp	r3, #36	; 0x24
 8008062:	d906      	bls.n	8008072 <_strtol_l.constprop.0+0x1a>
 8008064:	f7fe fa6e 	bl	8006544 <__errno>
 8008068:	2316      	movs	r3, #22
 800806a:	6003      	str	r3, [r0, #0]
 800806c:	2000      	movs	r0, #0
 800806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008158 <_strtol_l.constprop.0+0x100>
 8008076:	460d      	mov	r5, r1
 8008078:	462e      	mov	r6, r5
 800807a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800807e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008082:	f017 0708 	ands.w	r7, r7, #8
 8008086:	d1f7      	bne.n	8008078 <_strtol_l.constprop.0+0x20>
 8008088:	2c2d      	cmp	r4, #45	; 0x2d
 800808a:	d132      	bne.n	80080f2 <_strtol_l.constprop.0+0x9a>
 800808c:	782c      	ldrb	r4, [r5, #0]
 800808e:	2701      	movs	r7, #1
 8008090:	1cb5      	adds	r5, r6, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d05b      	beq.n	800814e <_strtol_l.constprop.0+0xf6>
 8008096:	2b10      	cmp	r3, #16
 8008098:	d109      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 800809a:	2c30      	cmp	r4, #48	; 0x30
 800809c:	d107      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 800809e:	782c      	ldrb	r4, [r5, #0]
 80080a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80080a4:	2c58      	cmp	r4, #88	; 0x58
 80080a6:	d14d      	bne.n	8008144 <_strtol_l.constprop.0+0xec>
 80080a8:	786c      	ldrb	r4, [r5, #1]
 80080aa:	2310      	movs	r3, #16
 80080ac:	3502      	adds	r5, #2
 80080ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80080b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80080b6:	f04f 0c00 	mov.w	ip, #0
 80080ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80080be:	4666      	mov	r6, ip
 80080c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80080c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80080c8:	f1be 0f09 	cmp.w	lr, #9
 80080cc:	d816      	bhi.n	80080fc <_strtol_l.constprop.0+0xa4>
 80080ce:	4674      	mov	r4, lr
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	dd24      	ble.n	800811e <_strtol_l.constprop.0+0xc6>
 80080d4:	f1bc 0f00 	cmp.w	ip, #0
 80080d8:	db1e      	blt.n	8008118 <_strtol_l.constprop.0+0xc0>
 80080da:	45b1      	cmp	r9, r6
 80080dc:	d31c      	bcc.n	8008118 <_strtol_l.constprop.0+0xc0>
 80080de:	d101      	bne.n	80080e4 <_strtol_l.constprop.0+0x8c>
 80080e0:	45a2      	cmp	sl, r4
 80080e2:	db19      	blt.n	8008118 <_strtol_l.constprop.0+0xc0>
 80080e4:	fb06 4603 	mla	r6, r6, r3, r4
 80080e8:	f04f 0c01 	mov.w	ip, #1
 80080ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080f0:	e7e8      	b.n	80080c4 <_strtol_l.constprop.0+0x6c>
 80080f2:	2c2b      	cmp	r4, #43	; 0x2b
 80080f4:	bf04      	itt	eq
 80080f6:	782c      	ldrbeq	r4, [r5, #0]
 80080f8:	1cb5      	addeq	r5, r6, #2
 80080fa:	e7ca      	b.n	8008092 <_strtol_l.constprop.0+0x3a>
 80080fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008100:	f1be 0f19 	cmp.w	lr, #25
 8008104:	d801      	bhi.n	800810a <_strtol_l.constprop.0+0xb2>
 8008106:	3c37      	subs	r4, #55	; 0x37
 8008108:	e7e2      	b.n	80080d0 <_strtol_l.constprop.0+0x78>
 800810a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800810e:	f1be 0f19 	cmp.w	lr, #25
 8008112:	d804      	bhi.n	800811e <_strtol_l.constprop.0+0xc6>
 8008114:	3c57      	subs	r4, #87	; 0x57
 8008116:	e7db      	b.n	80080d0 <_strtol_l.constprop.0+0x78>
 8008118:	f04f 3cff 	mov.w	ip, #4294967295
 800811c:	e7e6      	b.n	80080ec <_strtol_l.constprop.0+0x94>
 800811e:	f1bc 0f00 	cmp.w	ip, #0
 8008122:	da05      	bge.n	8008130 <_strtol_l.constprop.0+0xd8>
 8008124:	2322      	movs	r3, #34	; 0x22
 8008126:	6003      	str	r3, [r0, #0]
 8008128:	4646      	mov	r6, r8
 800812a:	b942      	cbnz	r2, 800813e <_strtol_l.constprop.0+0xe6>
 800812c:	4630      	mov	r0, r6
 800812e:	e79e      	b.n	800806e <_strtol_l.constprop.0+0x16>
 8008130:	b107      	cbz	r7, 8008134 <_strtol_l.constprop.0+0xdc>
 8008132:	4276      	negs	r6, r6
 8008134:	2a00      	cmp	r2, #0
 8008136:	d0f9      	beq.n	800812c <_strtol_l.constprop.0+0xd4>
 8008138:	f1bc 0f00 	cmp.w	ip, #0
 800813c:	d000      	beq.n	8008140 <_strtol_l.constprop.0+0xe8>
 800813e:	1e69      	subs	r1, r5, #1
 8008140:	6011      	str	r1, [r2, #0]
 8008142:	e7f3      	b.n	800812c <_strtol_l.constprop.0+0xd4>
 8008144:	2430      	movs	r4, #48	; 0x30
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1b1      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 800814a:	2308      	movs	r3, #8
 800814c:	e7af      	b.n	80080ae <_strtol_l.constprop.0+0x56>
 800814e:	2c30      	cmp	r4, #48	; 0x30
 8008150:	d0a5      	beq.n	800809e <_strtol_l.constprop.0+0x46>
 8008152:	230a      	movs	r3, #10
 8008154:	e7ab      	b.n	80080ae <_strtol_l.constprop.0+0x56>
 8008156:	bf00      	nop
 8008158:	0800b101 	.word	0x0800b101

0800815c <_strtol_r>:
 800815c:	f7ff bf7c 	b.w	8008058 <_strtol_l.constprop.0>

08008160 <__swbuf_r>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	460e      	mov	r6, r1
 8008164:	4614      	mov	r4, r2
 8008166:	4605      	mov	r5, r0
 8008168:	b118      	cbz	r0, 8008172 <__swbuf_r+0x12>
 800816a:	6983      	ldr	r3, [r0, #24]
 800816c:	b90b      	cbnz	r3, 8008172 <__swbuf_r+0x12>
 800816e:	f001 f84b 	bl	8009208 <__sinit>
 8008172:	4b21      	ldr	r3, [pc, #132]	; (80081f8 <__swbuf_r+0x98>)
 8008174:	429c      	cmp	r4, r3
 8008176:	d12b      	bne.n	80081d0 <__swbuf_r+0x70>
 8008178:	686c      	ldr	r4, [r5, #4]
 800817a:	69a3      	ldr	r3, [r4, #24]
 800817c:	60a3      	str	r3, [r4, #8]
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	071a      	lsls	r2, r3, #28
 8008182:	d52f      	bpl.n	80081e4 <__swbuf_r+0x84>
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	b36b      	cbz	r3, 80081e4 <__swbuf_r+0x84>
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	6820      	ldr	r0, [r4, #0]
 800818c:	1ac0      	subs	r0, r0, r3
 800818e:	6963      	ldr	r3, [r4, #20]
 8008190:	b2f6      	uxtb	r6, r6
 8008192:	4283      	cmp	r3, r0
 8008194:	4637      	mov	r7, r6
 8008196:	dc04      	bgt.n	80081a2 <__swbuf_r+0x42>
 8008198:	4621      	mov	r1, r4
 800819a:	4628      	mov	r0, r5
 800819c:	f000 ffa0 	bl	80090e0 <_fflush_r>
 80081a0:	bb30      	cbnz	r0, 80081f0 <__swbuf_r+0x90>
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	60a3      	str	r3, [r4, #8]
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	6022      	str	r2, [r4, #0]
 80081ae:	701e      	strb	r6, [r3, #0]
 80081b0:	6963      	ldr	r3, [r4, #20]
 80081b2:	3001      	adds	r0, #1
 80081b4:	4283      	cmp	r3, r0
 80081b6:	d004      	beq.n	80081c2 <__swbuf_r+0x62>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	07db      	lsls	r3, r3, #31
 80081bc:	d506      	bpl.n	80081cc <__swbuf_r+0x6c>
 80081be:	2e0a      	cmp	r6, #10
 80081c0:	d104      	bne.n	80081cc <__swbuf_r+0x6c>
 80081c2:	4621      	mov	r1, r4
 80081c4:	4628      	mov	r0, r5
 80081c6:	f000 ff8b 	bl	80090e0 <_fflush_r>
 80081ca:	b988      	cbnz	r0, 80081f0 <__swbuf_r+0x90>
 80081cc:	4638      	mov	r0, r7
 80081ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <__swbuf_r+0x9c>)
 80081d2:	429c      	cmp	r4, r3
 80081d4:	d101      	bne.n	80081da <__swbuf_r+0x7a>
 80081d6:	68ac      	ldr	r4, [r5, #8]
 80081d8:	e7cf      	b.n	800817a <__swbuf_r+0x1a>
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <__swbuf_r+0xa0>)
 80081dc:	429c      	cmp	r4, r3
 80081de:	bf08      	it	eq
 80081e0:	68ec      	ldreq	r4, [r5, #12]
 80081e2:	e7ca      	b.n	800817a <__swbuf_r+0x1a>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 f80c 	bl	8008204 <__swsetup_r>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d0cb      	beq.n	8008188 <__swbuf_r+0x28>
 80081f0:	f04f 37ff 	mov.w	r7, #4294967295
 80081f4:	e7ea      	b.n	80081cc <__swbuf_r+0x6c>
 80081f6:	bf00      	nop
 80081f8:	0800b2b4 	.word	0x0800b2b4
 80081fc:	0800b2d4 	.word	0x0800b2d4
 8008200:	0800b294 	.word	0x0800b294

08008204 <__swsetup_r>:
 8008204:	4b32      	ldr	r3, [pc, #200]	; (80082d0 <__swsetup_r+0xcc>)
 8008206:	b570      	push	{r4, r5, r6, lr}
 8008208:	681d      	ldr	r5, [r3, #0]
 800820a:	4606      	mov	r6, r0
 800820c:	460c      	mov	r4, r1
 800820e:	b125      	cbz	r5, 800821a <__swsetup_r+0x16>
 8008210:	69ab      	ldr	r3, [r5, #24]
 8008212:	b913      	cbnz	r3, 800821a <__swsetup_r+0x16>
 8008214:	4628      	mov	r0, r5
 8008216:	f000 fff7 	bl	8009208 <__sinit>
 800821a:	4b2e      	ldr	r3, [pc, #184]	; (80082d4 <__swsetup_r+0xd0>)
 800821c:	429c      	cmp	r4, r3
 800821e:	d10f      	bne.n	8008240 <__swsetup_r+0x3c>
 8008220:	686c      	ldr	r4, [r5, #4]
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008228:	0719      	lsls	r1, r3, #28
 800822a:	d42c      	bmi.n	8008286 <__swsetup_r+0x82>
 800822c:	06dd      	lsls	r5, r3, #27
 800822e:	d411      	bmi.n	8008254 <__swsetup_r+0x50>
 8008230:	2309      	movs	r3, #9
 8008232:	6033      	str	r3, [r6, #0]
 8008234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	f04f 30ff 	mov.w	r0, #4294967295
 800823e:	e03e      	b.n	80082be <__swsetup_r+0xba>
 8008240:	4b25      	ldr	r3, [pc, #148]	; (80082d8 <__swsetup_r+0xd4>)
 8008242:	429c      	cmp	r4, r3
 8008244:	d101      	bne.n	800824a <__swsetup_r+0x46>
 8008246:	68ac      	ldr	r4, [r5, #8]
 8008248:	e7eb      	b.n	8008222 <__swsetup_r+0x1e>
 800824a:	4b24      	ldr	r3, [pc, #144]	; (80082dc <__swsetup_r+0xd8>)
 800824c:	429c      	cmp	r4, r3
 800824e:	bf08      	it	eq
 8008250:	68ec      	ldreq	r4, [r5, #12]
 8008252:	e7e6      	b.n	8008222 <__swsetup_r+0x1e>
 8008254:	0758      	lsls	r0, r3, #29
 8008256:	d512      	bpl.n	800827e <__swsetup_r+0x7a>
 8008258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800825a:	b141      	cbz	r1, 800826e <__swsetup_r+0x6a>
 800825c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008260:	4299      	cmp	r1, r3
 8008262:	d002      	beq.n	800826a <__swsetup_r+0x66>
 8008264:	4630      	mov	r0, r6
 8008266:	f002 f947 	bl	800a4f8 <_free_r>
 800826a:	2300      	movs	r3, #0
 800826c:	6363      	str	r3, [r4, #52]	; 0x34
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	2300      	movs	r3, #0
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f043 0308 	orr.w	r3, r3, #8
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	6923      	ldr	r3, [r4, #16]
 8008288:	b94b      	cbnz	r3, 800829e <__swsetup_r+0x9a>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008294:	d003      	beq.n	800829e <__swsetup_r+0x9a>
 8008296:	4621      	mov	r1, r4
 8008298:	4630      	mov	r0, r6
 800829a:	f001 fbed 	bl	8009a78 <__smakebuf_r>
 800829e:	89a0      	ldrh	r0, [r4, #12]
 80082a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082a4:	f010 0301 	ands.w	r3, r0, #1
 80082a8:	d00a      	beq.n	80082c0 <__swsetup_r+0xbc>
 80082aa:	2300      	movs	r3, #0
 80082ac:	60a3      	str	r3, [r4, #8]
 80082ae:	6963      	ldr	r3, [r4, #20]
 80082b0:	425b      	negs	r3, r3
 80082b2:	61a3      	str	r3, [r4, #24]
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	b943      	cbnz	r3, 80082ca <__swsetup_r+0xc6>
 80082b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082bc:	d1ba      	bne.n	8008234 <__swsetup_r+0x30>
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	0781      	lsls	r1, r0, #30
 80082c2:	bf58      	it	pl
 80082c4:	6963      	ldrpl	r3, [r4, #20]
 80082c6:	60a3      	str	r3, [r4, #8]
 80082c8:	e7f4      	b.n	80082b4 <__swsetup_r+0xb0>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e7f7      	b.n	80082be <__swsetup_r+0xba>
 80082ce:	bf00      	nop
 80082d0:	2000000c 	.word	0x2000000c
 80082d4:	0800b2b4 	.word	0x0800b2b4
 80082d8:	0800b2d4 	.word	0x0800b2d4
 80082dc:	0800b294 	.word	0x0800b294

080082e0 <quorem>:
 80082e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	6903      	ldr	r3, [r0, #16]
 80082e6:	690c      	ldr	r4, [r1, #16]
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	4607      	mov	r7, r0
 80082ec:	f2c0 8081 	blt.w	80083f2 <quorem+0x112>
 80082f0:	3c01      	subs	r4, #1
 80082f2:	f101 0814 	add.w	r8, r1, #20
 80082f6:	f100 0514 	add.w	r5, r0, #20
 80082fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008304:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008308:	3301      	adds	r3, #1
 800830a:	429a      	cmp	r2, r3
 800830c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008310:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008314:	fbb2 f6f3 	udiv	r6, r2, r3
 8008318:	d331      	bcc.n	800837e <quorem+0x9e>
 800831a:	f04f 0e00 	mov.w	lr, #0
 800831e:	4640      	mov	r0, r8
 8008320:	46ac      	mov	ip, r5
 8008322:	46f2      	mov	sl, lr
 8008324:	f850 2b04 	ldr.w	r2, [r0], #4
 8008328:	b293      	uxth	r3, r2
 800832a:	fb06 e303 	mla	r3, r6, r3, lr
 800832e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008332:	b29b      	uxth	r3, r3
 8008334:	ebaa 0303 	sub.w	r3, sl, r3
 8008338:	f8dc a000 	ldr.w	sl, [ip]
 800833c:	0c12      	lsrs	r2, r2, #16
 800833e:	fa13 f38a 	uxtah	r3, r3, sl
 8008342:	fb06 e202 	mla	r2, r6, r2, lr
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	9b00      	ldr	r3, [sp, #0]
 800834a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800834e:	b292      	uxth	r2, r2
 8008350:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008358:	f8bd 3000 	ldrh.w	r3, [sp]
 800835c:	4581      	cmp	r9, r0
 800835e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008362:	f84c 3b04 	str.w	r3, [ip], #4
 8008366:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800836a:	d2db      	bcs.n	8008324 <quorem+0x44>
 800836c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008370:	b92b      	cbnz	r3, 800837e <quorem+0x9e>
 8008372:	9b01      	ldr	r3, [sp, #4]
 8008374:	3b04      	subs	r3, #4
 8008376:	429d      	cmp	r5, r3
 8008378:	461a      	mov	r2, r3
 800837a:	d32e      	bcc.n	80083da <quorem+0xfa>
 800837c:	613c      	str	r4, [r7, #16]
 800837e:	4638      	mov	r0, r7
 8008380:	f001 feae 	bl	800a0e0 <__mcmp>
 8008384:	2800      	cmp	r0, #0
 8008386:	db24      	blt.n	80083d2 <quorem+0xf2>
 8008388:	3601      	adds	r6, #1
 800838a:	4628      	mov	r0, r5
 800838c:	f04f 0c00 	mov.w	ip, #0
 8008390:	f858 2b04 	ldr.w	r2, [r8], #4
 8008394:	f8d0 e000 	ldr.w	lr, [r0]
 8008398:	b293      	uxth	r3, r2
 800839a:	ebac 0303 	sub.w	r3, ip, r3
 800839e:	0c12      	lsrs	r2, r2, #16
 80083a0:	fa13 f38e 	uxtah	r3, r3, lr
 80083a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083b2:	45c1      	cmp	r9, r8
 80083b4:	f840 3b04 	str.w	r3, [r0], #4
 80083b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083bc:	d2e8      	bcs.n	8008390 <quorem+0xb0>
 80083be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083c6:	b922      	cbnz	r2, 80083d2 <quorem+0xf2>
 80083c8:	3b04      	subs	r3, #4
 80083ca:	429d      	cmp	r5, r3
 80083cc:	461a      	mov	r2, r3
 80083ce:	d30a      	bcc.n	80083e6 <quorem+0x106>
 80083d0:	613c      	str	r4, [r7, #16]
 80083d2:	4630      	mov	r0, r6
 80083d4:	b003      	add	sp, #12
 80083d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	6812      	ldr	r2, [r2, #0]
 80083dc:	3b04      	subs	r3, #4
 80083de:	2a00      	cmp	r2, #0
 80083e0:	d1cc      	bne.n	800837c <quorem+0x9c>
 80083e2:	3c01      	subs	r4, #1
 80083e4:	e7c7      	b.n	8008376 <quorem+0x96>
 80083e6:	6812      	ldr	r2, [r2, #0]
 80083e8:	3b04      	subs	r3, #4
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	d1f0      	bne.n	80083d0 <quorem+0xf0>
 80083ee:	3c01      	subs	r4, #1
 80083f0:	e7eb      	b.n	80083ca <quorem+0xea>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e7ee      	b.n	80083d4 <quorem+0xf4>
	...

080083f8 <_dtoa_r>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	ed2d 8b04 	vpush	{d8-d9}
 8008400:	ec57 6b10 	vmov	r6, r7, d0
 8008404:	b093      	sub	sp, #76	; 0x4c
 8008406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800840c:	9106      	str	r1, [sp, #24]
 800840e:	ee10 aa10 	vmov	sl, s0
 8008412:	4604      	mov	r4, r0
 8008414:	9209      	str	r2, [sp, #36]	; 0x24
 8008416:	930c      	str	r3, [sp, #48]	; 0x30
 8008418:	46bb      	mov	fp, r7
 800841a:	b975      	cbnz	r5, 800843a <_dtoa_r+0x42>
 800841c:	2010      	movs	r0, #16
 800841e:	f001 fb6b 	bl	8009af8 <malloc>
 8008422:	4602      	mov	r2, r0
 8008424:	6260      	str	r0, [r4, #36]	; 0x24
 8008426:	b920      	cbnz	r0, 8008432 <_dtoa_r+0x3a>
 8008428:	4ba7      	ldr	r3, [pc, #668]	; (80086c8 <_dtoa_r+0x2d0>)
 800842a:	21ea      	movs	r1, #234	; 0xea
 800842c:	48a7      	ldr	r0, [pc, #668]	; (80086cc <_dtoa_r+0x2d4>)
 800842e:	f002 fc89 	bl	800ad44 <__assert_func>
 8008432:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008436:	6005      	str	r5, [r0, #0]
 8008438:	60c5      	str	r5, [r0, #12]
 800843a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800843c:	6819      	ldr	r1, [r3, #0]
 800843e:	b151      	cbz	r1, 8008456 <_dtoa_r+0x5e>
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	604a      	str	r2, [r1, #4]
 8008444:	2301      	movs	r3, #1
 8008446:	4093      	lsls	r3, r2
 8008448:	608b      	str	r3, [r1, #8]
 800844a:	4620      	mov	r0, r4
 800844c:	f001 fbbc 	bl	8009bc8 <_Bfree>
 8008450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	1e3b      	subs	r3, r7, #0
 8008458:	bfaa      	itet	ge
 800845a:	2300      	movge	r3, #0
 800845c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008460:	f8c8 3000 	strge.w	r3, [r8]
 8008464:	4b9a      	ldr	r3, [pc, #616]	; (80086d0 <_dtoa_r+0x2d8>)
 8008466:	bfbc      	itt	lt
 8008468:	2201      	movlt	r2, #1
 800846a:	f8c8 2000 	strlt.w	r2, [r8]
 800846e:	ea33 030b 	bics.w	r3, r3, fp
 8008472:	d11b      	bne.n	80084ac <_dtoa_r+0xb4>
 8008474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008476:	f242 730f 	movw	r3, #9999	; 0x270f
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008480:	4333      	orrs	r3, r6
 8008482:	f000 8592 	beq.w	8008faa <_dtoa_r+0xbb2>
 8008486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008488:	b963      	cbnz	r3, 80084a4 <_dtoa_r+0xac>
 800848a:	4b92      	ldr	r3, [pc, #584]	; (80086d4 <_dtoa_r+0x2dc>)
 800848c:	e022      	b.n	80084d4 <_dtoa_r+0xdc>
 800848e:	4b92      	ldr	r3, [pc, #584]	; (80086d8 <_dtoa_r+0x2e0>)
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	3308      	adds	r3, #8
 8008494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	9801      	ldr	r0, [sp, #4]
 800849a:	b013      	add	sp, #76	; 0x4c
 800849c:	ecbd 8b04 	vpop	{d8-d9}
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	4b8b      	ldr	r3, [pc, #556]	; (80086d4 <_dtoa_r+0x2dc>)
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	3303      	adds	r3, #3
 80084aa:	e7f3      	b.n	8008494 <_dtoa_r+0x9c>
 80084ac:	2200      	movs	r2, #0
 80084ae:	2300      	movs	r3, #0
 80084b0:	4650      	mov	r0, sl
 80084b2:	4659      	mov	r1, fp
 80084b4:	f7f8 fb18 	bl	8000ae8 <__aeabi_dcmpeq>
 80084b8:	ec4b ab19 	vmov	d9, sl, fp
 80084bc:	4680      	mov	r8, r0
 80084be:	b158      	cbz	r0, 80084d8 <_dtoa_r+0xe0>
 80084c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084c2:	2301      	movs	r3, #1
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 856b 	beq.w	8008fa4 <_dtoa_r+0xbac>
 80084ce:	4883      	ldr	r0, [pc, #524]	; (80086dc <_dtoa_r+0x2e4>)
 80084d0:	6018      	str	r0, [r3, #0]
 80084d2:	1e43      	subs	r3, r0, #1
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	e7df      	b.n	8008498 <_dtoa_r+0xa0>
 80084d8:	ec4b ab10 	vmov	d0, sl, fp
 80084dc:	aa10      	add	r2, sp, #64	; 0x40
 80084de:	a911      	add	r1, sp, #68	; 0x44
 80084e0:	4620      	mov	r0, r4
 80084e2:	f001 ff1f 	bl	800a324 <__d2b>
 80084e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80084ea:	ee08 0a10 	vmov	s16, r0
 80084ee:	2d00      	cmp	r5, #0
 80084f0:	f000 8084 	beq.w	80085fc <_dtoa_r+0x204>
 80084f4:	ee19 3a90 	vmov	r3, s19
 80084f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008500:	4656      	mov	r6, sl
 8008502:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800850a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800850e:	4b74      	ldr	r3, [pc, #464]	; (80086e0 <_dtoa_r+0x2e8>)
 8008510:	2200      	movs	r2, #0
 8008512:	4630      	mov	r0, r6
 8008514:	4639      	mov	r1, r7
 8008516:	f7f7 fec7 	bl	80002a8 <__aeabi_dsub>
 800851a:	a365      	add	r3, pc, #404	; (adr r3, 80086b0 <_dtoa_r+0x2b8>)
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f7f8 f87a 	bl	8000618 <__aeabi_dmul>
 8008524:	a364      	add	r3, pc, #400	; (adr r3, 80086b8 <_dtoa_r+0x2c0>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	f7f7 febf 	bl	80002ac <__adddf3>
 800852e:	4606      	mov	r6, r0
 8008530:	4628      	mov	r0, r5
 8008532:	460f      	mov	r7, r1
 8008534:	f7f8 f806 	bl	8000544 <__aeabi_i2d>
 8008538:	a361      	add	r3, pc, #388	; (adr r3, 80086c0 <_dtoa_r+0x2c8>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	f7f8 f86b 	bl	8000618 <__aeabi_dmul>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4630      	mov	r0, r6
 8008548:	4639      	mov	r1, r7
 800854a:	f7f7 feaf 	bl	80002ac <__adddf3>
 800854e:	4606      	mov	r6, r0
 8008550:	460f      	mov	r7, r1
 8008552:	f7f8 fb11 	bl	8000b78 <__aeabi_d2iz>
 8008556:	2200      	movs	r2, #0
 8008558:	9000      	str	r0, [sp, #0]
 800855a:	2300      	movs	r3, #0
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f7f8 facc 	bl	8000afc <__aeabi_dcmplt>
 8008564:	b150      	cbz	r0, 800857c <_dtoa_r+0x184>
 8008566:	9800      	ldr	r0, [sp, #0]
 8008568:	f7f7 ffec 	bl	8000544 <__aeabi_i2d>
 800856c:	4632      	mov	r2, r6
 800856e:	463b      	mov	r3, r7
 8008570:	f7f8 faba 	bl	8000ae8 <__aeabi_dcmpeq>
 8008574:	b910      	cbnz	r0, 800857c <_dtoa_r+0x184>
 8008576:	9b00      	ldr	r3, [sp, #0]
 8008578:	3b01      	subs	r3, #1
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	9b00      	ldr	r3, [sp, #0]
 800857e:	2b16      	cmp	r3, #22
 8008580:	d85a      	bhi.n	8008638 <_dtoa_r+0x240>
 8008582:	9a00      	ldr	r2, [sp, #0]
 8008584:	4b57      	ldr	r3, [pc, #348]	; (80086e4 <_dtoa_r+0x2ec>)
 8008586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	ec51 0b19 	vmov	r0, r1, d9
 8008592:	f7f8 fab3 	bl	8000afc <__aeabi_dcmplt>
 8008596:	2800      	cmp	r0, #0
 8008598:	d050      	beq.n	800863c <_dtoa_r+0x244>
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	3b01      	subs	r3, #1
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	2300      	movs	r3, #0
 80085a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085a6:	1b5d      	subs	r5, r3, r5
 80085a8:	1e6b      	subs	r3, r5, #1
 80085aa:	9305      	str	r3, [sp, #20]
 80085ac:	bf45      	ittet	mi
 80085ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80085b2:	9304      	strmi	r3, [sp, #16]
 80085b4:	2300      	movpl	r3, #0
 80085b6:	2300      	movmi	r3, #0
 80085b8:	bf4c      	ite	mi
 80085ba:	9305      	strmi	r3, [sp, #20]
 80085bc:	9304      	strpl	r3, [sp, #16]
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	db3d      	blt.n	8008640 <_dtoa_r+0x248>
 80085c4:	9b05      	ldr	r3, [sp, #20]
 80085c6:	9a00      	ldr	r2, [sp, #0]
 80085c8:	920a      	str	r2, [sp, #40]	; 0x28
 80085ca:	4413      	add	r3, r2
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9307      	str	r3, [sp, #28]
 80085d2:	9b06      	ldr	r3, [sp, #24]
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	f200 8089 	bhi.w	80086ec <_dtoa_r+0x2f4>
 80085da:	2b05      	cmp	r3, #5
 80085dc:	bfc4      	itt	gt
 80085de:	3b04      	subgt	r3, #4
 80085e0:	9306      	strgt	r3, [sp, #24]
 80085e2:	9b06      	ldr	r3, [sp, #24]
 80085e4:	f1a3 0302 	sub.w	r3, r3, #2
 80085e8:	bfcc      	ite	gt
 80085ea:	2500      	movgt	r5, #0
 80085ec:	2501      	movle	r5, #1
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	f200 8087 	bhi.w	8008702 <_dtoa_r+0x30a>
 80085f4:	e8df f003 	tbb	[pc, r3]
 80085f8:	59383a2d 	.word	0x59383a2d
 80085fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008600:	441d      	add	r5, r3
 8008602:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008606:	2b20      	cmp	r3, #32
 8008608:	bfc1      	itttt	gt
 800860a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800860e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008612:	fa0b f303 	lslgt.w	r3, fp, r3
 8008616:	fa26 f000 	lsrgt.w	r0, r6, r0
 800861a:	bfda      	itte	le
 800861c:	f1c3 0320 	rsble	r3, r3, #32
 8008620:	fa06 f003 	lslle.w	r0, r6, r3
 8008624:	4318      	orrgt	r0, r3
 8008626:	f7f7 ff7d 	bl	8000524 <__aeabi_ui2d>
 800862a:	2301      	movs	r3, #1
 800862c:	4606      	mov	r6, r0
 800862e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008632:	3d01      	subs	r5, #1
 8008634:	930e      	str	r3, [sp, #56]	; 0x38
 8008636:	e76a      	b.n	800850e <_dtoa_r+0x116>
 8008638:	2301      	movs	r3, #1
 800863a:	e7b2      	b.n	80085a2 <_dtoa_r+0x1aa>
 800863c:	900b      	str	r0, [sp, #44]	; 0x2c
 800863e:	e7b1      	b.n	80085a4 <_dtoa_r+0x1ac>
 8008640:	9b04      	ldr	r3, [sp, #16]
 8008642:	9a00      	ldr	r2, [sp, #0]
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	9304      	str	r3, [sp, #16]
 8008648:	4253      	negs	r3, r2
 800864a:	9307      	str	r3, [sp, #28]
 800864c:	2300      	movs	r3, #0
 800864e:	930a      	str	r3, [sp, #40]	; 0x28
 8008650:	e7bf      	b.n	80085d2 <_dtoa_r+0x1da>
 8008652:	2300      	movs	r3, #0
 8008654:	9308      	str	r3, [sp, #32]
 8008656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	dc55      	bgt.n	8008708 <_dtoa_r+0x310>
 800865c:	2301      	movs	r3, #1
 800865e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008662:	461a      	mov	r2, r3
 8008664:	9209      	str	r2, [sp, #36]	; 0x24
 8008666:	e00c      	b.n	8008682 <_dtoa_r+0x28a>
 8008668:	2301      	movs	r3, #1
 800866a:	e7f3      	b.n	8008654 <_dtoa_r+0x25c>
 800866c:	2300      	movs	r3, #0
 800866e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008670:	9308      	str	r3, [sp, #32]
 8008672:	9b00      	ldr	r3, [sp, #0]
 8008674:	4413      	add	r3, r2
 8008676:	9302      	str	r3, [sp, #8]
 8008678:	3301      	adds	r3, #1
 800867a:	2b01      	cmp	r3, #1
 800867c:	9303      	str	r3, [sp, #12]
 800867e:	bfb8      	it	lt
 8008680:	2301      	movlt	r3, #1
 8008682:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008684:	2200      	movs	r2, #0
 8008686:	6042      	str	r2, [r0, #4]
 8008688:	2204      	movs	r2, #4
 800868a:	f102 0614 	add.w	r6, r2, #20
 800868e:	429e      	cmp	r6, r3
 8008690:	6841      	ldr	r1, [r0, #4]
 8008692:	d93d      	bls.n	8008710 <_dtoa_r+0x318>
 8008694:	4620      	mov	r0, r4
 8008696:	f001 fa57 	bl	8009b48 <_Balloc>
 800869a:	9001      	str	r0, [sp, #4]
 800869c:	2800      	cmp	r0, #0
 800869e:	d13b      	bne.n	8008718 <_dtoa_r+0x320>
 80086a0:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <_dtoa_r+0x2f0>)
 80086a2:	4602      	mov	r2, r0
 80086a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80086a8:	e6c0      	b.n	800842c <_dtoa_r+0x34>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e7df      	b.n	800866e <_dtoa_r+0x276>
 80086ae:	bf00      	nop
 80086b0:	636f4361 	.word	0x636f4361
 80086b4:	3fd287a7 	.word	0x3fd287a7
 80086b8:	8b60c8b3 	.word	0x8b60c8b3
 80086bc:	3fc68a28 	.word	0x3fc68a28
 80086c0:	509f79fb 	.word	0x509f79fb
 80086c4:	3fd34413 	.word	0x3fd34413
 80086c8:	0800b20e 	.word	0x0800b20e
 80086cc:	0800b225 	.word	0x0800b225
 80086d0:	7ff00000 	.word	0x7ff00000
 80086d4:	0800b20a 	.word	0x0800b20a
 80086d8:	0800b201 	.word	0x0800b201
 80086dc:	0800b085 	.word	0x0800b085
 80086e0:	3ff80000 	.word	0x3ff80000
 80086e4:	0800b3f8 	.word	0x0800b3f8
 80086e8:	0800b280 	.word	0x0800b280
 80086ec:	2501      	movs	r5, #1
 80086ee:	2300      	movs	r3, #0
 80086f0:	9306      	str	r3, [sp, #24]
 80086f2:	9508      	str	r5, [sp, #32]
 80086f4:	f04f 33ff 	mov.w	r3, #4294967295
 80086f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086fc:	2200      	movs	r2, #0
 80086fe:	2312      	movs	r3, #18
 8008700:	e7b0      	b.n	8008664 <_dtoa_r+0x26c>
 8008702:	2301      	movs	r3, #1
 8008704:	9308      	str	r3, [sp, #32]
 8008706:	e7f5      	b.n	80086f4 <_dtoa_r+0x2fc>
 8008708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800870e:	e7b8      	b.n	8008682 <_dtoa_r+0x28a>
 8008710:	3101      	adds	r1, #1
 8008712:	6041      	str	r1, [r0, #4]
 8008714:	0052      	lsls	r2, r2, #1
 8008716:	e7b8      	b.n	800868a <_dtoa_r+0x292>
 8008718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800871a:	9a01      	ldr	r2, [sp, #4]
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	2b0e      	cmp	r3, #14
 8008722:	f200 809d 	bhi.w	8008860 <_dtoa_r+0x468>
 8008726:	2d00      	cmp	r5, #0
 8008728:	f000 809a 	beq.w	8008860 <_dtoa_r+0x468>
 800872c:	9b00      	ldr	r3, [sp, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	dd32      	ble.n	8008798 <_dtoa_r+0x3a0>
 8008732:	4ab7      	ldr	r2, [pc, #732]	; (8008a10 <_dtoa_r+0x618>)
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800873c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008740:	9b00      	ldr	r3, [sp, #0]
 8008742:	05d8      	lsls	r0, r3, #23
 8008744:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008748:	d516      	bpl.n	8008778 <_dtoa_r+0x380>
 800874a:	4bb2      	ldr	r3, [pc, #712]	; (8008a14 <_dtoa_r+0x61c>)
 800874c:	ec51 0b19 	vmov	r0, r1, d9
 8008750:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008754:	f7f8 f88a 	bl	800086c <__aeabi_ddiv>
 8008758:	f007 070f 	and.w	r7, r7, #15
 800875c:	4682      	mov	sl, r0
 800875e:	468b      	mov	fp, r1
 8008760:	2503      	movs	r5, #3
 8008762:	4eac      	ldr	r6, [pc, #688]	; (8008a14 <_dtoa_r+0x61c>)
 8008764:	b957      	cbnz	r7, 800877c <_dtoa_r+0x384>
 8008766:	4642      	mov	r2, r8
 8008768:	464b      	mov	r3, r9
 800876a:	4650      	mov	r0, sl
 800876c:	4659      	mov	r1, fp
 800876e:	f7f8 f87d 	bl	800086c <__aeabi_ddiv>
 8008772:	4682      	mov	sl, r0
 8008774:	468b      	mov	fp, r1
 8008776:	e028      	b.n	80087ca <_dtoa_r+0x3d2>
 8008778:	2502      	movs	r5, #2
 800877a:	e7f2      	b.n	8008762 <_dtoa_r+0x36a>
 800877c:	07f9      	lsls	r1, r7, #31
 800877e:	d508      	bpl.n	8008792 <_dtoa_r+0x39a>
 8008780:	4640      	mov	r0, r8
 8008782:	4649      	mov	r1, r9
 8008784:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008788:	f7f7 ff46 	bl	8000618 <__aeabi_dmul>
 800878c:	3501      	adds	r5, #1
 800878e:	4680      	mov	r8, r0
 8008790:	4689      	mov	r9, r1
 8008792:	107f      	asrs	r7, r7, #1
 8008794:	3608      	adds	r6, #8
 8008796:	e7e5      	b.n	8008764 <_dtoa_r+0x36c>
 8008798:	f000 809b 	beq.w	80088d2 <_dtoa_r+0x4da>
 800879c:	9b00      	ldr	r3, [sp, #0]
 800879e:	4f9d      	ldr	r7, [pc, #628]	; (8008a14 <_dtoa_r+0x61c>)
 80087a0:	425e      	negs	r6, r3
 80087a2:	4b9b      	ldr	r3, [pc, #620]	; (8008a10 <_dtoa_r+0x618>)
 80087a4:	f006 020f 	and.w	r2, r6, #15
 80087a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	ec51 0b19 	vmov	r0, r1, d9
 80087b4:	f7f7 ff30 	bl	8000618 <__aeabi_dmul>
 80087b8:	1136      	asrs	r6, r6, #4
 80087ba:	4682      	mov	sl, r0
 80087bc:	468b      	mov	fp, r1
 80087be:	2300      	movs	r3, #0
 80087c0:	2502      	movs	r5, #2
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	d17a      	bne.n	80088bc <_dtoa_r+0x4c4>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1d3      	bne.n	8008772 <_dtoa_r+0x37a>
 80087ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8082 	beq.w	80088d6 <_dtoa_r+0x4de>
 80087d2:	4b91      	ldr	r3, [pc, #580]	; (8008a18 <_dtoa_r+0x620>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	4650      	mov	r0, sl
 80087d8:	4659      	mov	r1, fp
 80087da:	f7f8 f98f 	bl	8000afc <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d079      	beq.n	80088d6 <_dtoa_r+0x4de>
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d076      	beq.n	80088d6 <_dtoa_r+0x4de>
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dd36      	ble.n	800885c <_dtoa_r+0x464>
 80087ee:	9b00      	ldr	r3, [sp, #0]
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	1e5f      	subs	r7, r3, #1
 80087f6:	2200      	movs	r2, #0
 80087f8:	4b88      	ldr	r3, [pc, #544]	; (8008a1c <_dtoa_r+0x624>)
 80087fa:	f7f7 ff0d 	bl	8000618 <__aeabi_dmul>
 80087fe:	9e02      	ldr	r6, [sp, #8]
 8008800:	4682      	mov	sl, r0
 8008802:	468b      	mov	fp, r1
 8008804:	3501      	adds	r5, #1
 8008806:	4628      	mov	r0, r5
 8008808:	f7f7 fe9c 	bl	8000544 <__aeabi_i2d>
 800880c:	4652      	mov	r2, sl
 800880e:	465b      	mov	r3, fp
 8008810:	f7f7 ff02 	bl	8000618 <__aeabi_dmul>
 8008814:	4b82      	ldr	r3, [pc, #520]	; (8008a20 <_dtoa_r+0x628>)
 8008816:	2200      	movs	r2, #0
 8008818:	f7f7 fd48 	bl	80002ac <__adddf3>
 800881c:	46d0      	mov	r8, sl
 800881e:	46d9      	mov	r9, fp
 8008820:	4682      	mov	sl, r0
 8008822:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008826:	2e00      	cmp	r6, #0
 8008828:	d158      	bne.n	80088dc <_dtoa_r+0x4e4>
 800882a:	4b7e      	ldr	r3, [pc, #504]	; (8008a24 <_dtoa_r+0x62c>)
 800882c:	2200      	movs	r2, #0
 800882e:	4640      	mov	r0, r8
 8008830:	4649      	mov	r1, r9
 8008832:	f7f7 fd39 	bl	80002a8 <__aeabi_dsub>
 8008836:	4652      	mov	r2, sl
 8008838:	465b      	mov	r3, fp
 800883a:	4680      	mov	r8, r0
 800883c:	4689      	mov	r9, r1
 800883e:	f7f8 f97b 	bl	8000b38 <__aeabi_dcmpgt>
 8008842:	2800      	cmp	r0, #0
 8008844:	f040 8295 	bne.w	8008d72 <_dtoa_r+0x97a>
 8008848:	4652      	mov	r2, sl
 800884a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800884e:	4640      	mov	r0, r8
 8008850:	4649      	mov	r1, r9
 8008852:	f7f8 f953 	bl	8000afc <__aeabi_dcmplt>
 8008856:	2800      	cmp	r0, #0
 8008858:	f040 8289 	bne.w	8008d6e <_dtoa_r+0x976>
 800885c:	ec5b ab19 	vmov	sl, fp, d9
 8008860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008862:	2b00      	cmp	r3, #0
 8008864:	f2c0 8148 	blt.w	8008af8 <_dtoa_r+0x700>
 8008868:	9a00      	ldr	r2, [sp, #0]
 800886a:	2a0e      	cmp	r2, #14
 800886c:	f300 8144 	bgt.w	8008af8 <_dtoa_r+0x700>
 8008870:	4b67      	ldr	r3, [pc, #412]	; (8008a10 <_dtoa_r+0x618>)
 8008872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008876:	e9d3 8900 	ldrd	r8, r9, [r3]
 800887a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	f280 80d5 	bge.w	8008a2c <_dtoa_r+0x634>
 8008882:	9b03      	ldr	r3, [sp, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f300 80d1 	bgt.w	8008a2c <_dtoa_r+0x634>
 800888a:	f040 826f 	bne.w	8008d6c <_dtoa_r+0x974>
 800888e:	4b65      	ldr	r3, [pc, #404]	; (8008a24 <_dtoa_r+0x62c>)
 8008890:	2200      	movs	r2, #0
 8008892:	4640      	mov	r0, r8
 8008894:	4649      	mov	r1, r9
 8008896:	f7f7 febf 	bl	8000618 <__aeabi_dmul>
 800889a:	4652      	mov	r2, sl
 800889c:	465b      	mov	r3, fp
 800889e:	f7f8 f941 	bl	8000b24 <__aeabi_dcmpge>
 80088a2:	9e03      	ldr	r6, [sp, #12]
 80088a4:	4637      	mov	r7, r6
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f040 8245 	bne.w	8008d36 <_dtoa_r+0x93e>
 80088ac:	9d01      	ldr	r5, [sp, #4]
 80088ae:	2331      	movs	r3, #49	; 0x31
 80088b0:	f805 3b01 	strb.w	r3, [r5], #1
 80088b4:	9b00      	ldr	r3, [sp, #0]
 80088b6:	3301      	adds	r3, #1
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	e240      	b.n	8008d3e <_dtoa_r+0x946>
 80088bc:	07f2      	lsls	r2, r6, #31
 80088be:	d505      	bpl.n	80088cc <_dtoa_r+0x4d4>
 80088c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c4:	f7f7 fea8 	bl	8000618 <__aeabi_dmul>
 80088c8:	3501      	adds	r5, #1
 80088ca:	2301      	movs	r3, #1
 80088cc:	1076      	asrs	r6, r6, #1
 80088ce:	3708      	adds	r7, #8
 80088d0:	e777      	b.n	80087c2 <_dtoa_r+0x3ca>
 80088d2:	2502      	movs	r5, #2
 80088d4:	e779      	b.n	80087ca <_dtoa_r+0x3d2>
 80088d6:	9f00      	ldr	r7, [sp, #0]
 80088d8:	9e03      	ldr	r6, [sp, #12]
 80088da:	e794      	b.n	8008806 <_dtoa_r+0x40e>
 80088dc:	9901      	ldr	r1, [sp, #4]
 80088de:	4b4c      	ldr	r3, [pc, #304]	; (8008a10 <_dtoa_r+0x618>)
 80088e0:	4431      	add	r1, r6
 80088e2:	910d      	str	r1, [sp, #52]	; 0x34
 80088e4:	9908      	ldr	r1, [sp, #32]
 80088e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80088ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088ee:	2900      	cmp	r1, #0
 80088f0:	d043      	beq.n	800897a <_dtoa_r+0x582>
 80088f2:	494d      	ldr	r1, [pc, #308]	; (8008a28 <_dtoa_r+0x630>)
 80088f4:	2000      	movs	r0, #0
 80088f6:	f7f7 ffb9 	bl	800086c <__aeabi_ddiv>
 80088fa:	4652      	mov	r2, sl
 80088fc:	465b      	mov	r3, fp
 80088fe:	f7f7 fcd3 	bl	80002a8 <__aeabi_dsub>
 8008902:	9d01      	ldr	r5, [sp, #4]
 8008904:	4682      	mov	sl, r0
 8008906:	468b      	mov	fp, r1
 8008908:	4649      	mov	r1, r9
 800890a:	4640      	mov	r0, r8
 800890c:	f7f8 f934 	bl	8000b78 <__aeabi_d2iz>
 8008910:	4606      	mov	r6, r0
 8008912:	f7f7 fe17 	bl	8000544 <__aeabi_i2d>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4640      	mov	r0, r8
 800891c:	4649      	mov	r1, r9
 800891e:	f7f7 fcc3 	bl	80002a8 <__aeabi_dsub>
 8008922:	3630      	adds	r6, #48	; 0x30
 8008924:	f805 6b01 	strb.w	r6, [r5], #1
 8008928:	4652      	mov	r2, sl
 800892a:	465b      	mov	r3, fp
 800892c:	4680      	mov	r8, r0
 800892e:	4689      	mov	r9, r1
 8008930:	f7f8 f8e4 	bl	8000afc <__aeabi_dcmplt>
 8008934:	2800      	cmp	r0, #0
 8008936:	d163      	bne.n	8008a00 <_dtoa_r+0x608>
 8008938:	4642      	mov	r2, r8
 800893a:	464b      	mov	r3, r9
 800893c:	4936      	ldr	r1, [pc, #216]	; (8008a18 <_dtoa_r+0x620>)
 800893e:	2000      	movs	r0, #0
 8008940:	f7f7 fcb2 	bl	80002a8 <__aeabi_dsub>
 8008944:	4652      	mov	r2, sl
 8008946:	465b      	mov	r3, fp
 8008948:	f7f8 f8d8 	bl	8000afc <__aeabi_dcmplt>
 800894c:	2800      	cmp	r0, #0
 800894e:	f040 80b5 	bne.w	8008abc <_dtoa_r+0x6c4>
 8008952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008954:	429d      	cmp	r5, r3
 8008956:	d081      	beq.n	800885c <_dtoa_r+0x464>
 8008958:	4b30      	ldr	r3, [pc, #192]	; (8008a1c <_dtoa_r+0x624>)
 800895a:	2200      	movs	r2, #0
 800895c:	4650      	mov	r0, sl
 800895e:	4659      	mov	r1, fp
 8008960:	f7f7 fe5a 	bl	8000618 <__aeabi_dmul>
 8008964:	4b2d      	ldr	r3, [pc, #180]	; (8008a1c <_dtoa_r+0x624>)
 8008966:	4682      	mov	sl, r0
 8008968:	468b      	mov	fp, r1
 800896a:	4640      	mov	r0, r8
 800896c:	4649      	mov	r1, r9
 800896e:	2200      	movs	r2, #0
 8008970:	f7f7 fe52 	bl	8000618 <__aeabi_dmul>
 8008974:	4680      	mov	r8, r0
 8008976:	4689      	mov	r9, r1
 8008978:	e7c6      	b.n	8008908 <_dtoa_r+0x510>
 800897a:	4650      	mov	r0, sl
 800897c:	4659      	mov	r1, fp
 800897e:	f7f7 fe4b 	bl	8000618 <__aeabi_dmul>
 8008982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008984:	9d01      	ldr	r5, [sp, #4]
 8008986:	930f      	str	r3, [sp, #60]	; 0x3c
 8008988:	4682      	mov	sl, r0
 800898a:	468b      	mov	fp, r1
 800898c:	4649      	mov	r1, r9
 800898e:	4640      	mov	r0, r8
 8008990:	f7f8 f8f2 	bl	8000b78 <__aeabi_d2iz>
 8008994:	4606      	mov	r6, r0
 8008996:	f7f7 fdd5 	bl	8000544 <__aeabi_i2d>
 800899a:	3630      	adds	r6, #48	; 0x30
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4640      	mov	r0, r8
 80089a2:	4649      	mov	r1, r9
 80089a4:	f7f7 fc80 	bl	80002a8 <__aeabi_dsub>
 80089a8:	f805 6b01 	strb.w	r6, [r5], #1
 80089ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ae:	429d      	cmp	r5, r3
 80089b0:	4680      	mov	r8, r0
 80089b2:	4689      	mov	r9, r1
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	d124      	bne.n	8008a04 <_dtoa_r+0x60c>
 80089ba:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <_dtoa_r+0x630>)
 80089bc:	4650      	mov	r0, sl
 80089be:	4659      	mov	r1, fp
 80089c0:	f7f7 fc74 	bl	80002ac <__adddf3>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4640      	mov	r0, r8
 80089ca:	4649      	mov	r1, r9
 80089cc:	f7f8 f8b4 	bl	8000b38 <__aeabi_dcmpgt>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d173      	bne.n	8008abc <_dtoa_r+0x6c4>
 80089d4:	4652      	mov	r2, sl
 80089d6:	465b      	mov	r3, fp
 80089d8:	4913      	ldr	r1, [pc, #76]	; (8008a28 <_dtoa_r+0x630>)
 80089da:	2000      	movs	r0, #0
 80089dc:	f7f7 fc64 	bl	80002a8 <__aeabi_dsub>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4640      	mov	r0, r8
 80089e6:	4649      	mov	r1, r9
 80089e8:	f7f8 f888 	bl	8000afc <__aeabi_dcmplt>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f43f af35 	beq.w	800885c <_dtoa_r+0x464>
 80089f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80089f4:	1e6b      	subs	r3, r5, #1
 80089f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80089f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089fc:	2b30      	cmp	r3, #48	; 0x30
 80089fe:	d0f8      	beq.n	80089f2 <_dtoa_r+0x5fa>
 8008a00:	9700      	str	r7, [sp, #0]
 8008a02:	e049      	b.n	8008a98 <_dtoa_r+0x6a0>
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <_dtoa_r+0x624>)
 8008a06:	f7f7 fe07 	bl	8000618 <__aeabi_dmul>
 8008a0a:	4680      	mov	r8, r0
 8008a0c:	4689      	mov	r9, r1
 8008a0e:	e7bd      	b.n	800898c <_dtoa_r+0x594>
 8008a10:	0800b3f8 	.word	0x0800b3f8
 8008a14:	0800b3d0 	.word	0x0800b3d0
 8008a18:	3ff00000 	.word	0x3ff00000
 8008a1c:	40240000 	.word	0x40240000
 8008a20:	401c0000 	.word	0x401c0000
 8008a24:	40140000 	.word	0x40140000
 8008a28:	3fe00000 	.word	0x3fe00000
 8008a2c:	9d01      	ldr	r5, [sp, #4]
 8008a2e:	4656      	mov	r6, sl
 8008a30:	465f      	mov	r7, fp
 8008a32:	4642      	mov	r2, r8
 8008a34:	464b      	mov	r3, r9
 8008a36:	4630      	mov	r0, r6
 8008a38:	4639      	mov	r1, r7
 8008a3a:	f7f7 ff17 	bl	800086c <__aeabi_ddiv>
 8008a3e:	f7f8 f89b 	bl	8000b78 <__aeabi_d2iz>
 8008a42:	4682      	mov	sl, r0
 8008a44:	f7f7 fd7e 	bl	8000544 <__aeabi_i2d>
 8008a48:	4642      	mov	r2, r8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	f7f7 fde4 	bl	8000618 <__aeabi_dmul>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008a5c:	f7f7 fc24 	bl	80002a8 <__aeabi_dsub>
 8008a60:	f805 6b01 	strb.w	r6, [r5], #1
 8008a64:	9e01      	ldr	r6, [sp, #4]
 8008a66:	9f03      	ldr	r7, [sp, #12]
 8008a68:	1bae      	subs	r6, r5, r6
 8008a6a:	42b7      	cmp	r7, r6
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	d135      	bne.n	8008ade <_dtoa_r+0x6e6>
 8008a72:	f7f7 fc1b 	bl	80002ac <__adddf3>
 8008a76:	4642      	mov	r2, r8
 8008a78:	464b      	mov	r3, r9
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	460f      	mov	r7, r1
 8008a7e:	f7f8 f85b 	bl	8000b38 <__aeabi_dcmpgt>
 8008a82:	b9d0      	cbnz	r0, 8008aba <_dtoa_r+0x6c2>
 8008a84:	4642      	mov	r2, r8
 8008a86:	464b      	mov	r3, r9
 8008a88:	4630      	mov	r0, r6
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	f7f8 f82c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a90:	b110      	cbz	r0, 8008a98 <_dtoa_r+0x6a0>
 8008a92:	f01a 0f01 	tst.w	sl, #1
 8008a96:	d110      	bne.n	8008aba <_dtoa_r+0x6c2>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	ee18 1a10 	vmov	r1, s16
 8008a9e:	f001 f893 	bl	8009bc8 <_Bfree>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	9800      	ldr	r0, [sp, #0]
 8008aa6:	702b      	strb	r3, [r5, #0]
 8008aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aaa:	3001      	adds	r0, #1
 8008aac:	6018      	str	r0, [r3, #0]
 8008aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f43f acf1 	beq.w	8008498 <_dtoa_r+0xa0>
 8008ab6:	601d      	str	r5, [r3, #0]
 8008ab8:	e4ee      	b.n	8008498 <_dtoa_r+0xa0>
 8008aba:	9f00      	ldr	r7, [sp, #0]
 8008abc:	462b      	mov	r3, r5
 8008abe:	461d      	mov	r5, r3
 8008ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ac4:	2a39      	cmp	r2, #57	; 0x39
 8008ac6:	d106      	bne.n	8008ad6 <_dtoa_r+0x6de>
 8008ac8:	9a01      	ldr	r2, [sp, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d1f7      	bne.n	8008abe <_dtoa_r+0x6c6>
 8008ace:	9901      	ldr	r1, [sp, #4]
 8008ad0:	2230      	movs	r2, #48	; 0x30
 8008ad2:	3701      	adds	r7, #1
 8008ad4:	700a      	strb	r2, [r1, #0]
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	3201      	adds	r2, #1
 8008ada:	701a      	strb	r2, [r3, #0]
 8008adc:	e790      	b.n	8008a00 <_dtoa_r+0x608>
 8008ade:	4ba6      	ldr	r3, [pc, #664]	; (8008d78 <_dtoa_r+0x980>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f7f7 fd99 	bl	8000618 <__aeabi_dmul>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4606      	mov	r6, r0
 8008aec:	460f      	mov	r7, r1
 8008aee:	f7f7 fffb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d09d      	beq.n	8008a32 <_dtoa_r+0x63a>
 8008af6:	e7cf      	b.n	8008a98 <_dtoa_r+0x6a0>
 8008af8:	9a08      	ldr	r2, [sp, #32]
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	f000 80d7 	beq.w	8008cae <_dtoa_r+0x8b6>
 8008b00:	9a06      	ldr	r2, [sp, #24]
 8008b02:	2a01      	cmp	r2, #1
 8008b04:	f300 80ba 	bgt.w	8008c7c <_dtoa_r+0x884>
 8008b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	f000 80b2 	beq.w	8008c74 <_dtoa_r+0x87c>
 8008b10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b14:	9e07      	ldr	r6, [sp, #28]
 8008b16:	9d04      	ldr	r5, [sp, #16]
 8008b18:	9a04      	ldr	r2, [sp, #16]
 8008b1a:	441a      	add	r2, r3
 8008b1c:	9204      	str	r2, [sp, #16]
 8008b1e:	9a05      	ldr	r2, [sp, #20]
 8008b20:	2101      	movs	r1, #1
 8008b22:	441a      	add	r2, r3
 8008b24:	4620      	mov	r0, r4
 8008b26:	9205      	str	r2, [sp, #20]
 8008b28:	f001 f950 	bl	8009dcc <__i2b>
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	dd0c      	ble.n	8008b4c <_dtoa_r+0x754>
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	dd09      	ble.n	8008b4c <_dtoa_r+0x754>
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	9a04      	ldr	r2, [sp, #16]
 8008b3c:	bfa8      	it	ge
 8008b3e:	462b      	movge	r3, r5
 8008b40:	1ad2      	subs	r2, r2, r3
 8008b42:	9204      	str	r2, [sp, #16]
 8008b44:	9a05      	ldr	r2, [sp, #20]
 8008b46:	1aed      	subs	r5, r5, r3
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	9b07      	ldr	r3, [sp, #28]
 8008b4e:	b31b      	cbz	r3, 8008b98 <_dtoa_r+0x7a0>
 8008b50:	9b08      	ldr	r3, [sp, #32]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 80af 	beq.w	8008cb6 <_dtoa_r+0x8be>
 8008b58:	2e00      	cmp	r6, #0
 8008b5a:	dd13      	ble.n	8008b84 <_dtoa_r+0x78c>
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	4632      	mov	r2, r6
 8008b60:	4620      	mov	r0, r4
 8008b62:	f001 f9f3 	bl	8009f4c <__pow5mult>
 8008b66:	ee18 2a10 	vmov	r2, s16
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f001 f942 	bl	8009df8 <__multiply>
 8008b74:	ee18 1a10 	vmov	r1, s16
 8008b78:	4680      	mov	r8, r0
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f001 f824 	bl	8009bc8 <_Bfree>
 8008b80:	ee08 8a10 	vmov	s16, r8
 8008b84:	9b07      	ldr	r3, [sp, #28]
 8008b86:	1b9a      	subs	r2, r3, r6
 8008b88:	d006      	beq.n	8008b98 <_dtoa_r+0x7a0>
 8008b8a:	ee18 1a10 	vmov	r1, s16
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f001 f9dc 	bl	8009f4c <__pow5mult>
 8008b94:	ee08 0a10 	vmov	s16, r0
 8008b98:	2101      	movs	r1, #1
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f001 f916 	bl	8009dcc <__i2b>
 8008ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	f340 8088 	ble.w	8008cba <_dtoa_r+0x8c2>
 8008baa:	461a      	mov	r2, r3
 8008bac:	4601      	mov	r1, r0
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f001 f9cc 	bl	8009f4c <__pow5mult>
 8008bb4:	9b06      	ldr	r3, [sp, #24]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	4606      	mov	r6, r0
 8008bba:	f340 8081 	ble.w	8008cc0 <_dtoa_r+0x8c8>
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	6933      	ldr	r3, [r6, #16]
 8008bc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008bc8:	6918      	ldr	r0, [r3, #16]
 8008bca:	f001 f8af 	bl	8009d2c <__hi0bits>
 8008bce:	f1c0 0020 	rsb	r0, r0, #32
 8008bd2:	9b05      	ldr	r3, [sp, #20]
 8008bd4:	4418      	add	r0, r3
 8008bd6:	f010 001f 	ands.w	r0, r0, #31
 8008bda:	f000 8092 	beq.w	8008d02 <_dtoa_r+0x90a>
 8008bde:	f1c0 0320 	rsb	r3, r0, #32
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	f340 808a 	ble.w	8008cfc <_dtoa_r+0x904>
 8008be8:	f1c0 001c 	rsb	r0, r0, #28
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	4403      	add	r3, r0
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	9b05      	ldr	r3, [sp, #20]
 8008bf4:	4403      	add	r3, r0
 8008bf6:	4405      	add	r5, r0
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dd07      	ble.n	8008c10 <_dtoa_r+0x818>
 8008c00:	ee18 1a10 	vmov	r1, s16
 8008c04:	461a      	mov	r2, r3
 8008c06:	4620      	mov	r0, r4
 8008c08:	f001 f9fa 	bl	800a000 <__lshift>
 8008c0c:	ee08 0a10 	vmov	s16, r0
 8008c10:	9b05      	ldr	r3, [sp, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	dd05      	ble.n	8008c22 <_dtoa_r+0x82a>
 8008c16:	4631      	mov	r1, r6
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f001 f9f0 	bl	800a000 <__lshift>
 8008c20:	4606      	mov	r6, r0
 8008c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d06e      	beq.n	8008d06 <_dtoa_r+0x90e>
 8008c28:	ee18 0a10 	vmov	r0, s16
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	f001 fa57 	bl	800a0e0 <__mcmp>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	da67      	bge.n	8008d06 <_dtoa_r+0x90e>
 8008c36:	9b00      	ldr	r3, [sp, #0]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	ee18 1a10 	vmov	r1, s16
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	220a      	movs	r2, #10
 8008c42:	2300      	movs	r3, #0
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 ffe1 	bl	8009c0c <__multadd>
 8008c4a:	9b08      	ldr	r3, [sp, #32]
 8008c4c:	ee08 0a10 	vmov	s16, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 81b1 	beq.w	8008fb8 <_dtoa_r+0xbc0>
 8008c56:	2300      	movs	r3, #0
 8008c58:	4639      	mov	r1, r7
 8008c5a:	220a      	movs	r2, #10
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 ffd5 	bl	8009c0c <__multadd>
 8008c62:	9b02      	ldr	r3, [sp, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	4607      	mov	r7, r0
 8008c68:	f300 808e 	bgt.w	8008d88 <_dtoa_r+0x990>
 8008c6c:	9b06      	ldr	r3, [sp, #24]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	dc51      	bgt.n	8008d16 <_dtoa_r+0x91e>
 8008c72:	e089      	b.n	8008d88 <_dtoa_r+0x990>
 8008c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c7a:	e74b      	b.n	8008b14 <_dtoa_r+0x71c>
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	1e5e      	subs	r6, r3, #1
 8008c80:	9b07      	ldr	r3, [sp, #28]
 8008c82:	42b3      	cmp	r3, r6
 8008c84:	bfbf      	itttt	lt
 8008c86:	9b07      	ldrlt	r3, [sp, #28]
 8008c88:	9607      	strlt	r6, [sp, #28]
 8008c8a:	1af2      	sublt	r2, r6, r3
 8008c8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c8e:	bfb6      	itet	lt
 8008c90:	189b      	addlt	r3, r3, r2
 8008c92:	1b9e      	subge	r6, r3, r6
 8008c94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	bfb8      	it	lt
 8008c9a:	2600      	movlt	r6, #0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bfb7      	itett	lt
 8008ca0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ca4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ca8:	1a9d      	sublt	r5, r3, r2
 8008caa:	2300      	movlt	r3, #0
 8008cac:	e734      	b.n	8008b18 <_dtoa_r+0x720>
 8008cae:	9e07      	ldr	r6, [sp, #28]
 8008cb0:	9d04      	ldr	r5, [sp, #16]
 8008cb2:	9f08      	ldr	r7, [sp, #32]
 8008cb4:	e73b      	b.n	8008b2e <_dtoa_r+0x736>
 8008cb6:	9a07      	ldr	r2, [sp, #28]
 8008cb8:	e767      	b.n	8008b8a <_dtoa_r+0x792>
 8008cba:	9b06      	ldr	r3, [sp, #24]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	dc18      	bgt.n	8008cf2 <_dtoa_r+0x8fa>
 8008cc0:	f1ba 0f00 	cmp.w	sl, #0
 8008cc4:	d115      	bne.n	8008cf2 <_dtoa_r+0x8fa>
 8008cc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cca:	b993      	cbnz	r3, 8008cf2 <_dtoa_r+0x8fa>
 8008ccc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cd0:	0d1b      	lsrs	r3, r3, #20
 8008cd2:	051b      	lsls	r3, r3, #20
 8008cd4:	b183      	cbz	r3, 8008cf8 <_dtoa_r+0x900>
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	9b05      	ldr	r3, [sp, #20]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	9305      	str	r3, [sp, #20]
 8008ce2:	f04f 0801 	mov.w	r8, #1
 8008ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f47f af6a 	bne.w	8008bc2 <_dtoa_r+0x7ca>
 8008cee:	2001      	movs	r0, #1
 8008cf0:	e76f      	b.n	8008bd2 <_dtoa_r+0x7da>
 8008cf2:	f04f 0800 	mov.w	r8, #0
 8008cf6:	e7f6      	b.n	8008ce6 <_dtoa_r+0x8ee>
 8008cf8:	4698      	mov	r8, r3
 8008cfa:	e7f4      	b.n	8008ce6 <_dtoa_r+0x8ee>
 8008cfc:	f43f af7d 	beq.w	8008bfa <_dtoa_r+0x802>
 8008d00:	4618      	mov	r0, r3
 8008d02:	301c      	adds	r0, #28
 8008d04:	e772      	b.n	8008bec <_dtoa_r+0x7f4>
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	dc37      	bgt.n	8008d7c <_dtoa_r+0x984>
 8008d0c:	9b06      	ldr	r3, [sp, #24]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	dd34      	ble.n	8008d7c <_dtoa_r+0x984>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	9b02      	ldr	r3, [sp, #8]
 8008d18:	b96b      	cbnz	r3, 8008d36 <_dtoa_r+0x93e>
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	2205      	movs	r2, #5
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 ff74 	bl	8009c0c <__multadd>
 8008d24:	4601      	mov	r1, r0
 8008d26:	4606      	mov	r6, r0
 8008d28:	ee18 0a10 	vmov	r0, s16
 8008d2c:	f001 f9d8 	bl	800a0e0 <__mcmp>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	f73f adbb 	bgt.w	80088ac <_dtoa_r+0x4b4>
 8008d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d38:	9d01      	ldr	r5, [sp, #4]
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	f04f 0800 	mov.w	r8, #0
 8008d42:	4631      	mov	r1, r6
 8008d44:	4620      	mov	r0, r4
 8008d46:	f000 ff3f 	bl	8009bc8 <_Bfree>
 8008d4a:	2f00      	cmp	r7, #0
 8008d4c:	f43f aea4 	beq.w	8008a98 <_dtoa_r+0x6a0>
 8008d50:	f1b8 0f00 	cmp.w	r8, #0
 8008d54:	d005      	beq.n	8008d62 <_dtoa_r+0x96a>
 8008d56:	45b8      	cmp	r8, r7
 8008d58:	d003      	beq.n	8008d62 <_dtoa_r+0x96a>
 8008d5a:	4641      	mov	r1, r8
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 ff33 	bl	8009bc8 <_Bfree>
 8008d62:	4639      	mov	r1, r7
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 ff2f 	bl	8009bc8 <_Bfree>
 8008d6a:	e695      	b.n	8008a98 <_dtoa_r+0x6a0>
 8008d6c:	2600      	movs	r6, #0
 8008d6e:	4637      	mov	r7, r6
 8008d70:	e7e1      	b.n	8008d36 <_dtoa_r+0x93e>
 8008d72:	9700      	str	r7, [sp, #0]
 8008d74:	4637      	mov	r7, r6
 8008d76:	e599      	b.n	80088ac <_dtoa_r+0x4b4>
 8008d78:	40240000 	.word	0x40240000
 8008d7c:	9b08      	ldr	r3, [sp, #32]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 80ca 	beq.w	8008f18 <_dtoa_r+0xb20>
 8008d84:	9b03      	ldr	r3, [sp, #12]
 8008d86:	9302      	str	r3, [sp, #8]
 8008d88:	2d00      	cmp	r5, #0
 8008d8a:	dd05      	ble.n	8008d98 <_dtoa_r+0x9a0>
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	462a      	mov	r2, r5
 8008d90:	4620      	mov	r0, r4
 8008d92:	f001 f935 	bl	800a000 <__lshift>
 8008d96:	4607      	mov	r7, r0
 8008d98:	f1b8 0f00 	cmp.w	r8, #0
 8008d9c:	d05b      	beq.n	8008e56 <_dtoa_r+0xa5e>
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 fed1 	bl	8009b48 <_Balloc>
 8008da6:	4605      	mov	r5, r0
 8008da8:	b928      	cbnz	r0, 8008db6 <_dtoa_r+0x9be>
 8008daa:	4b87      	ldr	r3, [pc, #540]	; (8008fc8 <_dtoa_r+0xbd0>)
 8008dac:	4602      	mov	r2, r0
 8008dae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008db2:	f7ff bb3b 	b.w	800842c <_dtoa_r+0x34>
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	3202      	adds	r2, #2
 8008dba:	0092      	lsls	r2, r2, #2
 8008dbc:	f107 010c 	add.w	r1, r7, #12
 8008dc0:	300c      	adds	r0, #12
 8008dc2:	f000 feb3 	bl	8009b2c <memcpy>
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	4629      	mov	r1, r5
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f001 f918 	bl	800a000 <__lshift>
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	f103 0901 	add.w	r9, r3, #1
 8008dd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008dda:	4413      	add	r3, r2
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	f00a 0301 	and.w	r3, sl, #1
 8008de2:	46b8      	mov	r8, r7
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	4607      	mov	r7, r0
 8008de8:	4631      	mov	r1, r6
 8008dea:	ee18 0a10 	vmov	r0, s16
 8008dee:	f7ff fa77 	bl	80082e0 <quorem>
 8008df2:	4641      	mov	r1, r8
 8008df4:	9002      	str	r0, [sp, #8]
 8008df6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008dfa:	ee18 0a10 	vmov	r0, s16
 8008dfe:	f001 f96f 	bl	800a0e0 <__mcmp>
 8008e02:	463a      	mov	r2, r7
 8008e04:	9003      	str	r0, [sp, #12]
 8008e06:	4631      	mov	r1, r6
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f001 f985 	bl	800a118 <__mdiff>
 8008e0e:	68c2      	ldr	r2, [r0, #12]
 8008e10:	f109 3bff 	add.w	fp, r9, #4294967295
 8008e14:	4605      	mov	r5, r0
 8008e16:	bb02      	cbnz	r2, 8008e5a <_dtoa_r+0xa62>
 8008e18:	4601      	mov	r1, r0
 8008e1a:	ee18 0a10 	vmov	r0, s16
 8008e1e:	f001 f95f 	bl	800a0e0 <__mcmp>
 8008e22:	4602      	mov	r2, r0
 8008e24:	4629      	mov	r1, r5
 8008e26:	4620      	mov	r0, r4
 8008e28:	9207      	str	r2, [sp, #28]
 8008e2a:	f000 fecd 	bl	8009bc8 <_Bfree>
 8008e2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008e32:	ea43 0102 	orr.w	r1, r3, r2
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	464d      	mov	r5, r9
 8008e3c:	d10f      	bne.n	8008e5e <_dtoa_r+0xa66>
 8008e3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e42:	d02a      	beq.n	8008e9a <_dtoa_r+0xaa2>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dd02      	ble.n	8008e50 <_dtoa_r+0xa58>
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008e50:	f88b a000 	strb.w	sl, [fp]
 8008e54:	e775      	b.n	8008d42 <_dtoa_r+0x94a>
 8008e56:	4638      	mov	r0, r7
 8008e58:	e7ba      	b.n	8008dd0 <_dtoa_r+0x9d8>
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	e7e2      	b.n	8008e24 <_dtoa_r+0xa2c>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	db04      	blt.n	8008e6e <_dtoa_r+0xa76>
 8008e64:	9906      	ldr	r1, [sp, #24]
 8008e66:	430b      	orrs	r3, r1
 8008e68:	9904      	ldr	r1, [sp, #16]
 8008e6a:	430b      	orrs	r3, r1
 8008e6c:	d122      	bne.n	8008eb4 <_dtoa_r+0xabc>
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	ddee      	ble.n	8008e50 <_dtoa_r+0xa58>
 8008e72:	ee18 1a10 	vmov	r1, s16
 8008e76:	2201      	movs	r2, #1
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f001 f8c1 	bl	800a000 <__lshift>
 8008e7e:	4631      	mov	r1, r6
 8008e80:	ee08 0a10 	vmov	s16, r0
 8008e84:	f001 f92c 	bl	800a0e0 <__mcmp>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	dc03      	bgt.n	8008e94 <_dtoa_r+0xa9c>
 8008e8c:	d1e0      	bne.n	8008e50 <_dtoa_r+0xa58>
 8008e8e:	f01a 0f01 	tst.w	sl, #1
 8008e92:	d0dd      	beq.n	8008e50 <_dtoa_r+0xa58>
 8008e94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e98:	d1d7      	bne.n	8008e4a <_dtoa_r+0xa52>
 8008e9a:	2339      	movs	r3, #57	; 0x39
 8008e9c:	f88b 3000 	strb.w	r3, [fp]
 8008ea0:	462b      	mov	r3, r5
 8008ea2:	461d      	mov	r5, r3
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008eaa:	2a39      	cmp	r2, #57	; 0x39
 8008eac:	d071      	beq.n	8008f92 <_dtoa_r+0xb9a>
 8008eae:	3201      	adds	r2, #1
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	e746      	b.n	8008d42 <_dtoa_r+0x94a>
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	dd07      	ble.n	8008ec8 <_dtoa_r+0xad0>
 8008eb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ebc:	d0ed      	beq.n	8008e9a <_dtoa_r+0xaa2>
 8008ebe:	f10a 0301 	add.w	r3, sl, #1
 8008ec2:	f88b 3000 	strb.w	r3, [fp]
 8008ec6:	e73c      	b.n	8008d42 <_dtoa_r+0x94a>
 8008ec8:	9b05      	ldr	r3, [sp, #20]
 8008eca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008ece:	4599      	cmp	r9, r3
 8008ed0:	d047      	beq.n	8008f62 <_dtoa_r+0xb6a>
 8008ed2:	ee18 1a10 	vmov	r1, s16
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 fe96 	bl	8009c0c <__multadd>
 8008ee0:	45b8      	cmp	r8, r7
 8008ee2:	ee08 0a10 	vmov	s16, r0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	f04f 020a 	mov.w	r2, #10
 8008eee:	4641      	mov	r1, r8
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	d106      	bne.n	8008f02 <_dtoa_r+0xb0a>
 8008ef4:	f000 fe8a 	bl	8009c0c <__multadd>
 8008ef8:	4680      	mov	r8, r0
 8008efa:	4607      	mov	r7, r0
 8008efc:	f109 0901 	add.w	r9, r9, #1
 8008f00:	e772      	b.n	8008de8 <_dtoa_r+0x9f0>
 8008f02:	f000 fe83 	bl	8009c0c <__multadd>
 8008f06:	4639      	mov	r1, r7
 8008f08:	4680      	mov	r8, r0
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	220a      	movs	r2, #10
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f000 fe7c 	bl	8009c0c <__multadd>
 8008f14:	4607      	mov	r7, r0
 8008f16:	e7f1      	b.n	8008efc <_dtoa_r+0xb04>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	9302      	str	r3, [sp, #8]
 8008f1c:	9d01      	ldr	r5, [sp, #4]
 8008f1e:	ee18 0a10 	vmov	r0, s16
 8008f22:	4631      	mov	r1, r6
 8008f24:	f7ff f9dc 	bl	80082e0 <quorem>
 8008f28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f2c:	9b01      	ldr	r3, [sp, #4]
 8008f2e:	f805 ab01 	strb.w	sl, [r5], #1
 8008f32:	1aea      	subs	r2, r5, r3
 8008f34:	9b02      	ldr	r3, [sp, #8]
 8008f36:	4293      	cmp	r3, r2
 8008f38:	dd09      	ble.n	8008f4e <_dtoa_r+0xb56>
 8008f3a:	ee18 1a10 	vmov	r1, s16
 8008f3e:	2300      	movs	r3, #0
 8008f40:	220a      	movs	r2, #10
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 fe62 	bl	8009c0c <__multadd>
 8008f48:	ee08 0a10 	vmov	s16, r0
 8008f4c:	e7e7      	b.n	8008f1e <_dtoa_r+0xb26>
 8008f4e:	9b02      	ldr	r3, [sp, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bfc8      	it	gt
 8008f54:	461d      	movgt	r5, r3
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	bfd8      	it	le
 8008f5a:	2501      	movle	r5, #1
 8008f5c:	441d      	add	r5, r3
 8008f5e:	f04f 0800 	mov.w	r8, #0
 8008f62:	ee18 1a10 	vmov	r1, s16
 8008f66:	2201      	movs	r2, #1
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f001 f849 	bl	800a000 <__lshift>
 8008f6e:	4631      	mov	r1, r6
 8008f70:	ee08 0a10 	vmov	s16, r0
 8008f74:	f001 f8b4 	bl	800a0e0 <__mcmp>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	dc91      	bgt.n	8008ea0 <_dtoa_r+0xaa8>
 8008f7c:	d102      	bne.n	8008f84 <_dtoa_r+0xb8c>
 8008f7e:	f01a 0f01 	tst.w	sl, #1
 8008f82:	d18d      	bne.n	8008ea0 <_dtoa_r+0xaa8>
 8008f84:	462b      	mov	r3, r5
 8008f86:	461d      	mov	r5, r3
 8008f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f8c:	2a30      	cmp	r2, #48	; 0x30
 8008f8e:	d0fa      	beq.n	8008f86 <_dtoa_r+0xb8e>
 8008f90:	e6d7      	b.n	8008d42 <_dtoa_r+0x94a>
 8008f92:	9a01      	ldr	r2, [sp, #4]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d184      	bne.n	8008ea2 <_dtoa_r+0xaaa>
 8008f98:	9b00      	ldr	r3, [sp, #0]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	2331      	movs	r3, #49	; 0x31
 8008fa0:	7013      	strb	r3, [r2, #0]
 8008fa2:	e6ce      	b.n	8008d42 <_dtoa_r+0x94a>
 8008fa4:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <_dtoa_r+0xbd4>)
 8008fa6:	f7ff ba95 	b.w	80084d4 <_dtoa_r+0xdc>
 8008faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f47f aa6e 	bne.w	800848e <_dtoa_r+0x96>
 8008fb2:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <_dtoa_r+0xbd8>)
 8008fb4:	f7ff ba8e 	b.w	80084d4 <_dtoa_r+0xdc>
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dcae      	bgt.n	8008f1c <_dtoa_r+0xb24>
 8008fbe:	9b06      	ldr	r3, [sp, #24]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	f73f aea8 	bgt.w	8008d16 <_dtoa_r+0x91e>
 8008fc6:	e7a9      	b.n	8008f1c <_dtoa_r+0xb24>
 8008fc8:	0800b280 	.word	0x0800b280
 8008fcc:	0800b084 	.word	0x0800b084
 8008fd0:	0800b201 	.word	0x0800b201

08008fd4 <__sflush_r>:
 8008fd4:	898a      	ldrh	r2, [r1, #12]
 8008fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	4605      	mov	r5, r0
 8008fdc:	0710      	lsls	r0, r2, #28
 8008fde:	460c      	mov	r4, r1
 8008fe0:	d458      	bmi.n	8009094 <__sflush_r+0xc0>
 8008fe2:	684b      	ldr	r3, [r1, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dc05      	bgt.n	8008ff4 <__sflush_r+0x20>
 8008fe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	dc02      	bgt.n	8008ff4 <__sflush_r+0x20>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	d0f9      	beq.n	8008fee <__sflush_r+0x1a>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009000:	682f      	ldr	r7, [r5, #0]
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	d032      	beq.n	800906c <__sflush_r+0x98>
 8009006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	075a      	lsls	r2, r3, #29
 800900c:	d505      	bpl.n	800901a <__sflush_r+0x46>
 800900e:	6863      	ldr	r3, [r4, #4]
 8009010:	1ac0      	subs	r0, r0, r3
 8009012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009014:	b10b      	cbz	r3, 800901a <__sflush_r+0x46>
 8009016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009018:	1ac0      	subs	r0, r0, r3
 800901a:	2300      	movs	r3, #0
 800901c:	4602      	mov	r2, r0
 800901e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009020:	6a21      	ldr	r1, [r4, #32]
 8009022:	4628      	mov	r0, r5
 8009024:	47b0      	blx	r6
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	d106      	bne.n	800903a <__sflush_r+0x66>
 800902c:	6829      	ldr	r1, [r5, #0]
 800902e:	291d      	cmp	r1, #29
 8009030:	d82c      	bhi.n	800908c <__sflush_r+0xb8>
 8009032:	4a2a      	ldr	r2, [pc, #168]	; (80090dc <__sflush_r+0x108>)
 8009034:	40ca      	lsrs	r2, r1
 8009036:	07d6      	lsls	r6, r2, #31
 8009038:	d528      	bpl.n	800908c <__sflush_r+0xb8>
 800903a:	2200      	movs	r2, #0
 800903c:	6062      	str	r2, [r4, #4]
 800903e:	04d9      	lsls	r1, r3, #19
 8009040:	6922      	ldr	r2, [r4, #16]
 8009042:	6022      	str	r2, [r4, #0]
 8009044:	d504      	bpl.n	8009050 <__sflush_r+0x7c>
 8009046:	1c42      	adds	r2, r0, #1
 8009048:	d101      	bne.n	800904e <__sflush_r+0x7a>
 800904a:	682b      	ldr	r3, [r5, #0]
 800904c:	b903      	cbnz	r3, 8009050 <__sflush_r+0x7c>
 800904e:	6560      	str	r0, [r4, #84]	; 0x54
 8009050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009052:	602f      	str	r7, [r5, #0]
 8009054:	2900      	cmp	r1, #0
 8009056:	d0ca      	beq.n	8008fee <__sflush_r+0x1a>
 8009058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800905c:	4299      	cmp	r1, r3
 800905e:	d002      	beq.n	8009066 <__sflush_r+0x92>
 8009060:	4628      	mov	r0, r5
 8009062:	f001 fa49 	bl	800a4f8 <_free_r>
 8009066:	2000      	movs	r0, #0
 8009068:	6360      	str	r0, [r4, #52]	; 0x34
 800906a:	e7c1      	b.n	8008ff0 <__sflush_r+0x1c>
 800906c:	6a21      	ldr	r1, [r4, #32]
 800906e:	2301      	movs	r3, #1
 8009070:	4628      	mov	r0, r5
 8009072:	47b0      	blx	r6
 8009074:	1c41      	adds	r1, r0, #1
 8009076:	d1c7      	bne.n	8009008 <__sflush_r+0x34>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0c4      	beq.n	8009008 <__sflush_r+0x34>
 800907e:	2b1d      	cmp	r3, #29
 8009080:	d001      	beq.n	8009086 <__sflush_r+0xb2>
 8009082:	2b16      	cmp	r3, #22
 8009084:	d101      	bne.n	800908a <__sflush_r+0xb6>
 8009086:	602f      	str	r7, [r5, #0]
 8009088:	e7b1      	b.n	8008fee <__sflush_r+0x1a>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	e7ad      	b.n	8008ff0 <__sflush_r+0x1c>
 8009094:	690f      	ldr	r7, [r1, #16]
 8009096:	2f00      	cmp	r7, #0
 8009098:	d0a9      	beq.n	8008fee <__sflush_r+0x1a>
 800909a:	0793      	lsls	r3, r2, #30
 800909c:	680e      	ldr	r6, [r1, #0]
 800909e:	bf08      	it	eq
 80090a0:	694b      	ldreq	r3, [r1, #20]
 80090a2:	600f      	str	r7, [r1, #0]
 80090a4:	bf18      	it	ne
 80090a6:	2300      	movne	r3, #0
 80090a8:	eba6 0807 	sub.w	r8, r6, r7
 80090ac:	608b      	str	r3, [r1, #8]
 80090ae:	f1b8 0f00 	cmp.w	r8, #0
 80090b2:	dd9c      	ble.n	8008fee <__sflush_r+0x1a>
 80090b4:	6a21      	ldr	r1, [r4, #32]
 80090b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090b8:	4643      	mov	r3, r8
 80090ba:	463a      	mov	r2, r7
 80090bc:	4628      	mov	r0, r5
 80090be:	47b0      	blx	r6
 80090c0:	2800      	cmp	r0, #0
 80090c2:	dc06      	bgt.n	80090d2 <__sflush_r+0xfe>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295
 80090d0:	e78e      	b.n	8008ff0 <__sflush_r+0x1c>
 80090d2:	4407      	add	r7, r0
 80090d4:	eba8 0800 	sub.w	r8, r8, r0
 80090d8:	e7e9      	b.n	80090ae <__sflush_r+0xda>
 80090da:	bf00      	nop
 80090dc:	20400001 	.word	0x20400001

080090e0 <_fflush_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	690b      	ldr	r3, [r1, #16]
 80090e4:	4605      	mov	r5, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	b913      	cbnz	r3, 80090f0 <_fflush_r+0x10>
 80090ea:	2500      	movs	r5, #0
 80090ec:	4628      	mov	r0, r5
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	b118      	cbz	r0, 80090fa <_fflush_r+0x1a>
 80090f2:	6983      	ldr	r3, [r0, #24]
 80090f4:	b90b      	cbnz	r3, 80090fa <_fflush_r+0x1a>
 80090f6:	f000 f887 	bl	8009208 <__sinit>
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <_fflush_r+0x6c>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	d11b      	bne.n	8009138 <_fflush_r+0x58>
 8009100:	686c      	ldr	r4, [r5, #4]
 8009102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0ef      	beq.n	80090ea <_fflush_r+0xa>
 800910a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800910c:	07d0      	lsls	r0, r2, #31
 800910e:	d404      	bmi.n	800911a <_fflush_r+0x3a>
 8009110:	0599      	lsls	r1, r3, #22
 8009112:	d402      	bmi.n	800911a <_fflush_r+0x3a>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f000 fc88 	bl	8009a2a <__retarget_lock_acquire_recursive>
 800911a:	4628      	mov	r0, r5
 800911c:	4621      	mov	r1, r4
 800911e:	f7ff ff59 	bl	8008fd4 <__sflush_r>
 8009122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009124:	07da      	lsls	r2, r3, #31
 8009126:	4605      	mov	r5, r0
 8009128:	d4e0      	bmi.n	80090ec <_fflush_r+0xc>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	059b      	lsls	r3, r3, #22
 800912e:	d4dd      	bmi.n	80090ec <_fflush_r+0xc>
 8009130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009132:	f000 fc7b 	bl	8009a2c <__retarget_lock_release_recursive>
 8009136:	e7d9      	b.n	80090ec <_fflush_r+0xc>
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <_fflush_r+0x70>)
 800913a:	429c      	cmp	r4, r3
 800913c:	d101      	bne.n	8009142 <_fflush_r+0x62>
 800913e:	68ac      	ldr	r4, [r5, #8]
 8009140:	e7df      	b.n	8009102 <_fflush_r+0x22>
 8009142:	4b04      	ldr	r3, [pc, #16]	; (8009154 <_fflush_r+0x74>)
 8009144:	429c      	cmp	r4, r3
 8009146:	bf08      	it	eq
 8009148:	68ec      	ldreq	r4, [r5, #12]
 800914a:	e7da      	b.n	8009102 <_fflush_r+0x22>
 800914c:	0800b2b4 	.word	0x0800b2b4
 8009150:	0800b2d4 	.word	0x0800b2d4
 8009154:	0800b294 	.word	0x0800b294

08009158 <std>:
 8009158:	2300      	movs	r3, #0
 800915a:	b510      	push	{r4, lr}
 800915c:	4604      	mov	r4, r0
 800915e:	e9c0 3300 	strd	r3, r3, [r0]
 8009162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009166:	6083      	str	r3, [r0, #8]
 8009168:	8181      	strh	r1, [r0, #12]
 800916a:	6643      	str	r3, [r0, #100]	; 0x64
 800916c:	81c2      	strh	r2, [r0, #14]
 800916e:	6183      	str	r3, [r0, #24]
 8009170:	4619      	mov	r1, r3
 8009172:	2208      	movs	r2, #8
 8009174:	305c      	adds	r0, #92	; 0x5c
 8009176:	f7fd fa0f 	bl	8006598 <memset>
 800917a:	4b05      	ldr	r3, [pc, #20]	; (8009190 <std+0x38>)
 800917c:	6263      	str	r3, [r4, #36]	; 0x24
 800917e:	4b05      	ldr	r3, [pc, #20]	; (8009194 <std+0x3c>)
 8009180:	62a3      	str	r3, [r4, #40]	; 0x28
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <std+0x40>)
 8009184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <std+0x44>)
 8009188:	6224      	str	r4, [r4, #32]
 800918a:	6323      	str	r3, [r4, #48]	; 0x30
 800918c:	bd10      	pop	{r4, pc}
 800918e:	bf00      	nop
 8009190:	0800ac59 	.word	0x0800ac59
 8009194:	0800ac7b 	.word	0x0800ac7b
 8009198:	0800acb3 	.word	0x0800acb3
 800919c:	0800acd7 	.word	0x0800acd7

080091a0 <_cleanup_r>:
 80091a0:	4901      	ldr	r1, [pc, #4]	; (80091a8 <_cleanup_r+0x8>)
 80091a2:	f000 b8af 	b.w	8009304 <_fwalk_reent>
 80091a6:	bf00      	nop
 80091a8:	080090e1 	.word	0x080090e1

080091ac <__sfmoreglue>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	2268      	movs	r2, #104	; 0x68
 80091b0:	1e4d      	subs	r5, r1, #1
 80091b2:	4355      	muls	r5, r2
 80091b4:	460e      	mov	r6, r1
 80091b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ba:	f001 fa09 	bl	800a5d0 <_malloc_r>
 80091be:	4604      	mov	r4, r0
 80091c0:	b140      	cbz	r0, 80091d4 <__sfmoreglue+0x28>
 80091c2:	2100      	movs	r1, #0
 80091c4:	e9c0 1600 	strd	r1, r6, [r0]
 80091c8:	300c      	adds	r0, #12
 80091ca:	60a0      	str	r0, [r4, #8]
 80091cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091d0:	f7fd f9e2 	bl	8006598 <memset>
 80091d4:	4620      	mov	r0, r4
 80091d6:	bd70      	pop	{r4, r5, r6, pc}

080091d8 <__sfp_lock_acquire>:
 80091d8:	4801      	ldr	r0, [pc, #4]	; (80091e0 <__sfp_lock_acquire+0x8>)
 80091da:	f000 bc26 	b.w	8009a2a <__retarget_lock_acquire_recursive>
 80091de:	bf00      	nop
 80091e0:	200007e9 	.word	0x200007e9

080091e4 <__sfp_lock_release>:
 80091e4:	4801      	ldr	r0, [pc, #4]	; (80091ec <__sfp_lock_release+0x8>)
 80091e6:	f000 bc21 	b.w	8009a2c <__retarget_lock_release_recursive>
 80091ea:	bf00      	nop
 80091ec:	200007e9 	.word	0x200007e9

080091f0 <__sinit_lock_acquire>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__sinit_lock_acquire+0x8>)
 80091f2:	f000 bc1a 	b.w	8009a2a <__retarget_lock_acquire_recursive>
 80091f6:	bf00      	nop
 80091f8:	200007ea 	.word	0x200007ea

080091fc <__sinit_lock_release>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__sinit_lock_release+0x8>)
 80091fe:	f000 bc15 	b.w	8009a2c <__retarget_lock_release_recursive>
 8009202:	bf00      	nop
 8009204:	200007ea 	.word	0x200007ea

08009208 <__sinit>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4604      	mov	r4, r0
 800920c:	f7ff fff0 	bl	80091f0 <__sinit_lock_acquire>
 8009210:	69a3      	ldr	r3, [r4, #24]
 8009212:	b11b      	cbz	r3, 800921c <__sinit+0x14>
 8009214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009218:	f7ff bff0 	b.w	80091fc <__sinit_lock_release>
 800921c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009220:	6523      	str	r3, [r4, #80]	; 0x50
 8009222:	4b13      	ldr	r3, [pc, #76]	; (8009270 <__sinit+0x68>)
 8009224:	4a13      	ldr	r2, [pc, #76]	; (8009274 <__sinit+0x6c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	62a2      	str	r2, [r4, #40]	; 0x28
 800922a:	42a3      	cmp	r3, r4
 800922c:	bf04      	itt	eq
 800922e:	2301      	moveq	r3, #1
 8009230:	61a3      	streq	r3, [r4, #24]
 8009232:	4620      	mov	r0, r4
 8009234:	f000 f820 	bl	8009278 <__sfp>
 8009238:	6060      	str	r0, [r4, #4]
 800923a:	4620      	mov	r0, r4
 800923c:	f000 f81c 	bl	8009278 <__sfp>
 8009240:	60a0      	str	r0, [r4, #8]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f818 	bl	8009278 <__sfp>
 8009248:	2200      	movs	r2, #0
 800924a:	60e0      	str	r0, [r4, #12]
 800924c:	2104      	movs	r1, #4
 800924e:	6860      	ldr	r0, [r4, #4]
 8009250:	f7ff ff82 	bl	8009158 <std>
 8009254:	68a0      	ldr	r0, [r4, #8]
 8009256:	2201      	movs	r2, #1
 8009258:	2109      	movs	r1, #9
 800925a:	f7ff ff7d 	bl	8009158 <std>
 800925e:	68e0      	ldr	r0, [r4, #12]
 8009260:	2202      	movs	r2, #2
 8009262:	2112      	movs	r1, #18
 8009264:	f7ff ff78 	bl	8009158 <std>
 8009268:	2301      	movs	r3, #1
 800926a:	61a3      	str	r3, [r4, #24]
 800926c:	e7d2      	b.n	8009214 <__sinit+0xc>
 800926e:	bf00      	nop
 8009270:	0800b070 	.word	0x0800b070
 8009274:	080091a1 	.word	0x080091a1

08009278 <__sfp>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	4607      	mov	r7, r0
 800927c:	f7ff ffac 	bl	80091d8 <__sfp_lock_acquire>
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <__sfp+0x84>)
 8009282:	681e      	ldr	r6, [r3, #0]
 8009284:	69b3      	ldr	r3, [r6, #24]
 8009286:	b913      	cbnz	r3, 800928e <__sfp+0x16>
 8009288:	4630      	mov	r0, r6
 800928a:	f7ff ffbd 	bl	8009208 <__sinit>
 800928e:	3648      	adds	r6, #72	; 0x48
 8009290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009294:	3b01      	subs	r3, #1
 8009296:	d503      	bpl.n	80092a0 <__sfp+0x28>
 8009298:	6833      	ldr	r3, [r6, #0]
 800929a:	b30b      	cbz	r3, 80092e0 <__sfp+0x68>
 800929c:	6836      	ldr	r6, [r6, #0]
 800929e:	e7f7      	b.n	8009290 <__sfp+0x18>
 80092a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092a4:	b9d5      	cbnz	r5, 80092dc <__sfp+0x64>
 80092a6:	4b16      	ldr	r3, [pc, #88]	; (8009300 <__sfp+0x88>)
 80092a8:	60e3      	str	r3, [r4, #12]
 80092aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ae:	6665      	str	r5, [r4, #100]	; 0x64
 80092b0:	f000 fbba 	bl	8009a28 <__retarget_lock_init_recursive>
 80092b4:	f7ff ff96 	bl	80091e4 <__sfp_lock_release>
 80092b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092c0:	6025      	str	r5, [r4, #0]
 80092c2:	61a5      	str	r5, [r4, #24]
 80092c4:	2208      	movs	r2, #8
 80092c6:	4629      	mov	r1, r5
 80092c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092cc:	f7fd f964 	bl	8006598 <memset>
 80092d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092d8:	4620      	mov	r0, r4
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	3468      	adds	r4, #104	; 0x68
 80092de:	e7d9      	b.n	8009294 <__sfp+0x1c>
 80092e0:	2104      	movs	r1, #4
 80092e2:	4638      	mov	r0, r7
 80092e4:	f7ff ff62 	bl	80091ac <__sfmoreglue>
 80092e8:	4604      	mov	r4, r0
 80092ea:	6030      	str	r0, [r6, #0]
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d1d5      	bne.n	800929c <__sfp+0x24>
 80092f0:	f7ff ff78 	bl	80091e4 <__sfp_lock_release>
 80092f4:	230c      	movs	r3, #12
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	e7ee      	b.n	80092d8 <__sfp+0x60>
 80092fa:	bf00      	nop
 80092fc:	0800b070 	.word	0x0800b070
 8009300:	ffff0001 	.word	0xffff0001

08009304 <_fwalk_reent>:
 8009304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009308:	4606      	mov	r6, r0
 800930a:	4688      	mov	r8, r1
 800930c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009310:	2700      	movs	r7, #0
 8009312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009316:	f1b9 0901 	subs.w	r9, r9, #1
 800931a:	d505      	bpl.n	8009328 <_fwalk_reent+0x24>
 800931c:	6824      	ldr	r4, [r4, #0]
 800931e:	2c00      	cmp	r4, #0
 8009320:	d1f7      	bne.n	8009312 <_fwalk_reent+0xe>
 8009322:	4638      	mov	r0, r7
 8009324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009328:	89ab      	ldrh	r3, [r5, #12]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d907      	bls.n	800933e <_fwalk_reent+0x3a>
 800932e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009332:	3301      	adds	r3, #1
 8009334:	d003      	beq.n	800933e <_fwalk_reent+0x3a>
 8009336:	4629      	mov	r1, r5
 8009338:	4630      	mov	r0, r6
 800933a:	47c0      	blx	r8
 800933c:	4307      	orrs	r7, r0
 800933e:	3568      	adds	r5, #104	; 0x68
 8009340:	e7e9      	b.n	8009316 <_fwalk_reent+0x12>

08009342 <rshift>:
 8009342:	6903      	ldr	r3, [r0, #16]
 8009344:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800934c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009350:	f100 0414 	add.w	r4, r0, #20
 8009354:	dd45      	ble.n	80093e2 <rshift+0xa0>
 8009356:	f011 011f 	ands.w	r1, r1, #31
 800935a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800935e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009362:	d10c      	bne.n	800937e <rshift+0x3c>
 8009364:	f100 0710 	add.w	r7, r0, #16
 8009368:	4629      	mov	r1, r5
 800936a:	42b1      	cmp	r1, r6
 800936c:	d334      	bcc.n	80093d8 <rshift+0x96>
 800936e:	1a9b      	subs	r3, r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	1eea      	subs	r2, r5, #3
 8009374:	4296      	cmp	r6, r2
 8009376:	bf38      	it	cc
 8009378:	2300      	movcc	r3, #0
 800937a:	4423      	add	r3, r4
 800937c:	e015      	b.n	80093aa <rshift+0x68>
 800937e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009382:	f1c1 0820 	rsb	r8, r1, #32
 8009386:	40cf      	lsrs	r7, r1
 8009388:	f105 0e04 	add.w	lr, r5, #4
 800938c:	46a1      	mov	r9, r4
 800938e:	4576      	cmp	r6, lr
 8009390:	46f4      	mov	ip, lr
 8009392:	d815      	bhi.n	80093c0 <rshift+0x7e>
 8009394:	1a9a      	subs	r2, r3, r2
 8009396:	0092      	lsls	r2, r2, #2
 8009398:	3a04      	subs	r2, #4
 800939a:	3501      	adds	r5, #1
 800939c:	42ae      	cmp	r6, r5
 800939e:	bf38      	it	cc
 80093a0:	2200      	movcc	r2, #0
 80093a2:	18a3      	adds	r3, r4, r2
 80093a4:	50a7      	str	r7, [r4, r2]
 80093a6:	b107      	cbz	r7, 80093aa <rshift+0x68>
 80093a8:	3304      	adds	r3, #4
 80093aa:	1b1a      	subs	r2, r3, r4
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093b2:	bf08      	it	eq
 80093b4:	2300      	moveq	r3, #0
 80093b6:	6102      	str	r2, [r0, #16]
 80093b8:	bf08      	it	eq
 80093ba:	6143      	streq	r3, [r0, #20]
 80093bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c0:	f8dc c000 	ldr.w	ip, [ip]
 80093c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80093c8:	ea4c 0707 	orr.w	r7, ip, r7
 80093cc:	f849 7b04 	str.w	r7, [r9], #4
 80093d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093d4:	40cf      	lsrs	r7, r1
 80093d6:	e7da      	b.n	800938e <rshift+0x4c>
 80093d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80093dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80093e0:	e7c3      	b.n	800936a <rshift+0x28>
 80093e2:	4623      	mov	r3, r4
 80093e4:	e7e1      	b.n	80093aa <rshift+0x68>

080093e6 <__hexdig_fun>:
 80093e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093ea:	2b09      	cmp	r3, #9
 80093ec:	d802      	bhi.n	80093f4 <__hexdig_fun+0xe>
 80093ee:	3820      	subs	r0, #32
 80093f0:	b2c0      	uxtb	r0, r0
 80093f2:	4770      	bx	lr
 80093f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80093f8:	2b05      	cmp	r3, #5
 80093fa:	d801      	bhi.n	8009400 <__hexdig_fun+0x1a>
 80093fc:	3847      	subs	r0, #71	; 0x47
 80093fe:	e7f7      	b.n	80093f0 <__hexdig_fun+0xa>
 8009400:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009404:	2b05      	cmp	r3, #5
 8009406:	d801      	bhi.n	800940c <__hexdig_fun+0x26>
 8009408:	3827      	subs	r0, #39	; 0x27
 800940a:	e7f1      	b.n	80093f0 <__hexdig_fun+0xa>
 800940c:	2000      	movs	r0, #0
 800940e:	4770      	bx	lr

08009410 <__gethex>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	ed2d 8b02 	vpush	{d8}
 8009418:	b089      	sub	sp, #36	; 0x24
 800941a:	ee08 0a10 	vmov	s16, r0
 800941e:	9304      	str	r3, [sp, #16]
 8009420:	4bb4      	ldr	r3, [pc, #720]	; (80096f4 <__gethex+0x2e4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	4618      	mov	r0, r3
 8009428:	468b      	mov	fp, r1
 800942a:	4690      	mov	r8, r2
 800942c:	f7f6 fee0 	bl	80001f0 <strlen>
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	f8db 2000 	ldr.w	r2, [fp]
 8009436:	4403      	add	r3, r0
 8009438:	4682      	mov	sl, r0
 800943a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	1c93      	adds	r3, r2, #2
 8009442:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009446:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800944a:	32fe      	adds	r2, #254	; 0xfe
 800944c:	18d1      	adds	r1, r2, r3
 800944e:	461f      	mov	r7, r3
 8009450:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009454:	9100      	str	r1, [sp, #0]
 8009456:	2830      	cmp	r0, #48	; 0x30
 8009458:	d0f8      	beq.n	800944c <__gethex+0x3c>
 800945a:	f7ff ffc4 	bl	80093e6 <__hexdig_fun>
 800945e:	4604      	mov	r4, r0
 8009460:	2800      	cmp	r0, #0
 8009462:	d13a      	bne.n	80094da <__gethex+0xca>
 8009464:	9901      	ldr	r1, [sp, #4]
 8009466:	4652      	mov	r2, sl
 8009468:	4638      	mov	r0, r7
 800946a:	f001 fc38 	bl	800acde <strncmp>
 800946e:	4605      	mov	r5, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d168      	bne.n	8009546 <__gethex+0x136>
 8009474:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009478:	eb07 060a 	add.w	r6, r7, sl
 800947c:	f7ff ffb3 	bl	80093e6 <__hexdig_fun>
 8009480:	2800      	cmp	r0, #0
 8009482:	d062      	beq.n	800954a <__gethex+0x13a>
 8009484:	4633      	mov	r3, r6
 8009486:	7818      	ldrb	r0, [r3, #0]
 8009488:	2830      	cmp	r0, #48	; 0x30
 800948a:	461f      	mov	r7, r3
 800948c:	f103 0301 	add.w	r3, r3, #1
 8009490:	d0f9      	beq.n	8009486 <__gethex+0x76>
 8009492:	f7ff ffa8 	bl	80093e6 <__hexdig_fun>
 8009496:	2301      	movs	r3, #1
 8009498:	fab0 f480 	clz	r4, r0
 800949c:	0964      	lsrs	r4, r4, #5
 800949e:	4635      	mov	r5, r6
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	463a      	mov	r2, r7
 80094a4:	4616      	mov	r6, r2
 80094a6:	3201      	adds	r2, #1
 80094a8:	7830      	ldrb	r0, [r6, #0]
 80094aa:	f7ff ff9c 	bl	80093e6 <__hexdig_fun>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d1f8      	bne.n	80094a4 <__gethex+0x94>
 80094b2:	9901      	ldr	r1, [sp, #4]
 80094b4:	4652      	mov	r2, sl
 80094b6:	4630      	mov	r0, r6
 80094b8:	f001 fc11 	bl	800acde <strncmp>
 80094bc:	b980      	cbnz	r0, 80094e0 <__gethex+0xd0>
 80094be:	b94d      	cbnz	r5, 80094d4 <__gethex+0xc4>
 80094c0:	eb06 050a 	add.w	r5, r6, sl
 80094c4:	462a      	mov	r2, r5
 80094c6:	4616      	mov	r6, r2
 80094c8:	3201      	adds	r2, #1
 80094ca:	7830      	ldrb	r0, [r6, #0]
 80094cc:	f7ff ff8b 	bl	80093e6 <__hexdig_fun>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d1f8      	bne.n	80094c6 <__gethex+0xb6>
 80094d4:	1bad      	subs	r5, r5, r6
 80094d6:	00ad      	lsls	r5, r5, #2
 80094d8:	e004      	b.n	80094e4 <__gethex+0xd4>
 80094da:	2400      	movs	r4, #0
 80094dc:	4625      	mov	r5, r4
 80094de:	e7e0      	b.n	80094a2 <__gethex+0x92>
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	d1f7      	bne.n	80094d4 <__gethex+0xc4>
 80094e4:	7833      	ldrb	r3, [r6, #0]
 80094e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094ea:	2b50      	cmp	r3, #80	; 0x50
 80094ec:	d13b      	bne.n	8009566 <__gethex+0x156>
 80094ee:	7873      	ldrb	r3, [r6, #1]
 80094f0:	2b2b      	cmp	r3, #43	; 0x2b
 80094f2:	d02c      	beq.n	800954e <__gethex+0x13e>
 80094f4:	2b2d      	cmp	r3, #45	; 0x2d
 80094f6:	d02e      	beq.n	8009556 <__gethex+0x146>
 80094f8:	1c71      	adds	r1, r6, #1
 80094fa:	f04f 0900 	mov.w	r9, #0
 80094fe:	7808      	ldrb	r0, [r1, #0]
 8009500:	f7ff ff71 	bl	80093e6 <__hexdig_fun>
 8009504:	1e43      	subs	r3, r0, #1
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b18      	cmp	r3, #24
 800950a:	d82c      	bhi.n	8009566 <__gethex+0x156>
 800950c:	f1a0 0210 	sub.w	r2, r0, #16
 8009510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009514:	f7ff ff67 	bl	80093e6 <__hexdig_fun>
 8009518:	1e43      	subs	r3, r0, #1
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b18      	cmp	r3, #24
 800951e:	d91d      	bls.n	800955c <__gethex+0x14c>
 8009520:	f1b9 0f00 	cmp.w	r9, #0
 8009524:	d000      	beq.n	8009528 <__gethex+0x118>
 8009526:	4252      	negs	r2, r2
 8009528:	4415      	add	r5, r2
 800952a:	f8cb 1000 	str.w	r1, [fp]
 800952e:	b1e4      	cbz	r4, 800956a <__gethex+0x15a>
 8009530:	9b00      	ldr	r3, [sp, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	bf14      	ite	ne
 8009536:	2700      	movne	r7, #0
 8009538:	2706      	moveq	r7, #6
 800953a:	4638      	mov	r0, r7
 800953c:	b009      	add	sp, #36	; 0x24
 800953e:	ecbd 8b02 	vpop	{d8}
 8009542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009546:	463e      	mov	r6, r7
 8009548:	4625      	mov	r5, r4
 800954a:	2401      	movs	r4, #1
 800954c:	e7ca      	b.n	80094e4 <__gethex+0xd4>
 800954e:	f04f 0900 	mov.w	r9, #0
 8009552:	1cb1      	adds	r1, r6, #2
 8009554:	e7d3      	b.n	80094fe <__gethex+0xee>
 8009556:	f04f 0901 	mov.w	r9, #1
 800955a:	e7fa      	b.n	8009552 <__gethex+0x142>
 800955c:	230a      	movs	r3, #10
 800955e:	fb03 0202 	mla	r2, r3, r2, r0
 8009562:	3a10      	subs	r2, #16
 8009564:	e7d4      	b.n	8009510 <__gethex+0x100>
 8009566:	4631      	mov	r1, r6
 8009568:	e7df      	b.n	800952a <__gethex+0x11a>
 800956a:	1bf3      	subs	r3, r6, r7
 800956c:	3b01      	subs	r3, #1
 800956e:	4621      	mov	r1, r4
 8009570:	2b07      	cmp	r3, #7
 8009572:	dc0b      	bgt.n	800958c <__gethex+0x17c>
 8009574:	ee18 0a10 	vmov	r0, s16
 8009578:	f000 fae6 	bl	8009b48 <_Balloc>
 800957c:	4604      	mov	r4, r0
 800957e:	b940      	cbnz	r0, 8009592 <__gethex+0x182>
 8009580:	4b5d      	ldr	r3, [pc, #372]	; (80096f8 <__gethex+0x2e8>)
 8009582:	4602      	mov	r2, r0
 8009584:	21de      	movs	r1, #222	; 0xde
 8009586:	485d      	ldr	r0, [pc, #372]	; (80096fc <__gethex+0x2ec>)
 8009588:	f001 fbdc 	bl	800ad44 <__assert_func>
 800958c:	3101      	adds	r1, #1
 800958e:	105b      	asrs	r3, r3, #1
 8009590:	e7ee      	b.n	8009570 <__gethex+0x160>
 8009592:	f100 0914 	add.w	r9, r0, #20
 8009596:	f04f 0b00 	mov.w	fp, #0
 800959a:	f1ca 0301 	rsb	r3, sl, #1
 800959e:	f8cd 9008 	str.w	r9, [sp, #8]
 80095a2:	f8cd b000 	str.w	fp, [sp]
 80095a6:	9306      	str	r3, [sp, #24]
 80095a8:	42b7      	cmp	r7, r6
 80095aa:	d340      	bcc.n	800962e <__gethex+0x21e>
 80095ac:	9802      	ldr	r0, [sp, #8]
 80095ae:	9b00      	ldr	r3, [sp, #0]
 80095b0:	f840 3b04 	str.w	r3, [r0], #4
 80095b4:	eba0 0009 	sub.w	r0, r0, r9
 80095b8:	1080      	asrs	r0, r0, #2
 80095ba:	0146      	lsls	r6, r0, #5
 80095bc:	6120      	str	r0, [r4, #16]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fbb4 	bl	8009d2c <__hi0bits>
 80095c4:	1a30      	subs	r0, r6, r0
 80095c6:	f8d8 6000 	ldr.w	r6, [r8]
 80095ca:	42b0      	cmp	r0, r6
 80095cc:	dd63      	ble.n	8009696 <__gethex+0x286>
 80095ce:	1b87      	subs	r7, r0, r6
 80095d0:	4639      	mov	r1, r7
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 ff58 	bl	800a488 <__any_on>
 80095d8:	4682      	mov	sl, r0
 80095da:	b1a8      	cbz	r0, 8009608 <__gethex+0x1f8>
 80095dc:	1e7b      	subs	r3, r7, #1
 80095de:	1159      	asrs	r1, r3, #5
 80095e0:	f003 021f 	and.w	r2, r3, #31
 80095e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80095e8:	f04f 0a01 	mov.w	sl, #1
 80095ec:	fa0a f202 	lsl.w	r2, sl, r2
 80095f0:	420a      	tst	r2, r1
 80095f2:	d009      	beq.n	8009608 <__gethex+0x1f8>
 80095f4:	4553      	cmp	r3, sl
 80095f6:	dd05      	ble.n	8009604 <__gethex+0x1f4>
 80095f8:	1eb9      	subs	r1, r7, #2
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 ff44 	bl	800a488 <__any_on>
 8009600:	2800      	cmp	r0, #0
 8009602:	d145      	bne.n	8009690 <__gethex+0x280>
 8009604:	f04f 0a02 	mov.w	sl, #2
 8009608:	4639      	mov	r1, r7
 800960a:	4620      	mov	r0, r4
 800960c:	f7ff fe99 	bl	8009342 <rshift>
 8009610:	443d      	add	r5, r7
 8009612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009616:	42ab      	cmp	r3, r5
 8009618:	da4c      	bge.n	80096b4 <__gethex+0x2a4>
 800961a:	ee18 0a10 	vmov	r0, s16
 800961e:	4621      	mov	r1, r4
 8009620:	f000 fad2 	bl	8009bc8 <_Bfree>
 8009624:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009626:	2300      	movs	r3, #0
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	27a3      	movs	r7, #163	; 0xa3
 800962c:	e785      	b.n	800953a <__gethex+0x12a>
 800962e:	1e73      	subs	r3, r6, #1
 8009630:	9a05      	ldr	r2, [sp, #20]
 8009632:	9303      	str	r3, [sp, #12]
 8009634:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009638:	4293      	cmp	r3, r2
 800963a:	d019      	beq.n	8009670 <__gethex+0x260>
 800963c:	f1bb 0f20 	cmp.w	fp, #32
 8009640:	d107      	bne.n	8009652 <__gethex+0x242>
 8009642:	9b02      	ldr	r3, [sp, #8]
 8009644:	9a00      	ldr	r2, [sp, #0]
 8009646:	f843 2b04 	str.w	r2, [r3], #4
 800964a:	9302      	str	r3, [sp, #8]
 800964c:	2300      	movs	r3, #0
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	469b      	mov	fp, r3
 8009652:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009656:	f7ff fec6 	bl	80093e6 <__hexdig_fun>
 800965a:	9b00      	ldr	r3, [sp, #0]
 800965c:	f000 000f 	and.w	r0, r0, #15
 8009660:	fa00 f00b 	lsl.w	r0, r0, fp
 8009664:	4303      	orrs	r3, r0
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	f10b 0b04 	add.w	fp, fp, #4
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	e00d      	b.n	800968c <__gethex+0x27c>
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	9a06      	ldr	r2, [sp, #24]
 8009674:	4413      	add	r3, r2
 8009676:	42bb      	cmp	r3, r7
 8009678:	d3e0      	bcc.n	800963c <__gethex+0x22c>
 800967a:	4618      	mov	r0, r3
 800967c:	9901      	ldr	r1, [sp, #4]
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	4652      	mov	r2, sl
 8009682:	f001 fb2c 	bl	800acde <strncmp>
 8009686:	9b07      	ldr	r3, [sp, #28]
 8009688:	2800      	cmp	r0, #0
 800968a:	d1d7      	bne.n	800963c <__gethex+0x22c>
 800968c:	461e      	mov	r6, r3
 800968e:	e78b      	b.n	80095a8 <__gethex+0x198>
 8009690:	f04f 0a03 	mov.w	sl, #3
 8009694:	e7b8      	b.n	8009608 <__gethex+0x1f8>
 8009696:	da0a      	bge.n	80096ae <__gethex+0x29e>
 8009698:	1a37      	subs	r7, r6, r0
 800969a:	4621      	mov	r1, r4
 800969c:	ee18 0a10 	vmov	r0, s16
 80096a0:	463a      	mov	r2, r7
 80096a2:	f000 fcad 	bl	800a000 <__lshift>
 80096a6:	1bed      	subs	r5, r5, r7
 80096a8:	4604      	mov	r4, r0
 80096aa:	f100 0914 	add.w	r9, r0, #20
 80096ae:	f04f 0a00 	mov.w	sl, #0
 80096b2:	e7ae      	b.n	8009612 <__gethex+0x202>
 80096b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80096b8:	42a8      	cmp	r0, r5
 80096ba:	dd72      	ble.n	80097a2 <__gethex+0x392>
 80096bc:	1b45      	subs	r5, r0, r5
 80096be:	42ae      	cmp	r6, r5
 80096c0:	dc36      	bgt.n	8009730 <__gethex+0x320>
 80096c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d02a      	beq.n	8009720 <__gethex+0x310>
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d02c      	beq.n	8009728 <__gethex+0x318>
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d11c      	bne.n	800970c <__gethex+0x2fc>
 80096d2:	42ae      	cmp	r6, r5
 80096d4:	d11a      	bne.n	800970c <__gethex+0x2fc>
 80096d6:	2e01      	cmp	r6, #1
 80096d8:	d112      	bne.n	8009700 <__gethex+0x2f0>
 80096da:	9a04      	ldr	r2, [sp, #16]
 80096dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	2301      	movs	r3, #1
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	f8c9 3000 	str.w	r3, [r9]
 80096ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096ec:	2762      	movs	r7, #98	; 0x62
 80096ee:	601c      	str	r4, [r3, #0]
 80096f0:	e723      	b.n	800953a <__gethex+0x12a>
 80096f2:	bf00      	nop
 80096f4:	0800b35c 	.word	0x0800b35c
 80096f8:	0800b280 	.word	0x0800b280
 80096fc:	0800b2f4 	.word	0x0800b2f4
 8009700:	1e71      	subs	r1, r6, #1
 8009702:	4620      	mov	r0, r4
 8009704:	f000 fec0 	bl	800a488 <__any_on>
 8009708:	2800      	cmp	r0, #0
 800970a:	d1e6      	bne.n	80096da <__gethex+0x2ca>
 800970c:	ee18 0a10 	vmov	r0, s16
 8009710:	4621      	mov	r1, r4
 8009712:	f000 fa59 	bl	8009bc8 <_Bfree>
 8009716:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009718:	2300      	movs	r3, #0
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	2750      	movs	r7, #80	; 0x50
 800971e:	e70c      	b.n	800953a <__gethex+0x12a>
 8009720:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1f2      	bne.n	800970c <__gethex+0x2fc>
 8009726:	e7d8      	b.n	80096da <__gethex+0x2ca>
 8009728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1d5      	bne.n	80096da <__gethex+0x2ca>
 800972e:	e7ed      	b.n	800970c <__gethex+0x2fc>
 8009730:	1e6f      	subs	r7, r5, #1
 8009732:	f1ba 0f00 	cmp.w	sl, #0
 8009736:	d131      	bne.n	800979c <__gethex+0x38c>
 8009738:	b127      	cbz	r7, 8009744 <__gethex+0x334>
 800973a:	4639      	mov	r1, r7
 800973c:	4620      	mov	r0, r4
 800973e:	f000 fea3 	bl	800a488 <__any_on>
 8009742:	4682      	mov	sl, r0
 8009744:	117b      	asrs	r3, r7, #5
 8009746:	2101      	movs	r1, #1
 8009748:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800974c:	f007 071f 	and.w	r7, r7, #31
 8009750:	fa01 f707 	lsl.w	r7, r1, r7
 8009754:	421f      	tst	r7, r3
 8009756:	4629      	mov	r1, r5
 8009758:	4620      	mov	r0, r4
 800975a:	bf18      	it	ne
 800975c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009760:	1b76      	subs	r6, r6, r5
 8009762:	f7ff fdee 	bl	8009342 <rshift>
 8009766:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800976a:	2702      	movs	r7, #2
 800976c:	f1ba 0f00 	cmp.w	sl, #0
 8009770:	d048      	beq.n	8009804 <__gethex+0x3f4>
 8009772:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009776:	2b02      	cmp	r3, #2
 8009778:	d015      	beq.n	80097a6 <__gethex+0x396>
 800977a:	2b03      	cmp	r3, #3
 800977c:	d017      	beq.n	80097ae <__gethex+0x39e>
 800977e:	2b01      	cmp	r3, #1
 8009780:	d109      	bne.n	8009796 <__gethex+0x386>
 8009782:	f01a 0f02 	tst.w	sl, #2
 8009786:	d006      	beq.n	8009796 <__gethex+0x386>
 8009788:	f8d9 0000 	ldr.w	r0, [r9]
 800978c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009790:	f01a 0f01 	tst.w	sl, #1
 8009794:	d10e      	bne.n	80097b4 <__gethex+0x3a4>
 8009796:	f047 0710 	orr.w	r7, r7, #16
 800979a:	e033      	b.n	8009804 <__gethex+0x3f4>
 800979c:	f04f 0a01 	mov.w	sl, #1
 80097a0:	e7d0      	b.n	8009744 <__gethex+0x334>
 80097a2:	2701      	movs	r7, #1
 80097a4:	e7e2      	b.n	800976c <__gethex+0x35c>
 80097a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a8:	f1c3 0301 	rsb	r3, r3, #1
 80097ac:	9315      	str	r3, [sp, #84]	; 0x54
 80097ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0f0      	beq.n	8009796 <__gethex+0x386>
 80097b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097b8:	f104 0314 	add.w	r3, r4, #20
 80097bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80097c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80097c4:	f04f 0c00 	mov.w	ip, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80097d2:	d01c      	beq.n	800980e <__gethex+0x3fe>
 80097d4:	3201      	adds	r2, #1
 80097d6:	6002      	str	r2, [r0, #0]
 80097d8:	2f02      	cmp	r7, #2
 80097da:	f104 0314 	add.w	r3, r4, #20
 80097de:	d13f      	bne.n	8009860 <__gethex+0x450>
 80097e0:	f8d8 2000 	ldr.w	r2, [r8]
 80097e4:	3a01      	subs	r2, #1
 80097e6:	42b2      	cmp	r2, r6
 80097e8:	d10a      	bne.n	8009800 <__gethex+0x3f0>
 80097ea:	1171      	asrs	r1, r6, #5
 80097ec:	2201      	movs	r2, #1
 80097ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097f2:	f006 061f 	and.w	r6, r6, #31
 80097f6:	fa02 f606 	lsl.w	r6, r2, r6
 80097fa:	421e      	tst	r6, r3
 80097fc:	bf18      	it	ne
 80097fe:	4617      	movne	r7, r2
 8009800:	f047 0720 	orr.w	r7, r7, #32
 8009804:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009806:	601c      	str	r4, [r3, #0]
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	601d      	str	r5, [r3, #0]
 800980c:	e695      	b.n	800953a <__gethex+0x12a>
 800980e:	4299      	cmp	r1, r3
 8009810:	f843 cc04 	str.w	ip, [r3, #-4]
 8009814:	d8d8      	bhi.n	80097c8 <__gethex+0x3b8>
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	459b      	cmp	fp, r3
 800981a:	db19      	blt.n	8009850 <__gethex+0x440>
 800981c:	6861      	ldr	r1, [r4, #4]
 800981e:	ee18 0a10 	vmov	r0, s16
 8009822:	3101      	adds	r1, #1
 8009824:	f000 f990 	bl	8009b48 <_Balloc>
 8009828:	4681      	mov	r9, r0
 800982a:	b918      	cbnz	r0, 8009834 <__gethex+0x424>
 800982c:	4b1a      	ldr	r3, [pc, #104]	; (8009898 <__gethex+0x488>)
 800982e:	4602      	mov	r2, r0
 8009830:	2184      	movs	r1, #132	; 0x84
 8009832:	e6a8      	b.n	8009586 <__gethex+0x176>
 8009834:	6922      	ldr	r2, [r4, #16]
 8009836:	3202      	adds	r2, #2
 8009838:	f104 010c 	add.w	r1, r4, #12
 800983c:	0092      	lsls	r2, r2, #2
 800983e:	300c      	adds	r0, #12
 8009840:	f000 f974 	bl	8009b2c <memcpy>
 8009844:	4621      	mov	r1, r4
 8009846:	ee18 0a10 	vmov	r0, s16
 800984a:	f000 f9bd 	bl	8009bc8 <_Bfree>
 800984e:	464c      	mov	r4, r9
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009858:	6122      	str	r2, [r4, #16]
 800985a:	2201      	movs	r2, #1
 800985c:	615a      	str	r2, [r3, #20]
 800985e:	e7bb      	b.n	80097d8 <__gethex+0x3c8>
 8009860:	6922      	ldr	r2, [r4, #16]
 8009862:	455a      	cmp	r2, fp
 8009864:	dd0b      	ble.n	800987e <__gethex+0x46e>
 8009866:	2101      	movs	r1, #1
 8009868:	4620      	mov	r0, r4
 800986a:	f7ff fd6a 	bl	8009342 <rshift>
 800986e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009872:	3501      	adds	r5, #1
 8009874:	42ab      	cmp	r3, r5
 8009876:	f6ff aed0 	blt.w	800961a <__gethex+0x20a>
 800987a:	2701      	movs	r7, #1
 800987c:	e7c0      	b.n	8009800 <__gethex+0x3f0>
 800987e:	f016 061f 	ands.w	r6, r6, #31
 8009882:	d0fa      	beq.n	800987a <__gethex+0x46a>
 8009884:	4453      	add	r3, sl
 8009886:	f1c6 0620 	rsb	r6, r6, #32
 800988a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800988e:	f000 fa4d 	bl	8009d2c <__hi0bits>
 8009892:	42b0      	cmp	r0, r6
 8009894:	dbe7      	blt.n	8009866 <__gethex+0x456>
 8009896:	e7f0      	b.n	800987a <__gethex+0x46a>
 8009898:	0800b280 	.word	0x0800b280

0800989c <L_shift>:
 800989c:	f1c2 0208 	rsb	r2, r2, #8
 80098a0:	0092      	lsls	r2, r2, #2
 80098a2:	b570      	push	{r4, r5, r6, lr}
 80098a4:	f1c2 0620 	rsb	r6, r2, #32
 80098a8:	6843      	ldr	r3, [r0, #4]
 80098aa:	6804      	ldr	r4, [r0, #0]
 80098ac:	fa03 f506 	lsl.w	r5, r3, r6
 80098b0:	432c      	orrs	r4, r5
 80098b2:	40d3      	lsrs	r3, r2
 80098b4:	6004      	str	r4, [r0, #0]
 80098b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80098ba:	4288      	cmp	r0, r1
 80098bc:	d3f4      	bcc.n	80098a8 <L_shift+0xc>
 80098be:	bd70      	pop	{r4, r5, r6, pc}

080098c0 <__match>:
 80098c0:	b530      	push	{r4, r5, lr}
 80098c2:	6803      	ldr	r3, [r0, #0]
 80098c4:	3301      	adds	r3, #1
 80098c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ca:	b914      	cbnz	r4, 80098d2 <__match+0x12>
 80098cc:	6003      	str	r3, [r0, #0]
 80098ce:	2001      	movs	r0, #1
 80098d0:	bd30      	pop	{r4, r5, pc}
 80098d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098da:	2d19      	cmp	r5, #25
 80098dc:	bf98      	it	ls
 80098de:	3220      	addls	r2, #32
 80098e0:	42a2      	cmp	r2, r4
 80098e2:	d0f0      	beq.n	80098c6 <__match+0x6>
 80098e4:	2000      	movs	r0, #0
 80098e6:	e7f3      	b.n	80098d0 <__match+0x10>

080098e8 <__hexnan>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	680b      	ldr	r3, [r1, #0]
 80098ee:	115e      	asrs	r6, r3, #5
 80098f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098f4:	f013 031f 	ands.w	r3, r3, #31
 80098f8:	b087      	sub	sp, #28
 80098fa:	bf18      	it	ne
 80098fc:	3604      	addne	r6, #4
 80098fe:	2500      	movs	r5, #0
 8009900:	1f37      	subs	r7, r6, #4
 8009902:	4690      	mov	r8, r2
 8009904:	6802      	ldr	r2, [r0, #0]
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	4682      	mov	sl, r0
 800990a:	f846 5c04 	str.w	r5, [r6, #-4]
 800990e:	46b9      	mov	r9, r7
 8009910:	463c      	mov	r4, r7
 8009912:	9502      	str	r5, [sp, #8]
 8009914:	46ab      	mov	fp, r5
 8009916:	7851      	ldrb	r1, [r2, #1]
 8009918:	1c53      	adds	r3, r2, #1
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	b341      	cbz	r1, 8009970 <__hexnan+0x88>
 800991e:	4608      	mov	r0, r1
 8009920:	9205      	str	r2, [sp, #20]
 8009922:	9104      	str	r1, [sp, #16]
 8009924:	f7ff fd5f 	bl	80093e6 <__hexdig_fun>
 8009928:	2800      	cmp	r0, #0
 800992a:	d14f      	bne.n	80099cc <__hexnan+0xe4>
 800992c:	9904      	ldr	r1, [sp, #16]
 800992e:	9a05      	ldr	r2, [sp, #20]
 8009930:	2920      	cmp	r1, #32
 8009932:	d818      	bhi.n	8009966 <__hexnan+0x7e>
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	459b      	cmp	fp, r3
 8009938:	dd13      	ble.n	8009962 <__hexnan+0x7a>
 800993a:	454c      	cmp	r4, r9
 800993c:	d206      	bcs.n	800994c <__hexnan+0x64>
 800993e:	2d07      	cmp	r5, #7
 8009940:	dc04      	bgt.n	800994c <__hexnan+0x64>
 8009942:	462a      	mov	r2, r5
 8009944:	4649      	mov	r1, r9
 8009946:	4620      	mov	r0, r4
 8009948:	f7ff ffa8 	bl	800989c <L_shift>
 800994c:	4544      	cmp	r4, r8
 800994e:	d950      	bls.n	80099f2 <__hexnan+0x10a>
 8009950:	2300      	movs	r3, #0
 8009952:	f1a4 0904 	sub.w	r9, r4, #4
 8009956:	f844 3c04 	str.w	r3, [r4, #-4]
 800995a:	f8cd b008 	str.w	fp, [sp, #8]
 800995e:	464c      	mov	r4, r9
 8009960:	461d      	mov	r5, r3
 8009962:	9a03      	ldr	r2, [sp, #12]
 8009964:	e7d7      	b.n	8009916 <__hexnan+0x2e>
 8009966:	2929      	cmp	r1, #41	; 0x29
 8009968:	d156      	bne.n	8009a18 <__hexnan+0x130>
 800996a:	3202      	adds	r2, #2
 800996c:	f8ca 2000 	str.w	r2, [sl]
 8009970:	f1bb 0f00 	cmp.w	fp, #0
 8009974:	d050      	beq.n	8009a18 <__hexnan+0x130>
 8009976:	454c      	cmp	r4, r9
 8009978:	d206      	bcs.n	8009988 <__hexnan+0xa0>
 800997a:	2d07      	cmp	r5, #7
 800997c:	dc04      	bgt.n	8009988 <__hexnan+0xa0>
 800997e:	462a      	mov	r2, r5
 8009980:	4649      	mov	r1, r9
 8009982:	4620      	mov	r0, r4
 8009984:	f7ff ff8a 	bl	800989c <L_shift>
 8009988:	4544      	cmp	r4, r8
 800998a:	d934      	bls.n	80099f6 <__hexnan+0x10e>
 800998c:	f1a8 0204 	sub.w	r2, r8, #4
 8009990:	4623      	mov	r3, r4
 8009992:	f853 1b04 	ldr.w	r1, [r3], #4
 8009996:	f842 1f04 	str.w	r1, [r2, #4]!
 800999a:	429f      	cmp	r7, r3
 800999c:	d2f9      	bcs.n	8009992 <__hexnan+0xaa>
 800999e:	1b3b      	subs	r3, r7, r4
 80099a0:	f023 0303 	bic.w	r3, r3, #3
 80099a4:	3304      	adds	r3, #4
 80099a6:	3401      	adds	r4, #1
 80099a8:	3e03      	subs	r6, #3
 80099aa:	42b4      	cmp	r4, r6
 80099ac:	bf88      	it	hi
 80099ae:	2304      	movhi	r3, #4
 80099b0:	4443      	add	r3, r8
 80099b2:	2200      	movs	r2, #0
 80099b4:	f843 2b04 	str.w	r2, [r3], #4
 80099b8:	429f      	cmp	r7, r3
 80099ba:	d2fb      	bcs.n	80099b4 <__hexnan+0xcc>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	b91b      	cbnz	r3, 80099c8 <__hexnan+0xe0>
 80099c0:	4547      	cmp	r7, r8
 80099c2:	d127      	bne.n	8009a14 <__hexnan+0x12c>
 80099c4:	2301      	movs	r3, #1
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	2005      	movs	r0, #5
 80099ca:	e026      	b.n	8009a1a <__hexnan+0x132>
 80099cc:	3501      	adds	r5, #1
 80099ce:	2d08      	cmp	r5, #8
 80099d0:	f10b 0b01 	add.w	fp, fp, #1
 80099d4:	dd06      	ble.n	80099e4 <__hexnan+0xfc>
 80099d6:	4544      	cmp	r4, r8
 80099d8:	d9c3      	bls.n	8009962 <__hexnan+0x7a>
 80099da:	2300      	movs	r3, #0
 80099dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80099e0:	2501      	movs	r5, #1
 80099e2:	3c04      	subs	r4, #4
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	f000 000f 	and.w	r0, r0, #15
 80099ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80099ee:	6022      	str	r2, [r4, #0]
 80099f0:	e7b7      	b.n	8009962 <__hexnan+0x7a>
 80099f2:	2508      	movs	r5, #8
 80099f4:	e7b5      	b.n	8009962 <__hexnan+0x7a>
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0df      	beq.n	80099bc <__hexnan+0xd4>
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	f1c3 0320 	rsb	r3, r3, #32
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
 8009a08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a0c:	401a      	ands	r2, r3
 8009a0e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a12:	e7d3      	b.n	80099bc <__hexnan+0xd4>
 8009a14:	3f04      	subs	r7, #4
 8009a16:	e7d1      	b.n	80099bc <__hexnan+0xd4>
 8009a18:	2004      	movs	r0, #4
 8009a1a:	b007      	add	sp, #28
 8009a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a20 <_localeconv_r>:
 8009a20:	4800      	ldr	r0, [pc, #0]	; (8009a24 <_localeconv_r+0x4>)
 8009a22:	4770      	bx	lr
 8009a24:	20000164 	.word	0x20000164

08009a28 <__retarget_lock_init_recursive>:
 8009a28:	4770      	bx	lr

08009a2a <__retarget_lock_acquire_recursive>:
 8009a2a:	4770      	bx	lr

08009a2c <__retarget_lock_release_recursive>:
 8009a2c:	4770      	bx	lr

08009a2e <__swhatbuf_r>:
 8009a2e:	b570      	push	{r4, r5, r6, lr}
 8009a30:	460e      	mov	r6, r1
 8009a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a36:	2900      	cmp	r1, #0
 8009a38:	b096      	sub	sp, #88	; 0x58
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	461d      	mov	r5, r3
 8009a3e:	da08      	bge.n	8009a52 <__swhatbuf_r+0x24>
 8009a40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	602a      	str	r2, [r5, #0]
 8009a48:	061a      	lsls	r2, r3, #24
 8009a4a:	d410      	bmi.n	8009a6e <__swhatbuf_r+0x40>
 8009a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a50:	e00e      	b.n	8009a70 <__swhatbuf_r+0x42>
 8009a52:	466a      	mov	r2, sp
 8009a54:	f001 f9b6 	bl	800adc4 <_fstat_r>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	dbf1      	blt.n	8009a40 <__swhatbuf_r+0x12>
 8009a5c:	9a01      	ldr	r2, [sp, #4]
 8009a5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a66:	425a      	negs	r2, r3
 8009a68:	415a      	adcs	r2, r3
 8009a6a:	602a      	str	r2, [r5, #0]
 8009a6c:	e7ee      	b.n	8009a4c <__swhatbuf_r+0x1e>
 8009a6e:	2340      	movs	r3, #64	; 0x40
 8009a70:	2000      	movs	r0, #0
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	b016      	add	sp, #88	; 0x58
 8009a76:	bd70      	pop	{r4, r5, r6, pc}

08009a78 <__smakebuf_r>:
 8009a78:	898b      	ldrh	r3, [r1, #12]
 8009a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a7c:	079d      	lsls	r5, r3, #30
 8009a7e:	4606      	mov	r6, r0
 8009a80:	460c      	mov	r4, r1
 8009a82:	d507      	bpl.n	8009a94 <__smakebuf_r+0x1c>
 8009a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	6163      	str	r3, [r4, #20]
 8009a90:	b002      	add	sp, #8
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	ab01      	add	r3, sp, #4
 8009a96:	466a      	mov	r2, sp
 8009a98:	f7ff ffc9 	bl	8009a2e <__swhatbuf_r>
 8009a9c:	9900      	ldr	r1, [sp, #0]
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f000 fd95 	bl	800a5d0 <_malloc_r>
 8009aa6:	b948      	cbnz	r0, 8009abc <__smakebuf_r+0x44>
 8009aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aac:	059a      	lsls	r2, r3, #22
 8009aae:	d4ef      	bmi.n	8009a90 <__smakebuf_r+0x18>
 8009ab0:	f023 0303 	bic.w	r3, r3, #3
 8009ab4:	f043 0302 	orr.w	r3, r3, #2
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	e7e3      	b.n	8009a84 <__smakebuf_r+0xc>
 8009abc:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <__smakebuf_r+0x7c>)
 8009abe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	6020      	str	r0, [r4, #0]
 8009ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac8:	81a3      	strh	r3, [r4, #12]
 8009aca:	9b00      	ldr	r3, [sp, #0]
 8009acc:	6163      	str	r3, [r4, #20]
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	6120      	str	r0, [r4, #16]
 8009ad2:	b15b      	cbz	r3, 8009aec <__smakebuf_r+0x74>
 8009ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f001 f985 	bl	800ade8 <_isatty_r>
 8009ade:	b128      	cbz	r0, 8009aec <__smakebuf_r+0x74>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	f043 0301 	orr.w	r3, r3, #1
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	89a0      	ldrh	r0, [r4, #12]
 8009aee:	4305      	orrs	r5, r0
 8009af0:	81a5      	strh	r5, [r4, #12]
 8009af2:	e7cd      	b.n	8009a90 <__smakebuf_r+0x18>
 8009af4:	080091a1 	.word	0x080091a1

08009af8 <malloc>:
 8009af8:	4b02      	ldr	r3, [pc, #8]	; (8009b04 <malloc+0xc>)
 8009afa:	4601      	mov	r1, r0
 8009afc:	6818      	ldr	r0, [r3, #0]
 8009afe:	f000 bd67 	b.w	800a5d0 <_malloc_r>
 8009b02:	bf00      	nop
 8009b04:	2000000c 	.word	0x2000000c

08009b08 <__ascii_mbtowc>:
 8009b08:	b082      	sub	sp, #8
 8009b0a:	b901      	cbnz	r1, 8009b0e <__ascii_mbtowc+0x6>
 8009b0c:	a901      	add	r1, sp, #4
 8009b0e:	b142      	cbz	r2, 8009b22 <__ascii_mbtowc+0x1a>
 8009b10:	b14b      	cbz	r3, 8009b26 <__ascii_mbtowc+0x1e>
 8009b12:	7813      	ldrb	r3, [r2, #0]
 8009b14:	600b      	str	r3, [r1, #0]
 8009b16:	7812      	ldrb	r2, [r2, #0]
 8009b18:	1e10      	subs	r0, r2, #0
 8009b1a:	bf18      	it	ne
 8009b1c:	2001      	movne	r0, #1
 8009b1e:	b002      	add	sp, #8
 8009b20:	4770      	bx	lr
 8009b22:	4610      	mov	r0, r2
 8009b24:	e7fb      	b.n	8009b1e <__ascii_mbtowc+0x16>
 8009b26:	f06f 0001 	mvn.w	r0, #1
 8009b2a:	e7f8      	b.n	8009b1e <__ascii_mbtowc+0x16>

08009b2c <memcpy>:
 8009b2c:	440a      	add	r2, r1
 8009b2e:	4291      	cmp	r1, r2
 8009b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b34:	d100      	bne.n	8009b38 <memcpy+0xc>
 8009b36:	4770      	bx	lr
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b42:	4291      	cmp	r1, r2
 8009b44:	d1f9      	bne.n	8009b3a <memcpy+0xe>
 8009b46:	bd10      	pop	{r4, pc}

08009b48 <_Balloc>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	460d      	mov	r5, r1
 8009b50:	b976      	cbnz	r6, 8009b70 <_Balloc+0x28>
 8009b52:	2010      	movs	r0, #16
 8009b54:	f7ff ffd0 	bl	8009af8 <malloc>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b5c:	b920      	cbnz	r0, 8009b68 <_Balloc+0x20>
 8009b5e:	4b18      	ldr	r3, [pc, #96]	; (8009bc0 <_Balloc+0x78>)
 8009b60:	4818      	ldr	r0, [pc, #96]	; (8009bc4 <_Balloc+0x7c>)
 8009b62:	2166      	movs	r1, #102	; 0x66
 8009b64:	f001 f8ee 	bl	800ad44 <__assert_func>
 8009b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b6c:	6006      	str	r6, [r0, #0]
 8009b6e:	60c6      	str	r6, [r0, #12]
 8009b70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b72:	68f3      	ldr	r3, [r6, #12]
 8009b74:	b183      	cbz	r3, 8009b98 <_Balloc+0x50>
 8009b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b7e:	b9b8      	cbnz	r0, 8009bb0 <_Balloc+0x68>
 8009b80:	2101      	movs	r1, #1
 8009b82:	fa01 f605 	lsl.w	r6, r1, r5
 8009b86:	1d72      	adds	r2, r6, #5
 8009b88:	0092      	lsls	r2, r2, #2
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 fc9d 	bl	800a4ca <_calloc_r>
 8009b90:	b160      	cbz	r0, 8009bac <_Balloc+0x64>
 8009b92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b96:	e00e      	b.n	8009bb6 <_Balloc+0x6e>
 8009b98:	2221      	movs	r2, #33	; 0x21
 8009b9a:	2104      	movs	r1, #4
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 fc94 	bl	800a4ca <_calloc_r>
 8009ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ba4:	60f0      	str	r0, [r6, #12]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e4      	bne.n	8009b76 <_Balloc+0x2e>
 8009bac:	2000      	movs	r0, #0
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	6802      	ldr	r2, [r0, #0]
 8009bb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bbc:	e7f7      	b.n	8009bae <_Balloc+0x66>
 8009bbe:	bf00      	nop
 8009bc0:	0800b20e 	.word	0x0800b20e
 8009bc4:	0800b370 	.word	0x0800b370

08009bc8 <_Bfree>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	b976      	cbnz	r6, 8009bf0 <_Bfree+0x28>
 8009bd2:	2010      	movs	r0, #16
 8009bd4:	f7ff ff90 	bl	8009af8 <malloc>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6268      	str	r0, [r5, #36]	; 0x24
 8009bdc:	b920      	cbnz	r0, 8009be8 <_Bfree+0x20>
 8009bde:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <_Bfree+0x3c>)
 8009be0:	4809      	ldr	r0, [pc, #36]	; (8009c08 <_Bfree+0x40>)
 8009be2:	218a      	movs	r1, #138	; 0x8a
 8009be4:	f001 f8ae 	bl	800ad44 <__assert_func>
 8009be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bec:	6006      	str	r6, [r0, #0]
 8009bee:	60c6      	str	r6, [r0, #12]
 8009bf0:	b13c      	cbz	r4, 8009c02 <_Bfree+0x3a>
 8009bf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bf4:	6862      	ldr	r2, [r4, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bfc:	6021      	str	r1, [r4, #0]
 8009bfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	0800b20e 	.word	0x0800b20e
 8009c08:	0800b370 	.word	0x0800b370

08009c0c <__multadd>:
 8009c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c10:	690d      	ldr	r5, [r1, #16]
 8009c12:	4607      	mov	r7, r0
 8009c14:	460c      	mov	r4, r1
 8009c16:	461e      	mov	r6, r3
 8009c18:	f101 0c14 	add.w	ip, r1, #20
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c22:	b299      	uxth	r1, r3
 8009c24:	fb02 6101 	mla	r1, r2, r1, r6
 8009c28:	0c1e      	lsrs	r6, r3, #16
 8009c2a:	0c0b      	lsrs	r3, r1, #16
 8009c2c:	fb02 3306 	mla	r3, r2, r6, r3
 8009c30:	b289      	uxth	r1, r1
 8009c32:	3001      	adds	r0, #1
 8009c34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c38:	4285      	cmp	r5, r0
 8009c3a:	f84c 1b04 	str.w	r1, [ip], #4
 8009c3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c42:	dcec      	bgt.n	8009c1e <__multadd+0x12>
 8009c44:	b30e      	cbz	r6, 8009c8a <__multadd+0x7e>
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	dc19      	bgt.n	8009c80 <__multadd+0x74>
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	4638      	mov	r0, r7
 8009c50:	3101      	adds	r1, #1
 8009c52:	f7ff ff79 	bl	8009b48 <_Balloc>
 8009c56:	4680      	mov	r8, r0
 8009c58:	b928      	cbnz	r0, 8009c66 <__multadd+0x5a>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <__multadd+0x84>)
 8009c5e:	480d      	ldr	r0, [pc, #52]	; (8009c94 <__multadd+0x88>)
 8009c60:	21b5      	movs	r1, #181	; 0xb5
 8009c62:	f001 f86f 	bl	800ad44 <__assert_func>
 8009c66:	6922      	ldr	r2, [r4, #16]
 8009c68:	3202      	adds	r2, #2
 8009c6a:	f104 010c 	add.w	r1, r4, #12
 8009c6e:	0092      	lsls	r2, r2, #2
 8009c70:	300c      	adds	r0, #12
 8009c72:	f7ff ff5b 	bl	8009b2c <memcpy>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7ff ffa5 	bl	8009bc8 <_Bfree>
 8009c7e:	4644      	mov	r4, r8
 8009c80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c84:	3501      	adds	r5, #1
 8009c86:	615e      	str	r6, [r3, #20]
 8009c88:	6125      	str	r5, [r4, #16]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c90:	0800b280 	.word	0x0800b280
 8009c94:	0800b370 	.word	0x0800b370

08009c98 <__s2b>:
 8009c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	4615      	mov	r5, r2
 8009ca0:	461f      	mov	r7, r3
 8009ca2:	2209      	movs	r2, #9
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cac:	2100      	movs	r1, #0
 8009cae:	2201      	movs	r2, #1
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	db09      	blt.n	8009cc8 <__s2b+0x30>
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff ff47 	bl	8009b48 <_Balloc>
 8009cba:	b940      	cbnz	r0, 8009cce <__s2b+0x36>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	4b19      	ldr	r3, [pc, #100]	; (8009d24 <__s2b+0x8c>)
 8009cc0:	4819      	ldr	r0, [pc, #100]	; (8009d28 <__s2b+0x90>)
 8009cc2:	21ce      	movs	r1, #206	; 0xce
 8009cc4:	f001 f83e 	bl	800ad44 <__assert_func>
 8009cc8:	0052      	lsls	r2, r2, #1
 8009cca:	3101      	adds	r1, #1
 8009ccc:	e7f0      	b.n	8009cb0 <__s2b+0x18>
 8009cce:	9b08      	ldr	r3, [sp, #32]
 8009cd0:	6143      	str	r3, [r0, #20]
 8009cd2:	2d09      	cmp	r5, #9
 8009cd4:	f04f 0301 	mov.w	r3, #1
 8009cd8:	6103      	str	r3, [r0, #16]
 8009cda:	dd16      	ble.n	8009d0a <__s2b+0x72>
 8009cdc:	f104 0909 	add.w	r9, r4, #9
 8009ce0:	46c8      	mov	r8, r9
 8009ce2:	442c      	add	r4, r5
 8009ce4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ce8:	4601      	mov	r1, r0
 8009cea:	3b30      	subs	r3, #48	; 0x30
 8009cec:	220a      	movs	r2, #10
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f7ff ff8c 	bl	8009c0c <__multadd>
 8009cf4:	45a0      	cmp	r8, r4
 8009cf6:	d1f5      	bne.n	8009ce4 <__s2b+0x4c>
 8009cf8:	f1a5 0408 	sub.w	r4, r5, #8
 8009cfc:	444c      	add	r4, r9
 8009cfe:	1b2d      	subs	r5, r5, r4
 8009d00:	1963      	adds	r3, r4, r5
 8009d02:	42bb      	cmp	r3, r7
 8009d04:	db04      	blt.n	8009d10 <__s2b+0x78>
 8009d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d0a:	340a      	adds	r4, #10
 8009d0c:	2509      	movs	r5, #9
 8009d0e:	e7f6      	b.n	8009cfe <__s2b+0x66>
 8009d10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d14:	4601      	mov	r1, r0
 8009d16:	3b30      	subs	r3, #48	; 0x30
 8009d18:	220a      	movs	r2, #10
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7ff ff76 	bl	8009c0c <__multadd>
 8009d20:	e7ee      	b.n	8009d00 <__s2b+0x68>
 8009d22:	bf00      	nop
 8009d24:	0800b280 	.word	0x0800b280
 8009d28:	0800b370 	.word	0x0800b370

08009d2c <__hi0bits>:
 8009d2c:	0c03      	lsrs	r3, r0, #16
 8009d2e:	041b      	lsls	r3, r3, #16
 8009d30:	b9d3      	cbnz	r3, 8009d68 <__hi0bits+0x3c>
 8009d32:	0400      	lsls	r0, r0, #16
 8009d34:	2310      	movs	r3, #16
 8009d36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d3a:	bf04      	itt	eq
 8009d3c:	0200      	lsleq	r0, r0, #8
 8009d3e:	3308      	addeq	r3, #8
 8009d40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d44:	bf04      	itt	eq
 8009d46:	0100      	lsleq	r0, r0, #4
 8009d48:	3304      	addeq	r3, #4
 8009d4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d4e:	bf04      	itt	eq
 8009d50:	0080      	lsleq	r0, r0, #2
 8009d52:	3302      	addeq	r3, #2
 8009d54:	2800      	cmp	r0, #0
 8009d56:	db05      	blt.n	8009d64 <__hi0bits+0x38>
 8009d58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d5c:	f103 0301 	add.w	r3, r3, #1
 8009d60:	bf08      	it	eq
 8009d62:	2320      	moveq	r3, #32
 8009d64:	4618      	mov	r0, r3
 8009d66:	4770      	bx	lr
 8009d68:	2300      	movs	r3, #0
 8009d6a:	e7e4      	b.n	8009d36 <__hi0bits+0xa>

08009d6c <__lo0bits>:
 8009d6c:	6803      	ldr	r3, [r0, #0]
 8009d6e:	f013 0207 	ands.w	r2, r3, #7
 8009d72:	4601      	mov	r1, r0
 8009d74:	d00b      	beq.n	8009d8e <__lo0bits+0x22>
 8009d76:	07da      	lsls	r2, r3, #31
 8009d78:	d423      	bmi.n	8009dc2 <__lo0bits+0x56>
 8009d7a:	0798      	lsls	r0, r3, #30
 8009d7c:	bf49      	itett	mi
 8009d7e:	085b      	lsrmi	r3, r3, #1
 8009d80:	089b      	lsrpl	r3, r3, #2
 8009d82:	2001      	movmi	r0, #1
 8009d84:	600b      	strmi	r3, [r1, #0]
 8009d86:	bf5c      	itt	pl
 8009d88:	600b      	strpl	r3, [r1, #0]
 8009d8a:	2002      	movpl	r0, #2
 8009d8c:	4770      	bx	lr
 8009d8e:	b298      	uxth	r0, r3
 8009d90:	b9a8      	cbnz	r0, 8009dbe <__lo0bits+0x52>
 8009d92:	0c1b      	lsrs	r3, r3, #16
 8009d94:	2010      	movs	r0, #16
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	b90a      	cbnz	r2, 8009d9e <__lo0bits+0x32>
 8009d9a:	3008      	adds	r0, #8
 8009d9c:	0a1b      	lsrs	r3, r3, #8
 8009d9e:	071a      	lsls	r2, r3, #28
 8009da0:	bf04      	itt	eq
 8009da2:	091b      	lsreq	r3, r3, #4
 8009da4:	3004      	addeq	r0, #4
 8009da6:	079a      	lsls	r2, r3, #30
 8009da8:	bf04      	itt	eq
 8009daa:	089b      	lsreq	r3, r3, #2
 8009dac:	3002      	addeq	r0, #2
 8009dae:	07da      	lsls	r2, r3, #31
 8009db0:	d403      	bmi.n	8009dba <__lo0bits+0x4e>
 8009db2:	085b      	lsrs	r3, r3, #1
 8009db4:	f100 0001 	add.w	r0, r0, #1
 8009db8:	d005      	beq.n	8009dc6 <__lo0bits+0x5a>
 8009dba:	600b      	str	r3, [r1, #0]
 8009dbc:	4770      	bx	lr
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	e7e9      	b.n	8009d96 <__lo0bits+0x2a>
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	4770      	bx	lr
 8009dc6:	2020      	movs	r0, #32
 8009dc8:	4770      	bx	lr
	...

08009dcc <__i2b>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	460c      	mov	r4, r1
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	f7ff feb9 	bl	8009b48 <_Balloc>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	b928      	cbnz	r0, 8009de6 <__i2b+0x1a>
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <__i2b+0x24>)
 8009ddc:	4805      	ldr	r0, [pc, #20]	; (8009df4 <__i2b+0x28>)
 8009dde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009de2:	f000 ffaf 	bl	800ad44 <__assert_func>
 8009de6:	2301      	movs	r3, #1
 8009de8:	6144      	str	r4, [r0, #20]
 8009dea:	6103      	str	r3, [r0, #16]
 8009dec:	bd10      	pop	{r4, pc}
 8009dee:	bf00      	nop
 8009df0:	0800b280 	.word	0x0800b280
 8009df4:	0800b370 	.word	0x0800b370

08009df8 <__multiply>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	4691      	mov	r9, r2
 8009dfe:	690a      	ldr	r2, [r1, #16]
 8009e00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	bfb8      	it	lt
 8009e08:	460b      	movlt	r3, r1
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	bfbc      	itt	lt
 8009e0e:	464c      	movlt	r4, r9
 8009e10:	4699      	movlt	r9, r3
 8009e12:	6927      	ldr	r7, [r4, #16]
 8009e14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e18:	68a3      	ldr	r3, [r4, #8]
 8009e1a:	6861      	ldr	r1, [r4, #4]
 8009e1c:	eb07 060a 	add.w	r6, r7, sl
 8009e20:	42b3      	cmp	r3, r6
 8009e22:	b085      	sub	sp, #20
 8009e24:	bfb8      	it	lt
 8009e26:	3101      	addlt	r1, #1
 8009e28:	f7ff fe8e 	bl	8009b48 <_Balloc>
 8009e2c:	b930      	cbnz	r0, 8009e3c <__multiply+0x44>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	4b44      	ldr	r3, [pc, #272]	; (8009f44 <__multiply+0x14c>)
 8009e32:	4845      	ldr	r0, [pc, #276]	; (8009f48 <__multiply+0x150>)
 8009e34:	f240 115d 	movw	r1, #349	; 0x15d
 8009e38:	f000 ff84 	bl	800ad44 <__assert_func>
 8009e3c:	f100 0514 	add.w	r5, r0, #20
 8009e40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e44:	462b      	mov	r3, r5
 8009e46:	2200      	movs	r2, #0
 8009e48:	4543      	cmp	r3, r8
 8009e4a:	d321      	bcc.n	8009e90 <__multiply+0x98>
 8009e4c:	f104 0314 	add.w	r3, r4, #20
 8009e50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e54:	f109 0314 	add.w	r3, r9, #20
 8009e58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e5c:	9202      	str	r2, [sp, #8]
 8009e5e:	1b3a      	subs	r2, r7, r4
 8009e60:	3a15      	subs	r2, #21
 8009e62:	f022 0203 	bic.w	r2, r2, #3
 8009e66:	3204      	adds	r2, #4
 8009e68:	f104 0115 	add.w	r1, r4, #21
 8009e6c:	428f      	cmp	r7, r1
 8009e6e:	bf38      	it	cc
 8009e70:	2204      	movcc	r2, #4
 8009e72:	9201      	str	r2, [sp, #4]
 8009e74:	9a02      	ldr	r2, [sp, #8]
 8009e76:	9303      	str	r3, [sp, #12]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d80c      	bhi.n	8009e96 <__multiply+0x9e>
 8009e7c:	2e00      	cmp	r6, #0
 8009e7e:	dd03      	ble.n	8009e88 <__multiply+0x90>
 8009e80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d05a      	beq.n	8009f3e <__multiply+0x146>
 8009e88:	6106      	str	r6, [r0, #16]
 8009e8a:	b005      	add	sp, #20
 8009e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e90:	f843 2b04 	str.w	r2, [r3], #4
 8009e94:	e7d8      	b.n	8009e48 <__multiply+0x50>
 8009e96:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e9a:	f1ba 0f00 	cmp.w	sl, #0
 8009e9e:	d024      	beq.n	8009eea <__multiply+0xf2>
 8009ea0:	f104 0e14 	add.w	lr, r4, #20
 8009ea4:	46a9      	mov	r9, r5
 8009ea6:	f04f 0c00 	mov.w	ip, #0
 8009eaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009eae:	f8d9 1000 	ldr.w	r1, [r9]
 8009eb2:	fa1f fb82 	uxth.w	fp, r2
 8009eb6:	b289      	uxth	r1, r1
 8009eb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ebc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ec0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ec4:	4461      	add	r1, ip
 8009ec6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eca:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ece:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ed2:	b289      	uxth	r1, r1
 8009ed4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ed8:	4577      	cmp	r7, lr
 8009eda:	f849 1b04 	str.w	r1, [r9], #4
 8009ede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ee2:	d8e2      	bhi.n	8009eaa <__multiply+0xb2>
 8009ee4:	9a01      	ldr	r2, [sp, #4]
 8009ee6:	f845 c002 	str.w	ip, [r5, r2]
 8009eea:	9a03      	ldr	r2, [sp, #12]
 8009eec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	f1b9 0f00 	cmp.w	r9, #0
 8009ef6:	d020      	beq.n	8009f3a <__multiply+0x142>
 8009ef8:	6829      	ldr	r1, [r5, #0]
 8009efa:	f104 0c14 	add.w	ip, r4, #20
 8009efe:	46ae      	mov	lr, r5
 8009f00:	f04f 0a00 	mov.w	sl, #0
 8009f04:	f8bc b000 	ldrh.w	fp, [ip]
 8009f08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f0c:	fb09 220b 	mla	r2, r9, fp, r2
 8009f10:	4492      	add	sl, r2
 8009f12:	b289      	uxth	r1, r1
 8009f14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f18:	f84e 1b04 	str.w	r1, [lr], #4
 8009f1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f20:	f8be 1000 	ldrh.w	r1, [lr]
 8009f24:	0c12      	lsrs	r2, r2, #16
 8009f26:	fb09 1102 	mla	r1, r9, r2, r1
 8009f2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f2e:	4567      	cmp	r7, ip
 8009f30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f34:	d8e6      	bhi.n	8009f04 <__multiply+0x10c>
 8009f36:	9a01      	ldr	r2, [sp, #4]
 8009f38:	50a9      	str	r1, [r5, r2]
 8009f3a:	3504      	adds	r5, #4
 8009f3c:	e79a      	b.n	8009e74 <__multiply+0x7c>
 8009f3e:	3e01      	subs	r6, #1
 8009f40:	e79c      	b.n	8009e7c <__multiply+0x84>
 8009f42:	bf00      	nop
 8009f44:	0800b280 	.word	0x0800b280
 8009f48:	0800b370 	.word	0x0800b370

08009f4c <__pow5mult>:
 8009f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f50:	4615      	mov	r5, r2
 8009f52:	f012 0203 	ands.w	r2, r2, #3
 8009f56:	4606      	mov	r6, r0
 8009f58:	460f      	mov	r7, r1
 8009f5a:	d007      	beq.n	8009f6c <__pow5mult+0x20>
 8009f5c:	4c25      	ldr	r4, [pc, #148]	; (8009ff4 <__pow5mult+0xa8>)
 8009f5e:	3a01      	subs	r2, #1
 8009f60:	2300      	movs	r3, #0
 8009f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f66:	f7ff fe51 	bl	8009c0c <__multadd>
 8009f6a:	4607      	mov	r7, r0
 8009f6c:	10ad      	asrs	r5, r5, #2
 8009f6e:	d03d      	beq.n	8009fec <__pow5mult+0xa0>
 8009f70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f72:	b97c      	cbnz	r4, 8009f94 <__pow5mult+0x48>
 8009f74:	2010      	movs	r0, #16
 8009f76:	f7ff fdbf 	bl	8009af8 <malloc>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	6270      	str	r0, [r6, #36]	; 0x24
 8009f7e:	b928      	cbnz	r0, 8009f8c <__pow5mult+0x40>
 8009f80:	4b1d      	ldr	r3, [pc, #116]	; (8009ff8 <__pow5mult+0xac>)
 8009f82:	481e      	ldr	r0, [pc, #120]	; (8009ffc <__pow5mult+0xb0>)
 8009f84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f88:	f000 fedc 	bl	800ad44 <__assert_func>
 8009f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f90:	6004      	str	r4, [r0, #0]
 8009f92:	60c4      	str	r4, [r0, #12]
 8009f94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f9c:	b94c      	cbnz	r4, 8009fb2 <__pow5mult+0x66>
 8009f9e:	f240 2171 	movw	r1, #625	; 0x271
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f7ff ff12 	bl	8009dcc <__i2b>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fae:	4604      	mov	r4, r0
 8009fb0:	6003      	str	r3, [r0, #0]
 8009fb2:	f04f 0900 	mov.w	r9, #0
 8009fb6:	07eb      	lsls	r3, r5, #31
 8009fb8:	d50a      	bpl.n	8009fd0 <__pow5mult+0x84>
 8009fba:	4639      	mov	r1, r7
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ff1a 	bl	8009df8 <__multiply>
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4680      	mov	r8, r0
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff fdfd 	bl	8009bc8 <_Bfree>
 8009fce:	4647      	mov	r7, r8
 8009fd0:	106d      	asrs	r5, r5, #1
 8009fd2:	d00b      	beq.n	8009fec <__pow5mult+0xa0>
 8009fd4:	6820      	ldr	r0, [r4, #0]
 8009fd6:	b938      	cbnz	r0, 8009fe8 <__pow5mult+0x9c>
 8009fd8:	4622      	mov	r2, r4
 8009fda:	4621      	mov	r1, r4
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7ff ff0b 	bl	8009df8 <__multiply>
 8009fe2:	6020      	str	r0, [r4, #0]
 8009fe4:	f8c0 9000 	str.w	r9, [r0]
 8009fe8:	4604      	mov	r4, r0
 8009fea:	e7e4      	b.n	8009fb6 <__pow5mult+0x6a>
 8009fec:	4638      	mov	r0, r7
 8009fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff2:	bf00      	nop
 8009ff4:	0800b4c0 	.word	0x0800b4c0
 8009ff8:	0800b20e 	.word	0x0800b20e
 8009ffc:	0800b370 	.word	0x0800b370

0800a000 <__lshift>:
 800a000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a004:	460c      	mov	r4, r1
 800a006:	6849      	ldr	r1, [r1, #4]
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	4607      	mov	r7, r0
 800a012:	4691      	mov	r9, r2
 800a014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a018:	f108 0601 	add.w	r6, r8, #1
 800a01c:	42b3      	cmp	r3, r6
 800a01e:	db0b      	blt.n	800a038 <__lshift+0x38>
 800a020:	4638      	mov	r0, r7
 800a022:	f7ff fd91 	bl	8009b48 <_Balloc>
 800a026:	4605      	mov	r5, r0
 800a028:	b948      	cbnz	r0, 800a03e <__lshift+0x3e>
 800a02a:	4602      	mov	r2, r0
 800a02c:	4b2a      	ldr	r3, [pc, #168]	; (800a0d8 <__lshift+0xd8>)
 800a02e:	482b      	ldr	r0, [pc, #172]	; (800a0dc <__lshift+0xdc>)
 800a030:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a034:	f000 fe86 	bl	800ad44 <__assert_func>
 800a038:	3101      	adds	r1, #1
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	e7ee      	b.n	800a01c <__lshift+0x1c>
 800a03e:	2300      	movs	r3, #0
 800a040:	f100 0114 	add.w	r1, r0, #20
 800a044:	f100 0210 	add.w	r2, r0, #16
 800a048:	4618      	mov	r0, r3
 800a04a:	4553      	cmp	r3, sl
 800a04c:	db37      	blt.n	800a0be <__lshift+0xbe>
 800a04e:	6920      	ldr	r0, [r4, #16]
 800a050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a054:	f104 0314 	add.w	r3, r4, #20
 800a058:	f019 091f 	ands.w	r9, r9, #31
 800a05c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a060:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a064:	d02f      	beq.n	800a0c6 <__lshift+0xc6>
 800a066:	f1c9 0e20 	rsb	lr, r9, #32
 800a06a:	468a      	mov	sl, r1
 800a06c:	f04f 0c00 	mov.w	ip, #0
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	fa02 f209 	lsl.w	r2, r2, r9
 800a076:	ea42 020c 	orr.w	r2, r2, ip
 800a07a:	f84a 2b04 	str.w	r2, [sl], #4
 800a07e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a082:	4298      	cmp	r0, r3
 800a084:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a088:	d8f2      	bhi.n	800a070 <__lshift+0x70>
 800a08a:	1b03      	subs	r3, r0, r4
 800a08c:	3b15      	subs	r3, #21
 800a08e:	f023 0303 	bic.w	r3, r3, #3
 800a092:	3304      	adds	r3, #4
 800a094:	f104 0215 	add.w	r2, r4, #21
 800a098:	4290      	cmp	r0, r2
 800a09a:	bf38      	it	cc
 800a09c:	2304      	movcc	r3, #4
 800a09e:	f841 c003 	str.w	ip, [r1, r3]
 800a0a2:	f1bc 0f00 	cmp.w	ip, #0
 800a0a6:	d001      	beq.n	800a0ac <__lshift+0xac>
 800a0a8:	f108 0602 	add.w	r6, r8, #2
 800a0ac:	3e01      	subs	r6, #1
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	612e      	str	r6, [r5, #16]
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	f7ff fd88 	bl	8009bc8 <_Bfree>
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	e7c1      	b.n	800a04a <__lshift+0x4a>
 800a0c6:	3904      	subs	r1, #4
 800a0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0d0:	4298      	cmp	r0, r3
 800a0d2:	d8f9      	bhi.n	800a0c8 <__lshift+0xc8>
 800a0d4:	e7ea      	b.n	800a0ac <__lshift+0xac>
 800a0d6:	bf00      	nop
 800a0d8:	0800b280 	.word	0x0800b280
 800a0dc:	0800b370 	.word	0x0800b370

0800a0e0 <__mcmp>:
 800a0e0:	b530      	push	{r4, r5, lr}
 800a0e2:	6902      	ldr	r2, [r0, #16]
 800a0e4:	690c      	ldr	r4, [r1, #16]
 800a0e6:	1b12      	subs	r2, r2, r4
 800a0e8:	d10e      	bne.n	800a108 <__mcmp+0x28>
 800a0ea:	f100 0314 	add.w	r3, r0, #20
 800a0ee:	3114      	adds	r1, #20
 800a0f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a100:	42a5      	cmp	r5, r4
 800a102:	d003      	beq.n	800a10c <__mcmp+0x2c>
 800a104:	d305      	bcc.n	800a112 <__mcmp+0x32>
 800a106:	2201      	movs	r2, #1
 800a108:	4610      	mov	r0, r2
 800a10a:	bd30      	pop	{r4, r5, pc}
 800a10c:	4283      	cmp	r3, r0
 800a10e:	d3f3      	bcc.n	800a0f8 <__mcmp+0x18>
 800a110:	e7fa      	b.n	800a108 <__mcmp+0x28>
 800a112:	f04f 32ff 	mov.w	r2, #4294967295
 800a116:	e7f7      	b.n	800a108 <__mcmp+0x28>

0800a118 <__mdiff>:
 800a118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	460c      	mov	r4, r1
 800a11e:	4606      	mov	r6, r0
 800a120:	4611      	mov	r1, r2
 800a122:	4620      	mov	r0, r4
 800a124:	4690      	mov	r8, r2
 800a126:	f7ff ffdb 	bl	800a0e0 <__mcmp>
 800a12a:	1e05      	subs	r5, r0, #0
 800a12c:	d110      	bne.n	800a150 <__mdiff+0x38>
 800a12e:	4629      	mov	r1, r5
 800a130:	4630      	mov	r0, r6
 800a132:	f7ff fd09 	bl	8009b48 <_Balloc>
 800a136:	b930      	cbnz	r0, 800a146 <__mdiff+0x2e>
 800a138:	4b3a      	ldr	r3, [pc, #232]	; (800a224 <__mdiff+0x10c>)
 800a13a:	4602      	mov	r2, r0
 800a13c:	f240 2132 	movw	r1, #562	; 0x232
 800a140:	4839      	ldr	r0, [pc, #228]	; (800a228 <__mdiff+0x110>)
 800a142:	f000 fdff 	bl	800ad44 <__assert_func>
 800a146:	2301      	movs	r3, #1
 800a148:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a14c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a150:	bfa4      	itt	ge
 800a152:	4643      	movge	r3, r8
 800a154:	46a0      	movge	r8, r4
 800a156:	4630      	mov	r0, r6
 800a158:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a15c:	bfa6      	itte	ge
 800a15e:	461c      	movge	r4, r3
 800a160:	2500      	movge	r5, #0
 800a162:	2501      	movlt	r5, #1
 800a164:	f7ff fcf0 	bl	8009b48 <_Balloc>
 800a168:	b920      	cbnz	r0, 800a174 <__mdiff+0x5c>
 800a16a:	4b2e      	ldr	r3, [pc, #184]	; (800a224 <__mdiff+0x10c>)
 800a16c:	4602      	mov	r2, r0
 800a16e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a172:	e7e5      	b.n	800a140 <__mdiff+0x28>
 800a174:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a178:	6926      	ldr	r6, [r4, #16]
 800a17a:	60c5      	str	r5, [r0, #12]
 800a17c:	f104 0914 	add.w	r9, r4, #20
 800a180:	f108 0514 	add.w	r5, r8, #20
 800a184:	f100 0e14 	add.w	lr, r0, #20
 800a188:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a18c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a190:	f108 0210 	add.w	r2, r8, #16
 800a194:	46f2      	mov	sl, lr
 800a196:	2100      	movs	r1, #0
 800a198:	f859 3b04 	ldr.w	r3, [r9], #4
 800a19c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a1a0:	fa1f f883 	uxth.w	r8, r3
 800a1a4:	fa11 f18b 	uxtah	r1, r1, fp
 800a1a8:	0c1b      	lsrs	r3, r3, #16
 800a1aa:	eba1 0808 	sub.w	r8, r1, r8
 800a1ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1b6:	fa1f f888 	uxth.w	r8, r8
 800a1ba:	1419      	asrs	r1, r3, #16
 800a1bc:	454e      	cmp	r6, r9
 800a1be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1c2:	f84a 3b04 	str.w	r3, [sl], #4
 800a1c6:	d8e7      	bhi.n	800a198 <__mdiff+0x80>
 800a1c8:	1b33      	subs	r3, r6, r4
 800a1ca:	3b15      	subs	r3, #21
 800a1cc:	f023 0303 	bic.w	r3, r3, #3
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	3415      	adds	r4, #21
 800a1d4:	42a6      	cmp	r6, r4
 800a1d6:	bf38      	it	cc
 800a1d8:	2304      	movcc	r3, #4
 800a1da:	441d      	add	r5, r3
 800a1dc:	4473      	add	r3, lr
 800a1de:	469e      	mov	lr, r3
 800a1e0:	462e      	mov	r6, r5
 800a1e2:	4566      	cmp	r6, ip
 800a1e4:	d30e      	bcc.n	800a204 <__mdiff+0xec>
 800a1e6:	f10c 0203 	add.w	r2, ip, #3
 800a1ea:	1b52      	subs	r2, r2, r5
 800a1ec:	f022 0203 	bic.w	r2, r2, #3
 800a1f0:	3d03      	subs	r5, #3
 800a1f2:	45ac      	cmp	ip, r5
 800a1f4:	bf38      	it	cc
 800a1f6:	2200      	movcc	r2, #0
 800a1f8:	441a      	add	r2, r3
 800a1fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1fe:	b17b      	cbz	r3, 800a220 <__mdiff+0x108>
 800a200:	6107      	str	r7, [r0, #16]
 800a202:	e7a3      	b.n	800a14c <__mdiff+0x34>
 800a204:	f856 8b04 	ldr.w	r8, [r6], #4
 800a208:	fa11 f288 	uxtah	r2, r1, r8
 800a20c:	1414      	asrs	r4, r2, #16
 800a20e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a212:	b292      	uxth	r2, r2
 800a214:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a218:	f84e 2b04 	str.w	r2, [lr], #4
 800a21c:	1421      	asrs	r1, r4, #16
 800a21e:	e7e0      	b.n	800a1e2 <__mdiff+0xca>
 800a220:	3f01      	subs	r7, #1
 800a222:	e7ea      	b.n	800a1fa <__mdiff+0xe2>
 800a224:	0800b280 	.word	0x0800b280
 800a228:	0800b370 	.word	0x0800b370

0800a22c <__ulp>:
 800a22c:	b082      	sub	sp, #8
 800a22e:	ed8d 0b00 	vstr	d0, [sp]
 800a232:	9b01      	ldr	r3, [sp, #4]
 800a234:	4912      	ldr	r1, [pc, #72]	; (800a280 <__ulp+0x54>)
 800a236:	4019      	ands	r1, r3
 800a238:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a23c:	2900      	cmp	r1, #0
 800a23e:	dd05      	ble.n	800a24c <__ulp+0x20>
 800a240:	2200      	movs	r2, #0
 800a242:	460b      	mov	r3, r1
 800a244:	ec43 2b10 	vmov	d0, r2, r3
 800a248:	b002      	add	sp, #8
 800a24a:	4770      	bx	lr
 800a24c:	4249      	negs	r1, r1
 800a24e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a252:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a256:	f04f 0200 	mov.w	r2, #0
 800a25a:	f04f 0300 	mov.w	r3, #0
 800a25e:	da04      	bge.n	800a26a <__ulp+0x3e>
 800a260:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a264:	fa41 f300 	asr.w	r3, r1, r0
 800a268:	e7ec      	b.n	800a244 <__ulp+0x18>
 800a26a:	f1a0 0114 	sub.w	r1, r0, #20
 800a26e:	291e      	cmp	r1, #30
 800a270:	bfda      	itte	le
 800a272:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a276:	fa20 f101 	lsrle.w	r1, r0, r1
 800a27a:	2101      	movgt	r1, #1
 800a27c:	460a      	mov	r2, r1
 800a27e:	e7e1      	b.n	800a244 <__ulp+0x18>
 800a280:	7ff00000 	.word	0x7ff00000

0800a284 <__b2d>:
 800a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a286:	6905      	ldr	r5, [r0, #16]
 800a288:	f100 0714 	add.w	r7, r0, #20
 800a28c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a290:	1f2e      	subs	r6, r5, #4
 800a292:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a296:	4620      	mov	r0, r4
 800a298:	f7ff fd48 	bl	8009d2c <__hi0bits>
 800a29c:	f1c0 0320 	rsb	r3, r0, #32
 800a2a0:	280a      	cmp	r0, #10
 800a2a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a320 <__b2d+0x9c>
 800a2a6:	600b      	str	r3, [r1, #0]
 800a2a8:	dc14      	bgt.n	800a2d4 <__b2d+0x50>
 800a2aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800a2ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800a2b2:	42b7      	cmp	r7, r6
 800a2b4:	ea41 030c 	orr.w	r3, r1, ip
 800a2b8:	bf34      	ite	cc
 800a2ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2be:	2100      	movcs	r1, #0
 800a2c0:	3015      	adds	r0, #21
 800a2c2:	fa04 f000 	lsl.w	r0, r4, r0
 800a2c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a2ca:	ea40 0201 	orr.w	r2, r0, r1
 800a2ce:	ec43 2b10 	vmov	d0, r2, r3
 800a2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d4:	42b7      	cmp	r7, r6
 800a2d6:	bf3a      	itte	cc
 800a2d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a2e0:	2100      	movcs	r1, #0
 800a2e2:	380b      	subs	r0, #11
 800a2e4:	d017      	beq.n	800a316 <__b2d+0x92>
 800a2e6:	f1c0 0c20 	rsb	ip, r0, #32
 800a2ea:	fa04 f500 	lsl.w	r5, r4, r0
 800a2ee:	42be      	cmp	r6, r7
 800a2f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a2f4:	ea45 0504 	orr.w	r5, r5, r4
 800a2f8:	bf8c      	ite	hi
 800a2fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a2fe:	2400      	movls	r4, #0
 800a300:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a304:	fa01 f000 	lsl.w	r0, r1, r0
 800a308:	fa24 f40c 	lsr.w	r4, r4, ip
 800a30c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a310:	ea40 0204 	orr.w	r2, r0, r4
 800a314:	e7db      	b.n	800a2ce <__b2d+0x4a>
 800a316:	ea44 030c 	orr.w	r3, r4, ip
 800a31a:	460a      	mov	r2, r1
 800a31c:	e7d7      	b.n	800a2ce <__b2d+0x4a>
 800a31e:	bf00      	nop
 800a320:	3ff00000 	.word	0x3ff00000

0800a324 <__d2b>:
 800a324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a328:	4689      	mov	r9, r1
 800a32a:	2101      	movs	r1, #1
 800a32c:	ec57 6b10 	vmov	r6, r7, d0
 800a330:	4690      	mov	r8, r2
 800a332:	f7ff fc09 	bl	8009b48 <_Balloc>
 800a336:	4604      	mov	r4, r0
 800a338:	b930      	cbnz	r0, 800a348 <__d2b+0x24>
 800a33a:	4602      	mov	r2, r0
 800a33c:	4b25      	ldr	r3, [pc, #148]	; (800a3d4 <__d2b+0xb0>)
 800a33e:	4826      	ldr	r0, [pc, #152]	; (800a3d8 <__d2b+0xb4>)
 800a340:	f240 310a 	movw	r1, #778	; 0x30a
 800a344:	f000 fcfe 	bl	800ad44 <__assert_func>
 800a348:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a34c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a350:	bb35      	cbnz	r5, 800a3a0 <__d2b+0x7c>
 800a352:	2e00      	cmp	r6, #0
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	d028      	beq.n	800a3aa <__d2b+0x86>
 800a358:	4668      	mov	r0, sp
 800a35a:	9600      	str	r6, [sp, #0]
 800a35c:	f7ff fd06 	bl	8009d6c <__lo0bits>
 800a360:	9900      	ldr	r1, [sp, #0]
 800a362:	b300      	cbz	r0, 800a3a6 <__d2b+0x82>
 800a364:	9a01      	ldr	r2, [sp, #4]
 800a366:	f1c0 0320 	rsb	r3, r0, #32
 800a36a:	fa02 f303 	lsl.w	r3, r2, r3
 800a36e:	430b      	orrs	r3, r1
 800a370:	40c2      	lsrs	r2, r0
 800a372:	6163      	str	r3, [r4, #20]
 800a374:	9201      	str	r2, [sp, #4]
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	61a3      	str	r3, [r4, #24]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bf14      	ite	ne
 800a37e:	2202      	movne	r2, #2
 800a380:	2201      	moveq	r2, #1
 800a382:	6122      	str	r2, [r4, #16]
 800a384:	b1d5      	cbz	r5, 800a3bc <__d2b+0x98>
 800a386:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a38a:	4405      	add	r5, r0
 800a38c:	f8c9 5000 	str.w	r5, [r9]
 800a390:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a394:	f8c8 0000 	str.w	r0, [r8]
 800a398:	4620      	mov	r0, r4
 800a39a:	b003      	add	sp, #12
 800a39c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3a4:	e7d5      	b.n	800a352 <__d2b+0x2e>
 800a3a6:	6161      	str	r1, [r4, #20]
 800a3a8:	e7e5      	b.n	800a376 <__d2b+0x52>
 800a3aa:	a801      	add	r0, sp, #4
 800a3ac:	f7ff fcde 	bl	8009d6c <__lo0bits>
 800a3b0:	9b01      	ldr	r3, [sp, #4]
 800a3b2:	6163      	str	r3, [r4, #20]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	6122      	str	r2, [r4, #16]
 800a3b8:	3020      	adds	r0, #32
 800a3ba:	e7e3      	b.n	800a384 <__d2b+0x60>
 800a3bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3c4:	f8c9 0000 	str.w	r0, [r9]
 800a3c8:	6918      	ldr	r0, [r3, #16]
 800a3ca:	f7ff fcaf 	bl	8009d2c <__hi0bits>
 800a3ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3d2:	e7df      	b.n	800a394 <__d2b+0x70>
 800a3d4:	0800b280 	.word	0x0800b280
 800a3d8:	0800b370 	.word	0x0800b370

0800a3dc <__ratio>:
 800a3dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	4688      	mov	r8, r1
 800a3e2:	4669      	mov	r1, sp
 800a3e4:	4681      	mov	r9, r0
 800a3e6:	f7ff ff4d 	bl	800a284 <__b2d>
 800a3ea:	a901      	add	r1, sp, #4
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	ec55 4b10 	vmov	r4, r5, d0
 800a3f2:	f7ff ff47 	bl	800a284 <__b2d>
 800a3f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a3fe:	eba3 0c02 	sub.w	ip, r3, r2
 800a402:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a406:	1a9b      	subs	r3, r3, r2
 800a408:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a40c:	ec51 0b10 	vmov	r0, r1, d0
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfd6      	itet	le
 800a414:	460a      	movle	r2, r1
 800a416:	462a      	movgt	r2, r5
 800a418:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a41c:	468b      	mov	fp, r1
 800a41e:	462f      	mov	r7, r5
 800a420:	bfd4      	ite	le
 800a422:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a426:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a42a:	4620      	mov	r0, r4
 800a42c:	ee10 2a10 	vmov	r2, s0
 800a430:	465b      	mov	r3, fp
 800a432:	4639      	mov	r1, r7
 800a434:	f7f6 fa1a 	bl	800086c <__aeabi_ddiv>
 800a438:	ec41 0b10 	vmov	d0, r0, r1
 800a43c:	b003      	add	sp, #12
 800a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a442 <__copybits>:
 800a442:	3901      	subs	r1, #1
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	1149      	asrs	r1, r1, #5
 800a448:	6914      	ldr	r4, [r2, #16]
 800a44a:	3101      	adds	r1, #1
 800a44c:	f102 0314 	add.w	r3, r2, #20
 800a450:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a454:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a458:	1f05      	subs	r5, r0, #4
 800a45a:	42a3      	cmp	r3, r4
 800a45c:	d30c      	bcc.n	800a478 <__copybits+0x36>
 800a45e:	1aa3      	subs	r3, r4, r2
 800a460:	3b11      	subs	r3, #17
 800a462:	f023 0303 	bic.w	r3, r3, #3
 800a466:	3211      	adds	r2, #17
 800a468:	42a2      	cmp	r2, r4
 800a46a:	bf88      	it	hi
 800a46c:	2300      	movhi	r3, #0
 800a46e:	4418      	add	r0, r3
 800a470:	2300      	movs	r3, #0
 800a472:	4288      	cmp	r0, r1
 800a474:	d305      	bcc.n	800a482 <__copybits+0x40>
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	f853 6b04 	ldr.w	r6, [r3], #4
 800a47c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a480:	e7eb      	b.n	800a45a <__copybits+0x18>
 800a482:	f840 3b04 	str.w	r3, [r0], #4
 800a486:	e7f4      	b.n	800a472 <__copybits+0x30>

0800a488 <__any_on>:
 800a488:	f100 0214 	add.w	r2, r0, #20
 800a48c:	6900      	ldr	r0, [r0, #16]
 800a48e:	114b      	asrs	r3, r1, #5
 800a490:	4298      	cmp	r0, r3
 800a492:	b510      	push	{r4, lr}
 800a494:	db11      	blt.n	800a4ba <__any_on+0x32>
 800a496:	dd0a      	ble.n	800a4ae <__any_on+0x26>
 800a498:	f011 011f 	ands.w	r1, r1, #31
 800a49c:	d007      	beq.n	800a4ae <__any_on+0x26>
 800a49e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4a2:	fa24 f001 	lsr.w	r0, r4, r1
 800a4a6:	fa00 f101 	lsl.w	r1, r0, r1
 800a4aa:	428c      	cmp	r4, r1
 800a4ac:	d10b      	bne.n	800a4c6 <__any_on+0x3e>
 800a4ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d803      	bhi.n	800a4be <__any_on+0x36>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	bd10      	pop	{r4, pc}
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	e7f7      	b.n	800a4ae <__any_on+0x26>
 800a4be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4c2:	2900      	cmp	r1, #0
 800a4c4:	d0f5      	beq.n	800a4b2 <__any_on+0x2a>
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	e7f6      	b.n	800a4b8 <__any_on+0x30>

0800a4ca <_calloc_r>:
 800a4ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4cc:	fba1 2402 	umull	r2, r4, r1, r2
 800a4d0:	b94c      	cbnz	r4, 800a4e6 <_calloc_r+0x1c>
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	9201      	str	r2, [sp, #4]
 800a4d6:	f000 f87b 	bl	800a5d0 <_malloc_r>
 800a4da:	9a01      	ldr	r2, [sp, #4]
 800a4dc:	4605      	mov	r5, r0
 800a4de:	b930      	cbnz	r0, 800a4ee <_calloc_r+0x24>
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	b003      	add	sp, #12
 800a4e4:	bd30      	pop	{r4, r5, pc}
 800a4e6:	220c      	movs	r2, #12
 800a4e8:	6002      	str	r2, [r0, #0]
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	e7f8      	b.n	800a4e0 <_calloc_r+0x16>
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	f7fc f852 	bl	8006598 <memset>
 800a4f4:	e7f4      	b.n	800a4e0 <_calloc_r+0x16>
	...

0800a4f8 <_free_r>:
 800a4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4fa:	2900      	cmp	r1, #0
 800a4fc:	d044      	beq.n	800a588 <_free_r+0x90>
 800a4fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a502:	9001      	str	r0, [sp, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	f1a1 0404 	sub.w	r4, r1, #4
 800a50a:	bfb8      	it	lt
 800a50c:	18e4      	addlt	r4, r4, r3
 800a50e:	f000 fca7 	bl	800ae60 <__malloc_lock>
 800a512:	4a1e      	ldr	r2, [pc, #120]	; (800a58c <_free_r+0x94>)
 800a514:	9801      	ldr	r0, [sp, #4]
 800a516:	6813      	ldr	r3, [r2, #0]
 800a518:	b933      	cbnz	r3, 800a528 <_free_r+0x30>
 800a51a:	6063      	str	r3, [r4, #4]
 800a51c:	6014      	str	r4, [r2, #0]
 800a51e:	b003      	add	sp, #12
 800a520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a524:	f000 bca2 	b.w	800ae6c <__malloc_unlock>
 800a528:	42a3      	cmp	r3, r4
 800a52a:	d908      	bls.n	800a53e <_free_r+0x46>
 800a52c:	6825      	ldr	r5, [r4, #0]
 800a52e:	1961      	adds	r1, r4, r5
 800a530:	428b      	cmp	r3, r1
 800a532:	bf01      	itttt	eq
 800a534:	6819      	ldreq	r1, [r3, #0]
 800a536:	685b      	ldreq	r3, [r3, #4]
 800a538:	1949      	addeq	r1, r1, r5
 800a53a:	6021      	streq	r1, [r4, #0]
 800a53c:	e7ed      	b.n	800a51a <_free_r+0x22>
 800a53e:	461a      	mov	r2, r3
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	b10b      	cbz	r3, 800a548 <_free_r+0x50>
 800a544:	42a3      	cmp	r3, r4
 800a546:	d9fa      	bls.n	800a53e <_free_r+0x46>
 800a548:	6811      	ldr	r1, [r2, #0]
 800a54a:	1855      	adds	r5, r2, r1
 800a54c:	42a5      	cmp	r5, r4
 800a54e:	d10b      	bne.n	800a568 <_free_r+0x70>
 800a550:	6824      	ldr	r4, [r4, #0]
 800a552:	4421      	add	r1, r4
 800a554:	1854      	adds	r4, r2, r1
 800a556:	42a3      	cmp	r3, r4
 800a558:	6011      	str	r1, [r2, #0]
 800a55a:	d1e0      	bne.n	800a51e <_free_r+0x26>
 800a55c:	681c      	ldr	r4, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	6053      	str	r3, [r2, #4]
 800a562:	4421      	add	r1, r4
 800a564:	6011      	str	r1, [r2, #0]
 800a566:	e7da      	b.n	800a51e <_free_r+0x26>
 800a568:	d902      	bls.n	800a570 <_free_r+0x78>
 800a56a:	230c      	movs	r3, #12
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	e7d6      	b.n	800a51e <_free_r+0x26>
 800a570:	6825      	ldr	r5, [r4, #0]
 800a572:	1961      	adds	r1, r4, r5
 800a574:	428b      	cmp	r3, r1
 800a576:	bf04      	itt	eq
 800a578:	6819      	ldreq	r1, [r3, #0]
 800a57a:	685b      	ldreq	r3, [r3, #4]
 800a57c:	6063      	str	r3, [r4, #4]
 800a57e:	bf04      	itt	eq
 800a580:	1949      	addeq	r1, r1, r5
 800a582:	6021      	streq	r1, [r4, #0]
 800a584:	6054      	str	r4, [r2, #4]
 800a586:	e7ca      	b.n	800a51e <_free_r+0x26>
 800a588:	b003      	add	sp, #12
 800a58a:	bd30      	pop	{r4, r5, pc}
 800a58c:	200007ec 	.word	0x200007ec

0800a590 <sbrk_aligned>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	4e0e      	ldr	r6, [pc, #56]	; (800a5cc <sbrk_aligned+0x3c>)
 800a594:	460c      	mov	r4, r1
 800a596:	6831      	ldr	r1, [r6, #0]
 800a598:	4605      	mov	r5, r0
 800a59a:	b911      	cbnz	r1, 800a5a2 <sbrk_aligned+0x12>
 800a59c:	f000 fb4c 	bl	800ac38 <_sbrk_r>
 800a5a0:	6030      	str	r0, [r6, #0]
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f000 fb47 	bl	800ac38 <_sbrk_r>
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	d00a      	beq.n	800a5c4 <sbrk_aligned+0x34>
 800a5ae:	1cc4      	adds	r4, r0, #3
 800a5b0:	f024 0403 	bic.w	r4, r4, #3
 800a5b4:	42a0      	cmp	r0, r4
 800a5b6:	d007      	beq.n	800a5c8 <sbrk_aligned+0x38>
 800a5b8:	1a21      	subs	r1, r4, r0
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 fb3c 	bl	800ac38 <_sbrk_r>
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d101      	bne.n	800a5c8 <sbrk_aligned+0x38>
 800a5c4:	f04f 34ff 	mov.w	r4, #4294967295
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	200007f0 	.word	0x200007f0

0800a5d0 <_malloc_r>:
 800a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	1ccd      	adds	r5, r1, #3
 800a5d6:	f025 0503 	bic.w	r5, r5, #3
 800a5da:	3508      	adds	r5, #8
 800a5dc:	2d0c      	cmp	r5, #12
 800a5de:	bf38      	it	cc
 800a5e0:	250c      	movcc	r5, #12
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	db01      	blt.n	800a5ec <_malloc_r+0x1c>
 800a5e8:	42a9      	cmp	r1, r5
 800a5ea:	d905      	bls.n	800a5f8 <_malloc_r+0x28>
 800a5ec:	230c      	movs	r3, #12
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	2600      	movs	r6, #0
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f8:	4e2e      	ldr	r6, [pc, #184]	; (800a6b4 <_malloc_r+0xe4>)
 800a5fa:	f000 fc31 	bl	800ae60 <__malloc_lock>
 800a5fe:	6833      	ldr	r3, [r6, #0]
 800a600:	461c      	mov	r4, r3
 800a602:	bb34      	cbnz	r4, 800a652 <_malloc_r+0x82>
 800a604:	4629      	mov	r1, r5
 800a606:	4638      	mov	r0, r7
 800a608:	f7ff ffc2 	bl	800a590 <sbrk_aligned>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	4604      	mov	r4, r0
 800a610:	d14d      	bne.n	800a6ae <_malloc_r+0xde>
 800a612:	6834      	ldr	r4, [r6, #0]
 800a614:	4626      	mov	r6, r4
 800a616:	2e00      	cmp	r6, #0
 800a618:	d140      	bne.n	800a69c <_malloc_r+0xcc>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	4631      	mov	r1, r6
 800a61e:	4638      	mov	r0, r7
 800a620:	eb04 0803 	add.w	r8, r4, r3
 800a624:	f000 fb08 	bl	800ac38 <_sbrk_r>
 800a628:	4580      	cmp	r8, r0
 800a62a:	d13a      	bne.n	800a6a2 <_malloc_r+0xd2>
 800a62c:	6821      	ldr	r1, [r4, #0]
 800a62e:	3503      	adds	r5, #3
 800a630:	1a6d      	subs	r5, r5, r1
 800a632:	f025 0503 	bic.w	r5, r5, #3
 800a636:	3508      	adds	r5, #8
 800a638:	2d0c      	cmp	r5, #12
 800a63a:	bf38      	it	cc
 800a63c:	250c      	movcc	r5, #12
 800a63e:	4629      	mov	r1, r5
 800a640:	4638      	mov	r0, r7
 800a642:	f7ff ffa5 	bl	800a590 <sbrk_aligned>
 800a646:	3001      	adds	r0, #1
 800a648:	d02b      	beq.n	800a6a2 <_malloc_r+0xd2>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	442b      	add	r3, r5
 800a64e:	6023      	str	r3, [r4, #0]
 800a650:	e00e      	b.n	800a670 <_malloc_r+0xa0>
 800a652:	6822      	ldr	r2, [r4, #0]
 800a654:	1b52      	subs	r2, r2, r5
 800a656:	d41e      	bmi.n	800a696 <_malloc_r+0xc6>
 800a658:	2a0b      	cmp	r2, #11
 800a65a:	d916      	bls.n	800a68a <_malloc_r+0xba>
 800a65c:	1961      	adds	r1, r4, r5
 800a65e:	42a3      	cmp	r3, r4
 800a660:	6025      	str	r5, [r4, #0]
 800a662:	bf18      	it	ne
 800a664:	6059      	strne	r1, [r3, #4]
 800a666:	6863      	ldr	r3, [r4, #4]
 800a668:	bf08      	it	eq
 800a66a:	6031      	streq	r1, [r6, #0]
 800a66c:	5162      	str	r2, [r4, r5]
 800a66e:	604b      	str	r3, [r1, #4]
 800a670:	4638      	mov	r0, r7
 800a672:	f104 060b 	add.w	r6, r4, #11
 800a676:	f000 fbf9 	bl	800ae6c <__malloc_unlock>
 800a67a:	f026 0607 	bic.w	r6, r6, #7
 800a67e:	1d23      	adds	r3, r4, #4
 800a680:	1af2      	subs	r2, r6, r3
 800a682:	d0b6      	beq.n	800a5f2 <_malloc_r+0x22>
 800a684:	1b9b      	subs	r3, r3, r6
 800a686:	50a3      	str	r3, [r4, r2]
 800a688:	e7b3      	b.n	800a5f2 <_malloc_r+0x22>
 800a68a:	6862      	ldr	r2, [r4, #4]
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	bf0c      	ite	eq
 800a690:	6032      	streq	r2, [r6, #0]
 800a692:	605a      	strne	r2, [r3, #4]
 800a694:	e7ec      	b.n	800a670 <_malloc_r+0xa0>
 800a696:	4623      	mov	r3, r4
 800a698:	6864      	ldr	r4, [r4, #4]
 800a69a:	e7b2      	b.n	800a602 <_malloc_r+0x32>
 800a69c:	4634      	mov	r4, r6
 800a69e:	6876      	ldr	r6, [r6, #4]
 800a6a0:	e7b9      	b.n	800a616 <_malloc_r+0x46>
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	603b      	str	r3, [r7, #0]
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	f000 fbe0 	bl	800ae6c <__malloc_unlock>
 800a6ac:	e7a1      	b.n	800a5f2 <_malloc_r+0x22>
 800a6ae:	6025      	str	r5, [r4, #0]
 800a6b0:	e7de      	b.n	800a670 <_malloc_r+0xa0>
 800a6b2:	bf00      	nop
 800a6b4:	200007ec 	.word	0x200007ec

0800a6b8 <__ssputs_r>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	688e      	ldr	r6, [r1, #8]
 800a6be:	429e      	cmp	r6, r3
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4690      	mov	r8, r2
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	d838      	bhi.n	800a73c <__ssputs_r+0x84>
 800a6ca:	898a      	ldrh	r2, [r1, #12]
 800a6cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6d0:	d032      	beq.n	800a738 <__ssputs_r+0x80>
 800a6d2:	6825      	ldr	r5, [r4, #0]
 800a6d4:	6909      	ldr	r1, [r1, #16]
 800a6d6:	eba5 0901 	sub.w	r9, r5, r1
 800a6da:	6965      	ldr	r5, [r4, #20]
 800a6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	444b      	add	r3, r9
 800a6e8:	106d      	asrs	r5, r5, #1
 800a6ea:	429d      	cmp	r5, r3
 800a6ec:	bf38      	it	cc
 800a6ee:	461d      	movcc	r5, r3
 800a6f0:	0553      	lsls	r3, r2, #21
 800a6f2:	d531      	bpl.n	800a758 <__ssputs_r+0xa0>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	f7ff ff6b 	bl	800a5d0 <_malloc_r>
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	b950      	cbnz	r0, 800a714 <__ssputs_r+0x5c>
 800a6fe:	230c      	movs	r3, #12
 800a700:	f8ca 3000 	str.w	r3, [sl]
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a714:	6921      	ldr	r1, [r4, #16]
 800a716:	464a      	mov	r2, r9
 800a718:	f7ff fa08 	bl	8009b2c <memcpy>
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	6126      	str	r6, [r4, #16]
 800a72a:	6165      	str	r5, [r4, #20]
 800a72c:	444e      	add	r6, r9
 800a72e:	eba5 0509 	sub.w	r5, r5, r9
 800a732:	6026      	str	r6, [r4, #0]
 800a734:	60a5      	str	r5, [r4, #8]
 800a736:	463e      	mov	r6, r7
 800a738:	42be      	cmp	r6, r7
 800a73a:	d900      	bls.n	800a73e <__ssputs_r+0x86>
 800a73c:	463e      	mov	r6, r7
 800a73e:	6820      	ldr	r0, [r4, #0]
 800a740:	4632      	mov	r2, r6
 800a742:	4641      	mov	r1, r8
 800a744:	f000 fb72 	bl	800ae2c <memmove>
 800a748:	68a3      	ldr	r3, [r4, #8]
 800a74a:	1b9b      	subs	r3, r3, r6
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	4433      	add	r3, r6
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	2000      	movs	r0, #0
 800a756:	e7db      	b.n	800a710 <__ssputs_r+0x58>
 800a758:	462a      	mov	r2, r5
 800a75a:	f000 fb8d 	bl	800ae78 <_realloc_r>
 800a75e:	4606      	mov	r6, r0
 800a760:	2800      	cmp	r0, #0
 800a762:	d1e1      	bne.n	800a728 <__ssputs_r+0x70>
 800a764:	6921      	ldr	r1, [r4, #16]
 800a766:	4650      	mov	r0, sl
 800a768:	f7ff fec6 	bl	800a4f8 <_free_r>
 800a76c:	e7c7      	b.n	800a6fe <__ssputs_r+0x46>
	...

0800a770 <_svfiprintf_r>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	4698      	mov	r8, r3
 800a776:	898b      	ldrh	r3, [r1, #12]
 800a778:	061b      	lsls	r3, r3, #24
 800a77a:	b09d      	sub	sp, #116	; 0x74
 800a77c:	4607      	mov	r7, r0
 800a77e:	460d      	mov	r5, r1
 800a780:	4614      	mov	r4, r2
 800a782:	d50e      	bpl.n	800a7a2 <_svfiprintf_r+0x32>
 800a784:	690b      	ldr	r3, [r1, #16]
 800a786:	b963      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x32>
 800a788:	2140      	movs	r1, #64	; 0x40
 800a78a:	f7ff ff21 	bl	800a5d0 <_malloc_r>
 800a78e:	6028      	str	r0, [r5, #0]
 800a790:	6128      	str	r0, [r5, #16]
 800a792:	b920      	cbnz	r0, 800a79e <_svfiprintf_r+0x2e>
 800a794:	230c      	movs	r3, #12
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	e0d1      	b.n	800a942 <_svfiprintf_r+0x1d2>
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	616b      	str	r3, [r5, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	2320      	movs	r3, #32
 800a7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b0:	2330      	movs	r3, #48	; 0x30
 800a7b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a95c <_svfiprintf_r+0x1ec>
 800a7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	4623      	mov	r3, r4
 800a7c0:	469a      	mov	sl, r3
 800a7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c6:	b10a      	cbz	r2, 800a7cc <_svfiprintf_r+0x5c>
 800a7c8:	2a25      	cmp	r2, #37	; 0x25
 800a7ca:	d1f9      	bne.n	800a7c0 <_svfiprintf_r+0x50>
 800a7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d0:	d00b      	beq.n	800a7ea <_svfiprintf_r+0x7a>
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff6d 	bl	800a6b8 <__ssputs_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f000 80aa 	beq.w	800a938 <_svfiprintf_r+0x1c8>
 800a7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e6:	445a      	add	r2, fp
 800a7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 80a2 	beq.w	800a938 <_svfiprintf_r+0x1c8>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fe:	f10a 0a01 	add.w	sl, sl, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80a:	931a      	str	r3, [sp, #104]	; 0x68
 800a80c:	4654      	mov	r4, sl
 800a80e:	2205      	movs	r2, #5
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	4851      	ldr	r0, [pc, #324]	; (800a95c <_svfiprintf_r+0x1ec>)
 800a816:	f7f5 fcf3 	bl	8000200 <memchr>
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	b9d8      	cbnz	r0, 800a856 <_svfiprintf_r+0xe6>
 800a81e:	06d0      	lsls	r0, r2, #27
 800a820:	bf44      	itt	mi
 800a822:	2320      	movmi	r3, #32
 800a824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a828:	0711      	lsls	r1, r2, #28
 800a82a:	bf44      	itt	mi
 800a82c:	232b      	movmi	r3, #43	; 0x2b
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a832:	f89a 3000 	ldrb.w	r3, [sl]
 800a836:	2b2a      	cmp	r3, #42	; 0x2a
 800a838:	d015      	beq.n	800a866 <_svfiprintf_r+0xf6>
 800a83a:	9a07      	ldr	r2, [sp, #28]
 800a83c:	4654      	mov	r4, sl
 800a83e:	2000      	movs	r0, #0
 800a840:	f04f 0c0a 	mov.w	ip, #10
 800a844:	4621      	mov	r1, r4
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	; 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d94e      	bls.n	800a8ee <_svfiprintf_r+0x17e>
 800a850:	b1b0      	cbz	r0, 800a880 <_svfiprintf_r+0x110>
 800a852:	9207      	str	r2, [sp, #28]
 800a854:	e014      	b.n	800a880 <_svfiprintf_r+0x110>
 800a856:	eba0 0308 	sub.w	r3, r0, r8
 800a85a:	fa09 f303 	lsl.w	r3, r9, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	46a2      	mov	sl, r4
 800a864:	e7d2      	b.n	800a80c <_svfiprintf_r+0x9c>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbb      	ittet	lt
 800a872:	425b      	neglt	r3, r3
 800a874:	f042 0202 	orrlt.w	r2, r2, #2
 800a878:	9307      	strge	r3, [sp, #28]
 800a87a:	9307      	strlt	r3, [sp, #28]
 800a87c:	bfb8      	it	lt
 800a87e:	9204      	strlt	r2, [sp, #16]
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	2b2e      	cmp	r3, #46	; 0x2e
 800a884:	d10c      	bne.n	800a8a0 <_svfiprintf_r+0x130>
 800a886:	7863      	ldrb	r3, [r4, #1]
 800a888:	2b2a      	cmp	r3, #42	; 0x2a
 800a88a:	d135      	bne.n	800a8f8 <_svfiprintf_r+0x188>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	9203      	str	r2, [sp, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfb8      	it	lt
 800a898:	f04f 33ff 	movlt.w	r3, #4294967295
 800a89c:	3402      	adds	r4, #2
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a96c <_svfiprintf_r+0x1fc>
 800a8a4:	7821      	ldrb	r1, [r4, #0]
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	f7f5 fca9 	bl	8000200 <memchr>
 800a8ae:	b140      	cbz	r0, 800a8c2 <_svfiprintf_r+0x152>
 800a8b0:	2340      	movs	r3, #64	; 0x40
 800a8b2:	eba0 000a 	sub.w	r0, r0, sl
 800a8b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	4303      	orrs	r3, r0
 800a8be:	3401      	adds	r4, #1
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c6:	4826      	ldr	r0, [pc, #152]	; (800a960 <_svfiprintf_r+0x1f0>)
 800a8c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8cc:	2206      	movs	r2, #6
 800a8ce:	f7f5 fc97 	bl	8000200 <memchr>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d038      	beq.n	800a948 <_svfiprintf_r+0x1d8>
 800a8d6:	4b23      	ldr	r3, [pc, #140]	; (800a964 <_svfiprintf_r+0x1f4>)
 800a8d8:	bb1b      	cbnz	r3, 800a922 <_svfiprintf_r+0x1b2>
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	3307      	adds	r3, #7
 800a8de:	f023 0307 	bic.w	r3, r3, #7
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	9303      	str	r3, [sp, #12]
 800a8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e8:	4433      	add	r3, r6
 800a8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ec:	e767      	b.n	800a7be <_svfiprintf_r+0x4e>
 800a8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	2001      	movs	r0, #1
 800a8f6:	e7a5      	b.n	800a844 <_svfiprintf_r+0xd4>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	3401      	adds	r4, #1
 800a8fc:	9305      	str	r3, [sp, #20]
 800a8fe:	4619      	mov	r1, r3
 800a900:	f04f 0c0a 	mov.w	ip, #10
 800a904:	4620      	mov	r0, r4
 800a906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a90a:	3a30      	subs	r2, #48	; 0x30
 800a90c:	2a09      	cmp	r2, #9
 800a90e:	d903      	bls.n	800a918 <_svfiprintf_r+0x1a8>
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0c5      	beq.n	800a8a0 <_svfiprintf_r+0x130>
 800a914:	9105      	str	r1, [sp, #20]
 800a916:	e7c3      	b.n	800a8a0 <_svfiprintf_r+0x130>
 800a918:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91c:	4604      	mov	r4, r0
 800a91e:	2301      	movs	r3, #1
 800a920:	e7f0      	b.n	800a904 <_svfiprintf_r+0x194>
 800a922:	ab03      	add	r3, sp, #12
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	462a      	mov	r2, r5
 800a928:	4b0f      	ldr	r3, [pc, #60]	; (800a968 <_svfiprintf_r+0x1f8>)
 800a92a:	a904      	add	r1, sp, #16
 800a92c:	4638      	mov	r0, r7
 800a92e:	f7fb fedb 	bl	80066e8 <_printf_float>
 800a932:	1c42      	adds	r2, r0, #1
 800a934:	4606      	mov	r6, r0
 800a936:	d1d6      	bne.n	800a8e6 <_svfiprintf_r+0x176>
 800a938:	89ab      	ldrh	r3, [r5, #12]
 800a93a:	065b      	lsls	r3, r3, #25
 800a93c:	f53f af2c 	bmi.w	800a798 <_svfiprintf_r+0x28>
 800a940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a942:	b01d      	add	sp, #116	; 0x74
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	ab03      	add	r3, sp, #12
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	462a      	mov	r2, r5
 800a94e:	4b06      	ldr	r3, [pc, #24]	; (800a968 <_svfiprintf_r+0x1f8>)
 800a950:	a904      	add	r1, sp, #16
 800a952:	4638      	mov	r0, r7
 800a954:	f7fc f96c 	bl	8006c30 <_printf_i>
 800a958:	e7eb      	b.n	800a932 <_svfiprintf_r+0x1c2>
 800a95a:	bf00      	nop
 800a95c:	0800b4cc 	.word	0x0800b4cc
 800a960:	0800b4d6 	.word	0x0800b4d6
 800a964:	080066e9 	.word	0x080066e9
 800a968:	0800a6b9 	.word	0x0800a6b9
 800a96c:	0800b4d2 	.word	0x0800b4d2

0800a970 <__sfputc_r>:
 800a970:	6893      	ldr	r3, [r2, #8]
 800a972:	3b01      	subs	r3, #1
 800a974:	2b00      	cmp	r3, #0
 800a976:	b410      	push	{r4}
 800a978:	6093      	str	r3, [r2, #8]
 800a97a:	da08      	bge.n	800a98e <__sfputc_r+0x1e>
 800a97c:	6994      	ldr	r4, [r2, #24]
 800a97e:	42a3      	cmp	r3, r4
 800a980:	db01      	blt.n	800a986 <__sfputc_r+0x16>
 800a982:	290a      	cmp	r1, #10
 800a984:	d103      	bne.n	800a98e <__sfputc_r+0x1e>
 800a986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a98a:	f7fd bbe9 	b.w	8008160 <__swbuf_r>
 800a98e:	6813      	ldr	r3, [r2, #0]
 800a990:	1c58      	adds	r0, r3, #1
 800a992:	6010      	str	r0, [r2, #0]
 800a994:	7019      	strb	r1, [r3, #0]
 800a996:	4608      	mov	r0, r1
 800a998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <__sfputs_r>:
 800a99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	460f      	mov	r7, r1
 800a9a4:	4614      	mov	r4, r2
 800a9a6:	18d5      	adds	r5, r2, r3
 800a9a8:	42ac      	cmp	r4, r5
 800a9aa:	d101      	bne.n	800a9b0 <__sfputs_r+0x12>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	e007      	b.n	800a9c0 <__sfputs_r+0x22>
 800a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b4:	463a      	mov	r2, r7
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7ff ffda 	bl	800a970 <__sfputc_r>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d1f3      	bne.n	800a9a8 <__sfputs_r+0xa>
 800a9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9c4 <_vfiprintf_r>:
 800a9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	460d      	mov	r5, r1
 800a9ca:	b09d      	sub	sp, #116	; 0x74
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	4698      	mov	r8, r3
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	b118      	cbz	r0, 800a9dc <_vfiprintf_r+0x18>
 800a9d4:	6983      	ldr	r3, [r0, #24]
 800a9d6:	b90b      	cbnz	r3, 800a9dc <_vfiprintf_r+0x18>
 800a9d8:	f7fe fc16 	bl	8009208 <__sinit>
 800a9dc:	4b89      	ldr	r3, [pc, #548]	; (800ac04 <_vfiprintf_r+0x240>)
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	d11b      	bne.n	800aa1a <_vfiprintf_r+0x56>
 800a9e2:	6875      	ldr	r5, [r6, #4]
 800a9e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9e6:	07d9      	lsls	r1, r3, #31
 800a9e8:	d405      	bmi.n	800a9f6 <_vfiprintf_r+0x32>
 800a9ea:	89ab      	ldrh	r3, [r5, #12]
 800a9ec:	059a      	lsls	r2, r3, #22
 800a9ee:	d402      	bmi.n	800a9f6 <_vfiprintf_r+0x32>
 800a9f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9f2:	f7ff f81a 	bl	8009a2a <__retarget_lock_acquire_recursive>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	071b      	lsls	r3, r3, #28
 800a9fa:	d501      	bpl.n	800aa00 <_vfiprintf_r+0x3c>
 800a9fc:	692b      	ldr	r3, [r5, #16]
 800a9fe:	b9eb      	cbnz	r3, 800aa3c <_vfiprintf_r+0x78>
 800aa00:	4629      	mov	r1, r5
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7fd fbfe 	bl	8008204 <__swsetup_r>
 800aa08:	b1c0      	cbz	r0, 800aa3c <_vfiprintf_r+0x78>
 800aa0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa0c:	07dc      	lsls	r4, r3, #31
 800aa0e:	d50e      	bpl.n	800aa2e <_vfiprintf_r+0x6a>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	b01d      	add	sp, #116	; 0x74
 800aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1a:	4b7b      	ldr	r3, [pc, #492]	; (800ac08 <_vfiprintf_r+0x244>)
 800aa1c:	429d      	cmp	r5, r3
 800aa1e:	d101      	bne.n	800aa24 <_vfiprintf_r+0x60>
 800aa20:	68b5      	ldr	r5, [r6, #8]
 800aa22:	e7df      	b.n	800a9e4 <_vfiprintf_r+0x20>
 800aa24:	4b79      	ldr	r3, [pc, #484]	; (800ac0c <_vfiprintf_r+0x248>)
 800aa26:	429d      	cmp	r5, r3
 800aa28:	bf08      	it	eq
 800aa2a:	68f5      	ldreq	r5, [r6, #12]
 800aa2c:	e7da      	b.n	800a9e4 <_vfiprintf_r+0x20>
 800aa2e:	89ab      	ldrh	r3, [r5, #12]
 800aa30:	0598      	lsls	r0, r3, #22
 800aa32:	d4ed      	bmi.n	800aa10 <_vfiprintf_r+0x4c>
 800aa34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa36:	f7fe fff9 	bl	8009a2c <__retarget_lock_release_recursive>
 800aa3a:	e7e9      	b.n	800aa10 <_vfiprintf_r+0x4c>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa40:	2320      	movs	r3, #32
 800aa42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa46:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa4a:	2330      	movs	r3, #48	; 0x30
 800aa4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac10 <_vfiprintf_r+0x24c>
 800aa50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa54:	f04f 0901 	mov.w	r9, #1
 800aa58:	4623      	mov	r3, r4
 800aa5a:	469a      	mov	sl, r3
 800aa5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa60:	b10a      	cbz	r2, 800aa66 <_vfiprintf_r+0xa2>
 800aa62:	2a25      	cmp	r2, #37	; 0x25
 800aa64:	d1f9      	bne.n	800aa5a <_vfiprintf_r+0x96>
 800aa66:	ebba 0b04 	subs.w	fp, sl, r4
 800aa6a:	d00b      	beq.n	800aa84 <_vfiprintf_r+0xc0>
 800aa6c:	465b      	mov	r3, fp
 800aa6e:	4622      	mov	r2, r4
 800aa70:	4629      	mov	r1, r5
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ff93 	bl	800a99e <__sfputs_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	f000 80aa 	beq.w	800abd2 <_vfiprintf_r+0x20e>
 800aa7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa80:	445a      	add	r2, fp
 800aa82:	9209      	str	r2, [sp, #36]	; 0x24
 800aa84:	f89a 3000 	ldrb.w	r3, [sl]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 80a2 	beq.w	800abd2 <_vfiprintf_r+0x20e>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa98:	f10a 0a01 	add.w	sl, sl, #1
 800aa9c:	9304      	str	r3, [sp, #16]
 800aa9e:	9307      	str	r3, [sp, #28]
 800aaa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaa4:	931a      	str	r3, [sp, #104]	; 0x68
 800aaa6:	4654      	mov	r4, sl
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaae:	4858      	ldr	r0, [pc, #352]	; (800ac10 <_vfiprintf_r+0x24c>)
 800aab0:	f7f5 fba6 	bl	8000200 <memchr>
 800aab4:	9a04      	ldr	r2, [sp, #16]
 800aab6:	b9d8      	cbnz	r0, 800aaf0 <_vfiprintf_r+0x12c>
 800aab8:	06d1      	lsls	r1, r2, #27
 800aaba:	bf44      	itt	mi
 800aabc:	2320      	movmi	r3, #32
 800aabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac2:	0713      	lsls	r3, r2, #28
 800aac4:	bf44      	itt	mi
 800aac6:	232b      	movmi	r3, #43	; 0x2b
 800aac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aacc:	f89a 3000 	ldrb.w	r3, [sl]
 800aad0:	2b2a      	cmp	r3, #42	; 0x2a
 800aad2:	d015      	beq.n	800ab00 <_vfiprintf_r+0x13c>
 800aad4:	9a07      	ldr	r2, [sp, #28]
 800aad6:	4654      	mov	r4, sl
 800aad8:	2000      	movs	r0, #0
 800aada:	f04f 0c0a 	mov.w	ip, #10
 800aade:	4621      	mov	r1, r4
 800aae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae4:	3b30      	subs	r3, #48	; 0x30
 800aae6:	2b09      	cmp	r3, #9
 800aae8:	d94e      	bls.n	800ab88 <_vfiprintf_r+0x1c4>
 800aaea:	b1b0      	cbz	r0, 800ab1a <_vfiprintf_r+0x156>
 800aaec:	9207      	str	r2, [sp, #28]
 800aaee:	e014      	b.n	800ab1a <_vfiprintf_r+0x156>
 800aaf0:	eba0 0308 	sub.w	r3, r0, r8
 800aaf4:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	9304      	str	r3, [sp, #16]
 800aafc:	46a2      	mov	sl, r4
 800aafe:	e7d2      	b.n	800aaa6 <_vfiprintf_r+0xe2>
 800ab00:	9b03      	ldr	r3, [sp, #12]
 800ab02:	1d19      	adds	r1, r3, #4
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	9103      	str	r1, [sp, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbb      	ittet	lt
 800ab0c:	425b      	neglt	r3, r3
 800ab0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab12:	9307      	strge	r3, [sp, #28]
 800ab14:	9307      	strlt	r3, [sp, #28]
 800ab16:	bfb8      	it	lt
 800ab18:	9204      	strlt	r2, [sp, #16]
 800ab1a:	7823      	ldrb	r3, [r4, #0]
 800ab1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab1e:	d10c      	bne.n	800ab3a <_vfiprintf_r+0x176>
 800ab20:	7863      	ldrb	r3, [r4, #1]
 800ab22:	2b2a      	cmp	r3, #42	; 0x2a
 800ab24:	d135      	bne.n	800ab92 <_vfiprintf_r+0x1ce>
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	9203      	str	r2, [sp, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bfb8      	it	lt
 800ab32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab36:	3402      	adds	r4, #2
 800ab38:	9305      	str	r3, [sp, #20]
 800ab3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac20 <_vfiprintf_r+0x25c>
 800ab3e:	7821      	ldrb	r1, [r4, #0]
 800ab40:	2203      	movs	r2, #3
 800ab42:	4650      	mov	r0, sl
 800ab44:	f7f5 fb5c 	bl	8000200 <memchr>
 800ab48:	b140      	cbz	r0, 800ab5c <_vfiprintf_r+0x198>
 800ab4a:	2340      	movs	r3, #64	; 0x40
 800ab4c:	eba0 000a 	sub.w	r0, r0, sl
 800ab50:	fa03 f000 	lsl.w	r0, r3, r0
 800ab54:	9b04      	ldr	r3, [sp, #16]
 800ab56:	4303      	orrs	r3, r0
 800ab58:	3401      	adds	r4, #1
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab60:	482c      	ldr	r0, [pc, #176]	; (800ac14 <_vfiprintf_r+0x250>)
 800ab62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab66:	2206      	movs	r2, #6
 800ab68:	f7f5 fb4a 	bl	8000200 <memchr>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d03f      	beq.n	800abf0 <_vfiprintf_r+0x22c>
 800ab70:	4b29      	ldr	r3, [pc, #164]	; (800ac18 <_vfiprintf_r+0x254>)
 800ab72:	bb1b      	cbnz	r3, 800abbc <_vfiprintf_r+0x1f8>
 800ab74:	9b03      	ldr	r3, [sp, #12]
 800ab76:	3307      	adds	r3, #7
 800ab78:	f023 0307 	bic.w	r3, r3, #7
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	9303      	str	r3, [sp, #12]
 800ab80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab82:	443b      	add	r3, r7
 800ab84:	9309      	str	r3, [sp, #36]	; 0x24
 800ab86:	e767      	b.n	800aa58 <_vfiprintf_r+0x94>
 800ab88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	2001      	movs	r0, #1
 800ab90:	e7a5      	b.n	800aade <_vfiprintf_r+0x11a>
 800ab92:	2300      	movs	r3, #0
 800ab94:	3401      	adds	r4, #1
 800ab96:	9305      	str	r3, [sp, #20]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	f04f 0c0a 	mov.w	ip, #10
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aba4:	3a30      	subs	r2, #48	; 0x30
 800aba6:	2a09      	cmp	r2, #9
 800aba8:	d903      	bls.n	800abb2 <_vfiprintf_r+0x1ee>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0c5      	beq.n	800ab3a <_vfiprintf_r+0x176>
 800abae:	9105      	str	r1, [sp, #20]
 800abb0:	e7c3      	b.n	800ab3a <_vfiprintf_r+0x176>
 800abb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800abb6:	4604      	mov	r4, r0
 800abb8:	2301      	movs	r3, #1
 800abba:	e7f0      	b.n	800ab9e <_vfiprintf_r+0x1da>
 800abbc:	ab03      	add	r3, sp, #12
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	462a      	mov	r2, r5
 800abc2:	4b16      	ldr	r3, [pc, #88]	; (800ac1c <_vfiprintf_r+0x258>)
 800abc4:	a904      	add	r1, sp, #16
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7fb fd8e 	bl	80066e8 <_printf_float>
 800abcc:	4607      	mov	r7, r0
 800abce:	1c78      	adds	r0, r7, #1
 800abd0:	d1d6      	bne.n	800ab80 <_vfiprintf_r+0x1bc>
 800abd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abd4:	07d9      	lsls	r1, r3, #31
 800abd6:	d405      	bmi.n	800abe4 <_vfiprintf_r+0x220>
 800abd8:	89ab      	ldrh	r3, [r5, #12]
 800abda:	059a      	lsls	r2, r3, #22
 800abdc:	d402      	bmi.n	800abe4 <_vfiprintf_r+0x220>
 800abde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abe0:	f7fe ff24 	bl	8009a2c <__retarget_lock_release_recursive>
 800abe4:	89ab      	ldrh	r3, [r5, #12]
 800abe6:	065b      	lsls	r3, r3, #25
 800abe8:	f53f af12 	bmi.w	800aa10 <_vfiprintf_r+0x4c>
 800abec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abee:	e711      	b.n	800aa14 <_vfiprintf_r+0x50>
 800abf0:	ab03      	add	r3, sp, #12
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	462a      	mov	r2, r5
 800abf6:	4b09      	ldr	r3, [pc, #36]	; (800ac1c <_vfiprintf_r+0x258>)
 800abf8:	a904      	add	r1, sp, #16
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7fc f818 	bl	8006c30 <_printf_i>
 800ac00:	e7e4      	b.n	800abcc <_vfiprintf_r+0x208>
 800ac02:	bf00      	nop
 800ac04:	0800b2b4 	.word	0x0800b2b4
 800ac08:	0800b2d4 	.word	0x0800b2d4
 800ac0c:	0800b294 	.word	0x0800b294
 800ac10:	0800b4cc 	.word	0x0800b4cc
 800ac14:	0800b4d6 	.word	0x0800b4d6
 800ac18:	080066e9 	.word	0x080066e9
 800ac1c:	0800a99f 	.word	0x0800a99f
 800ac20:	0800b4d2 	.word	0x0800b4d2
 800ac24:	00000000 	.word	0x00000000

0800ac28 <nan>:
 800ac28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac30 <nan+0x8>
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	00000000 	.word	0x00000000
 800ac34:	7ff80000 	.word	0x7ff80000

0800ac38 <_sbrk_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4d06      	ldr	r5, [pc, #24]	; (800ac54 <_sbrk_r+0x1c>)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4604      	mov	r4, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	f7f6 fea8 	bl	8001998 <_sbrk>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d102      	bne.n	800ac52 <_sbrk_r+0x1a>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	b103      	cbz	r3, 800ac52 <_sbrk_r+0x1a>
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	200007f4 	.word	0x200007f4

0800ac58 <__sread>:
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac60:	f000 f93a 	bl	800aed8 <_read_r>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	bfab      	itete	ge
 800ac68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac6c:	181b      	addge	r3, r3, r0
 800ac6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac72:	bfac      	ite	ge
 800ac74:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac76:	81a3      	strhlt	r3, [r4, #12]
 800ac78:	bd10      	pop	{r4, pc}

0800ac7a <__swrite>:
 800ac7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7e:	461f      	mov	r7, r3
 800ac80:	898b      	ldrh	r3, [r1, #12]
 800ac82:	05db      	lsls	r3, r3, #23
 800ac84:	4605      	mov	r5, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	4616      	mov	r6, r2
 800ac8a:	d505      	bpl.n	800ac98 <__swrite+0x1e>
 800ac8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac90:	2302      	movs	r3, #2
 800ac92:	2200      	movs	r2, #0
 800ac94:	f000 f8b8 	bl	800ae08 <_lseek_r>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	4632      	mov	r2, r6
 800aca6:	463b      	mov	r3, r7
 800aca8:	4628      	mov	r0, r5
 800acaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acae:	f000 b837 	b.w	800ad20 <_write_r>

0800acb2 <__sseek>:
 800acb2:	b510      	push	{r4, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acba:	f000 f8a5 	bl	800ae08 <_lseek_r>
 800acbe:	1c43      	adds	r3, r0, #1
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	bf15      	itete	ne
 800acc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800acc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acce:	81a3      	strheq	r3, [r4, #12]
 800acd0:	bf18      	it	ne
 800acd2:	81a3      	strhne	r3, [r4, #12]
 800acd4:	bd10      	pop	{r4, pc}

0800acd6 <__sclose>:
 800acd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acda:	f000 b851 	b.w	800ad80 <_close_r>

0800acde <strncmp>:
 800acde:	b510      	push	{r4, lr}
 800ace0:	b17a      	cbz	r2, 800ad02 <strncmp+0x24>
 800ace2:	4603      	mov	r3, r0
 800ace4:	3901      	subs	r1, #1
 800ace6:	1884      	adds	r4, r0, r2
 800ace8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800acec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800acf0:	4290      	cmp	r0, r2
 800acf2:	d101      	bne.n	800acf8 <strncmp+0x1a>
 800acf4:	42a3      	cmp	r3, r4
 800acf6:	d101      	bne.n	800acfc <strncmp+0x1e>
 800acf8:	1a80      	subs	r0, r0, r2
 800acfa:	bd10      	pop	{r4, pc}
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d1f3      	bne.n	800ace8 <strncmp+0xa>
 800ad00:	e7fa      	b.n	800acf8 <strncmp+0x1a>
 800ad02:	4610      	mov	r0, r2
 800ad04:	e7f9      	b.n	800acfa <strncmp+0x1c>

0800ad06 <__ascii_wctomb>:
 800ad06:	b149      	cbz	r1, 800ad1c <__ascii_wctomb+0x16>
 800ad08:	2aff      	cmp	r2, #255	; 0xff
 800ad0a:	bf85      	ittet	hi
 800ad0c:	238a      	movhi	r3, #138	; 0x8a
 800ad0e:	6003      	strhi	r3, [r0, #0]
 800ad10:	700a      	strbls	r2, [r1, #0]
 800ad12:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad16:	bf98      	it	ls
 800ad18:	2001      	movls	r0, #1
 800ad1a:	4770      	bx	lr
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4770      	bx	lr

0800ad20 <_write_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	; (800ad40 <_write_r+0x20>)
 800ad24:	4604      	mov	r4, r0
 800ad26:	4608      	mov	r0, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	602a      	str	r2, [r5, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f7f6 fde1 	bl	80018f6 <_write>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_write_r+0x1e>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_write_r+0x1e>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	200007f4 	.word	0x200007f4

0800ad44 <__assert_func>:
 800ad44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad46:	4614      	mov	r4, r2
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <__assert_func+0x2c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4605      	mov	r5, r0
 800ad50:	68d8      	ldr	r0, [r3, #12]
 800ad52:	b14c      	cbz	r4, 800ad68 <__assert_func+0x24>
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <__assert_func+0x30>)
 800ad56:	9100      	str	r1, [sp, #0]
 800ad58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad5c:	4906      	ldr	r1, [pc, #24]	; (800ad78 <__assert_func+0x34>)
 800ad5e:	462b      	mov	r3, r5
 800ad60:	f000 f81e 	bl	800ada0 <fiprintf>
 800ad64:	f000 f8ca 	bl	800aefc <abort>
 800ad68:	4b04      	ldr	r3, [pc, #16]	; (800ad7c <__assert_func+0x38>)
 800ad6a:	461c      	mov	r4, r3
 800ad6c:	e7f3      	b.n	800ad56 <__assert_func+0x12>
 800ad6e:	bf00      	nop
 800ad70:	2000000c 	.word	0x2000000c
 800ad74:	0800b4dd 	.word	0x0800b4dd
 800ad78:	0800b4ea 	.word	0x0800b4ea
 800ad7c:	0800b518 	.word	0x0800b518

0800ad80 <_close_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d06      	ldr	r5, [pc, #24]	; (800ad9c <_close_r+0x1c>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f6 fdcf 	bl	800192e <_close>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_close_r+0x1a>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_close_r+0x1a>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	200007f4 	.word	0x200007f4

0800ada0 <fiprintf>:
 800ada0:	b40e      	push	{r1, r2, r3}
 800ada2:	b503      	push	{r0, r1, lr}
 800ada4:	4601      	mov	r1, r0
 800ada6:	ab03      	add	r3, sp, #12
 800ada8:	4805      	ldr	r0, [pc, #20]	; (800adc0 <fiprintf+0x20>)
 800adaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800adae:	6800      	ldr	r0, [r0, #0]
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	f7ff fe07 	bl	800a9c4 <_vfiprintf_r>
 800adb6:	b002      	add	sp, #8
 800adb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adbc:	b003      	add	sp, #12
 800adbe:	4770      	bx	lr
 800adc0:	2000000c 	.word	0x2000000c

0800adc4 <_fstat_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d07      	ldr	r5, [pc, #28]	; (800ade4 <_fstat_r+0x20>)
 800adc8:	2300      	movs	r3, #0
 800adca:	4604      	mov	r4, r0
 800adcc:	4608      	mov	r0, r1
 800adce:	4611      	mov	r1, r2
 800add0:	602b      	str	r3, [r5, #0]
 800add2:	f7f6 fdb8 	bl	8001946 <_fstat>
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	d102      	bne.n	800ade0 <_fstat_r+0x1c>
 800adda:	682b      	ldr	r3, [r5, #0]
 800addc:	b103      	cbz	r3, 800ade0 <_fstat_r+0x1c>
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	bd38      	pop	{r3, r4, r5, pc}
 800ade2:	bf00      	nop
 800ade4:	200007f4 	.word	0x200007f4

0800ade8 <_isatty_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d06      	ldr	r5, [pc, #24]	; (800ae04 <_isatty_r+0x1c>)
 800adec:	2300      	movs	r3, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	602b      	str	r3, [r5, #0]
 800adf4:	f7f6 fdb7 	bl	8001966 <_isatty>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_isatty_r+0x1a>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_isatty_r+0x1a>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	200007f4 	.word	0x200007f4

0800ae08 <_lseek_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d07      	ldr	r5, [pc, #28]	; (800ae28 <_lseek_r+0x20>)
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	4608      	mov	r0, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	2200      	movs	r2, #0
 800ae14:	602a      	str	r2, [r5, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	f7f6 fdb0 	bl	800197c <_lseek>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_lseek_r+0x1e>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_lseek_r+0x1e>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	200007f4 	.word	0x200007f4

0800ae2c <memmove>:
 800ae2c:	4288      	cmp	r0, r1
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	eb01 0402 	add.w	r4, r1, r2
 800ae34:	d902      	bls.n	800ae3c <memmove+0x10>
 800ae36:	4284      	cmp	r4, r0
 800ae38:	4623      	mov	r3, r4
 800ae3a:	d807      	bhi.n	800ae4c <memmove+0x20>
 800ae3c:	1e43      	subs	r3, r0, #1
 800ae3e:	42a1      	cmp	r1, r4
 800ae40:	d008      	beq.n	800ae54 <memmove+0x28>
 800ae42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae4a:	e7f8      	b.n	800ae3e <memmove+0x12>
 800ae4c:	4402      	add	r2, r0
 800ae4e:	4601      	mov	r1, r0
 800ae50:	428a      	cmp	r2, r1
 800ae52:	d100      	bne.n	800ae56 <memmove+0x2a>
 800ae54:	bd10      	pop	{r4, pc}
 800ae56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae5e:	e7f7      	b.n	800ae50 <memmove+0x24>

0800ae60 <__malloc_lock>:
 800ae60:	4801      	ldr	r0, [pc, #4]	; (800ae68 <__malloc_lock+0x8>)
 800ae62:	f7fe bde2 	b.w	8009a2a <__retarget_lock_acquire_recursive>
 800ae66:	bf00      	nop
 800ae68:	200007e8 	.word	0x200007e8

0800ae6c <__malloc_unlock>:
 800ae6c:	4801      	ldr	r0, [pc, #4]	; (800ae74 <__malloc_unlock+0x8>)
 800ae6e:	f7fe bddd 	b.w	8009a2c <__retarget_lock_release_recursive>
 800ae72:	bf00      	nop
 800ae74:	200007e8 	.word	0x200007e8

0800ae78 <_realloc_r>:
 800ae78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7c:	4680      	mov	r8, r0
 800ae7e:	4614      	mov	r4, r2
 800ae80:	460e      	mov	r6, r1
 800ae82:	b921      	cbnz	r1, 800ae8e <_realloc_r+0x16>
 800ae84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae88:	4611      	mov	r1, r2
 800ae8a:	f7ff bba1 	b.w	800a5d0 <_malloc_r>
 800ae8e:	b92a      	cbnz	r2, 800ae9c <_realloc_r+0x24>
 800ae90:	f7ff fb32 	bl	800a4f8 <_free_r>
 800ae94:	4625      	mov	r5, r4
 800ae96:	4628      	mov	r0, r5
 800ae98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae9c:	f000 f835 	bl	800af0a <_malloc_usable_size_r>
 800aea0:	4284      	cmp	r4, r0
 800aea2:	4607      	mov	r7, r0
 800aea4:	d802      	bhi.n	800aeac <_realloc_r+0x34>
 800aea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aeaa:	d812      	bhi.n	800aed2 <_realloc_r+0x5a>
 800aeac:	4621      	mov	r1, r4
 800aeae:	4640      	mov	r0, r8
 800aeb0:	f7ff fb8e 	bl	800a5d0 <_malloc_r>
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d0ed      	beq.n	800ae96 <_realloc_r+0x1e>
 800aeba:	42bc      	cmp	r4, r7
 800aebc:	4622      	mov	r2, r4
 800aebe:	4631      	mov	r1, r6
 800aec0:	bf28      	it	cs
 800aec2:	463a      	movcs	r2, r7
 800aec4:	f7fe fe32 	bl	8009b2c <memcpy>
 800aec8:	4631      	mov	r1, r6
 800aeca:	4640      	mov	r0, r8
 800aecc:	f7ff fb14 	bl	800a4f8 <_free_r>
 800aed0:	e7e1      	b.n	800ae96 <_realloc_r+0x1e>
 800aed2:	4635      	mov	r5, r6
 800aed4:	e7df      	b.n	800ae96 <_realloc_r+0x1e>
	...

0800aed8 <_read_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d07      	ldr	r5, [pc, #28]	; (800aef8 <_read_r+0x20>)
 800aedc:	4604      	mov	r4, r0
 800aede:	4608      	mov	r0, r1
 800aee0:	4611      	mov	r1, r2
 800aee2:	2200      	movs	r2, #0
 800aee4:	602a      	str	r2, [r5, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	f7f6 fce8 	bl	80018bc <_read>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_read_r+0x1e>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_read_r+0x1e>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	200007f4 	.word	0x200007f4

0800aefc <abort>:
 800aefc:	b508      	push	{r3, lr}
 800aefe:	2006      	movs	r0, #6
 800af00:	f000 f834 	bl	800af6c <raise>
 800af04:	2001      	movs	r0, #1
 800af06:	f7f6 fccf 	bl	80018a8 <_exit>

0800af0a <_malloc_usable_size_r>:
 800af0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0e:	1f18      	subs	r0, r3, #4
 800af10:	2b00      	cmp	r3, #0
 800af12:	bfbc      	itt	lt
 800af14:	580b      	ldrlt	r3, [r1, r0]
 800af16:	18c0      	addlt	r0, r0, r3
 800af18:	4770      	bx	lr

0800af1a <_raise_r>:
 800af1a:	291f      	cmp	r1, #31
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
 800af22:	d904      	bls.n	800af2e <_raise_r+0x14>
 800af24:	2316      	movs	r3, #22
 800af26:	6003      	str	r3, [r0, #0]
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	bd38      	pop	{r3, r4, r5, pc}
 800af2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af30:	b112      	cbz	r2, 800af38 <_raise_r+0x1e>
 800af32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af36:	b94b      	cbnz	r3, 800af4c <_raise_r+0x32>
 800af38:	4620      	mov	r0, r4
 800af3a:	f000 f831 	bl	800afa0 <_getpid_r>
 800af3e:	462a      	mov	r2, r5
 800af40:	4601      	mov	r1, r0
 800af42:	4620      	mov	r0, r4
 800af44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af48:	f000 b818 	b.w	800af7c <_kill_r>
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d00a      	beq.n	800af66 <_raise_r+0x4c>
 800af50:	1c59      	adds	r1, r3, #1
 800af52:	d103      	bne.n	800af5c <_raise_r+0x42>
 800af54:	2316      	movs	r3, #22
 800af56:	6003      	str	r3, [r0, #0]
 800af58:	2001      	movs	r0, #1
 800af5a:	e7e7      	b.n	800af2c <_raise_r+0x12>
 800af5c:	2400      	movs	r4, #0
 800af5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af62:	4628      	mov	r0, r5
 800af64:	4798      	blx	r3
 800af66:	2000      	movs	r0, #0
 800af68:	e7e0      	b.n	800af2c <_raise_r+0x12>
	...

0800af6c <raise>:
 800af6c:	4b02      	ldr	r3, [pc, #8]	; (800af78 <raise+0xc>)
 800af6e:	4601      	mov	r1, r0
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	f7ff bfd2 	b.w	800af1a <_raise_r>
 800af76:	bf00      	nop
 800af78:	2000000c 	.word	0x2000000c

0800af7c <_kill_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d07      	ldr	r5, [pc, #28]	; (800af9c <_kill_r+0x20>)
 800af80:	2300      	movs	r3, #0
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	4611      	mov	r1, r2
 800af88:	602b      	str	r3, [r5, #0]
 800af8a:	f7f6 fc7d 	bl	8001888 <_kill>
 800af8e:	1c43      	adds	r3, r0, #1
 800af90:	d102      	bne.n	800af98 <_kill_r+0x1c>
 800af92:	682b      	ldr	r3, [r5, #0]
 800af94:	b103      	cbz	r3, 800af98 <_kill_r+0x1c>
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	bf00      	nop
 800af9c:	200007f4 	.word	0x200007f4

0800afa0 <_getpid_r>:
 800afa0:	f7f6 bc6a 	b.w	8001878 <_getpid>

0800afa4 <_init>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	bf00      	nop
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr

0800afb0 <_fini>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	bf00      	nop
 800afb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb6:	bc08      	pop	{r3}
 800afb8:	469e      	mov	lr, r3
 800afba:	4770      	bx	lr
