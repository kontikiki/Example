
I2C_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800afc8  0800afc8  0001afc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b524  0800b524  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b52c  0800b52c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b52c  0800b52c  0001b52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b530  0800b530  0001b530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000618  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007f8  200007f8  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003876b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b92  00000000  00000000  0005897b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003440  00000000  00000000  0005c510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003298  00000000  00000000  0005f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264e0  00000000  00000000  00062be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ff2a  00000000  00000000  000890c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e58ab  00000000  00000000  000a8ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018e89d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fb5c  00000000  00000000  0018e8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800afac 	.word	0x0800afac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800afac 	.word	0x0800afac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	2201      	movs	r2, #1
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <__io_putchar+0x20>)
 8001028:	f003 f9eb 	bl	8004402 <HAL_UART_Transmit>
	return ch;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002a8 	.word	0x200002a8

0800103c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001042:	f000 fdfd 	bl	8001c40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001046:	f000 f947 	bl	80012d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800104a:	f000 fa61 	bl	8001510 <MX_GPIO_Init>
	MX_I2C1_Init();
 800104e:	f000 f9bf 	bl	80013d0 <MX_I2C1_Init>
	MX_SPI2_Init();
 8001052:	f000 f9fd 	bl	8001450 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8001056:	f000 fa31 	bl	80014bc <MX_USART1_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800105a:	f000 f9ad 	bl	80013b8 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800105e:	4b97      	ldr	r3, [pc, #604]	; (80012bc <main+0x280>)
 8001060:	4a97      	ldr	r2, [pc, #604]	; (80012c0 <main+0x284>)
 8001062:	4998      	ldr	r1, [pc, #608]	; (80012c4 <main+0x288>)
 8001064:	4898      	ldr	r0, [pc, #608]	; (80012c8 <main+0x28c>)
 8001066:	f004 fb81 	bl	800576c <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 800106a:	4897      	ldr	r0, [pc, #604]	; (80012c8 <main+0x28c>)
 800106c:	f005 f9d2 	bl	8006414 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8001070:	2100      	movs	r1, #0
 8001072:	4895      	ldr	r0, [pc, #596]	; (80012c8 <main+0x28c>)
 8001074:	f005 f9dd 	bl	8006432 <u8x8_SetPowerSave>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	ADXL345Init();
 8001078:	f004 fa10 	bl	800549c <ADXL345Init>
	accelAverage();
 800107c:	f004 fa40 	bl	8005500 <accelAverage>

	point[0].x = 64;
 8001080:	4b92      	ldr	r3, [pc, #584]	; (80012cc <main+0x290>)
 8001082:	2240      	movs	r2, #64	; 0x40
 8001084:	601a      	str	r2, [r3, #0]
	point[0].y = 32;
 8001086:	4b91      	ldr	r3, [pc, #580]	; (80012cc <main+0x290>)
 8001088:	2220      	movs	r2, #32
 800108a:	605a      	str	r2, [r3, #4]

	point[1].x = 63;
 800108c:	4b8f      	ldr	r3, [pc, #572]	; (80012cc <main+0x290>)
 800108e:	223f      	movs	r2, #63	; 0x3f
 8001090:	609a      	str	r2, [r3, #8]
	point[1].y = 31;
 8001092:	4b8e      	ldr	r3, [pc, #568]	; (80012cc <main+0x290>)
 8001094:	221f      	movs	r2, #31
 8001096:	60da      	str	r2, [r3, #12]

	point[2].x = 64;
 8001098:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <main+0x290>)
 800109a:	2240      	movs	r2, #64	; 0x40
 800109c:	611a      	str	r2, [r3, #16]
	point[2].y = 31;
 800109e:	4b8b      	ldr	r3, [pc, #556]	; (80012cc <main+0x290>)
 80010a0:	221f      	movs	r2, #31
 80010a2:	615a      	str	r2, [r3, #20]

	point[3].x = 65;
 80010a4:	4b89      	ldr	r3, [pc, #548]	; (80012cc <main+0x290>)
 80010a6:	2241      	movs	r2, #65	; 0x41
 80010a8:	619a      	str	r2, [r3, #24]
	point[3].y = 31;
 80010aa:	4b88      	ldr	r3, [pc, #544]	; (80012cc <main+0x290>)
 80010ac:	221f      	movs	r2, #31
 80010ae:	61da      	str	r2, [r3, #28]

	point[4].x = 63;
 80010b0:	4b86      	ldr	r3, [pc, #536]	; (80012cc <main+0x290>)
 80010b2:	223f      	movs	r2, #63	; 0x3f
 80010b4:	621a      	str	r2, [r3, #32]
	point[4].y = 32;
 80010b6:	4b85      	ldr	r3, [pc, #532]	; (80012cc <main+0x290>)
 80010b8:	2220      	movs	r2, #32
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24

	point[5].x = 65;
 80010bc:	4b83      	ldr	r3, [pc, #524]	; (80012cc <main+0x290>)
 80010be:	2241      	movs	r2, #65	; 0x41
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
	point[5].y = 32;
 80010c2:	4b82      	ldr	r3, [pc, #520]	; (80012cc <main+0x290>)
 80010c4:	2220      	movs	r2, #32
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c

	point[6].x = 63;
 80010c8:	4b80      	ldr	r3, [pc, #512]	; (80012cc <main+0x290>)
 80010ca:	223f      	movs	r2, #63	; 0x3f
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
	point[6].y = 33;
 80010ce:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <main+0x290>)
 80010d0:	2221      	movs	r2, #33	; 0x21
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

	point[7].x = 64;
 80010d4:	4b7d      	ldr	r3, [pc, #500]	; (80012cc <main+0x290>)
 80010d6:	2240      	movs	r2, #64	; 0x40
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
	point[7].y = 33;
 80010da:	4b7c      	ldr	r3, [pc, #496]	; (80012cc <main+0x290>)
 80010dc:	2221      	movs	r2, #33	; 0x21
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c

	point[8].x = 65;
 80010e0:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <main+0x290>)
 80010e2:	2241      	movs	r2, #65	; 0x41
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
	point[8].y = 33;
 80010e6:	4b79      	ldr	r3, [pc, #484]	; (80012cc <main+0x290>)
 80010e8:	2221      	movs	r2, #33	; 0x21
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44

	for (int i = 0; i < 9; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e011      	b.n	8001116 <main+0xda>
		u8g2_DrawPixel(&u8g2, point[i].x, point[i].y);
 80010f2:	4a76      	ldr	r2, [pc, #472]	; (80012cc <main+0x290>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010fa:	b299      	uxth	r1, r3
 80010fc:	4a73      	ldr	r2, [pc, #460]	; (80012cc <main+0x290>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	486f      	ldr	r0, [pc, #444]	; (80012c8 <main+0x28c>)
 800110c:	f004 fc6c 	bl	80059e8 <u8g2_DrawPixel>
	for (int i = 0; i < 9; i++) {
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2b08      	cmp	r3, #8
 800111a:	ddea      	ble.n	80010f2 <main+0xb6>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		u8g2_FirstPage(&u8g2);
 800111c:	486a      	ldr	r0, [pc, #424]	; (80012c8 <main+0x28c>)
 800111e:	f004 fad2 	bl	80056c6 <u8g2_FirstPage>

		do {
			int16_t x, y, z = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	807b      	strh	r3, [r7, #2]
			multiDataRead(&x, &y, &z);
 8001126:	1cba      	adds	r2, r7, #2
 8001128:	1d39      	adds	r1, r7, #4
 800112a:	1dbb      	adds	r3, r7, #6
 800112c:	4618      	mov	r0, r3
 800112e:	f004 f94f 	bl	80053d0 <multiDataRead>
			x -= readings[0];
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113e:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <main+0x294>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114c:	ee17 3a90 	vmov	r3, s15
 8001150:	b21b      	sxth	r3, r3
 8001152:	80fb      	strh	r3, [r7, #6]
			y -= readings[1];
 8001154:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001160:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <main+0x294>)
 8001162:	edd3 7a01 	vldr	s15, [r3, #4]
 8001166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116e:	ee17 3a90 	vmov	r3, s15
 8001172:	b21b      	sxth	r3, r3
 8001174:	80bb      	strh	r3, [r7, #4]
			z -= readings[2];
 8001176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001182:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <main+0x294>)
 8001184:	edd3 7a02 	vldr	s15, [r3, #8]
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	ee17 3a90 	vmov	r3, s15
 8001194:	b21b      	sxth	r3, r3
 8001196:	807b      	strh	r3, [r7, #2]
			z += 256;
 8001198:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800119c:	b29b      	uxth	r3, r3
 800119e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	807b      	strh	r3, [r7, #2]
			printf("%d %d %d\r\n", x, y, z);
 80011a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011b2:	461a      	mov	r2, r3
 80011b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011b8:	4846      	ldr	r0, [pc, #280]	; (80012d4 <main+0x298>)
 80011ba:	f006 f875 	bl	80072a8 <iprintf>

#ifdef POINT_MODE
	  			int pixel_y=x*32/512;
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da00      	bge.n	80011c8 <main+0x18c>
 80011c6:	330f      	adds	r3, #15
 80011c8:	111b      	asrs	r3, r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
	  			int pixel_x=y*64/512;
 80011cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da00      	bge.n	80011d6 <main+0x19a>
 80011d4:	3307      	adds	r3, #7
 80011d6:	10db      	asrs	r3, r3, #3
 80011d8:	60bb      	str	r3, [r7, #8]

	  			for(int i=0;i<9;i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	e061      	b.n	80012a4 <main+0x268>
	  			{
	  				u8g2_DrawPixel(&u8g2,point[i].x-pixel_x,point[i].y-pixel_y);
 80011e0:	4a3a      	ldr	r2, [pc, #232]	; (80012cc <main+0x290>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b299      	uxth	r1, r3
 80011f2:	4a36      	ldr	r2, [pc, #216]	; (80012cc <main+0x290>)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	b29b      	uxth	r3, r3
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	482f      	ldr	r0, [pc, #188]	; (80012c8 <main+0x28c>)
 800120a:	f004 fbed 	bl	80059e8 <u8g2_DrawPixel>
	  				point[i].x=point[i].x-pixel_x;
 800120e:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <main+0x290>)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad2      	subs	r2, r2, r3
 800121a:	492c      	ldr	r1, [pc, #176]	; (80012cc <main+0x290>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  				point[i].y=point[i].y-pixel_y;
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <main+0x290>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4413      	add	r3, r2
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	4926      	ldr	r1, [pc, #152]	; (80012cc <main+0x290>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	605a      	str	r2, [r3, #4]

	  				if(point[i].x>127)
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <main+0x290>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001242:	2b7f      	cmp	r3, #127	; 0x7f
 8001244:	dd05      	ble.n	8001252 <main+0x216>
	  				{
	  					point[i].x=0;
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <main+0x290>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2100      	movs	r1, #0
 800124c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001250:	e00a      	b.n	8001268 <main+0x22c>
	  				}
	  				else if(point[i].x<0)
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <main+0x290>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800125a:	2b00      	cmp	r3, #0
 800125c:	da04      	bge.n	8001268 <main+0x22c>
	  				{
	  					point[i].x=127;
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <main+0x290>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	217f      	movs	r1, #127	; 0x7f
 8001264:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	  				}

	  				if(point[i].y>63)
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <main+0x290>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b3f      	cmp	r3, #63	; 0x3f
 8001274:	dd06      	ble.n	8001284 <main+0x248>
	  				{
	  					point[i].y=0;
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <main+0x290>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4413      	add	r3, r2
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	e00c      	b.n	800129e <main+0x262>
	  				}
	  				else if(point[i].y<0)
 8001284:	4a11      	ldr	r2, [pc, #68]	; (80012cc <main+0x290>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4413      	add	r3, r2
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da05      	bge.n	800129e <main+0x262>
	  				{
	  					point[i].y=63;
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <main+0x290>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	223f      	movs	r2, #63	; 0x3f
 800129c:	605a      	str	r2, [r3, #4]
	  			for(int i=0;i<9;i++)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	3301      	adds	r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	dd9a      	ble.n	80011e0 <main+0x1a4>
			u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
			u8g2_DrawStrX2(&u8g2, 0, 45, "z:");
			u8g2_DrawStrX2(&u8g2, 20, 45, buffer);
#endif

		} while (u8g2_NextPage(&u8g2));
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <main+0x28c>)
 80012ac:	f004 fa1f 	bl	80056ee <u8g2_NextPage>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f47f af35 	bne.w	8001122 <main+0xe6>
		u8g2_FirstPage(&u8g2);
 80012b8:	e730      	b.n	800111c <main+0xe0>
 80012ba:	bf00      	nop
 80012bc:	08001a11 	.word	0x08001a11
 80012c0:	08001b05 	.word	0x08001b05
 80012c4:	0800affc 	.word	0x0800affc
 80012c8:	20000340 	.word	0x20000340
 80012cc:	200002ec 	.word	0x200002ec
 80012d0:	20000334 	.word	0x20000334
 80012d4:	0800afc8 	.word	0x0800afc8

080012d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	; 0x50
 80012dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2230      	movs	r2, #48	; 0x30
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 f95c 	bl	80065a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <SystemClock_Config+0xd8>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <SystemClock_Config+0xd8>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <SystemClock_Config+0xd8>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <SystemClock_Config+0xdc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <SystemClock_Config+0xdc>)
 8001322:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <SystemClock_Config+0xdc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001334:	2301      	movs	r3, #1
 8001336:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001348:	2304      	movs	r3, #4
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 800134c:	23b4      	movs	r3, #180	; 0xb4
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001354:	2304      	movs	r3, #4
 8001356:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4618      	mov	r0, r3
 800135e:	f002 f8db 	bl	8003518 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x94>
		Error_Handler();
 8001368:	f000 f930 	bl	80015cc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800136c:	f002 f884 	bl	8003478 <HAL_PWREx_EnableOverDrive>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xa2>
		Error_Handler();
 8001376:	f000 f929 	bl	80015cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2302      	movs	r3, #2
 8001380:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001386:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800138a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2105      	movs	r1, #5
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fb35 	bl	8003a08 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xd0>
		Error_Handler();
 80013a4:	f000 f912 	bl	80015cc <Error_Handler>
	}
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	; 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2025      	movs	r0, #37	; 0x25
 80013c2:	f000 fdae 	bl	8001f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013c6:	2025      	movs	r0, #37	; 0x25
 80013c8:	f000 fdc7 	bl	8001f5a <HAL_NVIC_EnableIRQ>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_I2C1_Init+0x74>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_I2C1_Init+0x78>)
 80013d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_I2C1_Init+0x74>)
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <MX_I2C1_Init+0x7c>)
 80013de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_I2C1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_I2C1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_I2C1_Init+0x74>)
 80013ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_I2C1_Init+0x74>)
 800140e:	f001 f823 	bl	8002458 <HAL_I2C_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001418:	f000 f8d8 	bl	80015cc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800141c:	2100      	movs	r1, #0
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <MX_I2C1_Init+0x74>)
 8001420:	f001 ffaf 	bl	8003382 <HAL_I2CEx_ConfigAnalogFilter>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800142a:	f000 f8cf 	bl	80015cc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800142e:	2100      	movs	r1, #0
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C1_Init+0x74>)
 8001432:	f001 ffe2 	bl	80033fa <HAL_I2CEx_ConfigDigitalFilter>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C1_Init+0x70>
		Error_Handler();
 800143c:	f000 f8c6 	bl	80015cc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001fc 	.word	0x200001fc
 8001448:	40005400 	.word	0x40005400
 800144c:	000186a0 	.word	0x000186a0

08001450 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_SPI2_Init+0x64>)
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <MX_SPI2_Init+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_SPI2_Init+0x64>)
 800145c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001460:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_SPI2_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_SPI2_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_SPI2_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_SPI2_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_SPI2_Init+0x64>)
 800147c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001480:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_SPI2_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_SPI2_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_SPI2_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_SPI2_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_SPI2_Init+0x64>)
 800149c:	220a      	movs	r2, #10
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_SPI2_Init+0x64>)
 80014a2:	f002 fcd1 	bl	8003e48 <HAL_SPI_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_SPI2_Init+0x60>
		Error_Handler();
 80014ac:	f000 f88e 	bl	80015cc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000250 	.word	0x20000250
 80014b8:	40003800 	.word	0x40003800

080014bc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <MX_USART1_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014f4:	f002 ff38 	bl	8004368 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80014fe:	f000 f865 	bl	80015cc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200002a8 	.word	0x200002a8
 800150c:	40011000 	.word	0x40011000

08001510 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <MX_GPIO_Init+0xb4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <MX_GPIO_Init+0xb4>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <MX_GPIO_Init+0xb4>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_GPIO_Init+0xb4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin,
 8001596:	2201      	movs	r2, #1
 8001598:	2107      	movs	r1, #7
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <MX_GPIO_Init+0xb8>)
 800159c:	f000 ff42 	bl	8002424 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin OLED_CS_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin;
 80015a0:	2307      	movs	r3, #7
 80015a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_GPIO_Init+0xb8>)
 80015b8:	f000 fd88 	bl	80020cc <HAL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020800 	.word	0x40020800

080015cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_MspInit+0x4c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <HAL_MspInit+0x4c>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_MspInit+0x4c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_MspInit+0x4c>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_I2C_MspInit+0x84>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12b      	bne.n	80016a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001666:	23c0      	movs	r3, #192	; 0xc0
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166a:	2312      	movs	r3, #18
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001676:	2304      	movs	r3, #4
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <HAL_I2C_MspInit+0x8c>)
 8001682:	f000 fd23 	bl	80020cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40005400 	.word	0x40005400
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020400 	.word	0x40020400

080016b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_SPI_MspInit+0xc0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d14a      	bne.n	8001770 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_SPI_MspInit+0xc4>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a26      	ldr	r2, [pc, #152]	; (800177c <HAL_SPI_MspInit+0xc4>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_SPI_MspInit+0xc4>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_SPI_MspInit+0xc4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_SPI_MspInit+0xc4>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_SPI_MspInit+0xc4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_SPI_MspInit+0xc4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <HAL_SPI_MspInit+0xc4>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_SPI_MspInit+0xc4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800172e:	2308      	movs	r3, #8
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800173e:	2305      	movs	r3, #5
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <HAL_SPI_MspInit+0xc8>)
 800174a:	f000 fcbf 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800174e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001760:	2305      	movs	r3, #5
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <HAL_SPI_MspInit+0xcc>)
 800176c:	f000 fcae 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40003800 	.word	0x40003800
 800177c:	40023800 	.word	0x40023800
 8001780:	40020800 	.word	0x40020800
 8001784:	40020400 	.word	0x40020400

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_UART_MspInit+0x84>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12c      	bne.n	8001804 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f4:	2307      	movs	r3, #7
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_UART_MspInit+0x8c>)
 8001800:	f000 fc64 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40011000 	.word	0x40011000
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 fa3e 	bl	8001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001868:	f000 fb91 	bl	8001f8e <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <USART1_IRQHandler+0x10>)
 8001876:	f002 fe57 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200002a8 	.word	0x200002a8

08001884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_kill>:

int _kill(int pid, int sig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800189e:	f004 fe57 	bl	8006550 <__errno>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2216      	movs	r2, #22
 80018a6:	601a      	str	r2, [r3, #0]
  return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_exit>:

void _exit (int status)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ffe7 	bl	8001894 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c6:	e7fe      	b.n	80018c6 <_exit+0x12>

080018c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018da:	f3af 8000 	nop.w
 80018de:	4601      	mov	r1, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf0      	blt.n	80018da <_read+0x12>
  }

  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e009      	b.n	8001928 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb7b 	bl	8001018 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf1      	blt.n	8001914 <_write+0x12>
  }
  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_close>:

int _close(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001962:	605a      	str	r2, [r3, #4]
  return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_isatty>:

int _isatty(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f004 fdbc 	bl	8006550 <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20030000 	.word	0x20030000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	200003d4 	.word	0x200003d4
 8001a0c:	200007f8 	.word	0x200007f8

08001a10 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	72fb      	strb	r3, [r7, #11]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	3b28      	subs	r3, #40	; 0x28
 8001a26:	2b23      	cmp	r3, #35	; 0x23
 8001a28:	d864      	bhi.n	8001af4 <u8x8_stm32_gpio_and_delay+0xe4>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <u8x8_stm32_gpio_and_delay+0x20>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001af5 	.word	0x08001af5
 8001a34:	08001ac1 	.word	0x08001ac1
 8001a38:	08001af5 	.word	0x08001af5
 8001a3c:	08001af5 	.word	0x08001af5
 8001a40:	08001af5 	.word	0x08001af5
 8001a44:	08001af5 	.word	0x08001af5
 8001a48:	08001af5 	.word	0x08001af5
 8001a4c:	08001af5 	.word	0x08001af5
 8001a50:	08001af5 	.word	0x08001af5
 8001a54:	08001af5 	.word	0x08001af5
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001af5 	.word	0x08001af5
 8001a60:	08001af5 	.word	0x08001af5
 8001a64:	08001af5 	.word	0x08001af5
 8001a68:	08001af5 	.word	0x08001af5
 8001a6c:	08001af5 	.word	0x08001af5
 8001a70:	08001af5 	.word	0x08001af5
 8001a74:	08001af5 	.word	0x08001af5
 8001a78:	08001af5 	.word	0x08001af5
 8001a7c:	08001af5 	.word	0x08001af5
 8001a80:	08001af5 	.word	0x08001af5
 8001a84:	08001af5 	.word	0x08001af5
 8001a88:	08001af5 	.word	0x08001af5
 8001a8c:	08001af5 	.word	0x08001af5
 8001a90:	08001af5 	.word	0x08001af5
 8001a94:	08001af5 	.word	0x08001af5
 8001a98:	08001af5 	.word	0x08001af5
 8001a9c:	08001af5 	.word	0x08001af5
 8001aa0:	08001af5 	.word	0x08001af5
 8001aa4:	08001af5 	.word	0x08001af5
 8001aa8:	08001af5 	.word	0x08001af5
 8001aac:	08001af5 	.word	0x08001af5
 8001ab0:	08001af5 	.word	0x08001af5
 8001ab4:	08001acb 	.word	0x08001acb
 8001ab8:	08001ad9 	.word	0x08001ad9
 8001abc:	08001ae7 	.word	0x08001ae7
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8001ac0:	7abb      	ldrb	r3, [r7, #10]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f92e 	bl	8001d24 <HAL_Delay>
		break;
 8001ac8:	e014      	b.n	8001af4 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8001aca:	7abb      	ldrb	r3, [r7, #10]
 8001acc:	461a      	mov	r2, r3
 8001ace:	2104      	movs	r1, #4
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001ad2:	f000 fca7 	bl	8002424 <HAL_GPIO_WritePin>
		break;
 8001ad6:	e00d      	b.n	8001af4 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8001ad8:	7abb      	ldrb	r3, [r7, #10]
 8001ada:	461a      	mov	r2, r3
 8001adc:	2102      	movs	r1, #2
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001ae0:	f000 fca0 	bl	8002424 <HAL_GPIO_WritePin>
		break;
 8001ae4:	e006      	b.n	8001af4 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8001ae6:	7abb      	ldrb	r3, [r7, #10]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	2101      	movs	r1, #1
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001aee:	f000 fc99 	bl	8002424 <HAL_GPIO_WritePin>
		break;
 8001af2:	bf00      	nop
	}
	return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40020800 	.word	0x40020800

08001b04 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	72fb      	strb	r3, [r7, #11]
 8001b12:	4613      	mov	r3, r2
 8001b14:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	3b14      	subs	r3, #20
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d847      	bhi.n	8001bae <u8x8_byte_stm32_hw_spi+0xaa>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <u8x8_byte_stm32_hw_spi+0x20>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001bb3 	.word	0x08001bb3
 8001b28:	08001baf 	.word	0x08001baf
 8001b2c:	08001baf 	.word	0x08001baf
 8001b30:	08001b59 	.word	0x08001b59
 8001b34:	08001b7f 	.word	0x08001b7f
 8001b38:	08001b97 	.word	0x08001b97
 8001b3c:	08001baf 	.word	0x08001baf
 8001b40:	08001baf 	.word	0x08001baf
 8001b44:	08001baf 	.word	0x08001baf
 8001b48:	08001baf 	.word	0x08001baf
 8001b4c:	08001baf 	.word	0x08001baf
 8001b50:	08001baf 	.word	0x08001baf
 8001b54:	08001b71 	.word	0x08001b71
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8001b58:	7abb      	ldrb	r3, [r7, #10]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <u8x8_byte_stm32_hw_spi+0xc0>)
 8001b62:	f002 f9fa 	bl	8003f5a <HAL_SPI_Transmit>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d024      	beq.n	8001bb6 <u8x8_byte_stm32_hw_spi+0xb2>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e024      	b.n	8001bba <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8001b70:	7abb      	ldrb	r3, [r7, #10]
 8001b72:	461a      	mov	r2, r3
 8001b74:	214a      	movs	r1, #74	; 0x4a
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f004 fc7b 	bl	8006472 <u8x8_gpio_call>
		break;
 8001b7c:	e01c      	b.n	8001bb8 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	2149      	movs	r1, #73	; 0x49
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f004 fc72 	bl	8006472 <u8x8_gpio_call>
		HAL_Delay(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f000 f8c8 	bl	8001d24 <HAL_Delay>
		break;
 8001b94:	e010      	b.n	8001bb8 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f000 f8c4 	bl	8001d24 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2149      	movs	r1, #73	; 0x49
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f004 fc63 	bl	8006472 <u8x8_gpio_call>
		break;
 8001bac:	e004      	b.n	8001bb8 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e003      	b.n	8001bba <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8001bb6:	bf00      	nop
	}
	return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000250 	.word	0x20000250

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be4:	4c0b      	ldr	r4, [pc, #44]	; (8001c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf2:	f000 f813 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f004 fcb1 	bl	800655c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff fa1f 	bl	800103c <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c0c:	0800b534 	.word	0x0800b534
  ldr r2, =_sbss
 8001c10:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c14:	200007f8 	.word	0x200007f8

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <SystemInit+0x20>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <SystemInit+0x20>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <HAL_Init+0x40>)
 8001c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_Init+0x40>)
 8001c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_Init+0x40>)
 8001c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f94f 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6e:	200f      	movs	r0, #15
 8001c70:	f000 f808 	bl	8001c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c74:	f7ff fcb0 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_InitTick+0x54>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x58>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f967 	bl	8001f76 <HAL_SYSTICK_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00e      	b.n	8001cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d80a      	bhi.n	8001cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f000 f92f 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc4:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <HAL_InitTick+0x5c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_IncTick+0x20>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_IncTick+0x24>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008
 8001d08:	200003d8 	.word	0x200003d8

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200003d8 	.word	0x200003d8

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff ffee 	bl	8001d0c <HAL_GetTick>
 8001d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d005      	beq.n	8001d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_Delay+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d4a:	bf00      	nop
 8001d4c:	f7ff ffde 	bl	8001d0c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d8f7      	bhi.n	8001d4c <HAL_Delay+0x28>
  {
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff29 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff3e 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff31 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffa2 	bl	8001ec8 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f92:	f000 f802 	bl	8001f9a <HAL_SYSTICK_Callback>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fb6:	f7ff fea9 	bl	8001d0c <HAL_GetTick>
 8001fba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d008      	beq.n	8001fda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e052      	b.n	8002080 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0216 	bic.w	r2, r2, #22
 8001fe8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <HAL_DMA_Abort+0x62>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0208 	bic.w	r2, r2, #8
 8002018:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202a:	e013      	b.n	8002054 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800202c:	f7ff fe6e 	bl	8001d0c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b05      	cmp	r3, #5
 8002038:	d90c      	bls.n	8002054 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2220      	movs	r2, #32
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2203      	movs	r2, #3
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e015      	b.n	8002080 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1e4      	bne.n	800202c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	223f      	movs	r2, #63	; 0x3f
 8002068:	409a      	lsls	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d004      	beq.n	80020a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00c      	b.n	80020c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2205      	movs	r2, #5
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e177      	b.n	80023d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 8166 	bne.w	80023d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d005      	beq.n	800211e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211a:	2b02      	cmp	r3, #2
 800211c:	d130      	bne.n	8002180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0201 	and.w	r2, r3, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b03      	cmp	r3, #3
 800218a:	d017      	beq.n	80021bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d123      	bne.n	8002210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80c0 	beq.w	80023d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <HAL_GPIO_Init+0x324>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <HAL_GPIO_Init+0x324>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002260:	6453      	str	r3, [r2, #68]	; 0x44
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_GPIO_Init+0x324>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226e:	4a61      	ldr	r2, [pc, #388]	; (80023f4 <HAL_GPIO_Init+0x328>)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_GPIO_Init+0x32c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d037      	beq.n	800230a <HAL_GPIO_Init+0x23e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a57      	ldr	r2, [pc, #348]	; (80023fc <HAL_GPIO_Init+0x330>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d031      	beq.n	8002306 <HAL_GPIO_Init+0x23a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a56      	ldr	r2, [pc, #344]	; (8002400 <HAL_GPIO_Init+0x334>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d02b      	beq.n	8002302 <HAL_GPIO_Init+0x236>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a55      	ldr	r2, [pc, #340]	; (8002404 <HAL_GPIO_Init+0x338>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d025      	beq.n	80022fe <HAL_GPIO_Init+0x232>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <HAL_GPIO_Init+0x33c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_Init+0x22e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a53      	ldr	r2, [pc, #332]	; (800240c <HAL_GPIO_Init+0x340>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x22a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_GPIO_Init+0x344>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x226>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a51      	ldr	r2, [pc, #324]	; (8002414 <HAL_GPIO_Init+0x348>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x222>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a50      	ldr	r2, [pc, #320]	; (8002418 <HAL_GPIO_Init+0x34c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x21e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4f      	ldr	r2, [pc, #316]	; (800241c <HAL_GPIO_Init+0x350>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x21a>
 80022e2:	2309      	movs	r3, #9
 80022e4:	e012      	b.n	800230c <HAL_GPIO_Init+0x240>
 80022e6:	230a      	movs	r3, #10
 80022e8:	e010      	b.n	800230c <HAL_GPIO_Init+0x240>
 80022ea:	2308      	movs	r3, #8
 80022ec:	e00e      	b.n	800230c <HAL_GPIO_Init+0x240>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e00c      	b.n	800230c <HAL_GPIO_Init+0x240>
 80022f2:	2306      	movs	r3, #6
 80022f4:	e00a      	b.n	800230c <HAL_GPIO_Init+0x240>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e008      	b.n	800230c <HAL_GPIO_Init+0x240>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x240>
 80022fe:	2303      	movs	r3, #3
 8002300:	e004      	b.n	800230c <HAL_GPIO_Init+0x240>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_Init+0x240>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x240>
 800230a:	2300      	movs	r3, #0
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4093      	lsls	r3, r2
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231c:	4935      	ldr	r1, [pc, #212]	; (80023f4 <HAL_GPIO_Init+0x328>)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_GPIO_Init+0x354>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234e:	4a34      	ldr	r2, [pc, #208]	; (8002420 <HAL_GPIO_Init+0x354>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <HAL_GPIO_Init+0x354>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <HAL_GPIO_Init+0x354>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_GPIO_Init+0x354>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_GPIO_Init+0x354>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_GPIO_Init+0x354>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_GPIO_Init+0x354>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	f67f ae84 	bls.w	80020e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40013800 	.word	0x40013800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40020400 	.word	0x40020400
 8002400:	40020800 	.word	0x40020800
 8002404:	40020c00 	.word	0x40020c00
 8002408:	40021000 	.word	0x40021000
 800240c:	40021400 	.word	0x40021400
 8002410:	40021800 	.word	0x40021800
 8002414:	40021c00 	.word	0x40021c00
 8002418:	40022000 	.word	0x40022000
 800241c:	40022400 	.word	0x40022400
 8002420:	40013c00 	.word	0x40013c00

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002440:	e003      	b.n	800244a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e12b      	b.n	80026c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff f8d2 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024bc:	f001 fc9c 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 80024c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a81      	ldr	r2, [pc, #516]	; (80026cc <HAL_I2C_Init+0x274>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d807      	bhi.n	80024dc <HAL_I2C_Init+0x84>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a80      	ldr	r2, [pc, #512]	; (80026d0 <HAL_I2C_Init+0x278>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf94      	ite	ls
 80024d4:	2301      	movls	r3, #1
 80024d6:	2300      	movhi	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e006      	b.n	80024ea <HAL_I2C_Init+0x92>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a7d      	ldr	r2, [pc, #500]	; (80026d4 <HAL_I2C_Init+0x27c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0e7      	b.n	80026c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a78      	ldr	r2, [pc, #480]	; (80026d8 <HAL_I2C_Init+0x280>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0c9b      	lsrs	r3, r3, #18
 80024fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a6a      	ldr	r2, [pc, #424]	; (80026cc <HAL_I2C_Init+0x274>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d802      	bhi.n	800252c <HAL_I2C_Init+0xd4>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3301      	adds	r3, #1
 800252a:	e009      	b.n	8002540 <HAL_I2C_Init+0xe8>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	4a69      	ldr	r2, [pc, #420]	; (80026dc <HAL_I2C_Init+0x284>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	3301      	adds	r3, #1
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	495c      	ldr	r1, [pc, #368]	; (80026cc <HAL_I2C_Init+0x274>)
 800255c:	428b      	cmp	r3, r1
 800255e:	d819      	bhi.n	8002594 <HAL_I2C_Init+0x13c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e59      	subs	r1, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fbb1 f3f3 	udiv	r3, r1, r3
 800256e:	1c59      	adds	r1, r3, #1
 8002570:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002574:	400b      	ands	r3, r1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_I2C_Init+0x138>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e59      	subs	r1, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fbb1 f3f3 	udiv	r3, r1, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258e:	e051      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002590:	2304      	movs	r3, #4
 8002592:	e04f      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d111      	bne.n	80025c0 <HAL_I2C_Init+0x168>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e012      	b.n	80025e6 <HAL_I2C_Init+0x18e>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	0099      	lsls	r1, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Init+0x196>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e022      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10e      	bne.n	8002614 <HAL_I2C_Init+0x1bc>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e58      	subs	r0, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	440b      	add	r3, r1
 8002604:	fbb0 f3f3 	udiv	r3, r0, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002612:	e00f      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e58      	subs	r0, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	0099      	lsls	r1, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	6809      	ldr	r1, [r1, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6911      	ldr	r1, [r2, #16]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68d2      	ldr	r2, [r2, #12]
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	430b      	orrs	r3, r1
 8002676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	000186a0 	.word	0x000186a0
 80026d0:	001e847f 	.word	0x001e847f
 80026d4:	003d08ff 	.word	0x003d08ff
 80026d8:	431bde83 	.word	0x431bde83
 80026dc:	10624dd3 	.word	0x10624dd3

080026e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
 80026f0:	4613      	mov	r3, r2
 80026f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff fb0a 	bl	8001d0c <HAL_GetTick>
 80026f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	f040 80e0 	bne.w	80028c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2319      	movs	r3, #25
 800270e:	2201      	movs	r2, #1
 8002710:	4970      	ldr	r1, [pc, #448]	; (80028d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fc58 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	e0d3      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_I2C_Master_Transmit+0x50>
 800272c:	2302      	movs	r3, #2
 800272e:	e0cc      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d007      	beq.n	8002756 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002764:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2221      	movs	r2, #33	; 0x21
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2210      	movs	r2, #16
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	893a      	ldrh	r2, [r7, #8]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002798:	8979      	ldrh	r1, [r7, #10]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fac2 	bl	8002d28 <I2C_MasterRequestWrite>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08d      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027c4:	e066      	b.n	8002894 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fcd2 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d107      	bne.n	80027ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06b      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b04      	cmp	r3, #4
 800282e:	d11b      	bne.n	8002868 <HAL_I2C_Master_Transmit+0x188>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	d017      	beq.n	8002868 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	6a39      	ldr	r1, [r7, #32]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fcc2 	bl	80031f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	2b04      	cmp	r3, #4
 800287e:	d107      	bne.n	8002890 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e01a      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d194      	bne.n	80027c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e000      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
  }
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	00100002 	.word	0x00100002
 80028d8:	ffff0000 	.word	0xffff0000

080028dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	460b      	mov	r3, r1
 80028ea:	817b      	strh	r3, [r7, #10]
 80028ec:	4613      	mov	r3, r2
 80028ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff fa0c 	bl	8001d0c <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	f040 820b 	bne.w	8002d1a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2319      	movs	r3, #25
 800290a:	2201      	movs	r2, #1
 800290c:	497c      	ldr	r1, [pc, #496]	; (8002b00 <HAL_I2C_Master_Receive+0x224>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fb5a 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	e1fe      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_I2C_Master_Receive+0x50>
 8002928:	2302      	movs	r3, #2
 800292a:	e1f7      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d007      	beq.n	8002952 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002960:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2222      	movs	r2, #34	; 0x22
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2210      	movs	r2, #16
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	893a      	ldrh	r2, [r7, #8]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a5c      	ldr	r2, [pc, #368]	; (8002b04 <HAL_I2C_Master_Receive+0x228>)
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002994:	8979      	ldrh	r1, [r7, #10]
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fa46 	bl	8002e2c <I2C_MasterRequestRead>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e1b8      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d113      	bne.n	80029da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	623b      	str	r3, [r7, #32]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e18c      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d11b      	bne.n	8002a1a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e16c      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d11b      	bne.n	8002a5a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	e14c      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a80:	e138      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	f200 80f1 	bhi.w	8002c6e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d123      	bne.n	8002adc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fbed 	bl	8003278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e139      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ada:	e10b      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d14e      	bne.n	8002b82 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	2200      	movs	r2, #0
 8002aec:	4906      	ldr	r1, [pc, #24]	; (8002b08 <HAL_I2C_Master_Receive+0x22c>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fa6a 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e10e      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
 8002afe:	bf00      	nop
 8002b00:	00100002 	.word	0x00100002
 8002b04:	ffff0000 	.word	0xffff0000
 8002b08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b80:	e0b8      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4966      	ldr	r1, [pc, #408]	; (8002d24 <HAL_I2C_Master_Receive+0x448>)
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fa1b 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0bf      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	2200      	movs	r2, #0
 8002be6:	494f      	ldr	r1, [pc, #316]	; (8002d24 <HAL_I2C_Master_Receive+0x448>)
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f9ed 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e091      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c6c:	e042      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fb00 	bl	8003278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e04c      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d118      	bne.n	8002cf4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f aec2 	bne.w	8002a82 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3728      	adds	r7, #40	; 0x28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	00010004 	.word	0x00010004

08002d28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d006      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d003      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d50:	d108      	bne.n	8002d64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e00b      	b.n	8002d7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	d107      	bne.n	8002d7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f91d 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e035      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db8:	d108      	bne.n	8002dcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	e01b      	b.n	8002e04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dcc:	897b      	ldrh	r3, [r7, #10]
 8002dce:	11db      	asrs	r3, r3, #7
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0306 	and.w	r3, r3, #6
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f063 030f 	orn	r3, r3, #15
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	490e      	ldr	r1, [pc, #56]	; (8002e24 <I2C_MasterRequestWrite+0xfc>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f943 	bl	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e010      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <I2C_MasterRequestWrite+0x100>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f933 	bl	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00010008 	.word	0x00010008
 8002e28:	00010002 	.word	0x00010002

08002e2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d006      	beq.n	8002e66 <I2C_MasterRequestRead+0x3a>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d003      	beq.n	8002e66 <I2C_MasterRequestRead+0x3a>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e64:	d108      	bne.n	8002e78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00b      	b.n	8002e90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	2b11      	cmp	r3, #17
 8002e7e:	d107      	bne.n	8002e90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f893 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d103      	bne.n	8002ec0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e079      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ecc:	d108      	bne.n	8002ee0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	e05f      	b.n	8002fa0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee0:	897b      	ldrh	r3, [r7, #10]
 8002ee2:	11db      	asrs	r3, r3, #7
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0306 	and.w	r3, r3, #6
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f063 030f 	orn	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4930      	ldr	r1, [pc, #192]	; (8002fc0 <I2C_MasterRequestRead+0x194>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f8b9 	bl	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e054      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4929      	ldr	r1, [pc, #164]	; (8002fc4 <I2C_MasterRequestRead+0x198>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f8a9 	bl	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e044      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f831 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7a:	d103      	bne.n	8002f84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e017      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	11db      	asrs	r3, r3, #7
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f003 0306 	and.w	r3, r3, #6
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f063 030e 	orn	r3, r3, #14
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <I2C_MasterRequestRead+0x198>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f865 	bl	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	00010008 	.word	0x00010008
 8002fc4:	00010002 	.word	0x00010002

08002fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	e025      	b.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d021      	beq.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe fe93 	bl	8001d0c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d116      	bne.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e023      	b.n	800306e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10d      	bne.n	800304c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	e00c      	b.n	8003066 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	429a      	cmp	r2, r3
 800306a:	d0b6      	beq.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003084:	e051      	b.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003094:	d123      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f043 0204 	orr.w	r2, r3, #4
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e046      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d021      	beq.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe fe11 	bl	8001d0c <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0220 	orr.w	r2, r3, #32
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e020      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10c      	bne.n	800314e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	43da      	mvns	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf14      	ite	ne
 8003146:	2301      	movne	r3, #1
 8003148:	2300      	moveq	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	e00b      	b.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	43da      	mvns	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d18d      	bne.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003180:	e02d      	b.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8ce 	bl	8003324 <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e02d      	b.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d021      	beq.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fdb7 	bl	8001d0c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d116      	bne.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e007      	b.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d1ca      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003202:	e02d      	b.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f88d 	bl	8003324 <I2C_IsAcknowledgeFailed>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e02d      	b.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321a:	d021      	beq.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321c:	f7fe fd76 	bl	8001d0c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	429a      	cmp	r2, r3
 800322a:	d302      	bcc.n	8003232 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d116      	bne.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e007      	b.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d1ca      	bne.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003284:	e042      	b.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b10      	cmp	r3, #16
 8003292:	d119      	bne.n	80032c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0210 	mvn.w	r2, #16
 800329c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e029      	b.n	800331c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fe fd20 	bl	8001d0c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d116      	bne.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e007      	b.n	800331c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d1b5      	bne.n	8003286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d11b      	bne.n	8003374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b20      	cmp	r3, #32
 8003396:	d129      	bne.n	80033ec <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0210 	bic.w	r2, r2, #16
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b20      	cmp	r3, #32
 8003412:	d12a      	bne.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003434:	89fb      	ldrh	r3, [r7, #14]
 8003436:	f023 030f 	bic.w	r3, r3, #15
 800343a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b29a      	uxth	r2, r3
 8003440:	89fb      	ldrh	r3, [r7, #14]
 8003442:	4313      	orrs	r3, r2
 8003444:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	89fa      	ldrh	r2, [r7, #14]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_PWREx_EnableOverDrive+0x90>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_PWREx_EnableOverDrive+0x90>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_PWREx_EnableOverDrive+0x90>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_PWREx_EnableOverDrive+0x94>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a4:	f7fe fc32 	bl	8001d0c <HAL_GetTick>
 80034a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034aa:	e009      	b.n	80034c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034ac:	f7fe fc2e 	bl	8001d0c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ba:	d901      	bls.n	80034c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e01f      	b.n	8003500 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_PWREx_EnableOverDrive+0x98>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d1ee      	bne.n	80034ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d4:	f7fe fc1a 	bl	8001d0c <HAL_GetTick>
 80034d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034da:	e009      	b.n	80034f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034dc:	f7fe fc16 	bl	8001d0c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ea:	d901      	bls.n	80034f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e007      	b.n	8003500 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034f0:	4b07      	ldr	r3, [pc, #28]	; (8003510 <HAL_PWREx_EnableOverDrive+0x98>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034fc:	d1ee      	bne.n	80034dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	420e0040 	.word	0x420e0040
 8003510:	40007000 	.word	0x40007000
 8003514:	420e0044 	.word	0x420e0044

08003518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e267      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d075      	beq.n	8003622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003536:	4b88      	ldr	r3, [pc, #544]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d00c      	beq.n	800355c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	2b08      	cmp	r3, #8
 800354c:	d112      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4b82      	ldr	r3, [pc, #520]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355a:	d10b      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	4b7e      	ldr	r3, [pc, #504]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d05b      	beq.n	8003620 <HAL_RCC_OscConfig+0x108>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d157      	bne.n	8003620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e242      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x74>
 800357e:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a75      	ldr	r2, [pc, #468]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e01d      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x98>
 8003596:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6f      	ldr	r2, [pc, #444]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6c      	ldr	r2, [pc, #432]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 80035b0:	4b69      	ldr	r3, [pc, #420]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a68      	ldr	r2, [pc, #416]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a65      	ldr	r2, [pc, #404]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fe fb9c 	bl	8001d0c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe fb98 	bl	8001d0c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e207      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0xc0>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe fb88 	bl	8001d0c <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe fb84 	bl	8001d0c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1f3      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0xe8>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d063      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	2b08      	cmp	r3, #8
 8003644:	d11c      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003646:	4b44      	ldr	r3, [pc, #272]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e1c7      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4937      	ldr	r1, [pc, #220]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	e03a      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	4b34      	ldr	r3, [pc, #208]	; (800375c <HAL_RCC_OscConfig+0x244>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fe fb3d 	bl	8001d0c <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003696:	f7fe fb39 	bl	8001d0c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1a8      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4925      	ldr	r1, [pc, #148]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCC_OscConfig+0x244>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fb1c 	bl	8001d0c <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d8:	f7fe fb18 	bl	8001d0c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e187      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d036      	beq.n	8003770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_RCC_OscConfig+0x248>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fe fafc 	bl	8001d0c <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003718:	f7fe faf8 	bl	8001d0c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e167      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_OscConfig+0x240>)
 800372c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x200>
 8003736:	e01b      	b.n	8003770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_OscConfig+0x248>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7fe fae5 	bl	8001d0c <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	e00e      	b.n	8003764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003746:	f7fe fae1 	bl	8001d0c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d907      	bls.n	8003764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e150      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
 8003758:	40023800 	.word	0x40023800
 800375c:	42470000 	.word	0x42470000
 8003760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ea      	bne.n	8003746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8097 	beq.w	80038ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003782:	4b81      	ldr	r3, [pc, #516]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	4b7d      	ldr	r3, [pc, #500]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b7a      	ldr	r3, [pc, #488]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	4b77      	ldr	r3, [pc, #476]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d118      	bne.n	80037ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ba:	4b74      	ldr	r3, [pc, #464]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a73      	ldr	r2, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fe faa1 	bl	8001d0c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fe fa9d 	bl	8001d0c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e10c      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_OscConfig+0x474>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x2ea>
 80037f4:	4b64      	ldr	r3, [pc, #400]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a63      	ldr	r2, [pc, #396]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	e01c      	b.n	800383c <HAL_RCC_OscConfig+0x324>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x30c>
 800380a:	4b5f      	ldr	r3, [pc, #380]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a5e      	ldr	r2, [pc, #376]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	4b5c      	ldr	r3, [pc, #368]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	4a5b      	ldr	r2, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6713      	str	r3, [r2, #112]	; 0x70
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0x324>
 8003824:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a57      	ldr	r2, [pc, #348]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	4b55      	ldr	r3, [pc, #340]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fa62 	bl	8001d0c <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fa5e 	bl	8001d0c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0cb      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ee      	beq.n	800384c <HAL_RCC_OscConfig+0x334>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003870:	f7fe fa4c 	bl	8001d0c <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fe fa48 	bl	8001d0c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0b5      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ee      	bne.n	8003878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a38      	ldr	r2, [pc, #224]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80a1 	beq.w	80039f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b6:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d05c      	beq.n	800397c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d141      	bne.n	800394e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fe fa1c 	bl	8001d0c <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fe fa18 	bl	8001d0c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e087      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	4b27      	ldr	r3, [pc, #156]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	3b01      	subs	r3, #1
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	491b      	ldr	r1, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe f9f1 	bl	8001d0c <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe f9ed 	bl	8001d0c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e05c      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x416>
 800394c:	e054      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <HAL_RCC_OscConfig+0x478>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe f9da 	bl	8001d0c <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe f9d6 	bl	8001d0c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e045      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x470>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x444>
 800397a:	e03d      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e038      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000
 8003990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x4ec>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d028      	beq.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d121      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d11a      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d111      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d90c      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4934      	ldr	r1, [pc, #208]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fe f908 	bl	8001d0c <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fe f904 	bl	8001d0c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d20c      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5ccb      	ldrb	r3, [r1, r3]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe f868 	bl	8001c84 <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	0800afe4 	.word	0x0800afe4
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b094      	sub	sp, #80	; 0x50
 8003bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
 8003be0:	2300      	movs	r3, #0
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be4:	2300      	movs	r3, #0
 8003be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bec:	4b79      	ldr	r3, [pc, #484]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d00d      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	f200 80e1 	bhi.w	8003dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c06:	e0db      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c0c:	e0db      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0e:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8003c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c12:	e0d8      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c14:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d063      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2a:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	2200      	movs	r2, #0
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
 8003c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c46:	4622      	mov	r2, r4
 8003c48:	462b      	mov	r3, r5
 8003c4a:	f04f 0000 	mov.w	r0, #0
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	0159      	lsls	r1, r3, #5
 8003c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c58:	0150      	lsls	r0, r2, #5
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4621      	mov	r1, r4
 8003c60:	1a51      	subs	r1, r2, r1
 8003c62:	6139      	str	r1, [r7, #16]
 8003c64:	4629      	mov	r1, r5
 8003c66:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c78:	4659      	mov	r1, fp
 8003c7a:	018b      	lsls	r3, r1, #6
 8003c7c:	4651      	mov	r1, sl
 8003c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c82:	4651      	mov	r1, sl
 8003c84:	018a      	lsls	r2, r1, #6
 8003c86:	4651      	mov	r1, sl
 8003c88:	ebb2 0801 	subs.w	r8, r2, r1
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca6:	4690      	mov	r8, r2
 8003ca8:	4699      	mov	r9, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	eb18 0303 	adds.w	r3, r8, r3
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	462b      	mov	r3, r5
 8003cb4:	eb49 0303 	adc.w	r3, r9, r3
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	024b      	lsls	r3, r1, #9
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	024a      	lsls	r2, r1, #9
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cda:	2200      	movs	r2, #0
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ce4:	f7fc ffe0 	bl	8000ca8 <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4613      	mov	r3, r2
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	e058      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf2:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	099b      	lsrs	r3, r3, #6
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	2300      	movs	r3, #0
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	f04f 0000 	mov.w	r0, #0
 8003d14:	f04f 0100 	mov.w	r1, #0
 8003d18:	0159      	lsls	r1, r3, #5
 8003d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d1e:	0150      	lsls	r0, r2, #5
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4641      	mov	r1, r8
 8003d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d44:	ebb2 040a 	subs.w	r4, r2, sl
 8003d48:	eb63 050b 	sbc.w	r5, r3, fp
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	00eb      	lsls	r3, r5, #3
 8003d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d5a:	00e2      	lsls	r2, r4, #3
 8003d5c:	4614      	mov	r4, r2
 8003d5e:	461d      	mov	r5, r3
 8003d60:	4643      	mov	r3, r8
 8003d62:	18e3      	adds	r3, r4, r3
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	464b      	mov	r3, r9
 8003d68:	eb45 0303 	adc.w	r3, r5, r3
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	028b      	lsls	r3, r1, #10
 8003d7e:	4621      	mov	r1, r4
 8003d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d84:	4621      	mov	r1, r4
 8003d86:	028a      	lsls	r2, r1, #10
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8e:	2200      	movs	r2, #0
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	61fa      	str	r2, [r7, #28]
 8003d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d98:	f7fc ff86 	bl	8000ca8 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4613      	mov	r3, r2
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3750      	adds	r7, #80	; 0x50
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000000 	.word	0x20000000

08003df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dfc:	f7ff fff0 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0a9b      	lsrs	r3, r3, #10
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	0800aff4 	.word	0x0800aff4

08003e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e24:	f7ff ffdc 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0b5b      	lsrs	r3, r3, #13
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4903      	ldr	r1, [pc, #12]	; (8003e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	0800aff4 	.word	0x0800aff4

08003e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07b      	b.n	8003f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d009      	beq.n	8003e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	e005      	b.n	8003e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fc0c 	bl	80016b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0104 	and.w	r1, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f003 0210 	and.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_SPI_Transmit+0x22>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e126      	b.n	80041ca <HAL_SPI_Transmit+0x270>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f84:	f7fd fec2 	bl	8001d0c <HAL_GetTick>
 8003f88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f9e:	e10b      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x52>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fb0:	e102      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d10f      	bne.n	800401a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d007      	beq.n	8004038 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004040:	d14b      	bne.n	80040da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Transmit+0xf6>
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13e      	bne.n	80040ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004074:	e02b      	b.n	80040ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d112      	bne.n	80040aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80040a8:	e011      	b.n	80040ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040aa:	f7fd fe2f 	bl	8001d0c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d803      	bhi.n	80040c2 <HAL_SPI_Transmit+0x168>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d102      	bne.n	80040c8 <HAL_SPI_Transmit+0x16e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040cc:	e074      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ce      	bne.n	8004076 <HAL_SPI_Transmit+0x11c>
 80040d8:	e04c      	b.n	8004174 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_Transmit+0x18e>
 80040e2:	8afb      	ldrh	r3, [r7, #22]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d140      	bne.n	800416a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800410e:	e02c      	b.n	800416a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d113      	bne.n	8004146 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	86da      	strh	r2, [r3, #54]	; 0x36
 8004144:	e011      	b.n	800416a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004146:	f7fd fde1 	bl	8001d0c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d803      	bhi.n	800415e <HAL_SPI_Transmit+0x204>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d102      	bne.n	8004164 <HAL_SPI_Transmit+0x20a>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004168:	e026      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1cd      	bne.n	8004110 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f8b3 	bl	80042e4 <SPI_EndRxTxTransaction>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e000      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041e4:	f7fd fd92 	bl	8001d0c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	4413      	add	r3, r2
 80041f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041f4:	f7fd fd8a 	bl	8001d0c <HAL_GetTick>
 80041f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041fa:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	015b      	lsls	r3, r3, #5
 8004200:	0d1b      	lsrs	r3, r3, #20
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420a:	e054      	b.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d050      	beq.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004214:	f7fd fd7a 	bl	8001d0c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	429a      	cmp	r2, r3
 8004222:	d902      	bls.n	800422a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d13d      	bne.n	80042a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004238:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004242:	d111      	bne.n	8004268 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424c:	d004      	beq.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	d107      	bne.n	8004268 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004266:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004270:	d10f      	bne.n	8004292 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e017      	b.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	bf0c      	ite	eq
 80042c6:	2301      	moveq	r3, #1
 80042c8:	2300      	movne	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d19b      	bne.n	800420c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000000 	.word	0x20000000

080042e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <SPI_EndRxTxTransaction+0x7c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <SPI_EndRxTxTransaction+0x80>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	0d5b      	lsrs	r3, r3, #21
 80042fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430e:	d112      	bne.n	8004336 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff ff5a 	bl	80041d4 <SPI_WaitFlagStateUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d016      	beq.n	8004354 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e00f      	b.n	8004356 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3b01      	subs	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d0f2      	beq.n	8004336 <SPI_EndRxTxTransaction+0x52>
 8004350:	e000      	b.n	8004354 <SPI_EndRxTxTransaction+0x70>
        break;
 8004352:	bf00      	nop
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000000 	.word	0x20000000
 8004364:	165e9f81 	.word	0x165e9f81

08004368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e03f      	b.n	80043fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd f9fa 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fd7b 	bl	8004ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b08a      	sub	sp, #40	; 0x28
 8004406:	af02      	add	r7, sp, #8
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b20      	cmp	r3, #32
 8004420:	d17c      	bne.n	800451c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_Transmit+0x2c>
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e075      	b.n	800451e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UART_Transmit+0x3e>
 800443c:	2302      	movs	r3, #2
 800443e:	e06e      	b.n	800451e <HAL_UART_Transmit+0x11c>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2221      	movs	r2, #33	; 0x21
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004456:	f7fd fc59 	bl	8001d0c <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d108      	bne.n	8004484 <HAL_UART_Transmit+0x82>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e003      	b.n	800448c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004494:	e02a      	b.n	80044ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2200      	movs	r2, #0
 800449e:	2180      	movs	r1, #128	; 0x80
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 faf9 	bl	8004a98 <UART_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e036      	b.n	800451e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3302      	adds	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e007      	b.n	80044de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1cf      	bne.n	8004496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2140      	movs	r1, #64	; 0x40
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fac9 	bl	8004a98 <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0ba      	sub	sp, #232	; 0xe8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_UART_IRQHandler+0x66>
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fbd3 	bl	8004d32 <UART_Receive_IT>
      return;
 800458c:	e256      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800458e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80de 	beq.w	8004754 <HAL_UART_IRQHandler+0x22c>
 8004598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80d1 	beq.w	8004754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_UART_IRQHandler+0xd2>
 80045e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f043 0202 	orr.w	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xf6>
 8004606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f043 0204 	orr.w	r2, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d011      	beq.n	800464e <HAL_UART_IRQHandler+0x126>
 800462a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0208 	orr.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 81ed 	beq.w	8004a32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_UART_IRQHandler+0x14e>
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fb5e 	bl	8004d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_UART_IRQHandler+0x17a>
 800469a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04f      	beq.n	8004742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa66 	bl	8004b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d141      	bne.n	800473a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1d9      	bne.n	80046b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	2b00      	cmp	r3, #0
 8004708:	d013      	beq.n	8004732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	4a7d      	ldr	r2, [pc, #500]	; (8004904 <HAL_UART_IRQHandler+0x3dc>)
 8004710:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fcb6 	bl	8002088 <HAL_DMA_Abort_IT>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800472c:	4610      	mov	r0, r2
 800472e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e00e      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f99a 	bl	8004a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00a      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f996 	bl	8004a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e006      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f992 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800474e:	e170      	b.n	8004a32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	bf00      	nop
    return;
 8004752:	e16e      	b.n	8004a32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 814a 	bne.w	80049f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8143 	beq.w	80049f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 813c 	beq.w	80049f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	f040 80b4 	bne.w	8004908 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8140 	beq.w	8004a36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047be:	429a      	cmp	r2, r3
 80047c0:	f080 8139 	bcs.w	8004a36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d6:	f000 8088 	beq.w	80048ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1d9      	bne.n	80047da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800484a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800484e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800485c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e1      	bne.n	8004826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3314      	adds	r3, #20
 8004868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800488c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e3      	bne.n	8004862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	f023 0310 	bic.w	r3, r3, #16
 80048be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e3      	bne.n	80048a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd fb5f 	bl	8001fa8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f8c0 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004900:	e099      	b.n	8004a36 <HAL_UART_IRQHandler+0x50e>
 8004902:	bf00      	nop
 8004904:	08004c3b 	.word	0x08004c3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004910:	b29b      	uxth	r3, r3
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 808b 	beq.w	8004a3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8086 	beq.w	8004a3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800493e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004952:	647a      	str	r2, [r7, #68]	; 0x44
 8004954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e3      	bne.n	800492e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	623b      	str	r3, [r7, #32]
   return(result);
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800498a:	633a      	str	r2, [r7, #48]	; 0x30
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e3      	bne.n	8004966 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0310 	bic.w	r3, r3, #16
 80049c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049d0:	61fa      	str	r2, [r7, #28]
 80049d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	617b      	str	r3, [r7, #20]
   return(result);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e3      	bne.n	80049ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f848 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049f0:	e023      	b.n	8004a3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_UART_IRQHandler+0x4ea>
 80049fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f929 	bl	8004c62 <UART_Transmit_IT>
    return;
 8004a10:	e014      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00e      	beq.n	8004a3c <HAL_UART_IRQHandler+0x514>
 8004a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f969 	bl	8004d02 <UART_EndTransmit_IT>
    return;
 8004a30:	e004      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
    return;
 8004a32:	bf00      	nop
 8004a34:	e002      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
      return;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
      return;
 8004a3a:	bf00      	nop
  }
}
 8004a3c:	37e8      	adds	r7, #232	; 0xe8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop

08004a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b090      	sub	sp, #64	; 0x40
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa8:	e050      	b.n	8004b4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d04c      	beq.n	8004b4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab8:	f7fd f928 	bl	8001d0c <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d241      	bcs.n	8004b4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ae8:	637a      	str	r2, [r7, #52]	; 0x34
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3314      	adds	r3, #20
 8004b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b1c:	623a      	str	r2, [r7, #32]
 8004b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	69f9      	ldr	r1, [r7, #28]
 8004b22:	6a3a      	ldr	r2, [r7, #32]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e00f      	b.n	8004b6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4013      	ands	r3, r2
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d09f      	beq.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3740      	adds	r7, #64	; 0x40
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b095      	sub	sp, #84	; 0x54
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b9c:	643a      	str	r2, [r7, #64]	; 0x40
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3314      	adds	r3, #20
 8004bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d119      	bne.n	8004c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f023 0310 	bic.w	r3, r3, #16
 8004c02:	647b      	str	r3, [r7, #68]	; 0x44
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c0c:	61ba      	str	r2, [r7, #24]
 8004c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c2e:	bf00      	nop
 8004c30:	3754      	adds	r7, #84	; 0x54
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff ff09 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b21      	cmp	r3, #33	; 0x21
 8004c74:	d13e      	bne.n	8004cf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d114      	bne.n	8004caa <UART_Transmit_IT+0x48>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d110      	bne.n	8004caa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	1c9a      	adds	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	621a      	str	r2, [r3, #32]
 8004ca8:	e008      	b.n	8004cbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	1c59      	adds	r1, r3, #1
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6211      	str	r1, [r2, #32]
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff fe8e 	bl	8004a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b08c      	sub	sp, #48	; 0x30
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b22      	cmp	r3, #34	; 0x22
 8004d44:	f040 80ab 	bne.w	8004e9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d50:	d117      	bne.n	8004d82 <UART_Receive_IT+0x50>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d113      	bne.n	8004d82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d80:	e026      	b.n	8004dd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d94:	d007      	beq.n	8004da6 <UART_Receive_IT+0x74>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <UART_Receive_IT+0x82>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e008      	b.n	8004dc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d15a      	bne.n	8004e9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0220 	bic.w	r2, r2, #32
 8004df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d135      	bne.n	8004e90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f023 0310 	bic.w	r3, r3, #16
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	623a      	str	r2, [r7, #32]
 8004e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	69f9      	ldr	r1, [r7, #28]
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e5      	bne.n	8004e2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d10a      	bne.n	8004e82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e86:	4619      	mov	r1, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff fdf9 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
 8004e8e:	e002      	b.n	8004e96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fde1 	bl	8004a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e002      	b.n	8004ea0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e000      	b.n	8004ea0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e9e:	2302      	movs	r3, #2
  }
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eac:	b0c0      	sub	sp, #256	; 0x100
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	68d9      	ldr	r1, [r3, #12]
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	ea40 0301 	orr.w	r3, r0, r1
 8004ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f00:	f021 010c 	bic.w	r1, r1, #12
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f22:	6999      	ldr	r1, [r3, #24]
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	ea40 0301 	orr.w	r3, r0, r1
 8004f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b8f      	ldr	r3, [pc, #572]	; (8005174 <UART_SetConfig+0x2cc>)
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d005      	beq.n	8004f48 <UART_SetConfig+0xa0>
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b8d      	ldr	r3, [pc, #564]	; (8005178 <UART_SetConfig+0x2d0>)
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d104      	bne.n	8004f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7fe ff6a 	bl	8003e20 <HAL_RCC_GetPCLK2Freq>
 8004f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f50:	e003      	b.n	8004f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f52:	f7fe ff51 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004f56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f64:	f040 810c 	bne.w	8005180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	1891      	adds	r1, r2, r2
 8004f80:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f82:	415b      	adcs	r3, r3
 8004f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	eb12 0801 	adds.w	r8, r2, r1
 8004f90:	4629      	mov	r1, r5
 8004f92:	eb43 0901 	adc.w	r9, r3, r1
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004faa:	4690      	mov	r8, r2
 8004fac:	4699      	mov	r9, r3
 8004fae:	4623      	mov	r3, r4
 8004fb0:	eb18 0303 	adds.w	r3, r8, r3
 8004fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fb8:	462b      	mov	r3, r5
 8004fba:	eb49 0303 	adc.w	r3, r9, r3
 8004fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	18db      	adds	r3, r3, r3
 8004fda:	653b      	str	r3, [r7, #80]	; 0x50
 8004fdc:	4613      	mov	r3, r2
 8004fde:	eb42 0303 	adc.w	r3, r2, r3
 8004fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fec:	f7fb fe5c 	bl	8000ca8 <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4b61      	ldr	r3, [pc, #388]	; (800517c <UART_SetConfig+0x2d4>)
 8004ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	011c      	lsls	r4, r3, #4
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005008:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800500c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	1891      	adds	r1, r2, r2
 8005016:	64b9      	str	r1, [r7, #72]	; 0x48
 8005018:	415b      	adcs	r3, r3
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800501c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005020:	4641      	mov	r1, r8
 8005022:	eb12 0a01 	adds.w	sl, r2, r1
 8005026:	4649      	mov	r1, r9
 8005028:	eb43 0b01 	adc.w	fp, r3, r1
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800503c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005040:	4692      	mov	sl, r2
 8005042:	469b      	mov	fp, r3
 8005044:	4643      	mov	r3, r8
 8005046:	eb1a 0303 	adds.w	r3, sl, r3
 800504a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800504e:	464b      	mov	r3, r9
 8005050:	eb4b 0303 	adc.w	r3, fp, r3
 8005054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005064:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800506c:	460b      	mov	r3, r1
 800506e:	18db      	adds	r3, r3, r3
 8005070:	643b      	str	r3, [r7, #64]	; 0x40
 8005072:	4613      	mov	r3, r2
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	647b      	str	r3, [r7, #68]	; 0x44
 800507a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800507e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005082:	f7fb fe11 	bl	8000ca8 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4611      	mov	r1, r2
 800508c:	4b3b      	ldr	r3, [pc, #236]	; (800517c <UART_SetConfig+0x2d4>)
 800508e:	fba3 2301 	umull	r2, r3, r3, r1
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	2264      	movs	r2, #100	; 0x64
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	1acb      	subs	r3, r1, r3
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050a2:	4b36      	ldr	r3, [pc, #216]	; (800517c <UART_SetConfig+0x2d4>)
 80050a4:	fba3 2302 	umull	r2, r3, r3, r2
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050b0:	441c      	add	r4, r3
 80050b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	1891      	adds	r1, r2, r2
 80050ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80050cc:	415b      	adcs	r3, r3
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050d4:	4641      	mov	r1, r8
 80050d6:	1851      	adds	r1, r2, r1
 80050d8:	6339      	str	r1, [r7, #48]	; 0x30
 80050da:	4649      	mov	r1, r9
 80050dc:	414b      	adcs	r3, r1
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050ec:	4659      	mov	r1, fp
 80050ee:	00cb      	lsls	r3, r1, #3
 80050f0:	4651      	mov	r1, sl
 80050f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f6:	4651      	mov	r1, sl
 80050f8:	00ca      	lsls	r2, r1, #3
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	4642      	mov	r2, r8
 8005102:	189b      	adds	r3, r3, r2
 8005104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005108:	464b      	mov	r3, r9
 800510a:	460a      	mov	r2, r1
 800510c:	eb42 0303 	adc.w	r3, r2, r3
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005120:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005128:	460b      	mov	r3, r1
 800512a:	18db      	adds	r3, r3, r3
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
 800512e:	4613      	mov	r3, r2
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800513a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800513e:	f7fb fdb3 	bl	8000ca8 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4b0d      	ldr	r3, [pc, #52]	; (800517c <UART_SetConfig+0x2d4>)
 8005148:	fba3 1302 	umull	r1, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	2164      	movs	r1, #100	; 0x64
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	3332      	adds	r3, #50	; 0x32
 800515a:	4a08      	ldr	r2, [pc, #32]	; (800517c <UART_SetConfig+0x2d4>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f003 0207 	and.w	r2, r3, #7
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4422      	add	r2, r4
 800516e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005170:	e105      	b.n	800537e <UART_SetConfig+0x4d6>
 8005172:	bf00      	nop
 8005174:	40011000 	.word	0x40011000
 8005178:	40011400 	.word	0x40011400
 800517c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005184:	2200      	movs	r2, #0
 8005186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800518a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800518e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005192:	4642      	mov	r2, r8
 8005194:	464b      	mov	r3, r9
 8005196:	1891      	adds	r1, r2, r2
 8005198:	6239      	str	r1, [r7, #32]
 800519a:	415b      	adcs	r3, r3
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051a2:	4641      	mov	r1, r8
 80051a4:	1854      	adds	r4, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb43 0501 	adc.w	r5, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	00eb      	lsls	r3, r5, #3
 80051b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ba:	00e2      	lsls	r2, r4, #3
 80051bc:	4614      	mov	r4, r2
 80051be:	461d      	mov	r5, r3
 80051c0:	4643      	mov	r3, r8
 80051c2:	18e3      	adds	r3, r4, r3
 80051c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051c8:	464b      	mov	r3, r9
 80051ca:	eb45 0303 	adc.w	r3, r5, r3
 80051ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051ee:	4629      	mov	r1, r5
 80051f0:	008b      	lsls	r3, r1, #2
 80051f2:	4621      	mov	r1, r4
 80051f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f8:	4621      	mov	r1, r4
 80051fa:	008a      	lsls	r2, r1, #2
 80051fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005200:	f7fb fd52 	bl	8000ca8 <__aeabi_uldivmod>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4b60      	ldr	r3, [pc, #384]	; (800538c <UART_SetConfig+0x4e4>)
 800520a:	fba3 2302 	umull	r2, r3, r3, r2
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	011c      	lsls	r4, r3, #4
 8005212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800521c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	1891      	adds	r1, r2, r2
 800522a:	61b9      	str	r1, [r7, #24]
 800522c:	415b      	adcs	r3, r3
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005234:	4641      	mov	r1, r8
 8005236:	1851      	adds	r1, r2, r1
 8005238:	6139      	str	r1, [r7, #16]
 800523a:	4649      	mov	r1, r9
 800523c:	414b      	adcs	r3, r1
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800524c:	4659      	mov	r1, fp
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4651      	mov	r1, sl
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4642      	mov	r2, r8
 8005262:	189b      	adds	r3, r3, r2
 8005264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005268:	464b      	mov	r3, r9
 800526a:	460a      	mov	r2, r1
 800526c:	eb42 0303 	adc.w	r3, r2, r3
 8005270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	67bb      	str	r3, [r7, #120]	; 0x78
 800527e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800528c:	4649      	mov	r1, r9
 800528e:	008b      	lsls	r3, r1, #2
 8005290:	4641      	mov	r1, r8
 8005292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005296:	4641      	mov	r1, r8
 8005298:	008a      	lsls	r2, r1, #2
 800529a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800529e:	f7fb fd03 	bl	8000ca8 <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4b39      	ldr	r3, [pc, #228]	; (800538c <UART_SetConfig+0x4e4>)
 80052a8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	2164      	movs	r1, #100	; 0x64
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	3332      	adds	r3, #50	; 0x32
 80052ba:	4a34      	ldr	r2, [pc, #208]	; (800538c <UART_SetConfig+0x4e4>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c6:	441c      	add	r4, r3
 80052c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052cc:	2200      	movs	r2, #0
 80052ce:	673b      	str	r3, [r7, #112]	; 0x70
 80052d0:	677a      	str	r2, [r7, #116]	; 0x74
 80052d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052d6:	4642      	mov	r2, r8
 80052d8:	464b      	mov	r3, r9
 80052da:	1891      	adds	r1, r2, r2
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	415b      	adcs	r3, r3
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e6:	4641      	mov	r1, r8
 80052e8:	1851      	adds	r1, r2, r1
 80052ea:	6039      	str	r1, [r7, #0]
 80052ec:	4649      	mov	r1, r9
 80052ee:	414b      	adcs	r3, r1
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052fe:	4659      	mov	r1, fp
 8005300:	00cb      	lsls	r3, r1, #3
 8005302:	4651      	mov	r1, sl
 8005304:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005308:	4651      	mov	r1, sl
 800530a:	00ca      	lsls	r2, r1, #3
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	4603      	mov	r3, r0
 8005312:	4642      	mov	r2, r8
 8005314:	189b      	adds	r3, r3, r2
 8005316:	66bb      	str	r3, [r7, #104]	; 0x68
 8005318:	464b      	mov	r3, r9
 800531a:	460a      	mov	r2, r1
 800531c:	eb42 0303 	adc.w	r3, r2, r3
 8005320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	663b      	str	r3, [r7, #96]	; 0x60
 800532c:	667a      	str	r2, [r7, #100]	; 0x64
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800533a:	4649      	mov	r1, r9
 800533c:	008b      	lsls	r3, r1, #2
 800533e:	4641      	mov	r1, r8
 8005340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005344:	4641      	mov	r1, r8
 8005346:	008a      	lsls	r2, r1, #2
 8005348:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800534c:	f7fb fcac 	bl	8000ca8 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4b0d      	ldr	r3, [pc, #52]	; (800538c <UART_SetConfig+0x4e4>)
 8005356:	fba3 1302 	umull	r1, r3, r3, r2
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	2164      	movs	r1, #100	; 0x64
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	3332      	adds	r3, #50	; 0x32
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <UART_SetConfig+0x4e4>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	f003 020f 	and.w	r2, r3, #15
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4422      	add	r2, r4
 800537c:	609a      	str	r2, [r3, #8]
}
 800537e:	bf00      	nop
 8005380:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005384:	46bd      	mov	sp, r7
 8005386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538a:	bf00      	nop
 800538c:	51eb851f 	.word	0x51eb851f

08005390 <singleByteWrite>:
extern I2C_HandleTypeDef hi2c1;
uint8_t data[10];
extern float readings[3];

void singleByteWrite(uint16_t address,uint16_t  data1)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af02      	add	r7, sp, #8
 8005396:	4603      	mov	r3, r0
 8005398:	460a      	mov	r2, r1
 800539a:	80fb      	strh	r3, [r7, #6]
 800539c:	4613      	mov	r3, r2
 800539e:	80bb      	strh	r3, [r7, #4]
	data[0]=address;
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <singleByteWrite+0x38>)
 80053a6:	701a      	strb	r2, [r3, #0]
	data[1]=data1;
 80053a8:	88bb      	ldrh	r3, [r7, #4]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <singleByteWrite+0x38>)
 80053ae:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&hi2c1,ACCEL_ADDRESS<<1,data,2,100);
 80053b0:	2364      	movs	r3, #100	; 0x64
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2302      	movs	r3, #2
 80053b6:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <singleByteWrite+0x38>)
 80053b8:	21a6      	movs	r1, #166	; 0xa6
 80053ba:	4804      	ldr	r0, [pc, #16]	; (80053cc <singleByteWrite+0x3c>)
 80053bc:	f7fd f990 	bl	80026e0 <HAL_I2C_Master_Transmit>
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	200003dc 	.word	0x200003dc
 80053cc:	200001fc 	.word	0x200001fc

080053d0 <multiDataRead>:


void multiDataRead(int16_t* data_X, int16_t* data_Y, int16_t* data_Z)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
	data[0]=DATAX0;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <multiDataRead+0x7c>)
 80053de:	2232      	movs	r2, #50	; 0x32
 80053e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 80053e2:	2332      	movs	r3, #50	; 0x32
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2301      	movs	r3, #1
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <multiDataRead+0x7c>)
 80053ea:	21a6      	movs	r1, #166	; 0xa6
 80053ec:	4818      	ldr	r0, [pc, #96]	; (8005450 <multiDataRead+0x80>)
 80053ee:	f7fd f977 	bl	80026e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ACCEL_ADDRESS<<1, data, 6, 50);
 80053f2:	2332      	movs	r3, #50	; 0x32
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2306      	movs	r3, #6
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <multiDataRead+0x7c>)
 80053fa:	21a6      	movs	r1, #166	; 0xa6
 80053fc:	4814      	ldr	r0, [pc, #80]	; (8005450 <multiDataRead+0x80>)
 80053fe:	f7fd fa6d 	bl	80028dc <HAL_I2C_Master_Receive>

	*data_X =(data[0] | (data[1] << 8));
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <multiDataRead+0x7c>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	b21a      	sxth	r2, r3
 8005408:	4b10      	ldr	r3, [pc, #64]	; (800544c <multiDataRead+0x7c>)
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	b21b      	sxth	r3, r3
 8005410:	4313      	orrs	r3, r2
 8005412:	b21a      	sxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	801a      	strh	r2, [r3, #0]
	*data_Y =(data[2] | (data[3] << 8));
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <multiDataRead+0x7c>)
 800541a:	789b      	ldrb	r3, [r3, #2]
 800541c:	b21a      	sxth	r2, r3
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <multiDataRead+0x7c>)
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	b21b      	sxth	r3, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	b21a      	sxth	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	801a      	strh	r2, [r3, #0]
	*data_Z =(data[4] | (data[5] << 8));
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <multiDataRead+0x7c>)
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	b21a      	sxth	r2, r3
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <multiDataRead+0x7c>)
 8005436:	795b      	ldrb	r3, [r3, #5]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	b21b      	sxth	r3, r3
 800543c:	4313      	orrs	r3, r2
 800543e:	b21a      	sxth	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	801a      	strh	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	200003dc 	.word	0x200003dc
 8005450:	200001fc 	.word	0x200001fc

08005454 <singleByteRead>:


uint16_t singleByteRead(uint16_t address)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af02      	add	r7, sp, #8
 800545a:	4603      	mov	r3, r0
 800545c:	80fb      	strh	r3, [r7, #6]
	data[0] = address;
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <singleByteRead+0x40>)
 8005464:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 8005466:	2332      	movs	r3, #50	; 0x32
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2301      	movs	r3, #1
 800546c:	4a09      	ldr	r2, [pc, #36]	; (8005494 <singleByteRead+0x40>)
 800546e:	21a6      	movs	r1, #166	; 0xa6
 8005470:	4809      	ldr	r0, [pc, #36]	; (8005498 <singleByteRead+0x44>)
 8005472:	f7fd f935 	bl	80026e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 8005476:	2332      	movs	r3, #50	; 0x32
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	2301      	movs	r3, #1
 800547c:	4a05      	ldr	r2, [pc, #20]	; (8005494 <singleByteRead+0x40>)
 800547e:	21a6      	movs	r1, #166	; 0xa6
 8005480:	4805      	ldr	r0, [pc, #20]	; (8005498 <singleByteRead+0x44>)
 8005482:	f7fd fa2b 	bl	80028dc <HAL_I2C_Master_Receive>
	return data[0];
 8005486:	4b03      	ldr	r3, [pc, #12]	; (8005494 <singleByteRead+0x40>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	200003dc 	.word	0x200003dc
 8005498:	200001fc 	.word	0x200001fc

0800549c <ADXL345Init>:

int8_t ADXL345Init()
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
	char id = 0x00;
 80054a2:	2300      	movs	r3, #0
 80054a4:	71fb      	strb	r3, [r7, #7]
		// Go into standby mode to configure the device.
		singleByteWrite(0x2D, 0x00);
 80054a6:	2100      	movs	r1, #0
 80054a8:	202d      	movs	r0, #45	; 0x2d
 80054aa:	f7ff ff71 	bl	8005390 <singleByteWrite>
		id = singleByteRead(0x00);
 80054ae:	2000      	movs	r0, #0
 80054b0:	f7ff ffd0 	bl	8005454 <singleByteRead>
 80054b4:	4603      	mov	r3, r0
 80054b6:	71fb      	strb	r3, [r7, #7]
		if (id != 0xE5)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	2be5      	cmp	r3, #229	; 0xe5
 80054bc:	d004      	beq.n	80054c8 <ADXL345Init+0x2c>
		{
			printf("ERROR\n");
 80054be:	480e      	ldr	r0, [pc, #56]	; (80054f8 <ADXL345Init+0x5c>)
 80054c0:	f001 ff78 	bl	80073b4 <puts>
			return ACCEL_ERROR;
 80054c4:	2302      	movs	r3, #2
 80054c6:	e013      	b.n	80054f0 <ADXL345Init+0x54>
		}
		else
		{
			printf("ENABLE\n");
 80054c8:	480c      	ldr	r0, [pc, #48]	; (80054fc <ADXL345Init+0x60>)
 80054ca:	f001 ff73 	bl	80073b4 <puts>
			singleByteWrite(DATA_FORMAT, 0x08);       // Full resolution, +/-2g, 4mg/LSB, right justified
 80054ce:	2108      	movs	r1, #8
 80054d0:	2031      	movs	r0, #49	; 0x31
 80054d2:	f7ff ff5d 	bl	8005390 <singleByteWrite>
			singleByteWrite(BW_RATE, 0x0A);           // Set 100 Hz data rate
 80054d6:	210a      	movs	r1, #10
 80054d8:	202c      	movs	r0, #44	; 0x2c
 80054da:	f7ff ff59 	bl	8005390 <singleByteWrite>
			singleByteWrite(FIFO_CTL, 0x80);          // stream mode
 80054de:	2180      	movs	r1, #128	; 0x80
 80054e0:	2038      	movs	r0, #56	; 0x38
 80054e2:	f7ff ff55 	bl	8005390 <singleByteWrite>
			singleByteWrite(POWER_CTL, 0x08);         // POWER_CTL reg: measurement mode
 80054e6:	2108      	movs	r1, #8
 80054e8:	202d      	movs	r0, #45	; 0x2d
 80054ea:	f7ff ff51 	bl	8005390 <singleByteWrite>
			return 0x00;
 80054ee:	2300      	movs	r3, #0
		}
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	0800afd4 	.word	0x0800afd4
 80054fc:	0800afdc 	.word	0x0800afdc

08005500 <accelAverage>:

void accelAverage()
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
	int16_t i, sx, sy, sz, xx, yy, zz;

		// sum
		sx = sy = sz = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	813b      	strh	r3, [r7, #8]
 800550a:	893b      	ldrh	r3, [r7, #8]
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	897b      	ldrh	r3, [r7, #10]
 8005510:	81bb      	strh	r3, [r7, #12]
		// average accelerometer reading over last 16 samples
		for (i=0; i<16; i++)
 8005512:	2300      	movs	r3, #0
 8005514:	81fb      	strh	r3, [r7, #14]
 8005516:	e020      	b.n	800555a <accelAverage+0x5a>
		{
			multiDataRead(&xx, &yy, &zz);
 8005518:	1cba      	adds	r2, r7, #2
 800551a:	1d39      	adds	r1, r7, #4
 800551c:	1dbb      	adds	r3, r7, #6
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff ff56 	bl	80053d0 <multiDataRead>
			sx += xx;
 8005524:	89ba      	ldrh	r2, [r7, #12]
 8005526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552a:	b29b      	uxth	r3, r3
 800552c:	4413      	add	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	81bb      	strh	r3, [r7, #12]
			sy += yy;
 8005532:	897a      	ldrh	r2, [r7, #10]
 8005534:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005538:	b29b      	uxth	r3, r3
 800553a:	4413      	add	r3, r2
 800553c:	b29b      	uxth	r3, r3
 800553e:	817b      	strh	r3, [r7, #10]
			sz += zz;
 8005540:	893a      	ldrh	r2, [r7, #8]
 8005542:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005546:	b29b      	uxth	r3, r3
 8005548:	4413      	add	r3, r2
 800554a:	b29b      	uxth	r3, r3
 800554c:	813b      	strh	r3, [r7, #8]
		for (i=0; i<16; i++)
 800554e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005552:	b29b      	uxth	r3, r3
 8005554:	3301      	adds	r3, #1
 8005556:	b29b      	uxth	r3, r3
 8005558:	81fb      	strh	r3, [r7, #14]
 800555a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800555e:	2b0f      	cmp	r3, #15
 8005560:	ddda      	ble.n	8005518 <accelAverage+0x18>
		}
		// average
		readings[0] = sx >> 4;
 8005562:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005566:	111b      	asrs	r3, r3, #4
 8005568:	b21b      	sxth	r3, r3
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005572:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <accelAverage+0xac>)
 8005574:	edc3 7a00 	vstr	s15, [r3]
		readings[1] = sy >> 4;
 8005578:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800557c:	111b      	asrs	r3, r3, #4
 800557e:	b21b      	sxth	r3, r3
 8005580:	ee07 3a90 	vmov	s15, r3
 8005584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <accelAverage+0xac>)
 800558a:	edc3 7a01 	vstr	s15, [r3, #4]
		readings[2] = sz >> 4;
 800558e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005592:	111b      	asrs	r3, r3, #4
 8005594:	b21b      	sxth	r3, r3
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559e:	4b03      	ldr	r3, [pc, #12]	; (80055ac <accelAverage+0xac>)
 80055a0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000334 	.word	0x20000334

080055b0 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	7c1b      	ldrb	r3, [r3, #16]
 80055be:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 ffe0 	bl	80065a4 <memset>
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
 80055f8:	4613      	mov	r3, r2
 80055fa:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	7c1b      	ldrb	r3, [r3, #16]
 8005602:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	b29b      	uxth	r3, r3
 8005612:	89ba      	ldrh	r2, [r7, #12]
 8005614:	fb12 f303 	smulbb	r3, r2, r3
 8005618:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800561a:	89bb      	ldrh	r3, [r7, #12]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8005620:	89bb      	ldrh	r3, [r7, #12]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8005628:	7bf9      	ldrb	r1, [r7, #15]
 800562a:	78ba      	ldrb	r2, [r7, #2]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	460b      	mov	r3, r1
 8005632:	2100      	movs	r1, #0
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 febc 	bl	80063b2 <u8x8_DrawTile>
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005654:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800565c:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	7c5b      	ldrb	r3, [r3, #17]
 8005664:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8005666:	7bba      	ldrb	r2, [r7, #14]
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ffbd 	bl	80055ec <u8g2_send_tile_row>
    src_row++;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	3301      	adds	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8005678:	7bbb      	ldrb	r3, [r7, #14]
 800567a:	3301      	adds	r3, #1
 800567c:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800567e:	7bfa      	ldrb	r2, [r7, #15]
 8005680:	7b7b      	ldrb	r3, [r7, #13]
 8005682:	429a      	cmp	r2, r3
 8005684:	d203      	bcs.n	800568e <u8g2_send_buffer+0x4c>
 8005686:	7bba      	ldrb	r2, [r7, #14]
 8005688:	7b3b      	ldrb	r3, [r7, #12]
 800568a:	429a      	cmp	r2, r3
 800568c:	d3eb      	bcc.n	8005666 <u8g2_send_buffer+0x24>
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff69 	bl	80055b0 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80056de:	2100      	movs	r1, #0
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ffd8 	bl	8005696 <u8g2_SetBufferCurrTileRow>
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ffa3 	bl	8005642 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005702:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	4413      	add	r3, r2
 800570e:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	7c5b      	ldrb	r3, [r3, #17]
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	429a      	cmp	r2, r3
 800571a:	d304      	bcc.n	8005726 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fe99 	bl	8006454 <u8x8_RefreshDisplay>
    return 0;
 8005722:	2300      	movs	r3, #0
 8005724:	e00d      	b.n	8005742 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ff3d 	bl	80055b0 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff ffab 	bl	8005696 <u8g2_SetBufferCurrTileRow>
  return 1;
 8005740:	2301      	movs	r3, #1
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2208      	movs	r2, #8
 8005758:	701a      	strb	r2, [r3, #0]
  return buf;
 800575a:	4b03      	ldr	r3, [pc, #12]	; (8005768 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	200003e8 	.word	0x200003e8

0800576c <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a0b      	ldr	r2, [pc, #44]	; (80057b0 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8005782:	490c      	ldr	r1, [pc, #48]	; (80057b4 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fec5 	bl	8006514 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800578a:	f107 0313 	add.w	r3, r7, #19
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff ffdc 	bl	800574c <u8g2_m_16_8_f>
 8005794:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8005796:	7cfa      	ldrb	r2, [r7, #19]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800579e:	6979      	ldr	r1, [r7, #20]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fa71 	bl	8005c88 <u8g2_SetupBuffer>
}
 80057a6:	bf00      	nop
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	080060d5 	.word	0x080060d5
 80057b4:	080062ad 	.word	0x080062ad
 80057b8:	08005b0b 	.word	0x08005b0b

080057bc <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  return 0;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <u8g2_SetFontPosBaseline+0x1c>)
 80057e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	080057bd 	.word	0x080057bd

080057f4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	4611      	mov	r1, r2
 8005800:	461a      	mov	r2, r3
 8005802:	460b      	mov	r3, r1
 8005804:	80fb      	strh	r3, [r7, #6]
 8005806:	4613      	mov	r3, r2
 8005808:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8005810:	8afb      	ldrh	r3, [r7, #22]
 8005812:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	881a      	ldrh	r2, [r3, #0]
 8005818:	8abb      	ldrh	r3, [r7, #20]
 800581a:	4413      	add	r3, r2
 800581c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800581e:	8afa      	ldrh	r2, [r7, #22]
 8005820:	8abb      	ldrh	r3, [r7, #20]
 8005822:	429a      	cmp	r2, r3
 8005824:	d90b      	bls.n	800583e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8005826:	8afa      	ldrh	r2, [r7, #22]
 8005828:	88bb      	ldrh	r3, [r7, #4]
 800582a:	429a      	cmp	r2, r3
 800582c:	d205      	bcs.n	800583a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800582e:	88bb      	ldrh	r3, [r7, #4]
 8005830:	82bb      	strh	r3, [r7, #20]
      b--;
 8005832:	8abb      	ldrh	r3, [r7, #20]
 8005834:	3b01      	subs	r3, #1
 8005836:	82bb      	strh	r3, [r7, #20]
 8005838:	e001      	b.n	800583e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800583e:	8afa      	ldrh	r2, [r7, #22]
 8005840:	88bb      	ldrh	r3, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d301      	bcc.n	800584a <u8g2_clip_intersection2+0x56>
    return 0;
 8005846:	2300      	movs	r3, #0
 8005848:	e01c      	b.n	8005884 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800584a:	8aba      	ldrh	r2, [r7, #20]
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	429a      	cmp	r2, r3
 8005850:	d801      	bhi.n	8005856 <u8g2_clip_intersection2+0x62>
    return 0;
 8005852:	2300      	movs	r3, #0
 8005854:	e016      	b.n	8005884 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8005856:	8afa      	ldrh	r2, [r7, #22]
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	429a      	cmp	r2, r3
 800585c:	d201      	bcs.n	8005862 <u8g2_clip_intersection2+0x6e>
    a = c;
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8005862:	8aba      	ldrh	r2, [r7, #20]
 8005864:	88bb      	ldrh	r3, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d901      	bls.n	800586e <u8g2_clip_intersection2+0x7a>
    b = d;
 800586a:	88bb      	ldrh	r3, [r7, #4]
 800586c:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8afa      	ldrh	r2, [r7, #22]
 8005872:	801a      	strh	r2, [r3, #0]
  b -= a;
 8005874:	8aba      	ldrh	r2, [r7, #20]
 8005876:	8afb      	ldrh	r3, [r7, #22]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	8aba      	ldrh	r2, [r7, #20]
 8005880:	801a      	strh	r2, [r3, #0]
  return 1;
 8005882:	2301      	movs	r3, #1
}
 8005884:	4618      	mov	r0, r3
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b087      	sub	sp, #28
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	461a      	mov	r2, r3
 800589e:	4603      	mov	r3, r0
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	460b      	mov	r3, r1
 80058a4:	813b      	strh	r3, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	893a      	ldrh	r2, [r7, #8]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80058b8:	88f8      	ldrh	r0, [r7, #6]
 80058ba:	893a      	ldrh	r2, [r7, #8]
 80058bc:	8979      	ldrh	r1, [r7, #10]
 80058be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4603      	mov	r3, r0
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	47a0      	blx	r4
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd90      	pop	{r4, r7, pc}

080058d2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80058d2:	b590      	push	{r4, r7, lr}
 80058d4:	b087      	sub	sp, #28
 80058d6:	af02      	add	r7, sp, #8
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	4608      	mov	r0, r1
 80058dc:	4611      	mov	r1, r2
 80058de:	461a      	mov	r2, r3
 80058e0:	4603      	mov	r3, r0
 80058e2:	817b      	strh	r3, [r7, #10]
 80058e4:	460b      	mov	r3, r1
 80058e6:	813b      	strh	r3, [r7, #8]
 80058e8:	4613      	mov	r3, r2
 80058ea:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d075      	beq.n	80059e2 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d072      	beq.n	80059e2 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d91a      	bls.n	8005938 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8005902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d109      	bne.n	800591e <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800590a:	897a      	ldrh	r2, [r7, #10]
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	b29b      	uxth	r3, r3
 8005912:	817b      	strh	r3, [r7, #10]
	  x++;
 8005914:	897b      	ldrh	r3, [r7, #10]
 8005916:	3301      	adds	r3, #1
 8005918:	b29b      	uxth	r3, r3
 800591a:	817b      	strh	r3, [r7, #10]
 800591c:	e00c      	b.n	8005938 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800591e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d108      	bne.n	8005938 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8005926:	893a      	ldrh	r2, [r7, #8]
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	b29b      	uxth	r3, r3
 800592e:	813b      	strh	r3, [r7, #8]
	  y++;
 8005930:	893b      	ldrh	r3, [r7, #8]
 8005932:	3301      	adds	r3, #1
 8005934:	b29b      	uxth	r3, r3
 8005936:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8005938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8005944:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d11a      	bne.n	8005982 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005952:	893b      	ldrh	r3, [r7, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	d83b      	bhi.n	80059d0 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800595e:	893b      	ldrh	r3, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	d937      	bls.n	80059d4 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005970:	1db9      	adds	r1, r7, #6
 8005972:	f107 000a 	add.w	r0, r7, #10
 8005976:	f7ff ff3d 	bl	80057f4 <u8g2_clip_intersection2>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11a      	bne.n	80059b6 <u8g2_DrawHVLine+0xe4>
	  return;
 8005980:	e02f      	b.n	80059e2 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	429a      	cmp	r2, r3
 800598c:	d824      	bhi.n	80059d8 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005994:	897b      	ldrh	r3, [r7, #10]
 8005996:	429a      	cmp	r2, r3
 8005998:	d920      	bls.n	80059dc <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80059a6:	1db9      	adds	r1, r7, #6
 80059a8:	f107 0008 	add.w	r0, r7, #8
 80059ac:	f7ff ff22 	bl	80057f4 <u8g2_clip_intersection2>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d014      	beq.n	80059e0 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	689c      	ldr	r4, [r3, #8]
 80059bc:	8979      	ldrh	r1, [r7, #10]
 80059be:	893a      	ldrh	r2, [r7, #8]
 80059c0:	88f8      	ldrh	r0, [r7, #6]
 80059c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	4603      	mov	r3, r0
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	47a0      	blx	r4
 80059ce:	e008      	b.n	80059e2 <u8g2_DrawHVLine+0x110>
	  return;
 80059d0:	bf00      	nop
 80059d2:	e006      	b.n	80059e2 <u8g2_DrawHVLine+0x110>
	  return;
 80059d4:	bf00      	nop
 80059d6:	e004      	b.n	80059e2 <u8g2_DrawHVLine+0x110>
	  return;
 80059d8:	bf00      	nop
 80059da:	e002      	b.n	80059e2 <u8g2_DrawHVLine+0x110>
	  return;
 80059dc:	bf00      	nop
 80059de:	e000      	b.n	80059e2 <u8g2_DrawHVLine+0x110>
	  return;
 80059e0:	bf00      	nop
    }
}
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd90      	pop	{r4, r7, pc}

080059e8 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]
 80059f4:	4613      	mov	r3, r2
 80059f6:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80059fe:	883a      	ldrh	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d31a      	bcc.n	8005a3a <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8005a0a:	883a      	ldrh	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d216      	bcs.n	8005a3e <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005a16:	887a      	ldrh	r2, [r7, #2]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d312      	bcc.n	8005a42 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005a22:	887a      	ldrh	r2, [r7, #2]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d20e      	bcs.n	8005a46 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005a28:	883a      	ldrh	r2, [r7, #0]
 8005a2a:	8879      	ldrh	r1, [r7, #2]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	2301      	movs	r3, #1
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff ff4d 	bl	80058d2 <u8g2_DrawHVLine>
 8005a38:	e006      	b.n	8005a48 <u8g2_DrawPixel+0x60>
    return;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <u8g2_DrawPixel+0x60>
    return;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <u8g2_DrawPixel+0x60>
    return;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <u8g2_DrawPixel+0x60>
    return;
 8005a46:	bf00      	nop
}
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8005a4e:	b490      	push	{r4, r7}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	4604      	mov	r4, r0
 8005a56:	4608      	mov	r0, r1
 8005a58:	4611      	mov	r1, r2
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	80fb      	strh	r3, [r7, #6]
 8005a60:	4603      	mov	r3, r0
 8005a62:	80bb      	strh	r3, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	88bb      	ldrh	r3, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d20d      	bcs.n	8005a90 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005a74:	883a      	ldrh	r2, [r7, #0]
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d901      	bls.n	8005a80 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e014      	b.n	8005aaa <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8005a80:	887a      	ldrh	r2, [r7, #2]
 8005a82:	883b      	ldrh	r3, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d901      	bls.n	8005a8c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e00e      	b.n	8005aaa <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e00c      	b.n	8005aaa <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8005a90:	883a      	ldrh	r2, [r7, #0]
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d907      	bls.n	8005aa8 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8005a98:	887a      	ldrh	r2, [r7, #2]
 8005a9a:	883b      	ldrh	r3, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d901      	bls.n	8005aa4 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e002      	b.n	8005aaa <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e000      	b.n	8005aaa <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8005aa8:	2300      	movs	r3, #0
    }
  }
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc90      	pop	{r4, r7}
 8005ab2:	4770      	bx	lr

08005ab4 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	817b      	strh	r3, [r7, #10]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	813b      	strh	r3, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8005ada:	8b3b      	ldrh	r3, [r7, #24]
 8005adc:	893a      	ldrh	r2, [r7, #8]
 8005ade:	f7ff ffb6 	bl	8005a4e <u8g2_is_intersection_decision_tree>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <u8g2_IsIntersection+0x38>
    return 0; 
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e00a      	b.n	8005b02 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	897a      	ldrh	r2, [r7, #10]
 8005afc:	f7ff ffa7 	bl	8005a4e <u8g2_is_intersection_decision_tree>
 8005b00:	4603      	mov	r3, r0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b089      	sub	sp, #36	; 0x24
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	461a      	mov	r2, r3
 8005b18:	4603      	mov	r3, r0
 8005b1a:	817b      	strh	r3, [r7, #10]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	813b      	strh	r3, [r7, #8]
 8005b20:	4613      	mov	r3, r2
 8005b22:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005b24:	893b      	ldrh	r3, [r7, #8]
 8005b26:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005b28:	7efb      	ldrb	r3, [r7, #27]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8005b30:	2301      	movs	r3, #1
 8005b32:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8005b34:	7e3a      	ldrb	r2, [r7, #24]
 8005b36:	7efb      	ldrb	r3, [r7, #27]
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d801      	bhi.n	8005b54 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8005b50:	7e3b      	ldrb	r3, [r7, #24]
 8005b52:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d001      	beq.n	8005b62 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8005b5e:	7e3b      	ldrb	r3, [r7, #24]
 8005b60:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8005b62:	893b      	ldrh	r3, [r7, #8]
 8005b64:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8005b66:	8afb      	ldrh	r3, [r7, #22]
 8005b68:	f023 0307 	bic.w	r3, r3, #7
 8005b6c:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	7c1b      	ldrb	r3, [r3, #16]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	8afa      	ldrh	r2, [r7, #22]
 8005b78:	fb12 f303 	smulbb	r3, r2, r3
 8005b7c:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8005b84:	8afb      	ldrh	r3, [r7, #22]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8005b8c:	897b      	ldrh	r3, [r7, #10]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8005b94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d117      	bne.n	8005bcc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	7ebb      	ldrb	r3, [r7, #26]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	7e7b      	ldrb	r3, [r7, #25]
 8005bb0:	4053      	eors	r3, r2
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	61fb      	str	r3, [r7, #28]
	len--;
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e8      	bne.n	8005b9c <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005bca:	e038      	b.n	8005c3e <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	7ebb      	ldrb	r3, [r7, #26]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	781a      	ldrb	r2, [r3, #0]
 8005bde:	7e7b      	ldrb	r3, [r7, #25]
 8005be0:	4053      	eors	r3, r2
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005be8:	7efb      	ldrb	r3, [r7, #27]
 8005bea:	3301      	adds	r3, #1
 8005bec:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005bee:	7efb      	ldrb	r3, [r7, #27]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	76fb      	strb	r3, [r7, #27]
      len--;
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005bfc:	7efb      	ldrb	r3, [r7, #27]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d114      	bne.n	8005c2c <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005c06:	461a      	mov	r2, r3
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d801      	bhi.n	8005c1c <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d008      	beq.n	8005c38 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8005c26:	2301      	movs	r3, #1
 8005c28:	767b      	strb	r3, [r7, #25]
 8005c2a:	e005      	b.n	8005c38 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005c2c:	7ebb      	ldrb	r3, [r7, #26]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8005c32:	7e7b      	ldrb	r3, [r7, #25]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1c6      	bne.n	8005bcc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005c3e:	bf00      	nop
 8005c40:	3724      	adds	r7, #36	; 0x24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	79fa      	ldrb	r2, [r7, #7]
 8005cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff ffa9 	bl	8005c4a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff fd6b 	bl	80057d4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d22:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d24:	89fb      	ldrh	r3, [r7, #14]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	89fa      	ldrh	r2, [r7, #14]
 8005d2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	7c1b      	ldrb	r3, [r3, #16]
 8005d34:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8005d36:	89fb      	ldrh	r3, [r7, #14]
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	89fa      	ldrh	r2, [r7, #14]
 8005d40:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d48:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d4a:	89fb      	ldrh	r3, [r7, #14]
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	89fa      	ldrh	r2, [r7, #14]
 8005d54:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d5c:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005d5e:	89fb      	ldrh	r3, [r7, #14]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8005d66:	4413      	add	r3, r2
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	7c52      	ldrb	r2, [r2, #17]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	dd08      	ble.n	8005d82 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	7c5b      	ldrb	r3, [r3, #17]
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d82:	89fb      	ldrh	r3, [r7, #14]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005da4:	89fb      	ldrh	r3, [r7, #14]
 8005da6:	4413      	add	r3, r2
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	8a9a      	ldrh	r2, [r3, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	8ada      	ldrh	r2, [r3, #22]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4603      	mov	r3, r0
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fe5d 	bl	8005ab4 <u8g2_IsIntersection>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d104      	bne.n	8005e0a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005e08:	e03b      	b.n	8005e82 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d205      	bcs.n	8005e2e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d905      	bls.n	8005e4a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d205      	bcs.n	8005e66 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d905      	bls.n	8005e82 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff3b 	bl	8005d0e <u8g2_update_dimension_common>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff ff7b 	bl	8005dd0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af02      	add	r7, sp, #8
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	4608      	mov	r0, r1
 8005eec:	4611      	mov	r1, r2
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	817b      	strh	r3, [r7, #10]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	813b      	strh	r3, [r7, #8]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005efc:	88f8      	ldrh	r0, [r7, #6]
 8005efe:	893a      	ldrh	r2, [r7, #8]
 8005f00:	8979      	ldrh	r1, [r7, #10]
 8005f02:	7e3b      	ldrb	r3, [r7, #24]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	4603      	mov	r3, r0
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7ff fcc1 	bl	8005890 <u8g2_draw_hv_line_2dir>
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005f16:	b590      	push	{r4, r7, lr}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691c      	ldr	r4, [r3, #16]
 8005f26:	78fa      	ldrb	r2, [r7, #3]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2120      	movs	r1, #32
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	47a0      	blx	r4
 8005f30:	4603      	mov	r3, r0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd90      	pop	{r4, r7, pc}

08005f3a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005f3a:	b590      	push	{r4, r7, lr}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	460b      	mov	r3, r1
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	691c      	ldr	r4, [r3, #16]
 8005f4c:	7afa      	ldrb	r2, [r7, #11]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2117      	movs	r1, #23
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	47a0      	blx	r4
 8005f56:	4603      	mov	r3, r0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd90      	pop	{r4, r7, pc}

08005f60 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005f6c:	1cfb      	adds	r3, r7, #3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	2101      	movs	r1, #1
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff ffe1 	bl	8005f3a <u8x8_byte_SendBytes>
 8005f78:	4603      	mov	r3, r0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005f82:	b590      	push	{r4, r7, lr}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68dc      	ldr	r4, [r3, #12]
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	2300      	movs	r3, #0
 8005f96:	2115      	movs	r1, #21
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	47a0      	blx	r4
 8005f9c:	4603      	mov	r3, r0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd90      	pop	{r4, r7, pc}

08005fa6 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005fa6:	b590      	push	{r4, r7, lr}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68dc      	ldr	r4, [r3, #12]
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2116      	movs	r1, #22
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	47a0      	blx	r4
 8005fc0:	4603      	mov	r3, r0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd90      	pop	{r4, r7, pc}

08005fca <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005fca:	b590      	push	{r4, r7, lr}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	68dc      	ldr	r4, [r3, #12]
 8005fdc:	7afa      	ldrb	r2, [r7, #11]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2117      	movs	r1, #23
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	47a0      	blx	r4
 8005fe6:	4603      	mov	r3, r0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}

08005ff0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005ff0:	b590      	push	{r4, r7, lr}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68dc      	ldr	r4, [r3, #12]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2200      	movs	r2, #0
 8006000:	2118      	movs	r1, #24
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	47a0      	blx	r4
 8006006:	4603      	mov	r3, r0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	bd90      	pop	{r4, r7, pc}

08006010 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68dc      	ldr	r4, [r3, #12]
 800601c:	2300      	movs	r3, #0
 800601e:	2200      	movs	r2, #0
 8006020:	2119      	movs	r1, #25
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	47a0      	blx	r4
 8006026:	4603      	mov	r3, r0
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bd90      	pop	{r4, r7, pc}

08006030 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	73fb      	strb	r3, [r7, #15]
    data++;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2bfe      	cmp	r3, #254	; 0xfe
 800604a:	d031      	beq.n	80060b0 <u8x8_cad_SendSequence+0x80>
 800604c:	2bfe      	cmp	r3, #254	; 0xfe
 800604e:	dc3d      	bgt.n	80060cc <u8x8_cad_SendSequence+0x9c>
 8006050:	2b19      	cmp	r3, #25
 8006052:	dc3b      	bgt.n	80060cc <u8x8_cad_SendSequence+0x9c>
 8006054:	2b18      	cmp	r3, #24
 8006056:	da23      	bge.n	80060a0 <u8x8_cad_SendSequence+0x70>
 8006058:	2b16      	cmp	r3, #22
 800605a:	dc02      	bgt.n	8006062 <u8x8_cad_SendSequence+0x32>
 800605c:	2b15      	cmp	r3, #21
 800605e:	da03      	bge.n	8006068 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8006060:	e034      	b.n	80060cc <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8006062:	2b17      	cmp	r3, #23
 8006064:	d00e      	beq.n	8006084 <u8x8_cad_SendSequence+0x54>
	return;
 8006066:	e031      	b.n	80060cc <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68dc      	ldr	r4, [r3, #12]
 8006072:	7bba      	ldrb	r2, [r7, #14]
 8006074:	7bf9      	ldrb	r1, [r7, #15]
 8006076:	2300      	movs	r3, #0
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	47a0      	blx	r4
	  data++;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	603b      	str	r3, [r7, #0]
	  break;
 8006082:	e022      	b.n	80060ca <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800608a:	f107 030e 	add.w	r3, r7, #14
 800608e:	461a      	mov	r2, r3
 8006090:	2101      	movs	r1, #1
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ff99 	bl	8005fca <u8x8_cad_SendData>
	  data++;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	603b      	str	r3, [r7, #0]
	  break;
 800609e:	e014      	b.n	80060ca <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68dc      	ldr	r4, [r3, #12]
 80060a4:	7bf9      	ldrb	r1, [r7, #15]
 80060a6:	2300      	movs	r3, #0
 80060a8:	2200      	movs	r2, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	47a0      	blx	r4
	  break;
 80060ae:	e00c      	b.n	80060ca <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	461a      	mov	r2, r3
 80060ba:	2129      	movs	r1, #41	; 0x29
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9d8 	bl	8006472 <u8x8_gpio_call>
	  data++;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	603b      	str	r3, [r7, #0]
	  break;
 80060c8:	bf00      	nop
    cmd = *data;
 80060ca:	e7b6      	b.n	800603a <u8x8_cad_SendSequence+0xa>
	return;
 80060cc:	bf00      	nop
    }
  }
}
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}

080060d4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	607b      	str	r3, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	72fb      	strb	r3, [r7, #11]
 80060e2:	4613      	mov	r3, r2
 80060e4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80060e6:	7afb      	ldrb	r3, [r7, #11]
 80060e8:	3b14      	subs	r3, #20
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d82f      	bhi.n	800614e <u8x8_cad_001+0x7a>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <u8x8_cad_001+0x20>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	0800613d 	.word	0x0800613d
 80060f8:	0800610d 	.word	0x0800610d
 80060fc:	08006121 	.word	0x08006121
 8006100:	08006135 	.word	0x08006135
 8006104:	0800613d 	.word	0x0800613d
 8006108:	0800613d 	.word	0x0800613d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800610c:	2100      	movs	r1, #0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff ff01 	bl	8005f16 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8006114:	7abb      	ldrb	r3, [r7, #10]
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff ff21 	bl	8005f60 <u8x8_byte_SendByte>
      break;
 800611e:	e018      	b.n	8006152 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8006120:	2100      	movs	r1, #0
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff fef7 	bl	8005f16 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8006128:	7abb      	ldrb	r3, [r7, #10]
 800612a:	4619      	mov	r1, r3
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff ff17 	bl	8005f60 <u8x8_byte_SendByte>
      break;
 8006132:	e00e      	b.n	8006152 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8006134:	2101      	movs	r1, #1
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7ff feed 	bl	8005f16 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691c      	ldr	r4, [r3, #16]
 8006140:	7aba      	ldrb	r2, [r7, #10]
 8006142:	7af9      	ldrb	r1, [r7, #11]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	47a0      	blx	r4
 800614a:	4603      	mov	r3, r0
 800614c:	e002      	b.n	8006154 <u8x8_cad_001+0x80>
    default:
      return 0;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <u8x8_cad_001+0x80>
  }
  return 1;
 8006152:	2301      	movs	r3, #1
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	bd90      	pop	{r4, r7, pc}

0800615c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	607b      	str	r3, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	72fb      	strb	r3, [r7, #11]
 800616a:	4613      	mov	r3, r2
 800616c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800616e:	7afb      	ldrb	r3, [r7, #11]
 8006170:	3b0b      	subs	r3, #11
 8006172:	2b04      	cmp	r3, #4
 8006174:	f200 808a 	bhi.w	800628c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8006178:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	08006195 	.word	0x08006195
 8006184:	0800628d 	.word	0x0800628d
 8006188:	080061af 	.word	0x080061af
 800618c:	080061e1 	.word	0x080061e1
 8006190:	08006201 	.word	0x08006201
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8006194:	7abb      	ldrb	r3, [r7, #10]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d104      	bne.n	80061a4 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800619a:	4940      	ldr	r1, [pc, #256]	; (800629c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff ff47 	bl	8006030 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80061a2:	e075      	b.n	8006290 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80061a4:	493e      	ldr	r1, [pc, #248]	; (80062a0 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f7ff ff42 	bl	8006030 <u8x8_cad_SendSequence>
      break;
 80061ac:	e070      	b.n	8006290 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80061ae:	7abb      	ldrb	r3, [r7, #10]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80061b4:	493b      	ldr	r1, [pc, #236]	; (80062a4 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff ff3a 	bl	8006030 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	7c9a      	ldrb	r2, [r3, #18]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80061c8:	e062      	b.n	8006290 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80061ca:	4937      	ldr	r1, [pc, #220]	; (80062a8 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff ff2f 	bl	8006030 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	7cda      	ldrb	r2, [r3, #19]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80061de:	e057      	b.n	8006290 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff ff05 	bl	8005ff0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80061e6:	2181      	movs	r1, #129	; 0x81
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff feca 	bl	8005f82 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80061ee:	7abb      	ldrb	r3, [r7, #10]
 80061f0:	4619      	mov	r1, r3
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7ff fed7 	bl	8005fa6 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f7ff ff09 	bl	8006010 <u8x8_cad_EndTransfer>
      break;
 80061fe:	e047      	b.n	8006290 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fef5 	bl	8005ff0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	795b      	ldrb	r3, [r3, #5]
 800620a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	4413      	add	r3, r2
 800621c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800621e:	2140      	movs	r1, #64	; 0x40
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff feae 	bl	8005f82 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	091b      	lsrs	r3, r3, #4
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f043 0310 	orr.w	r3, r3, #16
 8006230:	b2db      	uxtb	r3, r3
 8006232:	4619      	mov	r1, r3
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fea4 	bl	8005f82 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	b2db      	uxtb	r3, r3
 8006242:	4619      	mov	r1, r3
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff feae 	bl	8005fa6 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	799b      	ldrb	r3, [r3, #6]
 800624e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8006252:	b2db      	uxtb	r3, r3
 8006254:	4619      	mov	r1, r3
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff fea5 	bl	8005fa6 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	791b      	ldrb	r3, [r3, #4]
 8006260:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8006268:	7dbb      	ldrb	r3, [r7, #22]
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	b2db      	uxtb	r3, r3
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4619      	mov	r1, r3
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff fea9 	bl	8005fca <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8006278:	7abb      	ldrb	r3, [r7, #10]
 800627a:	3b01      	subs	r3, #1
 800627c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800627e:	7abb      	ldrb	r3, [r7, #10]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1eb      	bne.n	800625c <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fec3 	bl	8006010 <u8x8_cad_EndTransfer>
      break;
 800628a:	e001      	b.n	8006290 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8006290:	2301      	movs	r3, #1
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	0800b040 	.word	0x0800b040
 80062a0:	0800b048 	.word	0x0800b048
 80062a4:	0800b050 	.word	0x0800b050
 80062a8:	0800b058 	.word	0x0800b058

080062ac <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	607b      	str	r3, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	72fb      	strb	r3, [r7, #11]
 80062ba:	4613      	mov	r3, r2
 80062bc:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80062be:	7aba      	ldrb	r2, [r7, #10]
 80062c0:	7af9      	ldrb	r1, [r7, #11]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff ff49 	bl	800615c <u8x8_d_ssd1306_sh1106_generic>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e014      	b.n	80062fe <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80062d4:	7afb      	ldrb	r3, [r7, #11]
 80062d6:	2b09      	cmp	r3, #9
 80062d8:	d009      	beq.n	80062ee <u8x8_d_ssd1306_128x64_noname+0x42>
 80062da:	2b0a      	cmp	r3, #10
 80062dc:	d10c      	bne.n	80062f8 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f82a 	bl	8006338 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80062e4:	4908      	ldr	r1, [pc, #32]	; (8006308 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff fea2 	bl	8006030 <u8x8_cad_SendSequence>
      break;
 80062ec:	e006      	b.n	80062fc <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80062ee:	4907      	ldr	r1, [pc, #28]	; (800630c <u8x8_d_ssd1306_128x64_noname+0x60>)
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f80d 	bl	8006310 <u8x8_d_helper_display_setup_memory>
      break;
 80062f6:	e001      	b.n	80062fc <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e000      	b.n	80062fe <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80062fc:	2301      	movs	r3, #1
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	0800b008 	.word	0x0800b008
 800630c:	0800b060 	.word	0x0800b060

08006310 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	7c9a      	ldrb	r2, [r3, #18]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8006338:	b590      	push	{r4, r7, lr}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695c      	ldr	r4, [r3, #20]
 8006344:	2300      	movs	r3, #0
 8006346:	2200      	movs	r2, #0
 8006348:	2128      	movs	r1, #40	; 0x28
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68dc      	ldr	r4, [r3, #12]
 8006352:	2300      	movs	r3, #0
 8006354:	2200      	movs	r2, #0
 8006356:	2114      	movs	r1, #20
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800635c:	2201      	movs	r2, #1
 800635e:	214b      	movs	r1, #75	; 0x4b
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f886 	bl	8006472 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	791b      	ldrb	r3, [r3, #4]
 800636c:	461a      	mov	r2, r3
 800636e:	2129      	movs	r1, #41	; 0x29
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f87e 	bl	8006472 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8006376:	2200      	movs	r2, #0
 8006378:	214b      	movs	r1, #75	; 0x4b
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f879 	bl	8006472 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	791b      	ldrb	r3, [r3, #4]
 8006386:	461a      	mov	r2, r3
 8006388:	2129      	movs	r1, #41	; 0x29
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f871 	bl	8006472 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8006390:	2201      	movs	r2, #1
 8006392:	214b      	movs	r1, #75	; 0x4b
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f86c 	bl	8006472 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	795b      	ldrb	r3, [r3, #5]
 80063a0:	461a      	mov	r2, r3
 80063a2:	2129      	movs	r1, #41	; 0x29
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f864 	bl	8006472 <u8x8_gpio_call>
}    
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}

080063b2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80063b2:	b590      	push	{r4, r7, lr}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	4608      	mov	r0, r1
 80063bc:	4611      	mov	r1, r2
 80063be:	461a      	mov	r2, r3
 80063c0:	4603      	mov	r3, r0
 80063c2:	70fb      	strb	r3, [r7, #3]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70bb      	strb	r3, [r7, #2]
 80063c8:	4613      	mov	r3, r2
 80063ca:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80063d0:	78bb      	ldrb	r3, [r7, #2]
 80063d2:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80063d4:	787b      	ldrb	r3, [r7, #1]
 80063d6:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689c      	ldr	r4, [r3, #8]
 80063e0:	f107 0308 	add.w	r3, r7, #8
 80063e4:	2201      	movs	r2, #1
 80063e6:	210f      	movs	r1, #15
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	47a0      	blx	r4
 80063ec:	4603      	mov	r3, r0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd90      	pop	{r4, r7, pc}

080063f6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80063f6:	b590      	push	{r4, r7, lr}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689c      	ldr	r4, [r3, #8]
 8006402:	2300      	movs	r3, #0
 8006404:	2200      	movs	r2, #0
 8006406:	2109      	movs	r1, #9
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	47a0      	blx	r4
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689c      	ldr	r4, [r3, #8]
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	210a      	movs	r1, #10
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	bd90      	pop	{r4, r7, pc}

08006432 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8006432:	b590      	push	{r4, r7, lr}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	460b      	mov	r3, r1
 800643c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689c      	ldr	r4, [r3, #8]
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	2300      	movs	r3, #0
 8006446:	210b      	movs	r1, #11
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	47a0      	blx	r4
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	bd90      	pop	{r4, r7, pc}

08006454 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689c      	ldr	r4, [r3, #8]
 8006460:	2300      	movs	r3, #0
 8006462:	2200      	movs	r2, #0
 8006464:	2110      	movs	r1, #16
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	47a0      	blx	r4
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	bd90      	pop	{r4, r7, pc}

08006472 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8006472:	b590      	push	{r4, r7, lr}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	70fb      	strb	r3, [r7, #3]
 800647e:	4613      	mov	r3, r2
 8006480:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695c      	ldr	r4, [r3, #20]
 8006486:	78ba      	ldrb	r2, [r7, #2]
 8006488:	78f9      	ldrb	r1, [r7, #3]
 800648a:	2300      	movs	r3, #0
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	47a0      	blx	r4
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	bd90      	pop	{r4, r7, pc}

08006498 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	72fb      	strb	r3, [r7, #11]
 80064a6:	4613      	mov	r3, r2
 80064a8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a11      	ldr	r2, [pc, #68]	; (8006510 <u8x8_SetupDefaults+0x58>)
 80064ca:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a10      	ldr	r2, [pc, #64]	; (8006510 <u8x8_SetupDefaults+0x58>)
 80064d0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a0e      	ldr	r2, [pc, #56]	; (8006510 <u8x8_SetupDefaults+0x58>)
 80064d6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a0d      	ldr	r2, [pc, #52]	; (8006510 <u8x8_SetupDefaults+0x58>)
 80064dc:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	22ff      	movs	r2, #255	; 0xff
 80064f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	22ff      	movs	r2, #255	; 0xff
 8006500:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	08006499 	.word	0x08006499

08006514 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff ffc8 	bl	80064b8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f7ff ff58 	bl	80063f6 <u8x8_SetupMemory>
}
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <__errno>:
 8006550:	4b01      	ldr	r3, [pc, #4]	; (8006558 <__errno+0x8>)
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	2000000c 	.word	0x2000000c

0800655c <__libc_init_array>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4d0d      	ldr	r5, [pc, #52]	; (8006594 <__libc_init_array+0x38>)
 8006560:	4c0d      	ldr	r4, [pc, #52]	; (8006598 <__libc_init_array+0x3c>)
 8006562:	1b64      	subs	r4, r4, r5
 8006564:	10a4      	asrs	r4, r4, #2
 8006566:	2600      	movs	r6, #0
 8006568:	42a6      	cmp	r6, r4
 800656a:	d109      	bne.n	8006580 <__libc_init_array+0x24>
 800656c:	4d0b      	ldr	r5, [pc, #44]	; (800659c <__libc_init_array+0x40>)
 800656e:	4c0c      	ldr	r4, [pc, #48]	; (80065a0 <__libc_init_array+0x44>)
 8006570:	f004 fd1c 	bl	800afac <_init>
 8006574:	1b64      	subs	r4, r4, r5
 8006576:	10a4      	asrs	r4, r4, #2
 8006578:	2600      	movs	r6, #0
 800657a:	42a6      	cmp	r6, r4
 800657c:	d105      	bne.n	800658a <__libc_init_array+0x2e>
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	f855 3b04 	ldr.w	r3, [r5], #4
 8006584:	4798      	blx	r3
 8006586:	3601      	adds	r6, #1
 8006588:	e7ee      	b.n	8006568 <__libc_init_array+0xc>
 800658a:	f855 3b04 	ldr.w	r3, [r5], #4
 800658e:	4798      	blx	r3
 8006590:	3601      	adds	r6, #1
 8006592:	e7f2      	b.n	800657a <__libc_init_array+0x1e>
 8006594:	0800b52c 	.word	0x0800b52c
 8006598:	0800b52c 	.word	0x0800b52c
 800659c:	0800b52c 	.word	0x0800b52c
 80065a0:	0800b530 	.word	0x0800b530

080065a4 <memset>:
 80065a4:	4402      	add	r2, r0
 80065a6:	4603      	mov	r3, r0
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d100      	bne.n	80065ae <memset+0xa>
 80065ac:	4770      	bx	lr
 80065ae:	f803 1b01 	strb.w	r1, [r3], #1
 80065b2:	e7f9      	b.n	80065a8 <memset+0x4>

080065b4 <__cvt>:
 80065b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	ec55 4b10 	vmov	r4, r5, d0
 80065bc:	2d00      	cmp	r5, #0
 80065be:	460e      	mov	r6, r1
 80065c0:	4619      	mov	r1, r3
 80065c2:	462b      	mov	r3, r5
 80065c4:	bfbb      	ittet	lt
 80065c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065ca:	461d      	movlt	r5, r3
 80065cc:	2300      	movge	r3, #0
 80065ce:	232d      	movlt	r3, #45	; 0x2d
 80065d0:	700b      	strb	r3, [r1, #0]
 80065d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065d8:	4691      	mov	r9, r2
 80065da:	f023 0820 	bic.w	r8, r3, #32
 80065de:	bfbc      	itt	lt
 80065e0:	4622      	movlt	r2, r4
 80065e2:	4614      	movlt	r4, r2
 80065e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065e8:	d005      	beq.n	80065f6 <__cvt+0x42>
 80065ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065ee:	d100      	bne.n	80065f2 <__cvt+0x3e>
 80065f0:	3601      	adds	r6, #1
 80065f2:	2102      	movs	r1, #2
 80065f4:	e000      	b.n	80065f8 <__cvt+0x44>
 80065f6:	2103      	movs	r1, #3
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	ab02      	add	r3, sp, #8
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	ec45 4b10 	vmov	d0, r4, r5
 8006604:	4653      	mov	r3, sl
 8006606:	4632      	mov	r2, r6
 8006608:	f001 fefa 	bl	8008400 <_dtoa_r>
 800660c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006610:	4607      	mov	r7, r0
 8006612:	d102      	bne.n	800661a <__cvt+0x66>
 8006614:	f019 0f01 	tst.w	r9, #1
 8006618:	d022      	beq.n	8006660 <__cvt+0xac>
 800661a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800661e:	eb07 0906 	add.w	r9, r7, r6
 8006622:	d110      	bne.n	8006646 <__cvt+0x92>
 8006624:	783b      	ldrb	r3, [r7, #0]
 8006626:	2b30      	cmp	r3, #48	; 0x30
 8006628:	d10a      	bne.n	8006640 <__cvt+0x8c>
 800662a:	2200      	movs	r2, #0
 800662c:	2300      	movs	r3, #0
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	f7fa fa59 	bl	8000ae8 <__aeabi_dcmpeq>
 8006636:	b918      	cbnz	r0, 8006640 <__cvt+0x8c>
 8006638:	f1c6 0601 	rsb	r6, r6, #1
 800663c:	f8ca 6000 	str.w	r6, [sl]
 8006640:	f8da 3000 	ldr.w	r3, [sl]
 8006644:	4499      	add	r9, r3
 8006646:	2200      	movs	r2, #0
 8006648:	2300      	movs	r3, #0
 800664a:	4620      	mov	r0, r4
 800664c:	4629      	mov	r1, r5
 800664e:	f7fa fa4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006652:	b108      	cbz	r0, 8006658 <__cvt+0xa4>
 8006654:	f8cd 900c 	str.w	r9, [sp, #12]
 8006658:	2230      	movs	r2, #48	; 0x30
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	454b      	cmp	r3, r9
 800665e:	d307      	bcc.n	8006670 <__cvt+0xbc>
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006664:	1bdb      	subs	r3, r3, r7
 8006666:	4638      	mov	r0, r7
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	b004      	add	sp, #16
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006670:	1c59      	adds	r1, r3, #1
 8006672:	9103      	str	r1, [sp, #12]
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e7f0      	b.n	800665a <__cvt+0xa6>

08006678 <__exponent>:
 8006678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800667a:	4603      	mov	r3, r0
 800667c:	2900      	cmp	r1, #0
 800667e:	bfb8      	it	lt
 8006680:	4249      	neglt	r1, r1
 8006682:	f803 2b02 	strb.w	r2, [r3], #2
 8006686:	bfb4      	ite	lt
 8006688:	222d      	movlt	r2, #45	; 0x2d
 800668a:	222b      	movge	r2, #43	; 0x2b
 800668c:	2909      	cmp	r1, #9
 800668e:	7042      	strb	r2, [r0, #1]
 8006690:	dd2a      	ble.n	80066e8 <__exponent+0x70>
 8006692:	f10d 0407 	add.w	r4, sp, #7
 8006696:	46a4      	mov	ip, r4
 8006698:	270a      	movs	r7, #10
 800669a:	46a6      	mov	lr, r4
 800669c:	460a      	mov	r2, r1
 800669e:	fb91 f6f7 	sdiv	r6, r1, r7
 80066a2:	fb07 1516 	mls	r5, r7, r6, r1
 80066a6:	3530      	adds	r5, #48	; 0x30
 80066a8:	2a63      	cmp	r2, #99	; 0x63
 80066aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80066ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066b2:	4631      	mov	r1, r6
 80066b4:	dcf1      	bgt.n	800669a <__exponent+0x22>
 80066b6:	3130      	adds	r1, #48	; 0x30
 80066b8:	f1ae 0502 	sub.w	r5, lr, #2
 80066bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066c0:	1c44      	adds	r4, r0, #1
 80066c2:	4629      	mov	r1, r5
 80066c4:	4561      	cmp	r1, ip
 80066c6:	d30a      	bcc.n	80066de <__exponent+0x66>
 80066c8:	f10d 0209 	add.w	r2, sp, #9
 80066cc:	eba2 020e 	sub.w	r2, r2, lr
 80066d0:	4565      	cmp	r5, ip
 80066d2:	bf88      	it	hi
 80066d4:	2200      	movhi	r2, #0
 80066d6:	4413      	add	r3, r2
 80066d8:	1a18      	subs	r0, r3, r0
 80066da:	b003      	add	sp, #12
 80066dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066e6:	e7ed      	b.n	80066c4 <__exponent+0x4c>
 80066e8:	2330      	movs	r3, #48	; 0x30
 80066ea:	3130      	adds	r1, #48	; 0x30
 80066ec:	7083      	strb	r3, [r0, #2]
 80066ee:	70c1      	strb	r1, [r0, #3]
 80066f0:	1d03      	adds	r3, r0, #4
 80066f2:	e7f1      	b.n	80066d8 <__exponent+0x60>

080066f4 <_printf_float>:
 80066f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	ed2d 8b02 	vpush	{d8}
 80066fc:	b08d      	sub	sp, #52	; 0x34
 80066fe:	460c      	mov	r4, r1
 8006700:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006704:	4616      	mov	r6, r2
 8006706:	461f      	mov	r7, r3
 8006708:	4605      	mov	r5, r0
 800670a:	f003 f98d 	bl	8009a28 <_localeconv_r>
 800670e:	f8d0 a000 	ldr.w	sl, [r0]
 8006712:	4650      	mov	r0, sl
 8006714:	f7f9 fd6c 	bl	80001f0 <strlen>
 8006718:	2300      	movs	r3, #0
 800671a:	930a      	str	r3, [sp, #40]	; 0x28
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	f8d8 3000 	ldr.w	r3, [r8]
 8006724:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006728:	3307      	adds	r3, #7
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	f103 0208 	add.w	r2, r3, #8
 8006732:	f8c8 2000 	str.w	r2, [r8]
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800673e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006746:	9307      	str	r3, [sp, #28]
 8006748:	f8cd 8018 	str.w	r8, [sp, #24]
 800674c:	ee08 0a10 	vmov	s16, r0
 8006750:	4b9f      	ldr	r3, [pc, #636]	; (80069d0 <_printf_float+0x2dc>)
 8006752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006756:	f04f 32ff 	mov.w	r2, #4294967295
 800675a:	f7fa f9f7 	bl	8000b4c <__aeabi_dcmpun>
 800675e:	bb88      	cbnz	r0, 80067c4 <_printf_float+0xd0>
 8006760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006764:	4b9a      	ldr	r3, [pc, #616]	; (80069d0 <_printf_float+0x2dc>)
 8006766:	f04f 32ff 	mov.w	r2, #4294967295
 800676a:	f7fa f9d1 	bl	8000b10 <__aeabi_dcmple>
 800676e:	bb48      	cbnz	r0, 80067c4 <_printf_float+0xd0>
 8006770:	2200      	movs	r2, #0
 8006772:	2300      	movs	r3, #0
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	f7fa f9c0 	bl	8000afc <__aeabi_dcmplt>
 800677c:	b110      	cbz	r0, 8006784 <_printf_float+0x90>
 800677e:	232d      	movs	r3, #45	; 0x2d
 8006780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006784:	4b93      	ldr	r3, [pc, #588]	; (80069d4 <_printf_float+0x2e0>)
 8006786:	4894      	ldr	r0, [pc, #592]	; (80069d8 <_printf_float+0x2e4>)
 8006788:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800678c:	bf94      	ite	ls
 800678e:	4698      	movls	r8, r3
 8006790:	4680      	movhi	r8, r0
 8006792:	2303      	movs	r3, #3
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	9b05      	ldr	r3, [sp, #20]
 8006798:	f023 0204 	bic.w	r2, r3, #4
 800679c:	6022      	str	r2, [r4, #0]
 800679e:	f04f 0900 	mov.w	r9, #0
 80067a2:	9700      	str	r7, [sp, #0]
 80067a4:	4633      	mov	r3, r6
 80067a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80067a8:	4621      	mov	r1, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f9d8 	bl	8006b60 <_printf_common>
 80067b0:	3001      	adds	r0, #1
 80067b2:	f040 8090 	bne.w	80068d6 <_printf_float+0x1e2>
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	b00d      	add	sp, #52	; 0x34
 80067bc:	ecbd 8b02 	vpop	{d8}
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	4640      	mov	r0, r8
 80067ca:	4649      	mov	r1, r9
 80067cc:	f7fa f9be 	bl	8000b4c <__aeabi_dcmpun>
 80067d0:	b140      	cbz	r0, 80067e4 <_printf_float+0xf0>
 80067d2:	464b      	mov	r3, r9
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfbc      	itt	lt
 80067d8:	232d      	movlt	r3, #45	; 0x2d
 80067da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067de:	487f      	ldr	r0, [pc, #508]	; (80069dc <_printf_float+0x2e8>)
 80067e0:	4b7f      	ldr	r3, [pc, #508]	; (80069e0 <_printf_float+0x2ec>)
 80067e2:	e7d1      	b.n	8006788 <_printf_float+0x94>
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067ea:	9206      	str	r2, [sp, #24]
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	d13f      	bne.n	8006870 <_printf_float+0x17c>
 80067f0:	2306      	movs	r3, #6
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	9b05      	ldr	r3, [sp, #20]
 80067f6:	6861      	ldr	r1, [r4, #4]
 80067f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067fc:	2300      	movs	r3, #0
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	ab0a      	add	r3, sp, #40	; 0x28
 8006802:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006806:	ab09      	add	r3, sp, #36	; 0x24
 8006808:	ec49 8b10 	vmov	d0, r8, r9
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	6022      	str	r2, [r4, #0]
 8006810:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006814:	4628      	mov	r0, r5
 8006816:	f7ff fecd 	bl	80065b4 <__cvt>
 800681a:	9b06      	ldr	r3, [sp, #24]
 800681c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800681e:	2b47      	cmp	r3, #71	; 0x47
 8006820:	4680      	mov	r8, r0
 8006822:	d108      	bne.n	8006836 <_printf_float+0x142>
 8006824:	1cc8      	adds	r0, r1, #3
 8006826:	db02      	blt.n	800682e <_printf_float+0x13a>
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	4299      	cmp	r1, r3
 800682c:	dd41      	ble.n	80068b2 <_printf_float+0x1be>
 800682e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006832:	fa5f fb8b 	uxtb.w	fp, fp
 8006836:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800683a:	d820      	bhi.n	800687e <_printf_float+0x18a>
 800683c:	3901      	subs	r1, #1
 800683e:	465a      	mov	r2, fp
 8006840:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006844:	9109      	str	r1, [sp, #36]	; 0x24
 8006846:	f7ff ff17 	bl	8006678 <__exponent>
 800684a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684c:	1813      	adds	r3, r2, r0
 800684e:	2a01      	cmp	r2, #1
 8006850:	4681      	mov	r9, r0
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	dc02      	bgt.n	800685c <_printf_float+0x168>
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	07d2      	lsls	r2, r2, #31
 800685a:	d501      	bpl.n	8006860 <_printf_float+0x16c>
 800685c:	3301      	adds	r3, #1
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006864:	2b00      	cmp	r3, #0
 8006866:	d09c      	beq.n	80067a2 <_printf_float+0xae>
 8006868:	232d      	movs	r3, #45	; 0x2d
 800686a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686e:	e798      	b.n	80067a2 <_printf_float+0xae>
 8006870:	9a06      	ldr	r2, [sp, #24]
 8006872:	2a47      	cmp	r2, #71	; 0x47
 8006874:	d1be      	bne.n	80067f4 <_printf_float+0x100>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1bc      	bne.n	80067f4 <_printf_float+0x100>
 800687a:	2301      	movs	r3, #1
 800687c:	e7b9      	b.n	80067f2 <_printf_float+0xfe>
 800687e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006882:	d118      	bne.n	80068b6 <_printf_float+0x1c2>
 8006884:	2900      	cmp	r1, #0
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	dd0b      	ble.n	80068a2 <_printf_float+0x1ae>
 800688a:	6121      	str	r1, [r4, #16]
 800688c:	b913      	cbnz	r3, 8006894 <_printf_float+0x1a0>
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	07d0      	lsls	r0, r2, #31
 8006892:	d502      	bpl.n	800689a <_printf_float+0x1a6>
 8006894:	3301      	adds	r3, #1
 8006896:	440b      	add	r3, r1
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	65a1      	str	r1, [r4, #88]	; 0x58
 800689c:	f04f 0900 	mov.w	r9, #0
 80068a0:	e7de      	b.n	8006860 <_printf_float+0x16c>
 80068a2:	b913      	cbnz	r3, 80068aa <_printf_float+0x1b6>
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	07d2      	lsls	r2, r2, #31
 80068a8:	d501      	bpl.n	80068ae <_printf_float+0x1ba>
 80068aa:	3302      	adds	r3, #2
 80068ac:	e7f4      	b.n	8006898 <_printf_float+0x1a4>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e7f2      	b.n	8006898 <_printf_float+0x1a4>
 80068b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b8:	4299      	cmp	r1, r3
 80068ba:	db05      	blt.n	80068c8 <_printf_float+0x1d4>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	6121      	str	r1, [r4, #16]
 80068c0:	07d8      	lsls	r0, r3, #31
 80068c2:	d5ea      	bpl.n	800689a <_printf_float+0x1a6>
 80068c4:	1c4b      	adds	r3, r1, #1
 80068c6:	e7e7      	b.n	8006898 <_printf_float+0x1a4>
 80068c8:	2900      	cmp	r1, #0
 80068ca:	bfd4      	ite	le
 80068cc:	f1c1 0202 	rsble	r2, r1, #2
 80068d0:	2201      	movgt	r2, #1
 80068d2:	4413      	add	r3, r2
 80068d4:	e7e0      	b.n	8006898 <_printf_float+0x1a4>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	055a      	lsls	r2, r3, #21
 80068da:	d407      	bmi.n	80068ec <_printf_float+0x1f8>
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	4642      	mov	r2, r8
 80068e0:	4631      	mov	r1, r6
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	d12c      	bne.n	8006944 <_printf_float+0x250>
 80068ea:	e764      	b.n	80067b6 <_printf_float+0xc2>
 80068ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068f0:	f240 80e0 	bls.w	8006ab4 <_printf_float+0x3c0>
 80068f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068f8:	2200      	movs	r2, #0
 80068fa:	2300      	movs	r3, #0
 80068fc:	f7fa f8f4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006900:	2800      	cmp	r0, #0
 8006902:	d034      	beq.n	800696e <_printf_float+0x27a>
 8006904:	4a37      	ldr	r2, [pc, #220]	; (80069e4 <_printf_float+0x2f0>)
 8006906:	2301      	movs	r3, #1
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af51 	beq.w	80067b6 <_printf_float+0xc2>
 8006914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006918:	429a      	cmp	r2, r3
 800691a:	db02      	blt.n	8006922 <_printf_float+0x22e>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	07d8      	lsls	r0, r3, #31
 8006920:	d510      	bpl.n	8006944 <_printf_float+0x250>
 8006922:	ee18 3a10 	vmov	r3, s16
 8006926:	4652      	mov	r2, sl
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f af41 	beq.w	80067b6 <_printf_float+0xc2>
 8006934:	f04f 0800 	mov.w	r8, #0
 8006938:	f104 091a 	add.w	r9, r4, #26
 800693c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693e:	3b01      	subs	r3, #1
 8006940:	4543      	cmp	r3, r8
 8006942:	dc09      	bgt.n	8006958 <_printf_float+0x264>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	079b      	lsls	r3, r3, #30
 8006948:	f100 8105 	bmi.w	8006b56 <_printf_float+0x462>
 800694c:	68e0      	ldr	r0, [r4, #12]
 800694e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006950:	4298      	cmp	r0, r3
 8006952:	bfb8      	it	lt
 8006954:	4618      	movlt	r0, r3
 8006956:	e730      	b.n	80067ba <_printf_float+0xc6>
 8006958:	2301      	movs	r3, #1
 800695a:	464a      	mov	r2, r9
 800695c:	4631      	mov	r1, r6
 800695e:	4628      	mov	r0, r5
 8006960:	47b8      	blx	r7
 8006962:	3001      	adds	r0, #1
 8006964:	f43f af27 	beq.w	80067b6 <_printf_float+0xc2>
 8006968:	f108 0801 	add.w	r8, r8, #1
 800696c:	e7e6      	b.n	800693c <_printf_float+0x248>
 800696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006970:	2b00      	cmp	r3, #0
 8006972:	dc39      	bgt.n	80069e8 <_printf_float+0x2f4>
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <_printf_float+0x2f0>)
 8006976:	2301      	movs	r3, #1
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f af19 	beq.w	80067b6 <_printf_float+0xc2>
 8006984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006988:	4313      	orrs	r3, r2
 800698a:	d102      	bne.n	8006992 <_printf_float+0x29e>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	07d9      	lsls	r1, r3, #31
 8006990:	d5d8      	bpl.n	8006944 <_printf_float+0x250>
 8006992:	ee18 3a10 	vmov	r3, s16
 8006996:	4652      	mov	r2, sl
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	f43f af09 	beq.w	80067b6 <_printf_float+0xc2>
 80069a4:	f04f 0900 	mov.w	r9, #0
 80069a8:	f104 0a1a 	add.w	sl, r4, #26
 80069ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ae:	425b      	negs	r3, r3
 80069b0:	454b      	cmp	r3, r9
 80069b2:	dc01      	bgt.n	80069b8 <_printf_float+0x2c4>
 80069b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b6:	e792      	b.n	80068de <_printf_float+0x1ea>
 80069b8:	2301      	movs	r3, #1
 80069ba:	4652      	mov	r2, sl
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f aef7 	beq.w	80067b6 <_printf_float+0xc2>
 80069c8:	f109 0901 	add.w	r9, r9, #1
 80069cc:	e7ee      	b.n	80069ac <_printf_float+0x2b8>
 80069ce:	bf00      	nop
 80069d0:	7fefffff 	.word	0x7fefffff
 80069d4:	0800b07c 	.word	0x0800b07c
 80069d8:	0800b080 	.word	0x0800b080
 80069dc:	0800b088 	.word	0x0800b088
 80069e0:	0800b084 	.word	0x0800b084
 80069e4:	0800b08c 	.word	0x0800b08c
 80069e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069ec:	429a      	cmp	r2, r3
 80069ee:	bfa8      	it	ge
 80069f0:	461a      	movge	r2, r3
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	4691      	mov	r9, r2
 80069f6:	dc37      	bgt.n	8006a68 <_printf_float+0x374>
 80069f8:	f04f 0b00 	mov.w	fp, #0
 80069fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a00:	f104 021a 	add.w	r2, r4, #26
 8006a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a06:	9305      	str	r3, [sp, #20]
 8006a08:	eba3 0309 	sub.w	r3, r3, r9
 8006a0c:	455b      	cmp	r3, fp
 8006a0e:	dc33      	bgt.n	8006a78 <_printf_float+0x384>
 8006a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a14:	429a      	cmp	r2, r3
 8006a16:	db3b      	blt.n	8006a90 <_printf_float+0x39c>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	07da      	lsls	r2, r3, #31
 8006a1c:	d438      	bmi.n	8006a90 <_printf_float+0x39c>
 8006a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a20:	9a05      	ldr	r2, [sp, #20]
 8006a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a24:	1a9a      	subs	r2, r3, r2
 8006a26:	eba3 0901 	sub.w	r9, r3, r1
 8006a2a:	4591      	cmp	r9, r2
 8006a2c:	bfa8      	it	ge
 8006a2e:	4691      	movge	r9, r2
 8006a30:	f1b9 0f00 	cmp.w	r9, #0
 8006a34:	dc35      	bgt.n	8006aa2 <_printf_float+0x3ae>
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a3e:	f104 0a1a 	add.w	sl, r4, #26
 8006a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a46:	1a9b      	subs	r3, r3, r2
 8006a48:	eba3 0309 	sub.w	r3, r3, r9
 8006a4c:	4543      	cmp	r3, r8
 8006a4e:	f77f af79 	ble.w	8006944 <_printf_float+0x250>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4652      	mov	r2, sl
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f43f aeaa 	beq.w	80067b6 <_printf_float+0xc2>
 8006a62:	f108 0801 	add.w	r8, r8, #1
 8006a66:	e7ec      	b.n	8006a42 <_printf_float+0x34e>
 8006a68:	4613      	mov	r3, r2
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	4628      	mov	r0, r5
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	d1c0      	bne.n	80069f8 <_printf_float+0x304>
 8006a76:	e69e      	b.n	80067b6 <_printf_float+0xc2>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	9205      	str	r2, [sp, #20]
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	f43f ae97 	beq.w	80067b6 <_printf_float+0xc2>
 8006a88:	9a05      	ldr	r2, [sp, #20]
 8006a8a:	f10b 0b01 	add.w	fp, fp, #1
 8006a8e:	e7b9      	b.n	8006a04 <_printf_float+0x310>
 8006a90:	ee18 3a10 	vmov	r3, s16
 8006a94:	4652      	mov	r2, sl
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d1be      	bne.n	8006a1e <_printf_float+0x32a>
 8006aa0:	e689      	b.n	80067b6 <_printf_float+0xc2>
 8006aa2:	9a05      	ldr	r2, [sp, #20]
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	4442      	add	r2, r8
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d1c1      	bne.n	8006a36 <_printf_float+0x342>
 8006ab2:	e680      	b.n	80067b6 <_printf_float+0xc2>
 8006ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ab6:	2a01      	cmp	r2, #1
 8006ab8:	dc01      	bgt.n	8006abe <_printf_float+0x3ca>
 8006aba:	07db      	lsls	r3, r3, #31
 8006abc:	d538      	bpl.n	8006b30 <_printf_float+0x43c>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae74 	beq.w	80067b6 <_printf_float+0xc2>
 8006ace:	ee18 3a10 	vmov	r3, s16
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	f43f ae6b 	beq.w	80067b6 <_printf_float+0xc2>
 8006ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f7f9 fffe 	bl	8000ae8 <__aeabi_dcmpeq>
 8006aec:	b9d8      	cbnz	r0, 8006b26 <_printf_float+0x432>
 8006aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af0:	f108 0201 	add.w	r2, r8, #1
 8006af4:	3b01      	subs	r3, #1
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	d10e      	bne.n	8006b1e <_printf_float+0x42a>
 8006b00:	e659      	b.n	80067b6 <_printf_float+0xc2>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4652      	mov	r2, sl
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f ae52 	beq.w	80067b6 <_printf_float+0xc2>
 8006b12:	f108 0801 	add.w	r8, r8, #1
 8006b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	4543      	cmp	r3, r8
 8006b1c:	dcf1      	bgt.n	8006b02 <_printf_float+0x40e>
 8006b1e:	464b      	mov	r3, r9
 8006b20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b24:	e6dc      	b.n	80068e0 <_printf_float+0x1ec>
 8006b26:	f04f 0800 	mov.w	r8, #0
 8006b2a:	f104 0a1a 	add.w	sl, r4, #26
 8006b2e:	e7f2      	b.n	8006b16 <_printf_float+0x422>
 8006b30:	2301      	movs	r3, #1
 8006b32:	4642      	mov	r2, r8
 8006b34:	e7df      	b.n	8006af6 <_printf_float+0x402>
 8006b36:	2301      	movs	r3, #1
 8006b38:	464a      	mov	r2, r9
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	f43f ae38 	beq.w	80067b6 <_printf_float+0xc2>
 8006b46:	f108 0801 	add.w	r8, r8, #1
 8006b4a:	68e3      	ldr	r3, [r4, #12]
 8006b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b4e:	1a5b      	subs	r3, r3, r1
 8006b50:	4543      	cmp	r3, r8
 8006b52:	dcf0      	bgt.n	8006b36 <_printf_float+0x442>
 8006b54:	e6fa      	b.n	800694c <_printf_float+0x258>
 8006b56:	f04f 0800 	mov.w	r8, #0
 8006b5a:	f104 0919 	add.w	r9, r4, #25
 8006b5e:	e7f4      	b.n	8006b4a <_printf_float+0x456>

08006b60 <_printf_common>:
 8006b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	4616      	mov	r6, r2
 8006b66:	4699      	mov	r9, r3
 8006b68:	688a      	ldr	r2, [r1, #8]
 8006b6a:	690b      	ldr	r3, [r1, #16]
 8006b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b70:	4293      	cmp	r3, r2
 8006b72:	bfb8      	it	lt
 8006b74:	4613      	movlt	r3, r2
 8006b76:	6033      	str	r3, [r6, #0]
 8006b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	b10a      	cbz	r2, 8006b86 <_printf_common+0x26>
 8006b82:	3301      	adds	r3, #1
 8006b84:	6033      	str	r3, [r6, #0]
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	0699      	lsls	r1, r3, #26
 8006b8a:	bf42      	ittt	mi
 8006b8c:	6833      	ldrmi	r3, [r6, #0]
 8006b8e:	3302      	addmi	r3, #2
 8006b90:	6033      	strmi	r3, [r6, #0]
 8006b92:	6825      	ldr	r5, [r4, #0]
 8006b94:	f015 0506 	ands.w	r5, r5, #6
 8006b98:	d106      	bne.n	8006ba8 <_printf_common+0x48>
 8006b9a:	f104 0a19 	add.w	sl, r4, #25
 8006b9e:	68e3      	ldr	r3, [r4, #12]
 8006ba0:	6832      	ldr	r2, [r6, #0]
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	42ab      	cmp	r3, r5
 8006ba6:	dc26      	bgt.n	8006bf6 <_printf_common+0x96>
 8006ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bac:	1e13      	subs	r3, r2, #0
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	bf18      	it	ne
 8006bb2:	2301      	movne	r3, #1
 8006bb4:	0692      	lsls	r2, r2, #26
 8006bb6:	d42b      	bmi.n	8006c10 <_printf_common+0xb0>
 8006bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	47c0      	blx	r8
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d01e      	beq.n	8006c04 <_printf_common+0xa4>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	68e5      	ldr	r5, [r4, #12]
 8006bca:	6832      	ldr	r2, [r6, #0]
 8006bcc:	f003 0306 	and.w	r3, r3, #6
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	bf08      	it	eq
 8006bd4:	1aad      	subeq	r5, r5, r2
 8006bd6:	68a3      	ldr	r3, [r4, #8]
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	bf0c      	ite	eq
 8006bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be0:	2500      	movne	r5, #0
 8006be2:	4293      	cmp	r3, r2
 8006be4:	bfc4      	itt	gt
 8006be6:	1a9b      	subgt	r3, r3, r2
 8006be8:	18ed      	addgt	r5, r5, r3
 8006bea:	2600      	movs	r6, #0
 8006bec:	341a      	adds	r4, #26
 8006bee:	42b5      	cmp	r5, r6
 8006bf0:	d11a      	bne.n	8006c28 <_printf_common+0xc8>
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e008      	b.n	8006c08 <_printf_common+0xa8>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4652      	mov	r2, sl
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	47c0      	blx	r8
 8006c00:	3001      	adds	r0, #1
 8006c02:	d103      	bne.n	8006c0c <_printf_common+0xac>
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	e7c6      	b.n	8006b9e <_printf_common+0x3e>
 8006c10:	18e1      	adds	r1, r4, r3
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	2030      	movs	r0, #48	; 0x30
 8006c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c1a:	4422      	add	r2, r4
 8006c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c24:	3302      	adds	r3, #2
 8006c26:	e7c7      	b.n	8006bb8 <_printf_common+0x58>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4638      	mov	r0, r7
 8006c30:	47c0      	blx	r8
 8006c32:	3001      	adds	r0, #1
 8006c34:	d0e6      	beq.n	8006c04 <_printf_common+0xa4>
 8006c36:	3601      	adds	r6, #1
 8006c38:	e7d9      	b.n	8006bee <_printf_common+0x8e>
	...

08006c3c <_printf_i>:
 8006c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c40:	7e0f      	ldrb	r7, [r1, #24]
 8006c42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c44:	2f78      	cmp	r7, #120	; 0x78
 8006c46:	4691      	mov	r9, r2
 8006c48:	4680      	mov	r8, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	469a      	mov	sl, r3
 8006c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c52:	d807      	bhi.n	8006c64 <_printf_i+0x28>
 8006c54:	2f62      	cmp	r7, #98	; 0x62
 8006c56:	d80a      	bhi.n	8006c6e <_printf_i+0x32>
 8006c58:	2f00      	cmp	r7, #0
 8006c5a:	f000 80d8 	beq.w	8006e0e <_printf_i+0x1d2>
 8006c5e:	2f58      	cmp	r7, #88	; 0x58
 8006c60:	f000 80a3 	beq.w	8006daa <_printf_i+0x16e>
 8006c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c6c:	e03a      	b.n	8006ce4 <_printf_i+0xa8>
 8006c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c72:	2b15      	cmp	r3, #21
 8006c74:	d8f6      	bhi.n	8006c64 <_printf_i+0x28>
 8006c76:	a101      	add	r1, pc, #4	; (adr r1, 8006c7c <_printf_i+0x40>)
 8006c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c7c:	08006cd5 	.word	0x08006cd5
 8006c80:	08006ce9 	.word	0x08006ce9
 8006c84:	08006c65 	.word	0x08006c65
 8006c88:	08006c65 	.word	0x08006c65
 8006c8c:	08006c65 	.word	0x08006c65
 8006c90:	08006c65 	.word	0x08006c65
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006c65 	.word	0x08006c65
 8006c9c:	08006c65 	.word	0x08006c65
 8006ca0:	08006c65 	.word	0x08006c65
 8006ca4:	08006c65 	.word	0x08006c65
 8006ca8:	08006df5 	.word	0x08006df5
 8006cac:	08006d19 	.word	0x08006d19
 8006cb0:	08006dd7 	.word	0x08006dd7
 8006cb4:	08006c65 	.word	0x08006c65
 8006cb8:	08006c65 	.word	0x08006c65
 8006cbc:	08006e17 	.word	0x08006e17
 8006cc0:	08006c65 	.word	0x08006c65
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006c65 	.word	0x08006c65
 8006ccc:	08006c65 	.word	0x08006c65
 8006cd0:	08006ddf 	.word	0x08006ddf
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	1d1a      	adds	r2, r3, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	602a      	str	r2, [r5, #0]
 8006cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0a3      	b.n	8006e30 <_printf_i+0x1f4>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	6829      	ldr	r1, [r5, #0]
 8006cec:	0606      	lsls	r6, r0, #24
 8006cee:	f101 0304 	add.w	r3, r1, #4
 8006cf2:	d50a      	bpl.n	8006d0a <_printf_i+0xce>
 8006cf4:	680e      	ldr	r6, [r1, #0]
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	2e00      	cmp	r6, #0
 8006cfa:	da03      	bge.n	8006d04 <_printf_i+0xc8>
 8006cfc:	232d      	movs	r3, #45	; 0x2d
 8006cfe:	4276      	negs	r6, r6
 8006d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d04:	485e      	ldr	r0, [pc, #376]	; (8006e80 <_printf_i+0x244>)
 8006d06:	230a      	movs	r3, #10
 8006d08:	e019      	b.n	8006d3e <_printf_i+0x102>
 8006d0a:	680e      	ldr	r6, [r1, #0]
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d12:	bf18      	it	ne
 8006d14:	b236      	sxthne	r6, r6
 8006d16:	e7ef      	b.n	8006cf8 <_printf_i+0xbc>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1d19      	adds	r1, r3, #4
 8006d1e:	6029      	str	r1, [r5, #0]
 8006d20:	0601      	lsls	r1, r0, #24
 8006d22:	d501      	bpl.n	8006d28 <_printf_i+0xec>
 8006d24:	681e      	ldr	r6, [r3, #0]
 8006d26:	e002      	b.n	8006d2e <_printf_i+0xf2>
 8006d28:	0646      	lsls	r6, r0, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0xe8>
 8006d2c:	881e      	ldrh	r6, [r3, #0]
 8006d2e:	4854      	ldr	r0, [pc, #336]	; (8006e80 <_printf_i+0x244>)
 8006d30:	2f6f      	cmp	r7, #111	; 0x6f
 8006d32:	bf0c      	ite	eq
 8006d34:	2308      	moveq	r3, #8
 8006d36:	230a      	movne	r3, #10
 8006d38:	2100      	movs	r1, #0
 8006d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d3e:	6865      	ldr	r5, [r4, #4]
 8006d40:	60a5      	str	r5, [r4, #8]
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	bfa2      	ittt	ge
 8006d46:	6821      	ldrge	r1, [r4, #0]
 8006d48:	f021 0104 	bicge.w	r1, r1, #4
 8006d4c:	6021      	strge	r1, [r4, #0]
 8006d4e:	b90e      	cbnz	r6, 8006d54 <_printf_i+0x118>
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	d04d      	beq.n	8006df0 <_printf_i+0x1b4>
 8006d54:	4615      	mov	r5, r2
 8006d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8006d5e:	5dc7      	ldrb	r7, [r0, r7]
 8006d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d64:	4637      	mov	r7, r6
 8006d66:	42bb      	cmp	r3, r7
 8006d68:	460e      	mov	r6, r1
 8006d6a:	d9f4      	bls.n	8006d56 <_printf_i+0x11a>
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d10b      	bne.n	8006d88 <_printf_i+0x14c>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	07de      	lsls	r6, r3, #31
 8006d74:	d508      	bpl.n	8006d88 <_printf_i+0x14c>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	6861      	ldr	r1, [r4, #4]
 8006d7a:	4299      	cmp	r1, r3
 8006d7c:	bfde      	ittt	le
 8006d7e:	2330      	movle	r3, #48	; 0x30
 8006d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d88:	1b52      	subs	r2, r2, r5
 8006d8a:	6122      	str	r2, [r4, #16]
 8006d8c:	f8cd a000 	str.w	sl, [sp]
 8006d90:	464b      	mov	r3, r9
 8006d92:	aa03      	add	r2, sp, #12
 8006d94:	4621      	mov	r1, r4
 8006d96:	4640      	mov	r0, r8
 8006d98:	f7ff fee2 	bl	8006b60 <_printf_common>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d14c      	bne.n	8006e3a <_printf_i+0x1fe>
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	b004      	add	sp, #16
 8006da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006daa:	4835      	ldr	r0, [pc, #212]	; (8006e80 <_printf_i+0x244>)
 8006dac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006db0:	6829      	ldr	r1, [r5, #0]
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006db8:	6029      	str	r1, [r5, #0]
 8006dba:	061d      	lsls	r5, r3, #24
 8006dbc:	d514      	bpl.n	8006de8 <_printf_i+0x1ac>
 8006dbe:	07df      	lsls	r7, r3, #31
 8006dc0:	bf44      	itt	mi
 8006dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8006dc6:	6023      	strmi	r3, [r4, #0]
 8006dc8:	b91e      	cbnz	r6, 8006dd2 <_printf_i+0x196>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	f023 0320 	bic.w	r3, r3, #32
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	e7b0      	b.n	8006d38 <_printf_i+0xfc>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f043 0320 	orr.w	r3, r3, #32
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	2378      	movs	r3, #120	; 0x78
 8006de0:	4828      	ldr	r0, [pc, #160]	; (8006e84 <_printf_i+0x248>)
 8006de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006de6:	e7e3      	b.n	8006db0 <_printf_i+0x174>
 8006de8:	0659      	lsls	r1, r3, #25
 8006dea:	bf48      	it	mi
 8006dec:	b2b6      	uxthmi	r6, r6
 8006dee:	e7e6      	b.n	8006dbe <_printf_i+0x182>
 8006df0:	4615      	mov	r5, r2
 8006df2:	e7bb      	b.n	8006d6c <_printf_i+0x130>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	6826      	ldr	r6, [r4, #0]
 8006df8:	6961      	ldr	r1, [r4, #20]
 8006dfa:	1d18      	adds	r0, r3, #4
 8006dfc:	6028      	str	r0, [r5, #0]
 8006dfe:	0635      	lsls	r5, r6, #24
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	d501      	bpl.n	8006e08 <_printf_i+0x1cc>
 8006e04:	6019      	str	r1, [r3, #0]
 8006e06:	e002      	b.n	8006e0e <_printf_i+0x1d2>
 8006e08:	0670      	lsls	r0, r6, #25
 8006e0a:	d5fb      	bpl.n	8006e04 <_printf_i+0x1c8>
 8006e0c:	8019      	strh	r1, [r3, #0]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6123      	str	r3, [r4, #16]
 8006e12:	4615      	mov	r5, r2
 8006e14:	e7ba      	b.n	8006d8c <_printf_i+0x150>
 8006e16:	682b      	ldr	r3, [r5, #0]
 8006e18:	1d1a      	adds	r2, r3, #4
 8006e1a:	602a      	str	r2, [r5, #0]
 8006e1c:	681d      	ldr	r5, [r3, #0]
 8006e1e:	6862      	ldr	r2, [r4, #4]
 8006e20:	2100      	movs	r1, #0
 8006e22:	4628      	mov	r0, r5
 8006e24:	f7f9 f9ec 	bl	8000200 <memchr>
 8006e28:	b108      	cbz	r0, 8006e2e <_printf_i+0x1f2>
 8006e2a:	1b40      	subs	r0, r0, r5
 8006e2c:	6060      	str	r0, [r4, #4]
 8006e2e:	6863      	ldr	r3, [r4, #4]
 8006e30:	6123      	str	r3, [r4, #16]
 8006e32:	2300      	movs	r3, #0
 8006e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e38:	e7a8      	b.n	8006d8c <_printf_i+0x150>
 8006e3a:	6923      	ldr	r3, [r4, #16]
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4640      	mov	r0, r8
 8006e42:	47d0      	blx	sl
 8006e44:	3001      	adds	r0, #1
 8006e46:	d0ab      	beq.n	8006da0 <_printf_i+0x164>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	079b      	lsls	r3, r3, #30
 8006e4c:	d413      	bmi.n	8006e76 <_printf_i+0x23a>
 8006e4e:	68e0      	ldr	r0, [r4, #12]
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	4298      	cmp	r0, r3
 8006e54:	bfb8      	it	lt
 8006e56:	4618      	movlt	r0, r3
 8006e58:	e7a4      	b.n	8006da4 <_printf_i+0x168>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	4649      	mov	r1, r9
 8006e60:	4640      	mov	r0, r8
 8006e62:	47d0      	blx	sl
 8006e64:	3001      	adds	r0, #1
 8006e66:	d09b      	beq.n	8006da0 <_printf_i+0x164>
 8006e68:	3501      	adds	r5, #1
 8006e6a:	68e3      	ldr	r3, [r4, #12]
 8006e6c:	9903      	ldr	r1, [sp, #12]
 8006e6e:	1a5b      	subs	r3, r3, r1
 8006e70:	42ab      	cmp	r3, r5
 8006e72:	dcf2      	bgt.n	8006e5a <_printf_i+0x21e>
 8006e74:	e7eb      	b.n	8006e4e <_printf_i+0x212>
 8006e76:	2500      	movs	r5, #0
 8006e78:	f104 0619 	add.w	r6, r4, #25
 8006e7c:	e7f5      	b.n	8006e6a <_printf_i+0x22e>
 8006e7e:	bf00      	nop
 8006e80:	0800b08e 	.word	0x0800b08e
 8006e84:	0800b09f 	.word	0x0800b09f

08006e88 <_scanf_float>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	b087      	sub	sp, #28
 8006e8e:	4617      	mov	r7, r2
 8006e90:	9303      	str	r3, [sp, #12]
 8006e92:	688b      	ldr	r3, [r1, #8]
 8006e94:	1e5a      	subs	r2, r3, #1
 8006e96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e9a:	bf83      	ittte	hi
 8006e9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ea0:	195b      	addhi	r3, r3, r5
 8006ea2:	9302      	strhi	r3, [sp, #8]
 8006ea4:	2300      	movls	r3, #0
 8006ea6:	bf86      	itte	hi
 8006ea8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006eac:	608b      	strhi	r3, [r1, #8]
 8006eae:	9302      	strls	r3, [sp, #8]
 8006eb0:	680b      	ldr	r3, [r1, #0]
 8006eb2:	468b      	mov	fp, r1
 8006eb4:	2500      	movs	r5, #0
 8006eb6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006eba:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ebe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	465e      	mov	r6, fp
 8006ec8:	46aa      	mov	sl, r5
 8006eca:	46a9      	mov	r9, r5
 8006ecc:	9501      	str	r5, [sp, #4]
 8006ece:	68a2      	ldr	r2, [r4, #8]
 8006ed0:	b152      	cbz	r2, 8006ee8 <_scanf_float+0x60>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ed8:	d864      	bhi.n	8006fa4 <_scanf_float+0x11c>
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d83c      	bhi.n	8006f58 <_scanf_float+0xd0>
 8006ede:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ee2:	b2c8      	uxtb	r0, r1
 8006ee4:	280e      	cmp	r0, #14
 8006ee6:	d93a      	bls.n	8006f5e <_scanf_float+0xd6>
 8006ee8:	f1b9 0f00 	cmp.w	r9, #0
 8006eec:	d003      	beq.n	8006ef6 <_scanf_float+0x6e>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006efa:	f1ba 0f01 	cmp.w	sl, #1
 8006efe:	f200 8113 	bhi.w	8007128 <_scanf_float+0x2a0>
 8006f02:	455e      	cmp	r6, fp
 8006f04:	f200 8105 	bhi.w	8007112 <_scanf_float+0x28a>
 8006f08:	2501      	movs	r5, #1
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	b007      	add	sp, #28
 8006f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f16:	2a0d      	cmp	r2, #13
 8006f18:	d8e6      	bhi.n	8006ee8 <_scanf_float+0x60>
 8006f1a:	a101      	add	r1, pc, #4	; (adr r1, 8006f20 <_scanf_float+0x98>)
 8006f1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f20:	0800705f 	.word	0x0800705f
 8006f24:	08006ee9 	.word	0x08006ee9
 8006f28:	08006ee9 	.word	0x08006ee9
 8006f2c:	08006ee9 	.word	0x08006ee9
 8006f30:	080070bf 	.word	0x080070bf
 8006f34:	08007097 	.word	0x08007097
 8006f38:	08006ee9 	.word	0x08006ee9
 8006f3c:	08006ee9 	.word	0x08006ee9
 8006f40:	0800706d 	.word	0x0800706d
 8006f44:	08006ee9 	.word	0x08006ee9
 8006f48:	08006ee9 	.word	0x08006ee9
 8006f4c:	08006ee9 	.word	0x08006ee9
 8006f50:	08006ee9 	.word	0x08006ee9
 8006f54:	08007025 	.word	0x08007025
 8006f58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f5c:	e7db      	b.n	8006f16 <_scanf_float+0x8e>
 8006f5e:	290e      	cmp	r1, #14
 8006f60:	d8c2      	bhi.n	8006ee8 <_scanf_float+0x60>
 8006f62:	a001      	add	r0, pc, #4	; (adr r0, 8006f68 <_scanf_float+0xe0>)
 8006f64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f68:	08007017 	.word	0x08007017
 8006f6c:	08006ee9 	.word	0x08006ee9
 8006f70:	08007017 	.word	0x08007017
 8006f74:	080070ab 	.word	0x080070ab
 8006f78:	08006ee9 	.word	0x08006ee9
 8006f7c:	08006fc5 	.word	0x08006fc5
 8006f80:	08007001 	.word	0x08007001
 8006f84:	08007001 	.word	0x08007001
 8006f88:	08007001 	.word	0x08007001
 8006f8c:	08007001 	.word	0x08007001
 8006f90:	08007001 	.word	0x08007001
 8006f94:	08007001 	.word	0x08007001
 8006f98:	08007001 	.word	0x08007001
 8006f9c:	08007001 	.word	0x08007001
 8006fa0:	08007001 	.word	0x08007001
 8006fa4:	2b6e      	cmp	r3, #110	; 0x6e
 8006fa6:	d809      	bhi.n	8006fbc <_scanf_float+0x134>
 8006fa8:	2b60      	cmp	r3, #96	; 0x60
 8006faa:	d8b2      	bhi.n	8006f12 <_scanf_float+0x8a>
 8006fac:	2b54      	cmp	r3, #84	; 0x54
 8006fae:	d077      	beq.n	80070a0 <_scanf_float+0x218>
 8006fb0:	2b59      	cmp	r3, #89	; 0x59
 8006fb2:	d199      	bne.n	8006ee8 <_scanf_float+0x60>
 8006fb4:	2d07      	cmp	r5, #7
 8006fb6:	d197      	bne.n	8006ee8 <_scanf_float+0x60>
 8006fb8:	2508      	movs	r5, #8
 8006fba:	e029      	b.n	8007010 <_scanf_float+0x188>
 8006fbc:	2b74      	cmp	r3, #116	; 0x74
 8006fbe:	d06f      	beq.n	80070a0 <_scanf_float+0x218>
 8006fc0:	2b79      	cmp	r3, #121	; 0x79
 8006fc2:	e7f6      	b.n	8006fb2 <_scanf_float+0x12a>
 8006fc4:	6821      	ldr	r1, [r4, #0]
 8006fc6:	05c8      	lsls	r0, r1, #23
 8006fc8:	d51a      	bpl.n	8007000 <_scanf_float+0x178>
 8006fca:	9b02      	ldr	r3, [sp, #8]
 8006fcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fd0:	6021      	str	r1, [r4, #0]
 8006fd2:	f109 0901 	add.w	r9, r9, #1
 8006fd6:	b11b      	cbz	r3, 8006fe0 <_scanf_float+0x158>
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	3201      	adds	r2, #1
 8006fdc:	9302      	str	r3, [sp, #8]
 8006fde:	60a2      	str	r2, [r4, #8]
 8006fe0:	68a3      	ldr	r3, [r4, #8]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	60a3      	str	r3, [r4, #8]
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	f340 8084 	ble.w	8007100 <_scanf_float+0x278>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	e766      	b.n	8006ece <_scanf_float+0x46>
 8007000:	eb1a 0f05 	cmn.w	sl, r5
 8007004:	f47f af70 	bne.w	8006ee8 <_scanf_float+0x60>
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800700e:	6022      	str	r2, [r4, #0]
 8007010:	f806 3b01 	strb.w	r3, [r6], #1
 8007014:	e7e4      	b.n	8006fe0 <_scanf_float+0x158>
 8007016:	6822      	ldr	r2, [r4, #0]
 8007018:	0610      	lsls	r0, r2, #24
 800701a:	f57f af65 	bpl.w	8006ee8 <_scanf_float+0x60>
 800701e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007022:	e7f4      	b.n	800700e <_scanf_float+0x186>
 8007024:	f1ba 0f00 	cmp.w	sl, #0
 8007028:	d10e      	bne.n	8007048 <_scanf_float+0x1c0>
 800702a:	f1b9 0f00 	cmp.w	r9, #0
 800702e:	d10e      	bne.n	800704e <_scanf_float+0x1c6>
 8007030:	6822      	ldr	r2, [r4, #0]
 8007032:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007036:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800703a:	d108      	bne.n	800704e <_scanf_float+0x1c6>
 800703c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007040:	6022      	str	r2, [r4, #0]
 8007042:	f04f 0a01 	mov.w	sl, #1
 8007046:	e7e3      	b.n	8007010 <_scanf_float+0x188>
 8007048:	f1ba 0f02 	cmp.w	sl, #2
 800704c:	d055      	beq.n	80070fa <_scanf_float+0x272>
 800704e:	2d01      	cmp	r5, #1
 8007050:	d002      	beq.n	8007058 <_scanf_float+0x1d0>
 8007052:	2d04      	cmp	r5, #4
 8007054:	f47f af48 	bne.w	8006ee8 <_scanf_float+0x60>
 8007058:	3501      	adds	r5, #1
 800705a:	b2ed      	uxtb	r5, r5
 800705c:	e7d8      	b.n	8007010 <_scanf_float+0x188>
 800705e:	f1ba 0f01 	cmp.w	sl, #1
 8007062:	f47f af41 	bne.w	8006ee8 <_scanf_float+0x60>
 8007066:	f04f 0a02 	mov.w	sl, #2
 800706a:	e7d1      	b.n	8007010 <_scanf_float+0x188>
 800706c:	b97d      	cbnz	r5, 800708e <_scanf_float+0x206>
 800706e:	f1b9 0f00 	cmp.w	r9, #0
 8007072:	f47f af3c 	bne.w	8006eee <_scanf_float+0x66>
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800707c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007080:	f47f af39 	bne.w	8006ef6 <_scanf_float+0x6e>
 8007084:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007088:	6022      	str	r2, [r4, #0]
 800708a:	2501      	movs	r5, #1
 800708c:	e7c0      	b.n	8007010 <_scanf_float+0x188>
 800708e:	2d03      	cmp	r5, #3
 8007090:	d0e2      	beq.n	8007058 <_scanf_float+0x1d0>
 8007092:	2d05      	cmp	r5, #5
 8007094:	e7de      	b.n	8007054 <_scanf_float+0x1cc>
 8007096:	2d02      	cmp	r5, #2
 8007098:	f47f af26 	bne.w	8006ee8 <_scanf_float+0x60>
 800709c:	2503      	movs	r5, #3
 800709e:	e7b7      	b.n	8007010 <_scanf_float+0x188>
 80070a0:	2d06      	cmp	r5, #6
 80070a2:	f47f af21 	bne.w	8006ee8 <_scanf_float+0x60>
 80070a6:	2507      	movs	r5, #7
 80070a8:	e7b2      	b.n	8007010 <_scanf_float+0x188>
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	0591      	lsls	r1, r2, #22
 80070ae:	f57f af1b 	bpl.w	8006ee8 <_scanf_float+0x60>
 80070b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070b6:	6022      	str	r2, [r4, #0]
 80070b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80070bc:	e7a8      	b.n	8007010 <_scanf_float+0x188>
 80070be:	6822      	ldr	r2, [r4, #0]
 80070c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070c8:	d006      	beq.n	80070d8 <_scanf_float+0x250>
 80070ca:	0550      	lsls	r0, r2, #21
 80070cc:	f57f af0c 	bpl.w	8006ee8 <_scanf_float+0x60>
 80070d0:	f1b9 0f00 	cmp.w	r9, #0
 80070d4:	f43f af0f 	beq.w	8006ef6 <_scanf_float+0x6e>
 80070d8:	0591      	lsls	r1, r2, #22
 80070da:	bf58      	it	pl
 80070dc:	9901      	ldrpl	r1, [sp, #4]
 80070de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070e2:	bf58      	it	pl
 80070e4:	eba9 0101 	subpl.w	r1, r9, r1
 80070e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80070ec:	bf58      	it	pl
 80070ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	f04f 0900 	mov.w	r9, #0
 80070f8:	e78a      	b.n	8007010 <_scanf_float+0x188>
 80070fa:	f04f 0a03 	mov.w	sl, #3
 80070fe:	e787      	b.n	8007010 <_scanf_float+0x188>
 8007100:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007104:	4639      	mov	r1, r7
 8007106:	4640      	mov	r0, r8
 8007108:	4798      	blx	r3
 800710a:	2800      	cmp	r0, #0
 800710c:	f43f aedf 	beq.w	8006ece <_scanf_float+0x46>
 8007110:	e6ea      	b.n	8006ee8 <_scanf_float+0x60>
 8007112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007116:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800711a:	463a      	mov	r2, r7
 800711c:	4640      	mov	r0, r8
 800711e:	4798      	blx	r3
 8007120:	6923      	ldr	r3, [r4, #16]
 8007122:	3b01      	subs	r3, #1
 8007124:	6123      	str	r3, [r4, #16]
 8007126:	e6ec      	b.n	8006f02 <_scanf_float+0x7a>
 8007128:	1e6b      	subs	r3, r5, #1
 800712a:	2b06      	cmp	r3, #6
 800712c:	d825      	bhi.n	800717a <_scanf_float+0x2f2>
 800712e:	2d02      	cmp	r5, #2
 8007130:	d836      	bhi.n	80071a0 <_scanf_float+0x318>
 8007132:	455e      	cmp	r6, fp
 8007134:	f67f aee8 	bls.w	8006f08 <_scanf_float+0x80>
 8007138:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800713c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007140:	463a      	mov	r2, r7
 8007142:	4640      	mov	r0, r8
 8007144:	4798      	blx	r3
 8007146:	6923      	ldr	r3, [r4, #16]
 8007148:	3b01      	subs	r3, #1
 800714a:	6123      	str	r3, [r4, #16]
 800714c:	e7f1      	b.n	8007132 <_scanf_float+0x2aa>
 800714e:	9802      	ldr	r0, [sp, #8]
 8007150:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007154:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007158:	9002      	str	r0, [sp, #8]
 800715a:	463a      	mov	r2, r7
 800715c:	4640      	mov	r0, r8
 800715e:	4798      	blx	r3
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	3b01      	subs	r3, #1
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800716a:	fa5f fa8a 	uxtb.w	sl, sl
 800716e:	f1ba 0f02 	cmp.w	sl, #2
 8007172:	d1ec      	bne.n	800714e <_scanf_float+0x2c6>
 8007174:	3d03      	subs	r5, #3
 8007176:	b2ed      	uxtb	r5, r5
 8007178:	1b76      	subs	r6, r6, r5
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	05da      	lsls	r2, r3, #23
 800717e:	d52f      	bpl.n	80071e0 <_scanf_float+0x358>
 8007180:	055b      	lsls	r3, r3, #21
 8007182:	d510      	bpl.n	80071a6 <_scanf_float+0x31e>
 8007184:	455e      	cmp	r6, fp
 8007186:	f67f aebf 	bls.w	8006f08 <_scanf_float+0x80>
 800718a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800718e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007192:	463a      	mov	r2, r7
 8007194:	4640      	mov	r0, r8
 8007196:	4798      	blx	r3
 8007198:	6923      	ldr	r3, [r4, #16]
 800719a:	3b01      	subs	r3, #1
 800719c:	6123      	str	r3, [r4, #16]
 800719e:	e7f1      	b.n	8007184 <_scanf_float+0x2fc>
 80071a0:	46aa      	mov	sl, r5
 80071a2:	9602      	str	r6, [sp, #8]
 80071a4:	e7df      	b.n	8007166 <_scanf_float+0x2de>
 80071a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071aa:	6923      	ldr	r3, [r4, #16]
 80071ac:	2965      	cmp	r1, #101	; 0x65
 80071ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80071b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80071b6:	6123      	str	r3, [r4, #16]
 80071b8:	d00c      	beq.n	80071d4 <_scanf_float+0x34c>
 80071ba:	2945      	cmp	r1, #69	; 0x45
 80071bc:	d00a      	beq.n	80071d4 <_scanf_float+0x34c>
 80071be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071c2:	463a      	mov	r2, r7
 80071c4:	4640      	mov	r0, r8
 80071c6:	4798      	blx	r3
 80071c8:	6923      	ldr	r3, [r4, #16]
 80071ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	1eb5      	subs	r5, r6, #2
 80071d2:	6123      	str	r3, [r4, #16]
 80071d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071d8:	463a      	mov	r2, r7
 80071da:	4640      	mov	r0, r8
 80071dc:	4798      	blx	r3
 80071de:	462e      	mov	r6, r5
 80071e0:	6825      	ldr	r5, [r4, #0]
 80071e2:	f015 0510 	ands.w	r5, r5, #16
 80071e6:	d159      	bne.n	800729c <_scanf_float+0x414>
 80071e8:	7035      	strb	r5, [r6, #0]
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f4:	d11b      	bne.n	800722e <_scanf_float+0x3a6>
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	454b      	cmp	r3, r9
 80071fa:	eba3 0209 	sub.w	r2, r3, r9
 80071fe:	d123      	bne.n	8007248 <_scanf_float+0x3c0>
 8007200:	2200      	movs	r2, #0
 8007202:	4659      	mov	r1, fp
 8007204:	4640      	mov	r0, r8
 8007206:	f000 ff25 	bl	8008054 <_strtod_r>
 800720a:	6822      	ldr	r2, [r4, #0]
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	f012 0f02 	tst.w	r2, #2
 8007212:	ec57 6b10 	vmov	r6, r7, d0
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	d021      	beq.n	800725e <_scanf_float+0x3d6>
 800721a:	9903      	ldr	r1, [sp, #12]
 800721c:	1d1a      	adds	r2, r3, #4
 800721e:	600a      	str	r2, [r1, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	e9c3 6700 	strd	r6, r7, [r3]
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	60e3      	str	r3, [r4, #12]
 800722c:	e66d      	b.n	8006f0a <_scanf_float+0x82>
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0e5      	beq.n	8007200 <_scanf_float+0x378>
 8007234:	9905      	ldr	r1, [sp, #20]
 8007236:	230a      	movs	r3, #10
 8007238:	462a      	mov	r2, r5
 800723a:	3101      	adds	r1, #1
 800723c:	4640      	mov	r0, r8
 800723e:	f000 ff91 	bl	8008164 <_strtol_r>
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	9e05      	ldr	r6, [sp, #20]
 8007246:	1ac2      	subs	r2, r0, r3
 8007248:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800724c:	429e      	cmp	r6, r3
 800724e:	bf28      	it	cs
 8007250:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007254:	4912      	ldr	r1, [pc, #72]	; (80072a0 <_scanf_float+0x418>)
 8007256:	4630      	mov	r0, r6
 8007258:	f000 f8ba 	bl	80073d0 <siprintf>
 800725c:	e7d0      	b.n	8007200 <_scanf_float+0x378>
 800725e:	9903      	ldr	r1, [sp, #12]
 8007260:	f012 0f04 	tst.w	r2, #4
 8007264:	f103 0204 	add.w	r2, r3, #4
 8007268:	600a      	str	r2, [r1, #0]
 800726a:	d1d9      	bne.n	8007220 <_scanf_float+0x398>
 800726c:	f8d3 8000 	ldr.w	r8, [r3]
 8007270:	ee10 2a10 	vmov	r2, s0
 8007274:	ee10 0a10 	vmov	r0, s0
 8007278:	463b      	mov	r3, r7
 800727a:	4639      	mov	r1, r7
 800727c:	f7f9 fc66 	bl	8000b4c <__aeabi_dcmpun>
 8007280:	b128      	cbz	r0, 800728e <_scanf_float+0x406>
 8007282:	4808      	ldr	r0, [pc, #32]	; (80072a4 <_scanf_float+0x41c>)
 8007284:	f000 f89e 	bl	80073c4 <nanf>
 8007288:	ed88 0a00 	vstr	s0, [r8]
 800728c:	e7cb      	b.n	8007226 <_scanf_float+0x39e>
 800728e:	4630      	mov	r0, r6
 8007290:	4639      	mov	r1, r7
 8007292:	f7f9 fcb9 	bl	8000c08 <__aeabi_d2f>
 8007296:	f8c8 0000 	str.w	r0, [r8]
 800729a:	e7c4      	b.n	8007226 <_scanf_float+0x39e>
 800729c:	2500      	movs	r5, #0
 800729e:	e634      	b.n	8006f0a <_scanf_float+0x82>
 80072a0:	0800b0b0 	.word	0x0800b0b0
 80072a4:	0800b520 	.word	0x0800b520

080072a8 <iprintf>:
 80072a8:	b40f      	push	{r0, r1, r2, r3}
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <iprintf+0x2c>)
 80072ac:	b513      	push	{r0, r1, r4, lr}
 80072ae:	681c      	ldr	r4, [r3, #0]
 80072b0:	b124      	cbz	r4, 80072bc <iprintf+0x14>
 80072b2:	69a3      	ldr	r3, [r4, #24]
 80072b4:	b913      	cbnz	r3, 80072bc <iprintf+0x14>
 80072b6:	4620      	mov	r0, r4
 80072b8:	f001 ffaa 	bl	8009210 <__sinit>
 80072bc:	ab05      	add	r3, sp, #20
 80072be:	9a04      	ldr	r2, [sp, #16]
 80072c0:	68a1      	ldr	r1, [r4, #8]
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	4620      	mov	r0, r4
 80072c6:	f003 fb81 	bl	800a9cc <_vfiprintf_r>
 80072ca:	b002      	add	sp, #8
 80072cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d0:	b004      	add	sp, #16
 80072d2:	4770      	bx	lr
 80072d4:	2000000c 	.word	0x2000000c

080072d8 <_puts_r>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	460e      	mov	r6, r1
 80072dc:	4605      	mov	r5, r0
 80072de:	b118      	cbz	r0, 80072e8 <_puts_r+0x10>
 80072e0:	6983      	ldr	r3, [r0, #24]
 80072e2:	b90b      	cbnz	r3, 80072e8 <_puts_r+0x10>
 80072e4:	f001 ff94 	bl	8009210 <__sinit>
 80072e8:	69ab      	ldr	r3, [r5, #24]
 80072ea:	68ac      	ldr	r4, [r5, #8]
 80072ec:	b913      	cbnz	r3, 80072f4 <_puts_r+0x1c>
 80072ee:	4628      	mov	r0, r5
 80072f0:	f001 ff8e 	bl	8009210 <__sinit>
 80072f4:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <_puts_r+0xd0>)
 80072f6:	429c      	cmp	r4, r3
 80072f8:	d120      	bne.n	800733c <_puts_r+0x64>
 80072fa:	686c      	ldr	r4, [r5, #4]
 80072fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072fe:	07db      	lsls	r3, r3, #31
 8007300:	d405      	bmi.n	800730e <_puts_r+0x36>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	0598      	lsls	r0, r3, #22
 8007306:	d402      	bmi.n	800730e <_puts_r+0x36>
 8007308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730a:	f002 fb92 	bl	8009a32 <__retarget_lock_acquire_recursive>
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	0719      	lsls	r1, r3, #28
 8007312:	d51d      	bpl.n	8007350 <_puts_r+0x78>
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	b1db      	cbz	r3, 8007350 <_puts_r+0x78>
 8007318:	3e01      	subs	r6, #1
 800731a:	68a3      	ldr	r3, [r4, #8]
 800731c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007320:	3b01      	subs	r3, #1
 8007322:	60a3      	str	r3, [r4, #8]
 8007324:	bb39      	cbnz	r1, 8007376 <_puts_r+0x9e>
 8007326:	2b00      	cmp	r3, #0
 8007328:	da38      	bge.n	800739c <_puts_r+0xc4>
 800732a:	4622      	mov	r2, r4
 800732c:	210a      	movs	r1, #10
 800732e:	4628      	mov	r0, r5
 8007330:	f000 ff1a 	bl	8008168 <__swbuf_r>
 8007334:	3001      	adds	r0, #1
 8007336:	d011      	beq.n	800735c <_puts_r+0x84>
 8007338:	250a      	movs	r5, #10
 800733a:	e011      	b.n	8007360 <_puts_r+0x88>
 800733c:	4b1b      	ldr	r3, [pc, #108]	; (80073ac <_puts_r+0xd4>)
 800733e:	429c      	cmp	r4, r3
 8007340:	d101      	bne.n	8007346 <_puts_r+0x6e>
 8007342:	68ac      	ldr	r4, [r5, #8]
 8007344:	e7da      	b.n	80072fc <_puts_r+0x24>
 8007346:	4b1a      	ldr	r3, [pc, #104]	; (80073b0 <_puts_r+0xd8>)
 8007348:	429c      	cmp	r4, r3
 800734a:	bf08      	it	eq
 800734c:	68ec      	ldreq	r4, [r5, #12]
 800734e:	e7d5      	b.n	80072fc <_puts_r+0x24>
 8007350:	4621      	mov	r1, r4
 8007352:	4628      	mov	r0, r5
 8007354:	f000 ff5a 	bl	800820c <__swsetup_r>
 8007358:	2800      	cmp	r0, #0
 800735a:	d0dd      	beq.n	8007318 <_puts_r+0x40>
 800735c:	f04f 35ff 	mov.w	r5, #4294967295
 8007360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007362:	07da      	lsls	r2, r3, #31
 8007364:	d405      	bmi.n	8007372 <_puts_r+0x9a>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	059b      	lsls	r3, r3, #22
 800736a:	d402      	bmi.n	8007372 <_puts_r+0x9a>
 800736c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800736e:	f002 fb61 	bl	8009a34 <__retarget_lock_release_recursive>
 8007372:	4628      	mov	r0, r5
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	2b00      	cmp	r3, #0
 8007378:	da04      	bge.n	8007384 <_puts_r+0xac>
 800737a:	69a2      	ldr	r2, [r4, #24]
 800737c:	429a      	cmp	r2, r3
 800737e:	dc06      	bgt.n	800738e <_puts_r+0xb6>
 8007380:	290a      	cmp	r1, #10
 8007382:	d004      	beq.n	800738e <_puts_r+0xb6>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	6022      	str	r2, [r4, #0]
 800738a:	7019      	strb	r1, [r3, #0]
 800738c:	e7c5      	b.n	800731a <_puts_r+0x42>
 800738e:	4622      	mov	r2, r4
 8007390:	4628      	mov	r0, r5
 8007392:	f000 fee9 	bl	8008168 <__swbuf_r>
 8007396:	3001      	adds	r0, #1
 8007398:	d1bf      	bne.n	800731a <_puts_r+0x42>
 800739a:	e7df      	b.n	800735c <_puts_r+0x84>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	250a      	movs	r5, #10
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	701d      	strb	r5, [r3, #0]
 80073a6:	e7db      	b.n	8007360 <_puts_r+0x88>
 80073a8:	0800b2bc 	.word	0x0800b2bc
 80073ac:	0800b2dc 	.word	0x0800b2dc
 80073b0:	0800b29c 	.word	0x0800b29c

080073b4 <puts>:
 80073b4:	4b02      	ldr	r3, [pc, #8]	; (80073c0 <puts+0xc>)
 80073b6:	4601      	mov	r1, r0
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	f7ff bf8d 	b.w	80072d8 <_puts_r>
 80073be:	bf00      	nop
 80073c0:	2000000c 	.word	0x2000000c

080073c4 <nanf>:
 80073c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80073cc <nanf+0x8>
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	7fc00000 	.word	0x7fc00000

080073d0 <siprintf>:
 80073d0:	b40e      	push	{r1, r2, r3}
 80073d2:	b500      	push	{lr}
 80073d4:	b09c      	sub	sp, #112	; 0x70
 80073d6:	ab1d      	add	r3, sp, #116	; 0x74
 80073d8:	9002      	str	r0, [sp, #8]
 80073da:	9006      	str	r0, [sp, #24]
 80073dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073e0:	4809      	ldr	r0, [pc, #36]	; (8007408 <siprintf+0x38>)
 80073e2:	9107      	str	r1, [sp, #28]
 80073e4:	9104      	str	r1, [sp, #16]
 80073e6:	4909      	ldr	r1, [pc, #36]	; (800740c <siprintf+0x3c>)
 80073e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ec:	9105      	str	r1, [sp, #20]
 80073ee:	6800      	ldr	r0, [r0, #0]
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	a902      	add	r1, sp, #8
 80073f4:	f003 f9c0 	bl	800a778 <_svfiprintf_r>
 80073f8:	9b02      	ldr	r3, [sp, #8]
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	b01c      	add	sp, #112	; 0x70
 8007400:	f85d eb04 	ldr.w	lr, [sp], #4
 8007404:	b003      	add	sp, #12
 8007406:	4770      	bx	lr
 8007408:	2000000c 	.word	0x2000000c
 800740c:	ffff0208 	.word	0xffff0208

08007410 <sulp>:
 8007410:	b570      	push	{r4, r5, r6, lr}
 8007412:	4604      	mov	r4, r0
 8007414:	460d      	mov	r5, r1
 8007416:	ec45 4b10 	vmov	d0, r4, r5
 800741a:	4616      	mov	r6, r2
 800741c:	f002 ff0a 	bl	800a234 <__ulp>
 8007420:	ec51 0b10 	vmov	r0, r1, d0
 8007424:	b17e      	cbz	r6, 8007446 <sulp+0x36>
 8007426:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800742a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800742e:	2b00      	cmp	r3, #0
 8007430:	dd09      	ble.n	8007446 <sulp+0x36>
 8007432:	051b      	lsls	r3, r3, #20
 8007434:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007438:	2400      	movs	r4, #0
 800743a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800743e:	4622      	mov	r2, r4
 8007440:	462b      	mov	r3, r5
 8007442:	f7f9 f8e9 	bl	8000618 <__aeabi_dmul>
 8007446:	bd70      	pop	{r4, r5, r6, pc}

08007448 <_strtod_l>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	ed2d 8b02 	vpush	{d8}
 8007450:	b09d      	sub	sp, #116	; 0x74
 8007452:	461f      	mov	r7, r3
 8007454:	2300      	movs	r3, #0
 8007456:	9318      	str	r3, [sp, #96]	; 0x60
 8007458:	4ba2      	ldr	r3, [pc, #648]	; (80076e4 <_strtod_l+0x29c>)
 800745a:	9213      	str	r2, [sp, #76]	; 0x4c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	4604      	mov	r4, r0
 8007462:	4618      	mov	r0, r3
 8007464:	4688      	mov	r8, r1
 8007466:	f7f8 fec3 	bl	80001f0 <strlen>
 800746a:	f04f 0a00 	mov.w	sl, #0
 800746e:	4605      	mov	r5, r0
 8007470:	f04f 0b00 	mov.w	fp, #0
 8007474:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800747a:	781a      	ldrb	r2, [r3, #0]
 800747c:	2a2b      	cmp	r2, #43	; 0x2b
 800747e:	d04e      	beq.n	800751e <_strtod_l+0xd6>
 8007480:	d83b      	bhi.n	80074fa <_strtod_l+0xb2>
 8007482:	2a0d      	cmp	r2, #13
 8007484:	d834      	bhi.n	80074f0 <_strtod_l+0xa8>
 8007486:	2a08      	cmp	r2, #8
 8007488:	d834      	bhi.n	80074f4 <_strtod_l+0xac>
 800748a:	2a00      	cmp	r2, #0
 800748c:	d03e      	beq.n	800750c <_strtod_l+0xc4>
 800748e:	2300      	movs	r3, #0
 8007490:	930a      	str	r3, [sp, #40]	; 0x28
 8007492:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007494:	7833      	ldrb	r3, [r6, #0]
 8007496:	2b30      	cmp	r3, #48	; 0x30
 8007498:	f040 80b0 	bne.w	80075fc <_strtod_l+0x1b4>
 800749c:	7873      	ldrb	r3, [r6, #1]
 800749e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074a2:	2b58      	cmp	r3, #88	; 0x58
 80074a4:	d168      	bne.n	8007578 <_strtod_l+0x130>
 80074a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	ab18      	add	r3, sp, #96	; 0x60
 80074ac:	9702      	str	r7, [sp, #8]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4a8d      	ldr	r2, [pc, #564]	; (80076e8 <_strtod_l+0x2a0>)
 80074b2:	ab19      	add	r3, sp, #100	; 0x64
 80074b4:	a917      	add	r1, sp, #92	; 0x5c
 80074b6:	4620      	mov	r0, r4
 80074b8:	f001 ffae 	bl	8009418 <__gethex>
 80074bc:	f010 0707 	ands.w	r7, r0, #7
 80074c0:	4605      	mov	r5, r0
 80074c2:	d005      	beq.n	80074d0 <_strtod_l+0x88>
 80074c4:	2f06      	cmp	r7, #6
 80074c6:	d12c      	bne.n	8007522 <_strtod_l+0xda>
 80074c8:	3601      	adds	r6, #1
 80074ca:	2300      	movs	r3, #0
 80074cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80074ce:	930a      	str	r3, [sp, #40]	; 0x28
 80074d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 8590 	bne.w	8007ff8 <_strtod_l+0xbb0>
 80074d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074da:	b1eb      	cbz	r3, 8007518 <_strtod_l+0xd0>
 80074dc:	4652      	mov	r2, sl
 80074de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074e2:	ec43 2b10 	vmov	d0, r2, r3
 80074e6:	b01d      	add	sp, #116	; 0x74
 80074e8:	ecbd 8b02 	vpop	{d8}
 80074ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f0:	2a20      	cmp	r2, #32
 80074f2:	d1cc      	bne.n	800748e <_strtod_l+0x46>
 80074f4:	3301      	adds	r3, #1
 80074f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80074f8:	e7be      	b.n	8007478 <_strtod_l+0x30>
 80074fa:	2a2d      	cmp	r2, #45	; 0x2d
 80074fc:	d1c7      	bne.n	800748e <_strtod_l+0x46>
 80074fe:	2201      	movs	r2, #1
 8007500:	920a      	str	r2, [sp, #40]	; 0x28
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	9217      	str	r2, [sp, #92]	; 0x5c
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1c2      	bne.n	8007492 <_strtod_l+0x4a>
 800750c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800750e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007512:	2b00      	cmp	r3, #0
 8007514:	f040 856e 	bne.w	8007ff4 <_strtod_l+0xbac>
 8007518:	4652      	mov	r2, sl
 800751a:	465b      	mov	r3, fp
 800751c:	e7e1      	b.n	80074e2 <_strtod_l+0x9a>
 800751e:	2200      	movs	r2, #0
 8007520:	e7ee      	b.n	8007500 <_strtod_l+0xb8>
 8007522:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007524:	b13a      	cbz	r2, 8007536 <_strtod_l+0xee>
 8007526:	2135      	movs	r1, #53	; 0x35
 8007528:	a81a      	add	r0, sp, #104	; 0x68
 800752a:	f002 ff8e 	bl	800a44a <__copybits>
 800752e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007530:	4620      	mov	r0, r4
 8007532:	f002 fb4d 	bl	8009bd0 <_Bfree>
 8007536:	3f01      	subs	r7, #1
 8007538:	2f04      	cmp	r7, #4
 800753a:	d806      	bhi.n	800754a <_strtod_l+0x102>
 800753c:	e8df f007 	tbb	[pc, r7]
 8007540:	1714030a 	.word	0x1714030a
 8007544:	0a          	.byte	0x0a
 8007545:	00          	.byte	0x00
 8007546:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800754a:	0728      	lsls	r0, r5, #28
 800754c:	d5c0      	bpl.n	80074d0 <_strtod_l+0x88>
 800754e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007552:	e7bd      	b.n	80074d0 <_strtod_l+0x88>
 8007554:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007558:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800755a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800755e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007562:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007566:	e7f0      	b.n	800754a <_strtod_l+0x102>
 8007568:	f8df b180 	ldr.w	fp, [pc, #384]	; 80076ec <_strtod_l+0x2a4>
 800756c:	e7ed      	b.n	800754a <_strtod_l+0x102>
 800756e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007572:	f04f 3aff 	mov.w	sl, #4294967295
 8007576:	e7e8      	b.n	800754a <_strtod_l+0x102>
 8007578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	9217      	str	r2, [sp, #92]	; 0x5c
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b30      	cmp	r3, #48	; 0x30
 8007582:	d0f9      	beq.n	8007578 <_strtod_l+0x130>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0a3      	beq.n	80074d0 <_strtod_l+0x88>
 8007588:	2301      	movs	r3, #1
 800758a:	f04f 0900 	mov.w	r9, #0
 800758e:	9304      	str	r3, [sp, #16]
 8007590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007592:	9308      	str	r3, [sp, #32]
 8007594:	f8cd 901c 	str.w	r9, [sp, #28]
 8007598:	464f      	mov	r7, r9
 800759a:	220a      	movs	r2, #10
 800759c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800759e:	7806      	ldrb	r6, [r0, #0]
 80075a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80075a4:	b2d9      	uxtb	r1, r3
 80075a6:	2909      	cmp	r1, #9
 80075a8:	d92a      	bls.n	8007600 <_strtod_l+0x1b8>
 80075aa:	9905      	ldr	r1, [sp, #20]
 80075ac:	462a      	mov	r2, r5
 80075ae:	f003 fb9a 	bl	800ace6 <strncmp>
 80075b2:	b398      	cbz	r0, 800761c <_strtod_l+0x1d4>
 80075b4:	2000      	movs	r0, #0
 80075b6:	4632      	mov	r2, r6
 80075b8:	463d      	mov	r5, r7
 80075ba:	9005      	str	r0, [sp, #20]
 80075bc:	4603      	mov	r3, r0
 80075be:	2a65      	cmp	r2, #101	; 0x65
 80075c0:	d001      	beq.n	80075c6 <_strtod_l+0x17e>
 80075c2:	2a45      	cmp	r2, #69	; 0x45
 80075c4:	d118      	bne.n	80075f8 <_strtod_l+0x1b0>
 80075c6:	b91d      	cbnz	r5, 80075d0 <_strtod_l+0x188>
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	4302      	orrs	r2, r0
 80075cc:	d09e      	beq.n	800750c <_strtod_l+0xc4>
 80075ce:	2500      	movs	r5, #0
 80075d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80075d4:	f108 0201 	add.w	r2, r8, #1
 80075d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80075da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80075de:	2a2b      	cmp	r2, #43	; 0x2b
 80075e0:	d075      	beq.n	80076ce <_strtod_l+0x286>
 80075e2:	2a2d      	cmp	r2, #45	; 0x2d
 80075e4:	d07b      	beq.n	80076de <_strtod_l+0x296>
 80075e6:	f04f 0c00 	mov.w	ip, #0
 80075ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80075ee:	2909      	cmp	r1, #9
 80075f0:	f240 8082 	bls.w	80076f8 <_strtod_l+0x2b0>
 80075f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80075f8:	2600      	movs	r6, #0
 80075fa:	e09d      	b.n	8007738 <_strtod_l+0x2f0>
 80075fc:	2300      	movs	r3, #0
 80075fe:	e7c4      	b.n	800758a <_strtod_l+0x142>
 8007600:	2f08      	cmp	r7, #8
 8007602:	bfd8      	it	le
 8007604:	9907      	ldrle	r1, [sp, #28]
 8007606:	f100 0001 	add.w	r0, r0, #1
 800760a:	bfda      	itte	le
 800760c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007610:	9307      	strle	r3, [sp, #28]
 8007612:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007616:	3701      	adds	r7, #1
 8007618:	9017      	str	r0, [sp, #92]	; 0x5c
 800761a:	e7bf      	b.n	800759c <_strtod_l+0x154>
 800761c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800761e:	195a      	adds	r2, r3, r5
 8007620:	9217      	str	r2, [sp, #92]	; 0x5c
 8007622:	5d5a      	ldrb	r2, [r3, r5]
 8007624:	2f00      	cmp	r7, #0
 8007626:	d037      	beq.n	8007698 <_strtod_l+0x250>
 8007628:	9005      	str	r0, [sp, #20]
 800762a:	463d      	mov	r5, r7
 800762c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007630:	2b09      	cmp	r3, #9
 8007632:	d912      	bls.n	800765a <_strtod_l+0x212>
 8007634:	2301      	movs	r3, #1
 8007636:	e7c2      	b.n	80075be <_strtod_l+0x176>
 8007638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	9217      	str	r2, [sp, #92]	; 0x5c
 800763e:	785a      	ldrb	r2, [r3, #1]
 8007640:	3001      	adds	r0, #1
 8007642:	2a30      	cmp	r2, #48	; 0x30
 8007644:	d0f8      	beq.n	8007638 <_strtod_l+0x1f0>
 8007646:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800764a:	2b08      	cmp	r3, #8
 800764c:	f200 84d9 	bhi.w	8008002 <_strtod_l+0xbba>
 8007650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007652:	9005      	str	r0, [sp, #20]
 8007654:	2000      	movs	r0, #0
 8007656:	9308      	str	r3, [sp, #32]
 8007658:	4605      	mov	r5, r0
 800765a:	3a30      	subs	r2, #48	; 0x30
 800765c:	f100 0301 	add.w	r3, r0, #1
 8007660:	d014      	beq.n	800768c <_strtod_l+0x244>
 8007662:	9905      	ldr	r1, [sp, #20]
 8007664:	4419      	add	r1, r3
 8007666:	9105      	str	r1, [sp, #20]
 8007668:	462b      	mov	r3, r5
 800766a:	eb00 0e05 	add.w	lr, r0, r5
 800766e:	210a      	movs	r1, #10
 8007670:	4573      	cmp	r3, lr
 8007672:	d113      	bne.n	800769c <_strtod_l+0x254>
 8007674:	182b      	adds	r3, r5, r0
 8007676:	2b08      	cmp	r3, #8
 8007678:	f105 0501 	add.w	r5, r5, #1
 800767c:	4405      	add	r5, r0
 800767e:	dc1c      	bgt.n	80076ba <_strtod_l+0x272>
 8007680:	9907      	ldr	r1, [sp, #28]
 8007682:	230a      	movs	r3, #10
 8007684:	fb03 2301 	mla	r3, r3, r1, r2
 8007688:	9307      	str	r3, [sp, #28]
 800768a:	2300      	movs	r3, #0
 800768c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800768e:	1c51      	adds	r1, r2, #1
 8007690:	9117      	str	r1, [sp, #92]	; 0x5c
 8007692:	7852      	ldrb	r2, [r2, #1]
 8007694:	4618      	mov	r0, r3
 8007696:	e7c9      	b.n	800762c <_strtod_l+0x1e4>
 8007698:	4638      	mov	r0, r7
 800769a:	e7d2      	b.n	8007642 <_strtod_l+0x1fa>
 800769c:	2b08      	cmp	r3, #8
 800769e:	dc04      	bgt.n	80076aa <_strtod_l+0x262>
 80076a0:	9e07      	ldr	r6, [sp, #28]
 80076a2:	434e      	muls	r6, r1
 80076a4:	9607      	str	r6, [sp, #28]
 80076a6:	3301      	adds	r3, #1
 80076a8:	e7e2      	b.n	8007670 <_strtod_l+0x228>
 80076aa:	f103 0c01 	add.w	ip, r3, #1
 80076ae:	f1bc 0f10 	cmp.w	ip, #16
 80076b2:	bfd8      	it	le
 80076b4:	fb01 f909 	mulle.w	r9, r1, r9
 80076b8:	e7f5      	b.n	80076a6 <_strtod_l+0x25e>
 80076ba:	2d10      	cmp	r5, #16
 80076bc:	bfdc      	itt	le
 80076be:	230a      	movle	r3, #10
 80076c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80076c4:	e7e1      	b.n	800768a <_strtod_l+0x242>
 80076c6:	2300      	movs	r3, #0
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	2301      	movs	r3, #1
 80076cc:	e77c      	b.n	80075c8 <_strtod_l+0x180>
 80076ce:	f04f 0c00 	mov.w	ip, #0
 80076d2:	f108 0202 	add.w	r2, r8, #2
 80076d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80076d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80076dc:	e785      	b.n	80075ea <_strtod_l+0x1a2>
 80076de:	f04f 0c01 	mov.w	ip, #1
 80076e2:	e7f6      	b.n	80076d2 <_strtod_l+0x28a>
 80076e4:	0800b364 	.word	0x0800b364
 80076e8:	0800b0b8 	.word	0x0800b0b8
 80076ec:	7ff00000 	.word	0x7ff00000
 80076f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076f2:	1c51      	adds	r1, r2, #1
 80076f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80076f6:	7852      	ldrb	r2, [r2, #1]
 80076f8:	2a30      	cmp	r2, #48	; 0x30
 80076fa:	d0f9      	beq.n	80076f0 <_strtod_l+0x2a8>
 80076fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007700:	2908      	cmp	r1, #8
 8007702:	f63f af79 	bhi.w	80075f8 <_strtod_l+0x1b0>
 8007706:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800770a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800770c:	9206      	str	r2, [sp, #24]
 800770e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007710:	1c51      	adds	r1, r2, #1
 8007712:	9117      	str	r1, [sp, #92]	; 0x5c
 8007714:	7852      	ldrb	r2, [r2, #1]
 8007716:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800771a:	2e09      	cmp	r6, #9
 800771c:	d937      	bls.n	800778e <_strtod_l+0x346>
 800771e:	9e06      	ldr	r6, [sp, #24]
 8007720:	1b89      	subs	r1, r1, r6
 8007722:	2908      	cmp	r1, #8
 8007724:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007728:	dc02      	bgt.n	8007730 <_strtod_l+0x2e8>
 800772a:	4576      	cmp	r6, lr
 800772c:	bfa8      	it	ge
 800772e:	4676      	movge	r6, lr
 8007730:	f1bc 0f00 	cmp.w	ip, #0
 8007734:	d000      	beq.n	8007738 <_strtod_l+0x2f0>
 8007736:	4276      	negs	r6, r6
 8007738:	2d00      	cmp	r5, #0
 800773a:	d14d      	bne.n	80077d8 <_strtod_l+0x390>
 800773c:	9904      	ldr	r1, [sp, #16]
 800773e:	4301      	orrs	r1, r0
 8007740:	f47f aec6 	bne.w	80074d0 <_strtod_l+0x88>
 8007744:	2b00      	cmp	r3, #0
 8007746:	f47f aee1 	bne.w	800750c <_strtod_l+0xc4>
 800774a:	2a69      	cmp	r2, #105	; 0x69
 800774c:	d027      	beq.n	800779e <_strtod_l+0x356>
 800774e:	dc24      	bgt.n	800779a <_strtod_l+0x352>
 8007750:	2a49      	cmp	r2, #73	; 0x49
 8007752:	d024      	beq.n	800779e <_strtod_l+0x356>
 8007754:	2a4e      	cmp	r2, #78	; 0x4e
 8007756:	f47f aed9 	bne.w	800750c <_strtod_l+0xc4>
 800775a:	499f      	ldr	r1, [pc, #636]	; (80079d8 <_strtod_l+0x590>)
 800775c:	a817      	add	r0, sp, #92	; 0x5c
 800775e:	f002 f8b3 	bl	80098c8 <__match>
 8007762:	2800      	cmp	r0, #0
 8007764:	f43f aed2 	beq.w	800750c <_strtod_l+0xc4>
 8007768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b28      	cmp	r3, #40	; 0x28
 800776e:	d12d      	bne.n	80077cc <_strtod_l+0x384>
 8007770:	499a      	ldr	r1, [pc, #616]	; (80079dc <_strtod_l+0x594>)
 8007772:	aa1a      	add	r2, sp, #104	; 0x68
 8007774:	a817      	add	r0, sp, #92	; 0x5c
 8007776:	f002 f8bb 	bl	80098f0 <__hexnan>
 800777a:	2805      	cmp	r0, #5
 800777c:	d126      	bne.n	80077cc <_strtod_l+0x384>
 800777e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007780:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007784:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007788:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800778c:	e6a0      	b.n	80074d0 <_strtod_l+0x88>
 800778e:	210a      	movs	r1, #10
 8007790:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007794:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007798:	e7b9      	b.n	800770e <_strtod_l+0x2c6>
 800779a:	2a6e      	cmp	r2, #110	; 0x6e
 800779c:	e7db      	b.n	8007756 <_strtod_l+0x30e>
 800779e:	4990      	ldr	r1, [pc, #576]	; (80079e0 <_strtod_l+0x598>)
 80077a0:	a817      	add	r0, sp, #92	; 0x5c
 80077a2:	f002 f891 	bl	80098c8 <__match>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f aeb0 	beq.w	800750c <_strtod_l+0xc4>
 80077ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077ae:	498d      	ldr	r1, [pc, #564]	; (80079e4 <_strtod_l+0x59c>)
 80077b0:	3b01      	subs	r3, #1
 80077b2:	a817      	add	r0, sp, #92	; 0x5c
 80077b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80077b6:	f002 f887 	bl	80098c8 <__match>
 80077ba:	b910      	cbnz	r0, 80077c2 <_strtod_l+0x37a>
 80077bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077be:	3301      	adds	r3, #1
 80077c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80077c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80079f4 <_strtod_l+0x5ac>
 80077c6:	f04f 0a00 	mov.w	sl, #0
 80077ca:	e681      	b.n	80074d0 <_strtod_l+0x88>
 80077cc:	4886      	ldr	r0, [pc, #536]	; (80079e8 <_strtod_l+0x5a0>)
 80077ce:	f003 fa2f 	bl	800ac30 <nan>
 80077d2:	ec5b ab10 	vmov	sl, fp, d0
 80077d6:	e67b      	b.n	80074d0 <_strtod_l+0x88>
 80077d8:	9b05      	ldr	r3, [sp, #20]
 80077da:	9807      	ldr	r0, [sp, #28]
 80077dc:	1af3      	subs	r3, r6, r3
 80077de:	2f00      	cmp	r7, #0
 80077e0:	bf08      	it	eq
 80077e2:	462f      	moveq	r7, r5
 80077e4:	2d10      	cmp	r5, #16
 80077e6:	9306      	str	r3, [sp, #24]
 80077e8:	46a8      	mov	r8, r5
 80077ea:	bfa8      	it	ge
 80077ec:	f04f 0810 	movge.w	r8, #16
 80077f0:	f7f8 fe98 	bl	8000524 <__aeabi_ui2d>
 80077f4:	2d09      	cmp	r5, #9
 80077f6:	4682      	mov	sl, r0
 80077f8:	468b      	mov	fp, r1
 80077fa:	dd13      	ble.n	8007824 <_strtod_l+0x3dc>
 80077fc:	4b7b      	ldr	r3, [pc, #492]	; (80079ec <_strtod_l+0x5a4>)
 80077fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007802:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007806:	f7f8 ff07 	bl	8000618 <__aeabi_dmul>
 800780a:	4682      	mov	sl, r0
 800780c:	4648      	mov	r0, r9
 800780e:	468b      	mov	fp, r1
 8007810:	f7f8 fe88 	bl	8000524 <__aeabi_ui2d>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4650      	mov	r0, sl
 800781a:	4659      	mov	r1, fp
 800781c:	f7f8 fd46 	bl	80002ac <__adddf3>
 8007820:	4682      	mov	sl, r0
 8007822:	468b      	mov	fp, r1
 8007824:	2d0f      	cmp	r5, #15
 8007826:	dc38      	bgt.n	800789a <_strtod_l+0x452>
 8007828:	9b06      	ldr	r3, [sp, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f43f ae50 	beq.w	80074d0 <_strtod_l+0x88>
 8007830:	dd24      	ble.n	800787c <_strtod_l+0x434>
 8007832:	2b16      	cmp	r3, #22
 8007834:	dc0b      	bgt.n	800784e <_strtod_l+0x406>
 8007836:	496d      	ldr	r1, [pc, #436]	; (80079ec <_strtod_l+0x5a4>)
 8007838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800783c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007840:	4652      	mov	r2, sl
 8007842:	465b      	mov	r3, fp
 8007844:	f7f8 fee8 	bl	8000618 <__aeabi_dmul>
 8007848:	4682      	mov	sl, r0
 800784a:	468b      	mov	fp, r1
 800784c:	e640      	b.n	80074d0 <_strtod_l+0x88>
 800784e:	9a06      	ldr	r2, [sp, #24]
 8007850:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007854:	4293      	cmp	r3, r2
 8007856:	db20      	blt.n	800789a <_strtod_l+0x452>
 8007858:	4c64      	ldr	r4, [pc, #400]	; (80079ec <_strtod_l+0x5a4>)
 800785a:	f1c5 050f 	rsb	r5, r5, #15
 800785e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007862:	4652      	mov	r2, sl
 8007864:	465b      	mov	r3, fp
 8007866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800786a:	f7f8 fed5 	bl	8000618 <__aeabi_dmul>
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	1b5d      	subs	r5, r3, r5
 8007872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007876:	e9d4 2300 	ldrd	r2, r3, [r4]
 800787a:	e7e3      	b.n	8007844 <_strtod_l+0x3fc>
 800787c:	9b06      	ldr	r3, [sp, #24]
 800787e:	3316      	adds	r3, #22
 8007880:	db0b      	blt.n	800789a <_strtod_l+0x452>
 8007882:	9b05      	ldr	r3, [sp, #20]
 8007884:	1b9e      	subs	r6, r3, r6
 8007886:	4b59      	ldr	r3, [pc, #356]	; (80079ec <_strtod_l+0x5a4>)
 8007888:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800788c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007890:	4650      	mov	r0, sl
 8007892:	4659      	mov	r1, fp
 8007894:	f7f8 ffea 	bl	800086c <__aeabi_ddiv>
 8007898:	e7d6      	b.n	8007848 <_strtod_l+0x400>
 800789a:	9b06      	ldr	r3, [sp, #24]
 800789c:	eba5 0808 	sub.w	r8, r5, r8
 80078a0:	4498      	add	r8, r3
 80078a2:	f1b8 0f00 	cmp.w	r8, #0
 80078a6:	dd74      	ble.n	8007992 <_strtod_l+0x54a>
 80078a8:	f018 030f 	ands.w	r3, r8, #15
 80078ac:	d00a      	beq.n	80078c4 <_strtod_l+0x47c>
 80078ae:	494f      	ldr	r1, [pc, #316]	; (80079ec <_strtod_l+0x5a4>)
 80078b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078b4:	4652      	mov	r2, sl
 80078b6:	465b      	mov	r3, fp
 80078b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078bc:	f7f8 feac 	bl	8000618 <__aeabi_dmul>
 80078c0:	4682      	mov	sl, r0
 80078c2:	468b      	mov	fp, r1
 80078c4:	f038 080f 	bics.w	r8, r8, #15
 80078c8:	d04f      	beq.n	800796a <_strtod_l+0x522>
 80078ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80078ce:	dd22      	ble.n	8007916 <_strtod_l+0x4ce>
 80078d0:	2500      	movs	r5, #0
 80078d2:	462e      	mov	r6, r5
 80078d4:	9507      	str	r5, [sp, #28]
 80078d6:	9505      	str	r5, [sp, #20]
 80078d8:	2322      	movs	r3, #34	; 0x22
 80078da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80079f4 <_strtod_l+0x5ac>
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	f04f 0a00 	mov.w	sl, #0
 80078e4:	9b07      	ldr	r3, [sp, #28]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f43f adf2 	beq.w	80074d0 <_strtod_l+0x88>
 80078ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078ee:	4620      	mov	r0, r4
 80078f0:	f002 f96e 	bl	8009bd0 <_Bfree>
 80078f4:	9905      	ldr	r1, [sp, #20]
 80078f6:	4620      	mov	r0, r4
 80078f8:	f002 f96a 	bl	8009bd0 <_Bfree>
 80078fc:	4631      	mov	r1, r6
 80078fe:	4620      	mov	r0, r4
 8007900:	f002 f966 	bl	8009bd0 <_Bfree>
 8007904:	9907      	ldr	r1, [sp, #28]
 8007906:	4620      	mov	r0, r4
 8007908:	f002 f962 	bl	8009bd0 <_Bfree>
 800790c:	4629      	mov	r1, r5
 800790e:	4620      	mov	r0, r4
 8007910:	f002 f95e 	bl	8009bd0 <_Bfree>
 8007914:	e5dc      	b.n	80074d0 <_strtod_l+0x88>
 8007916:	4b36      	ldr	r3, [pc, #216]	; (80079f0 <_strtod_l+0x5a8>)
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	2300      	movs	r3, #0
 800791c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	4699      	mov	r9, r3
 8007926:	f1b8 0f01 	cmp.w	r8, #1
 800792a:	dc21      	bgt.n	8007970 <_strtod_l+0x528>
 800792c:	b10b      	cbz	r3, 8007932 <_strtod_l+0x4ea>
 800792e:	4682      	mov	sl, r0
 8007930:	468b      	mov	fp, r1
 8007932:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <_strtod_l+0x5a8>)
 8007934:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007938:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800793c:	4652      	mov	r2, sl
 800793e:	465b      	mov	r3, fp
 8007940:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007944:	f7f8 fe68 	bl	8000618 <__aeabi_dmul>
 8007948:	4b2a      	ldr	r3, [pc, #168]	; (80079f4 <_strtod_l+0x5ac>)
 800794a:	460a      	mov	r2, r1
 800794c:	400b      	ands	r3, r1
 800794e:	492a      	ldr	r1, [pc, #168]	; (80079f8 <_strtod_l+0x5b0>)
 8007950:	428b      	cmp	r3, r1
 8007952:	4682      	mov	sl, r0
 8007954:	d8bc      	bhi.n	80078d0 <_strtod_l+0x488>
 8007956:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800795a:	428b      	cmp	r3, r1
 800795c:	bf86      	itte	hi
 800795e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80079fc <_strtod_l+0x5b4>
 8007962:	f04f 3aff 	movhi.w	sl, #4294967295
 8007966:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800796a:	2300      	movs	r3, #0
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	e084      	b.n	8007a7a <_strtod_l+0x632>
 8007970:	f018 0f01 	tst.w	r8, #1
 8007974:	d005      	beq.n	8007982 <_strtod_l+0x53a>
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f7f8 fe4c 	bl	8000618 <__aeabi_dmul>
 8007980:	2301      	movs	r3, #1
 8007982:	9a04      	ldr	r2, [sp, #16]
 8007984:	3208      	adds	r2, #8
 8007986:	f109 0901 	add.w	r9, r9, #1
 800798a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800798e:	9204      	str	r2, [sp, #16]
 8007990:	e7c9      	b.n	8007926 <_strtod_l+0x4de>
 8007992:	d0ea      	beq.n	800796a <_strtod_l+0x522>
 8007994:	f1c8 0800 	rsb	r8, r8, #0
 8007998:	f018 020f 	ands.w	r2, r8, #15
 800799c:	d00a      	beq.n	80079b4 <_strtod_l+0x56c>
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <_strtod_l+0x5a4>)
 80079a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	4659      	mov	r1, fp
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f7f8 ff5e 	bl	800086c <__aeabi_ddiv>
 80079b0:	4682      	mov	sl, r0
 80079b2:	468b      	mov	fp, r1
 80079b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80079b8:	d0d7      	beq.n	800796a <_strtod_l+0x522>
 80079ba:	f1b8 0f1f 	cmp.w	r8, #31
 80079be:	dd1f      	ble.n	8007a00 <_strtod_l+0x5b8>
 80079c0:	2500      	movs	r5, #0
 80079c2:	462e      	mov	r6, r5
 80079c4:	9507      	str	r5, [sp, #28]
 80079c6:	9505      	str	r5, [sp, #20]
 80079c8:	2322      	movs	r3, #34	; 0x22
 80079ca:	f04f 0a00 	mov.w	sl, #0
 80079ce:	f04f 0b00 	mov.w	fp, #0
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	e786      	b.n	80078e4 <_strtod_l+0x49c>
 80079d6:	bf00      	nop
 80079d8:	0800b089 	.word	0x0800b089
 80079dc:	0800b0cc 	.word	0x0800b0cc
 80079e0:	0800b081 	.word	0x0800b081
 80079e4:	0800b20c 	.word	0x0800b20c
 80079e8:	0800b520 	.word	0x0800b520
 80079ec:	0800b400 	.word	0x0800b400
 80079f0:	0800b3d8 	.word	0x0800b3d8
 80079f4:	7ff00000 	.word	0x7ff00000
 80079f8:	7ca00000 	.word	0x7ca00000
 80079fc:	7fefffff 	.word	0x7fefffff
 8007a00:	f018 0310 	ands.w	r3, r8, #16
 8007a04:	bf18      	it	ne
 8007a06:	236a      	movne	r3, #106	; 0x6a
 8007a08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007db8 <_strtod_l+0x970>
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	4650      	mov	r0, sl
 8007a10:	4659      	mov	r1, fp
 8007a12:	2300      	movs	r3, #0
 8007a14:	f018 0f01 	tst.w	r8, #1
 8007a18:	d004      	beq.n	8007a24 <_strtod_l+0x5dc>
 8007a1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a1e:	f7f8 fdfb 	bl	8000618 <__aeabi_dmul>
 8007a22:	2301      	movs	r3, #1
 8007a24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a28:	f109 0908 	add.w	r9, r9, #8
 8007a2c:	d1f2      	bne.n	8007a14 <_strtod_l+0x5cc>
 8007a2e:	b10b      	cbz	r3, 8007a34 <_strtod_l+0x5ec>
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	b1c3      	cbz	r3, 8007a6a <_strtod_l+0x622>
 8007a38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	4659      	mov	r1, fp
 8007a44:	dd11      	ble.n	8007a6a <_strtod_l+0x622>
 8007a46:	2b1f      	cmp	r3, #31
 8007a48:	f340 8124 	ble.w	8007c94 <_strtod_l+0x84c>
 8007a4c:	2b34      	cmp	r3, #52	; 0x34
 8007a4e:	bfde      	ittt	le
 8007a50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a54:	f04f 33ff 	movle.w	r3, #4294967295
 8007a58:	fa03 f202 	lslle.w	r2, r3, r2
 8007a5c:	f04f 0a00 	mov.w	sl, #0
 8007a60:	bfcc      	ite	gt
 8007a62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007a66:	ea02 0b01 	andle.w	fp, r2, r1
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4650      	mov	r0, sl
 8007a70:	4659      	mov	r1, fp
 8007a72:	f7f9 f839 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d1a2      	bne.n	80079c0 <_strtod_l+0x578>
 8007a7a:	9b07      	ldr	r3, [sp, #28]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	9908      	ldr	r1, [sp, #32]
 8007a80:	462b      	mov	r3, r5
 8007a82:	463a      	mov	r2, r7
 8007a84:	4620      	mov	r0, r4
 8007a86:	f002 f90b 	bl	8009ca0 <__s2b>
 8007a8a:	9007      	str	r0, [sp, #28]
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	f43f af1f 	beq.w	80078d0 <_strtod_l+0x488>
 8007a92:	9b05      	ldr	r3, [sp, #20]
 8007a94:	1b9e      	subs	r6, r3, r6
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfb4      	ite	lt
 8007a9c:	4633      	movlt	r3, r6
 8007a9e:	2300      	movge	r3, #0
 8007aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8007aa2:	9b06      	ldr	r3, [sp, #24]
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007aaa:	9312      	str	r3, [sp, #72]	; 0x48
 8007aac:	462e      	mov	r6, r5
 8007aae:	9b07      	ldr	r3, [sp, #28]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	6859      	ldr	r1, [r3, #4]
 8007ab4:	f002 f84c 	bl	8009b50 <_Balloc>
 8007ab8:	9005      	str	r0, [sp, #20]
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f43f af0c 	beq.w	80078d8 <_strtod_l+0x490>
 8007ac0:	9b07      	ldr	r3, [sp, #28]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	3202      	adds	r2, #2
 8007ac6:	f103 010c 	add.w	r1, r3, #12
 8007aca:	0092      	lsls	r2, r2, #2
 8007acc:	300c      	adds	r0, #12
 8007ace:	f002 f831 	bl	8009b34 <memcpy>
 8007ad2:	ec4b ab10 	vmov	d0, sl, fp
 8007ad6:	aa1a      	add	r2, sp, #104	; 0x68
 8007ad8:	a919      	add	r1, sp, #100	; 0x64
 8007ada:	4620      	mov	r0, r4
 8007adc:	f002 fc26 	bl	800a32c <__d2b>
 8007ae0:	ec4b ab18 	vmov	d8, sl, fp
 8007ae4:	9018      	str	r0, [sp, #96]	; 0x60
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f43f aef6 	beq.w	80078d8 <_strtod_l+0x490>
 8007aec:	2101      	movs	r1, #1
 8007aee:	4620      	mov	r0, r4
 8007af0:	f002 f970 	bl	8009dd4 <__i2b>
 8007af4:	4606      	mov	r6, r0
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f aeee 	beq.w	80078d8 <_strtod_l+0x490>
 8007afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007afe:	9904      	ldr	r1, [sp, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bfab      	itete	ge
 8007b04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b0e:	bfac      	ite	ge
 8007b10:	eb03 0902 	addge.w	r9, r3, r2
 8007b14:	1ad7      	sublt	r7, r2, r3
 8007b16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b18:	eba3 0801 	sub.w	r8, r3, r1
 8007b1c:	4490      	add	r8, r2
 8007b1e:	4ba1      	ldr	r3, [pc, #644]	; (8007da4 <_strtod_l+0x95c>)
 8007b20:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b24:	4598      	cmp	r8, r3
 8007b26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b2a:	f280 80c7 	bge.w	8007cbc <_strtod_l+0x874>
 8007b2e:	eba3 0308 	sub.w	r3, r3, r8
 8007b32:	2b1f      	cmp	r3, #31
 8007b34:	eba2 0203 	sub.w	r2, r2, r3
 8007b38:	f04f 0101 	mov.w	r1, #1
 8007b3c:	f300 80b1 	bgt.w	8007ca2 <_strtod_l+0x85a>
 8007b40:	fa01 f303 	lsl.w	r3, r1, r3
 8007b44:	930d      	str	r3, [sp, #52]	; 0x34
 8007b46:	2300      	movs	r3, #0
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	eb09 0802 	add.w	r8, r9, r2
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	45c1      	cmp	r9, r8
 8007b52:	4417      	add	r7, r2
 8007b54:	441f      	add	r7, r3
 8007b56:	464b      	mov	r3, r9
 8007b58:	bfa8      	it	ge
 8007b5a:	4643      	movge	r3, r8
 8007b5c:	42bb      	cmp	r3, r7
 8007b5e:	bfa8      	it	ge
 8007b60:	463b      	movge	r3, r7
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bfc2      	ittt	gt
 8007b66:	eba8 0803 	subgt.w	r8, r8, r3
 8007b6a:	1aff      	subgt	r7, r7, r3
 8007b6c:	eba9 0903 	subgt.w	r9, r9, r3
 8007b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd17      	ble.n	8007ba6 <_strtod_l+0x75e>
 8007b76:	4631      	mov	r1, r6
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f002 f9ea 	bl	8009f54 <__pow5mult>
 8007b80:	4606      	mov	r6, r0
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f43f aea8 	beq.w	80078d8 <_strtod_l+0x490>
 8007b88:	4601      	mov	r1, r0
 8007b8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f002 f937 	bl	8009e00 <__multiply>
 8007b92:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f43f ae9f 	beq.w	80078d8 <_strtod_l+0x490>
 8007b9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f002 f817 	bl	8009bd0 <_Bfree>
 8007ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba4:	9318      	str	r3, [sp, #96]	; 0x60
 8007ba6:	f1b8 0f00 	cmp.w	r8, #0
 8007baa:	f300 808c 	bgt.w	8007cc6 <_strtod_l+0x87e>
 8007bae:	9b06      	ldr	r3, [sp, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	dd08      	ble.n	8007bc6 <_strtod_l+0x77e>
 8007bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bb6:	9905      	ldr	r1, [sp, #20]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f002 f9cb 	bl	8009f54 <__pow5mult>
 8007bbe:	9005      	str	r0, [sp, #20]
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f43f ae89 	beq.w	80078d8 <_strtod_l+0x490>
 8007bc6:	2f00      	cmp	r7, #0
 8007bc8:	dd08      	ble.n	8007bdc <_strtod_l+0x794>
 8007bca:	9905      	ldr	r1, [sp, #20]
 8007bcc:	463a      	mov	r2, r7
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f002 fa1a 	bl	800a008 <__lshift>
 8007bd4:	9005      	str	r0, [sp, #20]
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f43f ae7e 	beq.w	80078d8 <_strtod_l+0x490>
 8007bdc:	f1b9 0f00 	cmp.w	r9, #0
 8007be0:	dd08      	ble.n	8007bf4 <_strtod_l+0x7ac>
 8007be2:	4631      	mov	r1, r6
 8007be4:	464a      	mov	r2, r9
 8007be6:	4620      	mov	r0, r4
 8007be8:	f002 fa0e 	bl	800a008 <__lshift>
 8007bec:	4606      	mov	r6, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f43f ae72 	beq.w	80078d8 <_strtod_l+0x490>
 8007bf4:	9a05      	ldr	r2, [sp, #20]
 8007bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f002 fa91 	bl	800a120 <__mdiff>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f43f ae69 	beq.w	80078d8 <_strtod_l+0x490>
 8007c06:	68c3      	ldr	r3, [r0, #12]
 8007c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60c3      	str	r3, [r0, #12]
 8007c0e:	4631      	mov	r1, r6
 8007c10:	f002 fa6a 	bl	800a0e8 <__mcmp>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	da60      	bge.n	8007cda <_strtod_l+0x892>
 8007c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c1a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c1e:	f040 8082 	bne.w	8007d26 <_strtod_l+0x8de>
 8007c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d17d      	bne.n	8007d26 <_strtod_l+0x8de>
 8007c2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c2e:	0d1b      	lsrs	r3, r3, #20
 8007c30:	051b      	lsls	r3, r3, #20
 8007c32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c36:	d976      	bls.n	8007d26 <_strtod_l+0x8de>
 8007c38:	696b      	ldr	r3, [r5, #20]
 8007c3a:	b913      	cbnz	r3, 8007c42 <_strtod_l+0x7fa>
 8007c3c:	692b      	ldr	r3, [r5, #16]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	dd71      	ble.n	8007d26 <_strtod_l+0x8de>
 8007c42:	4629      	mov	r1, r5
 8007c44:	2201      	movs	r2, #1
 8007c46:	4620      	mov	r0, r4
 8007c48:	f002 f9de 	bl	800a008 <__lshift>
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4605      	mov	r5, r0
 8007c50:	f002 fa4a 	bl	800a0e8 <__mcmp>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	dd66      	ble.n	8007d26 <_strtod_l+0x8de>
 8007c58:	9904      	ldr	r1, [sp, #16]
 8007c5a:	4a53      	ldr	r2, [pc, #332]	; (8007da8 <_strtod_l+0x960>)
 8007c5c:	465b      	mov	r3, fp
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	f000 8081 	beq.w	8007d66 <_strtod_l+0x91e>
 8007c64:	ea02 010b 	and.w	r1, r2, fp
 8007c68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c6c:	dc7b      	bgt.n	8007d66 <_strtod_l+0x91e>
 8007c6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c72:	f77f aea9 	ble.w	80079c8 <_strtod_l+0x580>
 8007c76:	4b4d      	ldr	r3, [pc, #308]	; (8007dac <_strtod_l+0x964>)
 8007c78:	4650      	mov	r0, sl
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f7f8 fccb 	bl	8000618 <__aeabi_dmul>
 8007c82:	460b      	mov	r3, r1
 8007c84:	4303      	orrs	r3, r0
 8007c86:	bf08      	it	eq
 8007c88:	2322      	moveq	r3, #34	; 0x22
 8007c8a:	4682      	mov	sl, r0
 8007c8c:	468b      	mov	fp, r1
 8007c8e:	bf08      	it	eq
 8007c90:	6023      	streq	r3, [r4, #0]
 8007c92:	e62b      	b.n	80078ec <_strtod_l+0x4a4>
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	ea03 0a0a 	and.w	sl, r3, sl
 8007ca0:	e6e3      	b.n	8007a6a <_strtod_l+0x622>
 8007ca2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007ca6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007caa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007cae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007cb2:	fa01 f308 	lsl.w	r3, r1, r8
 8007cb6:	9308      	str	r3, [sp, #32]
 8007cb8:	910d      	str	r1, [sp, #52]	; 0x34
 8007cba:	e746      	b.n	8007b4a <_strtod_l+0x702>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9308      	str	r3, [sp, #32]
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8007cc4:	e741      	b.n	8007b4a <_strtod_l+0x702>
 8007cc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cc8:	4642      	mov	r2, r8
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f002 f99c 	bl	800a008 <__lshift>
 8007cd0:	9018      	str	r0, [sp, #96]	; 0x60
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	f47f af6b 	bne.w	8007bae <_strtod_l+0x766>
 8007cd8:	e5fe      	b.n	80078d8 <_strtod_l+0x490>
 8007cda:	465f      	mov	r7, fp
 8007cdc:	d16e      	bne.n	8007dbc <_strtod_l+0x974>
 8007cde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ce4:	b342      	cbz	r2, 8007d38 <_strtod_l+0x8f0>
 8007ce6:	4a32      	ldr	r2, [pc, #200]	; (8007db0 <_strtod_l+0x968>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d128      	bne.n	8007d3e <_strtod_l+0x8f6>
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	4651      	mov	r1, sl
 8007cf0:	b1eb      	cbz	r3, 8007d2e <_strtod_l+0x8e6>
 8007cf2:	4b2d      	ldr	r3, [pc, #180]	; (8007da8 <_strtod_l+0x960>)
 8007cf4:	403b      	ands	r3, r7
 8007cf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfe:	d819      	bhi.n	8007d34 <_strtod_l+0x8ec>
 8007d00:	0d1b      	lsrs	r3, r3, #20
 8007d02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	4299      	cmp	r1, r3
 8007d0c:	d117      	bne.n	8007d3e <_strtod_l+0x8f6>
 8007d0e:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <_strtod_l+0x96c>)
 8007d10:	429f      	cmp	r7, r3
 8007d12:	d102      	bne.n	8007d1a <_strtod_l+0x8d2>
 8007d14:	3101      	adds	r1, #1
 8007d16:	f43f addf 	beq.w	80078d8 <_strtod_l+0x490>
 8007d1a:	4b23      	ldr	r3, [pc, #140]	; (8007da8 <_strtod_l+0x960>)
 8007d1c:	403b      	ands	r3, r7
 8007d1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d22:	f04f 0a00 	mov.w	sl, #0
 8007d26:	9b04      	ldr	r3, [sp, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1a4      	bne.n	8007c76 <_strtod_l+0x82e>
 8007d2c:	e5de      	b.n	80078ec <_strtod_l+0x4a4>
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d32:	e7ea      	b.n	8007d0a <_strtod_l+0x8c2>
 8007d34:	4613      	mov	r3, r2
 8007d36:	e7e8      	b.n	8007d0a <_strtod_l+0x8c2>
 8007d38:	ea53 030a 	orrs.w	r3, r3, sl
 8007d3c:	d08c      	beq.n	8007c58 <_strtod_l+0x810>
 8007d3e:	9b08      	ldr	r3, [sp, #32]
 8007d40:	b1db      	cbz	r3, 8007d7a <_strtod_l+0x932>
 8007d42:	423b      	tst	r3, r7
 8007d44:	d0ef      	beq.n	8007d26 <_strtod_l+0x8de>
 8007d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d48:	9a04      	ldr	r2, [sp, #16]
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	4659      	mov	r1, fp
 8007d4e:	b1c3      	cbz	r3, 8007d82 <_strtod_l+0x93a>
 8007d50:	f7ff fb5e 	bl	8007410 <sulp>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	ec51 0b18 	vmov	r0, r1, d8
 8007d5c:	f7f8 faa6 	bl	80002ac <__adddf3>
 8007d60:	4682      	mov	sl, r0
 8007d62:	468b      	mov	fp, r1
 8007d64:	e7df      	b.n	8007d26 <_strtod_l+0x8de>
 8007d66:	4013      	ands	r3, r2
 8007d68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d74:	f04f 3aff 	mov.w	sl, #4294967295
 8007d78:	e7d5      	b.n	8007d26 <_strtod_l+0x8de>
 8007d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7c:	ea13 0f0a 	tst.w	r3, sl
 8007d80:	e7e0      	b.n	8007d44 <_strtod_l+0x8fc>
 8007d82:	f7ff fb45 	bl	8007410 <sulp>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	ec51 0b18 	vmov	r0, r1, d8
 8007d8e:	f7f8 fa8b 	bl	80002a8 <__aeabi_dsub>
 8007d92:	2200      	movs	r2, #0
 8007d94:	2300      	movs	r3, #0
 8007d96:	4682      	mov	sl, r0
 8007d98:	468b      	mov	fp, r1
 8007d9a:	f7f8 fea5 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d0c1      	beq.n	8007d26 <_strtod_l+0x8de>
 8007da2:	e611      	b.n	80079c8 <_strtod_l+0x580>
 8007da4:	fffffc02 	.word	0xfffffc02
 8007da8:	7ff00000 	.word	0x7ff00000
 8007dac:	39500000 	.word	0x39500000
 8007db0:	000fffff 	.word	0x000fffff
 8007db4:	7fefffff 	.word	0x7fefffff
 8007db8:	0800b0e0 	.word	0x0800b0e0
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f002 fb10 	bl	800a3e4 <__ratio>
 8007dc4:	ec59 8b10 	vmov	r8, r9, d0
 8007dc8:	ee10 0a10 	vmov	r0, s0
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fe9c 	bl	8000b10 <__aeabi_dcmple>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d07a      	beq.n	8007ed2 <_strtod_l+0xa8a>
 8007ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d04a      	beq.n	8007e78 <_strtod_l+0xa30>
 8007de2:	4b95      	ldr	r3, [pc, #596]	; (8008038 <_strtod_l+0xbf0>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007dea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008038 <_strtod_l+0xbf0>
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	4b92      	ldr	r3, [pc, #584]	; (800803c <_strtod_l+0xbf4>)
 8007df4:	403b      	ands	r3, r7
 8007df6:	930d      	str	r3, [sp, #52]	; 0x34
 8007df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dfa:	4b91      	ldr	r3, [pc, #580]	; (8008040 <_strtod_l+0xbf8>)
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	f040 80b0 	bne.w	8007f62 <_strtod_l+0xb1a>
 8007e02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e0a:	ec4b ab10 	vmov	d0, sl, fp
 8007e0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e12:	f002 fa0f 	bl	800a234 <__ulp>
 8007e16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e1a:	ec53 2b10 	vmov	r2, r3, d0
 8007e1e:	f7f8 fbfb 	bl	8000618 <__aeabi_dmul>
 8007e22:	4652      	mov	r2, sl
 8007e24:	465b      	mov	r3, fp
 8007e26:	f7f8 fa41 	bl	80002ac <__adddf3>
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4983      	ldr	r1, [pc, #524]	; (800803c <_strtod_l+0xbf4>)
 8007e2e:	4a85      	ldr	r2, [pc, #532]	; (8008044 <_strtod_l+0xbfc>)
 8007e30:	4019      	ands	r1, r3
 8007e32:	4291      	cmp	r1, r2
 8007e34:	4682      	mov	sl, r0
 8007e36:	d960      	bls.n	8007efa <_strtod_l+0xab2>
 8007e38:	ee18 3a90 	vmov	r3, s17
 8007e3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d104      	bne.n	8007e4e <_strtod_l+0xa06>
 8007e44:	ee18 3a10 	vmov	r3, s16
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f43f ad45 	beq.w	80078d8 <_strtod_l+0x490>
 8007e4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008050 <_strtod_l+0xc08>
 8007e52:	f04f 3aff 	mov.w	sl, #4294967295
 8007e56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f001 feb9 	bl	8009bd0 <_Bfree>
 8007e5e:	9905      	ldr	r1, [sp, #20]
 8007e60:	4620      	mov	r0, r4
 8007e62:	f001 feb5 	bl	8009bd0 <_Bfree>
 8007e66:	4631      	mov	r1, r6
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f001 feb1 	bl	8009bd0 <_Bfree>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4620      	mov	r0, r4
 8007e72:	f001 fead 	bl	8009bd0 <_Bfree>
 8007e76:	e61a      	b.n	8007aae <_strtod_l+0x666>
 8007e78:	f1ba 0f00 	cmp.w	sl, #0
 8007e7c:	d11b      	bne.n	8007eb6 <_strtod_l+0xa6e>
 8007e7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e82:	b9f3      	cbnz	r3, 8007ec2 <_strtod_l+0xa7a>
 8007e84:	4b6c      	ldr	r3, [pc, #432]	; (8008038 <_strtod_l+0xbf0>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	f7f8 fe36 	bl	8000afc <__aeabi_dcmplt>
 8007e90:	b9d0      	cbnz	r0, 8007ec8 <_strtod_l+0xa80>
 8007e92:	4640      	mov	r0, r8
 8007e94:	4649      	mov	r1, r9
 8007e96:	4b6c      	ldr	r3, [pc, #432]	; (8008048 <_strtod_l+0xc00>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f7f8 fbbd 	bl	8000618 <__aeabi_dmul>
 8007e9e:	4680      	mov	r8, r0
 8007ea0:	4689      	mov	r9, r1
 8007ea2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ea6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007eaa:	9315      	str	r3, [sp, #84]	; 0x54
 8007eac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007eb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007eb4:	e79d      	b.n	8007df2 <_strtod_l+0x9aa>
 8007eb6:	f1ba 0f01 	cmp.w	sl, #1
 8007eba:	d102      	bne.n	8007ec2 <_strtod_l+0xa7a>
 8007ebc:	2f00      	cmp	r7, #0
 8007ebe:	f43f ad83 	beq.w	80079c8 <_strtod_l+0x580>
 8007ec2:	4b62      	ldr	r3, [pc, #392]	; (800804c <_strtod_l+0xc04>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	e78e      	b.n	8007de6 <_strtod_l+0x99e>
 8007ec8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008048 <_strtod_l+0xc00>
 8007ecc:	f04f 0800 	mov.w	r8, #0
 8007ed0:	e7e7      	b.n	8007ea2 <_strtod_l+0xa5a>
 8007ed2:	4b5d      	ldr	r3, [pc, #372]	; (8008048 <_strtod_l+0xc00>)
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f7f8 fb9d 	bl	8000618 <__aeabi_dmul>
 8007ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	4689      	mov	r9, r1
 8007ee4:	b933      	cbnz	r3, 8007ef4 <_strtod_l+0xaac>
 8007ee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007eea:	900e      	str	r0, [sp, #56]	; 0x38
 8007eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ef2:	e7dd      	b.n	8007eb0 <_strtod_l+0xa68>
 8007ef4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ef8:	e7f9      	b.n	8007eee <_strtod_l+0xaa6>
 8007efa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1a8      	bne.n	8007e56 <_strtod_l+0xa0e>
 8007f04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f0a:	0d1b      	lsrs	r3, r3, #20
 8007f0c:	051b      	lsls	r3, r3, #20
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d1a1      	bne.n	8007e56 <_strtod_l+0xa0e>
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 fedf 	bl	8000cd8 <__aeabi_d2lz>
 8007f1a:	f7f8 fb4f 	bl	80005bc <__aeabi_l2d>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	f7f8 f9bf 	bl	80002a8 <__aeabi_dsub>
 8007f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f30:	ea43 030a 	orr.w	r3, r3, sl
 8007f34:	4313      	orrs	r3, r2
 8007f36:	4680      	mov	r8, r0
 8007f38:	4689      	mov	r9, r1
 8007f3a:	d055      	beq.n	8007fe8 <_strtod_l+0xba0>
 8007f3c:	a336      	add	r3, pc, #216	; (adr r3, 8008018 <_strtod_l+0xbd0>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 fddb 	bl	8000afc <__aeabi_dcmplt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f47f acd0 	bne.w	80078ec <_strtod_l+0x4a4>
 8007f4c:	a334      	add	r3, pc, #208	; (adr r3, 8008020 <_strtod_l+0xbd8>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	4640      	mov	r0, r8
 8007f54:	4649      	mov	r1, r9
 8007f56:	f7f8 fdef 	bl	8000b38 <__aeabi_dcmpgt>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	f43f af7b 	beq.w	8007e56 <_strtod_l+0xa0e>
 8007f60:	e4c4      	b.n	80078ec <_strtod_l+0x4a4>
 8007f62:	9b04      	ldr	r3, [sp, #16]
 8007f64:	b333      	cbz	r3, 8007fb4 <_strtod_l+0xb6c>
 8007f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f6c:	d822      	bhi.n	8007fb4 <_strtod_l+0xb6c>
 8007f6e:	a32e      	add	r3, pc, #184	; (adr r3, 8008028 <_strtod_l+0xbe0>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4640      	mov	r0, r8
 8007f76:	4649      	mov	r1, r9
 8007f78:	f7f8 fdca 	bl	8000b10 <__aeabi_dcmple>
 8007f7c:	b1a0      	cbz	r0, 8007fa8 <_strtod_l+0xb60>
 8007f7e:	4649      	mov	r1, r9
 8007f80:	4640      	mov	r0, r8
 8007f82:	f7f8 fe21 	bl	8000bc8 <__aeabi_d2uiz>
 8007f86:	2801      	cmp	r0, #1
 8007f88:	bf38      	it	cc
 8007f8a:	2001      	movcc	r0, #1
 8007f8c:	f7f8 faca 	bl	8000524 <__aeabi_ui2d>
 8007f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	bb23      	cbnz	r3, 8007fe2 <_strtod_l+0xb9a>
 8007f98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f9c:	9010      	str	r0, [sp, #64]	; 0x40
 8007f9e:	9311      	str	r3, [sp, #68]	; 0x44
 8007fa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007fb0:	1a9b      	subs	r3, r3, r2
 8007fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fb8:	eeb0 0a48 	vmov.f32	s0, s16
 8007fbc:	eef0 0a68 	vmov.f32	s1, s17
 8007fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fc4:	f002 f936 	bl	800a234 <__ulp>
 8007fc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fcc:	ec53 2b10 	vmov	r2, r3, d0
 8007fd0:	f7f8 fb22 	bl	8000618 <__aeabi_dmul>
 8007fd4:	ec53 2b18 	vmov	r2, r3, d8
 8007fd8:	f7f8 f968 	bl	80002ac <__adddf3>
 8007fdc:	4682      	mov	sl, r0
 8007fde:	468b      	mov	fp, r1
 8007fe0:	e78d      	b.n	8007efe <_strtod_l+0xab6>
 8007fe2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007fe6:	e7db      	b.n	8007fa0 <_strtod_l+0xb58>
 8007fe8:	a311      	add	r3, pc, #68	; (adr r3, 8008030 <_strtod_l+0xbe8>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fd85 	bl	8000afc <__aeabi_dcmplt>
 8007ff2:	e7b2      	b.n	8007f5a <_strtod_l+0xb12>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ffa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	f7ff ba6b 	b.w	80074d8 <_strtod_l+0x90>
 8008002:	2a65      	cmp	r2, #101	; 0x65
 8008004:	f43f ab5f 	beq.w	80076c6 <_strtod_l+0x27e>
 8008008:	2a45      	cmp	r2, #69	; 0x45
 800800a:	f43f ab5c 	beq.w	80076c6 <_strtod_l+0x27e>
 800800e:	2301      	movs	r3, #1
 8008010:	f7ff bb94 	b.w	800773c <_strtod_l+0x2f4>
 8008014:	f3af 8000 	nop.w
 8008018:	94a03595 	.word	0x94a03595
 800801c:	3fdfffff 	.word	0x3fdfffff
 8008020:	35afe535 	.word	0x35afe535
 8008024:	3fe00000 	.word	0x3fe00000
 8008028:	ffc00000 	.word	0xffc00000
 800802c:	41dfffff 	.word	0x41dfffff
 8008030:	94a03595 	.word	0x94a03595
 8008034:	3fcfffff 	.word	0x3fcfffff
 8008038:	3ff00000 	.word	0x3ff00000
 800803c:	7ff00000 	.word	0x7ff00000
 8008040:	7fe00000 	.word	0x7fe00000
 8008044:	7c9fffff 	.word	0x7c9fffff
 8008048:	3fe00000 	.word	0x3fe00000
 800804c:	bff00000 	.word	0xbff00000
 8008050:	7fefffff 	.word	0x7fefffff

08008054 <_strtod_r>:
 8008054:	4b01      	ldr	r3, [pc, #4]	; (800805c <_strtod_r+0x8>)
 8008056:	f7ff b9f7 	b.w	8007448 <_strtod_l>
 800805a:	bf00      	nop
 800805c:	20000074 	.word	0x20000074

08008060 <_strtol_l.constprop.0>:
 8008060:	2b01      	cmp	r3, #1
 8008062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008066:	d001      	beq.n	800806c <_strtol_l.constprop.0+0xc>
 8008068:	2b24      	cmp	r3, #36	; 0x24
 800806a:	d906      	bls.n	800807a <_strtol_l.constprop.0+0x1a>
 800806c:	f7fe fa70 	bl	8006550 <__errno>
 8008070:	2316      	movs	r3, #22
 8008072:	6003      	str	r3, [r0, #0]
 8008074:	2000      	movs	r0, #0
 8008076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008160 <_strtol_l.constprop.0+0x100>
 800807e:	460d      	mov	r5, r1
 8008080:	462e      	mov	r6, r5
 8008082:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008086:	f814 700c 	ldrb.w	r7, [r4, ip]
 800808a:	f017 0708 	ands.w	r7, r7, #8
 800808e:	d1f7      	bne.n	8008080 <_strtol_l.constprop.0+0x20>
 8008090:	2c2d      	cmp	r4, #45	; 0x2d
 8008092:	d132      	bne.n	80080fa <_strtol_l.constprop.0+0x9a>
 8008094:	782c      	ldrb	r4, [r5, #0]
 8008096:	2701      	movs	r7, #1
 8008098:	1cb5      	adds	r5, r6, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d05b      	beq.n	8008156 <_strtol_l.constprop.0+0xf6>
 800809e:	2b10      	cmp	r3, #16
 80080a0:	d109      	bne.n	80080b6 <_strtol_l.constprop.0+0x56>
 80080a2:	2c30      	cmp	r4, #48	; 0x30
 80080a4:	d107      	bne.n	80080b6 <_strtol_l.constprop.0+0x56>
 80080a6:	782c      	ldrb	r4, [r5, #0]
 80080a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80080ac:	2c58      	cmp	r4, #88	; 0x58
 80080ae:	d14d      	bne.n	800814c <_strtol_l.constprop.0+0xec>
 80080b0:	786c      	ldrb	r4, [r5, #1]
 80080b2:	2310      	movs	r3, #16
 80080b4:	3502      	adds	r5, #2
 80080b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80080ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80080be:	f04f 0c00 	mov.w	ip, #0
 80080c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80080c6:	4666      	mov	r6, ip
 80080c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80080cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80080d0:	f1be 0f09 	cmp.w	lr, #9
 80080d4:	d816      	bhi.n	8008104 <_strtol_l.constprop.0+0xa4>
 80080d6:	4674      	mov	r4, lr
 80080d8:	42a3      	cmp	r3, r4
 80080da:	dd24      	ble.n	8008126 <_strtol_l.constprop.0+0xc6>
 80080dc:	f1bc 0f00 	cmp.w	ip, #0
 80080e0:	db1e      	blt.n	8008120 <_strtol_l.constprop.0+0xc0>
 80080e2:	45b1      	cmp	r9, r6
 80080e4:	d31c      	bcc.n	8008120 <_strtol_l.constprop.0+0xc0>
 80080e6:	d101      	bne.n	80080ec <_strtol_l.constprop.0+0x8c>
 80080e8:	45a2      	cmp	sl, r4
 80080ea:	db19      	blt.n	8008120 <_strtol_l.constprop.0+0xc0>
 80080ec:	fb06 4603 	mla	r6, r6, r3, r4
 80080f0:	f04f 0c01 	mov.w	ip, #1
 80080f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080f8:	e7e8      	b.n	80080cc <_strtol_l.constprop.0+0x6c>
 80080fa:	2c2b      	cmp	r4, #43	; 0x2b
 80080fc:	bf04      	itt	eq
 80080fe:	782c      	ldrbeq	r4, [r5, #0]
 8008100:	1cb5      	addeq	r5, r6, #2
 8008102:	e7ca      	b.n	800809a <_strtol_l.constprop.0+0x3a>
 8008104:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008108:	f1be 0f19 	cmp.w	lr, #25
 800810c:	d801      	bhi.n	8008112 <_strtol_l.constprop.0+0xb2>
 800810e:	3c37      	subs	r4, #55	; 0x37
 8008110:	e7e2      	b.n	80080d8 <_strtol_l.constprop.0+0x78>
 8008112:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008116:	f1be 0f19 	cmp.w	lr, #25
 800811a:	d804      	bhi.n	8008126 <_strtol_l.constprop.0+0xc6>
 800811c:	3c57      	subs	r4, #87	; 0x57
 800811e:	e7db      	b.n	80080d8 <_strtol_l.constprop.0+0x78>
 8008120:	f04f 3cff 	mov.w	ip, #4294967295
 8008124:	e7e6      	b.n	80080f4 <_strtol_l.constprop.0+0x94>
 8008126:	f1bc 0f00 	cmp.w	ip, #0
 800812a:	da05      	bge.n	8008138 <_strtol_l.constprop.0+0xd8>
 800812c:	2322      	movs	r3, #34	; 0x22
 800812e:	6003      	str	r3, [r0, #0]
 8008130:	4646      	mov	r6, r8
 8008132:	b942      	cbnz	r2, 8008146 <_strtol_l.constprop.0+0xe6>
 8008134:	4630      	mov	r0, r6
 8008136:	e79e      	b.n	8008076 <_strtol_l.constprop.0+0x16>
 8008138:	b107      	cbz	r7, 800813c <_strtol_l.constprop.0+0xdc>
 800813a:	4276      	negs	r6, r6
 800813c:	2a00      	cmp	r2, #0
 800813e:	d0f9      	beq.n	8008134 <_strtol_l.constprop.0+0xd4>
 8008140:	f1bc 0f00 	cmp.w	ip, #0
 8008144:	d000      	beq.n	8008148 <_strtol_l.constprop.0+0xe8>
 8008146:	1e69      	subs	r1, r5, #1
 8008148:	6011      	str	r1, [r2, #0]
 800814a:	e7f3      	b.n	8008134 <_strtol_l.constprop.0+0xd4>
 800814c:	2430      	movs	r4, #48	; 0x30
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1b1      	bne.n	80080b6 <_strtol_l.constprop.0+0x56>
 8008152:	2308      	movs	r3, #8
 8008154:	e7af      	b.n	80080b6 <_strtol_l.constprop.0+0x56>
 8008156:	2c30      	cmp	r4, #48	; 0x30
 8008158:	d0a5      	beq.n	80080a6 <_strtol_l.constprop.0+0x46>
 800815a:	230a      	movs	r3, #10
 800815c:	e7ab      	b.n	80080b6 <_strtol_l.constprop.0+0x56>
 800815e:	bf00      	nop
 8008160:	0800b109 	.word	0x0800b109

08008164 <_strtol_r>:
 8008164:	f7ff bf7c 	b.w	8008060 <_strtol_l.constprop.0>

08008168 <__swbuf_r>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	460e      	mov	r6, r1
 800816c:	4614      	mov	r4, r2
 800816e:	4605      	mov	r5, r0
 8008170:	b118      	cbz	r0, 800817a <__swbuf_r+0x12>
 8008172:	6983      	ldr	r3, [r0, #24]
 8008174:	b90b      	cbnz	r3, 800817a <__swbuf_r+0x12>
 8008176:	f001 f84b 	bl	8009210 <__sinit>
 800817a:	4b21      	ldr	r3, [pc, #132]	; (8008200 <__swbuf_r+0x98>)
 800817c:	429c      	cmp	r4, r3
 800817e:	d12b      	bne.n	80081d8 <__swbuf_r+0x70>
 8008180:	686c      	ldr	r4, [r5, #4]
 8008182:	69a3      	ldr	r3, [r4, #24]
 8008184:	60a3      	str	r3, [r4, #8]
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	071a      	lsls	r2, r3, #28
 800818a:	d52f      	bpl.n	80081ec <__swbuf_r+0x84>
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	b36b      	cbz	r3, 80081ec <__swbuf_r+0x84>
 8008190:	6923      	ldr	r3, [r4, #16]
 8008192:	6820      	ldr	r0, [r4, #0]
 8008194:	1ac0      	subs	r0, r0, r3
 8008196:	6963      	ldr	r3, [r4, #20]
 8008198:	b2f6      	uxtb	r6, r6
 800819a:	4283      	cmp	r3, r0
 800819c:	4637      	mov	r7, r6
 800819e:	dc04      	bgt.n	80081aa <__swbuf_r+0x42>
 80081a0:	4621      	mov	r1, r4
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 ffa0 	bl	80090e8 <_fflush_r>
 80081a8:	bb30      	cbnz	r0, 80081f8 <__swbuf_r+0x90>
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	60a3      	str	r3, [r4, #8]
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	701e      	strb	r6, [r3, #0]
 80081b8:	6963      	ldr	r3, [r4, #20]
 80081ba:	3001      	adds	r0, #1
 80081bc:	4283      	cmp	r3, r0
 80081be:	d004      	beq.n	80081ca <__swbuf_r+0x62>
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	07db      	lsls	r3, r3, #31
 80081c4:	d506      	bpl.n	80081d4 <__swbuf_r+0x6c>
 80081c6:	2e0a      	cmp	r6, #10
 80081c8:	d104      	bne.n	80081d4 <__swbuf_r+0x6c>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f000 ff8b 	bl	80090e8 <_fflush_r>
 80081d2:	b988      	cbnz	r0, 80081f8 <__swbuf_r+0x90>
 80081d4:	4638      	mov	r0, r7
 80081d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d8:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <__swbuf_r+0x9c>)
 80081da:	429c      	cmp	r4, r3
 80081dc:	d101      	bne.n	80081e2 <__swbuf_r+0x7a>
 80081de:	68ac      	ldr	r4, [r5, #8]
 80081e0:	e7cf      	b.n	8008182 <__swbuf_r+0x1a>
 80081e2:	4b09      	ldr	r3, [pc, #36]	; (8008208 <__swbuf_r+0xa0>)
 80081e4:	429c      	cmp	r4, r3
 80081e6:	bf08      	it	eq
 80081e8:	68ec      	ldreq	r4, [r5, #12]
 80081ea:	e7ca      	b.n	8008182 <__swbuf_r+0x1a>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 f80c 	bl	800820c <__swsetup_r>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d0cb      	beq.n	8008190 <__swbuf_r+0x28>
 80081f8:	f04f 37ff 	mov.w	r7, #4294967295
 80081fc:	e7ea      	b.n	80081d4 <__swbuf_r+0x6c>
 80081fe:	bf00      	nop
 8008200:	0800b2bc 	.word	0x0800b2bc
 8008204:	0800b2dc 	.word	0x0800b2dc
 8008208:	0800b29c 	.word	0x0800b29c

0800820c <__swsetup_r>:
 800820c:	4b32      	ldr	r3, [pc, #200]	; (80082d8 <__swsetup_r+0xcc>)
 800820e:	b570      	push	{r4, r5, r6, lr}
 8008210:	681d      	ldr	r5, [r3, #0]
 8008212:	4606      	mov	r6, r0
 8008214:	460c      	mov	r4, r1
 8008216:	b125      	cbz	r5, 8008222 <__swsetup_r+0x16>
 8008218:	69ab      	ldr	r3, [r5, #24]
 800821a:	b913      	cbnz	r3, 8008222 <__swsetup_r+0x16>
 800821c:	4628      	mov	r0, r5
 800821e:	f000 fff7 	bl	8009210 <__sinit>
 8008222:	4b2e      	ldr	r3, [pc, #184]	; (80082dc <__swsetup_r+0xd0>)
 8008224:	429c      	cmp	r4, r3
 8008226:	d10f      	bne.n	8008248 <__swsetup_r+0x3c>
 8008228:	686c      	ldr	r4, [r5, #4]
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008230:	0719      	lsls	r1, r3, #28
 8008232:	d42c      	bmi.n	800828e <__swsetup_r+0x82>
 8008234:	06dd      	lsls	r5, r3, #27
 8008236:	d411      	bmi.n	800825c <__swsetup_r+0x50>
 8008238:	2309      	movs	r3, #9
 800823a:	6033      	str	r3, [r6, #0]
 800823c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	e03e      	b.n	80082c6 <__swsetup_r+0xba>
 8008248:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <__swsetup_r+0xd4>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d101      	bne.n	8008252 <__swsetup_r+0x46>
 800824e:	68ac      	ldr	r4, [r5, #8]
 8008250:	e7eb      	b.n	800822a <__swsetup_r+0x1e>
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <__swsetup_r+0xd8>)
 8008254:	429c      	cmp	r4, r3
 8008256:	bf08      	it	eq
 8008258:	68ec      	ldreq	r4, [r5, #12]
 800825a:	e7e6      	b.n	800822a <__swsetup_r+0x1e>
 800825c:	0758      	lsls	r0, r3, #29
 800825e:	d512      	bpl.n	8008286 <__swsetup_r+0x7a>
 8008260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008262:	b141      	cbz	r1, 8008276 <__swsetup_r+0x6a>
 8008264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008268:	4299      	cmp	r1, r3
 800826a:	d002      	beq.n	8008272 <__swsetup_r+0x66>
 800826c:	4630      	mov	r0, r6
 800826e:	f002 f947 	bl	800a500 <_free_r>
 8008272:	2300      	movs	r3, #0
 8008274:	6363      	str	r3, [r4, #52]	; 0x34
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	2300      	movs	r3, #0
 8008280:	6063      	str	r3, [r4, #4]
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	f043 0308 	orr.w	r3, r3, #8
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	b94b      	cbnz	r3, 80082a6 <__swsetup_r+0x9a>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829c:	d003      	beq.n	80082a6 <__swsetup_r+0x9a>
 800829e:	4621      	mov	r1, r4
 80082a0:	4630      	mov	r0, r6
 80082a2:	f001 fbed 	bl	8009a80 <__smakebuf_r>
 80082a6:	89a0      	ldrh	r0, [r4, #12]
 80082a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082ac:	f010 0301 	ands.w	r3, r0, #1
 80082b0:	d00a      	beq.n	80082c8 <__swsetup_r+0xbc>
 80082b2:	2300      	movs	r3, #0
 80082b4:	60a3      	str	r3, [r4, #8]
 80082b6:	6963      	ldr	r3, [r4, #20]
 80082b8:	425b      	negs	r3, r3
 80082ba:	61a3      	str	r3, [r4, #24]
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	b943      	cbnz	r3, 80082d2 <__swsetup_r+0xc6>
 80082c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082c4:	d1ba      	bne.n	800823c <__swsetup_r+0x30>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	0781      	lsls	r1, r0, #30
 80082ca:	bf58      	it	pl
 80082cc:	6963      	ldrpl	r3, [r4, #20]
 80082ce:	60a3      	str	r3, [r4, #8]
 80082d0:	e7f4      	b.n	80082bc <__swsetup_r+0xb0>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7f7      	b.n	80082c6 <__swsetup_r+0xba>
 80082d6:	bf00      	nop
 80082d8:	2000000c 	.word	0x2000000c
 80082dc:	0800b2bc 	.word	0x0800b2bc
 80082e0:	0800b2dc 	.word	0x0800b2dc
 80082e4:	0800b29c 	.word	0x0800b29c

080082e8 <quorem>:
 80082e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	6903      	ldr	r3, [r0, #16]
 80082ee:	690c      	ldr	r4, [r1, #16]
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	4607      	mov	r7, r0
 80082f4:	f2c0 8081 	blt.w	80083fa <quorem+0x112>
 80082f8:	3c01      	subs	r4, #1
 80082fa:	f101 0814 	add.w	r8, r1, #20
 80082fe:	f100 0514 	add.w	r5, r0, #20
 8008302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800830c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008310:	3301      	adds	r3, #1
 8008312:	429a      	cmp	r2, r3
 8008314:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008318:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800831c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008320:	d331      	bcc.n	8008386 <quorem+0x9e>
 8008322:	f04f 0e00 	mov.w	lr, #0
 8008326:	4640      	mov	r0, r8
 8008328:	46ac      	mov	ip, r5
 800832a:	46f2      	mov	sl, lr
 800832c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008330:	b293      	uxth	r3, r2
 8008332:	fb06 e303 	mla	r3, r6, r3, lr
 8008336:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800833a:	b29b      	uxth	r3, r3
 800833c:	ebaa 0303 	sub.w	r3, sl, r3
 8008340:	f8dc a000 	ldr.w	sl, [ip]
 8008344:	0c12      	lsrs	r2, r2, #16
 8008346:	fa13 f38a 	uxtah	r3, r3, sl
 800834a:	fb06 e202 	mla	r2, r6, r2, lr
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	9b00      	ldr	r3, [sp, #0]
 8008352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008356:	b292      	uxth	r2, r2
 8008358:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800835c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008360:	f8bd 3000 	ldrh.w	r3, [sp]
 8008364:	4581      	cmp	r9, r0
 8008366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800836a:	f84c 3b04 	str.w	r3, [ip], #4
 800836e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008372:	d2db      	bcs.n	800832c <quorem+0x44>
 8008374:	f855 300b 	ldr.w	r3, [r5, fp]
 8008378:	b92b      	cbnz	r3, 8008386 <quorem+0x9e>
 800837a:	9b01      	ldr	r3, [sp, #4]
 800837c:	3b04      	subs	r3, #4
 800837e:	429d      	cmp	r5, r3
 8008380:	461a      	mov	r2, r3
 8008382:	d32e      	bcc.n	80083e2 <quorem+0xfa>
 8008384:	613c      	str	r4, [r7, #16]
 8008386:	4638      	mov	r0, r7
 8008388:	f001 feae 	bl	800a0e8 <__mcmp>
 800838c:	2800      	cmp	r0, #0
 800838e:	db24      	blt.n	80083da <quorem+0xf2>
 8008390:	3601      	adds	r6, #1
 8008392:	4628      	mov	r0, r5
 8008394:	f04f 0c00 	mov.w	ip, #0
 8008398:	f858 2b04 	ldr.w	r2, [r8], #4
 800839c:	f8d0 e000 	ldr.w	lr, [r0]
 80083a0:	b293      	uxth	r3, r2
 80083a2:	ebac 0303 	sub.w	r3, ip, r3
 80083a6:	0c12      	lsrs	r2, r2, #16
 80083a8:	fa13 f38e 	uxtah	r3, r3, lr
 80083ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083ba:	45c1      	cmp	r9, r8
 80083bc:	f840 3b04 	str.w	r3, [r0], #4
 80083c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083c4:	d2e8      	bcs.n	8008398 <quorem+0xb0>
 80083c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ce:	b922      	cbnz	r2, 80083da <quorem+0xf2>
 80083d0:	3b04      	subs	r3, #4
 80083d2:	429d      	cmp	r5, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	d30a      	bcc.n	80083ee <quorem+0x106>
 80083d8:	613c      	str	r4, [r7, #16]
 80083da:	4630      	mov	r0, r6
 80083dc:	b003      	add	sp, #12
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	6812      	ldr	r2, [r2, #0]
 80083e4:	3b04      	subs	r3, #4
 80083e6:	2a00      	cmp	r2, #0
 80083e8:	d1cc      	bne.n	8008384 <quorem+0x9c>
 80083ea:	3c01      	subs	r4, #1
 80083ec:	e7c7      	b.n	800837e <quorem+0x96>
 80083ee:	6812      	ldr	r2, [r2, #0]
 80083f0:	3b04      	subs	r3, #4
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	d1f0      	bne.n	80083d8 <quorem+0xf0>
 80083f6:	3c01      	subs	r4, #1
 80083f8:	e7eb      	b.n	80083d2 <quorem+0xea>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e7ee      	b.n	80083dc <quorem+0xf4>
	...

08008400 <_dtoa_r>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	ed2d 8b04 	vpush	{d8-d9}
 8008408:	ec57 6b10 	vmov	r6, r7, d0
 800840c:	b093      	sub	sp, #76	; 0x4c
 800840e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008414:	9106      	str	r1, [sp, #24]
 8008416:	ee10 aa10 	vmov	sl, s0
 800841a:	4604      	mov	r4, r0
 800841c:	9209      	str	r2, [sp, #36]	; 0x24
 800841e:	930c      	str	r3, [sp, #48]	; 0x30
 8008420:	46bb      	mov	fp, r7
 8008422:	b975      	cbnz	r5, 8008442 <_dtoa_r+0x42>
 8008424:	2010      	movs	r0, #16
 8008426:	f001 fb6b 	bl	8009b00 <malloc>
 800842a:	4602      	mov	r2, r0
 800842c:	6260      	str	r0, [r4, #36]	; 0x24
 800842e:	b920      	cbnz	r0, 800843a <_dtoa_r+0x3a>
 8008430:	4ba7      	ldr	r3, [pc, #668]	; (80086d0 <_dtoa_r+0x2d0>)
 8008432:	21ea      	movs	r1, #234	; 0xea
 8008434:	48a7      	ldr	r0, [pc, #668]	; (80086d4 <_dtoa_r+0x2d4>)
 8008436:	f002 fc89 	bl	800ad4c <__assert_func>
 800843a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800843e:	6005      	str	r5, [r0, #0]
 8008440:	60c5      	str	r5, [r0, #12]
 8008442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008444:	6819      	ldr	r1, [r3, #0]
 8008446:	b151      	cbz	r1, 800845e <_dtoa_r+0x5e>
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	604a      	str	r2, [r1, #4]
 800844c:	2301      	movs	r3, #1
 800844e:	4093      	lsls	r3, r2
 8008450:	608b      	str	r3, [r1, #8]
 8008452:	4620      	mov	r0, r4
 8008454:	f001 fbbc 	bl	8009bd0 <_Bfree>
 8008458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	1e3b      	subs	r3, r7, #0
 8008460:	bfaa      	itet	ge
 8008462:	2300      	movge	r3, #0
 8008464:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008468:	f8c8 3000 	strge.w	r3, [r8]
 800846c:	4b9a      	ldr	r3, [pc, #616]	; (80086d8 <_dtoa_r+0x2d8>)
 800846e:	bfbc      	itt	lt
 8008470:	2201      	movlt	r2, #1
 8008472:	f8c8 2000 	strlt.w	r2, [r8]
 8008476:	ea33 030b 	bics.w	r3, r3, fp
 800847a:	d11b      	bne.n	80084b4 <_dtoa_r+0xb4>
 800847c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800847e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008488:	4333      	orrs	r3, r6
 800848a:	f000 8592 	beq.w	8008fb2 <_dtoa_r+0xbb2>
 800848e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008490:	b963      	cbnz	r3, 80084ac <_dtoa_r+0xac>
 8008492:	4b92      	ldr	r3, [pc, #584]	; (80086dc <_dtoa_r+0x2dc>)
 8008494:	e022      	b.n	80084dc <_dtoa_r+0xdc>
 8008496:	4b92      	ldr	r3, [pc, #584]	; (80086e0 <_dtoa_r+0x2e0>)
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	3308      	adds	r3, #8
 800849c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	9801      	ldr	r0, [sp, #4]
 80084a2:	b013      	add	sp, #76	; 0x4c
 80084a4:	ecbd 8b04 	vpop	{d8-d9}
 80084a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ac:	4b8b      	ldr	r3, [pc, #556]	; (80086dc <_dtoa_r+0x2dc>)
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	3303      	adds	r3, #3
 80084b2:	e7f3      	b.n	800849c <_dtoa_r+0x9c>
 80084b4:	2200      	movs	r2, #0
 80084b6:	2300      	movs	r3, #0
 80084b8:	4650      	mov	r0, sl
 80084ba:	4659      	mov	r1, fp
 80084bc:	f7f8 fb14 	bl	8000ae8 <__aeabi_dcmpeq>
 80084c0:	ec4b ab19 	vmov	d9, sl, fp
 80084c4:	4680      	mov	r8, r0
 80084c6:	b158      	cbz	r0, 80084e0 <_dtoa_r+0xe0>
 80084c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084ca:	2301      	movs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 856b 	beq.w	8008fac <_dtoa_r+0xbac>
 80084d6:	4883      	ldr	r0, [pc, #524]	; (80086e4 <_dtoa_r+0x2e4>)
 80084d8:	6018      	str	r0, [r3, #0]
 80084da:	1e43      	subs	r3, r0, #1
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	e7df      	b.n	80084a0 <_dtoa_r+0xa0>
 80084e0:	ec4b ab10 	vmov	d0, sl, fp
 80084e4:	aa10      	add	r2, sp, #64	; 0x40
 80084e6:	a911      	add	r1, sp, #68	; 0x44
 80084e8:	4620      	mov	r0, r4
 80084ea:	f001 ff1f 	bl	800a32c <__d2b>
 80084ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80084f2:	ee08 0a10 	vmov	s16, r0
 80084f6:	2d00      	cmp	r5, #0
 80084f8:	f000 8084 	beq.w	8008604 <_dtoa_r+0x204>
 80084fc:	ee19 3a90 	vmov	r3, s19
 8008500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008504:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008508:	4656      	mov	r6, sl
 800850a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800850e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008516:	4b74      	ldr	r3, [pc, #464]	; (80086e8 <_dtoa_r+0x2e8>)
 8008518:	2200      	movs	r2, #0
 800851a:	4630      	mov	r0, r6
 800851c:	4639      	mov	r1, r7
 800851e:	f7f7 fec3 	bl	80002a8 <__aeabi_dsub>
 8008522:	a365      	add	r3, pc, #404	; (adr r3, 80086b8 <_dtoa_r+0x2b8>)
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f7f8 f876 	bl	8000618 <__aeabi_dmul>
 800852c:	a364      	add	r3, pc, #400	; (adr r3, 80086c0 <_dtoa_r+0x2c0>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f7 febb 	bl	80002ac <__adddf3>
 8008536:	4606      	mov	r6, r0
 8008538:	4628      	mov	r0, r5
 800853a:	460f      	mov	r7, r1
 800853c:	f7f8 f802 	bl	8000544 <__aeabi_i2d>
 8008540:	a361      	add	r3, pc, #388	; (adr r3, 80086c8 <_dtoa_r+0x2c8>)
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	f7f8 f867 	bl	8000618 <__aeabi_dmul>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4630      	mov	r0, r6
 8008550:	4639      	mov	r1, r7
 8008552:	f7f7 feab 	bl	80002ac <__adddf3>
 8008556:	4606      	mov	r6, r0
 8008558:	460f      	mov	r7, r1
 800855a:	f7f8 fb0d 	bl	8000b78 <__aeabi_d2iz>
 800855e:	2200      	movs	r2, #0
 8008560:	9000      	str	r0, [sp, #0]
 8008562:	2300      	movs	r3, #0
 8008564:	4630      	mov	r0, r6
 8008566:	4639      	mov	r1, r7
 8008568:	f7f8 fac8 	bl	8000afc <__aeabi_dcmplt>
 800856c:	b150      	cbz	r0, 8008584 <_dtoa_r+0x184>
 800856e:	9800      	ldr	r0, [sp, #0]
 8008570:	f7f7 ffe8 	bl	8000544 <__aeabi_i2d>
 8008574:	4632      	mov	r2, r6
 8008576:	463b      	mov	r3, r7
 8008578:	f7f8 fab6 	bl	8000ae8 <__aeabi_dcmpeq>
 800857c:	b910      	cbnz	r0, 8008584 <_dtoa_r+0x184>
 800857e:	9b00      	ldr	r3, [sp, #0]
 8008580:	3b01      	subs	r3, #1
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	9b00      	ldr	r3, [sp, #0]
 8008586:	2b16      	cmp	r3, #22
 8008588:	d85a      	bhi.n	8008640 <_dtoa_r+0x240>
 800858a:	9a00      	ldr	r2, [sp, #0]
 800858c:	4b57      	ldr	r3, [pc, #348]	; (80086ec <_dtoa_r+0x2ec>)
 800858e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	ec51 0b19 	vmov	r0, r1, d9
 800859a:	f7f8 faaf 	bl	8000afc <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d050      	beq.n	8008644 <_dtoa_r+0x244>
 80085a2:	9b00      	ldr	r3, [sp, #0]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	2300      	movs	r3, #0
 80085aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ae:	1b5d      	subs	r5, r3, r5
 80085b0:	1e6b      	subs	r3, r5, #1
 80085b2:	9305      	str	r3, [sp, #20]
 80085b4:	bf45      	ittet	mi
 80085b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80085ba:	9304      	strmi	r3, [sp, #16]
 80085bc:	2300      	movpl	r3, #0
 80085be:	2300      	movmi	r3, #0
 80085c0:	bf4c      	ite	mi
 80085c2:	9305      	strmi	r3, [sp, #20]
 80085c4:	9304      	strpl	r3, [sp, #16]
 80085c6:	9b00      	ldr	r3, [sp, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db3d      	blt.n	8008648 <_dtoa_r+0x248>
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	9a00      	ldr	r2, [sp, #0]
 80085d0:	920a      	str	r2, [sp, #40]	; 0x28
 80085d2:	4413      	add	r3, r2
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	2300      	movs	r3, #0
 80085d8:	9307      	str	r3, [sp, #28]
 80085da:	9b06      	ldr	r3, [sp, #24]
 80085dc:	2b09      	cmp	r3, #9
 80085de:	f200 8089 	bhi.w	80086f4 <_dtoa_r+0x2f4>
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	bfc4      	itt	gt
 80085e6:	3b04      	subgt	r3, #4
 80085e8:	9306      	strgt	r3, [sp, #24]
 80085ea:	9b06      	ldr	r3, [sp, #24]
 80085ec:	f1a3 0302 	sub.w	r3, r3, #2
 80085f0:	bfcc      	ite	gt
 80085f2:	2500      	movgt	r5, #0
 80085f4:	2501      	movle	r5, #1
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	f200 8087 	bhi.w	800870a <_dtoa_r+0x30a>
 80085fc:	e8df f003 	tbb	[pc, r3]
 8008600:	59383a2d 	.word	0x59383a2d
 8008604:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008608:	441d      	add	r5, r3
 800860a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800860e:	2b20      	cmp	r3, #32
 8008610:	bfc1      	itttt	gt
 8008612:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008616:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800861a:	fa0b f303 	lslgt.w	r3, fp, r3
 800861e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008622:	bfda      	itte	le
 8008624:	f1c3 0320 	rsble	r3, r3, #32
 8008628:	fa06 f003 	lslle.w	r0, r6, r3
 800862c:	4318      	orrgt	r0, r3
 800862e:	f7f7 ff79 	bl	8000524 <__aeabi_ui2d>
 8008632:	2301      	movs	r3, #1
 8008634:	4606      	mov	r6, r0
 8008636:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800863a:	3d01      	subs	r5, #1
 800863c:	930e      	str	r3, [sp, #56]	; 0x38
 800863e:	e76a      	b.n	8008516 <_dtoa_r+0x116>
 8008640:	2301      	movs	r3, #1
 8008642:	e7b2      	b.n	80085aa <_dtoa_r+0x1aa>
 8008644:	900b      	str	r0, [sp, #44]	; 0x2c
 8008646:	e7b1      	b.n	80085ac <_dtoa_r+0x1ac>
 8008648:	9b04      	ldr	r3, [sp, #16]
 800864a:	9a00      	ldr	r2, [sp, #0]
 800864c:	1a9b      	subs	r3, r3, r2
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	4253      	negs	r3, r2
 8008652:	9307      	str	r3, [sp, #28]
 8008654:	2300      	movs	r3, #0
 8008656:	930a      	str	r3, [sp, #40]	; 0x28
 8008658:	e7bf      	b.n	80085da <_dtoa_r+0x1da>
 800865a:	2300      	movs	r3, #0
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	dc55      	bgt.n	8008710 <_dtoa_r+0x310>
 8008664:	2301      	movs	r3, #1
 8008666:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800866a:	461a      	mov	r2, r3
 800866c:	9209      	str	r2, [sp, #36]	; 0x24
 800866e:	e00c      	b.n	800868a <_dtoa_r+0x28a>
 8008670:	2301      	movs	r3, #1
 8008672:	e7f3      	b.n	800865c <_dtoa_r+0x25c>
 8008674:	2300      	movs	r3, #0
 8008676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008678:	9308      	str	r3, [sp, #32]
 800867a:	9b00      	ldr	r3, [sp, #0]
 800867c:	4413      	add	r3, r2
 800867e:	9302      	str	r3, [sp, #8]
 8008680:	3301      	adds	r3, #1
 8008682:	2b01      	cmp	r3, #1
 8008684:	9303      	str	r3, [sp, #12]
 8008686:	bfb8      	it	lt
 8008688:	2301      	movlt	r3, #1
 800868a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800868c:	2200      	movs	r2, #0
 800868e:	6042      	str	r2, [r0, #4]
 8008690:	2204      	movs	r2, #4
 8008692:	f102 0614 	add.w	r6, r2, #20
 8008696:	429e      	cmp	r6, r3
 8008698:	6841      	ldr	r1, [r0, #4]
 800869a:	d93d      	bls.n	8008718 <_dtoa_r+0x318>
 800869c:	4620      	mov	r0, r4
 800869e:	f001 fa57 	bl	8009b50 <_Balloc>
 80086a2:	9001      	str	r0, [sp, #4]
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d13b      	bne.n	8008720 <_dtoa_r+0x320>
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <_dtoa_r+0x2f0>)
 80086aa:	4602      	mov	r2, r0
 80086ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80086b0:	e6c0      	b.n	8008434 <_dtoa_r+0x34>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7df      	b.n	8008676 <_dtoa_r+0x276>
 80086b6:	bf00      	nop
 80086b8:	636f4361 	.word	0x636f4361
 80086bc:	3fd287a7 	.word	0x3fd287a7
 80086c0:	8b60c8b3 	.word	0x8b60c8b3
 80086c4:	3fc68a28 	.word	0x3fc68a28
 80086c8:	509f79fb 	.word	0x509f79fb
 80086cc:	3fd34413 	.word	0x3fd34413
 80086d0:	0800b216 	.word	0x0800b216
 80086d4:	0800b22d 	.word	0x0800b22d
 80086d8:	7ff00000 	.word	0x7ff00000
 80086dc:	0800b212 	.word	0x0800b212
 80086e0:	0800b209 	.word	0x0800b209
 80086e4:	0800b08d 	.word	0x0800b08d
 80086e8:	3ff80000 	.word	0x3ff80000
 80086ec:	0800b400 	.word	0x0800b400
 80086f0:	0800b288 	.word	0x0800b288
 80086f4:	2501      	movs	r5, #1
 80086f6:	2300      	movs	r3, #0
 80086f8:	9306      	str	r3, [sp, #24]
 80086fa:	9508      	str	r5, [sp, #32]
 80086fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008700:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008704:	2200      	movs	r2, #0
 8008706:	2312      	movs	r3, #18
 8008708:	e7b0      	b.n	800866c <_dtoa_r+0x26c>
 800870a:	2301      	movs	r3, #1
 800870c:	9308      	str	r3, [sp, #32]
 800870e:	e7f5      	b.n	80086fc <_dtoa_r+0x2fc>
 8008710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008712:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008716:	e7b8      	b.n	800868a <_dtoa_r+0x28a>
 8008718:	3101      	adds	r1, #1
 800871a:	6041      	str	r1, [r0, #4]
 800871c:	0052      	lsls	r2, r2, #1
 800871e:	e7b8      	b.n	8008692 <_dtoa_r+0x292>
 8008720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008722:	9a01      	ldr	r2, [sp, #4]
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	9b03      	ldr	r3, [sp, #12]
 8008728:	2b0e      	cmp	r3, #14
 800872a:	f200 809d 	bhi.w	8008868 <_dtoa_r+0x468>
 800872e:	2d00      	cmp	r5, #0
 8008730:	f000 809a 	beq.w	8008868 <_dtoa_r+0x468>
 8008734:	9b00      	ldr	r3, [sp, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	dd32      	ble.n	80087a0 <_dtoa_r+0x3a0>
 800873a:	4ab7      	ldr	r2, [pc, #732]	; (8008a18 <_dtoa_r+0x618>)
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008744:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008748:	9b00      	ldr	r3, [sp, #0]
 800874a:	05d8      	lsls	r0, r3, #23
 800874c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008750:	d516      	bpl.n	8008780 <_dtoa_r+0x380>
 8008752:	4bb2      	ldr	r3, [pc, #712]	; (8008a1c <_dtoa_r+0x61c>)
 8008754:	ec51 0b19 	vmov	r0, r1, d9
 8008758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800875c:	f7f8 f886 	bl	800086c <__aeabi_ddiv>
 8008760:	f007 070f 	and.w	r7, r7, #15
 8008764:	4682      	mov	sl, r0
 8008766:	468b      	mov	fp, r1
 8008768:	2503      	movs	r5, #3
 800876a:	4eac      	ldr	r6, [pc, #688]	; (8008a1c <_dtoa_r+0x61c>)
 800876c:	b957      	cbnz	r7, 8008784 <_dtoa_r+0x384>
 800876e:	4642      	mov	r2, r8
 8008770:	464b      	mov	r3, r9
 8008772:	4650      	mov	r0, sl
 8008774:	4659      	mov	r1, fp
 8008776:	f7f8 f879 	bl	800086c <__aeabi_ddiv>
 800877a:	4682      	mov	sl, r0
 800877c:	468b      	mov	fp, r1
 800877e:	e028      	b.n	80087d2 <_dtoa_r+0x3d2>
 8008780:	2502      	movs	r5, #2
 8008782:	e7f2      	b.n	800876a <_dtoa_r+0x36a>
 8008784:	07f9      	lsls	r1, r7, #31
 8008786:	d508      	bpl.n	800879a <_dtoa_r+0x39a>
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008790:	f7f7 ff42 	bl	8000618 <__aeabi_dmul>
 8008794:	3501      	adds	r5, #1
 8008796:	4680      	mov	r8, r0
 8008798:	4689      	mov	r9, r1
 800879a:	107f      	asrs	r7, r7, #1
 800879c:	3608      	adds	r6, #8
 800879e:	e7e5      	b.n	800876c <_dtoa_r+0x36c>
 80087a0:	f000 809b 	beq.w	80088da <_dtoa_r+0x4da>
 80087a4:	9b00      	ldr	r3, [sp, #0]
 80087a6:	4f9d      	ldr	r7, [pc, #628]	; (8008a1c <_dtoa_r+0x61c>)
 80087a8:	425e      	negs	r6, r3
 80087aa:	4b9b      	ldr	r3, [pc, #620]	; (8008a18 <_dtoa_r+0x618>)
 80087ac:	f006 020f 	and.w	r2, r6, #15
 80087b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	ec51 0b19 	vmov	r0, r1, d9
 80087bc:	f7f7 ff2c 	bl	8000618 <__aeabi_dmul>
 80087c0:	1136      	asrs	r6, r6, #4
 80087c2:	4682      	mov	sl, r0
 80087c4:	468b      	mov	fp, r1
 80087c6:	2300      	movs	r3, #0
 80087c8:	2502      	movs	r5, #2
 80087ca:	2e00      	cmp	r6, #0
 80087cc:	d17a      	bne.n	80088c4 <_dtoa_r+0x4c4>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1d3      	bne.n	800877a <_dtoa_r+0x37a>
 80087d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 8082 	beq.w	80088de <_dtoa_r+0x4de>
 80087da:	4b91      	ldr	r3, [pc, #580]	; (8008a20 <_dtoa_r+0x620>)
 80087dc:	2200      	movs	r2, #0
 80087de:	4650      	mov	r0, sl
 80087e0:	4659      	mov	r1, fp
 80087e2:	f7f8 f98b 	bl	8000afc <__aeabi_dcmplt>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d079      	beq.n	80088de <_dtoa_r+0x4de>
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d076      	beq.n	80088de <_dtoa_r+0x4de>
 80087f0:	9b02      	ldr	r3, [sp, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dd36      	ble.n	8008864 <_dtoa_r+0x464>
 80087f6:	9b00      	ldr	r3, [sp, #0]
 80087f8:	4650      	mov	r0, sl
 80087fa:	4659      	mov	r1, fp
 80087fc:	1e5f      	subs	r7, r3, #1
 80087fe:	2200      	movs	r2, #0
 8008800:	4b88      	ldr	r3, [pc, #544]	; (8008a24 <_dtoa_r+0x624>)
 8008802:	f7f7 ff09 	bl	8000618 <__aeabi_dmul>
 8008806:	9e02      	ldr	r6, [sp, #8]
 8008808:	4682      	mov	sl, r0
 800880a:	468b      	mov	fp, r1
 800880c:	3501      	adds	r5, #1
 800880e:	4628      	mov	r0, r5
 8008810:	f7f7 fe98 	bl	8000544 <__aeabi_i2d>
 8008814:	4652      	mov	r2, sl
 8008816:	465b      	mov	r3, fp
 8008818:	f7f7 fefe 	bl	8000618 <__aeabi_dmul>
 800881c:	4b82      	ldr	r3, [pc, #520]	; (8008a28 <_dtoa_r+0x628>)
 800881e:	2200      	movs	r2, #0
 8008820:	f7f7 fd44 	bl	80002ac <__adddf3>
 8008824:	46d0      	mov	r8, sl
 8008826:	46d9      	mov	r9, fp
 8008828:	4682      	mov	sl, r0
 800882a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800882e:	2e00      	cmp	r6, #0
 8008830:	d158      	bne.n	80088e4 <_dtoa_r+0x4e4>
 8008832:	4b7e      	ldr	r3, [pc, #504]	; (8008a2c <_dtoa_r+0x62c>)
 8008834:	2200      	movs	r2, #0
 8008836:	4640      	mov	r0, r8
 8008838:	4649      	mov	r1, r9
 800883a:	f7f7 fd35 	bl	80002a8 <__aeabi_dsub>
 800883e:	4652      	mov	r2, sl
 8008840:	465b      	mov	r3, fp
 8008842:	4680      	mov	r8, r0
 8008844:	4689      	mov	r9, r1
 8008846:	f7f8 f977 	bl	8000b38 <__aeabi_dcmpgt>
 800884a:	2800      	cmp	r0, #0
 800884c:	f040 8295 	bne.w	8008d7a <_dtoa_r+0x97a>
 8008850:	4652      	mov	r2, sl
 8008852:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008856:	4640      	mov	r0, r8
 8008858:	4649      	mov	r1, r9
 800885a:	f7f8 f94f 	bl	8000afc <__aeabi_dcmplt>
 800885e:	2800      	cmp	r0, #0
 8008860:	f040 8289 	bne.w	8008d76 <_dtoa_r+0x976>
 8008864:	ec5b ab19 	vmov	sl, fp, d9
 8008868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800886a:	2b00      	cmp	r3, #0
 800886c:	f2c0 8148 	blt.w	8008b00 <_dtoa_r+0x700>
 8008870:	9a00      	ldr	r2, [sp, #0]
 8008872:	2a0e      	cmp	r2, #14
 8008874:	f300 8144 	bgt.w	8008b00 <_dtoa_r+0x700>
 8008878:	4b67      	ldr	r3, [pc, #412]	; (8008a18 <_dtoa_r+0x618>)
 800887a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800887e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	f280 80d5 	bge.w	8008a34 <_dtoa_r+0x634>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f300 80d1 	bgt.w	8008a34 <_dtoa_r+0x634>
 8008892:	f040 826f 	bne.w	8008d74 <_dtoa_r+0x974>
 8008896:	4b65      	ldr	r3, [pc, #404]	; (8008a2c <_dtoa_r+0x62c>)
 8008898:	2200      	movs	r2, #0
 800889a:	4640      	mov	r0, r8
 800889c:	4649      	mov	r1, r9
 800889e:	f7f7 febb 	bl	8000618 <__aeabi_dmul>
 80088a2:	4652      	mov	r2, sl
 80088a4:	465b      	mov	r3, fp
 80088a6:	f7f8 f93d 	bl	8000b24 <__aeabi_dcmpge>
 80088aa:	9e03      	ldr	r6, [sp, #12]
 80088ac:	4637      	mov	r7, r6
 80088ae:	2800      	cmp	r0, #0
 80088b0:	f040 8245 	bne.w	8008d3e <_dtoa_r+0x93e>
 80088b4:	9d01      	ldr	r5, [sp, #4]
 80088b6:	2331      	movs	r3, #49	; 0x31
 80088b8:	f805 3b01 	strb.w	r3, [r5], #1
 80088bc:	9b00      	ldr	r3, [sp, #0]
 80088be:	3301      	adds	r3, #1
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	e240      	b.n	8008d46 <_dtoa_r+0x946>
 80088c4:	07f2      	lsls	r2, r6, #31
 80088c6:	d505      	bpl.n	80088d4 <_dtoa_r+0x4d4>
 80088c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088cc:	f7f7 fea4 	bl	8000618 <__aeabi_dmul>
 80088d0:	3501      	adds	r5, #1
 80088d2:	2301      	movs	r3, #1
 80088d4:	1076      	asrs	r6, r6, #1
 80088d6:	3708      	adds	r7, #8
 80088d8:	e777      	b.n	80087ca <_dtoa_r+0x3ca>
 80088da:	2502      	movs	r5, #2
 80088dc:	e779      	b.n	80087d2 <_dtoa_r+0x3d2>
 80088de:	9f00      	ldr	r7, [sp, #0]
 80088e0:	9e03      	ldr	r6, [sp, #12]
 80088e2:	e794      	b.n	800880e <_dtoa_r+0x40e>
 80088e4:	9901      	ldr	r1, [sp, #4]
 80088e6:	4b4c      	ldr	r3, [pc, #304]	; (8008a18 <_dtoa_r+0x618>)
 80088e8:	4431      	add	r1, r6
 80088ea:	910d      	str	r1, [sp, #52]	; 0x34
 80088ec:	9908      	ldr	r1, [sp, #32]
 80088ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80088f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088f6:	2900      	cmp	r1, #0
 80088f8:	d043      	beq.n	8008982 <_dtoa_r+0x582>
 80088fa:	494d      	ldr	r1, [pc, #308]	; (8008a30 <_dtoa_r+0x630>)
 80088fc:	2000      	movs	r0, #0
 80088fe:	f7f7 ffb5 	bl	800086c <__aeabi_ddiv>
 8008902:	4652      	mov	r2, sl
 8008904:	465b      	mov	r3, fp
 8008906:	f7f7 fccf 	bl	80002a8 <__aeabi_dsub>
 800890a:	9d01      	ldr	r5, [sp, #4]
 800890c:	4682      	mov	sl, r0
 800890e:	468b      	mov	fp, r1
 8008910:	4649      	mov	r1, r9
 8008912:	4640      	mov	r0, r8
 8008914:	f7f8 f930 	bl	8000b78 <__aeabi_d2iz>
 8008918:	4606      	mov	r6, r0
 800891a:	f7f7 fe13 	bl	8000544 <__aeabi_i2d>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4640      	mov	r0, r8
 8008924:	4649      	mov	r1, r9
 8008926:	f7f7 fcbf 	bl	80002a8 <__aeabi_dsub>
 800892a:	3630      	adds	r6, #48	; 0x30
 800892c:	f805 6b01 	strb.w	r6, [r5], #1
 8008930:	4652      	mov	r2, sl
 8008932:	465b      	mov	r3, fp
 8008934:	4680      	mov	r8, r0
 8008936:	4689      	mov	r9, r1
 8008938:	f7f8 f8e0 	bl	8000afc <__aeabi_dcmplt>
 800893c:	2800      	cmp	r0, #0
 800893e:	d163      	bne.n	8008a08 <_dtoa_r+0x608>
 8008940:	4642      	mov	r2, r8
 8008942:	464b      	mov	r3, r9
 8008944:	4936      	ldr	r1, [pc, #216]	; (8008a20 <_dtoa_r+0x620>)
 8008946:	2000      	movs	r0, #0
 8008948:	f7f7 fcae 	bl	80002a8 <__aeabi_dsub>
 800894c:	4652      	mov	r2, sl
 800894e:	465b      	mov	r3, fp
 8008950:	f7f8 f8d4 	bl	8000afc <__aeabi_dcmplt>
 8008954:	2800      	cmp	r0, #0
 8008956:	f040 80b5 	bne.w	8008ac4 <_dtoa_r+0x6c4>
 800895a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800895c:	429d      	cmp	r5, r3
 800895e:	d081      	beq.n	8008864 <_dtoa_r+0x464>
 8008960:	4b30      	ldr	r3, [pc, #192]	; (8008a24 <_dtoa_r+0x624>)
 8008962:	2200      	movs	r2, #0
 8008964:	4650      	mov	r0, sl
 8008966:	4659      	mov	r1, fp
 8008968:	f7f7 fe56 	bl	8000618 <__aeabi_dmul>
 800896c:	4b2d      	ldr	r3, [pc, #180]	; (8008a24 <_dtoa_r+0x624>)
 800896e:	4682      	mov	sl, r0
 8008970:	468b      	mov	fp, r1
 8008972:	4640      	mov	r0, r8
 8008974:	4649      	mov	r1, r9
 8008976:	2200      	movs	r2, #0
 8008978:	f7f7 fe4e 	bl	8000618 <__aeabi_dmul>
 800897c:	4680      	mov	r8, r0
 800897e:	4689      	mov	r9, r1
 8008980:	e7c6      	b.n	8008910 <_dtoa_r+0x510>
 8008982:	4650      	mov	r0, sl
 8008984:	4659      	mov	r1, fp
 8008986:	f7f7 fe47 	bl	8000618 <__aeabi_dmul>
 800898a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800898c:	9d01      	ldr	r5, [sp, #4]
 800898e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008990:	4682      	mov	sl, r0
 8008992:	468b      	mov	fp, r1
 8008994:	4649      	mov	r1, r9
 8008996:	4640      	mov	r0, r8
 8008998:	f7f8 f8ee 	bl	8000b78 <__aeabi_d2iz>
 800899c:	4606      	mov	r6, r0
 800899e:	f7f7 fdd1 	bl	8000544 <__aeabi_i2d>
 80089a2:	3630      	adds	r6, #48	; 0x30
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4640      	mov	r0, r8
 80089aa:	4649      	mov	r1, r9
 80089ac:	f7f7 fc7c 	bl	80002a8 <__aeabi_dsub>
 80089b0:	f805 6b01 	strb.w	r6, [r5], #1
 80089b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089b6:	429d      	cmp	r5, r3
 80089b8:	4680      	mov	r8, r0
 80089ba:	4689      	mov	r9, r1
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	d124      	bne.n	8008a0c <_dtoa_r+0x60c>
 80089c2:	4b1b      	ldr	r3, [pc, #108]	; (8008a30 <_dtoa_r+0x630>)
 80089c4:	4650      	mov	r0, sl
 80089c6:	4659      	mov	r1, fp
 80089c8:	f7f7 fc70 	bl	80002ac <__adddf3>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4640      	mov	r0, r8
 80089d2:	4649      	mov	r1, r9
 80089d4:	f7f8 f8b0 	bl	8000b38 <__aeabi_dcmpgt>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d173      	bne.n	8008ac4 <_dtoa_r+0x6c4>
 80089dc:	4652      	mov	r2, sl
 80089de:	465b      	mov	r3, fp
 80089e0:	4913      	ldr	r1, [pc, #76]	; (8008a30 <_dtoa_r+0x630>)
 80089e2:	2000      	movs	r0, #0
 80089e4:	f7f7 fc60 	bl	80002a8 <__aeabi_dsub>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f8 f884 	bl	8000afc <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	f43f af35 	beq.w	8008864 <_dtoa_r+0x464>
 80089fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80089fc:	1e6b      	subs	r3, r5, #1
 80089fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a04:	2b30      	cmp	r3, #48	; 0x30
 8008a06:	d0f8      	beq.n	80089fa <_dtoa_r+0x5fa>
 8008a08:	9700      	str	r7, [sp, #0]
 8008a0a:	e049      	b.n	8008aa0 <_dtoa_r+0x6a0>
 8008a0c:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <_dtoa_r+0x624>)
 8008a0e:	f7f7 fe03 	bl	8000618 <__aeabi_dmul>
 8008a12:	4680      	mov	r8, r0
 8008a14:	4689      	mov	r9, r1
 8008a16:	e7bd      	b.n	8008994 <_dtoa_r+0x594>
 8008a18:	0800b400 	.word	0x0800b400
 8008a1c:	0800b3d8 	.word	0x0800b3d8
 8008a20:	3ff00000 	.word	0x3ff00000
 8008a24:	40240000 	.word	0x40240000
 8008a28:	401c0000 	.word	0x401c0000
 8008a2c:	40140000 	.word	0x40140000
 8008a30:	3fe00000 	.word	0x3fe00000
 8008a34:	9d01      	ldr	r5, [sp, #4]
 8008a36:	4656      	mov	r6, sl
 8008a38:	465f      	mov	r7, fp
 8008a3a:	4642      	mov	r2, r8
 8008a3c:	464b      	mov	r3, r9
 8008a3e:	4630      	mov	r0, r6
 8008a40:	4639      	mov	r1, r7
 8008a42:	f7f7 ff13 	bl	800086c <__aeabi_ddiv>
 8008a46:	f7f8 f897 	bl	8000b78 <__aeabi_d2iz>
 8008a4a:	4682      	mov	sl, r0
 8008a4c:	f7f7 fd7a 	bl	8000544 <__aeabi_i2d>
 8008a50:	4642      	mov	r2, r8
 8008a52:	464b      	mov	r3, r9
 8008a54:	f7f7 fde0 	bl	8000618 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	4639      	mov	r1, r7
 8008a60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008a64:	f7f7 fc20 	bl	80002a8 <__aeabi_dsub>
 8008a68:	f805 6b01 	strb.w	r6, [r5], #1
 8008a6c:	9e01      	ldr	r6, [sp, #4]
 8008a6e:	9f03      	ldr	r7, [sp, #12]
 8008a70:	1bae      	subs	r6, r5, r6
 8008a72:	42b7      	cmp	r7, r6
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	d135      	bne.n	8008ae6 <_dtoa_r+0x6e6>
 8008a7a:	f7f7 fc17 	bl	80002ac <__adddf3>
 8008a7e:	4642      	mov	r2, r8
 8008a80:	464b      	mov	r3, r9
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	f7f8 f857 	bl	8000b38 <__aeabi_dcmpgt>
 8008a8a:	b9d0      	cbnz	r0, 8008ac2 <_dtoa_r+0x6c2>
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	464b      	mov	r3, r9
 8008a90:	4630      	mov	r0, r6
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7f8 f828 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a98:	b110      	cbz	r0, 8008aa0 <_dtoa_r+0x6a0>
 8008a9a:	f01a 0f01 	tst.w	sl, #1
 8008a9e:	d110      	bne.n	8008ac2 <_dtoa_r+0x6c2>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	ee18 1a10 	vmov	r1, s16
 8008aa6:	f001 f893 	bl	8009bd0 <_Bfree>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9800      	ldr	r0, [sp, #0]
 8008aae:	702b      	strb	r3, [r5, #0]
 8008ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	6018      	str	r0, [r3, #0]
 8008ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f43f acf1 	beq.w	80084a0 <_dtoa_r+0xa0>
 8008abe:	601d      	str	r5, [r3, #0]
 8008ac0:	e4ee      	b.n	80084a0 <_dtoa_r+0xa0>
 8008ac2:	9f00      	ldr	r7, [sp, #0]
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	461d      	mov	r5, r3
 8008ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008acc:	2a39      	cmp	r2, #57	; 0x39
 8008ace:	d106      	bne.n	8008ade <_dtoa_r+0x6de>
 8008ad0:	9a01      	ldr	r2, [sp, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d1f7      	bne.n	8008ac6 <_dtoa_r+0x6c6>
 8008ad6:	9901      	ldr	r1, [sp, #4]
 8008ad8:	2230      	movs	r2, #48	; 0x30
 8008ada:	3701      	adds	r7, #1
 8008adc:	700a      	strb	r2, [r1, #0]
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	e790      	b.n	8008a08 <_dtoa_r+0x608>
 8008ae6:	4ba6      	ldr	r3, [pc, #664]	; (8008d80 <_dtoa_r+0x980>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f7f7 fd95 	bl	8000618 <__aeabi_dmul>
 8008aee:	2200      	movs	r2, #0
 8008af0:	2300      	movs	r3, #0
 8008af2:	4606      	mov	r6, r0
 8008af4:	460f      	mov	r7, r1
 8008af6:	f7f7 fff7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d09d      	beq.n	8008a3a <_dtoa_r+0x63a>
 8008afe:	e7cf      	b.n	8008aa0 <_dtoa_r+0x6a0>
 8008b00:	9a08      	ldr	r2, [sp, #32]
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	f000 80d7 	beq.w	8008cb6 <_dtoa_r+0x8b6>
 8008b08:	9a06      	ldr	r2, [sp, #24]
 8008b0a:	2a01      	cmp	r2, #1
 8008b0c:	f300 80ba 	bgt.w	8008c84 <_dtoa_r+0x884>
 8008b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	f000 80b2 	beq.w	8008c7c <_dtoa_r+0x87c>
 8008b18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b1c:	9e07      	ldr	r6, [sp, #28]
 8008b1e:	9d04      	ldr	r5, [sp, #16]
 8008b20:	9a04      	ldr	r2, [sp, #16]
 8008b22:	441a      	add	r2, r3
 8008b24:	9204      	str	r2, [sp, #16]
 8008b26:	9a05      	ldr	r2, [sp, #20]
 8008b28:	2101      	movs	r1, #1
 8008b2a:	441a      	add	r2, r3
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	9205      	str	r2, [sp, #20]
 8008b30:	f001 f950 	bl	8009dd4 <__i2b>
 8008b34:	4607      	mov	r7, r0
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	dd0c      	ble.n	8008b54 <_dtoa_r+0x754>
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dd09      	ble.n	8008b54 <_dtoa_r+0x754>
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	9a04      	ldr	r2, [sp, #16]
 8008b44:	bfa8      	it	ge
 8008b46:	462b      	movge	r3, r5
 8008b48:	1ad2      	subs	r2, r2, r3
 8008b4a:	9204      	str	r2, [sp, #16]
 8008b4c:	9a05      	ldr	r2, [sp, #20]
 8008b4e:	1aed      	subs	r5, r5, r3
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	9305      	str	r3, [sp, #20]
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	b31b      	cbz	r3, 8008ba0 <_dtoa_r+0x7a0>
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 80af 	beq.w	8008cbe <_dtoa_r+0x8be>
 8008b60:	2e00      	cmp	r6, #0
 8008b62:	dd13      	ble.n	8008b8c <_dtoa_r+0x78c>
 8008b64:	4639      	mov	r1, r7
 8008b66:	4632      	mov	r2, r6
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f001 f9f3 	bl	8009f54 <__pow5mult>
 8008b6e:	ee18 2a10 	vmov	r2, s16
 8008b72:	4601      	mov	r1, r0
 8008b74:	4607      	mov	r7, r0
 8008b76:	4620      	mov	r0, r4
 8008b78:	f001 f942 	bl	8009e00 <__multiply>
 8008b7c:	ee18 1a10 	vmov	r1, s16
 8008b80:	4680      	mov	r8, r0
 8008b82:	4620      	mov	r0, r4
 8008b84:	f001 f824 	bl	8009bd0 <_Bfree>
 8008b88:	ee08 8a10 	vmov	s16, r8
 8008b8c:	9b07      	ldr	r3, [sp, #28]
 8008b8e:	1b9a      	subs	r2, r3, r6
 8008b90:	d006      	beq.n	8008ba0 <_dtoa_r+0x7a0>
 8008b92:	ee18 1a10 	vmov	r1, s16
 8008b96:	4620      	mov	r0, r4
 8008b98:	f001 f9dc 	bl	8009f54 <__pow5mult>
 8008b9c:	ee08 0a10 	vmov	s16, r0
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f001 f916 	bl	8009dd4 <__i2b>
 8008ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	4606      	mov	r6, r0
 8008bae:	f340 8088 	ble.w	8008cc2 <_dtoa_r+0x8c2>
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4601      	mov	r1, r0
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f001 f9cc 	bl	8009f54 <__pow5mult>
 8008bbc:	9b06      	ldr	r3, [sp, #24]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	f340 8081 	ble.w	8008cc8 <_dtoa_r+0x8c8>
 8008bc6:	f04f 0800 	mov.w	r8, #0
 8008bca:	6933      	ldr	r3, [r6, #16]
 8008bcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008bd0:	6918      	ldr	r0, [r3, #16]
 8008bd2:	f001 f8af 	bl	8009d34 <__hi0bits>
 8008bd6:	f1c0 0020 	rsb	r0, r0, #32
 8008bda:	9b05      	ldr	r3, [sp, #20]
 8008bdc:	4418      	add	r0, r3
 8008bde:	f010 001f 	ands.w	r0, r0, #31
 8008be2:	f000 8092 	beq.w	8008d0a <_dtoa_r+0x90a>
 8008be6:	f1c0 0320 	rsb	r3, r0, #32
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	f340 808a 	ble.w	8008d04 <_dtoa_r+0x904>
 8008bf0:	f1c0 001c 	rsb	r0, r0, #28
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	4403      	add	r3, r0
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	9b05      	ldr	r3, [sp, #20]
 8008bfc:	4403      	add	r3, r0
 8008bfe:	4405      	add	r5, r0
 8008c00:	9305      	str	r3, [sp, #20]
 8008c02:	9b04      	ldr	r3, [sp, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dd07      	ble.n	8008c18 <_dtoa_r+0x818>
 8008c08:	ee18 1a10 	vmov	r1, s16
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f001 f9fa 	bl	800a008 <__lshift>
 8008c14:	ee08 0a10 	vmov	s16, r0
 8008c18:	9b05      	ldr	r3, [sp, #20]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dd05      	ble.n	8008c2a <_dtoa_r+0x82a>
 8008c1e:	4631      	mov	r1, r6
 8008c20:	461a      	mov	r2, r3
 8008c22:	4620      	mov	r0, r4
 8008c24:	f001 f9f0 	bl	800a008 <__lshift>
 8008c28:	4606      	mov	r6, r0
 8008c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d06e      	beq.n	8008d0e <_dtoa_r+0x90e>
 8008c30:	ee18 0a10 	vmov	r0, s16
 8008c34:	4631      	mov	r1, r6
 8008c36:	f001 fa57 	bl	800a0e8 <__mcmp>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	da67      	bge.n	8008d0e <_dtoa_r+0x90e>
 8008c3e:	9b00      	ldr	r3, [sp, #0]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	ee18 1a10 	vmov	r1, s16
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	220a      	movs	r2, #10
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 ffe1 	bl	8009c14 <__multadd>
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	ee08 0a10 	vmov	s16, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 81b1 	beq.w	8008fc0 <_dtoa_r+0xbc0>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4639      	mov	r1, r7
 8008c62:	220a      	movs	r2, #10
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 ffd5 	bl	8009c14 <__multadd>
 8008c6a:	9b02      	ldr	r3, [sp, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	4607      	mov	r7, r0
 8008c70:	f300 808e 	bgt.w	8008d90 <_dtoa_r+0x990>
 8008c74:	9b06      	ldr	r3, [sp, #24]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	dc51      	bgt.n	8008d1e <_dtoa_r+0x91e>
 8008c7a:	e089      	b.n	8008d90 <_dtoa_r+0x990>
 8008c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c82:	e74b      	b.n	8008b1c <_dtoa_r+0x71c>
 8008c84:	9b03      	ldr	r3, [sp, #12]
 8008c86:	1e5e      	subs	r6, r3, #1
 8008c88:	9b07      	ldr	r3, [sp, #28]
 8008c8a:	42b3      	cmp	r3, r6
 8008c8c:	bfbf      	itttt	lt
 8008c8e:	9b07      	ldrlt	r3, [sp, #28]
 8008c90:	9607      	strlt	r6, [sp, #28]
 8008c92:	1af2      	sublt	r2, r6, r3
 8008c94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c96:	bfb6      	itet	lt
 8008c98:	189b      	addlt	r3, r3, r2
 8008c9a:	1b9e      	subge	r6, r3, r6
 8008c9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	bfb8      	it	lt
 8008ca2:	2600      	movlt	r6, #0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfb7      	itett	lt
 8008ca8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008cac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008cb0:	1a9d      	sublt	r5, r3, r2
 8008cb2:	2300      	movlt	r3, #0
 8008cb4:	e734      	b.n	8008b20 <_dtoa_r+0x720>
 8008cb6:	9e07      	ldr	r6, [sp, #28]
 8008cb8:	9d04      	ldr	r5, [sp, #16]
 8008cba:	9f08      	ldr	r7, [sp, #32]
 8008cbc:	e73b      	b.n	8008b36 <_dtoa_r+0x736>
 8008cbe:	9a07      	ldr	r2, [sp, #28]
 8008cc0:	e767      	b.n	8008b92 <_dtoa_r+0x792>
 8008cc2:	9b06      	ldr	r3, [sp, #24]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	dc18      	bgt.n	8008cfa <_dtoa_r+0x8fa>
 8008cc8:	f1ba 0f00 	cmp.w	sl, #0
 8008ccc:	d115      	bne.n	8008cfa <_dtoa_r+0x8fa>
 8008cce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cd2:	b993      	cbnz	r3, 8008cfa <_dtoa_r+0x8fa>
 8008cd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cd8:	0d1b      	lsrs	r3, r3, #20
 8008cda:	051b      	lsls	r3, r3, #20
 8008cdc:	b183      	cbz	r3, 8008d00 <_dtoa_r+0x900>
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	9b05      	ldr	r3, [sp, #20]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	9305      	str	r3, [sp, #20]
 8008cea:	f04f 0801 	mov.w	r8, #1
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f47f af6a 	bne.w	8008bca <_dtoa_r+0x7ca>
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	e76f      	b.n	8008bda <_dtoa_r+0x7da>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	e7f6      	b.n	8008cee <_dtoa_r+0x8ee>
 8008d00:	4698      	mov	r8, r3
 8008d02:	e7f4      	b.n	8008cee <_dtoa_r+0x8ee>
 8008d04:	f43f af7d 	beq.w	8008c02 <_dtoa_r+0x802>
 8008d08:	4618      	mov	r0, r3
 8008d0a:	301c      	adds	r0, #28
 8008d0c:	e772      	b.n	8008bf4 <_dtoa_r+0x7f4>
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dc37      	bgt.n	8008d84 <_dtoa_r+0x984>
 8008d14:	9b06      	ldr	r3, [sp, #24]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	dd34      	ble.n	8008d84 <_dtoa_r+0x984>
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	9b02      	ldr	r3, [sp, #8]
 8008d20:	b96b      	cbnz	r3, 8008d3e <_dtoa_r+0x93e>
 8008d22:	4631      	mov	r1, r6
 8008d24:	2205      	movs	r2, #5
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 ff74 	bl	8009c14 <__multadd>
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	4606      	mov	r6, r0
 8008d30:	ee18 0a10 	vmov	r0, s16
 8008d34:	f001 f9d8 	bl	800a0e8 <__mcmp>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f73f adbb 	bgt.w	80088b4 <_dtoa_r+0x4b4>
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	9d01      	ldr	r5, [sp, #4]
 8008d42:	43db      	mvns	r3, r3
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	f04f 0800 	mov.w	r8, #0
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 ff3f 	bl	8009bd0 <_Bfree>
 8008d52:	2f00      	cmp	r7, #0
 8008d54:	f43f aea4 	beq.w	8008aa0 <_dtoa_r+0x6a0>
 8008d58:	f1b8 0f00 	cmp.w	r8, #0
 8008d5c:	d005      	beq.n	8008d6a <_dtoa_r+0x96a>
 8008d5e:	45b8      	cmp	r8, r7
 8008d60:	d003      	beq.n	8008d6a <_dtoa_r+0x96a>
 8008d62:	4641      	mov	r1, r8
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 ff33 	bl	8009bd0 <_Bfree>
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 ff2f 	bl	8009bd0 <_Bfree>
 8008d72:	e695      	b.n	8008aa0 <_dtoa_r+0x6a0>
 8008d74:	2600      	movs	r6, #0
 8008d76:	4637      	mov	r7, r6
 8008d78:	e7e1      	b.n	8008d3e <_dtoa_r+0x93e>
 8008d7a:	9700      	str	r7, [sp, #0]
 8008d7c:	4637      	mov	r7, r6
 8008d7e:	e599      	b.n	80088b4 <_dtoa_r+0x4b4>
 8008d80:	40240000 	.word	0x40240000
 8008d84:	9b08      	ldr	r3, [sp, #32]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 80ca 	beq.w	8008f20 <_dtoa_r+0xb20>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	9302      	str	r3, [sp, #8]
 8008d90:	2d00      	cmp	r5, #0
 8008d92:	dd05      	ble.n	8008da0 <_dtoa_r+0x9a0>
 8008d94:	4639      	mov	r1, r7
 8008d96:	462a      	mov	r2, r5
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f001 f935 	bl	800a008 <__lshift>
 8008d9e:	4607      	mov	r7, r0
 8008da0:	f1b8 0f00 	cmp.w	r8, #0
 8008da4:	d05b      	beq.n	8008e5e <_dtoa_r+0xa5e>
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fed1 	bl	8009b50 <_Balloc>
 8008dae:	4605      	mov	r5, r0
 8008db0:	b928      	cbnz	r0, 8008dbe <_dtoa_r+0x9be>
 8008db2:	4b87      	ldr	r3, [pc, #540]	; (8008fd0 <_dtoa_r+0xbd0>)
 8008db4:	4602      	mov	r2, r0
 8008db6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008dba:	f7ff bb3b 	b.w	8008434 <_dtoa_r+0x34>
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	3202      	adds	r2, #2
 8008dc2:	0092      	lsls	r2, r2, #2
 8008dc4:	f107 010c 	add.w	r1, r7, #12
 8008dc8:	300c      	adds	r0, #12
 8008dca:	f000 feb3 	bl	8009b34 <memcpy>
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f001 f918 	bl	800a008 <__lshift>
 8008dd8:	9b01      	ldr	r3, [sp, #4]
 8008dda:	f103 0901 	add.w	r9, r3, #1
 8008dde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	9305      	str	r3, [sp, #20]
 8008de6:	f00a 0301 	and.w	r3, sl, #1
 8008dea:	46b8      	mov	r8, r7
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	4607      	mov	r7, r0
 8008df0:	4631      	mov	r1, r6
 8008df2:	ee18 0a10 	vmov	r0, s16
 8008df6:	f7ff fa77 	bl	80082e8 <quorem>
 8008dfa:	4641      	mov	r1, r8
 8008dfc:	9002      	str	r0, [sp, #8]
 8008dfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e02:	ee18 0a10 	vmov	r0, s16
 8008e06:	f001 f96f 	bl	800a0e8 <__mcmp>
 8008e0a:	463a      	mov	r2, r7
 8008e0c:	9003      	str	r0, [sp, #12]
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4620      	mov	r0, r4
 8008e12:	f001 f985 	bl	800a120 <__mdiff>
 8008e16:	68c2      	ldr	r2, [r0, #12]
 8008e18:	f109 3bff 	add.w	fp, r9, #4294967295
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	bb02      	cbnz	r2, 8008e62 <_dtoa_r+0xa62>
 8008e20:	4601      	mov	r1, r0
 8008e22:	ee18 0a10 	vmov	r0, s16
 8008e26:	f001 f95f 	bl	800a0e8 <__mcmp>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	4620      	mov	r0, r4
 8008e30:	9207      	str	r2, [sp, #28]
 8008e32:	f000 fecd 	bl	8009bd0 <_Bfree>
 8008e36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008e3a:	ea43 0102 	orr.w	r1, r3, r2
 8008e3e:	9b04      	ldr	r3, [sp, #16]
 8008e40:	430b      	orrs	r3, r1
 8008e42:	464d      	mov	r5, r9
 8008e44:	d10f      	bne.n	8008e66 <_dtoa_r+0xa66>
 8008e46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e4a:	d02a      	beq.n	8008ea2 <_dtoa_r+0xaa2>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dd02      	ble.n	8008e58 <_dtoa_r+0xa58>
 8008e52:	9b02      	ldr	r3, [sp, #8]
 8008e54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008e58:	f88b a000 	strb.w	sl, [fp]
 8008e5c:	e775      	b.n	8008d4a <_dtoa_r+0x94a>
 8008e5e:	4638      	mov	r0, r7
 8008e60:	e7ba      	b.n	8008dd8 <_dtoa_r+0x9d8>
 8008e62:	2201      	movs	r2, #1
 8008e64:	e7e2      	b.n	8008e2c <_dtoa_r+0xa2c>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	db04      	blt.n	8008e76 <_dtoa_r+0xa76>
 8008e6c:	9906      	ldr	r1, [sp, #24]
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	9904      	ldr	r1, [sp, #16]
 8008e72:	430b      	orrs	r3, r1
 8008e74:	d122      	bne.n	8008ebc <_dtoa_r+0xabc>
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	ddee      	ble.n	8008e58 <_dtoa_r+0xa58>
 8008e7a:	ee18 1a10 	vmov	r1, s16
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4620      	mov	r0, r4
 8008e82:	f001 f8c1 	bl	800a008 <__lshift>
 8008e86:	4631      	mov	r1, r6
 8008e88:	ee08 0a10 	vmov	s16, r0
 8008e8c:	f001 f92c 	bl	800a0e8 <__mcmp>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	dc03      	bgt.n	8008e9c <_dtoa_r+0xa9c>
 8008e94:	d1e0      	bne.n	8008e58 <_dtoa_r+0xa58>
 8008e96:	f01a 0f01 	tst.w	sl, #1
 8008e9a:	d0dd      	beq.n	8008e58 <_dtoa_r+0xa58>
 8008e9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ea0:	d1d7      	bne.n	8008e52 <_dtoa_r+0xa52>
 8008ea2:	2339      	movs	r3, #57	; 0x39
 8008ea4:	f88b 3000 	strb.w	r3, [fp]
 8008ea8:	462b      	mov	r3, r5
 8008eaa:	461d      	mov	r5, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008eb2:	2a39      	cmp	r2, #57	; 0x39
 8008eb4:	d071      	beq.n	8008f9a <_dtoa_r+0xb9a>
 8008eb6:	3201      	adds	r2, #1
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	e746      	b.n	8008d4a <_dtoa_r+0x94a>
 8008ebc:	2a00      	cmp	r2, #0
 8008ebe:	dd07      	ble.n	8008ed0 <_dtoa_r+0xad0>
 8008ec0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ec4:	d0ed      	beq.n	8008ea2 <_dtoa_r+0xaa2>
 8008ec6:	f10a 0301 	add.w	r3, sl, #1
 8008eca:	f88b 3000 	strb.w	r3, [fp]
 8008ece:	e73c      	b.n	8008d4a <_dtoa_r+0x94a>
 8008ed0:	9b05      	ldr	r3, [sp, #20]
 8008ed2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008ed6:	4599      	cmp	r9, r3
 8008ed8:	d047      	beq.n	8008f6a <_dtoa_r+0xb6a>
 8008eda:	ee18 1a10 	vmov	r1, s16
 8008ede:	2300      	movs	r3, #0
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 fe96 	bl	8009c14 <__multadd>
 8008ee8:	45b8      	cmp	r8, r7
 8008eea:	ee08 0a10 	vmov	s16, r0
 8008eee:	f04f 0300 	mov.w	r3, #0
 8008ef2:	f04f 020a 	mov.w	r2, #10
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	4620      	mov	r0, r4
 8008efa:	d106      	bne.n	8008f0a <_dtoa_r+0xb0a>
 8008efc:	f000 fe8a 	bl	8009c14 <__multadd>
 8008f00:	4680      	mov	r8, r0
 8008f02:	4607      	mov	r7, r0
 8008f04:	f109 0901 	add.w	r9, r9, #1
 8008f08:	e772      	b.n	8008df0 <_dtoa_r+0x9f0>
 8008f0a:	f000 fe83 	bl	8009c14 <__multadd>
 8008f0e:	4639      	mov	r1, r7
 8008f10:	4680      	mov	r8, r0
 8008f12:	2300      	movs	r3, #0
 8008f14:	220a      	movs	r2, #10
 8008f16:	4620      	mov	r0, r4
 8008f18:	f000 fe7c 	bl	8009c14 <__multadd>
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	e7f1      	b.n	8008f04 <_dtoa_r+0xb04>
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	9302      	str	r3, [sp, #8]
 8008f24:	9d01      	ldr	r5, [sp, #4]
 8008f26:	ee18 0a10 	vmov	r0, s16
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	f7ff f9dc 	bl	80082e8 <quorem>
 8008f30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f34:	9b01      	ldr	r3, [sp, #4]
 8008f36:	f805 ab01 	strb.w	sl, [r5], #1
 8008f3a:	1aea      	subs	r2, r5, r3
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	dd09      	ble.n	8008f56 <_dtoa_r+0xb56>
 8008f42:	ee18 1a10 	vmov	r1, s16
 8008f46:	2300      	movs	r3, #0
 8008f48:	220a      	movs	r2, #10
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 fe62 	bl	8009c14 <__multadd>
 8008f50:	ee08 0a10 	vmov	s16, r0
 8008f54:	e7e7      	b.n	8008f26 <_dtoa_r+0xb26>
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bfc8      	it	gt
 8008f5c:	461d      	movgt	r5, r3
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	bfd8      	it	le
 8008f62:	2501      	movle	r5, #1
 8008f64:	441d      	add	r5, r3
 8008f66:	f04f 0800 	mov.w	r8, #0
 8008f6a:	ee18 1a10 	vmov	r1, s16
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4620      	mov	r0, r4
 8008f72:	f001 f849 	bl	800a008 <__lshift>
 8008f76:	4631      	mov	r1, r6
 8008f78:	ee08 0a10 	vmov	s16, r0
 8008f7c:	f001 f8b4 	bl	800a0e8 <__mcmp>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	dc91      	bgt.n	8008ea8 <_dtoa_r+0xaa8>
 8008f84:	d102      	bne.n	8008f8c <_dtoa_r+0xb8c>
 8008f86:	f01a 0f01 	tst.w	sl, #1
 8008f8a:	d18d      	bne.n	8008ea8 <_dtoa_r+0xaa8>
 8008f8c:	462b      	mov	r3, r5
 8008f8e:	461d      	mov	r5, r3
 8008f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f94:	2a30      	cmp	r2, #48	; 0x30
 8008f96:	d0fa      	beq.n	8008f8e <_dtoa_r+0xb8e>
 8008f98:	e6d7      	b.n	8008d4a <_dtoa_r+0x94a>
 8008f9a:	9a01      	ldr	r2, [sp, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d184      	bne.n	8008eaa <_dtoa_r+0xaaa>
 8008fa0:	9b00      	ldr	r3, [sp, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	2331      	movs	r3, #49	; 0x31
 8008fa8:	7013      	strb	r3, [r2, #0]
 8008faa:	e6ce      	b.n	8008d4a <_dtoa_r+0x94a>
 8008fac:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <_dtoa_r+0xbd4>)
 8008fae:	f7ff ba95 	b.w	80084dc <_dtoa_r+0xdc>
 8008fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f47f aa6e 	bne.w	8008496 <_dtoa_r+0x96>
 8008fba:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <_dtoa_r+0xbd8>)
 8008fbc:	f7ff ba8e 	b.w	80084dc <_dtoa_r+0xdc>
 8008fc0:	9b02      	ldr	r3, [sp, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	dcae      	bgt.n	8008f24 <_dtoa_r+0xb24>
 8008fc6:	9b06      	ldr	r3, [sp, #24]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	f73f aea8 	bgt.w	8008d1e <_dtoa_r+0x91e>
 8008fce:	e7a9      	b.n	8008f24 <_dtoa_r+0xb24>
 8008fd0:	0800b288 	.word	0x0800b288
 8008fd4:	0800b08c 	.word	0x0800b08c
 8008fd8:	0800b209 	.word	0x0800b209

08008fdc <__sflush_r>:
 8008fdc:	898a      	ldrh	r2, [r1, #12]
 8008fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	0710      	lsls	r0, r2, #28
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	d458      	bmi.n	800909c <__sflush_r+0xc0>
 8008fea:	684b      	ldr	r3, [r1, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dc05      	bgt.n	8008ffc <__sflush_r+0x20>
 8008ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dc02      	bgt.n	8008ffc <__sflush_r+0x20>
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ffe:	2e00      	cmp	r6, #0
 8009000:	d0f9      	beq.n	8008ff6 <__sflush_r+0x1a>
 8009002:	2300      	movs	r3, #0
 8009004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009008:	682f      	ldr	r7, [r5, #0]
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	d032      	beq.n	8009074 <__sflush_r+0x98>
 800900e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	075a      	lsls	r2, r3, #29
 8009014:	d505      	bpl.n	8009022 <__sflush_r+0x46>
 8009016:	6863      	ldr	r3, [r4, #4]
 8009018:	1ac0      	subs	r0, r0, r3
 800901a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800901c:	b10b      	cbz	r3, 8009022 <__sflush_r+0x46>
 800901e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009020:	1ac0      	subs	r0, r0, r3
 8009022:	2300      	movs	r3, #0
 8009024:	4602      	mov	r2, r0
 8009026:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009028:	6a21      	ldr	r1, [r4, #32]
 800902a:	4628      	mov	r0, r5
 800902c:	47b0      	blx	r6
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	d106      	bne.n	8009042 <__sflush_r+0x66>
 8009034:	6829      	ldr	r1, [r5, #0]
 8009036:	291d      	cmp	r1, #29
 8009038:	d82c      	bhi.n	8009094 <__sflush_r+0xb8>
 800903a:	4a2a      	ldr	r2, [pc, #168]	; (80090e4 <__sflush_r+0x108>)
 800903c:	40ca      	lsrs	r2, r1
 800903e:	07d6      	lsls	r6, r2, #31
 8009040:	d528      	bpl.n	8009094 <__sflush_r+0xb8>
 8009042:	2200      	movs	r2, #0
 8009044:	6062      	str	r2, [r4, #4]
 8009046:	04d9      	lsls	r1, r3, #19
 8009048:	6922      	ldr	r2, [r4, #16]
 800904a:	6022      	str	r2, [r4, #0]
 800904c:	d504      	bpl.n	8009058 <__sflush_r+0x7c>
 800904e:	1c42      	adds	r2, r0, #1
 8009050:	d101      	bne.n	8009056 <__sflush_r+0x7a>
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	b903      	cbnz	r3, 8009058 <__sflush_r+0x7c>
 8009056:	6560      	str	r0, [r4, #84]	; 0x54
 8009058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800905a:	602f      	str	r7, [r5, #0]
 800905c:	2900      	cmp	r1, #0
 800905e:	d0ca      	beq.n	8008ff6 <__sflush_r+0x1a>
 8009060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009064:	4299      	cmp	r1, r3
 8009066:	d002      	beq.n	800906e <__sflush_r+0x92>
 8009068:	4628      	mov	r0, r5
 800906a:	f001 fa49 	bl	800a500 <_free_r>
 800906e:	2000      	movs	r0, #0
 8009070:	6360      	str	r0, [r4, #52]	; 0x34
 8009072:	e7c1      	b.n	8008ff8 <__sflush_r+0x1c>
 8009074:	6a21      	ldr	r1, [r4, #32]
 8009076:	2301      	movs	r3, #1
 8009078:	4628      	mov	r0, r5
 800907a:	47b0      	blx	r6
 800907c:	1c41      	adds	r1, r0, #1
 800907e:	d1c7      	bne.n	8009010 <__sflush_r+0x34>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0c4      	beq.n	8009010 <__sflush_r+0x34>
 8009086:	2b1d      	cmp	r3, #29
 8009088:	d001      	beq.n	800908e <__sflush_r+0xb2>
 800908a:	2b16      	cmp	r3, #22
 800908c:	d101      	bne.n	8009092 <__sflush_r+0xb6>
 800908e:	602f      	str	r7, [r5, #0]
 8009090:	e7b1      	b.n	8008ff6 <__sflush_r+0x1a>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009098:	81a3      	strh	r3, [r4, #12]
 800909a:	e7ad      	b.n	8008ff8 <__sflush_r+0x1c>
 800909c:	690f      	ldr	r7, [r1, #16]
 800909e:	2f00      	cmp	r7, #0
 80090a0:	d0a9      	beq.n	8008ff6 <__sflush_r+0x1a>
 80090a2:	0793      	lsls	r3, r2, #30
 80090a4:	680e      	ldr	r6, [r1, #0]
 80090a6:	bf08      	it	eq
 80090a8:	694b      	ldreq	r3, [r1, #20]
 80090aa:	600f      	str	r7, [r1, #0]
 80090ac:	bf18      	it	ne
 80090ae:	2300      	movne	r3, #0
 80090b0:	eba6 0807 	sub.w	r8, r6, r7
 80090b4:	608b      	str	r3, [r1, #8]
 80090b6:	f1b8 0f00 	cmp.w	r8, #0
 80090ba:	dd9c      	ble.n	8008ff6 <__sflush_r+0x1a>
 80090bc:	6a21      	ldr	r1, [r4, #32]
 80090be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090c0:	4643      	mov	r3, r8
 80090c2:	463a      	mov	r2, r7
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b0      	blx	r6
 80090c8:	2800      	cmp	r0, #0
 80090ca:	dc06      	bgt.n	80090da <__sflush_r+0xfe>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	e78e      	b.n	8008ff8 <__sflush_r+0x1c>
 80090da:	4407      	add	r7, r0
 80090dc:	eba8 0800 	sub.w	r8, r8, r0
 80090e0:	e7e9      	b.n	80090b6 <__sflush_r+0xda>
 80090e2:	bf00      	nop
 80090e4:	20400001 	.word	0x20400001

080090e8 <_fflush_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	690b      	ldr	r3, [r1, #16]
 80090ec:	4605      	mov	r5, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	b913      	cbnz	r3, 80090f8 <_fflush_r+0x10>
 80090f2:	2500      	movs	r5, #0
 80090f4:	4628      	mov	r0, r5
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	b118      	cbz	r0, 8009102 <_fflush_r+0x1a>
 80090fa:	6983      	ldr	r3, [r0, #24]
 80090fc:	b90b      	cbnz	r3, 8009102 <_fflush_r+0x1a>
 80090fe:	f000 f887 	bl	8009210 <__sinit>
 8009102:	4b14      	ldr	r3, [pc, #80]	; (8009154 <_fflush_r+0x6c>)
 8009104:	429c      	cmp	r4, r3
 8009106:	d11b      	bne.n	8009140 <_fflush_r+0x58>
 8009108:	686c      	ldr	r4, [r5, #4]
 800910a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0ef      	beq.n	80090f2 <_fflush_r+0xa>
 8009112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009114:	07d0      	lsls	r0, r2, #31
 8009116:	d404      	bmi.n	8009122 <_fflush_r+0x3a>
 8009118:	0599      	lsls	r1, r3, #22
 800911a:	d402      	bmi.n	8009122 <_fflush_r+0x3a>
 800911c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911e:	f000 fc88 	bl	8009a32 <__retarget_lock_acquire_recursive>
 8009122:	4628      	mov	r0, r5
 8009124:	4621      	mov	r1, r4
 8009126:	f7ff ff59 	bl	8008fdc <__sflush_r>
 800912a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800912c:	07da      	lsls	r2, r3, #31
 800912e:	4605      	mov	r5, r0
 8009130:	d4e0      	bmi.n	80090f4 <_fflush_r+0xc>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	059b      	lsls	r3, r3, #22
 8009136:	d4dd      	bmi.n	80090f4 <_fflush_r+0xc>
 8009138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800913a:	f000 fc7b 	bl	8009a34 <__retarget_lock_release_recursive>
 800913e:	e7d9      	b.n	80090f4 <_fflush_r+0xc>
 8009140:	4b05      	ldr	r3, [pc, #20]	; (8009158 <_fflush_r+0x70>)
 8009142:	429c      	cmp	r4, r3
 8009144:	d101      	bne.n	800914a <_fflush_r+0x62>
 8009146:	68ac      	ldr	r4, [r5, #8]
 8009148:	e7df      	b.n	800910a <_fflush_r+0x22>
 800914a:	4b04      	ldr	r3, [pc, #16]	; (800915c <_fflush_r+0x74>)
 800914c:	429c      	cmp	r4, r3
 800914e:	bf08      	it	eq
 8009150:	68ec      	ldreq	r4, [r5, #12]
 8009152:	e7da      	b.n	800910a <_fflush_r+0x22>
 8009154:	0800b2bc 	.word	0x0800b2bc
 8009158:	0800b2dc 	.word	0x0800b2dc
 800915c:	0800b29c 	.word	0x0800b29c

08009160 <std>:
 8009160:	2300      	movs	r3, #0
 8009162:	b510      	push	{r4, lr}
 8009164:	4604      	mov	r4, r0
 8009166:	e9c0 3300 	strd	r3, r3, [r0]
 800916a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800916e:	6083      	str	r3, [r0, #8]
 8009170:	8181      	strh	r1, [r0, #12]
 8009172:	6643      	str	r3, [r0, #100]	; 0x64
 8009174:	81c2      	strh	r2, [r0, #14]
 8009176:	6183      	str	r3, [r0, #24]
 8009178:	4619      	mov	r1, r3
 800917a:	2208      	movs	r2, #8
 800917c:	305c      	adds	r0, #92	; 0x5c
 800917e:	f7fd fa11 	bl	80065a4 <memset>
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <std+0x38>)
 8009184:	6263      	str	r3, [r4, #36]	; 0x24
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <std+0x3c>)
 8009188:	62a3      	str	r3, [r4, #40]	; 0x28
 800918a:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <std+0x40>)
 800918c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800918e:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <std+0x44>)
 8009190:	6224      	str	r4, [r4, #32]
 8009192:	6323      	str	r3, [r4, #48]	; 0x30
 8009194:	bd10      	pop	{r4, pc}
 8009196:	bf00      	nop
 8009198:	0800ac61 	.word	0x0800ac61
 800919c:	0800ac83 	.word	0x0800ac83
 80091a0:	0800acbb 	.word	0x0800acbb
 80091a4:	0800acdf 	.word	0x0800acdf

080091a8 <_cleanup_r>:
 80091a8:	4901      	ldr	r1, [pc, #4]	; (80091b0 <_cleanup_r+0x8>)
 80091aa:	f000 b8af 	b.w	800930c <_fwalk_reent>
 80091ae:	bf00      	nop
 80091b0:	080090e9 	.word	0x080090e9

080091b4 <__sfmoreglue>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	2268      	movs	r2, #104	; 0x68
 80091b8:	1e4d      	subs	r5, r1, #1
 80091ba:	4355      	muls	r5, r2
 80091bc:	460e      	mov	r6, r1
 80091be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091c2:	f001 fa09 	bl	800a5d8 <_malloc_r>
 80091c6:	4604      	mov	r4, r0
 80091c8:	b140      	cbz	r0, 80091dc <__sfmoreglue+0x28>
 80091ca:	2100      	movs	r1, #0
 80091cc:	e9c0 1600 	strd	r1, r6, [r0]
 80091d0:	300c      	adds	r0, #12
 80091d2:	60a0      	str	r0, [r4, #8]
 80091d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091d8:	f7fd f9e4 	bl	80065a4 <memset>
 80091dc:	4620      	mov	r0, r4
 80091de:	bd70      	pop	{r4, r5, r6, pc}

080091e0 <__sfp_lock_acquire>:
 80091e0:	4801      	ldr	r0, [pc, #4]	; (80091e8 <__sfp_lock_acquire+0x8>)
 80091e2:	f000 bc26 	b.w	8009a32 <__retarget_lock_acquire_recursive>
 80091e6:	bf00      	nop
 80091e8:	200007e9 	.word	0x200007e9

080091ec <__sfp_lock_release>:
 80091ec:	4801      	ldr	r0, [pc, #4]	; (80091f4 <__sfp_lock_release+0x8>)
 80091ee:	f000 bc21 	b.w	8009a34 <__retarget_lock_release_recursive>
 80091f2:	bf00      	nop
 80091f4:	200007e9 	.word	0x200007e9

080091f8 <__sinit_lock_acquire>:
 80091f8:	4801      	ldr	r0, [pc, #4]	; (8009200 <__sinit_lock_acquire+0x8>)
 80091fa:	f000 bc1a 	b.w	8009a32 <__retarget_lock_acquire_recursive>
 80091fe:	bf00      	nop
 8009200:	200007ea 	.word	0x200007ea

08009204 <__sinit_lock_release>:
 8009204:	4801      	ldr	r0, [pc, #4]	; (800920c <__sinit_lock_release+0x8>)
 8009206:	f000 bc15 	b.w	8009a34 <__retarget_lock_release_recursive>
 800920a:	bf00      	nop
 800920c:	200007ea 	.word	0x200007ea

08009210 <__sinit>:
 8009210:	b510      	push	{r4, lr}
 8009212:	4604      	mov	r4, r0
 8009214:	f7ff fff0 	bl	80091f8 <__sinit_lock_acquire>
 8009218:	69a3      	ldr	r3, [r4, #24]
 800921a:	b11b      	cbz	r3, 8009224 <__sinit+0x14>
 800921c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009220:	f7ff bff0 	b.w	8009204 <__sinit_lock_release>
 8009224:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009228:	6523      	str	r3, [r4, #80]	; 0x50
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <__sinit+0x68>)
 800922c:	4a13      	ldr	r2, [pc, #76]	; (800927c <__sinit+0x6c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	62a2      	str	r2, [r4, #40]	; 0x28
 8009232:	42a3      	cmp	r3, r4
 8009234:	bf04      	itt	eq
 8009236:	2301      	moveq	r3, #1
 8009238:	61a3      	streq	r3, [r4, #24]
 800923a:	4620      	mov	r0, r4
 800923c:	f000 f820 	bl	8009280 <__sfp>
 8009240:	6060      	str	r0, [r4, #4]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f81c 	bl	8009280 <__sfp>
 8009248:	60a0      	str	r0, [r4, #8]
 800924a:	4620      	mov	r0, r4
 800924c:	f000 f818 	bl	8009280 <__sfp>
 8009250:	2200      	movs	r2, #0
 8009252:	60e0      	str	r0, [r4, #12]
 8009254:	2104      	movs	r1, #4
 8009256:	6860      	ldr	r0, [r4, #4]
 8009258:	f7ff ff82 	bl	8009160 <std>
 800925c:	68a0      	ldr	r0, [r4, #8]
 800925e:	2201      	movs	r2, #1
 8009260:	2109      	movs	r1, #9
 8009262:	f7ff ff7d 	bl	8009160 <std>
 8009266:	68e0      	ldr	r0, [r4, #12]
 8009268:	2202      	movs	r2, #2
 800926a:	2112      	movs	r1, #18
 800926c:	f7ff ff78 	bl	8009160 <std>
 8009270:	2301      	movs	r3, #1
 8009272:	61a3      	str	r3, [r4, #24]
 8009274:	e7d2      	b.n	800921c <__sinit+0xc>
 8009276:	bf00      	nop
 8009278:	0800b078 	.word	0x0800b078
 800927c:	080091a9 	.word	0x080091a9

08009280 <__sfp>:
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	4607      	mov	r7, r0
 8009284:	f7ff ffac 	bl	80091e0 <__sfp_lock_acquire>
 8009288:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <__sfp+0x84>)
 800928a:	681e      	ldr	r6, [r3, #0]
 800928c:	69b3      	ldr	r3, [r6, #24]
 800928e:	b913      	cbnz	r3, 8009296 <__sfp+0x16>
 8009290:	4630      	mov	r0, r6
 8009292:	f7ff ffbd 	bl	8009210 <__sinit>
 8009296:	3648      	adds	r6, #72	; 0x48
 8009298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800929c:	3b01      	subs	r3, #1
 800929e:	d503      	bpl.n	80092a8 <__sfp+0x28>
 80092a0:	6833      	ldr	r3, [r6, #0]
 80092a2:	b30b      	cbz	r3, 80092e8 <__sfp+0x68>
 80092a4:	6836      	ldr	r6, [r6, #0]
 80092a6:	e7f7      	b.n	8009298 <__sfp+0x18>
 80092a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092ac:	b9d5      	cbnz	r5, 80092e4 <__sfp+0x64>
 80092ae:	4b16      	ldr	r3, [pc, #88]	; (8009308 <__sfp+0x88>)
 80092b0:	60e3      	str	r3, [r4, #12]
 80092b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092b6:	6665      	str	r5, [r4, #100]	; 0x64
 80092b8:	f000 fbba 	bl	8009a30 <__retarget_lock_init_recursive>
 80092bc:	f7ff ff96 	bl	80091ec <__sfp_lock_release>
 80092c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092c8:	6025      	str	r5, [r4, #0]
 80092ca:	61a5      	str	r5, [r4, #24]
 80092cc:	2208      	movs	r2, #8
 80092ce:	4629      	mov	r1, r5
 80092d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092d4:	f7fd f966 	bl	80065a4 <memset>
 80092d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092e0:	4620      	mov	r0, r4
 80092e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e4:	3468      	adds	r4, #104	; 0x68
 80092e6:	e7d9      	b.n	800929c <__sfp+0x1c>
 80092e8:	2104      	movs	r1, #4
 80092ea:	4638      	mov	r0, r7
 80092ec:	f7ff ff62 	bl	80091b4 <__sfmoreglue>
 80092f0:	4604      	mov	r4, r0
 80092f2:	6030      	str	r0, [r6, #0]
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d1d5      	bne.n	80092a4 <__sfp+0x24>
 80092f8:	f7ff ff78 	bl	80091ec <__sfp_lock_release>
 80092fc:	230c      	movs	r3, #12
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	e7ee      	b.n	80092e0 <__sfp+0x60>
 8009302:	bf00      	nop
 8009304:	0800b078 	.word	0x0800b078
 8009308:	ffff0001 	.word	0xffff0001

0800930c <_fwalk_reent>:
 800930c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009310:	4606      	mov	r6, r0
 8009312:	4688      	mov	r8, r1
 8009314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009318:	2700      	movs	r7, #0
 800931a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800931e:	f1b9 0901 	subs.w	r9, r9, #1
 8009322:	d505      	bpl.n	8009330 <_fwalk_reent+0x24>
 8009324:	6824      	ldr	r4, [r4, #0]
 8009326:	2c00      	cmp	r4, #0
 8009328:	d1f7      	bne.n	800931a <_fwalk_reent+0xe>
 800932a:	4638      	mov	r0, r7
 800932c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009330:	89ab      	ldrh	r3, [r5, #12]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d907      	bls.n	8009346 <_fwalk_reent+0x3a>
 8009336:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800933a:	3301      	adds	r3, #1
 800933c:	d003      	beq.n	8009346 <_fwalk_reent+0x3a>
 800933e:	4629      	mov	r1, r5
 8009340:	4630      	mov	r0, r6
 8009342:	47c0      	blx	r8
 8009344:	4307      	orrs	r7, r0
 8009346:	3568      	adds	r5, #104	; 0x68
 8009348:	e7e9      	b.n	800931e <_fwalk_reent+0x12>

0800934a <rshift>:
 800934a:	6903      	ldr	r3, [r0, #16]
 800934c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009354:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009358:	f100 0414 	add.w	r4, r0, #20
 800935c:	dd45      	ble.n	80093ea <rshift+0xa0>
 800935e:	f011 011f 	ands.w	r1, r1, #31
 8009362:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009366:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800936a:	d10c      	bne.n	8009386 <rshift+0x3c>
 800936c:	f100 0710 	add.w	r7, r0, #16
 8009370:	4629      	mov	r1, r5
 8009372:	42b1      	cmp	r1, r6
 8009374:	d334      	bcc.n	80093e0 <rshift+0x96>
 8009376:	1a9b      	subs	r3, r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	1eea      	subs	r2, r5, #3
 800937c:	4296      	cmp	r6, r2
 800937e:	bf38      	it	cc
 8009380:	2300      	movcc	r3, #0
 8009382:	4423      	add	r3, r4
 8009384:	e015      	b.n	80093b2 <rshift+0x68>
 8009386:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800938a:	f1c1 0820 	rsb	r8, r1, #32
 800938e:	40cf      	lsrs	r7, r1
 8009390:	f105 0e04 	add.w	lr, r5, #4
 8009394:	46a1      	mov	r9, r4
 8009396:	4576      	cmp	r6, lr
 8009398:	46f4      	mov	ip, lr
 800939a:	d815      	bhi.n	80093c8 <rshift+0x7e>
 800939c:	1a9a      	subs	r2, r3, r2
 800939e:	0092      	lsls	r2, r2, #2
 80093a0:	3a04      	subs	r2, #4
 80093a2:	3501      	adds	r5, #1
 80093a4:	42ae      	cmp	r6, r5
 80093a6:	bf38      	it	cc
 80093a8:	2200      	movcc	r2, #0
 80093aa:	18a3      	adds	r3, r4, r2
 80093ac:	50a7      	str	r7, [r4, r2]
 80093ae:	b107      	cbz	r7, 80093b2 <rshift+0x68>
 80093b0:	3304      	adds	r3, #4
 80093b2:	1b1a      	subs	r2, r3, r4
 80093b4:	42a3      	cmp	r3, r4
 80093b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093ba:	bf08      	it	eq
 80093bc:	2300      	moveq	r3, #0
 80093be:	6102      	str	r2, [r0, #16]
 80093c0:	bf08      	it	eq
 80093c2:	6143      	streq	r3, [r0, #20]
 80093c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c8:	f8dc c000 	ldr.w	ip, [ip]
 80093cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80093d0:	ea4c 0707 	orr.w	r7, ip, r7
 80093d4:	f849 7b04 	str.w	r7, [r9], #4
 80093d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093dc:	40cf      	lsrs	r7, r1
 80093de:	e7da      	b.n	8009396 <rshift+0x4c>
 80093e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80093e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80093e8:	e7c3      	b.n	8009372 <rshift+0x28>
 80093ea:	4623      	mov	r3, r4
 80093ec:	e7e1      	b.n	80093b2 <rshift+0x68>

080093ee <__hexdig_fun>:
 80093ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093f2:	2b09      	cmp	r3, #9
 80093f4:	d802      	bhi.n	80093fc <__hexdig_fun+0xe>
 80093f6:	3820      	subs	r0, #32
 80093f8:	b2c0      	uxtb	r0, r0
 80093fa:	4770      	bx	lr
 80093fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009400:	2b05      	cmp	r3, #5
 8009402:	d801      	bhi.n	8009408 <__hexdig_fun+0x1a>
 8009404:	3847      	subs	r0, #71	; 0x47
 8009406:	e7f7      	b.n	80093f8 <__hexdig_fun+0xa>
 8009408:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800940c:	2b05      	cmp	r3, #5
 800940e:	d801      	bhi.n	8009414 <__hexdig_fun+0x26>
 8009410:	3827      	subs	r0, #39	; 0x27
 8009412:	e7f1      	b.n	80093f8 <__hexdig_fun+0xa>
 8009414:	2000      	movs	r0, #0
 8009416:	4770      	bx	lr

08009418 <__gethex>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	ed2d 8b02 	vpush	{d8}
 8009420:	b089      	sub	sp, #36	; 0x24
 8009422:	ee08 0a10 	vmov	s16, r0
 8009426:	9304      	str	r3, [sp, #16]
 8009428:	4bb4      	ldr	r3, [pc, #720]	; (80096fc <__gethex+0x2e4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	4618      	mov	r0, r3
 8009430:	468b      	mov	fp, r1
 8009432:	4690      	mov	r8, r2
 8009434:	f7f6 fedc 	bl	80001f0 <strlen>
 8009438:	9b01      	ldr	r3, [sp, #4]
 800943a:	f8db 2000 	ldr.w	r2, [fp]
 800943e:	4403      	add	r3, r0
 8009440:	4682      	mov	sl, r0
 8009442:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	1c93      	adds	r3, r2, #2
 800944a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800944e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009452:	32fe      	adds	r2, #254	; 0xfe
 8009454:	18d1      	adds	r1, r2, r3
 8009456:	461f      	mov	r7, r3
 8009458:	f813 0b01 	ldrb.w	r0, [r3], #1
 800945c:	9100      	str	r1, [sp, #0]
 800945e:	2830      	cmp	r0, #48	; 0x30
 8009460:	d0f8      	beq.n	8009454 <__gethex+0x3c>
 8009462:	f7ff ffc4 	bl	80093ee <__hexdig_fun>
 8009466:	4604      	mov	r4, r0
 8009468:	2800      	cmp	r0, #0
 800946a:	d13a      	bne.n	80094e2 <__gethex+0xca>
 800946c:	9901      	ldr	r1, [sp, #4]
 800946e:	4652      	mov	r2, sl
 8009470:	4638      	mov	r0, r7
 8009472:	f001 fc38 	bl	800ace6 <strncmp>
 8009476:	4605      	mov	r5, r0
 8009478:	2800      	cmp	r0, #0
 800947a:	d168      	bne.n	800954e <__gethex+0x136>
 800947c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009480:	eb07 060a 	add.w	r6, r7, sl
 8009484:	f7ff ffb3 	bl	80093ee <__hexdig_fun>
 8009488:	2800      	cmp	r0, #0
 800948a:	d062      	beq.n	8009552 <__gethex+0x13a>
 800948c:	4633      	mov	r3, r6
 800948e:	7818      	ldrb	r0, [r3, #0]
 8009490:	2830      	cmp	r0, #48	; 0x30
 8009492:	461f      	mov	r7, r3
 8009494:	f103 0301 	add.w	r3, r3, #1
 8009498:	d0f9      	beq.n	800948e <__gethex+0x76>
 800949a:	f7ff ffa8 	bl	80093ee <__hexdig_fun>
 800949e:	2301      	movs	r3, #1
 80094a0:	fab0 f480 	clz	r4, r0
 80094a4:	0964      	lsrs	r4, r4, #5
 80094a6:	4635      	mov	r5, r6
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	463a      	mov	r2, r7
 80094ac:	4616      	mov	r6, r2
 80094ae:	3201      	adds	r2, #1
 80094b0:	7830      	ldrb	r0, [r6, #0]
 80094b2:	f7ff ff9c 	bl	80093ee <__hexdig_fun>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d1f8      	bne.n	80094ac <__gethex+0x94>
 80094ba:	9901      	ldr	r1, [sp, #4]
 80094bc:	4652      	mov	r2, sl
 80094be:	4630      	mov	r0, r6
 80094c0:	f001 fc11 	bl	800ace6 <strncmp>
 80094c4:	b980      	cbnz	r0, 80094e8 <__gethex+0xd0>
 80094c6:	b94d      	cbnz	r5, 80094dc <__gethex+0xc4>
 80094c8:	eb06 050a 	add.w	r5, r6, sl
 80094cc:	462a      	mov	r2, r5
 80094ce:	4616      	mov	r6, r2
 80094d0:	3201      	adds	r2, #1
 80094d2:	7830      	ldrb	r0, [r6, #0]
 80094d4:	f7ff ff8b 	bl	80093ee <__hexdig_fun>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d1f8      	bne.n	80094ce <__gethex+0xb6>
 80094dc:	1bad      	subs	r5, r5, r6
 80094de:	00ad      	lsls	r5, r5, #2
 80094e0:	e004      	b.n	80094ec <__gethex+0xd4>
 80094e2:	2400      	movs	r4, #0
 80094e4:	4625      	mov	r5, r4
 80094e6:	e7e0      	b.n	80094aa <__gethex+0x92>
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	d1f7      	bne.n	80094dc <__gethex+0xc4>
 80094ec:	7833      	ldrb	r3, [r6, #0]
 80094ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094f2:	2b50      	cmp	r3, #80	; 0x50
 80094f4:	d13b      	bne.n	800956e <__gethex+0x156>
 80094f6:	7873      	ldrb	r3, [r6, #1]
 80094f8:	2b2b      	cmp	r3, #43	; 0x2b
 80094fa:	d02c      	beq.n	8009556 <__gethex+0x13e>
 80094fc:	2b2d      	cmp	r3, #45	; 0x2d
 80094fe:	d02e      	beq.n	800955e <__gethex+0x146>
 8009500:	1c71      	adds	r1, r6, #1
 8009502:	f04f 0900 	mov.w	r9, #0
 8009506:	7808      	ldrb	r0, [r1, #0]
 8009508:	f7ff ff71 	bl	80093ee <__hexdig_fun>
 800950c:	1e43      	subs	r3, r0, #1
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b18      	cmp	r3, #24
 8009512:	d82c      	bhi.n	800956e <__gethex+0x156>
 8009514:	f1a0 0210 	sub.w	r2, r0, #16
 8009518:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800951c:	f7ff ff67 	bl	80093ee <__hexdig_fun>
 8009520:	1e43      	subs	r3, r0, #1
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b18      	cmp	r3, #24
 8009526:	d91d      	bls.n	8009564 <__gethex+0x14c>
 8009528:	f1b9 0f00 	cmp.w	r9, #0
 800952c:	d000      	beq.n	8009530 <__gethex+0x118>
 800952e:	4252      	negs	r2, r2
 8009530:	4415      	add	r5, r2
 8009532:	f8cb 1000 	str.w	r1, [fp]
 8009536:	b1e4      	cbz	r4, 8009572 <__gethex+0x15a>
 8009538:	9b00      	ldr	r3, [sp, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	bf14      	ite	ne
 800953e:	2700      	movne	r7, #0
 8009540:	2706      	moveq	r7, #6
 8009542:	4638      	mov	r0, r7
 8009544:	b009      	add	sp, #36	; 0x24
 8009546:	ecbd 8b02 	vpop	{d8}
 800954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	463e      	mov	r6, r7
 8009550:	4625      	mov	r5, r4
 8009552:	2401      	movs	r4, #1
 8009554:	e7ca      	b.n	80094ec <__gethex+0xd4>
 8009556:	f04f 0900 	mov.w	r9, #0
 800955a:	1cb1      	adds	r1, r6, #2
 800955c:	e7d3      	b.n	8009506 <__gethex+0xee>
 800955e:	f04f 0901 	mov.w	r9, #1
 8009562:	e7fa      	b.n	800955a <__gethex+0x142>
 8009564:	230a      	movs	r3, #10
 8009566:	fb03 0202 	mla	r2, r3, r2, r0
 800956a:	3a10      	subs	r2, #16
 800956c:	e7d4      	b.n	8009518 <__gethex+0x100>
 800956e:	4631      	mov	r1, r6
 8009570:	e7df      	b.n	8009532 <__gethex+0x11a>
 8009572:	1bf3      	subs	r3, r6, r7
 8009574:	3b01      	subs	r3, #1
 8009576:	4621      	mov	r1, r4
 8009578:	2b07      	cmp	r3, #7
 800957a:	dc0b      	bgt.n	8009594 <__gethex+0x17c>
 800957c:	ee18 0a10 	vmov	r0, s16
 8009580:	f000 fae6 	bl	8009b50 <_Balloc>
 8009584:	4604      	mov	r4, r0
 8009586:	b940      	cbnz	r0, 800959a <__gethex+0x182>
 8009588:	4b5d      	ldr	r3, [pc, #372]	; (8009700 <__gethex+0x2e8>)
 800958a:	4602      	mov	r2, r0
 800958c:	21de      	movs	r1, #222	; 0xde
 800958e:	485d      	ldr	r0, [pc, #372]	; (8009704 <__gethex+0x2ec>)
 8009590:	f001 fbdc 	bl	800ad4c <__assert_func>
 8009594:	3101      	adds	r1, #1
 8009596:	105b      	asrs	r3, r3, #1
 8009598:	e7ee      	b.n	8009578 <__gethex+0x160>
 800959a:	f100 0914 	add.w	r9, r0, #20
 800959e:	f04f 0b00 	mov.w	fp, #0
 80095a2:	f1ca 0301 	rsb	r3, sl, #1
 80095a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80095aa:	f8cd b000 	str.w	fp, [sp]
 80095ae:	9306      	str	r3, [sp, #24]
 80095b0:	42b7      	cmp	r7, r6
 80095b2:	d340      	bcc.n	8009636 <__gethex+0x21e>
 80095b4:	9802      	ldr	r0, [sp, #8]
 80095b6:	9b00      	ldr	r3, [sp, #0]
 80095b8:	f840 3b04 	str.w	r3, [r0], #4
 80095bc:	eba0 0009 	sub.w	r0, r0, r9
 80095c0:	1080      	asrs	r0, r0, #2
 80095c2:	0146      	lsls	r6, r0, #5
 80095c4:	6120      	str	r0, [r4, #16]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fbb4 	bl	8009d34 <__hi0bits>
 80095cc:	1a30      	subs	r0, r6, r0
 80095ce:	f8d8 6000 	ldr.w	r6, [r8]
 80095d2:	42b0      	cmp	r0, r6
 80095d4:	dd63      	ble.n	800969e <__gethex+0x286>
 80095d6:	1b87      	subs	r7, r0, r6
 80095d8:	4639      	mov	r1, r7
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 ff58 	bl	800a490 <__any_on>
 80095e0:	4682      	mov	sl, r0
 80095e2:	b1a8      	cbz	r0, 8009610 <__gethex+0x1f8>
 80095e4:	1e7b      	subs	r3, r7, #1
 80095e6:	1159      	asrs	r1, r3, #5
 80095e8:	f003 021f 	and.w	r2, r3, #31
 80095ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80095f0:	f04f 0a01 	mov.w	sl, #1
 80095f4:	fa0a f202 	lsl.w	r2, sl, r2
 80095f8:	420a      	tst	r2, r1
 80095fa:	d009      	beq.n	8009610 <__gethex+0x1f8>
 80095fc:	4553      	cmp	r3, sl
 80095fe:	dd05      	ble.n	800960c <__gethex+0x1f4>
 8009600:	1eb9      	subs	r1, r7, #2
 8009602:	4620      	mov	r0, r4
 8009604:	f000 ff44 	bl	800a490 <__any_on>
 8009608:	2800      	cmp	r0, #0
 800960a:	d145      	bne.n	8009698 <__gethex+0x280>
 800960c:	f04f 0a02 	mov.w	sl, #2
 8009610:	4639      	mov	r1, r7
 8009612:	4620      	mov	r0, r4
 8009614:	f7ff fe99 	bl	800934a <rshift>
 8009618:	443d      	add	r5, r7
 800961a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800961e:	42ab      	cmp	r3, r5
 8009620:	da4c      	bge.n	80096bc <__gethex+0x2a4>
 8009622:	ee18 0a10 	vmov	r0, s16
 8009626:	4621      	mov	r1, r4
 8009628:	f000 fad2 	bl	8009bd0 <_Bfree>
 800962c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800962e:	2300      	movs	r3, #0
 8009630:	6013      	str	r3, [r2, #0]
 8009632:	27a3      	movs	r7, #163	; 0xa3
 8009634:	e785      	b.n	8009542 <__gethex+0x12a>
 8009636:	1e73      	subs	r3, r6, #1
 8009638:	9a05      	ldr	r2, [sp, #20]
 800963a:	9303      	str	r3, [sp, #12]
 800963c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009640:	4293      	cmp	r3, r2
 8009642:	d019      	beq.n	8009678 <__gethex+0x260>
 8009644:	f1bb 0f20 	cmp.w	fp, #32
 8009648:	d107      	bne.n	800965a <__gethex+0x242>
 800964a:	9b02      	ldr	r3, [sp, #8]
 800964c:	9a00      	ldr	r2, [sp, #0]
 800964e:	f843 2b04 	str.w	r2, [r3], #4
 8009652:	9302      	str	r3, [sp, #8]
 8009654:	2300      	movs	r3, #0
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	469b      	mov	fp, r3
 800965a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800965e:	f7ff fec6 	bl	80093ee <__hexdig_fun>
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	f000 000f 	and.w	r0, r0, #15
 8009668:	fa00 f00b 	lsl.w	r0, r0, fp
 800966c:	4303      	orrs	r3, r0
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	f10b 0b04 	add.w	fp, fp, #4
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	e00d      	b.n	8009694 <__gethex+0x27c>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	9a06      	ldr	r2, [sp, #24]
 800967c:	4413      	add	r3, r2
 800967e:	42bb      	cmp	r3, r7
 8009680:	d3e0      	bcc.n	8009644 <__gethex+0x22c>
 8009682:	4618      	mov	r0, r3
 8009684:	9901      	ldr	r1, [sp, #4]
 8009686:	9307      	str	r3, [sp, #28]
 8009688:	4652      	mov	r2, sl
 800968a:	f001 fb2c 	bl	800ace6 <strncmp>
 800968e:	9b07      	ldr	r3, [sp, #28]
 8009690:	2800      	cmp	r0, #0
 8009692:	d1d7      	bne.n	8009644 <__gethex+0x22c>
 8009694:	461e      	mov	r6, r3
 8009696:	e78b      	b.n	80095b0 <__gethex+0x198>
 8009698:	f04f 0a03 	mov.w	sl, #3
 800969c:	e7b8      	b.n	8009610 <__gethex+0x1f8>
 800969e:	da0a      	bge.n	80096b6 <__gethex+0x29e>
 80096a0:	1a37      	subs	r7, r6, r0
 80096a2:	4621      	mov	r1, r4
 80096a4:	ee18 0a10 	vmov	r0, s16
 80096a8:	463a      	mov	r2, r7
 80096aa:	f000 fcad 	bl	800a008 <__lshift>
 80096ae:	1bed      	subs	r5, r5, r7
 80096b0:	4604      	mov	r4, r0
 80096b2:	f100 0914 	add.w	r9, r0, #20
 80096b6:	f04f 0a00 	mov.w	sl, #0
 80096ba:	e7ae      	b.n	800961a <__gethex+0x202>
 80096bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80096c0:	42a8      	cmp	r0, r5
 80096c2:	dd72      	ble.n	80097aa <__gethex+0x392>
 80096c4:	1b45      	subs	r5, r0, r5
 80096c6:	42ae      	cmp	r6, r5
 80096c8:	dc36      	bgt.n	8009738 <__gethex+0x320>
 80096ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d02a      	beq.n	8009728 <__gethex+0x310>
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d02c      	beq.n	8009730 <__gethex+0x318>
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d11c      	bne.n	8009714 <__gethex+0x2fc>
 80096da:	42ae      	cmp	r6, r5
 80096dc:	d11a      	bne.n	8009714 <__gethex+0x2fc>
 80096de:	2e01      	cmp	r6, #1
 80096e0:	d112      	bne.n	8009708 <__gethex+0x2f0>
 80096e2:	9a04      	ldr	r2, [sp, #16]
 80096e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	2301      	movs	r3, #1
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	f8c9 3000 	str.w	r3, [r9]
 80096f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096f4:	2762      	movs	r7, #98	; 0x62
 80096f6:	601c      	str	r4, [r3, #0]
 80096f8:	e723      	b.n	8009542 <__gethex+0x12a>
 80096fa:	bf00      	nop
 80096fc:	0800b364 	.word	0x0800b364
 8009700:	0800b288 	.word	0x0800b288
 8009704:	0800b2fc 	.word	0x0800b2fc
 8009708:	1e71      	subs	r1, r6, #1
 800970a:	4620      	mov	r0, r4
 800970c:	f000 fec0 	bl	800a490 <__any_on>
 8009710:	2800      	cmp	r0, #0
 8009712:	d1e6      	bne.n	80096e2 <__gethex+0x2ca>
 8009714:	ee18 0a10 	vmov	r0, s16
 8009718:	4621      	mov	r1, r4
 800971a:	f000 fa59 	bl	8009bd0 <_Bfree>
 800971e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009720:	2300      	movs	r3, #0
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	2750      	movs	r7, #80	; 0x50
 8009726:	e70c      	b.n	8009542 <__gethex+0x12a>
 8009728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1f2      	bne.n	8009714 <__gethex+0x2fc>
 800972e:	e7d8      	b.n	80096e2 <__gethex+0x2ca>
 8009730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1d5      	bne.n	80096e2 <__gethex+0x2ca>
 8009736:	e7ed      	b.n	8009714 <__gethex+0x2fc>
 8009738:	1e6f      	subs	r7, r5, #1
 800973a:	f1ba 0f00 	cmp.w	sl, #0
 800973e:	d131      	bne.n	80097a4 <__gethex+0x38c>
 8009740:	b127      	cbz	r7, 800974c <__gethex+0x334>
 8009742:	4639      	mov	r1, r7
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fea3 	bl	800a490 <__any_on>
 800974a:	4682      	mov	sl, r0
 800974c:	117b      	asrs	r3, r7, #5
 800974e:	2101      	movs	r1, #1
 8009750:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009754:	f007 071f 	and.w	r7, r7, #31
 8009758:	fa01 f707 	lsl.w	r7, r1, r7
 800975c:	421f      	tst	r7, r3
 800975e:	4629      	mov	r1, r5
 8009760:	4620      	mov	r0, r4
 8009762:	bf18      	it	ne
 8009764:	f04a 0a02 	orrne.w	sl, sl, #2
 8009768:	1b76      	subs	r6, r6, r5
 800976a:	f7ff fdee 	bl	800934a <rshift>
 800976e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009772:	2702      	movs	r7, #2
 8009774:	f1ba 0f00 	cmp.w	sl, #0
 8009778:	d048      	beq.n	800980c <__gethex+0x3f4>
 800977a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d015      	beq.n	80097ae <__gethex+0x396>
 8009782:	2b03      	cmp	r3, #3
 8009784:	d017      	beq.n	80097b6 <__gethex+0x39e>
 8009786:	2b01      	cmp	r3, #1
 8009788:	d109      	bne.n	800979e <__gethex+0x386>
 800978a:	f01a 0f02 	tst.w	sl, #2
 800978e:	d006      	beq.n	800979e <__gethex+0x386>
 8009790:	f8d9 0000 	ldr.w	r0, [r9]
 8009794:	ea4a 0a00 	orr.w	sl, sl, r0
 8009798:	f01a 0f01 	tst.w	sl, #1
 800979c:	d10e      	bne.n	80097bc <__gethex+0x3a4>
 800979e:	f047 0710 	orr.w	r7, r7, #16
 80097a2:	e033      	b.n	800980c <__gethex+0x3f4>
 80097a4:	f04f 0a01 	mov.w	sl, #1
 80097a8:	e7d0      	b.n	800974c <__gethex+0x334>
 80097aa:	2701      	movs	r7, #1
 80097ac:	e7e2      	b.n	8009774 <__gethex+0x35c>
 80097ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097b0:	f1c3 0301 	rsb	r3, r3, #1
 80097b4:	9315      	str	r3, [sp, #84]	; 0x54
 80097b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0f0      	beq.n	800979e <__gethex+0x386>
 80097bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097c0:	f104 0314 	add.w	r3, r4, #20
 80097c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80097c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80097cc:	f04f 0c00 	mov.w	ip, #0
 80097d0:	4618      	mov	r0, r3
 80097d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80097da:	d01c      	beq.n	8009816 <__gethex+0x3fe>
 80097dc:	3201      	adds	r2, #1
 80097de:	6002      	str	r2, [r0, #0]
 80097e0:	2f02      	cmp	r7, #2
 80097e2:	f104 0314 	add.w	r3, r4, #20
 80097e6:	d13f      	bne.n	8009868 <__gethex+0x450>
 80097e8:	f8d8 2000 	ldr.w	r2, [r8]
 80097ec:	3a01      	subs	r2, #1
 80097ee:	42b2      	cmp	r2, r6
 80097f0:	d10a      	bne.n	8009808 <__gethex+0x3f0>
 80097f2:	1171      	asrs	r1, r6, #5
 80097f4:	2201      	movs	r2, #1
 80097f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097fa:	f006 061f 	and.w	r6, r6, #31
 80097fe:	fa02 f606 	lsl.w	r6, r2, r6
 8009802:	421e      	tst	r6, r3
 8009804:	bf18      	it	ne
 8009806:	4617      	movne	r7, r2
 8009808:	f047 0720 	orr.w	r7, r7, #32
 800980c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800980e:	601c      	str	r4, [r3, #0]
 8009810:	9b04      	ldr	r3, [sp, #16]
 8009812:	601d      	str	r5, [r3, #0]
 8009814:	e695      	b.n	8009542 <__gethex+0x12a>
 8009816:	4299      	cmp	r1, r3
 8009818:	f843 cc04 	str.w	ip, [r3, #-4]
 800981c:	d8d8      	bhi.n	80097d0 <__gethex+0x3b8>
 800981e:	68a3      	ldr	r3, [r4, #8]
 8009820:	459b      	cmp	fp, r3
 8009822:	db19      	blt.n	8009858 <__gethex+0x440>
 8009824:	6861      	ldr	r1, [r4, #4]
 8009826:	ee18 0a10 	vmov	r0, s16
 800982a:	3101      	adds	r1, #1
 800982c:	f000 f990 	bl	8009b50 <_Balloc>
 8009830:	4681      	mov	r9, r0
 8009832:	b918      	cbnz	r0, 800983c <__gethex+0x424>
 8009834:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <__gethex+0x488>)
 8009836:	4602      	mov	r2, r0
 8009838:	2184      	movs	r1, #132	; 0x84
 800983a:	e6a8      	b.n	800958e <__gethex+0x176>
 800983c:	6922      	ldr	r2, [r4, #16]
 800983e:	3202      	adds	r2, #2
 8009840:	f104 010c 	add.w	r1, r4, #12
 8009844:	0092      	lsls	r2, r2, #2
 8009846:	300c      	adds	r0, #12
 8009848:	f000 f974 	bl	8009b34 <memcpy>
 800984c:	4621      	mov	r1, r4
 800984e:	ee18 0a10 	vmov	r0, s16
 8009852:	f000 f9bd 	bl	8009bd0 <_Bfree>
 8009856:	464c      	mov	r4, r9
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009860:	6122      	str	r2, [r4, #16]
 8009862:	2201      	movs	r2, #1
 8009864:	615a      	str	r2, [r3, #20]
 8009866:	e7bb      	b.n	80097e0 <__gethex+0x3c8>
 8009868:	6922      	ldr	r2, [r4, #16]
 800986a:	455a      	cmp	r2, fp
 800986c:	dd0b      	ble.n	8009886 <__gethex+0x46e>
 800986e:	2101      	movs	r1, #1
 8009870:	4620      	mov	r0, r4
 8009872:	f7ff fd6a 	bl	800934a <rshift>
 8009876:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800987a:	3501      	adds	r5, #1
 800987c:	42ab      	cmp	r3, r5
 800987e:	f6ff aed0 	blt.w	8009622 <__gethex+0x20a>
 8009882:	2701      	movs	r7, #1
 8009884:	e7c0      	b.n	8009808 <__gethex+0x3f0>
 8009886:	f016 061f 	ands.w	r6, r6, #31
 800988a:	d0fa      	beq.n	8009882 <__gethex+0x46a>
 800988c:	4453      	add	r3, sl
 800988e:	f1c6 0620 	rsb	r6, r6, #32
 8009892:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009896:	f000 fa4d 	bl	8009d34 <__hi0bits>
 800989a:	42b0      	cmp	r0, r6
 800989c:	dbe7      	blt.n	800986e <__gethex+0x456>
 800989e:	e7f0      	b.n	8009882 <__gethex+0x46a>
 80098a0:	0800b288 	.word	0x0800b288

080098a4 <L_shift>:
 80098a4:	f1c2 0208 	rsb	r2, r2, #8
 80098a8:	0092      	lsls	r2, r2, #2
 80098aa:	b570      	push	{r4, r5, r6, lr}
 80098ac:	f1c2 0620 	rsb	r6, r2, #32
 80098b0:	6843      	ldr	r3, [r0, #4]
 80098b2:	6804      	ldr	r4, [r0, #0]
 80098b4:	fa03 f506 	lsl.w	r5, r3, r6
 80098b8:	432c      	orrs	r4, r5
 80098ba:	40d3      	lsrs	r3, r2
 80098bc:	6004      	str	r4, [r0, #0]
 80098be:	f840 3f04 	str.w	r3, [r0, #4]!
 80098c2:	4288      	cmp	r0, r1
 80098c4:	d3f4      	bcc.n	80098b0 <L_shift+0xc>
 80098c6:	bd70      	pop	{r4, r5, r6, pc}

080098c8 <__match>:
 80098c8:	b530      	push	{r4, r5, lr}
 80098ca:	6803      	ldr	r3, [r0, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d2:	b914      	cbnz	r4, 80098da <__match+0x12>
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	2001      	movs	r0, #1
 80098d8:	bd30      	pop	{r4, r5, pc}
 80098da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098e2:	2d19      	cmp	r5, #25
 80098e4:	bf98      	it	ls
 80098e6:	3220      	addls	r2, #32
 80098e8:	42a2      	cmp	r2, r4
 80098ea:	d0f0      	beq.n	80098ce <__match+0x6>
 80098ec:	2000      	movs	r0, #0
 80098ee:	e7f3      	b.n	80098d8 <__match+0x10>

080098f0 <__hexnan>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	680b      	ldr	r3, [r1, #0]
 80098f6:	115e      	asrs	r6, r3, #5
 80098f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098fc:	f013 031f 	ands.w	r3, r3, #31
 8009900:	b087      	sub	sp, #28
 8009902:	bf18      	it	ne
 8009904:	3604      	addne	r6, #4
 8009906:	2500      	movs	r5, #0
 8009908:	1f37      	subs	r7, r6, #4
 800990a:	4690      	mov	r8, r2
 800990c:	6802      	ldr	r2, [r0, #0]
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	4682      	mov	sl, r0
 8009912:	f846 5c04 	str.w	r5, [r6, #-4]
 8009916:	46b9      	mov	r9, r7
 8009918:	463c      	mov	r4, r7
 800991a:	9502      	str	r5, [sp, #8]
 800991c:	46ab      	mov	fp, r5
 800991e:	7851      	ldrb	r1, [r2, #1]
 8009920:	1c53      	adds	r3, r2, #1
 8009922:	9303      	str	r3, [sp, #12]
 8009924:	b341      	cbz	r1, 8009978 <__hexnan+0x88>
 8009926:	4608      	mov	r0, r1
 8009928:	9205      	str	r2, [sp, #20]
 800992a:	9104      	str	r1, [sp, #16]
 800992c:	f7ff fd5f 	bl	80093ee <__hexdig_fun>
 8009930:	2800      	cmp	r0, #0
 8009932:	d14f      	bne.n	80099d4 <__hexnan+0xe4>
 8009934:	9904      	ldr	r1, [sp, #16]
 8009936:	9a05      	ldr	r2, [sp, #20]
 8009938:	2920      	cmp	r1, #32
 800993a:	d818      	bhi.n	800996e <__hexnan+0x7e>
 800993c:	9b02      	ldr	r3, [sp, #8]
 800993e:	459b      	cmp	fp, r3
 8009940:	dd13      	ble.n	800996a <__hexnan+0x7a>
 8009942:	454c      	cmp	r4, r9
 8009944:	d206      	bcs.n	8009954 <__hexnan+0x64>
 8009946:	2d07      	cmp	r5, #7
 8009948:	dc04      	bgt.n	8009954 <__hexnan+0x64>
 800994a:	462a      	mov	r2, r5
 800994c:	4649      	mov	r1, r9
 800994e:	4620      	mov	r0, r4
 8009950:	f7ff ffa8 	bl	80098a4 <L_shift>
 8009954:	4544      	cmp	r4, r8
 8009956:	d950      	bls.n	80099fa <__hexnan+0x10a>
 8009958:	2300      	movs	r3, #0
 800995a:	f1a4 0904 	sub.w	r9, r4, #4
 800995e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009962:	f8cd b008 	str.w	fp, [sp, #8]
 8009966:	464c      	mov	r4, r9
 8009968:	461d      	mov	r5, r3
 800996a:	9a03      	ldr	r2, [sp, #12]
 800996c:	e7d7      	b.n	800991e <__hexnan+0x2e>
 800996e:	2929      	cmp	r1, #41	; 0x29
 8009970:	d156      	bne.n	8009a20 <__hexnan+0x130>
 8009972:	3202      	adds	r2, #2
 8009974:	f8ca 2000 	str.w	r2, [sl]
 8009978:	f1bb 0f00 	cmp.w	fp, #0
 800997c:	d050      	beq.n	8009a20 <__hexnan+0x130>
 800997e:	454c      	cmp	r4, r9
 8009980:	d206      	bcs.n	8009990 <__hexnan+0xa0>
 8009982:	2d07      	cmp	r5, #7
 8009984:	dc04      	bgt.n	8009990 <__hexnan+0xa0>
 8009986:	462a      	mov	r2, r5
 8009988:	4649      	mov	r1, r9
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff ff8a 	bl	80098a4 <L_shift>
 8009990:	4544      	cmp	r4, r8
 8009992:	d934      	bls.n	80099fe <__hexnan+0x10e>
 8009994:	f1a8 0204 	sub.w	r2, r8, #4
 8009998:	4623      	mov	r3, r4
 800999a:	f853 1b04 	ldr.w	r1, [r3], #4
 800999e:	f842 1f04 	str.w	r1, [r2, #4]!
 80099a2:	429f      	cmp	r7, r3
 80099a4:	d2f9      	bcs.n	800999a <__hexnan+0xaa>
 80099a6:	1b3b      	subs	r3, r7, r4
 80099a8:	f023 0303 	bic.w	r3, r3, #3
 80099ac:	3304      	adds	r3, #4
 80099ae:	3401      	adds	r4, #1
 80099b0:	3e03      	subs	r6, #3
 80099b2:	42b4      	cmp	r4, r6
 80099b4:	bf88      	it	hi
 80099b6:	2304      	movhi	r3, #4
 80099b8:	4443      	add	r3, r8
 80099ba:	2200      	movs	r2, #0
 80099bc:	f843 2b04 	str.w	r2, [r3], #4
 80099c0:	429f      	cmp	r7, r3
 80099c2:	d2fb      	bcs.n	80099bc <__hexnan+0xcc>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	b91b      	cbnz	r3, 80099d0 <__hexnan+0xe0>
 80099c8:	4547      	cmp	r7, r8
 80099ca:	d127      	bne.n	8009a1c <__hexnan+0x12c>
 80099cc:	2301      	movs	r3, #1
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	2005      	movs	r0, #5
 80099d2:	e026      	b.n	8009a22 <__hexnan+0x132>
 80099d4:	3501      	adds	r5, #1
 80099d6:	2d08      	cmp	r5, #8
 80099d8:	f10b 0b01 	add.w	fp, fp, #1
 80099dc:	dd06      	ble.n	80099ec <__hexnan+0xfc>
 80099de:	4544      	cmp	r4, r8
 80099e0:	d9c3      	bls.n	800996a <__hexnan+0x7a>
 80099e2:	2300      	movs	r3, #0
 80099e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80099e8:	2501      	movs	r5, #1
 80099ea:	3c04      	subs	r4, #4
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	f000 000f 	and.w	r0, r0, #15
 80099f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80099f6:	6022      	str	r2, [r4, #0]
 80099f8:	e7b7      	b.n	800996a <__hexnan+0x7a>
 80099fa:	2508      	movs	r5, #8
 80099fc:	e7b5      	b.n	800996a <__hexnan+0x7a>
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0df      	beq.n	80099c4 <__hexnan+0xd4>
 8009a04:	f04f 32ff 	mov.w	r2, #4294967295
 8009a08:	f1c3 0320 	rsb	r3, r3, #32
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a14:	401a      	ands	r2, r3
 8009a16:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a1a:	e7d3      	b.n	80099c4 <__hexnan+0xd4>
 8009a1c:	3f04      	subs	r7, #4
 8009a1e:	e7d1      	b.n	80099c4 <__hexnan+0xd4>
 8009a20:	2004      	movs	r0, #4
 8009a22:	b007      	add	sp, #28
 8009a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a28 <_localeconv_r>:
 8009a28:	4800      	ldr	r0, [pc, #0]	; (8009a2c <_localeconv_r+0x4>)
 8009a2a:	4770      	bx	lr
 8009a2c:	20000164 	.word	0x20000164

08009a30 <__retarget_lock_init_recursive>:
 8009a30:	4770      	bx	lr

08009a32 <__retarget_lock_acquire_recursive>:
 8009a32:	4770      	bx	lr

08009a34 <__retarget_lock_release_recursive>:
 8009a34:	4770      	bx	lr

08009a36 <__swhatbuf_r>:
 8009a36:	b570      	push	{r4, r5, r6, lr}
 8009a38:	460e      	mov	r6, r1
 8009a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	b096      	sub	sp, #88	; 0x58
 8009a42:	4614      	mov	r4, r2
 8009a44:	461d      	mov	r5, r3
 8009a46:	da08      	bge.n	8009a5a <__swhatbuf_r+0x24>
 8009a48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	602a      	str	r2, [r5, #0]
 8009a50:	061a      	lsls	r2, r3, #24
 8009a52:	d410      	bmi.n	8009a76 <__swhatbuf_r+0x40>
 8009a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a58:	e00e      	b.n	8009a78 <__swhatbuf_r+0x42>
 8009a5a:	466a      	mov	r2, sp
 8009a5c:	f001 f9b6 	bl	800adcc <_fstat_r>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	dbf1      	blt.n	8009a48 <__swhatbuf_r+0x12>
 8009a64:	9a01      	ldr	r2, [sp, #4]
 8009a66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a6e:	425a      	negs	r2, r3
 8009a70:	415a      	adcs	r2, r3
 8009a72:	602a      	str	r2, [r5, #0]
 8009a74:	e7ee      	b.n	8009a54 <__swhatbuf_r+0x1e>
 8009a76:	2340      	movs	r3, #64	; 0x40
 8009a78:	2000      	movs	r0, #0
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	b016      	add	sp, #88	; 0x58
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}

08009a80 <__smakebuf_r>:
 8009a80:	898b      	ldrh	r3, [r1, #12]
 8009a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a84:	079d      	lsls	r5, r3, #30
 8009a86:	4606      	mov	r6, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	d507      	bpl.n	8009a9c <__smakebuf_r+0x1c>
 8009a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	2301      	movs	r3, #1
 8009a96:	6163      	str	r3, [r4, #20]
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	ab01      	add	r3, sp, #4
 8009a9e:	466a      	mov	r2, sp
 8009aa0:	f7ff ffc9 	bl	8009a36 <__swhatbuf_r>
 8009aa4:	9900      	ldr	r1, [sp, #0]
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f000 fd95 	bl	800a5d8 <_malloc_r>
 8009aae:	b948      	cbnz	r0, 8009ac4 <__smakebuf_r+0x44>
 8009ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab4:	059a      	lsls	r2, r3, #22
 8009ab6:	d4ef      	bmi.n	8009a98 <__smakebuf_r+0x18>
 8009ab8:	f023 0303 	bic.w	r3, r3, #3
 8009abc:	f043 0302 	orr.w	r3, r3, #2
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	e7e3      	b.n	8009a8c <__smakebuf_r+0xc>
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <__smakebuf_r+0x7c>)
 8009ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	6020      	str	r0, [r4, #0]
 8009acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	6163      	str	r3, [r4, #20]
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	6120      	str	r0, [r4, #16]
 8009ada:	b15b      	cbz	r3, 8009af4 <__smakebuf_r+0x74>
 8009adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f001 f985 	bl	800adf0 <_isatty_r>
 8009ae6:	b128      	cbz	r0, 8009af4 <__smakebuf_r+0x74>
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	f023 0303 	bic.w	r3, r3, #3
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	89a0      	ldrh	r0, [r4, #12]
 8009af6:	4305      	orrs	r5, r0
 8009af8:	81a5      	strh	r5, [r4, #12]
 8009afa:	e7cd      	b.n	8009a98 <__smakebuf_r+0x18>
 8009afc:	080091a9 	.word	0x080091a9

08009b00 <malloc>:
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <malloc+0xc>)
 8009b02:	4601      	mov	r1, r0
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	f000 bd67 	b.w	800a5d8 <_malloc_r>
 8009b0a:	bf00      	nop
 8009b0c:	2000000c 	.word	0x2000000c

08009b10 <__ascii_mbtowc>:
 8009b10:	b082      	sub	sp, #8
 8009b12:	b901      	cbnz	r1, 8009b16 <__ascii_mbtowc+0x6>
 8009b14:	a901      	add	r1, sp, #4
 8009b16:	b142      	cbz	r2, 8009b2a <__ascii_mbtowc+0x1a>
 8009b18:	b14b      	cbz	r3, 8009b2e <__ascii_mbtowc+0x1e>
 8009b1a:	7813      	ldrb	r3, [r2, #0]
 8009b1c:	600b      	str	r3, [r1, #0]
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	1e10      	subs	r0, r2, #0
 8009b22:	bf18      	it	ne
 8009b24:	2001      	movne	r0, #1
 8009b26:	b002      	add	sp, #8
 8009b28:	4770      	bx	lr
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	e7fb      	b.n	8009b26 <__ascii_mbtowc+0x16>
 8009b2e:	f06f 0001 	mvn.w	r0, #1
 8009b32:	e7f8      	b.n	8009b26 <__ascii_mbtowc+0x16>

08009b34 <memcpy>:
 8009b34:	440a      	add	r2, r1
 8009b36:	4291      	cmp	r1, r2
 8009b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b3c:	d100      	bne.n	8009b40 <memcpy+0xc>
 8009b3e:	4770      	bx	lr
 8009b40:	b510      	push	{r4, lr}
 8009b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b4a:	4291      	cmp	r1, r2
 8009b4c:	d1f9      	bne.n	8009b42 <memcpy+0xe>
 8009b4e:	bd10      	pop	{r4, pc}

08009b50 <_Balloc>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	b976      	cbnz	r6, 8009b78 <_Balloc+0x28>
 8009b5a:	2010      	movs	r0, #16
 8009b5c:	f7ff ffd0 	bl	8009b00 <malloc>
 8009b60:	4602      	mov	r2, r0
 8009b62:	6260      	str	r0, [r4, #36]	; 0x24
 8009b64:	b920      	cbnz	r0, 8009b70 <_Balloc+0x20>
 8009b66:	4b18      	ldr	r3, [pc, #96]	; (8009bc8 <_Balloc+0x78>)
 8009b68:	4818      	ldr	r0, [pc, #96]	; (8009bcc <_Balloc+0x7c>)
 8009b6a:	2166      	movs	r1, #102	; 0x66
 8009b6c:	f001 f8ee 	bl	800ad4c <__assert_func>
 8009b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b74:	6006      	str	r6, [r0, #0]
 8009b76:	60c6      	str	r6, [r0, #12]
 8009b78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b7a:	68f3      	ldr	r3, [r6, #12]
 8009b7c:	b183      	cbz	r3, 8009ba0 <_Balloc+0x50>
 8009b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b86:	b9b8      	cbnz	r0, 8009bb8 <_Balloc+0x68>
 8009b88:	2101      	movs	r1, #1
 8009b8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b8e:	1d72      	adds	r2, r6, #5
 8009b90:	0092      	lsls	r2, r2, #2
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 fc9d 	bl	800a4d2 <_calloc_r>
 8009b98:	b160      	cbz	r0, 8009bb4 <_Balloc+0x64>
 8009b9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b9e:	e00e      	b.n	8009bbe <_Balloc+0x6e>
 8009ba0:	2221      	movs	r2, #33	; 0x21
 8009ba2:	2104      	movs	r1, #4
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f000 fc94 	bl	800a4d2 <_calloc_r>
 8009baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bac:	60f0      	str	r0, [r6, #12]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e4      	bne.n	8009b7e <_Balloc+0x2e>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	6802      	ldr	r2, [r0, #0]
 8009bba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bc4:	e7f7      	b.n	8009bb6 <_Balloc+0x66>
 8009bc6:	bf00      	nop
 8009bc8:	0800b216 	.word	0x0800b216
 8009bcc:	0800b378 	.word	0x0800b378

08009bd0 <_Bfree>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	b976      	cbnz	r6, 8009bf8 <_Bfree+0x28>
 8009bda:	2010      	movs	r0, #16
 8009bdc:	f7ff ff90 	bl	8009b00 <malloc>
 8009be0:	4602      	mov	r2, r0
 8009be2:	6268      	str	r0, [r5, #36]	; 0x24
 8009be4:	b920      	cbnz	r0, 8009bf0 <_Bfree+0x20>
 8009be6:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <_Bfree+0x3c>)
 8009be8:	4809      	ldr	r0, [pc, #36]	; (8009c10 <_Bfree+0x40>)
 8009bea:	218a      	movs	r1, #138	; 0x8a
 8009bec:	f001 f8ae 	bl	800ad4c <__assert_func>
 8009bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bf4:	6006      	str	r6, [r0, #0]
 8009bf6:	60c6      	str	r6, [r0, #12]
 8009bf8:	b13c      	cbz	r4, 8009c0a <_Bfree+0x3a>
 8009bfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bfc:	6862      	ldr	r2, [r4, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c04:	6021      	str	r1, [r4, #0]
 8009c06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	0800b216 	.word	0x0800b216
 8009c10:	0800b378 	.word	0x0800b378

08009c14 <__multadd>:
 8009c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	690d      	ldr	r5, [r1, #16]
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	461e      	mov	r6, r3
 8009c20:	f101 0c14 	add.w	ip, r1, #20
 8009c24:	2000      	movs	r0, #0
 8009c26:	f8dc 3000 	ldr.w	r3, [ip]
 8009c2a:	b299      	uxth	r1, r3
 8009c2c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c30:	0c1e      	lsrs	r6, r3, #16
 8009c32:	0c0b      	lsrs	r3, r1, #16
 8009c34:	fb02 3306 	mla	r3, r2, r6, r3
 8009c38:	b289      	uxth	r1, r1
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c40:	4285      	cmp	r5, r0
 8009c42:	f84c 1b04 	str.w	r1, [ip], #4
 8009c46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c4a:	dcec      	bgt.n	8009c26 <__multadd+0x12>
 8009c4c:	b30e      	cbz	r6, 8009c92 <__multadd+0x7e>
 8009c4e:	68a3      	ldr	r3, [r4, #8]
 8009c50:	42ab      	cmp	r3, r5
 8009c52:	dc19      	bgt.n	8009c88 <__multadd+0x74>
 8009c54:	6861      	ldr	r1, [r4, #4]
 8009c56:	4638      	mov	r0, r7
 8009c58:	3101      	adds	r1, #1
 8009c5a:	f7ff ff79 	bl	8009b50 <_Balloc>
 8009c5e:	4680      	mov	r8, r0
 8009c60:	b928      	cbnz	r0, 8009c6e <__multadd+0x5a>
 8009c62:	4602      	mov	r2, r0
 8009c64:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <__multadd+0x84>)
 8009c66:	480d      	ldr	r0, [pc, #52]	; (8009c9c <__multadd+0x88>)
 8009c68:	21b5      	movs	r1, #181	; 0xb5
 8009c6a:	f001 f86f 	bl	800ad4c <__assert_func>
 8009c6e:	6922      	ldr	r2, [r4, #16]
 8009c70:	3202      	adds	r2, #2
 8009c72:	f104 010c 	add.w	r1, r4, #12
 8009c76:	0092      	lsls	r2, r2, #2
 8009c78:	300c      	adds	r0, #12
 8009c7a:	f7ff ff5b 	bl	8009b34 <memcpy>
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ffa5 	bl	8009bd0 <_Bfree>
 8009c86:	4644      	mov	r4, r8
 8009c88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c8c:	3501      	adds	r5, #1
 8009c8e:	615e      	str	r6, [r3, #20]
 8009c90:	6125      	str	r5, [r4, #16]
 8009c92:	4620      	mov	r0, r4
 8009c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c98:	0800b288 	.word	0x0800b288
 8009c9c:	0800b378 	.word	0x0800b378

08009ca0 <__s2b>:
 8009ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	4615      	mov	r5, r2
 8009ca8:	461f      	mov	r7, r3
 8009caa:	2209      	movs	r2, #9
 8009cac:	3308      	adds	r3, #8
 8009cae:	4606      	mov	r6, r0
 8009cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	db09      	blt.n	8009cd0 <__s2b+0x30>
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7ff ff47 	bl	8009b50 <_Balloc>
 8009cc2:	b940      	cbnz	r0, 8009cd6 <__s2b+0x36>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	4b19      	ldr	r3, [pc, #100]	; (8009d2c <__s2b+0x8c>)
 8009cc8:	4819      	ldr	r0, [pc, #100]	; (8009d30 <__s2b+0x90>)
 8009cca:	21ce      	movs	r1, #206	; 0xce
 8009ccc:	f001 f83e 	bl	800ad4c <__assert_func>
 8009cd0:	0052      	lsls	r2, r2, #1
 8009cd2:	3101      	adds	r1, #1
 8009cd4:	e7f0      	b.n	8009cb8 <__s2b+0x18>
 8009cd6:	9b08      	ldr	r3, [sp, #32]
 8009cd8:	6143      	str	r3, [r0, #20]
 8009cda:	2d09      	cmp	r5, #9
 8009cdc:	f04f 0301 	mov.w	r3, #1
 8009ce0:	6103      	str	r3, [r0, #16]
 8009ce2:	dd16      	ble.n	8009d12 <__s2b+0x72>
 8009ce4:	f104 0909 	add.w	r9, r4, #9
 8009ce8:	46c8      	mov	r8, r9
 8009cea:	442c      	add	r4, r5
 8009cec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	3b30      	subs	r3, #48	; 0x30
 8009cf4:	220a      	movs	r2, #10
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ff8c 	bl	8009c14 <__multadd>
 8009cfc:	45a0      	cmp	r8, r4
 8009cfe:	d1f5      	bne.n	8009cec <__s2b+0x4c>
 8009d00:	f1a5 0408 	sub.w	r4, r5, #8
 8009d04:	444c      	add	r4, r9
 8009d06:	1b2d      	subs	r5, r5, r4
 8009d08:	1963      	adds	r3, r4, r5
 8009d0a:	42bb      	cmp	r3, r7
 8009d0c:	db04      	blt.n	8009d18 <__s2b+0x78>
 8009d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d12:	340a      	adds	r4, #10
 8009d14:	2509      	movs	r5, #9
 8009d16:	e7f6      	b.n	8009d06 <__s2b+0x66>
 8009d18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	3b30      	subs	r3, #48	; 0x30
 8009d20:	220a      	movs	r2, #10
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7ff ff76 	bl	8009c14 <__multadd>
 8009d28:	e7ee      	b.n	8009d08 <__s2b+0x68>
 8009d2a:	bf00      	nop
 8009d2c:	0800b288 	.word	0x0800b288
 8009d30:	0800b378 	.word	0x0800b378

08009d34 <__hi0bits>:
 8009d34:	0c03      	lsrs	r3, r0, #16
 8009d36:	041b      	lsls	r3, r3, #16
 8009d38:	b9d3      	cbnz	r3, 8009d70 <__hi0bits+0x3c>
 8009d3a:	0400      	lsls	r0, r0, #16
 8009d3c:	2310      	movs	r3, #16
 8009d3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d42:	bf04      	itt	eq
 8009d44:	0200      	lsleq	r0, r0, #8
 8009d46:	3308      	addeq	r3, #8
 8009d48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d4c:	bf04      	itt	eq
 8009d4e:	0100      	lsleq	r0, r0, #4
 8009d50:	3304      	addeq	r3, #4
 8009d52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d56:	bf04      	itt	eq
 8009d58:	0080      	lsleq	r0, r0, #2
 8009d5a:	3302      	addeq	r3, #2
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	db05      	blt.n	8009d6c <__hi0bits+0x38>
 8009d60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d64:	f103 0301 	add.w	r3, r3, #1
 8009d68:	bf08      	it	eq
 8009d6a:	2320      	moveq	r3, #32
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	4770      	bx	lr
 8009d70:	2300      	movs	r3, #0
 8009d72:	e7e4      	b.n	8009d3e <__hi0bits+0xa>

08009d74 <__lo0bits>:
 8009d74:	6803      	ldr	r3, [r0, #0]
 8009d76:	f013 0207 	ands.w	r2, r3, #7
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	d00b      	beq.n	8009d96 <__lo0bits+0x22>
 8009d7e:	07da      	lsls	r2, r3, #31
 8009d80:	d423      	bmi.n	8009dca <__lo0bits+0x56>
 8009d82:	0798      	lsls	r0, r3, #30
 8009d84:	bf49      	itett	mi
 8009d86:	085b      	lsrmi	r3, r3, #1
 8009d88:	089b      	lsrpl	r3, r3, #2
 8009d8a:	2001      	movmi	r0, #1
 8009d8c:	600b      	strmi	r3, [r1, #0]
 8009d8e:	bf5c      	itt	pl
 8009d90:	600b      	strpl	r3, [r1, #0]
 8009d92:	2002      	movpl	r0, #2
 8009d94:	4770      	bx	lr
 8009d96:	b298      	uxth	r0, r3
 8009d98:	b9a8      	cbnz	r0, 8009dc6 <__lo0bits+0x52>
 8009d9a:	0c1b      	lsrs	r3, r3, #16
 8009d9c:	2010      	movs	r0, #16
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	b90a      	cbnz	r2, 8009da6 <__lo0bits+0x32>
 8009da2:	3008      	adds	r0, #8
 8009da4:	0a1b      	lsrs	r3, r3, #8
 8009da6:	071a      	lsls	r2, r3, #28
 8009da8:	bf04      	itt	eq
 8009daa:	091b      	lsreq	r3, r3, #4
 8009dac:	3004      	addeq	r0, #4
 8009dae:	079a      	lsls	r2, r3, #30
 8009db0:	bf04      	itt	eq
 8009db2:	089b      	lsreq	r3, r3, #2
 8009db4:	3002      	addeq	r0, #2
 8009db6:	07da      	lsls	r2, r3, #31
 8009db8:	d403      	bmi.n	8009dc2 <__lo0bits+0x4e>
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	f100 0001 	add.w	r0, r0, #1
 8009dc0:	d005      	beq.n	8009dce <__lo0bits+0x5a>
 8009dc2:	600b      	str	r3, [r1, #0]
 8009dc4:	4770      	bx	lr
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	e7e9      	b.n	8009d9e <__lo0bits+0x2a>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	4770      	bx	lr
 8009dce:	2020      	movs	r0, #32
 8009dd0:	4770      	bx	lr
	...

08009dd4 <__i2b>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	2101      	movs	r1, #1
 8009dda:	f7ff feb9 	bl	8009b50 <_Balloc>
 8009dde:	4602      	mov	r2, r0
 8009de0:	b928      	cbnz	r0, 8009dee <__i2b+0x1a>
 8009de2:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <__i2b+0x24>)
 8009de4:	4805      	ldr	r0, [pc, #20]	; (8009dfc <__i2b+0x28>)
 8009de6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dea:	f000 ffaf 	bl	800ad4c <__assert_func>
 8009dee:	2301      	movs	r3, #1
 8009df0:	6144      	str	r4, [r0, #20]
 8009df2:	6103      	str	r3, [r0, #16]
 8009df4:	bd10      	pop	{r4, pc}
 8009df6:	bf00      	nop
 8009df8:	0800b288 	.word	0x0800b288
 8009dfc:	0800b378 	.word	0x0800b378

08009e00 <__multiply>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	4691      	mov	r9, r2
 8009e06:	690a      	ldr	r2, [r1, #16]
 8009e08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	bfb8      	it	lt
 8009e10:	460b      	movlt	r3, r1
 8009e12:	460c      	mov	r4, r1
 8009e14:	bfbc      	itt	lt
 8009e16:	464c      	movlt	r4, r9
 8009e18:	4699      	movlt	r9, r3
 8009e1a:	6927      	ldr	r7, [r4, #16]
 8009e1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e20:	68a3      	ldr	r3, [r4, #8]
 8009e22:	6861      	ldr	r1, [r4, #4]
 8009e24:	eb07 060a 	add.w	r6, r7, sl
 8009e28:	42b3      	cmp	r3, r6
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	bfb8      	it	lt
 8009e2e:	3101      	addlt	r1, #1
 8009e30:	f7ff fe8e 	bl	8009b50 <_Balloc>
 8009e34:	b930      	cbnz	r0, 8009e44 <__multiply+0x44>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b44      	ldr	r3, [pc, #272]	; (8009f4c <__multiply+0x14c>)
 8009e3a:	4845      	ldr	r0, [pc, #276]	; (8009f50 <__multiply+0x150>)
 8009e3c:	f240 115d 	movw	r1, #349	; 0x15d
 8009e40:	f000 ff84 	bl	800ad4c <__assert_func>
 8009e44:	f100 0514 	add.w	r5, r0, #20
 8009e48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4543      	cmp	r3, r8
 8009e52:	d321      	bcc.n	8009e98 <__multiply+0x98>
 8009e54:	f104 0314 	add.w	r3, r4, #20
 8009e58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e5c:	f109 0314 	add.w	r3, r9, #20
 8009e60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e64:	9202      	str	r2, [sp, #8]
 8009e66:	1b3a      	subs	r2, r7, r4
 8009e68:	3a15      	subs	r2, #21
 8009e6a:	f022 0203 	bic.w	r2, r2, #3
 8009e6e:	3204      	adds	r2, #4
 8009e70:	f104 0115 	add.w	r1, r4, #21
 8009e74:	428f      	cmp	r7, r1
 8009e76:	bf38      	it	cc
 8009e78:	2204      	movcc	r2, #4
 8009e7a:	9201      	str	r2, [sp, #4]
 8009e7c:	9a02      	ldr	r2, [sp, #8]
 8009e7e:	9303      	str	r3, [sp, #12]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d80c      	bhi.n	8009e9e <__multiply+0x9e>
 8009e84:	2e00      	cmp	r6, #0
 8009e86:	dd03      	ble.n	8009e90 <__multiply+0x90>
 8009e88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d05a      	beq.n	8009f46 <__multiply+0x146>
 8009e90:	6106      	str	r6, [r0, #16]
 8009e92:	b005      	add	sp, #20
 8009e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e98:	f843 2b04 	str.w	r2, [r3], #4
 8009e9c:	e7d8      	b.n	8009e50 <__multiply+0x50>
 8009e9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ea2:	f1ba 0f00 	cmp.w	sl, #0
 8009ea6:	d024      	beq.n	8009ef2 <__multiply+0xf2>
 8009ea8:	f104 0e14 	add.w	lr, r4, #20
 8009eac:	46a9      	mov	r9, r5
 8009eae:	f04f 0c00 	mov.w	ip, #0
 8009eb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009eb6:	f8d9 1000 	ldr.w	r1, [r9]
 8009eba:	fa1f fb82 	uxth.w	fp, r2
 8009ebe:	b289      	uxth	r1, r1
 8009ec0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ec4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8009ecc:	4461      	add	r1, ip
 8009ece:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ed2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009eda:	b289      	uxth	r1, r1
 8009edc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ee0:	4577      	cmp	r7, lr
 8009ee2:	f849 1b04 	str.w	r1, [r9], #4
 8009ee6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eea:	d8e2      	bhi.n	8009eb2 <__multiply+0xb2>
 8009eec:	9a01      	ldr	r2, [sp, #4]
 8009eee:	f845 c002 	str.w	ip, [r5, r2]
 8009ef2:	9a03      	ldr	r2, [sp, #12]
 8009ef4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	f1b9 0f00 	cmp.w	r9, #0
 8009efe:	d020      	beq.n	8009f42 <__multiply+0x142>
 8009f00:	6829      	ldr	r1, [r5, #0]
 8009f02:	f104 0c14 	add.w	ip, r4, #20
 8009f06:	46ae      	mov	lr, r5
 8009f08:	f04f 0a00 	mov.w	sl, #0
 8009f0c:	f8bc b000 	ldrh.w	fp, [ip]
 8009f10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f14:	fb09 220b 	mla	r2, r9, fp, r2
 8009f18:	4492      	add	sl, r2
 8009f1a:	b289      	uxth	r1, r1
 8009f1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f20:	f84e 1b04 	str.w	r1, [lr], #4
 8009f24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f28:	f8be 1000 	ldrh.w	r1, [lr]
 8009f2c:	0c12      	lsrs	r2, r2, #16
 8009f2e:	fb09 1102 	mla	r1, r9, r2, r1
 8009f32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f36:	4567      	cmp	r7, ip
 8009f38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f3c:	d8e6      	bhi.n	8009f0c <__multiply+0x10c>
 8009f3e:	9a01      	ldr	r2, [sp, #4]
 8009f40:	50a9      	str	r1, [r5, r2]
 8009f42:	3504      	adds	r5, #4
 8009f44:	e79a      	b.n	8009e7c <__multiply+0x7c>
 8009f46:	3e01      	subs	r6, #1
 8009f48:	e79c      	b.n	8009e84 <__multiply+0x84>
 8009f4a:	bf00      	nop
 8009f4c:	0800b288 	.word	0x0800b288
 8009f50:	0800b378 	.word	0x0800b378

08009f54 <__pow5mult>:
 8009f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f58:	4615      	mov	r5, r2
 8009f5a:	f012 0203 	ands.w	r2, r2, #3
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	d007      	beq.n	8009f74 <__pow5mult+0x20>
 8009f64:	4c25      	ldr	r4, [pc, #148]	; (8009ffc <__pow5mult+0xa8>)
 8009f66:	3a01      	subs	r2, #1
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f6e:	f7ff fe51 	bl	8009c14 <__multadd>
 8009f72:	4607      	mov	r7, r0
 8009f74:	10ad      	asrs	r5, r5, #2
 8009f76:	d03d      	beq.n	8009ff4 <__pow5mult+0xa0>
 8009f78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f7a:	b97c      	cbnz	r4, 8009f9c <__pow5mult+0x48>
 8009f7c:	2010      	movs	r0, #16
 8009f7e:	f7ff fdbf 	bl	8009b00 <malloc>
 8009f82:	4602      	mov	r2, r0
 8009f84:	6270      	str	r0, [r6, #36]	; 0x24
 8009f86:	b928      	cbnz	r0, 8009f94 <__pow5mult+0x40>
 8009f88:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <__pow5mult+0xac>)
 8009f8a:	481e      	ldr	r0, [pc, #120]	; (800a004 <__pow5mult+0xb0>)
 8009f8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f90:	f000 fedc 	bl	800ad4c <__assert_func>
 8009f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f98:	6004      	str	r4, [r0, #0]
 8009f9a:	60c4      	str	r4, [r0, #12]
 8009f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fa4:	b94c      	cbnz	r4, 8009fba <__pow5mult+0x66>
 8009fa6:	f240 2171 	movw	r1, #625	; 0x271
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ff12 	bl	8009dd4 <__i2b>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	f04f 0900 	mov.w	r9, #0
 8009fbe:	07eb      	lsls	r3, r5, #31
 8009fc0:	d50a      	bpl.n	8009fd8 <__pow5mult+0x84>
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7ff ff1a 	bl	8009e00 <__multiply>
 8009fcc:	4639      	mov	r1, r7
 8009fce:	4680      	mov	r8, r0
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7ff fdfd 	bl	8009bd0 <_Bfree>
 8009fd6:	4647      	mov	r7, r8
 8009fd8:	106d      	asrs	r5, r5, #1
 8009fda:	d00b      	beq.n	8009ff4 <__pow5mult+0xa0>
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	b938      	cbnz	r0, 8009ff0 <__pow5mult+0x9c>
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7ff ff0b 	bl	8009e00 <__multiply>
 8009fea:	6020      	str	r0, [r4, #0]
 8009fec:	f8c0 9000 	str.w	r9, [r0]
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	e7e4      	b.n	8009fbe <__pow5mult+0x6a>
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffa:	bf00      	nop
 8009ffc:	0800b4c8 	.word	0x0800b4c8
 800a000:	0800b216 	.word	0x0800b216
 800a004:	0800b378 	.word	0x0800b378

0800a008 <__lshift>:
 800a008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	460c      	mov	r4, r1
 800a00e:	6849      	ldr	r1, [r1, #4]
 800a010:	6923      	ldr	r3, [r4, #16]
 800a012:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a016:	68a3      	ldr	r3, [r4, #8]
 800a018:	4607      	mov	r7, r0
 800a01a:	4691      	mov	r9, r2
 800a01c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a020:	f108 0601 	add.w	r6, r8, #1
 800a024:	42b3      	cmp	r3, r6
 800a026:	db0b      	blt.n	800a040 <__lshift+0x38>
 800a028:	4638      	mov	r0, r7
 800a02a:	f7ff fd91 	bl	8009b50 <_Balloc>
 800a02e:	4605      	mov	r5, r0
 800a030:	b948      	cbnz	r0, 800a046 <__lshift+0x3e>
 800a032:	4602      	mov	r2, r0
 800a034:	4b2a      	ldr	r3, [pc, #168]	; (800a0e0 <__lshift+0xd8>)
 800a036:	482b      	ldr	r0, [pc, #172]	; (800a0e4 <__lshift+0xdc>)
 800a038:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a03c:	f000 fe86 	bl	800ad4c <__assert_func>
 800a040:	3101      	adds	r1, #1
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	e7ee      	b.n	800a024 <__lshift+0x1c>
 800a046:	2300      	movs	r3, #0
 800a048:	f100 0114 	add.w	r1, r0, #20
 800a04c:	f100 0210 	add.w	r2, r0, #16
 800a050:	4618      	mov	r0, r3
 800a052:	4553      	cmp	r3, sl
 800a054:	db37      	blt.n	800a0c6 <__lshift+0xbe>
 800a056:	6920      	ldr	r0, [r4, #16]
 800a058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a05c:	f104 0314 	add.w	r3, r4, #20
 800a060:	f019 091f 	ands.w	r9, r9, #31
 800a064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a068:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a06c:	d02f      	beq.n	800a0ce <__lshift+0xc6>
 800a06e:	f1c9 0e20 	rsb	lr, r9, #32
 800a072:	468a      	mov	sl, r1
 800a074:	f04f 0c00 	mov.w	ip, #0
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	fa02 f209 	lsl.w	r2, r2, r9
 800a07e:	ea42 020c 	orr.w	r2, r2, ip
 800a082:	f84a 2b04 	str.w	r2, [sl], #4
 800a086:	f853 2b04 	ldr.w	r2, [r3], #4
 800a08a:	4298      	cmp	r0, r3
 800a08c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a090:	d8f2      	bhi.n	800a078 <__lshift+0x70>
 800a092:	1b03      	subs	r3, r0, r4
 800a094:	3b15      	subs	r3, #21
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	3304      	adds	r3, #4
 800a09c:	f104 0215 	add.w	r2, r4, #21
 800a0a0:	4290      	cmp	r0, r2
 800a0a2:	bf38      	it	cc
 800a0a4:	2304      	movcc	r3, #4
 800a0a6:	f841 c003 	str.w	ip, [r1, r3]
 800a0aa:	f1bc 0f00 	cmp.w	ip, #0
 800a0ae:	d001      	beq.n	800a0b4 <__lshift+0xac>
 800a0b0:	f108 0602 	add.w	r6, r8, #2
 800a0b4:	3e01      	subs	r6, #1
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	612e      	str	r6, [r5, #16]
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	f7ff fd88 	bl	8009bd0 <_Bfree>
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	e7c1      	b.n	800a052 <__lshift+0x4a>
 800a0ce:	3904      	subs	r1, #4
 800a0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0d8:	4298      	cmp	r0, r3
 800a0da:	d8f9      	bhi.n	800a0d0 <__lshift+0xc8>
 800a0dc:	e7ea      	b.n	800a0b4 <__lshift+0xac>
 800a0de:	bf00      	nop
 800a0e0:	0800b288 	.word	0x0800b288
 800a0e4:	0800b378 	.word	0x0800b378

0800a0e8 <__mcmp>:
 800a0e8:	b530      	push	{r4, r5, lr}
 800a0ea:	6902      	ldr	r2, [r0, #16]
 800a0ec:	690c      	ldr	r4, [r1, #16]
 800a0ee:	1b12      	subs	r2, r2, r4
 800a0f0:	d10e      	bne.n	800a110 <__mcmp+0x28>
 800a0f2:	f100 0314 	add.w	r3, r0, #20
 800a0f6:	3114      	adds	r1, #20
 800a0f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a100:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a104:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a108:	42a5      	cmp	r5, r4
 800a10a:	d003      	beq.n	800a114 <__mcmp+0x2c>
 800a10c:	d305      	bcc.n	800a11a <__mcmp+0x32>
 800a10e:	2201      	movs	r2, #1
 800a110:	4610      	mov	r0, r2
 800a112:	bd30      	pop	{r4, r5, pc}
 800a114:	4283      	cmp	r3, r0
 800a116:	d3f3      	bcc.n	800a100 <__mcmp+0x18>
 800a118:	e7fa      	b.n	800a110 <__mcmp+0x28>
 800a11a:	f04f 32ff 	mov.w	r2, #4294967295
 800a11e:	e7f7      	b.n	800a110 <__mcmp+0x28>

0800a120 <__mdiff>:
 800a120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	460c      	mov	r4, r1
 800a126:	4606      	mov	r6, r0
 800a128:	4611      	mov	r1, r2
 800a12a:	4620      	mov	r0, r4
 800a12c:	4690      	mov	r8, r2
 800a12e:	f7ff ffdb 	bl	800a0e8 <__mcmp>
 800a132:	1e05      	subs	r5, r0, #0
 800a134:	d110      	bne.n	800a158 <__mdiff+0x38>
 800a136:	4629      	mov	r1, r5
 800a138:	4630      	mov	r0, r6
 800a13a:	f7ff fd09 	bl	8009b50 <_Balloc>
 800a13e:	b930      	cbnz	r0, 800a14e <__mdiff+0x2e>
 800a140:	4b3a      	ldr	r3, [pc, #232]	; (800a22c <__mdiff+0x10c>)
 800a142:	4602      	mov	r2, r0
 800a144:	f240 2132 	movw	r1, #562	; 0x232
 800a148:	4839      	ldr	r0, [pc, #228]	; (800a230 <__mdiff+0x110>)
 800a14a:	f000 fdff 	bl	800ad4c <__assert_func>
 800a14e:	2301      	movs	r3, #1
 800a150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a158:	bfa4      	itt	ge
 800a15a:	4643      	movge	r3, r8
 800a15c:	46a0      	movge	r8, r4
 800a15e:	4630      	mov	r0, r6
 800a160:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a164:	bfa6      	itte	ge
 800a166:	461c      	movge	r4, r3
 800a168:	2500      	movge	r5, #0
 800a16a:	2501      	movlt	r5, #1
 800a16c:	f7ff fcf0 	bl	8009b50 <_Balloc>
 800a170:	b920      	cbnz	r0, 800a17c <__mdiff+0x5c>
 800a172:	4b2e      	ldr	r3, [pc, #184]	; (800a22c <__mdiff+0x10c>)
 800a174:	4602      	mov	r2, r0
 800a176:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a17a:	e7e5      	b.n	800a148 <__mdiff+0x28>
 800a17c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a180:	6926      	ldr	r6, [r4, #16]
 800a182:	60c5      	str	r5, [r0, #12]
 800a184:	f104 0914 	add.w	r9, r4, #20
 800a188:	f108 0514 	add.w	r5, r8, #20
 800a18c:	f100 0e14 	add.w	lr, r0, #20
 800a190:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a194:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a198:	f108 0210 	add.w	r2, r8, #16
 800a19c:	46f2      	mov	sl, lr
 800a19e:	2100      	movs	r1, #0
 800a1a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a1a8:	fa1f f883 	uxth.w	r8, r3
 800a1ac:	fa11 f18b 	uxtah	r1, r1, fp
 800a1b0:	0c1b      	lsrs	r3, r3, #16
 800a1b2:	eba1 0808 	sub.w	r8, r1, r8
 800a1b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1be:	fa1f f888 	uxth.w	r8, r8
 800a1c2:	1419      	asrs	r1, r3, #16
 800a1c4:	454e      	cmp	r6, r9
 800a1c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1ca:	f84a 3b04 	str.w	r3, [sl], #4
 800a1ce:	d8e7      	bhi.n	800a1a0 <__mdiff+0x80>
 800a1d0:	1b33      	subs	r3, r6, r4
 800a1d2:	3b15      	subs	r3, #21
 800a1d4:	f023 0303 	bic.w	r3, r3, #3
 800a1d8:	3304      	adds	r3, #4
 800a1da:	3415      	adds	r4, #21
 800a1dc:	42a6      	cmp	r6, r4
 800a1de:	bf38      	it	cc
 800a1e0:	2304      	movcc	r3, #4
 800a1e2:	441d      	add	r5, r3
 800a1e4:	4473      	add	r3, lr
 800a1e6:	469e      	mov	lr, r3
 800a1e8:	462e      	mov	r6, r5
 800a1ea:	4566      	cmp	r6, ip
 800a1ec:	d30e      	bcc.n	800a20c <__mdiff+0xec>
 800a1ee:	f10c 0203 	add.w	r2, ip, #3
 800a1f2:	1b52      	subs	r2, r2, r5
 800a1f4:	f022 0203 	bic.w	r2, r2, #3
 800a1f8:	3d03      	subs	r5, #3
 800a1fa:	45ac      	cmp	ip, r5
 800a1fc:	bf38      	it	cc
 800a1fe:	2200      	movcc	r2, #0
 800a200:	441a      	add	r2, r3
 800a202:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a206:	b17b      	cbz	r3, 800a228 <__mdiff+0x108>
 800a208:	6107      	str	r7, [r0, #16]
 800a20a:	e7a3      	b.n	800a154 <__mdiff+0x34>
 800a20c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a210:	fa11 f288 	uxtah	r2, r1, r8
 800a214:	1414      	asrs	r4, r2, #16
 800a216:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a21a:	b292      	uxth	r2, r2
 800a21c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a220:	f84e 2b04 	str.w	r2, [lr], #4
 800a224:	1421      	asrs	r1, r4, #16
 800a226:	e7e0      	b.n	800a1ea <__mdiff+0xca>
 800a228:	3f01      	subs	r7, #1
 800a22a:	e7ea      	b.n	800a202 <__mdiff+0xe2>
 800a22c:	0800b288 	.word	0x0800b288
 800a230:	0800b378 	.word	0x0800b378

0800a234 <__ulp>:
 800a234:	b082      	sub	sp, #8
 800a236:	ed8d 0b00 	vstr	d0, [sp]
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	4912      	ldr	r1, [pc, #72]	; (800a288 <__ulp+0x54>)
 800a23e:	4019      	ands	r1, r3
 800a240:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a244:	2900      	cmp	r1, #0
 800a246:	dd05      	ble.n	800a254 <__ulp+0x20>
 800a248:	2200      	movs	r2, #0
 800a24a:	460b      	mov	r3, r1
 800a24c:	ec43 2b10 	vmov	d0, r2, r3
 800a250:	b002      	add	sp, #8
 800a252:	4770      	bx	lr
 800a254:	4249      	negs	r1, r1
 800a256:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a25a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	da04      	bge.n	800a272 <__ulp+0x3e>
 800a268:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a26c:	fa41 f300 	asr.w	r3, r1, r0
 800a270:	e7ec      	b.n	800a24c <__ulp+0x18>
 800a272:	f1a0 0114 	sub.w	r1, r0, #20
 800a276:	291e      	cmp	r1, #30
 800a278:	bfda      	itte	le
 800a27a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a27e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a282:	2101      	movgt	r1, #1
 800a284:	460a      	mov	r2, r1
 800a286:	e7e1      	b.n	800a24c <__ulp+0x18>
 800a288:	7ff00000 	.word	0x7ff00000

0800a28c <__b2d>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	6905      	ldr	r5, [r0, #16]
 800a290:	f100 0714 	add.w	r7, r0, #20
 800a294:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a298:	1f2e      	subs	r6, r5, #4
 800a29a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7ff fd48 	bl	8009d34 <__hi0bits>
 800a2a4:	f1c0 0320 	rsb	r3, r0, #32
 800a2a8:	280a      	cmp	r0, #10
 800a2aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a328 <__b2d+0x9c>
 800a2ae:	600b      	str	r3, [r1, #0]
 800a2b0:	dc14      	bgt.n	800a2dc <__b2d+0x50>
 800a2b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a2b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a2ba:	42b7      	cmp	r7, r6
 800a2bc:	ea41 030c 	orr.w	r3, r1, ip
 800a2c0:	bf34      	ite	cc
 800a2c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2c6:	2100      	movcs	r1, #0
 800a2c8:	3015      	adds	r0, #21
 800a2ca:	fa04 f000 	lsl.w	r0, r4, r0
 800a2ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800a2d2:	ea40 0201 	orr.w	r2, r0, r1
 800a2d6:	ec43 2b10 	vmov	d0, r2, r3
 800a2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2dc:	42b7      	cmp	r7, r6
 800a2de:	bf3a      	itte	cc
 800a2e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800a2e8:	2100      	movcs	r1, #0
 800a2ea:	380b      	subs	r0, #11
 800a2ec:	d017      	beq.n	800a31e <__b2d+0x92>
 800a2ee:	f1c0 0c20 	rsb	ip, r0, #32
 800a2f2:	fa04 f500 	lsl.w	r5, r4, r0
 800a2f6:	42be      	cmp	r6, r7
 800a2f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a2fc:	ea45 0504 	orr.w	r5, r5, r4
 800a300:	bf8c      	ite	hi
 800a302:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a306:	2400      	movls	r4, #0
 800a308:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a30c:	fa01 f000 	lsl.w	r0, r1, r0
 800a310:	fa24 f40c 	lsr.w	r4, r4, ip
 800a314:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a318:	ea40 0204 	orr.w	r2, r0, r4
 800a31c:	e7db      	b.n	800a2d6 <__b2d+0x4a>
 800a31e:	ea44 030c 	orr.w	r3, r4, ip
 800a322:	460a      	mov	r2, r1
 800a324:	e7d7      	b.n	800a2d6 <__b2d+0x4a>
 800a326:	bf00      	nop
 800a328:	3ff00000 	.word	0x3ff00000

0800a32c <__d2b>:
 800a32c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a330:	4689      	mov	r9, r1
 800a332:	2101      	movs	r1, #1
 800a334:	ec57 6b10 	vmov	r6, r7, d0
 800a338:	4690      	mov	r8, r2
 800a33a:	f7ff fc09 	bl	8009b50 <_Balloc>
 800a33e:	4604      	mov	r4, r0
 800a340:	b930      	cbnz	r0, 800a350 <__d2b+0x24>
 800a342:	4602      	mov	r2, r0
 800a344:	4b25      	ldr	r3, [pc, #148]	; (800a3dc <__d2b+0xb0>)
 800a346:	4826      	ldr	r0, [pc, #152]	; (800a3e0 <__d2b+0xb4>)
 800a348:	f240 310a 	movw	r1, #778	; 0x30a
 800a34c:	f000 fcfe 	bl	800ad4c <__assert_func>
 800a350:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a354:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a358:	bb35      	cbnz	r5, 800a3a8 <__d2b+0x7c>
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	d028      	beq.n	800a3b2 <__d2b+0x86>
 800a360:	4668      	mov	r0, sp
 800a362:	9600      	str	r6, [sp, #0]
 800a364:	f7ff fd06 	bl	8009d74 <__lo0bits>
 800a368:	9900      	ldr	r1, [sp, #0]
 800a36a:	b300      	cbz	r0, 800a3ae <__d2b+0x82>
 800a36c:	9a01      	ldr	r2, [sp, #4]
 800a36e:	f1c0 0320 	rsb	r3, r0, #32
 800a372:	fa02 f303 	lsl.w	r3, r2, r3
 800a376:	430b      	orrs	r3, r1
 800a378:	40c2      	lsrs	r2, r0
 800a37a:	6163      	str	r3, [r4, #20]
 800a37c:	9201      	str	r2, [sp, #4]
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	61a3      	str	r3, [r4, #24]
 800a382:	2b00      	cmp	r3, #0
 800a384:	bf14      	ite	ne
 800a386:	2202      	movne	r2, #2
 800a388:	2201      	moveq	r2, #1
 800a38a:	6122      	str	r2, [r4, #16]
 800a38c:	b1d5      	cbz	r5, 800a3c4 <__d2b+0x98>
 800a38e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a392:	4405      	add	r5, r0
 800a394:	f8c9 5000 	str.w	r5, [r9]
 800a398:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a39c:	f8c8 0000 	str.w	r0, [r8]
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	b003      	add	sp, #12
 800a3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3ac:	e7d5      	b.n	800a35a <__d2b+0x2e>
 800a3ae:	6161      	str	r1, [r4, #20]
 800a3b0:	e7e5      	b.n	800a37e <__d2b+0x52>
 800a3b2:	a801      	add	r0, sp, #4
 800a3b4:	f7ff fcde 	bl	8009d74 <__lo0bits>
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	6163      	str	r3, [r4, #20]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	6122      	str	r2, [r4, #16]
 800a3c0:	3020      	adds	r0, #32
 800a3c2:	e7e3      	b.n	800a38c <__d2b+0x60>
 800a3c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3cc:	f8c9 0000 	str.w	r0, [r9]
 800a3d0:	6918      	ldr	r0, [r3, #16]
 800a3d2:	f7ff fcaf 	bl	8009d34 <__hi0bits>
 800a3d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3da:	e7df      	b.n	800a39c <__d2b+0x70>
 800a3dc:	0800b288 	.word	0x0800b288
 800a3e0:	0800b378 	.word	0x0800b378

0800a3e4 <__ratio>:
 800a3e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	4688      	mov	r8, r1
 800a3ea:	4669      	mov	r1, sp
 800a3ec:	4681      	mov	r9, r0
 800a3ee:	f7ff ff4d 	bl	800a28c <__b2d>
 800a3f2:	a901      	add	r1, sp, #4
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	ec55 4b10 	vmov	r4, r5, d0
 800a3fa:	f7ff ff47 	bl	800a28c <__b2d>
 800a3fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a402:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a406:	eba3 0c02 	sub.w	ip, r3, r2
 800a40a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a40e:	1a9b      	subs	r3, r3, r2
 800a410:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a414:	ec51 0b10 	vmov	r0, r1, d0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bfd6      	itet	le
 800a41c:	460a      	movle	r2, r1
 800a41e:	462a      	movgt	r2, r5
 800a420:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a424:	468b      	mov	fp, r1
 800a426:	462f      	mov	r7, r5
 800a428:	bfd4      	ite	le
 800a42a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a42e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a432:	4620      	mov	r0, r4
 800a434:	ee10 2a10 	vmov	r2, s0
 800a438:	465b      	mov	r3, fp
 800a43a:	4639      	mov	r1, r7
 800a43c:	f7f6 fa16 	bl	800086c <__aeabi_ddiv>
 800a440:	ec41 0b10 	vmov	d0, r0, r1
 800a444:	b003      	add	sp, #12
 800a446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a44a <__copybits>:
 800a44a:	3901      	subs	r1, #1
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	1149      	asrs	r1, r1, #5
 800a450:	6914      	ldr	r4, [r2, #16]
 800a452:	3101      	adds	r1, #1
 800a454:	f102 0314 	add.w	r3, r2, #20
 800a458:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a45c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a460:	1f05      	subs	r5, r0, #4
 800a462:	42a3      	cmp	r3, r4
 800a464:	d30c      	bcc.n	800a480 <__copybits+0x36>
 800a466:	1aa3      	subs	r3, r4, r2
 800a468:	3b11      	subs	r3, #17
 800a46a:	f023 0303 	bic.w	r3, r3, #3
 800a46e:	3211      	adds	r2, #17
 800a470:	42a2      	cmp	r2, r4
 800a472:	bf88      	it	hi
 800a474:	2300      	movhi	r3, #0
 800a476:	4418      	add	r0, r3
 800a478:	2300      	movs	r3, #0
 800a47a:	4288      	cmp	r0, r1
 800a47c:	d305      	bcc.n	800a48a <__copybits+0x40>
 800a47e:	bd70      	pop	{r4, r5, r6, pc}
 800a480:	f853 6b04 	ldr.w	r6, [r3], #4
 800a484:	f845 6f04 	str.w	r6, [r5, #4]!
 800a488:	e7eb      	b.n	800a462 <__copybits+0x18>
 800a48a:	f840 3b04 	str.w	r3, [r0], #4
 800a48e:	e7f4      	b.n	800a47a <__copybits+0x30>

0800a490 <__any_on>:
 800a490:	f100 0214 	add.w	r2, r0, #20
 800a494:	6900      	ldr	r0, [r0, #16]
 800a496:	114b      	asrs	r3, r1, #5
 800a498:	4298      	cmp	r0, r3
 800a49a:	b510      	push	{r4, lr}
 800a49c:	db11      	blt.n	800a4c2 <__any_on+0x32>
 800a49e:	dd0a      	ble.n	800a4b6 <__any_on+0x26>
 800a4a0:	f011 011f 	ands.w	r1, r1, #31
 800a4a4:	d007      	beq.n	800a4b6 <__any_on+0x26>
 800a4a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4aa:	fa24 f001 	lsr.w	r0, r4, r1
 800a4ae:	fa00 f101 	lsl.w	r1, r0, r1
 800a4b2:	428c      	cmp	r4, r1
 800a4b4:	d10b      	bne.n	800a4ce <__any_on+0x3e>
 800a4b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d803      	bhi.n	800a4c6 <__any_on+0x36>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	bd10      	pop	{r4, pc}
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	e7f7      	b.n	800a4b6 <__any_on+0x26>
 800a4c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4ca:	2900      	cmp	r1, #0
 800a4cc:	d0f5      	beq.n	800a4ba <__any_on+0x2a>
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	e7f6      	b.n	800a4c0 <__any_on+0x30>

0800a4d2 <_calloc_r>:
 800a4d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4d4:	fba1 2402 	umull	r2, r4, r1, r2
 800a4d8:	b94c      	cbnz	r4, 800a4ee <_calloc_r+0x1c>
 800a4da:	4611      	mov	r1, r2
 800a4dc:	9201      	str	r2, [sp, #4]
 800a4de:	f000 f87b 	bl	800a5d8 <_malloc_r>
 800a4e2:	9a01      	ldr	r2, [sp, #4]
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	b930      	cbnz	r0, 800a4f6 <_calloc_r+0x24>
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	b003      	add	sp, #12
 800a4ec:	bd30      	pop	{r4, r5, pc}
 800a4ee:	220c      	movs	r2, #12
 800a4f0:	6002      	str	r2, [r0, #0]
 800a4f2:	2500      	movs	r5, #0
 800a4f4:	e7f8      	b.n	800a4e8 <_calloc_r+0x16>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	f7fc f854 	bl	80065a4 <memset>
 800a4fc:	e7f4      	b.n	800a4e8 <_calloc_r+0x16>
	...

0800a500 <_free_r>:
 800a500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a502:	2900      	cmp	r1, #0
 800a504:	d044      	beq.n	800a590 <_free_r+0x90>
 800a506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a50a:	9001      	str	r0, [sp, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f1a1 0404 	sub.w	r4, r1, #4
 800a512:	bfb8      	it	lt
 800a514:	18e4      	addlt	r4, r4, r3
 800a516:	f000 fca7 	bl	800ae68 <__malloc_lock>
 800a51a:	4a1e      	ldr	r2, [pc, #120]	; (800a594 <_free_r+0x94>)
 800a51c:	9801      	ldr	r0, [sp, #4]
 800a51e:	6813      	ldr	r3, [r2, #0]
 800a520:	b933      	cbnz	r3, 800a530 <_free_r+0x30>
 800a522:	6063      	str	r3, [r4, #4]
 800a524:	6014      	str	r4, [r2, #0]
 800a526:	b003      	add	sp, #12
 800a528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a52c:	f000 bca2 	b.w	800ae74 <__malloc_unlock>
 800a530:	42a3      	cmp	r3, r4
 800a532:	d908      	bls.n	800a546 <_free_r+0x46>
 800a534:	6825      	ldr	r5, [r4, #0]
 800a536:	1961      	adds	r1, r4, r5
 800a538:	428b      	cmp	r3, r1
 800a53a:	bf01      	itttt	eq
 800a53c:	6819      	ldreq	r1, [r3, #0]
 800a53e:	685b      	ldreq	r3, [r3, #4]
 800a540:	1949      	addeq	r1, r1, r5
 800a542:	6021      	streq	r1, [r4, #0]
 800a544:	e7ed      	b.n	800a522 <_free_r+0x22>
 800a546:	461a      	mov	r2, r3
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	b10b      	cbz	r3, 800a550 <_free_r+0x50>
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	d9fa      	bls.n	800a546 <_free_r+0x46>
 800a550:	6811      	ldr	r1, [r2, #0]
 800a552:	1855      	adds	r5, r2, r1
 800a554:	42a5      	cmp	r5, r4
 800a556:	d10b      	bne.n	800a570 <_free_r+0x70>
 800a558:	6824      	ldr	r4, [r4, #0]
 800a55a:	4421      	add	r1, r4
 800a55c:	1854      	adds	r4, r2, r1
 800a55e:	42a3      	cmp	r3, r4
 800a560:	6011      	str	r1, [r2, #0]
 800a562:	d1e0      	bne.n	800a526 <_free_r+0x26>
 800a564:	681c      	ldr	r4, [r3, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	6053      	str	r3, [r2, #4]
 800a56a:	4421      	add	r1, r4
 800a56c:	6011      	str	r1, [r2, #0]
 800a56e:	e7da      	b.n	800a526 <_free_r+0x26>
 800a570:	d902      	bls.n	800a578 <_free_r+0x78>
 800a572:	230c      	movs	r3, #12
 800a574:	6003      	str	r3, [r0, #0]
 800a576:	e7d6      	b.n	800a526 <_free_r+0x26>
 800a578:	6825      	ldr	r5, [r4, #0]
 800a57a:	1961      	adds	r1, r4, r5
 800a57c:	428b      	cmp	r3, r1
 800a57e:	bf04      	itt	eq
 800a580:	6819      	ldreq	r1, [r3, #0]
 800a582:	685b      	ldreq	r3, [r3, #4]
 800a584:	6063      	str	r3, [r4, #4]
 800a586:	bf04      	itt	eq
 800a588:	1949      	addeq	r1, r1, r5
 800a58a:	6021      	streq	r1, [r4, #0]
 800a58c:	6054      	str	r4, [r2, #4]
 800a58e:	e7ca      	b.n	800a526 <_free_r+0x26>
 800a590:	b003      	add	sp, #12
 800a592:	bd30      	pop	{r4, r5, pc}
 800a594:	200007ec 	.word	0x200007ec

0800a598 <sbrk_aligned>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	4e0e      	ldr	r6, [pc, #56]	; (800a5d4 <sbrk_aligned+0x3c>)
 800a59c:	460c      	mov	r4, r1
 800a59e:	6831      	ldr	r1, [r6, #0]
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	b911      	cbnz	r1, 800a5aa <sbrk_aligned+0x12>
 800a5a4:	f000 fb4c 	bl	800ac40 <_sbrk_r>
 800a5a8:	6030      	str	r0, [r6, #0]
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f000 fb47 	bl	800ac40 <_sbrk_r>
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	d00a      	beq.n	800a5cc <sbrk_aligned+0x34>
 800a5b6:	1cc4      	adds	r4, r0, #3
 800a5b8:	f024 0403 	bic.w	r4, r4, #3
 800a5bc:	42a0      	cmp	r0, r4
 800a5be:	d007      	beq.n	800a5d0 <sbrk_aligned+0x38>
 800a5c0:	1a21      	subs	r1, r4, r0
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 fb3c 	bl	800ac40 <_sbrk_r>
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d101      	bne.n	800a5d0 <sbrk_aligned+0x38>
 800a5cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
 800a5d4:	200007f0 	.word	0x200007f0

0800a5d8 <_malloc_r>:
 800a5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5dc:	1ccd      	adds	r5, r1, #3
 800a5de:	f025 0503 	bic.w	r5, r5, #3
 800a5e2:	3508      	adds	r5, #8
 800a5e4:	2d0c      	cmp	r5, #12
 800a5e6:	bf38      	it	cc
 800a5e8:	250c      	movcc	r5, #12
 800a5ea:	2d00      	cmp	r5, #0
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	db01      	blt.n	800a5f4 <_malloc_r+0x1c>
 800a5f0:	42a9      	cmp	r1, r5
 800a5f2:	d905      	bls.n	800a600 <_malloc_r+0x28>
 800a5f4:	230c      	movs	r3, #12
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	2600      	movs	r6, #0
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a600:	4e2e      	ldr	r6, [pc, #184]	; (800a6bc <_malloc_r+0xe4>)
 800a602:	f000 fc31 	bl	800ae68 <__malloc_lock>
 800a606:	6833      	ldr	r3, [r6, #0]
 800a608:	461c      	mov	r4, r3
 800a60a:	bb34      	cbnz	r4, 800a65a <_malloc_r+0x82>
 800a60c:	4629      	mov	r1, r5
 800a60e:	4638      	mov	r0, r7
 800a610:	f7ff ffc2 	bl	800a598 <sbrk_aligned>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	4604      	mov	r4, r0
 800a618:	d14d      	bne.n	800a6b6 <_malloc_r+0xde>
 800a61a:	6834      	ldr	r4, [r6, #0]
 800a61c:	4626      	mov	r6, r4
 800a61e:	2e00      	cmp	r6, #0
 800a620:	d140      	bne.n	800a6a4 <_malloc_r+0xcc>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	4631      	mov	r1, r6
 800a626:	4638      	mov	r0, r7
 800a628:	eb04 0803 	add.w	r8, r4, r3
 800a62c:	f000 fb08 	bl	800ac40 <_sbrk_r>
 800a630:	4580      	cmp	r8, r0
 800a632:	d13a      	bne.n	800a6aa <_malloc_r+0xd2>
 800a634:	6821      	ldr	r1, [r4, #0]
 800a636:	3503      	adds	r5, #3
 800a638:	1a6d      	subs	r5, r5, r1
 800a63a:	f025 0503 	bic.w	r5, r5, #3
 800a63e:	3508      	adds	r5, #8
 800a640:	2d0c      	cmp	r5, #12
 800a642:	bf38      	it	cc
 800a644:	250c      	movcc	r5, #12
 800a646:	4629      	mov	r1, r5
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff ffa5 	bl	800a598 <sbrk_aligned>
 800a64e:	3001      	adds	r0, #1
 800a650:	d02b      	beq.n	800a6aa <_malloc_r+0xd2>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	442b      	add	r3, r5
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	e00e      	b.n	800a678 <_malloc_r+0xa0>
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	1b52      	subs	r2, r2, r5
 800a65e:	d41e      	bmi.n	800a69e <_malloc_r+0xc6>
 800a660:	2a0b      	cmp	r2, #11
 800a662:	d916      	bls.n	800a692 <_malloc_r+0xba>
 800a664:	1961      	adds	r1, r4, r5
 800a666:	42a3      	cmp	r3, r4
 800a668:	6025      	str	r5, [r4, #0]
 800a66a:	bf18      	it	ne
 800a66c:	6059      	strne	r1, [r3, #4]
 800a66e:	6863      	ldr	r3, [r4, #4]
 800a670:	bf08      	it	eq
 800a672:	6031      	streq	r1, [r6, #0]
 800a674:	5162      	str	r2, [r4, r5]
 800a676:	604b      	str	r3, [r1, #4]
 800a678:	4638      	mov	r0, r7
 800a67a:	f104 060b 	add.w	r6, r4, #11
 800a67e:	f000 fbf9 	bl	800ae74 <__malloc_unlock>
 800a682:	f026 0607 	bic.w	r6, r6, #7
 800a686:	1d23      	adds	r3, r4, #4
 800a688:	1af2      	subs	r2, r6, r3
 800a68a:	d0b6      	beq.n	800a5fa <_malloc_r+0x22>
 800a68c:	1b9b      	subs	r3, r3, r6
 800a68e:	50a3      	str	r3, [r4, r2]
 800a690:	e7b3      	b.n	800a5fa <_malloc_r+0x22>
 800a692:	6862      	ldr	r2, [r4, #4]
 800a694:	42a3      	cmp	r3, r4
 800a696:	bf0c      	ite	eq
 800a698:	6032      	streq	r2, [r6, #0]
 800a69a:	605a      	strne	r2, [r3, #4]
 800a69c:	e7ec      	b.n	800a678 <_malloc_r+0xa0>
 800a69e:	4623      	mov	r3, r4
 800a6a0:	6864      	ldr	r4, [r4, #4]
 800a6a2:	e7b2      	b.n	800a60a <_malloc_r+0x32>
 800a6a4:	4634      	mov	r4, r6
 800a6a6:	6876      	ldr	r6, [r6, #4]
 800a6a8:	e7b9      	b.n	800a61e <_malloc_r+0x46>
 800a6aa:	230c      	movs	r3, #12
 800a6ac:	603b      	str	r3, [r7, #0]
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f000 fbe0 	bl	800ae74 <__malloc_unlock>
 800a6b4:	e7a1      	b.n	800a5fa <_malloc_r+0x22>
 800a6b6:	6025      	str	r5, [r4, #0]
 800a6b8:	e7de      	b.n	800a678 <_malloc_r+0xa0>
 800a6ba:	bf00      	nop
 800a6bc:	200007ec 	.word	0x200007ec

0800a6c0 <__ssputs_r>:
 800a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	688e      	ldr	r6, [r1, #8]
 800a6c6:	429e      	cmp	r6, r3
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	4690      	mov	r8, r2
 800a6ce:	461f      	mov	r7, r3
 800a6d0:	d838      	bhi.n	800a744 <__ssputs_r+0x84>
 800a6d2:	898a      	ldrh	r2, [r1, #12]
 800a6d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6d8:	d032      	beq.n	800a740 <__ssputs_r+0x80>
 800a6da:	6825      	ldr	r5, [r4, #0]
 800a6dc:	6909      	ldr	r1, [r1, #16]
 800a6de:	eba5 0901 	sub.w	r9, r5, r1
 800a6e2:	6965      	ldr	r5, [r4, #20]
 800a6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	444b      	add	r3, r9
 800a6f0:	106d      	asrs	r5, r5, #1
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	bf38      	it	cc
 800a6f6:	461d      	movcc	r5, r3
 800a6f8:	0553      	lsls	r3, r2, #21
 800a6fa:	d531      	bpl.n	800a760 <__ssputs_r+0xa0>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	f7ff ff6b 	bl	800a5d8 <_malloc_r>
 800a702:	4606      	mov	r6, r0
 800a704:	b950      	cbnz	r0, 800a71c <__ssputs_r+0x5c>
 800a706:	230c      	movs	r3, #12
 800a708:	f8ca 3000 	str.w	r3, [sl]
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a712:	81a3      	strh	r3, [r4, #12]
 800a714:	f04f 30ff 	mov.w	r0, #4294967295
 800a718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71c:	6921      	ldr	r1, [r4, #16]
 800a71e:	464a      	mov	r2, r9
 800a720:	f7ff fa08 	bl	8009b34 <memcpy>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a72e:	81a3      	strh	r3, [r4, #12]
 800a730:	6126      	str	r6, [r4, #16]
 800a732:	6165      	str	r5, [r4, #20]
 800a734:	444e      	add	r6, r9
 800a736:	eba5 0509 	sub.w	r5, r5, r9
 800a73a:	6026      	str	r6, [r4, #0]
 800a73c:	60a5      	str	r5, [r4, #8]
 800a73e:	463e      	mov	r6, r7
 800a740:	42be      	cmp	r6, r7
 800a742:	d900      	bls.n	800a746 <__ssputs_r+0x86>
 800a744:	463e      	mov	r6, r7
 800a746:	6820      	ldr	r0, [r4, #0]
 800a748:	4632      	mov	r2, r6
 800a74a:	4641      	mov	r1, r8
 800a74c:	f000 fb72 	bl	800ae34 <memmove>
 800a750:	68a3      	ldr	r3, [r4, #8]
 800a752:	1b9b      	subs	r3, r3, r6
 800a754:	60a3      	str	r3, [r4, #8]
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	4433      	add	r3, r6
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	2000      	movs	r0, #0
 800a75e:	e7db      	b.n	800a718 <__ssputs_r+0x58>
 800a760:	462a      	mov	r2, r5
 800a762:	f000 fb8d 	bl	800ae80 <_realloc_r>
 800a766:	4606      	mov	r6, r0
 800a768:	2800      	cmp	r0, #0
 800a76a:	d1e1      	bne.n	800a730 <__ssputs_r+0x70>
 800a76c:	6921      	ldr	r1, [r4, #16]
 800a76e:	4650      	mov	r0, sl
 800a770:	f7ff fec6 	bl	800a500 <_free_r>
 800a774:	e7c7      	b.n	800a706 <__ssputs_r+0x46>
	...

0800a778 <_svfiprintf_r>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	4698      	mov	r8, r3
 800a77e:	898b      	ldrh	r3, [r1, #12]
 800a780:	061b      	lsls	r3, r3, #24
 800a782:	b09d      	sub	sp, #116	; 0x74
 800a784:	4607      	mov	r7, r0
 800a786:	460d      	mov	r5, r1
 800a788:	4614      	mov	r4, r2
 800a78a:	d50e      	bpl.n	800a7aa <_svfiprintf_r+0x32>
 800a78c:	690b      	ldr	r3, [r1, #16]
 800a78e:	b963      	cbnz	r3, 800a7aa <_svfiprintf_r+0x32>
 800a790:	2140      	movs	r1, #64	; 0x40
 800a792:	f7ff ff21 	bl	800a5d8 <_malloc_r>
 800a796:	6028      	str	r0, [r5, #0]
 800a798:	6128      	str	r0, [r5, #16]
 800a79a:	b920      	cbnz	r0, 800a7a6 <_svfiprintf_r+0x2e>
 800a79c:	230c      	movs	r3, #12
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a4:	e0d1      	b.n	800a94a <_svfiprintf_r+0x1d2>
 800a7a6:	2340      	movs	r3, #64	; 0x40
 800a7a8:	616b      	str	r3, [r5, #20]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ae:	2320      	movs	r3, #32
 800a7b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b8:	2330      	movs	r3, #48	; 0x30
 800a7ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a964 <_svfiprintf_r+0x1ec>
 800a7be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c2:	f04f 0901 	mov.w	r9, #1
 800a7c6:	4623      	mov	r3, r4
 800a7c8:	469a      	mov	sl, r3
 800a7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ce:	b10a      	cbz	r2, 800a7d4 <_svfiprintf_r+0x5c>
 800a7d0:	2a25      	cmp	r2, #37	; 0x25
 800a7d2:	d1f9      	bne.n	800a7c8 <_svfiprintf_r+0x50>
 800a7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d8:	d00b      	beq.n	800a7f2 <_svfiprintf_r+0x7a>
 800a7da:	465b      	mov	r3, fp
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff ff6d 	bl	800a6c0 <__ssputs_r>
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f000 80aa 	beq.w	800a940 <_svfiprintf_r+0x1c8>
 800a7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ee:	445a      	add	r2, fp
 800a7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 80a2 	beq.w	800a940 <_svfiprintf_r+0x1c8>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a806:	f10a 0a01 	add.w	sl, sl, #1
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a812:	931a      	str	r3, [sp, #104]	; 0x68
 800a814:	4654      	mov	r4, sl
 800a816:	2205      	movs	r2, #5
 800a818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81c:	4851      	ldr	r0, [pc, #324]	; (800a964 <_svfiprintf_r+0x1ec>)
 800a81e:	f7f5 fcef 	bl	8000200 <memchr>
 800a822:	9a04      	ldr	r2, [sp, #16]
 800a824:	b9d8      	cbnz	r0, 800a85e <_svfiprintf_r+0xe6>
 800a826:	06d0      	lsls	r0, r2, #27
 800a828:	bf44      	itt	mi
 800a82a:	2320      	movmi	r3, #32
 800a82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a830:	0711      	lsls	r1, r2, #28
 800a832:	bf44      	itt	mi
 800a834:	232b      	movmi	r3, #43	; 0x2b
 800a836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a83a:	f89a 3000 	ldrb.w	r3, [sl]
 800a83e:	2b2a      	cmp	r3, #42	; 0x2a
 800a840:	d015      	beq.n	800a86e <_svfiprintf_r+0xf6>
 800a842:	9a07      	ldr	r2, [sp, #28]
 800a844:	4654      	mov	r4, sl
 800a846:	2000      	movs	r0, #0
 800a848:	f04f 0c0a 	mov.w	ip, #10
 800a84c:	4621      	mov	r1, r4
 800a84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a852:	3b30      	subs	r3, #48	; 0x30
 800a854:	2b09      	cmp	r3, #9
 800a856:	d94e      	bls.n	800a8f6 <_svfiprintf_r+0x17e>
 800a858:	b1b0      	cbz	r0, 800a888 <_svfiprintf_r+0x110>
 800a85a:	9207      	str	r2, [sp, #28]
 800a85c:	e014      	b.n	800a888 <_svfiprintf_r+0x110>
 800a85e:	eba0 0308 	sub.w	r3, r0, r8
 800a862:	fa09 f303 	lsl.w	r3, r9, r3
 800a866:	4313      	orrs	r3, r2
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	46a2      	mov	sl, r4
 800a86c:	e7d2      	b.n	800a814 <_svfiprintf_r+0x9c>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	1d19      	adds	r1, r3, #4
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	9103      	str	r1, [sp, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	bfbb      	ittet	lt
 800a87a:	425b      	neglt	r3, r3
 800a87c:	f042 0202 	orrlt.w	r2, r2, #2
 800a880:	9307      	strge	r3, [sp, #28]
 800a882:	9307      	strlt	r3, [sp, #28]
 800a884:	bfb8      	it	lt
 800a886:	9204      	strlt	r2, [sp, #16]
 800a888:	7823      	ldrb	r3, [r4, #0]
 800a88a:	2b2e      	cmp	r3, #46	; 0x2e
 800a88c:	d10c      	bne.n	800a8a8 <_svfiprintf_r+0x130>
 800a88e:	7863      	ldrb	r3, [r4, #1]
 800a890:	2b2a      	cmp	r3, #42	; 0x2a
 800a892:	d135      	bne.n	800a900 <_svfiprintf_r+0x188>
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	1d1a      	adds	r2, r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	9203      	str	r2, [sp, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	bfb8      	it	lt
 800a8a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a4:	3402      	adds	r4, #2
 800a8a6:	9305      	str	r3, [sp, #20]
 800a8a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a974 <_svfiprintf_r+0x1fc>
 800a8ac:	7821      	ldrb	r1, [r4, #0]
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	f7f5 fca5 	bl	8000200 <memchr>
 800a8b6:	b140      	cbz	r0, 800a8ca <_svfiprintf_r+0x152>
 800a8b8:	2340      	movs	r3, #64	; 0x40
 800a8ba:	eba0 000a 	sub.w	r0, r0, sl
 800a8be:	fa03 f000 	lsl.w	r0, r3, r0
 800a8c2:	9b04      	ldr	r3, [sp, #16]
 800a8c4:	4303      	orrs	r3, r0
 800a8c6:	3401      	adds	r4, #1
 800a8c8:	9304      	str	r3, [sp, #16]
 800a8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ce:	4826      	ldr	r0, [pc, #152]	; (800a968 <_svfiprintf_r+0x1f0>)
 800a8d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d4:	2206      	movs	r2, #6
 800a8d6:	f7f5 fc93 	bl	8000200 <memchr>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d038      	beq.n	800a950 <_svfiprintf_r+0x1d8>
 800a8de:	4b23      	ldr	r3, [pc, #140]	; (800a96c <_svfiprintf_r+0x1f4>)
 800a8e0:	bb1b      	cbnz	r3, 800a92a <_svfiprintf_r+0x1b2>
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	3307      	adds	r3, #7
 800a8e6:	f023 0307 	bic.w	r3, r3, #7
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	9303      	str	r3, [sp, #12]
 800a8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f0:	4433      	add	r3, r6
 800a8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f4:	e767      	b.n	800a7c6 <_svfiprintf_r+0x4e>
 800a8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	2001      	movs	r0, #1
 800a8fe:	e7a5      	b.n	800a84c <_svfiprintf_r+0xd4>
 800a900:	2300      	movs	r3, #0
 800a902:	3401      	adds	r4, #1
 800a904:	9305      	str	r3, [sp, #20]
 800a906:	4619      	mov	r1, r3
 800a908:	f04f 0c0a 	mov.w	ip, #10
 800a90c:	4620      	mov	r0, r4
 800a90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a912:	3a30      	subs	r2, #48	; 0x30
 800a914:	2a09      	cmp	r2, #9
 800a916:	d903      	bls.n	800a920 <_svfiprintf_r+0x1a8>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0c5      	beq.n	800a8a8 <_svfiprintf_r+0x130>
 800a91c:	9105      	str	r1, [sp, #20]
 800a91e:	e7c3      	b.n	800a8a8 <_svfiprintf_r+0x130>
 800a920:	fb0c 2101 	mla	r1, ip, r1, r2
 800a924:	4604      	mov	r4, r0
 800a926:	2301      	movs	r3, #1
 800a928:	e7f0      	b.n	800a90c <_svfiprintf_r+0x194>
 800a92a:	ab03      	add	r3, sp, #12
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	462a      	mov	r2, r5
 800a930:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <_svfiprintf_r+0x1f8>)
 800a932:	a904      	add	r1, sp, #16
 800a934:	4638      	mov	r0, r7
 800a936:	f7fb fedd 	bl	80066f4 <_printf_float>
 800a93a:	1c42      	adds	r2, r0, #1
 800a93c:	4606      	mov	r6, r0
 800a93e:	d1d6      	bne.n	800a8ee <_svfiprintf_r+0x176>
 800a940:	89ab      	ldrh	r3, [r5, #12]
 800a942:	065b      	lsls	r3, r3, #25
 800a944:	f53f af2c 	bmi.w	800a7a0 <_svfiprintf_r+0x28>
 800a948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a94a:	b01d      	add	sp, #116	; 0x74
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	ab03      	add	r3, sp, #12
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	462a      	mov	r2, r5
 800a956:	4b06      	ldr	r3, [pc, #24]	; (800a970 <_svfiprintf_r+0x1f8>)
 800a958:	a904      	add	r1, sp, #16
 800a95a:	4638      	mov	r0, r7
 800a95c:	f7fc f96e 	bl	8006c3c <_printf_i>
 800a960:	e7eb      	b.n	800a93a <_svfiprintf_r+0x1c2>
 800a962:	bf00      	nop
 800a964:	0800b4d4 	.word	0x0800b4d4
 800a968:	0800b4de 	.word	0x0800b4de
 800a96c:	080066f5 	.word	0x080066f5
 800a970:	0800a6c1 	.word	0x0800a6c1
 800a974:	0800b4da 	.word	0x0800b4da

0800a978 <__sfputc_r>:
 800a978:	6893      	ldr	r3, [r2, #8]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	b410      	push	{r4}
 800a980:	6093      	str	r3, [r2, #8]
 800a982:	da08      	bge.n	800a996 <__sfputc_r+0x1e>
 800a984:	6994      	ldr	r4, [r2, #24]
 800a986:	42a3      	cmp	r3, r4
 800a988:	db01      	blt.n	800a98e <__sfputc_r+0x16>
 800a98a:	290a      	cmp	r1, #10
 800a98c:	d103      	bne.n	800a996 <__sfputc_r+0x1e>
 800a98e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a992:	f7fd bbe9 	b.w	8008168 <__swbuf_r>
 800a996:	6813      	ldr	r3, [r2, #0]
 800a998:	1c58      	adds	r0, r3, #1
 800a99a:	6010      	str	r0, [r2, #0]
 800a99c:	7019      	strb	r1, [r3, #0]
 800a99e:	4608      	mov	r0, r1
 800a9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <__sfputs_r>:
 800a9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a8:	4606      	mov	r6, r0
 800a9aa:	460f      	mov	r7, r1
 800a9ac:	4614      	mov	r4, r2
 800a9ae:	18d5      	adds	r5, r2, r3
 800a9b0:	42ac      	cmp	r4, r5
 800a9b2:	d101      	bne.n	800a9b8 <__sfputs_r+0x12>
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	e007      	b.n	800a9c8 <__sfputs_r+0x22>
 800a9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9bc:	463a      	mov	r2, r7
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f7ff ffda 	bl	800a978 <__sfputc_r>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d1f3      	bne.n	800a9b0 <__sfputs_r+0xa>
 800a9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9cc <_vfiprintf_r>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	b09d      	sub	sp, #116	; 0x74
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	4698      	mov	r8, r3
 800a9d8:	4606      	mov	r6, r0
 800a9da:	b118      	cbz	r0, 800a9e4 <_vfiprintf_r+0x18>
 800a9dc:	6983      	ldr	r3, [r0, #24]
 800a9de:	b90b      	cbnz	r3, 800a9e4 <_vfiprintf_r+0x18>
 800a9e0:	f7fe fc16 	bl	8009210 <__sinit>
 800a9e4:	4b89      	ldr	r3, [pc, #548]	; (800ac0c <_vfiprintf_r+0x240>)
 800a9e6:	429d      	cmp	r5, r3
 800a9e8:	d11b      	bne.n	800aa22 <_vfiprintf_r+0x56>
 800a9ea:	6875      	ldr	r5, [r6, #4]
 800a9ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ee:	07d9      	lsls	r1, r3, #31
 800a9f0:	d405      	bmi.n	800a9fe <_vfiprintf_r+0x32>
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	059a      	lsls	r2, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_vfiprintf_r+0x32>
 800a9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9fa:	f7ff f81a 	bl	8009a32 <__retarget_lock_acquire_recursive>
 800a9fe:	89ab      	ldrh	r3, [r5, #12]
 800aa00:	071b      	lsls	r3, r3, #28
 800aa02:	d501      	bpl.n	800aa08 <_vfiprintf_r+0x3c>
 800aa04:	692b      	ldr	r3, [r5, #16]
 800aa06:	b9eb      	cbnz	r3, 800aa44 <_vfiprintf_r+0x78>
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7fd fbfe 	bl	800820c <__swsetup_r>
 800aa10:	b1c0      	cbz	r0, 800aa44 <_vfiprintf_r+0x78>
 800aa12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa14:	07dc      	lsls	r4, r3, #31
 800aa16:	d50e      	bpl.n	800aa36 <_vfiprintf_r+0x6a>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	b01d      	add	sp, #116	; 0x74
 800aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa22:	4b7b      	ldr	r3, [pc, #492]	; (800ac10 <_vfiprintf_r+0x244>)
 800aa24:	429d      	cmp	r5, r3
 800aa26:	d101      	bne.n	800aa2c <_vfiprintf_r+0x60>
 800aa28:	68b5      	ldr	r5, [r6, #8]
 800aa2a:	e7df      	b.n	800a9ec <_vfiprintf_r+0x20>
 800aa2c:	4b79      	ldr	r3, [pc, #484]	; (800ac14 <_vfiprintf_r+0x248>)
 800aa2e:	429d      	cmp	r5, r3
 800aa30:	bf08      	it	eq
 800aa32:	68f5      	ldreq	r5, [r6, #12]
 800aa34:	e7da      	b.n	800a9ec <_vfiprintf_r+0x20>
 800aa36:	89ab      	ldrh	r3, [r5, #12]
 800aa38:	0598      	lsls	r0, r3, #22
 800aa3a:	d4ed      	bmi.n	800aa18 <_vfiprintf_r+0x4c>
 800aa3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa3e:	f7fe fff9 	bl	8009a34 <__retarget_lock_release_recursive>
 800aa42:	e7e9      	b.n	800aa18 <_vfiprintf_r+0x4c>
 800aa44:	2300      	movs	r3, #0
 800aa46:	9309      	str	r3, [sp, #36]	; 0x24
 800aa48:	2320      	movs	r3, #32
 800aa4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa52:	2330      	movs	r3, #48	; 0x30
 800aa54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac18 <_vfiprintf_r+0x24c>
 800aa58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa5c:	f04f 0901 	mov.w	r9, #1
 800aa60:	4623      	mov	r3, r4
 800aa62:	469a      	mov	sl, r3
 800aa64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa68:	b10a      	cbz	r2, 800aa6e <_vfiprintf_r+0xa2>
 800aa6a:	2a25      	cmp	r2, #37	; 0x25
 800aa6c:	d1f9      	bne.n	800aa62 <_vfiprintf_r+0x96>
 800aa6e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa72:	d00b      	beq.n	800aa8c <_vfiprintf_r+0xc0>
 800aa74:	465b      	mov	r3, fp
 800aa76:	4622      	mov	r2, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f7ff ff93 	bl	800a9a6 <__sfputs_r>
 800aa80:	3001      	adds	r0, #1
 800aa82:	f000 80aa 	beq.w	800abda <_vfiprintf_r+0x20e>
 800aa86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa88:	445a      	add	r2, fp
 800aa8a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa8c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 80a2 	beq.w	800abda <_vfiprintf_r+0x20e>
 800aa96:	2300      	movs	r3, #0
 800aa98:	f04f 32ff 	mov.w	r2, #4294967295
 800aa9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa0:	f10a 0a01 	add.w	sl, sl, #1
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	9307      	str	r3, [sp, #28]
 800aaa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaac:	931a      	str	r3, [sp, #104]	; 0x68
 800aaae:	4654      	mov	r4, sl
 800aab0:	2205      	movs	r2, #5
 800aab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab6:	4858      	ldr	r0, [pc, #352]	; (800ac18 <_vfiprintf_r+0x24c>)
 800aab8:	f7f5 fba2 	bl	8000200 <memchr>
 800aabc:	9a04      	ldr	r2, [sp, #16]
 800aabe:	b9d8      	cbnz	r0, 800aaf8 <_vfiprintf_r+0x12c>
 800aac0:	06d1      	lsls	r1, r2, #27
 800aac2:	bf44      	itt	mi
 800aac4:	2320      	movmi	r3, #32
 800aac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaca:	0713      	lsls	r3, r2, #28
 800aacc:	bf44      	itt	mi
 800aace:	232b      	movmi	r3, #43	; 0x2b
 800aad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad4:	f89a 3000 	ldrb.w	r3, [sl]
 800aad8:	2b2a      	cmp	r3, #42	; 0x2a
 800aada:	d015      	beq.n	800ab08 <_vfiprintf_r+0x13c>
 800aadc:	9a07      	ldr	r2, [sp, #28]
 800aade:	4654      	mov	r4, sl
 800aae0:	2000      	movs	r0, #0
 800aae2:	f04f 0c0a 	mov.w	ip, #10
 800aae6:	4621      	mov	r1, r4
 800aae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaec:	3b30      	subs	r3, #48	; 0x30
 800aaee:	2b09      	cmp	r3, #9
 800aaf0:	d94e      	bls.n	800ab90 <_vfiprintf_r+0x1c4>
 800aaf2:	b1b0      	cbz	r0, 800ab22 <_vfiprintf_r+0x156>
 800aaf4:	9207      	str	r2, [sp, #28]
 800aaf6:	e014      	b.n	800ab22 <_vfiprintf_r+0x156>
 800aaf8:	eba0 0308 	sub.w	r3, r0, r8
 800aafc:	fa09 f303 	lsl.w	r3, r9, r3
 800ab00:	4313      	orrs	r3, r2
 800ab02:	9304      	str	r3, [sp, #16]
 800ab04:	46a2      	mov	sl, r4
 800ab06:	e7d2      	b.n	800aaae <_vfiprintf_r+0xe2>
 800ab08:	9b03      	ldr	r3, [sp, #12]
 800ab0a:	1d19      	adds	r1, r3, #4
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	9103      	str	r1, [sp, #12]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	bfbb      	ittet	lt
 800ab14:	425b      	neglt	r3, r3
 800ab16:	f042 0202 	orrlt.w	r2, r2, #2
 800ab1a:	9307      	strge	r3, [sp, #28]
 800ab1c:	9307      	strlt	r3, [sp, #28]
 800ab1e:	bfb8      	it	lt
 800ab20:	9204      	strlt	r2, [sp, #16]
 800ab22:	7823      	ldrb	r3, [r4, #0]
 800ab24:	2b2e      	cmp	r3, #46	; 0x2e
 800ab26:	d10c      	bne.n	800ab42 <_vfiprintf_r+0x176>
 800ab28:	7863      	ldrb	r3, [r4, #1]
 800ab2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab2c:	d135      	bne.n	800ab9a <_vfiprintf_r+0x1ce>
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	1d1a      	adds	r2, r3, #4
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	9203      	str	r2, [sp, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfb8      	it	lt
 800ab3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab3e:	3402      	adds	r4, #2
 800ab40:	9305      	str	r3, [sp, #20]
 800ab42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac28 <_vfiprintf_r+0x25c>
 800ab46:	7821      	ldrb	r1, [r4, #0]
 800ab48:	2203      	movs	r2, #3
 800ab4a:	4650      	mov	r0, sl
 800ab4c:	f7f5 fb58 	bl	8000200 <memchr>
 800ab50:	b140      	cbz	r0, 800ab64 <_vfiprintf_r+0x198>
 800ab52:	2340      	movs	r3, #64	; 0x40
 800ab54:	eba0 000a 	sub.w	r0, r0, sl
 800ab58:	fa03 f000 	lsl.w	r0, r3, r0
 800ab5c:	9b04      	ldr	r3, [sp, #16]
 800ab5e:	4303      	orrs	r3, r0
 800ab60:	3401      	adds	r4, #1
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab68:	482c      	ldr	r0, [pc, #176]	; (800ac1c <_vfiprintf_r+0x250>)
 800ab6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab6e:	2206      	movs	r2, #6
 800ab70:	f7f5 fb46 	bl	8000200 <memchr>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d03f      	beq.n	800abf8 <_vfiprintf_r+0x22c>
 800ab78:	4b29      	ldr	r3, [pc, #164]	; (800ac20 <_vfiprintf_r+0x254>)
 800ab7a:	bb1b      	cbnz	r3, 800abc4 <_vfiprintf_r+0x1f8>
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	3307      	adds	r3, #7
 800ab80:	f023 0307 	bic.w	r3, r3, #7
 800ab84:	3308      	adds	r3, #8
 800ab86:	9303      	str	r3, [sp, #12]
 800ab88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8a:	443b      	add	r3, r7
 800ab8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8e:	e767      	b.n	800aa60 <_vfiprintf_r+0x94>
 800ab90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab94:	460c      	mov	r4, r1
 800ab96:	2001      	movs	r0, #1
 800ab98:	e7a5      	b.n	800aae6 <_vfiprintf_r+0x11a>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	3401      	adds	r4, #1
 800ab9e:	9305      	str	r3, [sp, #20]
 800aba0:	4619      	mov	r1, r3
 800aba2:	f04f 0c0a 	mov.w	ip, #10
 800aba6:	4620      	mov	r0, r4
 800aba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abac:	3a30      	subs	r2, #48	; 0x30
 800abae:	2a09      	cmp	r2, #9
 800abb0:	d903      	bls.n	800abba <_vfiprintf_r+0x1ee>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0c5      	beq.n	800ab42 <_vfiprintf_r+0x176>
 800abb6:	9105      	str	r1, [sp, #20]
 800abb8:	e7c3      	b.n	800ab42 <_vfiprintf_r+0x176>
 800abba:	fb0c 2101 	mla	r1, ip, r1, r2
 800abbe:	4604      	mov	r4, r0
 800abc0:	2301      	movs	r3, #1
 800abc2:	e7f0      	b.n	800aba6 <_vfiprintf_r+0x1da>
 800abc4:	ab03      	add	r3, sp, #12
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	462a      	mov	r2, r5
 800abca:	4b16      	ldr	r3, [pc, #88]	; (800ac24 <_vfiprintf_r+0x258>)
 800abcc:	a904      	add	r1, sp, #16
 800abce:	4630      	mov	r0, r6
 800abd0:	f7fb fd90 	bl	80066f4 <_printf_float>
 800abd4:	4607      	mov	r7, r0
 800abd6:	1c78      	adds	r0, r7, #1
 800abd8:	d1d6      	bne.n	800ab88 <_vfiprintf_r+0x1bc>
 800abda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abdc:	07d9      	lsls	r1, r3, #31
 800abde:	d405      	bmi.n	800abec <_vfiprintf_r+0x220>
 800abe0:	89ab      	ldrh	r3, [r5, #12]
 800abe2:	059a      	lsls	r2, r3, #22
 800abe4:	d402      	bmi.n	800abec <_vfiprintf_r+0x220>
 800abe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abe8:	f7fe ff24 	bl	8009a34 <__retarget_lock_release_recursive>
 800abec:	89ab      	ldrh	r3, [r5, #12]
 800abee:	065b      	lsls	r3, r3, #25
 800abf0:	f53f af12 	bmi.w	800aa18 <_vfiprintf_r+0x4c>
 800abf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abf6:	e711      	b.n	800aa1c <_vfiprintf_r+0x50>
 800abf8:	ab03      	add	r3, sp, #12
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	462a      	mov	r2, r5
 800abfe:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <_vfiprintf_r+0x258>)
 800ac00:	a904      	add	r1, sp, #16
 800ac02:	4630      	mov	r0, r6
 800ac04:	f7fc f81a 	bl	8006c3c <_printf_i>
 800ac08:	e7e4      	b.n	800abd4 <_vfiprintf_r+0x208>
 800ac0a:	bf00      	nop
 800ac0c:	0800b2bc 	.word	0x0800b2bc
 800ac10:	0800b2dc 	.word	0x0800b2dc
 800ac14:	0800b29c 	.word	0x0800b29c
 800ac18:	0800b4d4 	.word	0x0800b4d4
 800ac1c:	0800b4de 	.word	0x0800b4de
 800ac20:	080066f5 	.word	0x080066f5
 800ac24:	0800a9a7 	.word	0x0800a9a7
 800ac28:	0800b4da 	.word	0x0800b4da
 800ac2c:	00000000 	.word	0x00000000

0800ac30 <nan>:
 800ac30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac38 <nan+0x8>
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	00000000 	.word	0x00000000
 800ac3c:	7ff80000 	.word	0x7ff80000

0800ac40 <_sbrk_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4d06      	ldr	r5, [pc, #24]	; (800ac5c <_sbrk_r+0x1c>)
 800ac44:	2300      	movs	r3, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	4608      	mov	r0, r1
 800ac4a:	602b      	str	r3, [r5, #0]
 800ac4c:	f7f6 feaa 	bl	80019a4 <_sbrk>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_sbrk_r+0x1a>
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_sbrk_r+0x1a>
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	200007f4 	.word	0x200007f4

0800ac60 <__sread>:
 800ac60:	b510      	push	{r4, lr}
 800ac62:	460c      	mov	r4, r1
 800ac64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac68:	f000 f93a 	bl	800aee0 <_read_r>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	bfab      	itete	ge
 800ac70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac72:	89a3      	ldrhlt	r3, [r4, #12]
 800ac74:	181b      	addge	r3, r3, r0
 800ac76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac7a:	bfac      	ite	ge
 800ac7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac7e:	81a3      	strhlt	r3, [r4, #12]
 800ac80:	bd10      	pop	{r4, pc}

0800ac82 <__swrite>:
 800ac82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac86:	461f      	mov	r7, r3
 800ac88:	898b      	ldrh	r3, [r1, #12]
 800ac8a:	05db      	lsls	r3, r3, #23
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	4616      	mov	r6, r2
 800ac92:	d505      	bpl.n	800aca0 <__swrite+0x1e>
 800ac94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac98:	2302      	movs	r3, #2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f000 f8b8 	bl	800ae10 <_lseek_r>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acaa:	81a3      	strh	r3, [r4, #12]
 800acac:	4632      	mov	r2, r6
 800acae:	463b      	mov	r3, r7
 800acb0:	4628      	mov	r0, r5
 800acb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acb6:	f000 b837 	b.w	800ad28 <_write_r>

0800acba <__sseek>:
 800acba:	b510      	push	{r4, lr}
 800acbc:	460c      	mov	r4, r1
 800acbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc2:	f000 f8a5 	bl	800ae10 <_lseek_r>
 800acc6:	1c43      	adds	r3, r0, #1
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	bf15      	itete	ne
 800accc:	6560      	strne	r0, [r4, #84]	; 0x54
 800acce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acd6:	81a3      	strheq	r3, [r4, #12]
 800acd8:	bf18      	it	ne
 800acda:	81a3      	strhne	r3, [r4, #12]
 800acdc:	bd10      	pop	{r4, pc}

0800acde <__sclose>:
 800acde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace2:	f000 b851 	b.w	800ad88 <_close_r>

0800ace6 <strncmp>:
 800ace6:	b510      	push	{r4, lr}
 800ace8:	b17a      	cbz	r2, 800ad0a <strncmp+0x24>
 800acea:	4603      	mov	r3, r0
 800acec:	3901      	subs	r1, #1
 800acee:	1884      	adds	r4, r0, r2
 800acf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800acf4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800acf8:	4290      	cmp	r0, r2
 800acfa:	d101      	bne.n	800ad00 <strncmp+0x1a>
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	d101      	bne.n	800ad04 <strncmp+0x1e>
 800ad00:	1a80      	subs	r0, r0, r2
 800ad02:	bd10      	pop	{r4, pc}
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1f3      	bne.n	800acf0 <strncmp+0xa>
 800ad08:	e7fa      	b.n	800ad00 <strncmp+0x1a>
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	e7f9      	b.n	800ad02 <strncmp+0x1c>

0800ad0e <__ascii_wctomb>:
 800ad0e:	b149      	cbz	r1, 800ad24 <__ascii_wctomb+0x16>
 800ad10:	2aff      	cmp	r2, #255	; 0xff
 800ad12:	bf85      	ittet	hi
 800ad14:	238a      	movhi	r3, #138	; 0x8a
 800ad16:	6003      	strhi	r3, [r0, #0]
 800ad18:	700a      	strbls	r2, [r1, #0]
 800ad1a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad1e:	bf98      	it	ls
 800ad20:	2001      	movls	r0, #1
 800ad22:	4770      	bx	lr
 800ad24:	4608      	mov	r0, r1
 800ad26:	4770      	bx	lr

0800ad28 <_write_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d07      	ldr	r5, [pc, #28]	; (800ad48 <_write_r+0x20>)
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	4608      	mov	r0, r1
 800ad30:	4611      	mov	r1, r2
 800ad32:	2200      	movs	r2, #0
 800ad34:	602a      	str	r2, [r5, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	f7f6 fde3 	bl	8001902 <_write>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_write_r+0x1e>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_write_r+0x1e>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	200007f4 	.word	0x200007f4

0800ad4c <__assert_func>:
 800ad4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad4e:	4614      	mov	r4, r2
 800ad50:	461a      	mov	r2, r3
 800ad52:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <__assert_func+0x2c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4605      	mov	r5, r0
 800ad58:	68d8      	ldr	r0, [r3, #12]
 800ad5a:	b14c      	cbz	r4, 800ad70 <__assert_func+0x24>
 800ad5c:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <__assert_func+0x30>)
 800ad5e:	9100      	str	r1, [sp, #0]
 800ad60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad64:	4906      	ldr	r1, [pc, #24]	; (800ad80 <__assert_func+0x34>)
 800ad66:	462b      	mov	r3, r5
 800ad68:	f000 f81e 	bl	800ada8 <fiprintf>
 800ad6c:	f000 f8ca 	bl	800af04 <abort>
 800ad70:	4b04      	ldr	r3, [pc, #16]	; (800ad84 <__assert_func+0x38>)
 800ad72:	461c      	mov	r4, r3
 800ad74:	e7f3      	b.n	800ad5e <__assert_func+0x12>
 800ad76:	bf00      	nop
 800ad78:	2000000c 	.word	0x2000000c
 800ad7c:	0800b4e5 	.word	0x0800b4e5
 800ad80:	0800b4f2 	.word	0x0800b4f2
 800ad84:	0800b520 	.word	0x0800b520

0800ad88 <_close_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	; (800ada4 <_close_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f6 fdd1 	bl	800193a <_close>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_close_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_close_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	200007f4 	.word	0x200007f4

0800ada8 <fiprintf>:
 800ada8:	b40e      	push	{r1, r2, r3}
 800adaa:	b503      	push	{r0, r1, lr}
 800adac:	4601      	mov	r1, r0
 800adae:	ab03      	add	r3, sp, #12
 800adb0:	4805      	ldr	r0, [pc, #20]	; (800adc8 <fiprintf+0x20>)
 800adb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb6:	6800      	ldr	r0, [r0, #0]
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	f7ff fe07 	bl	800a9cc <_vfiprintf_r>
 800adbe:	b002      	add	sp, #8
 800adc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adc4:	b003      	add	sp, #12
 800adc6:	4770      	bx	lr
 800adc8:	2000000c 	.word	0x2000000c

0800adcc <_fstat_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	; (800adec <_fstat_r+0x20>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	4611      	mov	r1, r2
 800add8:	602b      	str	r3, [r5, #0]
 800adda:	f7f6 fdba 	bl	8001952 <_fstat>
 800adde:	1c43      	adds	r3, r0, #1
 800ade0:	d102      	bne.n	800ade8 <_fstat_r+0x1c>
 800ade2:	682b      	ldr	r3, [r5, #0]
 800ade4:	b103      	cbz	r3, 800ade8 <_fstat_r+0x1c>
 800ade6:	6023      	str	r3, [r4, #0]
 800ade8:	bd38      	pop	{r3, r4, r5, pc}
 800adea:	bf00      	nop
 800adec:	200007f4 	.word	0x200007f4

0800adf0 <_isatty_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d06      	ldr	r5, [pc, #24]	; (800ae0c <_isatty_r+0x1c>)
 800adf4:	2300      	movs	r3, #0
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	602b      	str	r3, [r5, #0]
 800adfc:	f7f6 fdb9 	bl	8001972 <_isatty>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_isatty_r+0x1a>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_isatty_r+0x1a>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	200007f4 	.word	0x200007f4

0800ae10 <_lseek_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4d07      	ldr	r5, [pc, #28]	; (800ae30 <_lseek_r+0x20>)
 800ae14:	4604      	mov	r4, r0
 800ae16:	4608      	mov	r0, r1
 800ae18:	4611      	mov	r1, r2
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	602a      	str	r2, [r5, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f7f6 fdb2 	bl	8001988 <_lseek>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_lseek_r+0x1e>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_lseek_r+0x1e>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	200007f4 	.word	0x200007f4

0800ae34 <memmove>:
 800ae34:	4288      	cmp	r0, r1
 800ae36:	b510      	push	{r4, lr}
 800ae38:	eb01 0402 	add.w	r4, r1, r2
 800ae3c:	d902      	bls.n	800ae44 <memmove+0x10>
 800ae3e:	4284      	cmp	r4, r0
 800ae40:	4623      	mov	r3, r4
 800ae42:	d807      	bhi.n	800ae54 <memmove+0x20>
 800ae44:	1e43      	subs	r3, r0, #1
 800ae46:	42a1      	cmp	r1, r4
 800ae48:	d008      	beq.n	800ae5c <memmove+0x28>
 800ae4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae52:	e7f8      	b.n	800ae46 <memmove+0x12>
 800ae54:	4402      	add	r2, r0
 800ae56:	4601      	mov	r1, r0
 800ae58:	428a      	cmp	r2, r1
 800ae5a:	d100      	bne.n	800ae5e <memmove+0x2a>
 800ae5c:	bd10      	pop	{r4, pc}
 800ae5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae66:	e7f7      	b.n	800ae58 <memmove+0x24>

0800ae68 <__malloc_lock>:
 800ae68:	4801      	ldr	r0, [pc, #4]	; (800ae70 <__malloc_lock+0x8>)
 800ae6a:	f7fe bde2 	b.w	8009a32 <__retarget_lock_acquire_recursive>
 800ae6e:	bf00      	nop
 800ae70:	200007e8 	.word	0x200007e8

0800ae74 <__malloc_unlock>:
 800ae74:	4801      	ldr	r0, [pc, #4]	; (800ae7c <__malloc_unlock+0x8>)
 800ae76:	f7fe bddd 	b.w	8009a34 <__retarget_lock_release_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	200007e8 	.word	0x200007e8

0800ae80 <_realloc_r>:
 800ae80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae84:	4680      	mov	r8, r0
 800ae86:	4614      	mov	r4, r2
 800ae88:	460e      	mov	r6, r1
 800ae8a:	b921      	cbnz	r1, 800ae96 <_realloc_r+0x16>
 800ae8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae90:	4611      	mov	r1, r2
 800ae92:	f7ff bba1 	b.w	800a5d8 <_malloc_r>
 800ae96:	b92a      	cbnz	r2, 800aea4 <_realloc_r+0x24>
 800ae98:	f7ff fb32 	bl	800a500 <_free_r>
 800ae9c:	4625      	mov	r5, r4
 800ae9e:	4628      	mov	r0, r5
 800aea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea4:	f000 f835 	bl	800af12 <_malloc_usable_size_r>
 800aea8:	4284      	cmp	r4, r0
 800aeaa:	4607      	mov	r7, r0
 800aeac:	d802      	bhi.n	800aeb4 <_realloc_r+0x34>
 800aeae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aeb2:	d812      	bhi.n	800aeda <_realloc_r+0x5a>
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	f7ff fb8e 	bl	800a5d8 <_malloc_r>
 800aebc:	4605      	mov	r5, r0
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d0ed      	beq.n	800ae9e <_realloc_r+0x1e>
 800aec2:	42bc      	cmp	r4, r7
 800aec4:	4622      	mov	r2, r4
 800aec6:	4631      	mov	r1, r6
 800aec8:	bf28      	it	cs
 800aeca:	463a      	movcs	r2, r7
 800aecc:	f7fe fe32 	bl	8009b34 <memcpy>
 800aed0:	4631      	mov	r1, r6
 800aed2:	4640      	mov	r0, r8
 800aed4:	f7ff fb14 	bl	800a500 <_free_r>
 800aed8:	e7e1      	b.n	800ae9e <_realloc_r+0x1e>
 800aeda:	4635      	mov	r5, r6
 800aedc:	e7df      	b.n	800ae9e <_realloc_r+0x1e>
	...

0800aee0 <_read_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4d07      	ldr	r5, [pc, #28]	; (800af00 <_read_r+0x20>)
 800aee4:	4604      	mov	r4, r0
 800aee6:	4608      	mov	r0, r1
 800aee8:	4611      	mov	r1, r2
 800aeea:	2200      	movs	r2, #0
 800aeec:	602a      	str	r2, [r5, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	f7f6 fcea 	bl	80018c8 <_read>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_read_r+0x1e>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_read_r+0x1e>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	200007f4 	.word	0x200007f4

0800af04 <abort>:
 800af04:	b508      	push	{r3, lr}
 800af06:	2006      	movs	r0, #6
 800af08:	f000 f834 	bl	800af74 <raise>
 800af0c:	2001      	movs	r0, #1
 800af0e:	f7f6 fcd1 	bl	80018b4 <_exit>

0800af12 <_malloc_usable_size_r>:
 800af12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af16:	1f18      	subs	r0, r3, #4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bfbc      	itt	lt
 800af1c:	580b      	ldrlt	r3, [r1, r0]
 800af1e:	18c0      	addlt	r0, r0, r3
 800af20:	4770      	bx	lr

0800af22 <_raise_r>:
 800af22:	291f      	cmp	r1, #31
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4604      	mov	r4, r0
 800af28:	460d      	mov	r5, r1
 800af2a:	d904      	bls.n	800af36 <_raise_r+0x14>
 800af2c:	2316      	movs	r3, #22
 800af2e:	6003      	str	r3, [r0, #0]
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	bd38      	pop	{r3, r4, r5, pc}
 800af36:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af38:	b112      	cbz	r2, 800af40 <_raise_r+0x1e>
 800af3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af3e:	b94b      	cbnz	r3, 800af54 <_raise_r+0x32>
 800af40:	4620      	mov	r0, r4
 800af42:	f000 f831 	bl	800afa8 <_getpid_r>
 800af46:	462a      	mov	r2, r5
 800af48:	4601      	mov	r1, r0
 800af4a:	4620      	mov	r0, r4
 800af4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af50:	f000 b818 	b.w	800af84 <_kill_r>
 800af54:	2b01      	cmp	r3, #1
 800af56:	d00a      	beq.n	800af6e <_raise_r+0x4c>
 800af58:	1c59      	adds	r1, r3, #1
 800af5a:	d103      	bne.n	800af64 <_raise_r+0x42>
 800af5c:	2316      	movs	r3, #22
 800af5e:	6003      	str	r3, [r0, #0]
 800af60:	2001      	movs	r0, #1
 800af62:	e7e7      	b.n	800af34 <_raise_r+0x12>
 800af64:	2400      	movs	r4, #0
 800af66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af6a:	4628      	mov	r0, r5
 800af6c:	4798      	blx	r3
 800af6e:	2000      	movs	r0, #0
 800af70:	e7e0      	b.n	800af34 <_raise_r+0x12>
	...

0800af74 <raise>:
 800af74:	4b02      	ldr	r3, [pc, #8]	; (800af80 <raise+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f7ff bfd2 	b.w	800af22 <_raise_r>
 800af7e:	bf00      	nop
 800af80:	2000000c 	.word	0x2000000c

0800af84 <_kill_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d07      	ldr	r5, [pc, #28]	; (800afa4 <_kill_r+0x20>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	4611      	mov	r1, r2
 800af90:	602b      	str	r3, [r5, #0]
 800af92:	f7f6 fc7f 	bl	8001894 <_kill>
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	d102      	bne.n	800afa0 <_kill_r+0x1c>
 800af9a:	682b      	ldr	r3, [r5, #0]
 800af9c:	b103      	cbz	r3, 800afa0 <_kill_r+0x1c>
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	bd38      	pop	{r3, r4, r5, pc}
 800afa2:	bf00      	nop
 800afa4:	200007f4 	.word	0x200007f4

0800afa8 <_getpid_r>:
 800afa8:	f7f6 bc6c 	b.w	8001884 <_getpid>

0800afac <_init>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	bf00      	nop
 800afb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb2:	bc08      	pop	{r3}
 800afb4:	469e      	mov	lr, r3
 800afb6:	4770      	bx	lr

0800afb8 <_fini>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	bf00      	nop
 800afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afbe:	bc08      	pop	{r3}
 800afc0:	469e      	mov	lr, r3
 800afc2:	4770      	bx	lr
