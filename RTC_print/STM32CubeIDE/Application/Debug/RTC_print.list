
RTC_print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df4  08003df4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dfc  08003dfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000009c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a52f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a87  00000000  00000000  0002a5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e8  00000000  00000000  0002c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241d0  00000000  00000000  0002d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae83  00000000  00000000  000512b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f02  00000000  00000000  0005c133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135035  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029bc  00000000  00000000  00135088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d08 	.word	0x08003d08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003d08 	.word	0x08003d08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:

UART_HandleTypeDef huart1;


int _write(int file, char* str, int length)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, str, length, 10);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	230a      	movs	r3, #10
 80005a6:	68b9      	ldr	r1, [r7, #8]
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <_write+0x24>)
 80005aa:	f002 f878 	bl	800269e <HAL_UART_Transmit>

	return length;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000ac 	.word	0x200000ac

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fb1d 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f845 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f937 	bl	800083c <MX_GPIO_Init>
  MX_RTC_Init();
 80005ce:	f000 f8b1 	bl	8000734 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 f909 	bl	80007e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Init(&huart1);
 80005d6:	481a      	ldr	r0, [pc, #104]	; (8000640 <main+0x84>)
 80005d8:	f002 f814 	bl	8002604 <HAL_UART_Init>
  RTC_DateTypeDef sDate;

   static char toggle[4]={0,};
   static uint32_t tick_Seconds=0;

   HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	4619      	mov	r1, r3
 80005e2:	4818      	ldr	r0, [pc, #96]	; (8000644 <main+0x88>)
 80005e4:	f001 fe20 	bl	8002228 <HAL_RTC_GetTime>
   tick_Seconds=sTime.Seconds;
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <main+0x8c>)
 80005ee:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <main+0x88>)
 80005f8:	f001 fe16 	bl	8002228 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	4619      	mov	r1, r3
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <main+0x88>)
 8000604:	f001 fef2 	bl	80023ec <HAL_RTC_GetDate>

	  HAL_GPIO_TogglePin(GPIOG,LD4_Pin);
 8000608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060c:	480f      	ldr	r0, [pc, #60]	; (800064c <main+0x90>)
 800060e:	f000 fe38 	bl	8001282 <HAL_GPIO_TogglePin>
	  		  //printf("LED ON\r\n");
	  		  printf("%04d-%02d-%02d -- %02d:%02d:%02d\r\n",sDate.Year+2000,sDate.Month,sDate.Date,sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
 8000618:	787b      	ldrb	r3, [r7, #1]
 800061a:	461c      	mov	r4, r3
 800061c:	78bb      	ldrb	r3, [r7, #2]
 800061e:	461d      	mov	r5, r3
 8000620:	793b      	ldrb	r3, [r7, #4]
 8000622:	797a      	ldrb	r2, [r7, #5]
 8000624:	79b8      	ldrb	r0, [r7, #6]
 8000626:	9002      	str	r0, [sp, #8]
 8000628:	9201      	str	r2, [sp, #4]
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	462b      	mov	r3, r5
 800062e:	4622      	mov	r2, r4
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <main+0x94>)
 8000632:	f002 fbdb 	bl	8002dec <iprintf>
	  		  HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f000 fb53 	bl	8000ce4 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 800063e:	e7d7      	b.n	80005f0 <main+0x34>
 8000640:	200000ac 	.word	0x200000ac
 8000644:	2000008c 	.word	0x2000008c
 8000648:	200000f0 	.word	0x200000f0
 800064c:	40021800 	.word	0x40021800
 8000650:	08003d20 	.word	0x08003d20

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fbba 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <SystemClock_Config+0xd8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a2a      	ldr	r2, [pc, #168]	; (800072c <SystemClock_Config+0xd8>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xd8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xdc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a24      	ldr	r2, [pc, #144]	; (8000730 <SystemClock_Config+0xdc>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xdc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006c8:	23b4      	movs	r3, #180	; 0xb4
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fe3d 	bl	8001358 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 f8fc 	bl	80008e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f000 fde6 	bl	80012b8 <HAL_PWREx_EnableOverDrive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006f2:	f000 f8f5 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2105      	movs	r1, #5
 8000714:	4618      	mov	r0, r3
 8000716:	f001 f897 	bl	8001848 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000720:	f000 f8de 	bl	80008e0 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_RTC_Init+0xac>)
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <MX_RTC_Init+0xb0>)
 8000750:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_RTC_Init+0xac>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_RTC_Init+0xac>)
 800075a:	227c      	movs	r2, #124	; 0x7c
 800075c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 7999;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_RTC_Init+0xac>)
 8000760:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000764:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_RTC_Init+0xac>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_RTC_Init+0xac>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_RTC_Init+0xac>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000778:	4819      	ldr	r0, [pc, #100]	; (80007e0 <MX_RTC_Init+0xac>)
 800077a:	f001 fc45 	bl	8002008 <HAL_RTC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000784:	f000 f8ac 	bl	80008e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8000788:	230a      	movs	r3, #10
 800078a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 22;
 800078c:	2316      	movs	r3, #22
 800078e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	4619      	mov	r1, r3
 80007a2:	480f      	ldr	r0, [pc, #60]	; (80007e0 <MX_RTC_Init+0xac>)
 80007a4:	f001 fca6 	bl	80020f4 <HAL_RTC_SetTime>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80007ae:	f000 f897 	bl	80008e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007b2:	2301      	movs	r3, #1
 80007b4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 80007b6:	2312      	movs	r3, #18
 80007b8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 5;
 80007ba:	2305      	movs	r3, #5
 80007bc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 80007be:	2316      	movs	r3, #22
 80007c0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_RTC_Init+0xac>)
 80007ca:	f001 fd8b 	bl	80022e4 <HAL_RTC_SetDate>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80007d4:	f000 f884 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	40002800 	.word	0x40002800

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART1_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000820:	f001 fef0 	bl	8002604 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f859 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000ac 	.word	0x200000ac
 8000838:	40011000 	.word	0x40011000

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <MX_GPIO_Init+0x9c>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <MX_GPIO_Init+0x9c>)
 8000894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_GPIO_Init+0x9c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0xa0>)
 80008ae:	f000 fccf 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80008b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xa0>)
 80008cc:	f000 fb14 	bl	8000ef8 <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021800 	.word	0x40021800

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2230      	movs	r2, #48	; 0x30
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fa45 	bl	8002ddc <memset>
  if(hrtc->Instance==RTC)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <HAL_RTC_MspInit+0x4c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d110      	bne.n	800097e <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800095c:	2320      	movs	r3, #32
 800095e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_RTC_MspInit+0x50>)
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f98d 	bl	8001c88 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8000974:	f7ff ffb4 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_RTC_MspInit+0x54>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3738      	adds	r7, #56	; 0x38
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40002800 	.word	0x40002800
 800098c:	00080300 	.word	0x00080300
 8000990:	42470e3c 	.word	0x42470e3c

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12c      	bne.n	8000a10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a00:	2307      	movs	r3, #7
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_UART_MspInit+0x8c>)
 8000a0c:	f000 fa74 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f918 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e00a      	b.n	8000aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8a:	f3af 8000 	nop.w
 8000a8e:	4601      	mov	r1, r0
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	b2ca      	uxtb	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <_read+0x12>
	}

return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ada:	605a      	str	r2, [r3, #4]
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_isatty>:

int _isatty(int file)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	return 1;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f002 f91c 	bl	8002d88 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20030000 	.word	0x20030000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	200000f4 	.word	0x200000f4
 8000b84:	20000110 	.word	0x20000110

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb2:	f000 f813 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f002 f8ed 	bl	8002d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fcff 	bl	80005bc <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bcc:	08003e04 	.word	0x08003e04
  ldr r2, =_sbss
 8000bd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd4:	2000010c 	.word	0x2000010c

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f931 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe5a 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f93b 	bl	8000ede <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f911 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200000f8 	.word	0x200000f8

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200000f8 	.word	0x200000f8

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff5c 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffb0 	bl	8000e4c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e177      	b.n	8001204 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8166 	bne.w	80011fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80c0 	beq.w	80011fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b66      	ldr	r3, [pc, #408]	; (800121c <HAL_GPIO_Init+0x324>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a65      	ldr	r2, [pc, #404]	; (800121c <HAL_GPIO_Init+0x324>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b63      	ldr	r3, [pc, #396]	; (800121c <HAL_GPIO_Init+0x324>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a61      	ldr	r2, [pc, #388]	; (8001220 <HAL_GPIO_Init+0x328>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a58      	ldr	r2, [pc, #352]	; (8001224 <HAL_GPIO_Init+0x32c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d037      	beq.n	8001136 <HAL_GPIO_Init+0x23e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a57      	ldr	r2, [pc, #348]	; (8001228 <HAL_GPIO_Init+0x330>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d031      	beq.n	8001132 <HAL_GPIO_Init+0x23a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a56      	ldr	r2, [pc, #344]	; (800122c <HAL_GPIO_Init+0x334>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d02b      	beq.n	800112e <HAL_GPIO_Init+0x236>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a55      	ldr	r2, [pc, #340]	; (8001230 <HAL_GPIO_Init+0x338>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x232>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a54      	ldr	r2, [pc, #336]	; (8001234 <HAL_GPIO_Init+0x33c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x22e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a53      	ldr	r2, [pc, #332]	; (8001238 <HAL_GPIO_Init+0x340>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x22a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a52      	ldr	r2, [pc, #328]	; (800123c <HAL_GPIO_Init+0x344>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x226>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <HAL_GPIO_Init+0x348>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x222>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_GPIO_Init+0x34c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x21e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <HAL_GPIO_Init+0x350>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x21a>
 800110e:	2309      	movs	r3, #9
 8001110:	e012      	b.n	8001138 <HAL_GPIO_Init+0x240>
 8001112:	230a      	movs	r3, #10
 8001114:	e010      	b.n	8001138 <HAL_GPIO_Init+0x240>
 8001116:	2308      	movs	r3, #8
 8001118:	e00e      	b.n	8001138 <HAL_GPIO_Init+0x240>
 800111a:	2307      	movs	r3, #7
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x240>
 800111e:	2306      	movs	r3, #6
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x240>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x240>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x240>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x240>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x240>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x240>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <HAL_GPIO_Init+0x328>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_GPIO_Init+0x354>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117a:	4a34      	ldr	r2, [pc, #208]	; (800124c <HAL_GPIO_Init+0x354>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <HAL_GPIO_Init+0x354>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a4:	4a29      	ldr	r2, [pc, #164]	; (800124c <HAL_GPIO_Init+0x354>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <HAL_GPIO_Init+0x354>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <HAL_GPIO_Init+0x354>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_GPIO_Init+0x354>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_GPIO_Init+0x354>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae84 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	40022000 	.word	0x40022000
 8001248:	40022400 	.word	0x40022400
 800124c:	40013c00 	.word	0x40013c00

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	041a      	lsls	r2, r3, #16
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43d9      	mvns	r1, r3
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	400b      	ands	r3, r1
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_PWREx_EnableOverDrive+0x90>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_PWREx_EnableOverDrive+0x90>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_PWREx_EnableOverDrive+0x90>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_PWREx_EnableOverDrive+0x94>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e4:	f7ff fcf2 	bl	8000ccc <HAL_GetTick>
 80012e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ea:	e009      	b.n	8001300 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012ec:	f7ff fcee 	bl	8000ccc <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012fa:	d901      	bls.n	8001300 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e01f      	b.n	8001340 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_PWREx_EnableOverDrive+0x98>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130c:	d1ee      	bne.n	80012ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001314:	f7ff fcda 	bl	8000ccc <HAL_GetTick>
 8001318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800131a:	e009      	b.n	8001330 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800131c:	f7ff fcd6 	bl	8000ccc <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800132a:	d901      	bls.n	8001330 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e007      	b.n	8001340 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_PWREx_EnableOverDrive+0x98>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800133c:	d1ee      	bne.n	800131c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	420e0040 	.word	0x420e0040
 8001350:	40007000 	.word	0x40007000
 8001354:	420e0044 	.word	0x420e0044

08001358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e267      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d075      	beq.n	8001462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001376:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d00c      	beq.n	800139c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b85      	ldr	r3, [pc, #532]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138a:	2b08      	cmp	r3, #8
 800138c:	d112      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138e:	4b82      	ldr	r3, [pc, #520]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800139a:	d10b      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d05b      	beq.n	8001460 <HAL_RCC_OscConfig+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d157      	bne.n	8001460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e242      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x74>
 80013be:	4b76      	ldr	r3, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a75      	ldr	r2, [pc, #468]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b70      	ldr	r3, [pc, #448]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6f      	ldr	r2, [pc, #444]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6c      	ldr	r2, [pc, #432]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013f0:	4b69      	ldr	r3, [pc, #420]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a68      	ldr	r2, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b66      	ldr	r3, [pc, #408]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a65      	ldr	r2, [pc, #404]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fc5c 	bl	8000ccc <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fc58 	bl	8000ccc <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e207      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xc0>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc48 	bl	8000ccc <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc44 	bl	8000ccc <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1f3      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0xe8>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146e:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1c7      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4937      	ldr	r1, [pc, #220]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fbfd 	bl	8000ccc <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbf9 	bl	8000ccc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a8      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4925      	ldr	r1, [pc, #148]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fbdc 	bl	8000ccc <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fbd8 	bl	8000ccc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e187      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d036      	beq.n	80015b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d016      	beq.n	8001578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_RCC_OscConfig+0x248>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fbbc 	bl	8000ccc <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fbb8 	bl	8000ccc <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e167      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x200>
 8001576:	e01b      	b.n	80015b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_OscConfig+0x248>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fba5 	bl	8000ccc <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	e00e      	b.n	80015a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fba1 	bl	8000ccc <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d907      	bls.n	80015a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e150      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 8001598:	40023800 	.word	0x40023800
 800159c:	42470000 	.word	0x42470000
 80015a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ea      	bne.n	8001586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8097 	beq.w	80016ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a7c      	ldr	r2, [pc, #496]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b7a      	ldr	r3, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b77      	ldr	r3, [pc, #476]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d118      	bne.n	800162c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a73      	ldr	r2, [pc, #460]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff fb61 	bl	8000ccc <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fb5d 	bl	8000ccc <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e10c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b6a      	ldr	r3, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x2ea>
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	e01c      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x30c>
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	4a5e      	ldr	r2, [pc, #376]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6713      	str	r3, [r2, #112]	; 0x70
 8001656:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a5b      	ldr	r2, [pc, #364]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a54      	ldr	r2, [pc, #336]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d015      	beq.n	80016b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fb22 	bl	8000ccc <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff fb1e 	bl	8000ccc <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0cb      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ee      	beq.n	800168c <HAL_RCC_OscConfig+0x334>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fb0c 	bl	8000ccc <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fb08 	bl	8000ccc <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0b5      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ee      	bne.n	80016b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a1 	beq.w	8001838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d05c      	beq.n	80017bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d141      	bne.n	800178e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fadc 	bl	8000ccc <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fad8 	bl	8000ccc <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e087      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	491b      	ldr	r1, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fab1 	bl	8000ccc <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff faad 	bl	8000ccc <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e05c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x416>
 800178c:	e054      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fa9a 	bl	8000ccc <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fa96 	bl	8000ccc <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e045      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x444>
 80017ba:	e03d      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e038      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000
 80017d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_RCC_OscConfig+0x4ec>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d028      	beq.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d121      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d11a      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800180a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	4293      	cmp	r3, r2
 800180e:	d111      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0cc      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d90c      	bls.n	8001884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494d      	ldr	r1, [pc, #308]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d044      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e067      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4934      	ldr	r1, [pc, #208]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff f9c8 	bl	8000ccc <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff f9c4 	bl	8000ccc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d20c      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e032      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4916      	ldr	r1, [pc, #88]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 f821 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490a      	ldr	r1, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f928 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08003d44 	.word	0x08003d44
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a18:	b094      	sub	sp, #80	; 0x50
 8001a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a20:	2300      	movs	r3, #0
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a24:	2300      	movs	r3, #0
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2c:	4b79      	ldr	r3, [pc, #484]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d00d      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x40>
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	f200 80e1 	bhi.w	8001c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x34>
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a46:	e0db      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a4c:	e0db      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4e:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a52:	e0d8      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d063      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
 8001a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a86:	4622      	mov	r2, r4
 8001a88:	462b      	mov	r3, r5
 8001a8a:	f04f 0000 	mov.w	r0, #0
 8001a8e:	f04f 0100 	mov.w	r1, #0
 8001a92:	0159      	lsls	r1, r3, #5
 8001a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a98:	0150      	lsls	r0, r2, #5
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	1a51      	subs	r1, r2, r1
 8001aa2:	6139      	str	r1, [r7, #16]
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ab8:	4659      	mov	r1, fp
 8001aba:	018b      	lsls	r3, r1, #6
 8001abc:	4651      	mov	r1, sl
 8001abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ac2:	4651      	mov	r1, sl
 8001ac4:	018a      	lsls	r2, r1, #6
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8001acc:	4659      	mov	r1, fp
 8001ace:	eb63 0901 	sbc.w	r9, r3, r1
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae6:	4690      	mov	r8, r2
 8001ae8:	4699      	mov	r9, r3
 8001aea:	4623      	mov	r3, r4
 8001aec:	eb18 0303 	adds.w	r3, r8, r3
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	462b      	mov	r3, r5
 8001af4:	eb49 0303 	adc.w	r3, r9, r3
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b06:	4629      	mov	r1, r5
 8001b08:	024b      	lsls	r3, r1, #9
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b10:	4621      	mov	r1, r4
 8001b12:	024a      	lsls	r2, r1, #9
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b24:	f7fe fbb4 	bl	8000290 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b30:	e058      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b4c:	4642      	mov	r2, r8
 8001b4e:	464b      	mov	r3, r9
 8001b50:	f04f 0000 	mov.w	r0, #0
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	0159      	lsls	r1, r3, #5
 8001b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5e:	0150      	lsls	r0, r2, #5
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4641      	mov	r1, r8
 8001b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b84:	ebb2 040a 	subs.w	r4, r2, sl
 8001b88:	eb63 050b 	sbc.w	r5, r3, fp
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	00eb      	lsls	r3, r5, #3
 8001b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b9a:	00e2      	lsls	r2, r4, #3
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	18e3      	adds	r3, r4, r3
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	eb45 0303 	adc.w	r3, r5, r3
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	028b      	lsls	r3, r1, #10
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	028a      	lsls	r2, r1, #10
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	61fa      	str	r2, [r7, #28]
 8001bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd8:	f7fe fb5a 	bl	8000290 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3750      	adds	r7, #80	; 0x50
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	00f42400 	.word	0x00f42400
 8001c1c:	007a1200 	.word	0x007a1200

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08003d54 	.word	0x08003d54

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c64:	f7ff ffdc 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0b5b      	lsrs	r3, r3, #13
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08003d54 	.word	0x08003d54

08001c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d075      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cbc:	4b91      	ldr	r3, [pc, #580]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cc2:	f7ff f803 	bl	8000ccc <HAL_GetTick>
 8001cc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cca:	f7fe ffff 	bl	8000ccc <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e189      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cdc:	4b8a      	ldr	r3, [pc, #552]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	019a      	lsls	r2, r3, #6
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	071b      	lsls	r3, r3, #28
 8001d00:	4981      	ldr	r1, [pc, #516]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01f      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d14:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d1a:	0f1b      	lsrs	r3, r3, #28
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	019a      	lsls	r2, r3, #6
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	071b      	lsls	r3, r3, #28
 8001d34:	4974      	ldr	r1, [pc, #464]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d3c:	4b72      	ldr	r3, [pc, #456]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d42:	f023 021f 	bic.w	r2, r3, #31
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	496e      	ldr	r1, [pc, #440]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	019a      	lsls	r2, r3, #6
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	061b      	lsls	r3, r3, #24
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	071b      	lsls	r3, r3, #28
 8001d74:	4964      	ldr	r1, [pc, #400]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d7c:	4b61      	ldr	r3, [pc, #388]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d82:	f7fe ffa3 	bl	8000ccc <HAL_GetTick>
 8001d86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d8a:	f7fe ff9f 	bl	8000ccc <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e129      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d9c:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d079      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001dc0:	4b52      	ldr	r3, [pc, #328]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc6:	f7fe ff81 	bl	8000ccc <HAL_GetTick>
 8001dca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001dce:	f7fe ff7d 	bl	8000ccc <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e107      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dec:	d0ef      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d020      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001dfa:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e00:	0f1b      	lsrs	r3, r3, #28
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	019a      	lsls	r2, r3, #6
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	061b      	lsls	r3, r3, #24
 8001e14:	431a      	orrs	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	071b      	lsls	r3, r3, #28
 8001e1a:	493b      	ldr	r1, [pc, #236]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	4934      	ldr	r1, [pc, #208]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01e      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	0e1b      	lsrs	r3, r3, #24
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	019a      	lsls	r2, r3, #6
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	071b      	lsls	r3, r3, #28
 8001e68:	4927      	ldr	r1, [pc, #156]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	4922      	ldr	r1, [pc, #136]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e8c:	f7fe ff1e 	bl	8000ccc <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e94:	f7fe ff1a 	bl	8000ccc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0a4      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eb2:	d1ef      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 808b 	beq.w	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001eea:	f7fe feef 	bl	8000ccc <HAL_GetTick>
 8001eee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ef0:	e010      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7fe feeb 	bl	8000ccc <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d909      	bls.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e075      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001f04:	42470068 	.word	0x42470068
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	42470070 	.word	0x42470070
 8001f10:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0e8      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d02f      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d028      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f54:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d114      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe feb1 	bl	8000ccc <HAL_GetTick>
 8001f6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe fead 	bl	8000ccc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e035      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ee      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f9c:	d10d      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb2:	4912      	ldr	r1, [pc, #72]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
 8001fb8:	e005      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fc4:	6093      	str	r3, [r2, #8]
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd2:	490a      	ldr	r1, [pc, #40]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8001fec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	42470e40 	.word	0x42470e40
 8002004:	424711e0 	.word	0x424711e0

08002008 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e066      	b.n	80020ec <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7f5b      	ldrb	r3, [r3, #29]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fc84 	bl	800093c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	22ca      	movs	r2, #202	; 0xca
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2253      	movs	r2, #83	; 0x53
 8002048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa45 	bl	80024da <RTC_EnterInitMode>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d12c      	bne.n	80020b4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800206c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6899      	ldr	r1, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68d2      	ldr	r2, [r2, #12]
 8002094:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6919      	ldr	r1, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa4c 	bl	8002548 <RTC_ExitInitMode>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	22ff      	movs	r2, #255	; 0xff
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	7f1b      	ldrb	r3, [r3, #28]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_RTC_SetTime+0x1c>
 800210c:	2302      	movs	r3, #2
 800210e:	e087      	b.n	8002220 <HAL_RTC_SetTime+0x12c>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2202      	movs	r2, #2
 800211a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d126      	bne.n	8002170 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2200      	movs	r2, #0
 8002134:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fa29 	bl	8002592 <RTC_ByteToBcd2>
 8002140:	4603      	mov	r3, r0
 8002142:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fa22 	bl	8002592 <RTC_ByteToBcd2>
 800214e:	4603      	mov	r3, r0
 8002150:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002152:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	789b      	ldrb	r3, [r3, #2]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fa1a 	bl	8002592 <RTC_ByteToBcd2>
 800215e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002160:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	78db      	ldrb	r3, [r3, #3]
 8002168:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e018      	b.n	80021a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2200      	movs	r2, #0
 8002182:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002190:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002196:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	78db      	ldrb	r3, [r3, #3]
 800219c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800219e:	4313      	orrs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	22ca      	movs	r2, #202	; 0xca
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2253      	movs	r2, #83	; 0x53
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f991 	bl	80024da <RTC_EnterInitMode>
 80021b8:	4603      	mov	r3, r0
 80021ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d120      	bne.n	8002204 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80021cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021d0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f9a4 	bl	8002548 <RTC_ExitInitMode>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	771a      	strb	r2, [r3, #28]

  return status;
 800221e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002220:	4618      	mov	r0, r3
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd90      	pop	{r4, r7, pc}

08002228 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800225a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800225e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800226a:	b2da      	uxtb	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800227a:	b2da      	uxtb	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	0d9b      	lsrs	r3, r3, #22
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11a      	bne.n	80022da <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f98f 	bl	80025cc <RTC_Bcd2ToByte>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f986 	bl	80025cc <RTC_Bcd2ToByte>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	789b      	ldrb	r3, [r3, #2]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 f97d 	bl	80025cc <RTC_Bcd2ToByte>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	7f1b      	ldrb	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_RTC_SetDate+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e071      	b.n	80023e4 <HAL_RTC_SetDate+0x100>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2202      	movs	r2, #2
 800230a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10e      	bne.n	8002330 <HAL_RTC_SetDate+0x4c>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	785b      	ldrb	r3, [r3, #1]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	f023 0310 	bic.w	r3, r3, #16
 8002326:	b2db      	uxtb	r3, r3
 8002328:	330a      	adds	r3, #10
 800232a:	b2da      	uxtb	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11c      	bne.n	8002370 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	78db      	ldrb	r3, [r3, #3]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f929 	bl	8002592 <RTC_ByteToBcd2>
 8002340:	4603      	mov	r3, r0
 8002342:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f922 	bl	8002592 <RTC_ByteToBcd2>
 800234e:	4603      	mov	r3, r0
 8002350:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002352:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f91a 	bl	8002592 <RTC_ByteToBcd2>
 800235e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002360:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e00e      	b.n	800238e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	78db      	ldrb	r3, [r3, #3]
 8002374:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800237c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002382:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	22ca      	movs	r2, #202	; 0xca
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2253      	movs	r2, #83	; 0x53
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f89b 	bl	80024da <RTC_EnterInitMode>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f8c2 	bl	8002548 <RTC_ExitInitMode>
 80023c4:	4603      	mov	r3, r0
 80023c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	771a      	strb	r2, [r3, #28]

  return status;
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd90      	pop	{r4, r7, pc}

080023ec <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002406:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800240a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800242e:	b2da      	uxtb	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	0b5b      	lsrs	r3, r3, #13
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	b2da      	uxtb	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11a      	bne.n	8002480 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	78db      	ldrb	r3, [r3, #3]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f8bc 	bl	80025cc <RTC_Bcd2ToByte>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f8b3 	bl	80025cc <RTC_Bcd2ToByte>
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	789b      	ldrb	r3, [r3, #2]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f8aa 	bl	80025cc <RTC_Bcd2ToByte>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024a4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a6:	f7fe fc11 	bl	8000ccc <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024ac:	e009      	b.n	80024c2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024ae:	f7fe fc0d 	bl	8000ccc <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024bc:	d901      	bls.n	80024c2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e007      	b.n	80024d2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d122      	bne.n	800253e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002506:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe fbe0 	bl	8000ccc <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800250e:	e00c      	b.n	800252a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002510:	f7fe fbdc 	bl	8000ccc <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251e:	d904      	bls.n	800252a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2204      	movs	r2, #4
 8002524:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <RTC_EnterInitMode+0x64>
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d1e8      	bne.n	8002510 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002562:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff89 	bl	800248a <HAL_RTC_WaitForSynchro>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2204      	movs	r2, #4
 8002582:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80025a0:	e005      	b.n	80025ae <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	3301      	adds	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	3b0a      	subs	r3, #10
 80025ac:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b09      	cmp	r3, #9
 80025b2:	d8f6      	bhi.n	80025a2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	4313      	orrs	r3, r2
 80025be:	b2db      	uxtb	r3, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	4413      	add	r3, r2
 80025f6:	b2db      	uxtb	r3, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e03f      	b.n	8002696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe f9b2 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2224      	movs	r2, #36	; 0x24
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f929 	bl	80028a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800265c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800266c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800267c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b08a      	sub	sp, #40	; 0x28
 80026a2:	af02      	add	r7, sp, #8
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d17c      	bne.n	80027b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_UART_Transmit+0x2c>
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e075      	b.n	80027ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_UART_Transmit+0x3e>
 80026d8:	2302      	movs	r3, #2
 80026da:	e06e      	b.n	80027ba <HAL_UART_Transmit+0x11c>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2221      	movs	r2, #33	; 0x21
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f2:	f7fe faeb 	bl	8000ccc <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	88fa      	ldrh	r2, [r7, #6]
 8002702:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270c:	d108      	bne.n	8002720 <HAL_UART_Transmit+0x82>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e003      	b.n	8002728 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002730:	e02a      	b.n	8002788 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f840 	bl	80027c2 <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e036      	b.n	80027ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3302      	adds	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e007      	b.n	800277a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	3301      	adds	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1cf      	bne.n	8002732 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2200      	movs	r2, #0
 800279a:	2140      	movs	r1, #64	; 0x40
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f810 	bl	80027c2 <UART_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e006      	b.n	80027ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b090      	sub	sp, #64	; 0x40
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d2:	e050      	b.n	8002876 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d04c      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80027e2:	f7fe fa73 	bl	8000ccc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d241      	bcs.n	8002876 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	330c      	adds	r3, #12
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	e853 3f00 	ldrex	r3, [r3]
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002812:	637a      	str	r2, [r7, #52]	; 0x34
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e5      	bne.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3314      	adds	r3, #20
 800282c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	613b      	str	r3, [r7, #16]
   return(result);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3314      	adds	r3, #20
 8002844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002846:	623a      	str	r2, [r7, #32]
 8002848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	69f9      	ldr	r1, [r7, #28]
 800284c:	6a3a      	ldr	r2, [r7, #32]
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	61bb      	str	r3, [r7, #24]
   return(result);
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e5      	bne.n	8002826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e00f      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	429a      	cmp	r2, r3
 8002892:	d09f      	beq.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3740      	adds	r7, #64	; 0x40
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a4:	b0c0      	sub	sp, #256	; 0x100
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028bc:	68d9      	ldr	r1, [r3, #12]
 80028be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	ea40 0301 	orr.w	r3, r0, r1
 80028c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	431a      	orrs	r2, r3
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028f8:	f021 010c 	bic.w	r1, r1, #12
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002906:	430b      	orrs	r3, r1
 8002908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291a:	6999      	ldr	r1, [r3, #24]
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	ea40 0301 	orr.w	r3, r0, r1
 8002926:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b8f      	ldr	r3, [pc, #572]	; (8002b6c <UART_SetConfig+0x2cc>)
 8002930:	429a      	cmp	r2, r3
 8002932:	d005      	beq.n	8002940 <UART_SetConfig+0xa0>
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b8d      	ldr	r3, [pc, #564]	; (8002b70 <UART_SetConfig+0x2d0>)
 800293c:	429a      	cmp	r2, r3
 800293e:	d104      	bne.n	800294a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002940:	f7ff f98e 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 8002944:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002948:	e003      	b.n	8002952 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800294a:	f7ff f975 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 800294e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800295c:	f040 810c 	bne.w	8002b78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800296a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800296e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002972:	4622      	mov	r2, r4
 8002974:	462b      	mov	r3, r5
 8002976:	1891      	adds	r1, r2, r2
 8002978:	65b9      	str	r1, [r7, #88]	; 0x58
 800297a:	415b      	adcs	r3, r3
 800297c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800297e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002982:	4621      	mov	r1, r4
 8002984:	eb12 0801 	adds.w	r8, r2, r1
 8002988:	4629      	mov	r1, r5
 800298a:	eb43 0901 	adc.w	r9, r3, r1
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800299a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800299e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a2:	4690      	mov	r8, r2
 80029a4:	4699      	mov	r9, r3
 80029a6:	4623      	mov	r3, r4
 80029a8:	eb18 0303 	adds.w	r3, r8, r3
 80029ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029b0:	462b      	mov	r3, r5
 80029b2:	eb49 0303 	adc.w	r3, r9, r3
 80029b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029ce:	460b      	mov	r3, r1
 80029d0:	18db      	adds	r3, r3, r3
 80029d2:	653b      	str	r3, [r7, #80]	; 0x50
 80029d4:	4613      	mov	r3, r2
 80029d6:	eb42 0303 	adc.w	r3, r2, r3
 80029da:	657b      	str	r3, [r7, #84]	; 0x54
 80029dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029e4:	f7fd fc54 	bl	8000290 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <UART_SetConfig+0x2d4>)
 80029ee:	fba3 2302 	umull	r2, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	011c      	lsls	r4, r3, #4
 80029f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a08:	4642      	mov	r2, r8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	1891      	adds	r1, r2, r2
 8002a0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a10:	415b      	adcs	r3, r3
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a18:	4641      	mov	r1, r8
 8002a1a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a1e:	4649      	mov	r1, r9
 8002a20:	eb43 0b01 	adc.w	fp, r3, r1
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a38:	4692      	mov	sl, r2
 8002a3a:	469b      	mov	fp, r3
 8002a3c:	4643      	mov	r3, r8
 8002a3e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a46:	464b      	mov	r3, r9
 8002a48:	eb4b 0303 	adc.w	r3, fp, r3
 8002a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a64:	460b      	mov	r3, r1
 8002a66:	18db      	adds	r3, r3, r3
 8002a68:	643b      	str	r3, [r7, #64]	; 0x40
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	eb42 0303 	adc.w	r3, r2, r3
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
 8002a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a7a:	f7fd fc09 	bl	8000290 <__aeabi_uldivmod>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <UART_SetConfig+0x2d4>)
 8002a86:	fba3 2301 	umull	r2, r3, r3, r1
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2264      	movs	r2, #100	; 0x64
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	1acb      	subs	r3, r1, r3
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <UART_SetConfig+0x2d4>)
 8002a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aa8:	441c      	add	r4, r3
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ab4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ab8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002acc:	4641      	mov	r1, r8
 8002ace:	1851      	adds	r1, r2, r1
 8002ad0:	6339      	str	r1, [r7, #48]	; 0x30
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	414b      	adcs	r3, r1
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ae4:	4659      	mov	r1, fp
 8002ae6:	00cb      	lsls	r3, r1, #3
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aee:	4651      	mov	r1, sl
 8002af0:	00ca      	lsls	r2, r1, #3
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	4642      	mov	r2, r8
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b00:	464b      	mov	r3, r9
 8002b02:	460a      	mov	r2, r1
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b20:	460b      	mov	r3, r1
 8002b22:	18db      	adds	r3, r3, r3
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b26:	4613      	mov	r3, r2
 8002b28:	eb42 0303 	adc.w	r3, r2, r3
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b36:	f7fd fbab 	bl	8000290 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <UART_SetConfig+0x2d4>)
 8002b40:	fba3 1302 	umull	r1, r3, r3, r2
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	2164      	movs	r1, #100	; 0x64
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	3332      	adds	r3, #50	; 0x32
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <UART_SetConfig+0x2d4>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	f003 0207 	and.w	r2, r3, #7
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4422      	add	r2, r4
 8002b66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b68:	e105      	b.n	8002d76 <UART_SetConfig+0x4d6>
 8002b6a:	bf00      	nop
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	40011400 	.word	0x40011400
 8002b74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b8a:	4642      	mov	r2, r8
 8002b8c:	464b      	mov	r3, r9
 8002b8e:	1891      	adds	r1, r2, r2
 8002b90:	6239      	str	r1, [r7, #32]
 8002b92:	415b      	adcs	r3, r3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
 8002b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	1854      	adds	r4, r2, r1
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	eb43 0501 	adc.w	r5, r3, r1
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	00eb      	lsls	r3, r5, #3
 8002bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb2:	00e2      	lsls	r2, r4, #3
 8002bb4:	4614      	mov	r4, r2
 8002bb6:	461d      	mov	r5, r3
 8002bb8:	4643      	mov	r3, r8
 8002bba:	18e3      	adds	r3, r4, r3
 8002bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	eb45 0303 	adc.w	r3, r5, r3
 8002bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002be6:	4629      	mov	r1, r5
 8002be8:	008b      	lsls	r3, r1, #2
 8002bea:	4621      	mov	r1, r4
 8002bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	008a      	lsls	r2, r1, #2
 8002bf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bf8:	f7fd fb4a 	bl	8000290 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <UART_SetConfig+0x4e4>)
 8002c02:	fba3 2302 	umull	r2, r3, r3, r2
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	011c      	lsls	r4, r3, #4
 8002c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	464b      	mov	r3, r9
 8002c20:	1891      	adds	r1, r2, r2
 8002c22:	61b9      	str	r1, [r7, #24]
 8002c24:	415b      	adcs	r3, r3
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	1851      	adds	r1, r2, r1
 8002c30:	6139      	str	r1, [r7, #16]
 8002c32:	4649      	mov	r1, r9
 8002c34:	414b      	adcs	r3, r1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c44:	4659      	mov	r1, fp
 8002c46:	00cb      	lsls	r3, r1, #3
 8002c48:	4651      	mov	r1, sl
 8002c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4e:	4651      	mov	r1, sl
 8002c50:	00ca      	lsls	r2, r1, #3
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	4642      	mov	r2, r8
 8002c5a:	189b      	adds	r3, r3, r2
 8002c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c60:	464b      	mov	r3, r9
 8002c62:	460a      	mov	r2, r1
 8002c64:	eb42 0303 	adc.w	r3, r2, r3
 8002c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c84:	4649      	mov	r1, r9
 8002c86:	008b      	lsls	r3, r1, #2
 8002c88:	4641      	mov	r1, r8
 8002c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c8e:	4641      	mov	r1, r8
 8002c90:	008a      	lsls	r2, r1, #2
 8002c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c96:	f7fd fafb 	bl	8000290 <__aeabi_uldivmod>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <UART_SetConfig+0x4e4>)
 8002ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	2164      	movs	r1, #100	; 0x64
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	3332      	adds	r3, #50	; 0x32
 8002cb2:	4a34      	ldr	r2, [pc, #208]	; (8002d84 <UART_SetConfig+0x4e4>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cbe:	441c      	add	r4, r3
 8002cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8002cc8:	677a      	str	r2, [r7, #116]	; 0x74
 8002cca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cce:	4642      	mov	r2, r8
 8002cd0:	464b      	mov	r3, r9
 8002cd2:	1891      	adds	r1, r2, r2
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	415b      	adcs	r3, r3
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cde:	4641      	mov	r1, r8
 8002ce0:	1851      	adds	r1, r2, r1
 8002ce2:	6039      	str	r1, [r7, #0]
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	414b      	adcs	r3, r1
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cf6:	4659      	mov	r1, fp
 8002cf8:	00cb      	lsls	r3, r1, #3
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d00:	4651      	mov	r1, sl
 8002d02:	00ca      	lsls	r2, r1, #3
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4642      	mov	r2, r8
 8002d0c:	189b      	adds	r3, r3, r2
 8002d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d10:	464b      	mov	r3, r9
 8002d12:	460a      	mov	r2, r1
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	663b      	str	r3, [r7, #96]	; 0x60
 8002d24:	667a      	str	r2, [r7, #100]	; 0x64
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d32:	4649      	mov	r1, r9
 8002d34:	008b      	lsls	r3, r1, #2
 8002d36:	4641      	mov	r1, r8
 8002d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	008a      	lsls	r2, r1, #2
 8002d40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d44:	f7fd faa4 	bl	8000290 <__aeabi_uldivmod>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <UART_SetConfig+0x4e4>)
 8002d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2164      	movs	r1, #100	; 0x64
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	3332      	adds	r3, #50	; 0x32
 8002d60:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <UART_SetConfig+0x4e4>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4422      	add	r2, r4
 8002d74:	609a      	str	r2, [r3, #8]
}
 8002d76:	bf00      	nop
 8002d78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d82:	bf00      	nop
 8002d84:	51eb851f 	.word	0x51eb851f

08002d88 <__errno>:
 8002d88:	4b01      	ldr	r3, [pc, #4]	; (8002d90 <__errno+0x8>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	2000000c 	.word	0x2000000c

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	4d0d      	ldr	r5, [pc, #52]	; (8002dcc <__libc_init_array+0x38>)
 8002d98:	4c0d      	ldr	r4, [pc, #52]	; (8002dd0 <__libc_init_array+0x3c>)
 8002d9a:	1b64      	subs	r4, r4, r5
 8002d9c:	10a4      	asrs	r4, r4, #2
 8002d9e:	2600      	movs	r6, #0
 8002da0:	42a6      	cmp	r6, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	4d0b      	ldr	r5, [pc, #44]	; (8002dd4 <__libc_init_array+0x40>)
 8002da6:	4c0c      	ldr	r4, [pc, #48]	; (8002dd8 <__libc_init_array+0x44>)
 8002da8:	f000 ffae 	bl	8003d08 <_init>
 8002dac:	1b64      	subs	r4, r4, r5
 8002dae:	10a4      	asrs	r4, r4, #2
 8002db0:	2600      	movs	r6, #0
 8002db2:	42a6      	cmp	r6, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbc:	4798      	blx	r3
 8002dbe:	3601      	adds	r6, #1
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc6:	4798      	blx	r3
 8002dc8:	3601      	adds	r6, #1
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	08003dfc 	.word	0x08003dfc
 8002dd0:	08003dfc 	.word	0x08003dfc
 8002dd4:	08003dfc 	.word	0x08003dfc
 8002dd8:	08003e00 	.word	0x08003e00

08002ddc <memset>:
 8002ddc:	4402      	add	r2, r0
 8002dde:	4603      	mov	r3, r0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <iprintf>:
 8002dec:	b40f      	push	{r0, r1, r2, r3}
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <iprintf+0x2c>)
 8002df0:	b513      	push	{r0, r1, r4, lr}
 8002df2:	681c      	ldr	r4, [r3, #0]
 8002df4:	b124      	cbz	r4, 8002e00 <iprintf+0x14>
 8002df6:	69a3      	ldr	r3, [r4, #24]
 8002df8:	b913      	cbnz	r3, 8002e00 <iprintf+0x14>
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f000 f866 	bl	8002ecc <__sinit>
 8002e00:	ab05      	add	r3, sp, #20
 8002e02:	9a04      	ldr	r2, [sp, #16]
 8002e04:	68a1      	ldr	r1, [r4, #8]
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f000 f9bd 	bl	8003188 <_vfiprintf_r>
 8002e0e:	b002      	add	sp, #8
 8002e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e14:	b004      	add	sp, #16
 8002e16:	4770      	bx	lr
 8002e18:	2000000c 	.word	0x2000000c

08002e1c <std>:
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	b510      	push	{r4, lr}
 8002e20:	4604      	mov	r4, r0
 8002e22:	e9c0 3300 	strd	r3, r3, [r0]
 8002e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e2a:	6083      	str	r3, [r0, #8]
 8002e2c:	8181      	strh	r1, [r0, #12]
 8002e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8002e30:	81c2      	strh	r2, [r0, #14]
 8002e32:	6183      	str	r3, [r0, #24]
 8002e34:	4619      	mov	r1, r3
 8002e36:	2208      	movs	r2, #8
 8002e38:	305c      	adds	r0, #92	; 0x5c
 8002e3a:	f7ff ffcf 	bl	8002ddc <memset>
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <std+0x38>)
 8002e40:	6263      	str	r3, [r4, #36]	; 0x24
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <std+0x3c>)
 8002e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <std+0x40>)
 8002e48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <std+0x44>)
 8002e4c:	6224      	str	r4, [r4, #32]
 8002e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8002e50:	bd10      	pop	{r4, pc}
 8002e52:	bf00      	nop
 8002e54:	08003731 	.word	0x08003731
 8002e58:	08003753 	.word	0x08003753
 8002e5c:	0800378b 	.word	0x0800378b
 8002e60:	080037af 	.word	0x080037af

08002e64 <_cleanup_r>:
 8002e64:	4901      	ldr	r1, [pc, #4]	; (8002e6c <_cleanup_r+0x8>)
 8002e66:	f000 b8af 	b.w	8002fc8 <_fwalk_reent>
 8002e6a:	bf00      	nop
 8002e6c:	08003a89 	.word	0x08003a89

08002e70 <__sfmoreglue>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	2268      	movs	r2, #104	; 0x68
 8002e74:	1e4d      	subs	r5, r1, #1
 8002e76:	4355      	muls	r5, r2
 8002e78:	460e      	mov	r6, r1
 8002e7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e7e:	f000 f8e5 	bl	800304c <_malloc_r>
 8002e82:	4604      	mov	r4, r0
 8002e84:	b140      	cbz	r0, 8002e98 <__sfmoreglue+0x28>
 8002e86:	2100      	movs	r1, #0
 8002e88:	e9c0 1600 	strd	r1, r6, [r0]
 8002e8c:	300c      	adds	r0, #12
 8002e8e:	60a0      	str	r0, [r4, #8]
 8002e90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e94:	f7ff ffa2 	bl	8002ddc <memset>
 8002e98:	4620      	mov	r0, r4
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}

08002e9c <__sfp_lock_acquire>:
 8002e9c:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <__sfp_lock_acquire+0x8>)
 8002e9e:	f000 b8b3 	b.w	8003008 <__retarget_lock_acquire_recursive>
 8002ea2:	bf00      	nop
 8002ea4:	200000fd 	.word	0x200000fd

08002ea8 <__sfp_lock_release>:
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <__sfp_lock_release+0x8>)
 8002eaa:	f000 b8ae 	b.w	800300a <__retarget_lock_release_recursive>
 8002eae:	bf00      	nop
 8002eb0:	200000fd 	.word	0x200000fd

08002eb4 <__sinit_lock_acquire>:
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <__sinit_lock_acquire+0x8>)
 8002eb6:	f000 b8a7 	b.w	8003008 <__retarget_lock_acquire_recursive>
 8002eba:	bf00      	nop
 8002ebc:	200000fe 	.word	0x200000fe

08002ec0 <__sinit_lock_release>:
 8002ec0:	4801      	ldr	r0, [pc, #4]	; (8002ec8 <__sinit_lock_release+0x8>)
 8002ec2:	f000 b8a2 	b.w	800300a <__retarget_lock_release_recursive>
 8002ec6:	bf00      	nop
 8002ec8:	200000fe 	.word	0x200000fe

08002ecc <__sinit>:
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	f7ff fff0 	bl	8002eb4 <__sinit_lock_acquire>
 8002ed4:	69a3      	ldr	r3, [r4, #24]
 8002ed6:	b11b      	cbz	r3, 8002ee0 <__sinit+0x14>
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002edc:	f7ff bff0 	b.w	8002ec0 <__sinit_lock_release>
 8002ee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ee4:	6523      	str	r3, [r4, #80]	; 0x50
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <__sinit+0x68>)
 8002ee8:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <__sinit+0x6c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	62a2      	str	r2, [r4, #40]	; 0x28
 8002eee:	42a3      	cmp	r3, r4
 8002ef0:	bf04      	itt	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	61a3      	streq	r3, [r4, #24]
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f000 f820 	bl	8002f3c <__sfp>
 8002efc:	6060      	str	r0, [r4, #4]
 8002efe:	4620      	mov	r0, r4
 8002f00:	f000 f81c 	bl	8002f3c <__sfp>
 8002f04:	60a0      	str	r0, [r4, #8]
 8002f06:	4620      	mov	r0, r4
 8002f08:	f000 f818 	bl	8002f3c <__sfp>
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60e0      	str	r0, [r4, #12]
 8002f10:	2104      	movs	r1, #4
 8002f12:	6860      	ldr	r0, [r4, #4]
 8002f14:	f7ff ff82 	bl	8002e1c <std>
 8002f18:	68a0      	ldr	r0, [r4, #8]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2109      	movs	r1, #9
 8002f1e:	f7ff ff7d 	bl	8002e1c <std>
 8002f22:	68e0      	ldr	r0, [r4, #12]
 8002f24:	2202      	movs	r2, #2
 8002f26:	2112      	movs	r1, #18
 8002f28:	f7ff ff78 	bl	8002e1c <std>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61a3      	str	r3, [r4, #24]
 8002f30:	e7d2      	b.n	8002ed8 <__sinit+0xc>
 8002f32:	bf00      	nop
 8002f34:	08003d5c 	.word	0x08003d5c
 8002f38:	08002e65 	.word	0x08002e65

08002f3c <__sfp>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	4607      	mov	r7, r0
 8002f40:	f7ff ffac 	bl	8002e9c <__sfp_lock_acquire>
 8002f44:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <__sfp+0x84>)
 8002f46:	681e      	ldr	r6, [r3, #0]
 8002f48:	69b3      	ldr	r3, [r6, #24]
 8002f4a:	b913      	cbnz	r3, 8002f52 <__sfp+0x16>
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	f7ff ffbd 	bl	8002ecc <__sinit>
 8002f52:	3648      	adds	r6, #72	; 0x48
 8002f54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	d503      	bpl.n	8002f64 <__sfp+0x28>
 8002f5c:	6833      	ldr	r3, [r6, #0]
 8002f5e:	b30b      	cbz	r3, 8002fa4 <__sfp+0x68>
 8002f60:	6836      	ldr	r6, [r6, #0]
 8002f62:	e7f7      	b.n	8002f54 <__sfp+0x18>
 8002f64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f68:	b9d5      	cbnz	r5, 8002fa0 <__sfp+0x64>
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <__sfp+0x88>)
 8002f6c:	60e3      	str	r3, [r4, #12]
 8002f6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f72:	6665      	str	r5, [r4, #100]	; 0x64
 8002f74:	f000 f847 	bl	8003006 <__retarget_lock_init_recursive>
 8002f78:	f7ff ff96 	bl	8002ea8 <__sfp_lock_release>
 8002f7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f84:	6025      	str	r5, [r4, #0]
 8002f86:	61a5      	str	r5, [r4, #24]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f90:	f7ff ff24 	bl	8002ddc <memset>
 8002f94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa0:	3468      	adds	r4, #104	; 0x68
 8002fa2:	e7d9      	b.n	8002f58 <__sfp+0x1c>
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	f7ff ff62 	bl	8002e70 <__sfmoreglue>
 8002fac:	4604      	mov	r4, r0
 8002fae:	6030      	str	r0, [r6, #0]
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d1d5      	bne.n	8002f60 <__sfp+0x24>
 8002fb4:	f7ff ff78 	bl	8002ea8 <__sfp_lock_release>
 8002fb8:	230c      	movs	r3, #12
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	e7ee      	b.n	8002f9c <__sfp+0x60>
 8002fbe:	bf00      	nop
 8002fc0:	08003d5c 	.word	0x08003d5c
 8002fc4:	ffff0001 	.word	0xffff0001

08002fc8 <_fwalk_reent>:
 8002fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fcc:	4606      	mov	r6, r0
 8002fce:	4688      	mov	r8, r1
 8002fd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fd4:	2700      	movs	r7, #0
 8002fd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fda:	f1b9 0901 	subs.w	r9, r9, #1
 8002fde:	d505      	bpl.n	8002fec <_fwalk_reent+0x24>
 8002fe0:	6824      	ldr	r4, [r4, #0]
 8002fe2:	2c00      	cmp	r4, #0
 8002fe4:	d1f7      	bne.n	8002fd6 <_fwalk_reent+0xe>
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fec:	89ab      	ldrh	r3, [r5, #12]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d907      	bls.n	8003002 <_fwalk_reent+0x3a>
 8002ff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	d003      	beq.n	8003002 <_fwalk_reent+0x3a>
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	47c0      	blx	r8
 8003000:	4307      	orrs	r7, r0
 8003002:	3568      	adds	r5, #104	; 0x68
 8003004:	e7e9      	b.n	8002fda <_fwalk_reent+0x12>

08003006 <__retarget_lock_init_recursive>:
 8003006:	4770      	bx	lr

08003008 <__retarget_lock_acquire_recursive>:
 8003008:	4770      	bx	lr

0800300a <__retarget_lock_release_recursive>:
 800300a:	4770      	bx	lr

0800300c <sbrk_aligned>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	4e0e      	ldr	r6, [pc, #56]	; (8003048 <sbrk_aligned+0x3c>)
 8003010:	460c      	mov	r4, r1
 8003012:	6831      	ldr	r1, [r6, #0]
 8003014:	4605      	mov	r5, r0
 8003016:	b911      	cbnz	r1, 800301e <sbrk_aligned+0x12>
 8003018:	f000 fb7a 	bl	8003710 <_sbrk_r>
 800301c:	6030      	str	r0, [r6, #0]
 800301e:	4621      	mov	r1, r4
 8003020:	4628      	mov	r0, r5
 8003022:	f000 fb75 	bl	8003710 <_sbrk_r>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	d00a      	beq.n	8003040 <sbrk_aligned+0x34>
 800302a:	1cc4      	adds	r4, r0, #3
 800302c:	f024 0403 	bic.w	r4, r4, #3
 8003030:	42a0      	cmp	r0, r4
 8003032:	d007      	beq.n	8003044 <sbrk_aligned+0x38>
 8003034:	1a21      	subs	r1, r4, r0
 8003036:	4628      	mov	r0, r5
 8003038:	f000 fb6a 	bl	8003710 <_sbrk_r>
 800303c:	3001      	adds	r0, #1
 800303e:	d101      	bne.n	8003044 <sbrk_aligned+0x38>
 8003040:	f04f 34ff 	mov.w	r4, #4294967295
 8003044:	4620      	mov	r0, r4
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	20000104 	.word	0x20000104

0800304c <_malloc_r>:
 800304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003050:	1ccd      	adds	r5, r1, #3
 8003052:	f025 0503 	bic.w	r5, r5, #3
 8003056:	3508      	adds	r5, #8
 8003058:	2d0c      	cmp	r5, #12
 800305a:	bf38      	it	cc
 800305c:	250c      	movcc	r5, #12
 800305e:	2d00      	cmp	r5, #0
 8003060:	4607      	mov	r7, r0
 8003062:	db01      	blt.n	8003068 <_malloc_r+0x1c>
 8003064:	42a9      	cmp	r1, r5
 8003066:	d905      	bls.n	8003074 <_malloc_r+0x28>
 8003068:	230c      	movs	r3, #12
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	2600      	movs	r6, #0
 800306e:	4630      	mov	r0, r6
 8003070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003074:	4e2e      	ldr	r6, [pc, #184]	; (8003130 <_malloc_r+0xe4>)
 8003076:	f000 fdbb 	bl	8003bf0 <__malloc_lock>
 800307a:	6833      	ldr	r3, [r6, #0]
 800307c:	461c      	mov	r4, r3
 800307e:	bb34      	cbnz	r4, 80030ce <_malloc_r+0x82>
 8003080:	4629      	mov	r1, r5
 8003082:	4638      	mov	r0, r7
 8003084:	f7ff ffc2 	bl	800300c <sbrk_aligned>
 8003088:	1c43      	adds	r3, r0, #1
 800308a:	4604      	mov	r4, r0
 800308c:	d14d      	bne.n	800312a <_malloc_r+0xde>
 800308e:	6834      	ldr	r4, [r6, #0]
 8003090:	4626      	mov	r6, r4
 8003092:	2e00      	cmp	r6, #0
 8003094:	d140      	bne.n	8003118 <_malloc_r+0xcc>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	4631      	mov	r1, r6
 800309a:	4638      	mov	r0, r7
 800309c:	eb04 0803 	add.w	r8, r4, r3
 80030a0:	f000 fb36 	bl	8003710 <_sbrk_r>
 80030a4:	4580      	cmp	r8, r0
 80030a6:	d13a      	bne.n	800311e <_malloc_r+0xd2>
 80030a8:	6821      	ldr	r1, [r4, #0]
 80030aa:	3503      	adds	r5, #3
 80030ac:	1a6d      	subs	r5, r5, r1
 80030ae:	f025 0503 	bic.w	r5, r5, #3
 80030b2:	3508      	adds	r5, #8
 80030b4:	2d0c      	cmp	r5, #12
 80030b6:	bf38      	it	cc
 80030b8:	250c      	movcc	r5, #12
 80030ba:	4629      	mov	r1, r5
 80030bc:	4638      	mov	r0, r7
 80030be:	f7ff ffa5 	bl	800300c <sbrk_aligned>
 80030c2:	3001      	adds	r0, #1
 80030c4:	d02b      	beq.n	800311e <_malloc_r+0xd2>
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	442b      	add	r3, r5
 80030ca:	6023      	str	r3, [r4, #0]
 80030cc:	e00e      	b.n	80030ec <_malloc_r+0xa0>
 80030ce:	6822      	ldr	r2, [r4, #0]
 80030d0:	1b52      	subs	r2, r2, r5
 80030d2:	d41e      	bmi.n	8003112 <_malloc_r+0xc6>
 80030d4:	2a0b      	cmp	r2, #11
 80030d6:	d916      	bls.n	8003106 <_malloc_r+0xba>
 80030d8:	1961      	adds	r1, r4, r5
 80030da:	42a3      	cmp	r3, r4
 80030dc:	6025      	str	r5, [r4, #0]
 80030de:	bf18      	it	ne
 80030e0:	6059      	strne	r1, [r3, #4]
 80030e2:	6863      	ldr	r3, [r4, #4]
 80030e4:	bf08      	it	eq
 80030e6:	6031      	streq	r1, [r6, #0]
 80030e8:	5162      	str	r2, [r4, r5]
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	4638      	mov	r0, r7
 80030ee:	f104 060b 	add.w	r6, r4, #11
 80030f2:	f000 fd83 	bl	8003bfc <__malloc_unlock>
 80030f6:	f026 0607 	bic.w	r6, r6, #7
 80030fa:	1d23      	adds	r3, r4, #4
 80030fc:	1af2      	subs	r2, r6, r3
 80030fe:	d0b6      	beq.n	800306e <_malloc_r+0x22>
 8003100:	1b9b      	subs	r3, r3, r6
 8003102:	50a3      	str	r3, [r4, r2]
 8003104:	e7b3      	b.n	800306e <_malloc_r+0x22>
 8003106:	6862      	ldr	r2, [r4, #4]
 8003108:	42a3      	cmp	r3, r4
 800310a:	bf0c      	ite	eq
 800310c:	6032      	streq	r2, [r6, #0]
 800310e:	605a      	strne	r2, [r3, #4]
 8003110:	e7ec      	b.n	80030ec <_malloc_r+0xa0>
 8003112:	4623      	mov	r3, r4
 8003114:	6864      	ldr	r4, [r4, #4]
 8003116:	e7b2      	b.n	800307e <_malloc_r+0x32>
 8003118:	4634      	mov	r4, r6
 800311a:	6876      	ldr	r6, [r6, #4]
 800311c:	e7b9      	b.n	8003092 <_malloc_r+0x46>
 800311e:	230c      	movs	r3, #12
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4638      	mov	r0, r7
 8003124:	f000 fd6a 	bl	8003bfc <__malloc_unlock>
 8003128:	e7a1      	b.n	800306e <_malloc_r+0x22>
 800312a:	6025      	str	r5, [r4, #0]
 800312c:	e7de      	b.n	80030ec <_malloc_r+0xa0>
 800312e:	bf00      	nop
 8003130:	20000100 	.word	0x20000100

08003134 <__sfputc_r>:
 8003134:	6893      	ldr	r3, [r2, #8]
 8003136:	3b01      	subs	r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	b410      	push	{r4}
 800313c:	6093      	str	r3, [r2, #8]
 800313e:	da08      	bge.n	8003152 <__sfputc_r+0x1e>
 8003140:	6994      	ldr	r4, [r2, #24]
 8003142:	42a3      	cmp	r3, r4
 8003144:	db01      	blt.n	800314a <__sfputc_r+0x16>
 8003146:	290a      	cmp	r1, #10
 8003148:	d103      	bne.n	8003152 <__sfputc_r+0x1e>
 800314a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800314e:	f000 bb33 	b.w	80037b8 <__swbuf_r>
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	6010      	str	r0, [r2, #0]
 8003158:	7019      	strb	r1, [r3, #0]
 800315a:	4608      	mov	r0, r1
 800315c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003160:	4770      	bx	lr

08003162 <__sfputs_r>:
 8003162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003164:	4606      	mov	r6, r0
 8003166:	460f      	mov	r7, r1
 8003168:	4614      	mov	r4, r2
 800316a:	18d5      	adds	r5, r2, r3
 800316c:	42ac      	cmp	r4, r5
 800316e:	d101      	bne.n	8003174 <__sfputs_r+0x12>
 8003170:	2000      	movs	r0, #0
 8003172:	e007      	b.n	8003184 <__sfputs_r+0x22>
 8003174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003178:	463a      	mov	r2, r7
 800317a:	4630      	mov	r0, r6
 800317c:	f7ff ffda 	bl	8003134 <__sfputc_r>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d1f3      	bne.n	800316c <__sfputs_r+0xa>
 8003184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003188 <_vfiprintf_r>:
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	460d      	mov	r5, r1
 800318e:	b09d      	sub	sp, #116	; 0x74
 8003190:	4614      	mov	r4, r2
 8003192:	4698      	mov	r8, r3
 8003194:	4606      	mov	r6, r0
 8003196:	b118      	cbz	r0, 80031a0 <_vfiprintf_r+0x18>
 8003198:	6983      	ldr	r3, [r0, #24]
 800319a:	b90b      	cbnz	r3, 80031a0 <_vfiprintf_r+0x18>
 800319c:	f7ff fe96 	bl	8002ecc <__sinit>
 80031a0:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <_vfiprintf_r+0x240>)
 80031a2:	429d      	cmp	r5, r3
 80031a4:	d11b      	bne.n	80031de <_vfiprintf_r+0x56>
 80031a6:	6875      	ldr	r5, [r6, #4]
 80031a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031aa:	07d9      	lsls	r1, r3, #31
 80031ac:	d405      	bmi.n	80031ba <_vfiprintf_r+0x32>
 80031ae:	89ab      	ldrh	r3, [r5, #12]
 80031b0:	059a      	lsls	r2, r3, #22
 80031b2:	d402      	bmi.n	80031ba <_vfiprintf_r+0x32>
 80031b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031b6:	f7ff ff27 	bl	8003008 <__retarget_lock_acquire_recursive>
 80031ba:	89ab      	ldrh	r3, [r5, #12]
 80031bc:	071b      	lsls	r3, r3, #28
 80031be:	d501      	bpl.n	80031c4 <_vfiprintf_r+0x3c>
 80031c0:	692b      	ldr	r3, [r5, #16]
 80031c2:	b9eb      	cbnz	r3, 8003200 <_vfiprintf_r+0x78>
 80031c4:	4629      	mov	r1, r5
 80031c6:	4630      	mov	r0, r6
 80031c8:	f000 fb5a 	bl	8003880 <__swsetup_r>
 80031cc:	b1c0      	cbz	r0, 8003200 <_vfiprintf_r+0x78>
 80031ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031d0:	07dc      	lsls	r4, r3, #31
 80031d2:	d50e      	bpl.n	80031f2 <_vfiprintf_r+0x6a>
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	b01d      	add	sp, #116	; 0x74
 80031da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031de:	4b7b      	ldr	r3, [pc, #492]	; (80033cc <_vfiprintf_r+0x244>)
 80031e0:	429d      	cmp	r5, r3
 80031e2:	d101      	bne.n	80031e8 <_vfiprintf_r+0x60>
 80031e4:	68b5      	ldr	r5, [r6, #8]
 80031e6:	e7df      	b.n	80031a8 <_vfiprintf_r+0x20>
 80031e8:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <_vfiprintf_r+0x248>)
 80031ea:	429d      	cmp	r5, r3
 80031ec:	bf08      	it	eq
 80031ee:	68f5      	ldreq	r5, [r6, #12]
 80031f0:	e7da      	b.n	80031a8 <_vfiprintf_r+0x20>
 80031f2:	89ab      	ldrh	r3, [r5, #12]
 80031f4:	0598      	lsls	r0, r3, #22
 80031f6:	d4ed      	bmi.n	80031d4 <_vfiprintf_r+0x4c>
 80031f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031fa:	f7ff ff06 	bl	800300a <__retarget_lock_release_recursive>
 80031fe:	e7e9      	b.n	80031d4 <_vfiprintf_r+0x4c>
 8003200:	2300      	movs	r3, #0
 8003202:	9309      	str	r3, [sp, #36]	; 0x24
 8003204:	2320      	movs	r3, #32
 8003206:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800320a:	f8cd 800c 	str.w	r8, [sp, #12]
 800320e:	2330      	movs	r3, #48	; 0x30
 8003210:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80033d4 <_vfiprintf_r+0x24c>
 8003214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003218:	f04f 0901 	mov.w	r9, #1
 800321c:	4623      	mov	r3, r4
 800321e:	469a      	mov	sl, r3
 8003220:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003224:	b10a      	cbz	r2, 800322a <_vfiprintf_r+0xa2>
 8003226:	2a25      	cmp	r2, #37	; 0x25
 8003228:	d1f9      	bne.n	800321e <_vfiprintf_r+0x96>
 800322a:	ebba 0b04 	subs.w	fp, sl, r4
 800322e:	d00b      	beq.n	8003248 <_vfiprintf_r+0xc0>
 8003230:	465b      	mov	r3, fp
 8003232:	4622      	mov	r2, r4
 8003234:	4629      	mov	r1, r5
 8003236:	4630      	mov	r0, r6
 8003238:	f7ff ff93 	bl	8003162 <__sfputs_r>
 800323c:	3001      	adds	r0, #1
 800323e:	f000 80aa 	beq.w	8003396 <_vfiprintf_r+0x20e>
 8003242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003244:	445a      	add	r2, fp
 8003246:	9209      	str	r2, [sp, #36]	; 0x24
 8003248:	f89a 3000 	ldrb.w	r3, [sl]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a2 	beq.w	8003396 <_vfiprintf_r+0x20e>
 8003252:	2300      	movs	r3, #0
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800325c:	f10a 0a01 	add.w	sl, sl, #1
 8003260:	9304      	str	r3, [sp, #16]
 8003262:	9307      	str	r3, [sp, #28]
 8003264:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003268:	931a      	str	r3, [sp, #104]	; 0x68
 800326a:	4654      	mov	r4, sl
 800326c:	2205      	movs	r2, #5
 800326e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003272:	4858      	ldr	r0, [pc, #352]	; (80033d4 <_vfiprintf_r+0x24c>)
 8003274:	f7fc ffbc 	bl	80001f0 <memchr>
 8003278:	9a04      	ldr	r2, [sp, #16]
 800327a:	b9d8      	cbnz	r0, 80032b4 <_vfiprintf_r+0x12c>
 800327c:	06d1      	lsls	r1, r2, #27
 800327e:	bf44      	itt	mi
 8003280:	2320      	movmi	r3, #32
 8003282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003286:	0713      	lsls	r3, r2, #28
 8003288:	bf44      	itt	mi
 800328a:	232b      	movmi	r3, #43	; 0x2b
 800328c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003290:	f89a 3000 	ldrb.w	r3, [sl]
 8003294:	2b2a      	cmp	r3, #42	; 0x2a
 8003296:	d015      	beq.n	80032c4 <_vfiprintf_r+0x13c>
 8003298:	9a07      	ldr	r2, [sp, #28]
 800329a:	4654      	mov	r4, sl
 800329c:	2000      	movs	r0, #0
 800329e:	f04f 0c0a 	mov.w	ip, #10
 80032a2:	4621      	mov	r1, r4
 80032a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a8:	3b30      	subs	r3, #48	; 0x30
 80032aa:	2b09      	cmp	r3, #9
 80032ac:	d94e      	bls.n	800334c <_vfiprintf_r+0x1c4>
 80032ae:	b1b0      	cbz	r0, 80032de <_vfiprintf_r+0x156>
 80032b0:	9207      	str	r2, [sp, #28]
 80032b2:	e014      	b.n	80032de <_vfiprintf_r+0x156>
 80032b4:	eba0 0308 	sub.w	r3, r0, r8
 80032b8:	fa09 f303 	lsl.w	r3, r9, r3
 80032bc:	4313      	orrs	r3, r2
 80032be:	9304      	str	r3, [sp, #16]
 80032c0:	46a2      	mov	sl, r4
 80032c2:	e7d2      	b.n	800326a <_vfiprintf_r+0xe2>
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	1d19      	adds	r1, r3, #4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	9103      	str	r1, [sp, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bfbb      	ittet	lt
 80032d0:	425b      	neglt	r3, r3
 80032d2:	f042 0202 	orrlt.w	r2, r2, #2
 80032d6:	9307      	strge	r3, [sp, #28]
 80032d8:	9307      	strlt	r3, [sp, #28]
 80032da:	bfb8      	it	lt
 80032dc:	9204      	strlt	r2, [sp, #16]
 80032de:	7823      	ldrb	r3, [r4, #0]
 80032e0:	2b2e      	cmp	r3, #46	; 0x2e
 80032e2:	d10c      	bne.n	80032fe <_vfiprintf_r+0x176>
 80032e4:	7863      	ldrb	r3, [r4, #1]
 80032e6:	2b2a      	cmp	r3, #42	; 0x2a
 80032e8:	d135      	bne.n	8003356 <_vfiprintf_r+0x1ce>
 80032ea:	9b03      	ldr	r3, [sp, #12]
 80032ec:	1d1a      	adds	r2, r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	9203      	str	r2, [sp, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bfb8      	it	lt
 80032f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80032fa:	3402      	adds	r4, #2
 80032fc:	9305      	str	r3, [sp, #20]
 80032fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80033e4 <_vfiprintf_r+0x25c>
 8003302:	7821      	ldrb	r1, [r4, #0]
 8003304:	2203      	movs	r2, #3
 8003306:	4650      	mov	r0, sl
 8003308:	f7fc ff72 	bl	80001f0 <memchr>
 800330c:	b140      	cbz	r0, 8003320 <_vfiprintf_r+0x198>
 800330e:	2340      	movs	r3, #64	; 0x40
 8003310:	eba0 000a 	sub.w	r0, r0, sl
 8003314:	fa03 f000 	lsl.w	r0, r3, r0
 8003318:	9b04      	ldr	r3, [sp, #16]
 800331a:	4303      	orrs	r3, r0
 800331c:	3401      	adds	r4, #1
 800331e:	9304      	str	r3, [sp, #16]
 8003320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003324:	482c      	ldr	r0, [pc, #176]	; (80033d8 <_vfiprintf_r+0x250>)
 8003326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800332a:	2206      	movs	r2, #6
 800332c:	f7fc ff60 	bl	80001f0 <memchr>
 8003330:	2800      	cmp	r0, #0
 8003332:	d03f      	beq.n	80033b4 <_vfiprintf_r+0x22c>
 8003334:	4b29      	ldr	r3, [pc, #164]	; (80033dc <_vfiprintf_r+0x254>)
 8003336:	bb1b      	cbnz	r3, 8003380 <_vfiprintf_r+0x1f8>
 8003338:	9b03      	ldr	r3, [sp, #12]
 800333a:	3307      	adds	r3, #7
 800333c:	f023 0307 	bic.w	r3, r3, #7
 8003340:	3308      	adds	r3, #8
 8003342:	9303      	str	r3, [sp, #12]
 8003344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003346:	443b      	add	r3, r7
 8003348:	9309      	str	r3, [sp, #36]	; 0x24
 800334a:	e767      	b.n	800321c <_vfiprintf_r+0x94>
 800334c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003350:	460c      	mov	r4, r1
 8003352:	2001      	movs	r0, #1
 8003354:	e7a5      	b.n	80032a2 <_vfiprintf_r+0x11a>
 8003356:	2300      	movs	r3, #0
 8003358:	3401      	adds	r4, #1
 800335a:	9305      	str	r3, [sp, #20]
 800335c:	4619      	mov	r1, r3
 800335e:	f04f 0c0a 	mov.w	ip, #10
 8003362:	4620      	mov	r0, r4
 8003364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003368:	3a30      	subs	r2, #48	; 0x30
 800336a:	2a09      	cmp	r2, #9
 800336c:	d903      	bls.n	8003376 <_vfiprintf_r+0x1ee>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0c5      	beq.n	80032fe <_vfiprintf_r+0x176>
 8003372:	9105      	str	r1, [sp, #20]
 8003374:	e7c3      	b.n	80032fe <_vfiprintf_r+0x176>
 8003376:	fb0c 2101 	mla	r1, ip, r1, r2
 800337a:	4604      	mov	r4, r0
 800337c:	2301      	movs	r3, #1
 800337e:	e7f0      	b.n	8003362 <_vfiprintf_r+0x1da>
 8003380:	ab03      	add	r3, sp, #12
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	462a      	mov	r2, r5
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <_vfiprintf_r+0x258>)
 8003388:	a904      	add	r1, sp, #16
 800338a:	4630      	mov	r0, r6
 800338c:	f3af 8000 	nop.w
 8003390:	4607      	mov	r7, r0
 8003392:	1c78      	adds	r0, r7, #1
 8003394:	d1d6      	bne.n	8003344 <_vfiprintf_r+0x1bc>
 8003396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003398:	07d9      	lsls	r1, r3, #31
 800339a:	d405      	bmi.n	80033a8 <_vfiprintf_r+0x220>
 800339c:	89ab      	ldrh	r3, [r5, #12]
 800339e:	059a      	lsls	r2, r3, #22
 80033a0:	d402      	bmi.n	80033a8 <_vfiprintf_r+0x220>
 80033a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033a4:	f7ff fe31 	bl	800300a <__retarget_lock_release_recursive>
 80033a8:	89ab      	ldrh	r3, [r5, #12]
 80033aa:	065b      	lsls	r3, r3, #25
 80033ac:	f53f af12 	bmi.w	80031d4 <_vfiprintf_r+0x4c>
 80033b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033b2:	e711      	b.n	80031d8 <_vfiprintf_r+0x50>
 80033b4:	ab03      	add	r3, sp, #12
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	462a      	mov	r2, r5
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <_vfiprintf_r+0x258>)
 80033bc:	a904      	add	r1, sp, #16
 80033be:	4630      	mov	r0, r6
 80033c0:	f000 f880 	bl	80034c4 <_printf_i>
 80033c4:	e7e4      	b.n	8003390 <_vfiprintf_r+0x208>
 80033c6:	bf00      	nop
 80033c8:	08003d80 	.word	0x08003d80
 80033cc:	08003da0 	.word	0x08003da0
 80033d0:	08003d60 	.word	0x08003d60
 80033d4:	08003dc0 	.word	0x08003dc0
 80033d8:	08003dca 	.word	0x08003dca
 80033dc:	00000000 	.word	0x00000000
 80033e0:	08003163 	.word	0x08003163
 80033e4:	08003dc6 	.word	0x08003dc6

080033e8 <_printf_common>:
 80033e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ec:	4616      	mov	r6, r2
 80033ee:	4699      	mov	r9, r3
 80033f0:	688a      	ldr	r2, [r1, #8]
 80033f2:	690b      	ldr	r3, [r1, #16]
 80033f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bfb8      	it	lt
 80033fc:	4613      	movlt	r3, r2
 80033fe:	6033      	str	r3, [r6, #0]
 8003400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003404:	4607      	mov	r7, r0
 8003406:	460c      	mov	r4, r1
 8003408:	b10a      	cbz	r2, 800340e <_printf_common+0x26>
 800340a:	3301      	adds	r3, #1
 800340c:	6033      	str	r3, [r6, #0]
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	0699      	lsls	r1, r3, #26
 8003412:	bf42      	ittt	mi
 8003414:	6833      	ldrmi	r3, [r6, #0]
 8003416:	3302      	addmi	r3, #2
 8003418:	6033      	strmi	r3, [r6, #0]
 800341a:	6825      	ldr	r5, [r4, #0]
 800341c:	f015 0506 	ands.w	r5, r5, #6
 8003420:	d106      	bne.n	8003430 <_printf_common+0x48>
 8003422:	f104 0a19 	add.w	sl, r4, #25
 8003426:	68e3      	ldr	r3, [r4, #12]
 8003428:	6832      	ldr	r2, [r6, #0]
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	42ab      	cmp	r3, r5
 800342e:	dc26      	bgt.n	800347e <_printf_common+0x96>
 8003430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003434:	1e13      	subs	r3, r2, #0
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	bf18      	it	ne
 800343a:	2301      	movne	r3, #1
 800343c:	0692      	lsls	r2, r2, #26
 800343e:	d42b      	bmi.n	8003498 <_printf_common+0xb0>
 8003440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003444:	4649      	mov	r1, r9
 8003446:	4638      	mov	r0, r7
 8003448:	47c0      	blx	r8
 800344a:	3001      	adds	r0, #1
 800344c:	d01e      	beq.n	800348c <_printf_common+0xa4>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	68e5      	ldr	r5, [r4, #12]
 8003452:	6832      	ldr	r2, [r6, #0]
 8003454:	f003 0306 	and.w	r3, r3, #6
 8003458:	2b04      	cmp	r3, #4
 800345a:	bf08      	it	eq
 800345c:	1aad      	subeq	r5, r5, r2
 800345e:	68a3      	ldr	r3, [r4, #8]
 8003460:	6922      	ldr	r2, [r4, #16]
 8003462:	bf0c      	ite	eq
 8003464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003468:	2500      	movne	r5, #0
 800346a:	4293      	cmp	r3, r2
 800346c:	bfc4      	itt	gt
 800346e:	1a9b      	subgt	r3, r3, r2
 8003470:	18ed      	addgt	r5, r5, r3
 8003472:	2600      	movs	r6, #0
 8003474:	341a      	adds	r4, #26
 8003476:	42b5      	cmp	r5, r6
 8003478:	d11a      	bne.n	80034b0 <_printf_common+0xc8>
 800347a:	2000      	movs	r0, #0
 800347c:	e008      	b.n	8003490 <_printf_common+0xa8>
 800347e:	2301      	movs	r3, #1
 8003480:	4652      	mov	r2, sl
 8003482:	4649      	mov	r1, r9
 8003484:	4638      	mov	r0, r7
 8003486:	47c0      	blx	r8
 8003488:	3001      	adds	r0, #1
 800348a:	d103      	bne.n	8003494 <_printf_common+0xac>
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003494:	3501      	adds	r5, #1
 8003496:	e7c6      	b.n	8003426 <_printf_common+0x3e>
 8003498:	18e1      	adds	r1, r4, r3
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	2030      	movs	r0, #48	; 0x30
 800349e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034a2:	4422      	add	r2, r4
 80034a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034ac:	3302      	adds	r3, #2
 80034ae:	e7c7      	b.n	8003440 <_printf_common+0x58>
 80034b0:	2301      	movs	r3, #1
 80034b2:	4622      	mov	r2, r4
 80034b4:	4649      	mov	r1, r9
 80034b6:	4638      	mov	r0, r7
 80034b8:	47c0      	blx	r8
 80034ba:	3001      	adds	r0, #1
 80034bc:	d0e6      	beq.n	800348c <_printf_common+0xa4>
 80034be:	3601      	adds	r6, #1
 80034c0:	e7d9      	b.n	8003476 <_printf_common+0x8e>
	...

080034c4 <_printf_i>:
 80034c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c8:	7e0f      	ldrb	r7, [r1, #24]
 80034ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034cc:	2f78      	cmp	r7, #120	; 0x78
 80034ce:	4691      	mov	r9, r2
 80034d0:	4680      	mov	r8, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	469a      	mov	sl, r3
 80034d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034da:	d807      	bhi.n	80034ec <_printf_i+0x28>
 80034dc:	2f62      	cmp	r7, #98	; 0x62
 80034de:	d80a      	bhi.n	80034f6 <_printf_i+0x32>
 80034e0:	2f00      	cmp	r7, #0
 80034e2:	f000 80d8 	beq.w	8003696 <_printf_i+0x1d2>
 80034e6:	2f58      	cmp	r7, #88	; 0x58
 80034e8:	f000 80a3 	beq.w	8003632 <_printf_i+0x16e>
 80034ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034f4:	e03a      	b.n	800356c <_printf_i+0xa8>
 80034f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034fa:	2b15      	cmp	r3, #21
 80034fc:	d8f6      	bhi.n	80034ec <_printf_i+0x28>
 80034fe:	a101      	add	r1, pc, #4	; (adr r1, 8003504 <_printf_i+0x40>)
 8003500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003504:	0800355d 	.word	0x0800355d
 8003508:	08003571 	.word	0x08003571
 800350c:	080034ed 	.word	0x080034ed
 8003510:	080034ed 	.word	0x080034ed
 8003514:	080034ed 	.word	0x080034ed
 8003518:	080034ed 	.word	0x080034ed
 800351c:	08003571 	.word	0x08003571
 8003520:	080034ed 	.word	0x080034ed
 8003524:	080034ed 	.word	0x080034ed
 8003528:	080034ed 	.word	0x080034ed
 800352c:	080034ed 	.word	0x080034ed
 8003530:	0800367d 	.word	0x0800367d
 8003534:	080035a1 	.word	0x080035a1
 8003538:	0800365f 	.word	0x0800365f
 800353c:	080034ed 	.word	0x080034ed
 8003540:	080034ed 	.word	0x080034ed
 8003544:	0800369f 	.word	0x0800369f
 8003548:	080034ed 	.word	0x080034ed
 800354c:	080035a1 	.word	0x080035a1
 8003550:	080034ed 	.word	0x080034ed
 8003554:	080034ed 	.word	0x080034ed
 8003558:	08003667 	.word	0x08003667
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	602a      	str	r2, [r5, #0]
 8003564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800356c:	2301      	movs	r3, #1
 800356e:	e0a3      	b.n	80036b8 <_printf_i+0x1f4>
 8003570:	6820      	ldr	r0, [r4, #0]
 8003572:	6829      	ldr	r1, [r5, #0]
 8003574:	0606      	lsls	r6, r0, #24
 8003576:	f101 0304 	add.w	r3, r1, #4
 800357a:	d50a      	bpl.n	8003592 <_printf_i+0xce>
 800357c:	680e      	ldr	r6, [r1, #0]
 800357e:	602b      	str	r3, [r5, #0]
 8003580:	2e00      	cmp	r6, #0
 8003582:	da03      	bge.n	800358c <_printf_i+0xc8>
 8003584:	232d      	movs	r3, #45	; 0x2d
 8003586:	4276      	negs	r6, r6
 8003588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800358c:	485e      	ldr	r0, [pc, #376]	; (8003708 <_printf_i+0x244>)
 800358e:	230a      	movs	r3, #10
 8003590:	e019      	b.n	80035c6 <_printf_i+0x102>
 8003592:	680e      	ldr	r6, [r1, #0]
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800359a:	bf18      	it	ne
 800359c:	b236      	sxthne	r6, r6
 800359e:	e7ef      	b.n	8003580 <_printf_i+0xbc>
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	1d19      	adds	r1, r3, #4
 80035a6:	6029      	str	r1, [r5, #0]
 80035a8:	0601      	lsls	r1, r0, #24
 80035aa:	d501      	bpl.n	80035b0 <_printf_i+0xec>
 80035ac:	681e      	ldr	r6, [r3, #0]
 80035ae:	e002      	b.n	80035b6 <_printf_i+0xf2>
 80035b0:	0646      	lsls	r6, r0, #25
 80035b2:	d5fb      	bpl.n	80035ac <_printf_i+0xe8>
 80035b4:	881e      	ldrh	r6, [r3, #0]
 80035b6:	4854      	ldr	r0, [pc, #336]	; (8003708 <_printf_i+0x244>)
 80035b8:	2f6f      	cmp	r7, #111	; 0x6f
 80035ba:	bf0c      	ite	eq
 80035bc:	2308      	moveq	r3, #8
 80035be:	230a      	movne	r3, #10
 80035c0:	2100      	movs	r1, #0
 80035c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035c6:	6865      	ldr	r5, [r4, #4]
 80035c8:	60a5      	str	r5, [r4, #8]
 80035ca:	2d00      	cmp	r5, #0
 80035cc:	bfa2      	ittt	ge
 80035ce:	6821      	ldrge	r1, [r4, #0]
 80035d0:	f021 0104 	bicge.w	r1, r1, #4
 80035d4:	6021      	strge	r1, [r4, #0]
 80035d6:	b90e      	cbnz	r6, 80035dc <_printf_i+0x118>
 80035d8:	2d00      	cmp	r5, #0
 80035da:	d04d      	beq.n	8003678 <_printf_i+0x1b4>
 80035dc:	4615      	mov	r5, r2
 80035de:	fbb6 f1f3 	udiv	r1, r6, r3
 80035e2:	fb03 6711 	mls	r7, r3, r1, r6
 80035e6:	5dc7      	ldrb	r7, [r0, r7]
 80035e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035ec:	4637      	mov	r7, r6
 80035ee:	42bb      	cmp	r3, r7
 80035f0:	460e      	mov	r6, r1
 80035f2:	d9f4      	bls.n	80035de <_printf_i+0x11a>
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d10b      	bne.n	8003610 <_printf_i+0x14c>
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	07de      	lsls	r6, r3, #31
 80035fc:	d508      	bpl.n	8003610 <_printf_i+0x14c>
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	6861      	ldr	r1, [r4, #4]
 8003602:	4299      	cmp	r1, r3
 8003604:	bfde      	ittt	le
 8003606:	2330      	movle	r3, #48	; 0x30
 8003608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800360c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003610:	1b52      	subs	r2, r2, r5
 8003612:	6122      	str	r2, [r4, #16]
 8003614:	f8cd a000 	str.w	sl, [sp]
 8003618:	464b      	mov	r3, r9
 800361a:	aa03      	add	r2, sp, #12
 800361c:	4621      	mov	r1, r4
 800361e:	4640      	mov	r0, r8
 8003620:	f7ff fee2 	bl	80033e8 <_printf_common>
 8003624:	3001      	adds	r0, #1
 8003626:	d14c      	bne.n	80036c2 <_printf_i+0x1fe>
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	b004      	add	sp, #16
 800362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003632:	4835      	ldr	r0, [pc, #212]	; (8003708 <_printf_i+0x244>)
 8003634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003638:	6829      	ldr	r1, [r5, #0]
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003640:	6029      	str	r1, [r5, #0]
 8003642:	061d      	lsls	r5, r3, #24
 8003644:	d514      	bpl.n	8003670 <_printf_i+0x1ac>
 8003646:	07df      	lsls	r7, r3, #31
 8003648:	bf44      	itt	mi
 800364a:	f043 0320 	orrmi.w	r3, r3, #32
 800364e:	6023      	strmi	r3, [r4, #0]
 8003650:	b91e      	cbnz	r6, 800365a <_printf_i+0x196>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	f023 0320 	bic.w	r3, r3, #32
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	2310      	movs	r3, #16
 800365c:	e7b0      	b.n	80035c0 <_printf_i+0xfc>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	2378      	movs	r3, #120	; 0x78
 8003668:	4828      	ldr	r0, [pc, #160]	; (800370c <_printf_i+0x248>)
 800366a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800366e:	e7e3      	b.n	8003638 <_printf_i+0x174>
 8003670:	0659      	lsls	r1, r3, #25
 8003672:	bf48      	it	mi
 8003674:	b2b6      	uxthmi	r6, r6
 8003676:	e7e6      	b.n	8003646 <_printf_i+0x182>
 8003678:	4615      	mov	r5, r2
 800367a:	e7bb      	b.n	80035f4 <_printf_i+0x130>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	6826      	ldr	r6, [r4, #0]
 8003680:	6961      	ldr	r1, [r4, #20]
 8003682:	1d18      	adds	r0, r3, #4
 8003684:	6028      	str	r0, [r5, #0]
 8003686:	0635      	lsls	r5, r6, #24
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	d501      	bpl.n	8003690 <_printf_i+0x1cc>
 800368c:	6019      	str	r1, [r3, #0]
 800368e:	e002      	b.n	8003696 <_printf_i+0x1d2>
 8003690:	0670      	lsls	r0, r6, #25
 8003692:	d5fb      	bpl.n	800368c <_printf_i+0x1c8>
 8003694:	8019      	strh	r1, [r3, #0]
 8003696:	2300      	movs	r3, #0
 8003698:	6123      	str	r3, [r4, #16]
 800369a:	4615      	mov	r5, r2
 800369c:	e7ba      	b.n	8003614 <_printf_i+0x150>
 800369e:	682b      	ldr	r3, [r5, #0]
 80036a0:	1d1a      	adds	r2, r3, #4
 80036a2:	602a      	str	r2, [r5, #0]
 80036a4:	681d      	ldr	r5, [r3, #0]
 80036a6:	6862      	ldr	r2, [r4, #4]
 80036a8:	2100      	movs	r1, #0
 80036aa:	4628      	mov	r0, r5
 80036ac:	f7fc fda0 	bl	80001f0 <memchr>
 80036b0:	b108      	cbz	r0, 80036b6 <_printf_i+0x1f2>
 80036b2:	1b40      	subs	r0, r0, r5
 80036b4:	6060      	str	r0, [r4, #4]
 80036b6:	6863      	ldr	r3, [r4, #4]
 80036b8:	6123      	str	r3, [r4, #16]
 80036ba:	2300      	movs	r3, #0
 80036bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c0:	e7a8      	b.n	8003614 <_printf_i+0x150>
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	462a      	mov	r2, r5
 80036c6:	4649      	mov	r1, r9
 80036c8:	4640      	mov	r0, r8
 80036ca:	47d0      	blx	sl
 80036cc:	3001      	adds	r0, #1
 80036ce:	d0ab      	beq.n	8003628 <_printf_i+0x164>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	079b      	lsls	r3, r3, #30
 80036d4:	d413      	bmi.n	80036fe <_printf_i+0x23a>
 80036d6:	68e0      	ldr	r0, [r4, #12]
 80036d8:	9b03      	ldr	r3, [sp, #12]
 80036da:	4298      	cmp	r0, r3
 80036dc:	bfb8      	it	lt
 80036de:	4618      	movlt	r0, r3
 80036e0:	e7a4      	b.n	800362c <_printf_i+0x168>
 80036e2:	2301      	movs	r3, #1
 80036e4:	4632      	mov	r2, r6
 80036e6:	4649      	mov	r1, r9
 80036e8:	4640      	mov	r0, r8
 80036ea:	47d0      	blx	sl
 80036ec:	3001      	adds	r0, #1
 80036ee:	d09b      	beq.n	8003628 <_printf_i+0x164>
 80036f0:	3501      	adds	r5, #1
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	9903      	ldr	r1, [sp, #12]
 80036f6:	1a5b      	subs	r3, r3, r1
 80036f8:	42ab      	cmp	r3, r5
 80036fa:	dcf2      	bgt.n	80036e2 <_printf_i+0x21e>
 80036fc:	e7eb      	b.n	80036d6 <_printf_i+0x212>
 80036fe:	2500      	movs	r5, #0
 8003700:	f104 0619 	add.w	r6, r4, #25
 8003704:	e7f5      	b.n	80036f2 <_printf_i+0x22e>
 8003706:	bf00      	nop
 8003708:	08003dd1 	.word	0x08003dd1
 800370c:	08003de2 	.word	0x08003de2

08003710 <_sbrk_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4d06      	ldr	r5, [pc, #24]	; (800372c <_sbrk_r+0x1c>)
 8003714:	2300      	movs	r3, #0
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	f7fd f9fe 	bl	8000b1c <_sbrk>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_sbrk_r+0x1a>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_sbrk_r+0x1a>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20000108 	.word	0x20000108

08003730 <__sread>:
 8003730:	b510      	push	{r4, lr}
 8003732:	460c      	mov	r4, r1
 8003734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003738:	f000 fab2 	bl	8003ca0 <_read_r>
 800373c:	2800      	cmp	r0, #0
 800373e:	bfab      	itete	ge
 8003740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003742:	89a3      	ldrhlt	r3, [r4, #12]
 8003744:	181b      	addge	r3, r3, r0
 8003746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800374a:	bfac      	ite	ge
 800374c:	6563      	strge	r3, [r4, #84]	; 0x54
 800374e:	81a3      	strhlt	r3, [r4, #12]
 8003750:	bd10      	pop	{r4, pc}

08003752 <__swrite>:
 8003752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003756:	461f      	mov	r7, r3
 8003758:	898b      	ldrh	r3, [r1, #12]
 800375a:	05db      	lsls	r3, r3, #23
 800375c:	4605      	mov	r5, r0
 800375e:	460c      	mov	r4, r1
 8003760:	4616      	mov	r6, r2
 8003762:	d505      	bpl.n	8003770 <__swrite+0x1e>
 8003764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003768:	2302      	movs	r3, #2
 800376a:	2200      	movs	r2, #0
 800376c:	f000 f9c8 	bl	8003b00 <_lseek_r>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	4632      	mov	r2, r6
 800377e:	463b      	mov	r3, r7
 8003780:	4628      	mov	r0, r5
 8003782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003786:	f000 b869 	b.w	800385c <_write_r>

0800378a <__sseek>:
 800378a:	b510      	push	{r4, lr}
 800378c:	460c      	mov	r4, r1
 800378e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003792:	f000 f9b5 	bl	8003b00 <_lseek_r>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	bf15      	itete	ne
 800379c:	6560      	strne	r0, [r4, #84]	; 0x54
 800379e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037a6:	81a3      	strheq	r3, [r4, #12]
 80037a8:	bf18      	it	ne
 80037aa:	81a3      	strhne	r3, [r4, #12]
 80037ac:	bd10      	pop	{r4, pc}

080037ae <__sclose>:
 80037ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b2:	f000 b8d3 	b.w	800395c <_close_r>
	...

080037b8 <__swbuf_r>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	460e      	mov	r6, r1
 80037bc:	4614      	mov	r4, r2
 80037be:	4605      	mov	r5, r0
 80037c0:	b118      	cbz	r0, 80037ca <__swbuf_r+0x12>
 80037c2:	6983      	ldr	r3, [r0, #24]
 80037c4:	b90b      	cbnz	r3, 80037ca <__swbuf_r+0x12>
 80037c6:	f7ff fb81 	bl	8002ecc <__sinit>
 80037ca:	4b21      	ldr	r3, [pc, #132]	; (8003850 <__swbuf_r+0x98>)
 80037cc:	429c      	cmp	r4, r3
 80037ce:	d12b      	bne.n	8003828 <__swbuf_r+0x70>
 80037d0:	686c      	ldr	r4, [r5, #4]
 80037d2:	69a3      	ldr	r3, [r4, #24]
 80037d4:	60a3      	str	r3, [r4, #8]
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	071a      	lsls	r2, r3, #28
 80037da:	d52f      	bpl.n	800383c <__swbuf_r+0x84>
 80037dc:	6923      	ldr	r3, [r4, #16]
 80037de:	b36b      	cbz	r3, 800383c <__swbuf_r+0x84>
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	6820      	ldr	r0, [r4, #0]
 80037e4:	1ac0      	subs	r0, r0, r3
 80037e6:	6963      	ldr	r3, [r4, #20]
 80037e8:	b2f6      	uxtb	r6, r6
 80037ea:	4283      	cmp	r3, r0
 80037ec:	4637      	mov	r7, r6
 80037ee:	dc04      	bgt.n	80037fa <__swbuf_r+0x42>
 80037f0:	4621      	mov	r1, r4
 80037f2:	4628      	mov	r0, r5
 80037f4:	f000 f948 	bl	8003a88 <_fflush_r>
 80037f8:	bb30      	cbnz	r0, 8003848 <__swbuf_r+0x90>
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	60a3      	str	r3, [r4, #8]
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	6022      	str	r2, [r4, #0]
 8003806:	701e      	strb	r6, [r3, #0]
 8003808:	6963      	ldr	r3, [r4, #20]
 800380a:	3001      	adds	r0, #1
 800380c:	4283      	cmp	r3, r0
 800380e:	d004      	beq.n	800381a <__swbuf_r+0x62>
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	07db      	lsls	r3, r3, #31
 8003814:	d506      	bpl.n	8003824 <__swbuf_r+0x6c>
 8003816:	2e0a      	cmp	r6, #10
 8003818:	d104      	bne.n	8003824 <__swbuf_r+0x6c>
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 f933 	bl	8003a88 <_fflush_r>
 8003822:	b988      	cbnz	r0, 8003848 <__swbuf_r+0x90>
 8003824:	4638      	mov	r0, r7
 8003826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <__swbuf_r+0x9c>)
 800382a:	429c      	cmp	r4, r3
 800382c:	d101      	bne.n	8003832 <__swbuf_r+0x7a>
 800382e:	68ac      	ldr	r4, [r5, #8]
 8003830:	e7cf      	b.n	80037d2 <__swbuf_r+0x1a>
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <__swbuf_r+0xa0>)
 8003834:	429c      	cmp	r4, r3
 8003836:	bf08      	it	eq
 8003838:	68ec      	ldreq	r4, [r5, #12]
 800383a:	e7ca      	b.n	80037d2 <__swbuf_r+0x1a>
 800383c:	4621      	mov	r1, r4
 800383e:	4628      	mov	r0, r5
 8003840:	f000 f81e 	bl	8003880 <__swsetup_r>
 8003844:	2800      	cmp	r0, #0
 8003846:	d0cb      	beq.n	80037e0 <__swbuf_r+0x28>
 8003848:	f04f 37ff 	mov.w	r7, #4294967295
 800384c:	e7ea      	b.n	8003824 <__swbuf_r+0x6c>
 800384e:	bf00      	nop
 8003850:	08003d80 	.word	0x08003d80
 8003854:	08003da0 	.word	0x08003da0
 8003858:	08003d60 	.word	0x08003d60

0800385c <_write_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4d07      	ldr	r5, [pc, #28]	; (800387c <_write_r+0x20>)
 8003860:	4604      	mov	r4, r0
 8003862:	4608      	mov	r0, r1
 8003864:	4611      	mov	r1, r2
 8003866:	2200      	movs	r2, #0
 8003868:	602a      	str	r2, [r5, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	f7fc fe92 	bl	8000594 <_write>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_write_r+0x1e>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b103      	cbz	r3, 800387a <_write_r+0x1e>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000108 	.word	0x20000108

08003880 <__swsetup_r>:
 8003880:	4b32      	ldr	r3, [pc, #200]	; (800394c <__swsetup_r+0xcc>)
 8003882:	b570      	push	{r4, r5, r6, lr}
 8003884:	681d      	ldr	r5, [r3, #0]
 8003886:	4606      	mov	r6, r0
 8003888:	460c      	mov	r4, r1
 800388a:	b125      	cbz	r5, 8003896 <__swsetup_r+0x16>
 800388c:	69ab      	ldr	r3, [r5, #24]
 800388e:	b913      	cbnz	r3, 8003896 <__swsetup_r+0x16>
 8003890:	4628      	mov	r0, r5
 8003892:	f7ff fb1b 	bl	8002ecc <__sinit>
 8003896:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <__swsetup_r+0xd0>)
 8003898:	429c      	cmp	r4, r3
 800389a:	d10f      	bne.n	80038bc <__swsetup_r+0x3c>
 800389c:	686c      	ldr	r4, [r5, #4]
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038a4:	0719      	lsls	r1, r3, #28
 80038a6:	d42c      	bmi.n	8003902 <__swsetup_r+0x82>
 80038a8:	06dd      	lsls	r5, r3, #27
 80038aa:	d411      	bmi.n	80038d0 <__swsetup_r+0x50>
 80038ac:	2309      	movs	r3, #9
 80038ae:	6033      	str	r3, [r6, #0]
 80038b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ba:	e03e      	b.n	800393a <__swsetup_r+0xba>
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <__swsetup_r+0xd4>)
 80038be:	429c      	cmp	r4, r3
 80038c0:	d101      	bne.n	80038c6 <__swsetup_r+0x46>
 80038c2:	68ac      	ldr	r4, [r5, #8]
 80038c4:	e7eb      	b.n	800389e <__swsetup_r+0x1e>
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <__swsetup_r+0xd8>)
 80038c8:	429c      	cmp	r4, r3
 80038ca:	bf08      	it	eq
 80038cc:	68ec      	ldreq	r4, [r5, #12]
 80038ce:	e7e6      	b.n	800389e <__swsetup_r+0x1e>
 80038d0:	0758      	lsls	r0, r3, #29
 80038d2:	d512      	bpl.n	80038fa <__swsetup_r+0x7a>
 80038d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038d6:	b141      	cbz	r1, 80038ea <__swsetup_r+0x6a>
 80038d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038dc:	4299      	cmp	r1, r3
 80038de:	d002      	beq.n	80038e6 <__swsetup_r+0x66>
 80038e0:	4630      	mov	r0, r6
 80038e2:	f000 f991 	bl	8003c08 <_free_r>
 80038e6:	2300      	movs	r3, #0
 80038e8:	6363      	str	r3, [r4, #52]	; 0x34
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	81a3      	strh	r3, [r4, #12]
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	b94b      	cbnz	r3, 800391a <__swsetup_r+0x9a>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800390c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003910:	d003      	beq.n	800391a <__swsetup_r+0x9a>
 8003912:	4621      	mov	r1, r4
 8003914:	4630      	mov	r0, r6
 8003916:	f000 f92b 	bl	8003b70 <__smakebuf_r>
 800391a:	89a0      	ldrh	r0, [r4, #12]
 800391c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003920:	f010 0301 	ands.w	r3, r0, #1
 8003924:	d00a      	beq.n	800393c <__swsetup_r+0xbc>
 8003926:	2300      	movs	r3, #0
 8003928:	60a3      	str	r3, [r4, #8]
 800392a:	6963      	ldr	r3, [r4, #20]
 800392c:	425b      	negs	r3, r3
 800392e:	61a3      	str	r3, [r4, #24]
 8003930:	6923      	ldr	r3, [r4, #16]
 8003932:	b943      	cbnz	r3, 8003946 <__swsetup_r+0xc6>
 8003934:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003938:	d1ba      	bne.n	80038b0 <__swsetup_r+0x30>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	0781      	lsls	r1, r0, #30
 800393e:	bf58      	it	pl
 8003940:	6963      	ldrpl	r3, [r4, #20]
 8003942:	60a3      	str	r3, [r4, #8]
 8003944:	e7f4      	b.n	8003930 <__swsetup_r+0xb0>
 8003946:	2000      	movs	r0, #0
 8003948:	e7f7      	b.n	800393a <__swsetup_r+0xba>
 800394a:	bf00      	nop
 800394c:	2000000c 	.word	0x2000000c
 8003950:	08003d80 	.word	0x08003d80
 8003954:	08003da0 	.word	0x08003da0
 8003958:	08003d60 	.word	0x08003d60

0800395c <_close_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	4d06      	ldr	r5, [pc, #24]	; (8003978 <_close_r+0x1c>)
 8003960:	2300      	movs	r3, #0
 8003962:	4604      	mov	r4, r0
 8003964:	4608      	mov	r0, r1
 8003966:	602b      	str	r3, [r5, #0]
 8003968:	f7fd f8a3 	bl	8000ab2 <_close>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d102      	bne.n	8003976 <_close_r+0x1a>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	b103      	cbz	r3, 8003976 <_close_r+0x1a>
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	20000108 	.word	0x20000108

0800397c <__sflush_r>:
 800397c:	898a      	ldrh	r2, [r1, #12]
 800397e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003982:	4605      	mov	r5, r0
 8003984:	0710      	lsls	r0, r2, #28
 8003986:	460c      	mov	r4, r1
 8003988:	d458      	bmi.n	8003a3c <__sflush_r+0xc0>
 800398a:	684b      	ldr	r3, [r1, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	dc05      	bgt.n	800399c <__sflush_r+0x20>
 8003990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	dc02      	bgt.n	800399c <__sflush_r+0x20>
 8003996:	2000      	movs	r0, #0
 8003998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800399c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d0f9      	beq.n	8003996 <__sflush_r+0x1a>
 80039a2:	2300      	movs	r3, #0
 80039a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039a8:	682f      	ldr	r7, [r5, #0]
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	d032      	beq.n	8003a14 <__sflush_r+0x98>
 80039ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039b0:	89a3      	ldrh	r3, [r4, #12]
 80039b2:	075a      	lsls	r2, r3, #29
 80039b4:	d505      	bpl.n	80039c2 <__sflush_r+0x46>
 80039b6:	6863      	ldr	r3, [r4, #4]
 80039b8:	1ac0      	subs	r0, r0, r3
 80039ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039bc:	b10b      	cbz	r3, 80039c2 <__sflush_r+0x46>
 80039be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039c0:	1ac0      	subs	r0, r0, r3
 80039c2:	2300      	movs	r3, #0
 80039c4:	4602      	mov	r2, r0
 80039c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039c8:	6a21      	ldr	r1, [r4, #32]
 80039ca:	4628      	mov	r0, r5
 80039cc:	47b0      	blx	r6
 80039ce:	1c43      	adds	r3, r0, #1
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	d106      	bne.n	80039e2 <__sflush_r+0x66>
 80039d4:	6829      	ldr	r1, [r5, #0]
 80039d6:	291d      	cmp	r1, #29
 80039d8:	d82c      	bhi.n	8003a34 <__sflush_r+0xb8>
 80039da:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <__sflush_r+0x108>)
 80039dc:	40ca      	lsrs	r2, r1
 80039de:	07d6      	lsls	r6, r2, #31
 80039e0:	d528      	bpl.n	8003a34 <__sflush_r+0xb8>
 80039e2:	2200      	movs	r2, #0
 80039e4:	6062      	str	r2, [r4, #4]
 80039e6:	04d9      	lsls	r1, r3, #19
 80039e8:	6922      	ldr	r2, [r4, #16]
 80039ea:	6022      	str	r2, [r4, #0]
 80039ec:	d504      	bpl.n	80039f8 <__sflush_r+0x7c>
 80039ee:	1c42      	adds	r2, r0, #1
 80039f0:	d101      	bne.n	80039f6 <__sflush_r+0x7a>
 80039f2:	682b      	ldr	r3, [r5, #0]
 80039f4:	b903      	cbnz	r3, 80039f8 <__sflush_r+0x7c>
 80039f6:	6560      	str	r0, [r4, #84]	; 0x54
 80039f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039fa:	602f      	str	r7, [r5, #0]
 80039fc:	2900      	cmp	r1, #0
 80039fe:	d0ca      	beq.n	8003996 <__sflush_r+0x1a>
 8003a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a04:	4299      	cmp	r1, r3
 8003a06:	d002      	beq.n	8003a0e <__sflush_r+0x92>
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f000 f8fd 	bl	8003c08 <_free_r>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	6360      	str	r0, [r4, #52]	; 0x34
 8003a12:	e7c1      	b.n	8003998 <__sflush_r+0x1c>
 8003a14:	6a21      	ldr	r1, [r4, #32]
 8003a16:	2301      	movs	r3, #1
 8003a18:	4628      	mov	r0, r5
 8003a1a:	47b0      	blx	r6
 8003a1c:	1c41      	adds	r1, r0, #1
 8003a1e:	d1c7      	bne.n	80039b0 <__sflush_r+0x34>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0c4      	beq.n	80039b0 <__sflush_r+0x34>
 8003a26:	2b1d      	cmp	r3, #29
 8003a28:	d001      	beq.n	8003a2e <__sflush_r+0xb2>
 8003a2a:	2b16      	cmp	r3, #22
 8003a2c:	d101      	bne.n	8003a32 <__sflush_r+0xb6>
 8003a2e:	602f      	str	r7, [r5, #0]
 8003a30:	e7b1      	b.n	8003996 <__sflush_r+0x1a>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	e7ad      	b.n	8003998 <__sflush_r+0x1c>
 8003a3c:	690f      	ldr	r7, [r1, #16]
 8003a3e:	2f00      	cmp	r7, #0
 8003a40:	d0a9      	beq.n	8003996 <__sflush_r+0x1a>
 8003a42:	0793      	lsls	r3, r2, #30
 8003a44:	680e      	ldr	r6, [r1, #0]
 8003a46:	bf08      	it	eq
 8003a48:	694b      	ldreq	r3, [r1, #20]
 8003a4a:	600f      	str	r7, [r1, #0]
 8003a4c:	bf18      	it	ne
 8003a4e:	2300      	movne	r3, #0
 8003a50:	eba6 0807 	sub.w	r8, r6, r7
 8003a54:	608b      	str	r3, [r1, #8]
 8003a56:	f1b8 0f00 	cmp.w	r8, #0
 8003a5a:	dd9c      	ble.n	8003996 <__sflush_r+0x1a>
 8003a5c:	6a21      	ldr	r1, [r4, #32]
 8003a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a60:	4643      	mov	r3, r8
 8003a62:	463a      	mov	r2, r7
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b0      	blx	r6
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	dc06      	bgt.n	8003a7a <__sflush_r+0xfe>
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a72:	81a3      	strh	r3, [r4, #12]
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	e78e      	b.n	8003998 <__sflush_r+0x1c>
 8003a7a:	4407      	add	r7, r0
 8003a7c:	eba8 0800 	sub.w	r8, r8, r0
 8003a80:	e7e9      	b.n	8003a56 <__sflush_r+0xda>
 8003a82:	bf00      	nop
 8003a84:	20400001 	.word	0x20400001

08003a88 <_fflush_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	690b      	ldr	r3, [r1, #16]
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	460c      	mov	r4, r1
 8003a90:	b913      	cbnz	r3, 8003a98 <_fflush_r+0x10>
 8003a92:	2500      	movs	r5, #0
 8003a94:	4628      	mov	r0, r5
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	b118      	cbz	r0, 8003aa2 <_fflush_r+0x1a>
 8003a9a:	6983      	ldr	r3, [r0, #24]
 8003a9c:	b90b      	cbnz	r3, 8003aa2 <_fflush_r+0x1a>
 8003a9e:	f7ff fa15 	bl	8002ecc <__sinit>
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <_fflush_r+0x6c>)
 8003aa4:	429c      	cmp	r4, r3
 8003aa6:	d11b      	bne.n	8003ae0 <_fflush_r+0x58>
 8003aa8:	686c      	ldr	r4, [r5, #4]
 8003aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0ef      	beq.n	8003a92 <_fflush_r+0xa>
 8003ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ab4:	07d0      	lsls	r0, r2, #31
 8003ab6:	d404      	bmi.n	8003ac2 <_fflush_r+0x3a>
 8003ab8:	0599      	lsls	r1, r3, #22
 8003aba:	d402      	bmi.n	8003ac2 <_fflush_r+0x3a>
 8003abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003abe:	f7ff faa3 	bl	8003008 <__retarget_lock_acquire_recursive>
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	f7ff ff59 	bl	800397c <__sflush_r>
 8003aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003acc:	07da      	lsls	r2, r3, #31
 8003ace:	4605      	mov	r5, r0
 8003ad0:	d4e0      	bmi.n	8003a94 <_fflush_r+0xc>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	059b      	lsls	r3, r3, #22
 8003ad6:	d4dd      	bmi.n	8003a94 <_fflush_r+0xc>
 8003ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ada:	f7ff fa96 	bl	800300a <__retarget_lock_release_recursive>
 8003ade:	e7d9      	b.n	8003a94 <_fflush_r+0xc>
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <_fflush_r+0x70>)
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	d101      	bne.n	8003aea <_fflush_r+0x62>
 8003ae6:	68ac      	ldr	r4, [r5, #8]
 8003ae8:	e7df      	b.n	8003aaa <_fflush_r+0x22>
 8003aea:	4b04      	ldr	r3, [pc, #16]	; (8003afc <_fflush_r+0x74>)
 8003aec:	429c      	cmp	r4, r3
 8003aee:	bf08      	it	eq
 8003af0:	68ec      	ldreq	r4, [r5, #12]
 8003af2:	e7da      	b.n	8003aaa <_fflush_r+0x22>
 8003af4:	08003d80 	.word	0x08003d80
 8003af8:	08003da0 	.word	0x08003da0
 8003afc:	08003d60 	.word	0x08003d60

08003b00 <_lseek_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4d07      	ldr	r5, [pc, #28]	; (8003b20 <_lseek_r+0x20>)
 8003b04:	4604      	mov	r4, r0
 8003b06:	4608      	mov	r0, r1
 8003b08:	4611      	mov	r1, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f7fc fff6 	bl	8000b00 <_lseek>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_lseek_r+0x1e>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_lseek_r+0x1e>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000108 	.word	0x20000108

08003b24 <__swhatbuf_r>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	460e      	mov	r6, r1
 8003b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	b096      	sub	sp, #88	; 0x58
 8003b30:	4614      	mov	r4, r2
 8003b32:	461d      	mov	r5, r3
 8003b34:	da08      	bge.n	8003b48 <__swhatbuf_r+0x24>
 8003b36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	602a      	str	r2, [r5, #0]
 8003b3e:	061a      	lsls	r2, r3, #24
 8003b40:	d410      	bmi.n	8003b64 <__swhatbuf_r+0x40>
 8003b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b46:	e00e      	b.n	8003b66 <__swhatbuf_r+0x42>
 8003b48:	466a      	mov	r2, sp
 8003b4a:	f000 f8bb 	bl	8003cc4 <_fstat_r>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	dbf1      	blt.n	8003b36 <__swhatbuf_r+0x12>
 8003b52:	9a01      	ldr	r2, [sp, #4]
 8003b54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b5c:	425a      	negs	r2, r3
 8003b5e:	415a      	adcs	r2, r3
 8003b60:	602a      	str	r2, [r5, #0]
 8003b62:	e7ee      	b.n	8003b42 <__swhatbuf_r+0x1e>
 8003b64:	2340      	movs	r3, #64	; 0x40
 8003b66:	2000      	movs	r0, #0
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	b016      	add	sp, #88	; 0x58
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b70 <__smakebuf_r>:
 8003b70:	898b      	ldrh	r3, [r1, #12]
 8003b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b74:	079d      	lsls	r5, r3, #30
 8003b76:	4606      	mov	r6, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	d507      	bpl.n	8003b8c <__smakebuf_r+0x1c>
 8003b7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	6123      	str	r3, [r4, #16]
 8003b84:	2301      	movs	r3, #1
 8003b86:	6163      	str	r3, [r4, #20]
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	ab01      	add	r3, sp, #4
 8003b8e:	466a      	mov	r2, sp
 8003b90:	f7ff ffc8 	bl	8003b24 <__swhatbuf_r>
 8003b94:	9900      	ldr	r1, [sp, #0]
 8003b96:	4605      	mov	r5, r0
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff fa57 	bl	800304c <_malloc_r>
 8003b9e:	b948      	cbnz	r0, 8003bb4 <__smakebuf_r+0x44>
 8003ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba4:	059a      	lsls	r2, r3, #22
 8003ba6:	d4ef      	bmi.n	8003b88 <__smakebuf_r+0x18>
 8003ba8:	f023 0303 	bic.w	r3, r3, #3
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	81a3      	strh	r3, [r4, #12]
 8003bb2:	e7e3      	b.n	8003b7c <__smakebuf_r+0xc>
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <__smakebuf_r+0x7c>)
 8003bb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	6020      	str	r0, [r4, #0]
 8003bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc0:	81a3      	strh	r3, [r4, #12]
 8003bc2:	9b00      	ldr	r3, [sp, #0]
 8003bc4:	6163      	str	r3, [r4, #20]
 8003bc6:	9b01      	ldr	r3, [sp, #4]
 8003bc8:	6120      	str	r0, [r4, #16]
 8003bca:	b15b      	cbz	r3, 8003be4 <__smakebuf_r+0x74>
 8003bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 f889 	bl	8003ce8 <_isatty_r>
 8003bd6:	b128      	cbz	r0, 8003be4 <__smakebuf_r+0x74>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	81a3      	strh	r3, [r4, #12]
 8003be4:	89a0      	ldrh	r0, [r4, #12]
 8003be6:	4305      	orrs	r5, r0
 8003be8:	81a5      	strh	r5, [r4, #12]
 8003bea:	e7cd      	b.n	8003b88 <__smakebuf_r+0x18>
 8003bec:	08002e65 	.word	0x08002e65

08003bf0 <__malloc_lock>:
 8003bf0:	4801      	ldr	r0, [pc, #4]	; (8003bf8 <__malloc_lock+0x8>)
 8003bf2:	f7ff ba09 	b.w	8003008 <__retarget_lock_acquire_recursive>
 8003bf6:	bf00      	nop
 8003bf8:	200000fc 	.word	0x200000fc

08003bfc <__malloc_unlock>:
 8003bfc:	4801      	ldr	r0, [pc, #4]	; (8003c04 <__malloc_unlock+0x8>)
 8003bfe:	f7ff ba04 	b.w	800300a <__retarget_lock_release_recursive>
 8003c02:	bf00      	nop
 8003c04:	200000fc 	.word	0x200000fc

08003c08 <_free_r>:
 8003c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d044      	beq.n	8003c98 <_free_r+0x90>
 8003c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c12:	9001      	str	r0, [sp, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f1a1 0404 	sub.w	r4, r1, #4
 8003c1a:	bfb8      	it	lt
 8003c1c:	18e4      	addlt	r4, r4, r3
 8003c1e:	f7ff ffe7 	bl	8003bf0 <__malloc_lock>
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <_free_r+0x94>)
 8003c24:	9801      	ldr	r0, [sp, #4]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	b933      	cbnz	r3, 8003c38 <_free_r+0x30>
 8003c2a:	6063      	str	r3, [r4, #4]
 8003c2c:	6014      	str	r4, [r2, #0]
 8003c2e:	b003      	add	sp, #12
 8003c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c34:	f7ff bfe2 	b.w	8003bfc <__malloc_unlock>
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d908      	bls.n	8003c4e <_free_r+0x46>
 8003c3c:	6825      	ldr	r5, [r4, #0]
 8003c3e:	1961      	adds	r1, r4, r5
 8003c40:	428b      	cmp	r3, r1
 8003c42:	bf01      	itttt	eq
 8003c44:	6819      	ldreq	r1, [r3, #0]
 8003c46:	685b      	ldreq	r3, [r3, #4]
 8003c48:	1949      	addeq	r1, r1, r5
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	e7ed      	b.n	8003c2a <_free_r+0x22>
 8003c4e:	461a      	mov	r2, r3
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b10b      	cbz	r3, 8003c58 <_free_r+0x50>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d9fa      	bls.n	8003c4e <_free_r+0x46>
 8003c58:	6811      	ldr	r1, [r2, #0]
 8003c5a:	1855      	adds	r5, r2, r1
 8003c5c:	42a5      	cmp	r5, r4
 8003c5e:	d10b      	bne.n	8003c78 <_free_r+0x70>
 8003c60:	6824      	ldr	r4, [r4, #0]
 8003c62:	4421      	add	r1, r4
 8003c64:	1854      	adds	r4, r2, r1
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	6011      	str	r1, [r2, #0]
 8003c6a:	d1e0      	bne.n	8003c2e <_free_r+0x26>
 8003c6c:	681c      	ldr	r4, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	6053      	str	r3, [r2, #4]
 8003c72:	4421      	add	r1, r4
 8003c74:	6011      	str	r1, [r2, #0]
 8003c76:	e7da      	b.n	8003c2e <_free_r+0x26>
 8003c78:	d902      	bls.n	8003c80 <_free_r+0x78>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	6003      	str	r3, [r0, #0]
 8003c7e:	e7d6      	b.n	8003c2e <_free_r+0x26>
 8003c80:	6825      	ldr	r5, [r4, #0]
 8003c82:	1961      	adds	r1, r4, r5
 8003c84:	428b      	cmp	r3, r1
 8003c86:	bf04      	itt	eq
 8003c88:	6819      	ldreq	r1, [r3, #0]
 8003c8a:	685b      	ldreq	r3, [r3, #4]
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	bf04      	itt	eq
 8003c90:	1949      	addeq	r1, r1, r5
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	6054      	str	r4, [r2, #4]
 8003c96:	e7ca      	b.n	8003c2e <_free_r+0x26>
 8003c98:	b003      	add	sp, #12
 8003c9a:	bd30      	pop	{r4, r5, pc}
 8003c9c:	20000100 	.word	0x20000100

08003ca0 <_read_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4d07      	ldr	r5, [pc, #28]	; (8003cc0 <_read_r+0x20>)
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	4608      	mov	r0, r1
 8003ca8:	4611      	mov	r1, r2
 8003caa:	2200      	movs	r2, #0
 8003cac:	602a      	str	r2, [r5, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f7fc fee2 	bl	8000a78 <_read>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_read_r+0x1e>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_read_r+0x1e>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	20000108 	.word	0x20000108

08003cc4 <_fstat_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	4d07      	ldr	r5, [pc, #28]	; (8003ce4 <_fstat_r+0x20>)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	602b      	str	r3, [r5, #0]
 8003cd2:	f7fc fefa 	bl	8000aca <_fstat>
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	d102      	bne.n	8003ce0 <_fstat_r+0x1c>
 8003cda:	682b      	ldr	r3, [r5, #0]
 8003cdc:	b103      	cbz	r3, 8003ce0 <_fstat_r+0x1c>
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	bd38      	pop	{r3, r4, r5, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000108 	.word	0x20000108

08003ce8 <_isatty_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4d06      	ldr	r5, [pc, #24]	; (8003d04 <_isatty_r+0x1c>)
 8003cec:	2300      	movs	r3, #0
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	602b      	str	r3, [r5, #0]
 8003cf4:	f7fc fef9 	bl	8000aea <_isatty>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_isatty_r+0x1a>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_isatty_r+0x1a>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	20000108 	.word	0x20000108

08003d08 <_init>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr

08003d14 <_fini>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr
