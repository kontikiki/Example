
SPI_25lc010a2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002664  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800283c  0800283c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800283c  0800283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002844  08002844  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800284c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000a8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006fe9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001564  00000000  00000000  00027029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  00028590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005f0  00000000  00000000  00028c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d09  00000000  00000000  00029228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007b2b  00000000  00000000  0004af31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd165  00000000  00000000  00052a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011fbc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001978  00000000  00000000  0011fc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080027f8 	.word	0x080027f8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080027f8 	.word	0x080027f8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b598      	push	{r3, r4, r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa44 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f840 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8e4 	bl	80006d8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000510:	f000 f8ac 	bl	800066c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  EEPROM_Init(&hspi2,SPI2_CS_GPIO_Port,SPI2_CS_Pin);
 8000514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000518:	4917      	ldr	r1, [pc, #92]	; (8000578 <main+0x78>)
 800051a:	4818      	ldr	r0, [pc, #96]	; (800057c <main+0x7c>)
 800051c:	f001 ffd6 	bl	80024cc <EEPROM_Init>

  if(EEPROM_WriteByte(0x00, 'A'))
 8000520:	2141      	movs	r1, #65	; 0x41
 8000522:	2000      	movs	r0, #0
 8000524:	f002 f866 	bl	80025f4 <EEPROM_WriteByte>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d003      	beq.n	8000536 <main+0x36>
      {
    	  EEPROM_ReadByte(0x00, &data);
 800052e:	4914      	ldr	r1, [pc, #80]	; (8000580 <main+0x80>)
 8000530:	2000      	movs	r0, #0
 8000532:	f002 f805 	bl	8002540 <EEPROM_ReadByte>
      }

  if(EEPROM_WriteBuffer(0x02, (uint8_t*)sndBuffer, strlen(sndBuffer)))
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <main+0x84>)
 8000538:	681c      	ldr	r4, [r3, #0]
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <main+0x84>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe54 	bl	80001ec <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4621      	mov	r1, r4
 800054a:	2002      	movs	r0, #2
 800054c:	f002 f886 	bl	800265c <EEPROM_WriteBuffer>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d00f      	beq.n	8000576 <main+0x76>
     {
   	  memset(rcvBuffer, 0, sizeof(rcvBuffer));
 8000556:	221e      	movs	r2, #30
 8000558:	2100      	movs	r1, #0
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <main+0x88>)
 800055c:	f002 f944 	bl	80027e8 <memset>
   	  EEPROM_ReadBuffer(0x02, (uint8_t*)rcvBuffer,strlen(sndBuffer));
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <main+0x84>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe41 	bl	80001ec <strlen>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4906      	ldr	r1, [pc, #24]	; (8000588 <main+0x88>)
 8000570:	2002      	movs	r0, #2
 8000572:	f002 f815 	bl	80025a0 <EEPROM_ReadBuffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000576:	e7fe      	b.n	8000576 <main+0x76>
 8000578:	40020c00 	.word	0x40020c00
 800057c:	2000002c 	.word	0x2000002c
 8000580:	20000084 	.word	0x20000084
 8000584:	20000000 	.word	0x20000000
 8000588:	20000088 	.word	0x20000088

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f924 	bl	80027e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <SystemClock_Config+0xd8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a2a      	ldr	r2, [pc, #168]	; (8000664 <SystemClock_Config+0xd8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xd8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <SystemClock_Config+0xdc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a24      	ldr	r2, [pc, #144]	; (8000668 <SystemClock_Config+0xdc>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xdc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000600:	23b4      	movs	r3, #180	; 0xb4
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fd4f 	bl	80010b4 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f8bc 	bl	8000798 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000620:	f000 fcf8 	bl	8001014 <HAL_PWREx_EnableOverDrive>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800062a:	f000 f8b5 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2105      	movs	r1, #5
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ffa9 	bl	80015a4 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000658:	f000 f89e 	bl	8000798 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <MX_SPI2_Init+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800067c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_SPI2_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_SPI2_Init+0x64>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006b8:	220a      	movs	r2, #10
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_SPI2_Init+0x64>)
 80006be:	f001 f95d 	bl	800197c <HAL_SPI_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006c8:	f000 f866 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000002c 	.word	0x2000002c
 80006d4:	40003800 	.word	0x40003800

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b27      	ldr	r3, [pc, #156]	; (8000790 <MX_GPIO_Init+0xb8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <MX_GPIO_Init+0xb8>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_GPIO_Init+0xb8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_GPIO_Init+0xb8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <MX_GPIO_Init+0xb8>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_GPIO_Init+0xb8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xbc>)
 8000766:	f000 fc3b 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800076a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000774:	2301      	movs	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0xbc>)
 8000784:	f000 fa80 	bl	8000c88 <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020c00 	.word	0x40020c00

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a28      	ldr	r2, [pc, #160]	; (80008b4 <HAL_SPI_MspInit+0xc0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d14a      	bne.n	80008ac <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_SPI_MspInit+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086a:	230c      	movs	r3, #12
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087a:	2305      	movs	r3, #5
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <HAL_SPI_MspInit+0xc8>)
 8000886:	f000 f9ff 	bl	8000c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089c:	2305      	movs	r3, #5
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <HAL_SPI_MspInit+0xcc>)
 80008a8:	f000 f9ee 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40003800 	.word	0x40003800
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020400 	.word	0x40020400

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f890 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000934:	4c0b      	ldr	r4, [pc, #44]	; (8000964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000942:	f000 f813 	bl	800096c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f001 ff2b 	bl	80027a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fdd9 	bl	8000500 <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000950:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800095c:	0800284c 	.word	0x0800284c
  ldr r2, =_sbss
 8000960:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000964:	200000b8 	.word	0x200000b8

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <HAL_Init+0x40>)
 800099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_Init+0x40>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x40>)
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f931 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff feee 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023c00 	.word	0x40023c00

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f93b 	bl	8000c6e <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 f911 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	2000000c 	.word	0x2000000c
 8000a30:	20000008 	.word	0x20000008

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000000c 	.word	0x2000000c
 8000a58:	200000a8 	.word	0x200000a8

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200000a8 	.word	0x200000a8

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff ffde 	bl	8000a5c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000000c 	.word	0x2000000c

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff47 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff5c 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff8e 	bl	8000b74 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffb0 	bl	8000bdc <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	e177      	b.n	8000f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8166 	bne.w	8000f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d005      	beq.n	8000cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d130      	bne.n	8000d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	f003 0201 	and.w	r2, r3, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d017      	beq.n	8000d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d123      	bne.n	8000dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	69b9      	ldr	r1, [r7, #24]
 8000dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0203 	and.w	r2, r3, #3
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80c0 	beq.w	8000f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b66      	ldr	r3, [pc, #408]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a65      	ldr	r2, [pc, #404]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b63      	ldr	r3, [pc, #396]	; (8000fac <HAL_GPIO_Init+0x324>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e2a:	4a61      	ldr	r2, [pc, #388]	; (8000fb0 <HAL_GPIO_Init+0x328>)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <HAL_GPIO_Init+0x32c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d037      	beq.n	8000ec6 <HAL_GPIO_Init+0x23e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a57      	ldr	r2, [pc, #348]	; (8000fb8 <HAL_GPIO_Init+0x330>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d031      	beq.n	8000ec2 <HAL_GPIO_Init+0x23a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a56      	ldr	r2, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x334>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d02b      	beq.n	8000ebe <HAL_GPIO_Init+0x236>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a55      	ldr	r2, [pc, #340]	; (8000fc0 <HAL_GPIO_Init+0x338>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d025      	beq.n	8000eba <HAL_GPIO_Init+0x232>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a54      	ldr	r2, [pc, #336]	; (8000fc4 <HAL_GPIO_Init+0x33c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01f      	beq.n	8000eb6 <HAL_GPIO_Init+0x22e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a53      	ldr	r2, [pc, #332]	; (8000fc8 <HAL_GPIO_Init+0x340>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x22a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a52      	ldr	r2, [pc, #328]	; (8000fcc <HAL_GPIO_Init+0x344>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x226>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <HAL_GPIO_Init+0x348>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x222>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <HAL_GPIO_Init+0x34c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x21e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x21a>
 8000e9e:	2309      	movs	r3, #9
 8000ea0:	e012      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	e010      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	e00e      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x240>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <HAL_GPIO_Init+0x328>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0a:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f34:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_GPIO_Init+0x354>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	f67f ae84 	bls.w	8000ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40021400 	.word	0x40021400
 8000fcc:	40021800 	.word	0x40021800
 8000fd0:	40021c00 	.word	0x40021c00
 8000fd4:	40022000 	.word	0x40022000
 8000fd8:	40022400 	.word	0x40022400
 8000fdc:	40013c00 	.word	0x40013c00

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ffc:	e003      	b.n	8001006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	041a      	lsls	r2, r3, #16
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	619a      	str	r2, [r3, #24]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001040:	f7ff fd0c 	bl	8000a5c <HAL_GetTick>
 8001044:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001046:	e009      	b.n	800105c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001048:	f7ff fd08 	bl	8000a5c <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001056:	d901      	bls.n	800105c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e01f      	b.n	800109c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_PWREx_EnableOverDrive+0x98>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001068:	d1ee      	bne.n	8001048 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001070:	f7ff fcf4 	bl	8000a5c <HAL_GetTick>
 8001074:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001076:	e009      	b.n	800108c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001078:	f7ff fcf0 	bl	8000a5c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001086:	d901      	bls.n	800108c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e007      	b.n	800109c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_PWREx_EnableOverDrive+0x98>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001098:	d1ee      	bne.n	8001078 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	420e0040 	.word	0x420e0040
 80010ac:	40007000 	.word	0x40007000
 80010b0:	420e0044 	.word	0x420e0044

080010b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e267      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d075      	beq.n	80011be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d2:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d00c      	beq.n	80010f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010de:	4b85      	ldr	r3, [pc, #532]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d112      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	4b7e      	ldr	r3, [pc, #504]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05b      	beq.n	80011bc <HAL_RCC_OscConfig+0x108>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d157      	bne.n	80011bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e242      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d106      	bne.n	8001128 <HAL_RCC_OscConfig+0x74>
 800111a:	4b76      	ldr	r3, [pc, #472]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a75      	ldr	r2, [pc, #468]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x98>
 8001132:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6f      	ldr	r2, [pc, #444]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6c      	ldr	r2, [pc, #432]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 800114c:	4b69      	ldr	r3, [pc, #420]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a68      	ldr	r2, [pc, #416]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a65      	ldr	r2, [pc, #404]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fc76 	bl	8000a5c <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fc72 	bl	8000a5c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	; 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e207      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b5b      	ldr	r3, [pc, #364]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0xc0>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fc62 	bl	8000a5c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fc5e 	bl	8000a5c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1f3      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0xe8>
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d063      	beq.n	8001292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ca:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d11c      	bne.n	800121c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d116      	bne.n	800121c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x152>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e1c7      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4937      	ldr	r1, [pc, #220]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	e03a      	b.n	8001292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <HAL_RCC_OscConfig+0x244>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff fc17 	bl	8000a5c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fc13 	bl	8000a5c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1a8      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4925      	ldr	r1, [pc, #148]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_RCC_OscConfig+0x244>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fbf6 	bl	8000a5c <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fbf2 	bl	8000a5c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e187      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d036      	beq.n	800130c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d016      	beq.n	80012d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_RCC_OscConfig+0x248>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fbd6 	bl	8000a5c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff fbd2 	bl	8000a5c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e167      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_OscConfig+0x240>)
 80012c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x200>
 80012d2:	e01b      	b.n	800130c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_RCC_OscConfig+0x248>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fbbf 	bl	8000a5c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	e00e      	b.n	8001300 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fbbb 	bl	8000a5c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d907      	bls.n	8001300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e150      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
 80012f4:	40023800 	.word	0x40023800
 80012f8:	42470000 	.word	0x42470000
 80012fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1ea      	bne.n	80012e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 8097 	beq.w	8001448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131e:	4b81      	ldr	r3, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10f      	bne.n	800134a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b7d      	ldr	r3, [pc, #500]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a7c      	ldr	r2, [pc, #496]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b7a      	ldr	r3, [pc, #488]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001346:	2301      	movs	r3, #1
 8001348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134a:	4b77      	ldr	r3, [pc, #476]	; (8001528 <HAL_RCC_OscConfig+0x474>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d118      	bne.n	8001388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001356:	4b74      	ldr	r3, [pc, #464]	; (8001528 <HAL_RCC_OscConfig+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a73      	ldr	r2, [pc, #460]	; (8001528 <HAL_RCC_OscConfig+0x474>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001362:	f7ff fb7b 	bl	8000a5c <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136a:	f7ff fb77 	bl	8000a5c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e10c      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	4b6a      	ldr	r3, [pc, #424]	; (8001528 <HAL_RCC_OscConfig+0x474>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x2ea>
 8001390:	4b64      	ldr	r3, [pc, #400]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001394:	4a63      	ldr	r2, [pc, #396]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6713      	str	r3, [r2, #112]	; 0x70
 800139c:	e01c      	b.n	80013d8 <HAL_RCC_OscConfig+0x324>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x30c>
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	4a5e      	ldr	r2, [pc, #376]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6713      	str	r3, [r2, #112]	; 0x70
 80013b2:	4b5c      	ldr	r3, [pc, #368]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	4a5b      	ldr	r2, [pc, #364]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6713      	str	r3, [r2, #112]	; 0x70
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0x324>
 80013c0:	4b58      	ldr	r3, [pc, #352]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a57      	ldr	r2, [pc, #348]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
 80013cc:	4b55      	ldr	r3, [pc, #340]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a54      	ldr	r2, [pc, #336]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f023 0304 	bic.w	r3, r3, #4
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d015      	beq.n	800140c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fb3c 	bl	8000a5c <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb38 	bl	8000a5c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e0cb      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fe:	4b49      	ldr	r3, [pc, #292]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0ee      	beq.n	80013e8 <HAL_RCC_OscConfig+0x334>
 800140a:	e014      	b.n	8001436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff fb26 	bl	8000a5c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001412:	e00a      	b.n	800142a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001414:	f7ff fb22 	bl	8000a5c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001422:	4293      	cmp	r3, r2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e0b5      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ee      	bne.n	8001414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a38      	ldr	r2, [pc, #224]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80a1 	beq.w	8001594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b08      	cmp	r3, #8
 800145c:	d05c      	beq.n	8001518 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d141      	bne.n	80014ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_RCC_OscConfig+0x478>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff faf6 	bl	8000a5c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff faf2 	bl	8000a5c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e087      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69da      	ldr	r2, [r3, #28]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	019b      	lsls	r3, r3, #6
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	3b01      	subs	r3, #1
 80014ac:	041b      	lsls	r3, r3, #16
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	491b      	ldr	r1, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_RCC_OscConfig+0x478>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff facb 	bl	8000a5c <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ca:	f7ff fac7 	bl	8000a5c <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e05c      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x416>
 80014e8:	e054      	b.n	8001594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_RCC_OscConfig+0x478>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fab4 	bl	8000a5c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff fab0 	bl	8000a5c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e045      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_RCC_OscConfig+0x470>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x444>
 8001516:	e03d      	b.n	8001594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d107      	bne.n	8001530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e038      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000
 800152c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_RCC_OscConfig+0x4ec>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d028      	beq.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d121      	bne.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d11a      	bne.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001560:	4013      	ands	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001568:	4293      	cmp	r3, r2
 800156a:	d111      	bne.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	085b      	lsrs	r3, r3, #1
 8001578:	3b01      	subs	r3, #1
 800157a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0cc      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d90c      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b65      	ldr	r3, [pc, #404]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a58      	ldr	r2, [pc, #352]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800161a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d044      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d119      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	2b03      	cmp	r3, #3
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e06f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e067      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4934      	ldr	r1, [pc, #208]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff f9e2 	bl	8000a5c <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff f9de 	bl	8000a5c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e04f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d20c      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f821 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f942 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00
 8001760:	40023800 	.word	0x40023800
 8001764:	0800282c 	.word	0x0800282c
 8001768:	20000004 	.word	0x20000004
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001774:	b094      	sub	sp, #80	; 0x50
 8001776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001780:	2300      	movs	r3, #0
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001788:	4b79      	ldr	r3, [pc, #484]	; (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d00d      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001794:	2b08      	cmp	r3, #8
 8001796:	f200 80e1 	bhi.w	800195c <HAL_RCC_GetSysClockFreq+0x1ec>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x34>
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x3a>
 80017a2:	e0db      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4b73      	ldr	r3, [pc, #460]	; (8001974 <HAL_RCC_GetSysClockFreq+0x204>)
 80017a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017a8:	e0db      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017aa:	4b73      	ldr	r3, [pc, #460]	; (8001978 <HAL_RCC_GetSysClockFreq+0x208>)
 80017ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017ae:	e0d8      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b0:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ba:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d063      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c6:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	099b      	lsrs	r3, r3, #6
 80017cc:	2200      	movs	r2, #0
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80017d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
 80017de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017e2:	4622      	mov	r2, r4
 80017e4:	462b      	mov	r3, r5
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	0159      	lsls	r1, r3, #5
 80017f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f4:	0150      	lsls	r0, r2, #5
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4621      	mov	r1, r4
 80017fc:	1a51      	subs	r1, r2, r1
 80017fe:	6139      	str	r1, [r7, #16]
 8001800:	4629      	mov	r1, r5
 8001802:	eb63 0301 	sbc.w	r3, r3, r1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001814:	4659      	mov	r1, fp
 8001816:	018b      	lsls	r3, r1, #6
 8001818:	4651      	mov	r1, sl
 800181a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181e:	4651      	mov	r1, sl
 8001820:	018a      	lsls	r2, r1, #6
 8001822:	4651      	mov	r1, sl
 8001824:	ebb2 0801 	subs.w	r8, r2, r1
 8001828:	4659      	mov	r1, fp
 800182a:	eb63 0901 	sbc.w	r9, r3, r1
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800183a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800183e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001842:	4690      	mov	r8, r2
 8001844:	4699      	mov	r9, r3
 8001846:	4623      	mov	r3, r4
 8001848:	eb18 0303 	adds.w	r3, r8, r3
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	462b      	mov	r3, r5
 8001850:	eb49 0303 	adc.w	r3, r9, r3
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001862:	4629      	mov	r1, r5
 8001864:	024b      	lsls	r3, r1, #9
 8001866:	4621      	mov	r1, r4
 8001868:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800186c:	4621      	mov	r1, r4
 800186e:	024a      	lsls	r2, r1, #9
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001876:	2200      	movs	r2, #0
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
 800187a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800187c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001880:	f7fe fcbc 	bl	80001fc <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4613      	mov	r3, r2
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800188c:	e058      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	2200      	movs	r2, #0
 8001896:	4618      	mov	r0, r3
 8001898:	4611      	mov	r1, r2
 800189a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
 80018a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a8:	4642      	mov	r2, r8
 80018aa:	464b      	mov	r3, r9
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	0159      	lsls	r1, r3, #5
 80018b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ba:	0150      	lsls	r0, r2, #5
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4641      	mov	r1, r8
 80018c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018c6:	4649      	mov	r1, r9
 80018c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018e0:	ebb2 040a 	subs.w	r4, r2, sl
 80018e4:	eb63 050b 	sbc.w	r5, r3, fp
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	00eb      	lsls	r3, r5, #3
 80018f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018f6:	00e2      	lsls	r2, r4, #3
 80018f8:	4614      	mov	r4, r2
 80018fa:	461d      	mov	r5, r3
 80018fc:	4643      	mov	r3, r8
 80018fe:	18e3      	adds	r3, r4, r3
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	464b      	mov	r3, r9
 8001904:	eb45 0303 	adc.w	r3, r5, r3
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001916:	4629      	mov	r1, r5
 8001918:	028b      	lsls	r3, r1, #10
 800191a:	4621      	mov	r1, r4
 800191c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001920:	4621      	mov	r1, r4
 8001922:	028a      	lsls	r2, r1, #10
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800192a:	2200      	movs	r2, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	61fa      	str	r2, [r7, #28]
 8001930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001934:	f7fe fc62 	bl	80001fc <__aeabi_uldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4613      	mov	r3, r2
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetSysClockFreq+0x204>)
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001964:	4618      	mov	r0, r3
 8001966:	3750      	adds	r7, #80	; 0x50
 8001968:	46bd      	mov	sp, r7
 800196a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200

0800197c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07b      	b.n	8001a86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800199e:	d009      	beq.n	80019b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
 80019a6:	e005      	b.n	80019b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe ff10 	bl	80007f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	ea42 0103 	orr.w	r1, r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	f003 0104 	and.w	r1, r3, #4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	f003 0210 	and.w	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b088      	sub	sp, #32
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_SPI_Transmit+0x22>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e126      	b.n	8001cfe <HAL_SPI_Transmit+0x270>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ab8:	f7fe ffd0 	bl	8000a5c <HAL_GetTick>
 8001abc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d002      	beq.n	8001ad4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ad2:	e10b      	b.n	8001cec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_SPI_Transmit+0x52>
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ae4:	e102      	b.n	8001cec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	88fa      	ldrh	r2, [r7, #6]
 8001afe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b2c:	d10f      	bne.n	8001b4e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d007      	beq.n	8001b6c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b74:	d14b      	bne.n	8001c0e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_SPI_Transmit+0xf6>
 8001b7e:	8afb      	ldrh	r3, [r7, #22]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d13e      	bne.n	8001c02 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	881a      	ldrh	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	1c9a      	adds	r2, r3, #2
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ba8:	e02b      	b.n	8001c02 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d112      	bne.n	8001bde <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	1c9a      	adds	r2, r3, #2
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bdc:	e011      	b.n	8001c02 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bde:	f7fe ff3d 	bl	8000a5c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d803      	bhi.n	8001bf6 <HAL_SPI_Transmit+0x168>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d102      	bne.n	8001bfc <HAL_SPI_Transmit+0x16e>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c00:	e074      	b.n	8001cec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ce      	bne.n	8001baa <HAL_SPI_Transmit+0x11c>
 8001c0c:	e04c      	b.n	8001ca8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_SPI_Transmit+0x18e>
 8001c16:	8afb      	ldrh	r3, [r7, #22]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d140      	bne.n	8001c9e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	330c      	adds	r3, #12
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c42:	e02c      	b.n	8001c9e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d113      	bne.n	8001c7a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	330c      	adds	r3, #12
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c78:	e011      	b.n	8001c9e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c7a:	f7fe feef 	bl	8000a5c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d803      	bhi.n	8001c92 <HAL_SPI_Transmit+0x204>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d102      	bne.n	8001c98 <HAL_SPI_Transmit+0x20a>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c9c:	e026      	b.n	8001cec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1cd      	bne.n	8001c44 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	6839      	ldr	r1, [r7, #0]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fbcb 	bl	8002448 <SPI_EndRxTxTransaction>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	77fb      	strb	r3, [r7, #31]
 8001ce8:	e000      	b.n	8001cec <HAL_SPI_Transmit+0x25e>
  }

error:
 8001cea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b088      	sub	sp, #32
 8001d0a:	af02      	add	r7, sp, #8
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4613      	mov	r3, r2
 8001d14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d22:	d112      	bne.n	8001d4a <HAL_SPI_Receive+0x44>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10e      	bne.n	8001d4a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 f8f1 	bl	8001f28 <HAL_SPI_TransmitReceive>
 8001d46:	4603      	mov	r3, r0
 8001d48:	e0ea      	b.n	8001f20 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_SPI_Receive+0x52>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0e3      	b.n	8001f20 <HAL_SPI_Receive+0x21a>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d60:	f7fe fe7c 	bl	8000a5c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d002      	beq.n	8001d78 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
 8001d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d76:	e0ca      	b.n	8001f0e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_SPI_Receive+0x7e>
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d88:	e0c1      	b.n	8001f0e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd0:	d10f      	bne.n	8001df2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001de0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	2b40      	cmp	r3, #64	; 0x40
 8001dfe:	d007      	beq.n	8001e10 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d162      	bne.n	8001ede <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e18:	e02e      	b.n	8001e78 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d115      	bne.n	8001e54 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f103 020c 	add.w	r2, r3, #12
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	7812      	ldrb	r2, [r2, #0]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e52:	e011      	b.n	8001e78 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e54:	f7fe fe02 	bl	8000a5c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d803      	bhi.n	8001e6c <HAL_SPI_Receive+0x166>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6a:	d102      	bne.n	8001e72 <HAL_SPI_Receive+0x16c>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e76:	e04a      	b.n	8001f0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1cb      	bne.n	8001e1a <HAL_SPI_Receive+0x114>
 8001e82:	e031      	b.n	8001ee8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d113      	bne.n	8001eba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001eb8:	e011      	b.n	8001ede <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eba:	f7fe fdcf 	bl	8000a5c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d803      	bhi.n	8001ed2 <HAL_SPI_Receive+0x1cc>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d102      	bne.n	8001ed8 <HAL_SPI_Receive+0x1d2>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001edc:	e017      	b.n	8001f0e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1cd      	bne.n	8001e84 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fa45 	bl	800237c <SPI_EndRxTransaction>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	75fb      	strb	r3, [r7, #23]
 8001f0a:	e000      	b.n	8001f0e <HAL_SPI_Receive+0x208>
  }

error :
 8001f0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f36:	2301      	movs	r3, #1
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x26>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e18a      	b.n	8002264 <HAL_SPI_TransmitReceive+0x33c>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f56:	f7fe fd81 	bl	8000a5c <HAL_GetTick>
 8001f5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d00f      	beq.n	8001f98 <HAL_SPI_TransmitReceive+0x70>
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f7e:	d107      	bne.n	8001f90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <HAL_SPI_TransmitReceive+0x68>
 8001f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d003      	beq.n	8001f98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
 8001f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f96:	e15b      	b.n	8002250 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_SPI_TransmitReceive+0x82>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <HAL_SPI_TransmitReceive+0x82>
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fb0:	e14e      	b.n	8002250 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d003      	beq.n	8001fc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2205      	movs	r2, #5
 8001fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	887a      	ldrh	r2, [r7, #2]
 8001fee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b40      	cmp	r3, #64	; 0x40
 8002008:	d007      	beq.n	800201a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002022:	d178      	bne.n	8002116 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_SPI_TransmitReceive+0x10a>
 800202c:	8b7b      	ldrh	r3, [r7, #26]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d166      	bne.n	8002100 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	881a      	ldrh	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	1c9a      	adds	r2, r3, #2
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002056:	e053      	b.n	8002100 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d11b      	bne.n	800209e <HAL_SPI_TransmitReceive+0x176>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d016      	beq.n	800209e <HAL_SPI_TransmitReceive+0x176>
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	2b01      	cmp	r3, #1
 8002074:	d113      	bne.n	800209e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	1c9a      	adds	r2, r3, #2
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d119      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x1b8>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d014      	beq.n	80020e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	b292      	uxth	r2, r2
 80020c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	1c9a      	adds	r2, r3, #2
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020dc:	2301      	movs	r3, #1
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020e0:	f7fe fcbc 	bl	8000a5c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d807      	bhi.n	8002100 <HAL_SPI_TransmitReceive+0x1d8>
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f6:	d003      	beq.n	8002100 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020fe:	e0a7      	b.n	8002250 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1a6      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x130>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1a1      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x130>
 8002114:	e07c      	b.n	8002210 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_SPI_TransmitReceive+0x1fc>
 800211e:	8b7b      	ldrh	r3, [r7, #26]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d16b      	bne.n	80021fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	7812      	ldrb	r2, [r2, #0]
 8002130:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800214a:	e057      	b.n	80021fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b02      	cmp	r3, #2
 8002158:	d11c      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x26c>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d017      	beq.n	8002194 <HAL_SPI_TransmitReceive+0x26c>
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d114      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	330c      	adds	r3, #12
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d119      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x2ae>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d014      	beq.n	80021d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021d2:	2301      	movs	r3, #1
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021d6:	f7fe fc41 	bl	8000a5c <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d803      	bhi.n	80021ee <HAL_SPI_TransmitReceive+0x2c6>
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d102      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x2cc>
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021fa:	e029      	b.n	8002250 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1a2      	bne.n	800214c <HAL_SPI_TransmitReceive+0x224>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d19d      	bne.n	800214c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f917 	bl	8002448 <SPI_EndRxTxTransaction>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2220      	movs	r2, #32
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800222c:	e010      	b.n	8002250 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10b      	bne.n	800224e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	e000      	b.n	8002250 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800224e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002260:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002264:	4618      	mov	r0, r3
 8002266:	3730      	adds	r7, #48	; 0x30
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800227c:	f7fe fbee 	bl	8000a5c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	4413      	add	r3, r2
 800228a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800228c:	f7fe fbe6 	bl	8000a5c <HAL_GetTick>
 8002290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	015b      	lsls	r3, r3, #5
 8002298:	0d1b      	lsrs	r3, r3, #20
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022a2:	e054      	b.n	800234e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d050      	beq.n	800234e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022ac:	f7fe fbd6 	bl	8000a5c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d902      	bls.n	80022c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d13d      	bne.n	800233e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022da:	d111      	bne.n	8002300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e4:	d004      	beq.n	80022f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ee:	d107      	bne.n	8002300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002308:	d10f      	bne.n	800232a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e017      	b.n	800236e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3b01      	subs	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4013      	ands	r3, r2
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	429a      	cmp	r2, r3
 800236a:	d19b      	bne.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000004 	.word	0x20000004

0800237c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002390:	d111      	bne.n	80023b6 <SPI_EndRxTransaction+0x3a>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239a:	d004      	beq.n	80023a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a4:	d107      	bne.n	80023b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023be:	d12a      	bne.n	8002416 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c8:	d012      	beq.n	80023f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff ff49 	bl	800226c <SPI_WaitFlagStateUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02d      	beq.n	800243c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e026      	b.n	800243e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2200      	movs	r2, #0
 80023f8:	2101      	movs	r1, #1
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff ff36 	bl	800226c <SPI_WaitFlagStateUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01a      	beq.n	800243c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e013      	b.n	800243e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	2101      	movs	r1, #1
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff ff23 	bl	800226c <SPI_WaitFlagStateUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e000      	b.n	800243e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <SPI_EndRxTxTransaction+0x7c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <SPI_EndRxTxTransaction+0x80>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0d5b      	lsrs	r3, r3, #21
 8002460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002472:	d112      	bne.n	800249a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2200      	movs	r2, #0
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff fef4 	bl	800226c <SPI_WaitFlagStateUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	f043 0220 	orr.w	r2, r3, #32
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e00f      	b.n	80024ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d0f2      	beq.n	800249a <SPI_EndRxTxTransaction+0x52>
 80024b4:	e000      	b.n	80024b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80024b6:	bf00      	nop
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000004 	.word	0x20000004
 80024c8:	165e9f81 	.word	0x165e9f81

080024cc <EEPROM_Init>:

static void SS_Select();
static void SS_Deselect();

void EEPROM_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* ss_port, uint16_t ss_pin)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
	EEPROM_SPI = spi;
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <EEPROM_Init+0x2c>)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6013      	str	r3, [r2, #0]
	EEPROM_SS_Port = ss_port;
 80024e0:	4a06      	ldr	r2, [pc, #24]	; (80024fc <EEPROM_Init+0x30>)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6013      	str	r3, [r2, #0]
	EEPROM_SS_Pin = ss_pin;
 80024e6:	4a06      	ldr	r2, [pc, #24]	; (8002500 <EEPROM_Init+0x34>)
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	8013      	strh	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	200000ac 	.word	0x200000ac
 80024fc:	200000b0 	.word	0x200000b0
 8002500:	200000b4 	.word	0x200000b4

08002504 <EEPROM_WriteEnable>:

bool EEPROM_WriteEnable(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
	uint8_t data = EEPROM_CMD_WREN;
 800250a:	2306      	movs	r3, #6
 800250c:	71fb      	strb	r3, [r7, #7]
	SS_Select();
 800250e:	f000 f91f 	bl	8002750 <SS_Select>
	if(HAL_SPI_Transmit(EEPROM_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <EEPROM_WriteEnable+0x38>)
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	1df9      	adds	r1, r7, #7
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	2201      	movs	r2, #1
 800251e:	f7ff fab6 	bl	8001a8e <HAL_SPI_Transmit>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <EEPROM_WriteEnable+0x28>
 8002528:	2300      	movs	r3, #0
 800252a:	e002      	b.n	8002532 <EEPROM_WriteEnable+0x2e>
	SS_Deselect();
 800252c:	f000 f924 	bl	8002778 <SS_Deselect>

	return true;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200000ac 	.word	0x200000ac

08002540 <EEPROM_ReadByte>:

bool EEPROM_ReadByte(uint8_t address, uint8_t* ret)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {EEPROM_CMD_READ, address};
 800254c:	2303      	movs	r3, #3
 800254e:	733b      	strb	r3, [r7, #12]
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	737b      	strb	r3, [r7, #13]

	SS_Select();
 8002554:	f000 f8fc 	bl	8002750 <SS_Select>
	if(HAL_SPI_Transmit(EEPROM_SPI, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK) return false;
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <EEPROM_ReadByte+0x5c>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	f107 010c 	add.w	r1, r7, #12
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	2202      	movs	r2, #2
 8002566:	f7ff fa92 	bl	8001a8e <HAL_SPI_Transmit>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <EEPROM_ReadByte+0x34>
 8002570:	2300      	movs	r3, #0
 8002572:	e00f      	b.n	8002594 <EEPROM_ReadByte+0x54>
	if(HAL_SPI_Receive(EEPROM_SPI, ret, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <EEPROM_ReadByte+0x5c>)
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	2201      	movs	r2, #1
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	f7ff fbc1 	bl	8001d06 <HAL_SPI_Receive>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <EEPROM_ReadByte+0x4e>
 800258a:	2300      	movs	r3, #0
 800258c:	e002      	b.n	8002594 <EEPROM_ReadByte+0x54>
	SS_Deselect();
 800258e:	f000 f8f3 	bl	8002778 <SS_Deselect>

	return true;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200000ac 	.word	0x200000ac

080025a0 <EEPROM_ReadBuffer>:

bool EEPROM_ReadBuffer(uint8_t address, uint8_t *buffer, uint8_t length)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
 80025ac:	4613      	mov	r3, r2
 80025ae:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0; i < length; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e014      	b.n	80025e0 <EEPROM_ReadBuffer+0x40>
	{
		if(!EEPROM_ReadByte(address+i, &buffer[i])) return false;
 80025b6:	79fa      	ldrb	r2, [r7, #7]
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	4413      	add	r3, r2
 80025bc:	b2d8      	uxtb	r0, r3
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f7ff ffbb 	bl	8002540 <EEPROM_ReadByte>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <EEPROM_ReadBuffer+0x3a>
 80025d6:	2300      	movs	r3, #0
 80025d8:	e007      	b.n	80025ea <EEPROM_ReadBuffer+0x4a>
	for(uint8_t i=0; i < length; i++)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3301      	adds	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d3e6      	bcc.n	80025b6 <EEPROM_ReadBuffer+0x16>
	}

	return true;
 80025e8:	2301      	movs	r3, #1
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <EEPROM_WriteByte>:

bool EEPROM_WriteByte(uint8_t address, uint8_t data)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	460a      	mov	r2, r1
 80025fe:	71fb      	strb	r3, [r7, #7]
 8002600:	4613      	mov	r3, r2
 8002602:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[3] = {EEPROM_CMD_WRITE, address, data};
 8002604:	2302      	movs	r3, #2
 8002606:	733b      	strb	r3, [r7, #12]
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	737b      	strb	r3, [r7, #13]
 800260c:	79bb      	ldrb	r3, [r7, #6]
 800260e:	73bb      	strb	r3, [r7, #14]

	if(!EEPROM_WriteEnable()) return false;
 8002610:	f7ff ff78 	bl	8002504 <EEPROM_WriteEnable>
 8002614:	4603      	mov	r3, r0
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <EEPROM_WriteByte+0x30>
 8002620:	2300      	movs	r3, #0
 8002622:	e015      	b.n	8002650 <EEPROM_WriteByte+0x5c>
	SS_Select();
 8002624:	f000 f894 	bl	8002750 <SS_Select>
	if(HAL_SPI_Transmit(EEPROM_SPI, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <EEPROM_WriteByte+0x64>)
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	f107 010c 	add.w	r1, r7, #12
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	2203      	movs	r2, #3
 8002636:	f7ff fa2a 	bl	8001a8e <HAL_SPI_Transmit>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <EEPROM_WriteByte+0x50>
 8002640:	2300      	movs	r3, #0
 8002642:	e005      	b.n	8002650 <EEPROM_WriteByte+0x5c>
	SS_Deselect();
 8002644:	f000 f898 	bl	8002778 <SS_Deselect>

	/* Wait write cycle time 5ms */
	HAL_Delay(5);
 8002648:	2005      	movs	r0, #5
 800264a:	f7fe fa13 	bl	8000a74 <HAL_Delay>

	return true;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200000ac 	.word	0x200000ac

0800265c <EEPROM_WriteBuffer>:

bool EEPROM_WriteBuffer(uint8_t address, uint8_t *buffer, uint8_t length)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	4613      	mov	r3, r2
 800266a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {EEPROM_CMD_WRITE, address};
 800266c:	2302      	movs	r3, #2
 800266e:	733b      	strb	r3, [r7, #12]
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	737b      	strb	r3, [r7, #13]

	if(!EEPROM_WriteEnable()) return false;
 8002674:	f7ff ff46 	bl	8002504 <EEPROM_WriteEnable>
 8002678:	4603      	mov	r3, r0
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <EEPROM_WriteBuffer+0x2c>
 8002684:	2300      	movs	r3, #0
 8002686:	e05d      	b.n	8002744 <EEPROM_WriteBuffer+0xe8>
	SS_Select();
 8002688:	f000 f862 	bl	8002750 <SS_Select>
	if(HAL_SPI_Transmit(EEPROM_SPI, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK) return false;
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <EEPROM_WriteBuffer+0xf0>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	f107 010c 	add.w	r1, r7, #12
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
 8002698:	2202      	movs	r2, #2
 800269a:	f7ff f9f8 	bl	8001a8e <HAL_SPI_Transmit>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <EEPROM_WriteBuffer+0x4c>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e04d      	b.n	8002744 <EEPROM_WriteBuffer+0xe8>

	for(uint8_t i = 0; i < length; i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e040      	b.n	8002730 <EEPROM_WriteBuffer+0xd4>
	{
		/* Handle Paging */
		if( (address+i) % EEPROM_PAGE_SIZE == 0 && i != 0 )
 80026ae:	79fa      	ldrb	r2, [r7, #7]
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	4413      	add	r3, r2
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d126      	bne.n	800270c <EEPROM_WriteBuffer+0xb0>
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d023      	beq.n	800270c <EEPROM_WriteBuffer+0xb0>
		{
			SS_Deselect();
 80026c4:	f000 f858 	bl	8002778 <SS_Deselect>
			HAL_Delay(5);
 80026c8:	2005      	movs	r0, #5
 80026ca:	f7fe f9d3 	bl	8000a74 <HAL_Delay>

			if(!EEPROM_WriteEnable()) return false;
 80026ce:	f7ff ff19 	bl	8002504 <EEPROM_WriteEnable>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f083 0301 	eor.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <EEPROM_WriteBuffer+0x86>
 80026de:	2300      	movs	r3, #0
 80026e0:	e030      	b.n	8002744 <EEPROM_WriteBuffer+0xe8>
			SS_Select();
 80026e2:	f000 f835 	bl	8002750 <SS_Select>
			data[1] = address + i;
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	4413      	add	r3, r2
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	737b      	strb	r3, [r7, #13]
			if(HAL_SPI_Transmit(EEPROM_SPI, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK) return false;
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <EEPROM_WriteBuffer+0xf0>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	f107 010c 	add.w	r1, r7, #12
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
 80026fc:	2202      	movs	r2, #2
 80026fe:	f7ff f9c6 	bl	8001a8e <HAL_SPI_Transmit>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <EEPROM_WriteBuffer+0xb0>
 8002708:	2300      	movs	r3, #0
 800270a:	e01b      	b.n	8002744 <EEPROM_WriteBuffer+0xe8>
		}

		if(HAL_SPI_Transmit(EEPROM_SPI, &buffer[i], 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <EEPROM_WriteBuffer+0xf0>)
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	18d1      	adds	r1, r2, r3
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	2201      	movs	r2, #1
 800271c:	f7ff f9b7 	bl	8001a8e <HAL_SPI_Transmit>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <EEPROM_WriteBuffer+0xce>
 8002726:	2300      	movs	r3, #0
 8002728:	e00c      	b.n	8002744 <EEPROM_WriteBuffer+0xe8>
	for(uint8_t i = 0; i < length; i++)
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	3301      	adds	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	79bb      	ldrb	r3, [r7, #6]
 8002734:	429a      	cmp	r2, r3
 8002736:	d3ba      	bcc.n	80026ae <EEPROM_WriteBuffer+0x52>
	}

	SS_Deselect();
 8002738:	f000 f81e 	bl	8002778 <SS_Deselect>

	/* Wait write cycle time 5ms */
	HAL_Delay(5);
 800273c:	2005      	movs	r0, #5
 800273e:	f7fe f999 	bl	8000a74 <HAL_Delay>

	return true;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200000ac 	.word	0x200000ac

08002750 <SS_Select>:

	return true;
}

static void SS_Select()
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EEPROM_SS_Port, EEPROM_SS_Pin, GPIO_PIN_RESET);
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <SS_Select+0x20>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a06      	ldr	r2, [pc, #24]	; (8002774 <SS_Select+0x24>)
 800275a:	8811      	ldrh	r1, [r2, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fc3e 	bl	8000fe0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002764:	2001      	movs	r0, #1
 8002766:	f7fe f985 	bl	8000a74 <HAL_Delay>
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200000b0 	.word	0x200000b0
 8002774:	200000b4 	.word	0x200000b4

08002778 <SS_Deselect>:

static void SS_Deselect()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EEPROM_SS_Port, EEPROM_SS_Pin, GPIO_PIN_SET);
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <SS_Deselect+0x20>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <SS_Deselect+0x24>)
 8002782:	8811      	ldrh	r1, [r2, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fc2a 	bl	8000fe0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800278c:	2001      	movs	r0, #1
 800278e:	f7fe f971 	bl	8000a74 <HAL_Delay>
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200000b0 	.word	0x200000b0
 800279c:	200000b4 	.word	0x200000b4

080027a0 <__libc_init_array>:
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	4d0d      	ldr	r5, [pc, #52]	; (80027d8 <__libc_init_array+0x38>)
 80027a4:	4c0d      	ldr	r4, [pc, #52]	; (80027dc <__libc_init_array+0x3c>)
 80027a6:	1b64      	subs	r4, r4, r5
 80027a8:	10a4      	asrs	r4, r4, #2
 80027aa:	2600      	movs	r6, #0
 80027ac:	42a6      	cmp	r6, r4
 80027ae:	d109      	bne.n	80027c4 <__libc_init_array+0x24>
 80027b0:	4d0b      	ldr	r5, [pc, #44]	; (80027e0 <__libc_init_array+0x40>)
 80027b2:	4c0c      	ldr	r4, [pc, #48]	; (80027e4 <__libc_init_array+0x44>)
 80027b4:	f000 f820 	bl	80027f8 <_init>
 80027b8:	1b64      	subs	r4, r4, r5
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	2600      	movs	r6, #0
 80027be:	42a6      	cmp	r6, r4
 80027c0:	d105      	bne.n	80027ce <__libc_init_array+0x2e>
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c8:	4798      	blx	r3
 80027ca:	3601      	adds	r6, #1
 80027cc:	e7ee      	b.n	80027ac <__libc_init_array+0xc>
 80027ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d2:	4798      	blx	r3
 80027d4:	3601      	adds	r6, #1
 80027d6:	e7f2      	b.n	80027be <__libc_init_array+0x1e>
 80027d8:	08002844 	.word	0x08002844
 80027dc:	08002844 	.word	0x08002844
 80027e0:	08002844 	.word	0x08002844
 80027e4:	08002848 	.word	0x08002848

080027e8 <memset>:
 80027e8:	4402      	add	r2, r0
 80027ea:	4603      	mov	r3, r0
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d100      	bne.n	80027f2 <memset+0xa>
 80027f0:	4770      	bx	lr
 80027f2:	f803 1b01 	strb.w	r1, [r3], #1
 80027f6:	e7f9      	b.n	80027ec <memset+0x4>

080027f8 <_init>:
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fa:	bf00      	nop
 80027fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fe:	bc08      	pop	{r3}
 8002800:	469e      	mov	lr, r3
 8002802:	4770      	bx	lr

08002804 <_fini>:
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	bf00      	nop
 8002808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280a:	bc08      	pop	{r3}
 800280c:	469e      	mov	lr, r3
 800280e:	4770      	bx	lr
