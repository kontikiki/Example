
PM2007_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d10  08005d10  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d18  08005d18  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000063c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006d0  200006d0  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004bbee  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003374  00000000  00000000  0006bcb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000030d0  00000000  00000000  0006f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002f38  00000000  00000000  000720f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024faa  00000000  00000000  00075030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001abbc  00000000  00000000  00099fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebed9  00000000  00000000  000b4b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a0a6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dacc  00000000  00000000  001a0ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800584c 	.word	0x0800584c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800584c 	.word	0x0800584c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fe1d 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f9e7 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 faf3 	bl	8000b8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 fa9d 	bl	8000ae4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005aa:	f000 fac5 	bl	8000b38 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80005ae:	f000 fa63 	bl	8000a78 <MX_SPI2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005b2:	f000 fa4d 	bl	8000a50 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 80005b6:	4b93      	ldr	r3, [pc, #588]	; (8000804 <main+0x270>)
 80005b8:	4a93      	ldr	r2, [pc, #588]	; (8000808 <main+0x274>)
 80005ba:	4994      	ldr	r1, [pc, #592]	; (800080c <main+0x278>)
 80005bc:	4894      	ldr	r0, [pc, #592]	; (8000810 <main+0x27c>)
 80005be:	f002 fe4b 	bl	8003258 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 80005c2:	4893      	ldr	r0, [pc, #588]	; (8000810 <main+0x27c>)
 80005c4:	f004 fc04 	bl	8004dd0 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80005c8:	2100      	movs	r1, #0
 80005ca:	4891      	ldr	r0, [pc, #580]	; (8000810 <main+0x27c>)
 80005cc:	f004 fc0f 	bl	8004dee <u8x8_SetPowerSave>

	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 80005d0:	4990      	ldr	r1, [pc, #576]	; (8000814 <main+0x280>)
 80005d2:	488f      	ldr	r0, [pc, #572]	; (8000810 <main+0x27c>)
 80005d4:	f003 fde0 	bl	8004198 <u8g2_SetFont>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (HAL_UART_Receive(&huart1, (uint8_t*) &cmd, 1, 5000) == HAL_OK) {
 80005d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80005dc:	2201      	movs	r2, #1
 80005de:	498e      	ldr	r1, [pc, #568]	; (8000818 <main+0x284>)
 80005e0:	488e      	ldr	r0, [pc, #568]	; (800081c <main+0x288>)
 80005e2:	f002 f9d6 	bl	8002992 <HAL_UART_Receive>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d103      	bne.n	80005f4 <main+0x60>
			data = cmd;
 80005ec:	4b8a      	ldr	r3, [pc, #552]	; (8000818 <main+0x284>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b8b      	ldr	r3, [pc, #556]	; (8000820 <main+0x28c>)
 80005f2:	701a      	strb	r2, [r3, #0]
		}

		if (btnFlag == 1 && continueFlag == 1) {
 80005f4:	4b8b      	ldr	r3, [pc, #556]	; (8000824 <main+0x290>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d118      	bne.n	800062e <main+0x9a>
 80005fc:	4b8a      	ldr	r3, [pc, #552]	; (8000828 <main+0x294>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d114      	bne.n	800062e <main+0x9a>
			if (i == 0) {
 8000604:	4b89      	ldr	r3, [pc, #548]	; (800082c <main+0x298>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d108      	bne.n	800061e <main+0x8a>
				data = '3';
 800060c:	4b84      	ldr	r3, [pc, #528]	; (8000820 <main+0x28c>)
 800060e:	2233      	movs	r2, #51	; 0x33
 8000610:	701a      	strb	r2, [r3, #0]
				i++;
 8000612:	4b86      	ldr	r3, [pc, #536]	; (800082c <main+0x298>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a84      	ldr	r2, [pc, #528]	; (800082c <main+0x298>)
 800061a:	6013      	str	r3, [r2, #0]
			if (i == 0) {
 800061c:	e016      	b.n	800064c <main+0xb8>
			} else if (i == 1) {
 800061e:	4b83      	ldr	r3, [pc, #524]	; (800082c <main+0x298>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d112      	bne.n	800064c <main+0xb8>
				data = '1';
 8000626:	4b7e      	ldr	r3, [pc, #504]	; (8000820 <main+0x28c>)
 8000628:	2231      	movs	r2, #49	; 0x31
 800062a:	701a      	strb	r2, [r3, #0]
			if (i == 0) {
 800062c:	e00e      	b.n	800064c <main+0xb8>
			}
		} else if (btnFlag == 0 && continueFlag == 1) {
 800062e:	4b7d      	ldr	r3, [pc, #500]	; (8000824 <main+0x290>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10b      	bne.n	800064e <main+0xba>
 8000636:	4b7c      	ldr	r3, [pc, #496]	; (8000828 <main+0x294>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d107      	bne.n	800064e <main+0xba>
			data = '2';
 800063e:	4b78      	ldr	r3, [pc, #480]	; (8000820 <main+0x28c>)
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	701a      	strb	r2, [r3, #0]
			i = 0;
 8000644:	4b79      	ldr	r3, [pc, #484]	; (800082c <main+0x298>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	e000      	b.n	800064e <main+0xba>
			if (i == 0) {
 800064c:	bf00      	nop
		}

		if (continueFlag == 1) {
 800064e:	4b76      	ldr	r3, [pc, #472]	; (8000828 <main+0x294>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d167      	bne.n	8000726 <main+0x192>
			memset(buff, 0, 20);
 8000656:	2214      	movs	r2, #20
 8000658:	2100      	movs	r1, #0
 800065a:	4875      	ldr	r0, [pc, #468]	; (8000830 <main+0x29c>)
 800065c:	f004 fc80 	bl	8004f60 <memset>
			switch (data) {
 8000660:	4b6f      	ldr	r3, [pc, #444]	; (8000820 <main+0x28c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	3b31      	subs	r3, #49	; 0x31
 8000666:	2b03      	cmp	r3, #3
 8000668:	d85f      	bhi.n	800072a <main+0x196>
 800066a:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <main+0xdc>)
 800066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000670:	08000681 	.word	0x08000681
 8000674:	080006a9 	.word	0x080006a9
 8000678:	080006d7 	.word	0x080006d7
 800067c:	080006ff 	.word	0x080006ff
			case '1':
				HAL_UART_Transmit(&huart6, (uint8_t*) getDataCommand, 5, 5000);
 8000680:	f241 3388 	movw	r3, #5000	; 0x1388
 8000684:	2205      	movs	r2, #5
 8000686:	496b      	ldr	r1, [pc, #428]	; (8000834 <main+0x2a0>)
 8000688:	486b      	ldr	r0, [pc, #428]	; (8000838 <main+0x2a4>)
 800068a:	f002 f8f0 	bl	800286e <HAL_UART_Transmit>
				if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 20, 100)
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	2214      	movs	r2, #20
 8000692:	4967      	ldr	r1, [pc, #412]	; (8000830 <main+0x29c>)
 8000694:	4868      	ldr	r0, [pc, #416]	; (8000838 <main+0x2a4>)
 8000696:	f002 f97c 	bl	8002992 <HAL_UART_Receive>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d146      	bne.n	800072e <main+0x19a>
						== HAL_OK) {
					state = 1;
 80006a0:	4b66      	ldr	r3, [pc, #408]	; (800083c <main+0x2a8>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
				}
				break;
 80006a6:	e042      	b.n	800072e <main+0x19a>

			case '2':
				HAL_UART_Transmit(&huart6, (uint8_t*) singleModeSetCommand, 6,
 80006a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80006ac:	2206      	movs	r2, #6
 80006ae:	4964      	ldr	r1, [pc, #400]	; (8000840 <main+0x2ac>)
 80006b0:	4861      	ldr	r0, [pc, #388]	; (8000838 <main+0x2a4>)
 80006b2:	f002 f8dc 	bl	800286e <HAL_UART_Transmit>
						5000);
				if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 6, 100)
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2206      	movs	r2, #6
 80006ba:	495d      	ldr	r1, [pc, #372]	; (8000830 <main+0x29c>)
 80006bc:	485e      	ldr	r0, [pc, #376]	; (8000838 <main+0x2a4>)
 80006be:	f002 f968 	bl	8002992 <HAL_UART_Receive>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d134      	bne.n	8000732 <main+0x19e>
						== HAL_OK) {
					state = 2;
 80006c8:	4b5c      	ldr	r3, [pc, #368]	; (800083c <main+0x2a8>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	601a      	str	r2, [r3, #0]
					continueFlag = 0;
 80006ce:	4b56      	ldr	r3, [pc, #344]	; (8000828 <main+0x294>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80006d4:	e02d      	b.n	8000732 <main+0x19e>

			case '3':
				HAL_UART_Transmit(&huart6, (uint8_t*) continuousModeSetCommand,
 80006d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80006da:	2206      	movs	r2, #6
 80006dc:	4959      	ldr	r1, [pc, #356]	; (8000844 <main+0x2b0>)
 80006de:	4856      	ldr	r0, [pc, #344]	; (8000838 <main+0x2a4>)
 80006e0:	f002 f8c5 	bl	800286e <HAL_UART_Transmit>
						6, 5000);
				if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 6, 100)
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2206      	movs	r2, #6
 80006e8:	4951      	ldr	r1, [pc, #324]	; (8000830 <main+0x29c>)
 80006ea:	4853      	ldr	r0, [pc, #332]	; (8000838 <main+0x2a4>)
 80006ec:	f002 f951 	bl	8002992 <HAL_UART_Receive>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d11f      	bne.n	8000736 <main+0x1a2>
						== HAL_OK) {
					state = 2;
 80006f6:	4b51      	ldr	r3, [pc, #324]	; (800083c <main+0x2a8>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	601a      	str	r2, [r3, #0]

				}
				break;
 80006fc:	e01b      	b.n	8000736 <main+0x1a2>

			case '4':
				HAL_UART_Transmit(&huart6, (uint8_t*) timingModeSetCommand, 6,
 80006fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000702:	2206      	movs	r2, #6
 8000704:	4950      	ldr	r1, [pc, #320]	; (8000848 <main+0x2b4>)
 8000706:	484c      	ldr	r0, [pc, #304]	; (8000838 <main+0x2a4>)
 8000708:	f002 f8b1 	bl	800286e <HAL_UART_Transmit>
						5000);
				if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 6, 100)
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2206      	movs	r2, #6
 8000710:	4947      	ldr	r1, [pc, #284]	; (8000830 <main+0x29c>)
 8000712:	4849      	ldr	r0, [pc, #292]	; (8000838 <main+0x2a4>)
 8000714:	f002 f93d 	bl	8002992 <HAL_UART_Receive>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10d      	bne.n	800073a <main+0x1a6>
						== HAL_OK) {
					state = 2;
 800071e:	4b47      	ldr	r3, [pc, #284]	; (800083c <main+0x2a8>)
 8000720:	2202      	movs	r2, #2
 8000722:	601a      	str	r2, [r3, #0]

				}
				break;
 8000724:	e009      	b.n	800073a <main+0x1a6>

			default:
				break;
			}
		}
 8000726:	bf00      	nop
 8000728:	e008      	b.n	800073c <main+0x1a8>
				break;
 800072a:	bf00      	nop
 800072c:	e006      	b.n	800073c <main+0x1a8>
				break;
 800072e:	bf00      	nop
 8000730:	e004      	b.n	800073c <main+0x1a8>
				break;
 8000732:	bf00      	nop
 8000734:	e002      	b.n	800073c <main+0x1a8>
				break;
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <main+0x1a8>
				break;
 800073a:	bf00      	nop

		if (state == 1) {
 800073c:	4b3f      	ldr	r3, [pc, #252]	; (800083c <main+0x2a8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	f040 808b 	bne.w	800085c <main+0x2c8>
			//if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 20, 100) == HAL_OK) {

			//HAL_UART_Transmit(&huart1, (uint8_t*) buff, 20, 100);

			if (buff[0] == 0x16 && buff[1] == 0x11) {
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <main+0x29c>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b16      	cmp	r3, #22
 800074c:	f47f af44 	bne.w	80005d8 <main+0x44>
 8000750:	4b37      	ldr	r3, [pc, #220]	; (8000830 <main+0x29c>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b11      	cmp	r3, #17
 8000756:	f47f af3f 	bne.w	80005d8 <main+0x44>
				if (buff[2] == 0x0B) {
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <main+0x29c>)
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	2b0b      	cmp	r3, #11
 8000760:	f47f af3a 	bne.w	80005d8 <main+0x44>
					int val = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
					val |= (buff[3] << 24) | (buff[4] << 16) | (buff[5] << 8)
 8000768:	4b31      	ldr	r3, [pc, #196]	; (8000830 <main+0x29c>)
 800076a:	78db      	ldrb	r3, [r3, #3]
 800076c:	061a      	lsls	r2, r3, #24
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <main+0x29c>)
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	041b      	lsls	r3, r3, #16
 8000774:	431a      	orrs	r2, r3
 8000776:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <main+0x29c>)
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	4313      	orrs	r3, r2
							| buff[6];
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <main+0x29c>)
 8000780:	7992      	ldrb	r2, [r2, #6]
 8000782:	4313      	orrs	r3, r2
					val |= (buff[3] << 24) | (buff[4] << 16) | (buff[5] << 8)
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4313      	orrs	r3, r2
 8000788:	607b      	str	r3, [r7, #4]
					sprintf(str, "PM2.5 : %d\r\n", val);
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	492f      	ldr	r1, [pc, #188]	; (800084c <main+0x2b8>)
 800078e:	4830      	ldr	r0, [pc, #192]	; (8000850 <main+0x2bc>)
 8000790:	f004 fbee 	bl	8004f70 <siprintf>
#ifndef OLED
					HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str),
							100);
#endif
					val = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
					val |= (buff[7] << 24) | (buff[8] << 16) | (buff[9] << 8)
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <main+0x29c>)
 800079a:	79db      	ldrb	r3, [r3, #7]
 800079c:	061a      	lsls	r2, r3, #24
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <main+0x29c>)
 80007a0:	7a1b      	ldrb	r3, [r3, #8]
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	431a      	orrs	r2, r3
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <main+0x29c>)
 80007a8:	7a5b      	ldrb	r3, [r3, #9]
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	4313      	orrs	r3, r2
							| buff[10];
 80007ae:	4a20      	ldr	r2, [pc, #128]	; (8000830 <main+0x29c>)
 80007b0:	7a92      	ldrb	r2, [r2, #10]
 80007b2:	4313      	orrs	r3, r2
					val |= (buff[7] << 24) | (buff[8] << 16) | (buff[9] << 8)
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	607b      	str	r3, [r7, #4]
					sprintf(str2, "PM10 : %d\r\n", val);
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	4925      	ldr	r1, [pc, #148]	; (8000854 <main+0x2c0>)
 80007be:	4826      	ldr	r0, [pc, #152]	; (8000858 <main+0x2c4>)
 80007c0:	f004 fbd6 	bl	8004f70 <siprintf>
#ifndef OLED
					HAL_UART_Transmit(&huart1, (uint8_t*) str2, sizeof(str2),
							5000);
#else
					u8g2_FirstPage(&u8g2);
 80007c4:	4812      	ldr	r0, [pc, #72]	; (8000810 <main+0x27c>)
 80007c6:	f002 fcf4 	bl	80031b2 <u8g2_FirstPage>
					do {
					 u8g2_DrawStrX2(&u8g2, 17, 15, str);
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <main+0x2bc>)
 80007cc:	220f      	movs	r2, #15
 80007ce:	2111      	movs	r1, #17
 80007d0:	480f      	ldr	r0, [pc, #60]	; (8000810 <main+0x27c>)
 80007d2:	f003 fc3f 	bl	8004054 <u8g2_DrawStrX2>
					 u8g2_DrawStrX2(&u8g2, 22, 30, str2);
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <main+0x2c4>)
 80007d8:	221e      	movs	r2, #30
 80007da:	2116      	movs	r1, #22
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <main+0x27c>)
 80007de:	f003 fc39 	bl	8004054 <u8g2_DrawStrX2>
					 } while (u8g2_NextPage(&u8g2));
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <main+0x27c>)
 80007e4:	f002 fcf9 	bl	80031da <u8g2_NextPage>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1ed      	bne.n	80007ca <main+0x236>
#endif

					memset(str, 0, sizeof(str));
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <main+0x2bc>)
 80007f4:	f004 fbb4 	bl	8004f60 <memset>
					memset(str2, 0, sizeof(str2));
 80007f8:	2220      	movs	r2, #32
 80007fa:	2100      	movs	r1, #0
 80007fc:	4816      	ldr	r0, [pc, #88]	; (8000858 <main+0x2c4>)
 80007fe:	f004 fbaf 	bl	8004f60 <memset>
 8000802:	e6e9      	b.n	80005d8 <main+0x44>
 8000804:	08000fa9 	.word	0x08000fa9
 8000808:	0800109d 	.word	0x0800109d
 800080c:	08005c00 	.word	0x08005c00
 8000810:	20000224 	.word	0x20000224
 8000814:	080058dc 	.word	0x080058dc
 8000818:	20000191 	.word	0x20000191
 800081c:	20000108 	.word	0x20000108
 8000820:	20000190 	.word	0x20000190
 8000824:	2000021a 	.word	0x2000021a
 8000828:	20000000 	.word	0x20000000
 800082c:	20000220 	.word	0x20000220
 8000830:	20000194 	.word	0x20000194
 8000834:	20000004 	.word	0x20000004
 8000838:	2000014c 	.word	0x2000014c
 800083c:	2000021c 	.word	0x2000021c
 8000840:	2000000c 	.word	0x2000000c
 8000844:	20000014 	.word	0x20000014
 8000848:	2000001c 	.word	0x2000001c
 800084c:	08005864 	.word	0x08005864
 8000850:	200001a8 	.word	0x200001a8
 8000854:	08005874 	.word	0x08005874
 8000858:	200001c8 	.word	0x200001c8

			//memset(buff, 0, 20);

		}

		else if (state == 2) {
 800085c:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <main+0x3c0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b02      	cmp	r3, #2
 8000862:	f47f aeb9 	bne.w	80005d8 <main+0x44>
			//	if (HAL_UART_Receive(&huart6, (uint8_t*) buff, 6, 100) == HAL_OK) {

			//HAL_UART_Transmit(&huart1, (uint8_t*) buff, 6, 100);

			if (buff[0] == 0x16 && buff[1] == 0x03) {
 8000866:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <main+0x3c4>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b16      	cmp	r3, #22
 800086c:	f47f aeb4 	bne.w	80005d8 <main+0x44>
 8000870:	4b39      	ldr	r3, [pc, #228]	; (8000958 <main+0x3c4>)
 8000872:	785b      	ldrb	r3, [r3, #1]
 8000874:	2b03      	cmp	r3, #3
 8000876:	f47f aeaf 	bne.w	80005d8 <main+0x44>
				if (buff[2] == 0x0D) {
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <main+0x3c4>)
 800087c:	789b      	ldrb	r3, [r3, #2]
 800087e:	2b0d      	cmp	r3, #13
 8000880:	d141      	bne.n	8000906 <main+0x372>
					if (buff[3] == 0xff && buff[4] == 0xff) {
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <main+0x3c4>)
 8000884:	78db      	ldrb	r3, [r3, #3]
 8000886:	2bff      	cmp	r3, #255	; 0xff
 8000888:	d11c      	bne.n	80008c4 <main+0x330>
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <main+0x3c4>)
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	2bff      	cmp	r3, #255	; 0xff
 8000890:	d118      	bne.n	80008c4 <main+0x330>
						sprintf(str3, "continuous mode\r\n");
 8000892:	4932      	ldr	r1, [pc, #200]	; (800095c <main+0x3c8>)
 8000894:	4832      	ldr	r0, [pc, #200]	; (8000960 <main+0x3cc>)
 8000896:	f004 fb6b 	bl	8004f70 <siprintf>
#ifndef OLED
						HAL_UART_Transmit(&huart1, (uint8_t*) str3,
								sizeof(str3), 5000);
#else
						u8g2_FirstPage(&u8g2);
 800089a:	4832      	ldr	r0, [pc, #200]	; (8000964 <main+0x3d0>)
 800089c:	f002 fc89 	bl	80031b2 <u8g2_FirstPage>

						do {
							u8g2_DrawStr(&u8g2, 0, 30, str3);
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <main+0x3cc>)
 80008a2:	221e      	movs	r2, #30
 80008a4:	2100      	movs	r1, #0
 80008a6:	482f      	ldr	r0, [pc, #188]	; (8000964 <main+0x3d0>)
 80008a8:	f003 fbba 	bl	8004020 <u8g2_DrawStr>
						} while (u8g2_NextPage(&u8g2));
 80008ac:	482d      	ldr	r0, [pc, #180]	; (8000964 <main+0x3d0>)
 80008ae:	f002 fc94 	bl	80031da <u8g2_NextPage>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f3      	bne.n	80008a0 <main+0x30c>
#endif
						memset(str3, 0, 50);
 80008b8:	2232      	movs	r2, #50	; 0x32
 80008ba:	2100      	movs	r1, #0
 80008bc:	4828      	ldr	r0, [pc, #160]	; (8000960 <main+0x3cc>)
 80008be:	f004 fb4f 	bl	8004f60 <memset>
 80008c2:	e045      	b.n	8000950 <main+0x3bc>
					} else {
						int measurement_time = (buff[3] << 8) | buff[4];
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <main+0x3c4>)
 80008c6:	78db      	ldrb	r3, [r3, #3]
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <main+0x3c4>)
 80008cc:	7912      	ldrb	r2, [r2, #4]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	60bb      	str	r3, [r7, #8]
						sprintf(str3, "stop state\r\n",
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	4924      	ldr	r1, [pc, #144]	; (8000968 <main+0x3d4>)
 80008d6:	4822      	ldr	r0, [pc, #136]	; (8000960 <main+0x3cc>)
 80008d8:	f004 fb4a 	bl	8004f70 <siprintf>
								measurement_time);
#ifndef OLED
						HAL_UART_Transmit(&huart1, (uint8_t*) str3,
								sizeof(str3), 5000);
#else
						u8g2_FirstPage(&u8g2);
 80008dc:	4821      	ldr	r0, [pc, #132]	; (8000964 <main+0x3d0>)
 80008de:	f002 fc68 	bl	80031b2 <u8g2_FirstPage>
						do {

							u8g2_DrawStr(&u8g2, 0, 30, str3);
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <main+0x3cc>)
 80008e4:	221e      	movs	r2, #30
 80008e6:	2100      	movs	r1, #0
 80008e8:	481e      	ldr	r0, [pc, #120]	; (8000964 <main+0x3d0>)
 80008ea:	f003 fb99 	bl	8004020 <u8g2_DrawStr>
						} while (u8g2_NextPage(&u8g2));
 80008ee:	481d      	ldr	r0, [pc, #116]	; (8000964 <main+0x3d0>)
 80008f0:	f002 fc73 	bl	80031da <u8g2_NextPage>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f3      	bne.n	80008e2 <main+0x34e>
#endif
						memset(str3, 0, 50);
 80008fa:	2232      	movs	r2, #50	; 0x32
 80008fc:	2100      	movs	r1, #0
 80008fe:	4818      	ldr	r0, [pc, #96]	; (8000960 <main+0x3cc>)
 8000900:	f004 fb2e 	bl	8004f60 <memset>
 8000904:	e668      	b.n	80005d8 <main+0x44>
					}
				} else if (buff[2] == 0x05) {
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <main+0x3c4>)
 8000908:	789b      	ldrb	r3, [r3, #2]
 800090a:	2b05      	cmp	r3, #5
 800090c:	f47f ae64 	bne.w	80005d8 <main+0x44>
					int duration_time = (buff[3] << 8) | buff[4];
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <main+0x3c4>)
 8000912:	78db      	ldrb	r3, [r3, #3]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <main+0x3c4>)
 8000918:	7912      	ldrb	r2, [r2, #4]
 800091a:	4313      	orrs	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
					sprintf(str3, "timing mode interval : %d sec\r\n",
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4912      	ldr	r1, [pc, #72]	; (800096c <main+0x3d8>)
 8000922:	480f      	ldr	r0, [pc, #60]	; (8000960 <main+0x3cc>)
 8000924:	f004 fb24 	bl	8004f70 <siprintf>
							duration_time);
#ifndef OLED
					HAL_UART_Transmit(&huart1, (uint8_t*) str3, sizeof(str3),
							5000);
#else
					u8g2_FirstPage(&u8g2);
 8000928:	480e      	ldr	r0, [pc, #56]	; (8000964 <main+0x3d0>)
 800092a:	f002 fc42 	bl	80031b2 <u8g2_FirstPage>
					do {

						u8g2_DrawStr(&u8g2, 0, 30, str3);
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <main+0x3cc>)
 8000930:	221e      	movs	r2, #30
 8000932:	2100      	movs	r1, #0
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <main+0x3d0>)
 8000936:	f003 fb73 	bl	8004020 <u8g2_DrawStr>
					} while (u8g2_NextPage(&u8g2));
 800093a:	480a      	ldr	r0, [pc, #40]	; (8000964 <main+0x3d0>)
 800093c:	f002 fc4d 	bl	80031da <u8g2_NextPage>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f3      	bne.n	800092e <main+0x39a>
#endif
					memset(str3, 0, 50);
 8000946:	2232      	movs	r2, #50	; 0x32
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <main+0x3cc>)
 800094c:	f004 fb08 	bl	8004f60 <memset>
		if (HAL_UART_Receive(&huart1, (uint8_t*) &cmd, 1, 5000) == HAL_OK) {
 8000950:	e642      	b.n	80005d8 <main+0x44>
 8000952:	bf00      	nop
 8000954:	2000021c 	.word	0x2000021c
 8000958:	20000194 	.word	0x20000194
 800095c:	08005880 	.word	0x08005880
 8000960:	200001e8 	.word	0x200001e8
 8000964:	20000224 	.word	0x20000224
 8000968:	08005894 	.word	0x08005894
 800096c:	080058a4 	.word	0x080058a4

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	; 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f004 faee 	bl	8004f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <SystemClock_Config+0xd8>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a2a      	ldr	r2, [pc, #168]	; (8000a48 <SystemClock_Config+0xd8>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <SystemClock_Config+0xd8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <SystemClock_Config+0xdc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <SystemClock_Config+0xdc>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <SystemClock_Config+0xdc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009e4:	23b4      	movs	r3, #180	; 0xb4
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 ffc5 	bl	8001984 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a00:	f000 f956 	bl	8000cb0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a04:	f000 ff6e 	bl	80018e4 <HAL_PWREx_EnableOverDrive>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a0e:	f000 f94f 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	230f      	movs	r3, #15
 8000a14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	2302      	movs	r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2105      	movs	r1, #5
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fa1f 	bl	8001e74 <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a3c:	f000 f938 	bl	8000cb0 <Error_Handler>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3750      	adds	r7, #80	; 0x50
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000

08000a50 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f000 fd2e 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a5e:	2006      	movs	r0, #6
 8000a60:	f000 fd47 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	201c      	movs	r0, #28
 8000a6a:	f000 fd26 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a6e:	201c      	movs	r0, #28
 8000a70:	f000 fd3f 	bl	80014f2 <HAL_NVIC_EnableIRQ>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_SPI2_Init+0x64>)
 8000a7e:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <MX_SPI2_Init+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_SPI2_Init+0x64>)
 8000a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_SPI2_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_SPI2_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_SPI2_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_SPI2_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_SPI2_Init+0x64>)
 8000aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_SPI2_Init+0x64>)
 8000aac:	2210      	movs	r2, #16
 8000aae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_SPI2_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_SPI2_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <MX_SPI2_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_SPI2_Init+0x64>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_SPI2_Init+0x64>)
 8000aca:	f001 fbf3 	bl	80022b4 <HAL_SPI_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ad4:	f000 f8ec 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200000b0 	.word	0x200000b0
 8000ae0:	40003800 	.word	0x40003800

08000ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_USART1_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000af0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART1_UART_Init+0x4c>)
 8000b1c:	f001 fe5a 	bl	80027d4 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f000 f8c3 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000108 	.word	0x20000108
 8000b34:	40011000 	.word	0x40011000

08000b38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART6_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART6_UART_Init+0x4c>)
 8000b70:	f001 fe30 	bl	80027d4 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f899 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000014c 	.word	0x2000014c
 8000b88:	40011400 	.word	0x40011400

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a25      	ldr	r2, [pc, #148]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2107      	movs	r1, #7
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000c18:	f000 fe32 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000c34:	f000 fc78 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn0_Pin */
  GPIO_InitStruct.Pin = btn0_Pin;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn0_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_GPIO_Init+0xd8>)
 8000c4e:	f000 fc6b 	bl	8001528 <HAL_GPIO_Init>

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == btn0_Pin) {
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d111      	bne.n	8000c9c <HAL_GPIO_EXTI_Callback+0x34>
		if (btnFlag == 0) {
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d106      	bne.n	8000c8e <HAL_GPIO_EXTI_Callback+0x26>
			btnFlag = 1;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
			continueFlag = 1;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_GPIO_EXTI_Callback+0x44>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
		} else if (btnFlag == 1) {
			btnFlag = 0;
		}
	}
}
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_EXTI_Callback+0x34>
		} else if (btnFlag == 1) {
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d102      	bne.n	8000c9c <HAL_GPIO_EXTI_Callback+0x34>
			btnFlag = 0;
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	2000021a 	.word	0x2000021a
 8000cac:	20000000 	.word	0x20000000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a28      	ldr	r2, [pc, #160]	; (8000dcc <HAL_SPI_MspInit+0xc0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d14a      	bne.n	8000dc4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_SPI_MspInit+0xc4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d82:	2308      	movs	r3, #8
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d92:	2305      	movs	r3, #5
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <HAL_SPI_MspInit+0xc8>)
 8000d9e:	f000 fbc3 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db4:	2305      	movs	r3, #5
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <HAL_SPI_MspInit+0xcc>)
 8000dc0:	f000 fbb2 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40003800 	.word	0x40003800
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40020400 	.word	0x40020400

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a32      	ldr	r2, [pc, #200]	; (8000ec4 <HAL_UART_MspInit+0xe8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d12d      	bne.n	8000e5a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a30      	ldr	r2, [pc, #192]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e08:	f043 0310 	orr.w	r3, r3, #16
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a29      	ldr	r2, [pc, #164]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <HAL_UART_MspInit+0xf0>)
 8000e54:	f000 fb68 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e58:	e030      	b.n	8000ebc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <HAL_UART_MspInit+0xf4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d12b      	bne.n	8000ebc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e6e:	f043 0320 	orr.w	r3, r3, #32
 8000e72:	6453      	str	r3, [r2, #68]	; 0x44
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e78:	f003 0320 	and.w	r3, r3, #32
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_UART_MspInit+0xec>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e9c:	23c0      	movs	r3, #192	; 0xc0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000eac:	2308      	movs	r3, #8
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <HAL_UART_MspInit+0xf8>)
 8000eb8:	f000 fb36 	bl	8001528 <HAL_GPIO_Init>
}
 8000ebc:	bf00      	nop
 8000ebe:	3730      	adds	r7, #48	; 0x30
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40011400 	.word	0x40011400
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f9aa 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn0_Pin);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 fcbf 	bl	80018b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f003 ffce 	bl	8004f0c <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20030000 	.word	0x20030000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200002b8 	.word	0x200002b8
 8000fa4:	200006d0 	.word	0x200006d0

08000fa8 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	72fb      	strb	r3, [r7, #11]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	3b28      	subs	r3, #40	; 0x28
 8000fbe:	2b23      	cmp	r3, #35	; 0x23
 8000fc0:	d864      	bhi.n	800108c <u8x8_stm32_gpio_and_delay+0xe4>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <u8x8_stm32_gpio_and_delay+0x20>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	0800108d 	.word	0x0800108d
 8000fcc:	08001059 	.word	0x08001059
 8000fd0:	0800108d 	.word	0x0800108d
 8000fd4:	0800108d 	.word	0x0800108d
 8000fd8:	0800108d 	.word	0x0800108d
 8000fdc:	0800108d 	.word	0x0800108d
 8000fe0:	0800108d 	.word	0x0800108d
 8000fe4:	0800108d 	.word	0x0800108d
 8000fe8:	0800108d 	.word	0x0800108d
 8000fec:	0800108d 	.word	0x0800108d
 8000ff0:	0800108d 	.word	0x0800108d
 8000ff4:	0800108d 	.word	0x0800108d
 8000ff8:	0800108d 	.word	0x0800108d
 8000ffc:	0800108d 	.word	0x0800108d
 8001000:	0800108d 	.word	0x0800108d
 8001004:	0800108d 	.word	0x0800108d
 8001008:	0800108d 	.word	0x0800108d
 800100c:	0800108d 	.word	0x0800108d
 8001010:	0800108d 	.word	0x0800108d
 8001014:	0800108d 	.word	0x0800108d
 8001018:	0800108d 	.word	0x0800108d
 800101c:	0800108d 	.word	0x0800108d
 8001020:	0800108d 	.word	0x0800108d
 8001024:	0800108d 	.word	0x0800108d
 8001028:	0800108d 	.word	0x0800108d
 800102c:	0800108d 	.word	0x0800108d
 8001030:	0800108d 	.word	0x0800108d
 8001034:	0800108d 	.word	0x0800108d
 8001038:	0800108d 	.word	0x0800108d
 800103c:	0800108d 	.word	0x0800108d
 8001040:	0800108d 	.word	0x0800108d
 8001044:	0800108d 	.word	0x0800108d
 8001048:	0800108d 	.word	0x0800108d
 800104c:	08001063 	.word	0x08001063
 8001050:	08001071 	.word	0x08001071
 8001054:	0800107f 	.word	0x0800107f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8001058:	7abb      	ldrb	r3, [r7, #10]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f92e 	bl	80012bc <HAL_Delay>
		break;
 8001060:	e014      	b.n	800108c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8001062:	7abb      	ldrb	r3, [r7, #10]
 8001064:	461a      	mov	r2, r3
 8001066:	2104      	movs	r1, #4
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <u8x8_stm32_gpio_and_delay+0xf0>)
 800106a:	f000 fc09 	bl	8001880 <HAL_GPIO_WritePin>
		break;
 800106e:	e00d      	b.n	800108c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8001070:	7abb      	ldrb	r3, [r7, #10]
 8001072:	461a      	mov	r2, r3
 8001074:	2102      	movs	r1, #2
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001078:	f000 fc02 	bl	8001880 <HAL_GPIO_WritePin>
		break;
 800107c:	e006      	b.n	800108c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	461a      	mov	r2, r3
 8001082:	2101      	movs	r1, #1
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001086:	f000 fbfb 	bl	8001880 <HAL_GPIO_WritePin>
		break;
 800108a:	bf00      	nop
	}
	return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020800 	.word	0x40020800

0800109c <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	72fb      	strb	r3, [r7, #11]
 80010aa:	4613      	mov	r3, r2
 80010ac:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	3b14      	subs	r3, #20
 80010b2:	2b0c      	cmp	r3, #12
 80010b4:	d847      	bhi.n	8001146 <u8x8_byte_stm32_hw_spi+0xaa>
 80010b6:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <u8x8_byte_stm32_hw_spi+0x20>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	0800114b 	.word	0x0800114b
 80010c0:	08001147 	.word	0x08001147
 80010c4:	08001147 	.word	0x08001147
 80010c8:	080010f1 	.word	0x080010f1
 80010cc:	08001117 	.word	0x08001117
 80010d0:	0800112f 	.word	0x0800112f
 80010d4:	08001147 	.word	0x08001147
 80010d8:	08001147 	.word	0x08001147
 80010dc:	08001147 	.word	0x08001147
 80010e0:	08001147 	.word	0x08001147
 80010e4:	08001147 	.word	0x08001147
 80010e8:	08001147 	.word	0x08001147
 80010ec:	08001109 	.word	0x08001109
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80010f0:	7abb      	ldrb	r3, [r7, #10]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4818      	ldr	r0, [pc, #96]	; (800115c <u8x8_byte_stm32_hw_spi+0xc0>)
 80010fa:	f001 f964 	bl	80023c6 <HAL_SPI_Transmit>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d024      	beq.n	800114e <u8x8_byte_stm32_hw_spi+0xb2>
 8001104:	2300      	movs	r3, #0
 8001106:	e024      	b.n	8001152 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8001108:	7abb      	ldrb	r3, [r7, #10]
 800110a:	461a      	mov	r2, r3
 800110c:	214a      	movs	r1, #74	; 0x4a
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f003 fe8d 	bl	8004e2e <u8x8_gpio_call>
		break;
 8001114:	e01c      	b.n	8001150 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	2149      	movs	r1, #73	; 0x49
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f003 fe84 	bl	8004e2e <u8x8_gpio_call>
		HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 f8c8 	bl	80012bc <HAL_Delay>
		break;
 800112c:	e010      	b.n	8001150 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f000 f8c4 	bl	80012bc <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	785b      	ldrb	r3, [r3, #1]
 800113a:	461a      	mov	r2, r3
 800113c:	2149      	movs	r1, #73	; 0x49
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f003 fe75 	bl	8004e2e <u8x8_gpio_call>
		break;
 8001144:	e004      	b.n	8001150 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8001146:	2300      	movs	r3, #0
 8001148:	e003      	b.n	8001152 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 800114e:	bf00      	nop
	}
	return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000b0 	.word	0x200000b0

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001166:	490e      	ldr	r1, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001168:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800117c:	4c0b      	ldr	r4, [pc, #44]	; (80011ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800118a:	f000 f813 	bl	80011b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118e:	f003 fec3 	bl	8004f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff f9ff 	bl	8000594 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001198:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80011a4:	08005d20 	.word	0x08005d20
  ldr r2, =_sbss
 80011a8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80011ac:	200006d0 	.word	0x200006d0

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <SystemInit+0x20>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <SystemInit+0x20>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_Init+0x40>)
 80011e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_Init+0x40>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x40>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f94f 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	200f      	movs	r0, #15
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fd56 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f967 	bl	800150e <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f92f 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000024 	.word	0x20000024
 8001274:	2000002c 	.word	0x2000002c
 8001278:	20000028 	.word	0x20000028

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000002c 	.word	0x2000002c
 80012a0:	200002bc 	.word	0x200002bc

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200002bc 	.word	0x200002bc

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000002c 	.word	0x2000002c

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff29 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff3e 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff8e 	bl	80013f8 <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff31 	bl	8001368 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e177      	b.n	8001834 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8166 	bne.w	800182e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d005      	beq.n	800157a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	2b02      	cmp	r3, #2
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d017      	beq.n	8001618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80c0 	beq.w	800182e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_GPIO_Init+0x324>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_GPIO_Init+0x324>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b63      	ldr	r3, [pc, #396]	; (800184c <HAL_GPIO_Init+0x324>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	4a61      	ldr	r2, [pc, #388]	; (8001850 <HAL_GPIO_Init+0x328>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a58      	ldr	r2, [pc, #352]	; (8001854 <HAL_GPIO_Init+0x32c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d037      	beq.n	8001766 <HAL_GPIO_Init+0x23e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a57      	ldr	r2, [pc, #348]	; (8001858 <HAL_GPIO_Init+0x330>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d031      	beq.n	8001762 <HAL_GPIO_Init+0x23a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a56      	ldr	r2, [pc, #344]	; (800185c <HAL_GPIO_Init+0x334>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d02b      	beq.n	800175e <HAL_GPIO_Init+0x236>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_GPIO_Init+0x338>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d025      	beq.n	800175a <HAL_GPIO_Init+0x232>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_GPIO_Init+0x33c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01f      	beq.n	8001756 <HAL_GPIO_Init+0x22e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a53      	ldr	r2, [pc, #332]	; (8001868 <HAL_GPIO_Init+0x340>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d019      	beq.n	8001752 <HAL_GPIO_Init+0x22a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_GPIO_Init+0x344>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0x226>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a51      	ldr	r2, [pc, #324]	; (8001870 <HAL_GPIO_Init+0x348>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00d      	beq.n	800174a <HAL_GPIO_Init+0x222>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a50      	ldr	r2, [pc, #320]	; (8001874 <HAL_GPIO_Init+0x34c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_Init+0x21e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4f      	ldr	r2, [pc, #316]	; (8001878 <HAL_GPIO_Init+0x350>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_GPIO_Init+0x21a>
 800173e:	2309      	movs	r3, #9
 8001740:	e012      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001742:	230a      	movs	r3, #10
 8001744:	e010      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001746:	2308      	movs	r3, #8
 8001748:	e00e      	b.n	8001768 <HAL_GPIO_Init+0x240>
 800174a:	2307      	movs	r3, #7
 800174c:	e00c      	b.n	8001768 <HAL_GPIO_Init+0x240>
 800174e:	2306      	movs	r3, #6
 8001750:	e00a      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001752:	2305      	movs	r3, #5
 8001754:	e008      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001756:	2304      	movs	r3, #4
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x240>
 800175a:	2303      	movs	r3, #3
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x240>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001766:	2300      	movs	r3, #0
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001778:	4935      	ldr	r1, [pc, #212]	; (8001850 <HAL_GPIO_Init+0x328>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_GPIO_Init+0x354>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017aa:	4a34      	ldr	r2, [pc, #208]	; (800187c <HAL_GPIO_Init+0x354>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_GPIO_Init+0x354>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d4:	4a29      	ldr	r2, [pc, #164]	; (800187c <HAL_GPIO_Init+0x354>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_GPIO_Init+0x354>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_GPIO_Init+0x354>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_GPIO_Init+0x354>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <HAL_GPIO_Init+0x354>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3301      	adds	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	f67f ae84 	bls.w	8001544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40013800 	.word	0x40013800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40021000 	.word	0x40021000
 8001868:	40021400 	.word	0x40021400
 800186c:	40021800 	.word	0x40021800
 8001870:	40021c00 	.word	0x40021c00
 8001874:	40022000 	.word	0x40022000
 8001878:	40022400 	.word	0x40022400
 800187c:	40013c00 	.word	0x40013c00

08001880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800189c:	e003      	b.n	80018a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	041a      	lsls	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f9c8 	bl	8000c68 <HAL_GPIO_EXTI_Callback>
  }
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_PWREx_EnableOverDrive+0x90>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <HAL_PWREx_EnableOverDrive+0x90>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_PWREx_EnableOverDrive+0x90>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_PWREx_EnableOverDrive+0x94>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001910:	f7ff fcc8 	bl	80012a4 <HAL_GetTick>
 8001914:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001916:	e009      	b.n	800192c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001918:	f7ff fcc4 	bl	80012a4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001926:	d901      	bls.n	800192c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e01f      	b.n	800196c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_PWREx_EnableOverDrive+0x98>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d1ee      	bne.n	8001918 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_PWREx_EnableOverDrive+0x9c>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001940:	f7ff fcb0 	bl	80012a4 <HAL_GetTick>
 8001944:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001946:	e009      	b.n	800195c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001948:	f7ff fcac 	bl	80012a4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001956:	d901      	bls.n	800195c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e007      	b.n	800196c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_PWREx_EnableOverDrive+0x98>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001968:	d1ee      	bne.n	8001948 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	420e0040 	.word	0x420e0040
 800197c:	40007000 	.word	0x40007000
 8001980:	420e0044 	.word	0x420e0044

08001984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e267      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d075      	beq.n	8001a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d00c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ae:	4b85      	ldr	r3, [pc, #532]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d112      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ba:	4b82      	ldr	r3, [pc, #520]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c6:	d10b      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4b7e      	ldr	r3, [pc, #504]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d05b      	beq.n	8001a8c <HAL_RCC_OscConfig+0x108>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d157      	bne.n	8001a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e242      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x74>
 80019ea:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a75      	ldr	r2, [pc, #468]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xb0>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x98>
 8001a02:	4b70      	ldr	r3, [pc, #448]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6f      	ldr	r2, [pc, #444]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6c      	ldr	r2, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xb0>
 8001a1c:	4b69      	ldr	r3, [pc, #420]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a68      	ldr	r2, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a65      	ldr	r2, [pc, #404]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc32 	bl	80012a4 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fc2e 	bl	80012a4 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e207      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xc0>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc1e 	bl	80012a4 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fc1a 	bl	80012a4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1f3      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0xe8>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d063      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00b      	beq.n	8001abe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d11c      	bne.n	8001aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab2:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d116      	bne.n	8001aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x152>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e1c7      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4937      	ldr	r1, [pc, #220]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	e03a      	b.n	8001b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <HAL_RCC_OscConfig+0x244>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff fbd3 	bl	80012a4 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff fbcf 	bl	80012a4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1a8      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4925      	ldr	r1, [pc, #148]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
 8001b34:	e015      	b.n	8001b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_OscConfig+0x244>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fbb2 	bl	80012a4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff fbae 	bl	80012a4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e187      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d036      	beq.n	8001bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d016      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_RCC_OscConfig+0x248>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fb92 	bl	80012a4 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff fb8e 	bl	80012a4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e167      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_OscConfig+0x240>)
 8001b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x200>
 8001ba2:	e01b      	b.n	8001bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_OscConfig+0x248>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fb7b 	bl	80012a4 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	e00e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fb77 	bl	80012a4 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d907      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e150      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	42470000 	.word	0x42470000
 8001bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ea      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 8097 	beq.w	8001d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bee:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a7c      	ldr	r2, [pc, #496]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b7a      	ldr	r3, [pc, #488]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b77      	ldr	r3, [pc, #476]	; (8001df8 <HAL_RCC_OscConfig+0x474>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c26:	4b74      	ldr	r3, [pc, #464]	; (8001df8 <HAL_RCC_OscConfig+0x474>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a73      	ldr	r2, [pc, #460]	; (8001df8 <HAL_RCC_OscConfig+0x474>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7ff fb37 	bl	80012a4 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7ff fb33 	bl	80012a4 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e10c      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_OscConfig+0x474>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x2ea>
 8001c60:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6c:	e01c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x324>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x30c>
 8001c76:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	4a5e      	ldr	r2, [pc, #376]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6713      	str	r3, [r2, #112]	; 0x70
 8001c82:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a5b      	ldr	r2, [pc, #364]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x324>
 8001c90:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a57      	ldr	r2, [pc, #348]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c96:	f023 0301 	bic.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a54      	ldr	r2, [pc, #336]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f023 0304 	bic.w	r3, r3, #4
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d015      	beq.n	8001cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff faf8 	bl	80012a4 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7ff faf4 	bl	80012a4 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e0cb      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0ee      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x334>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fae2 	bl	80012a4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fade 	bl	80012a4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0b5      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ee      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a1 	beq.w	8001e64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d05c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d141      	bne.n	8001dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_OscConfig+0x478>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fab2 	bl	80012a4 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff faae 	bl	80012a4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e087      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	019b      	lsls	r3, r3, #6
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	491b      	ldr	r1, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x478>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff fa87 	bl	80012a4 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff fa83 	bl	80012a4 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e05c      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x416>
 8001db8:	e054      	b.n	8001e64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_RCC_OscConfig+0x478>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa70 	bl	80012a4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff fa6c 	bl	80012a4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e045      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x444>
 8001de6:	e03d      	b.n	8001e64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e038      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x4ec>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d028      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d121      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d11a      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d111      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0cc      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4b68      	ldr	r3, [pc, #416]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d90c      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b65      	ldr	r3, [pc, #404]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b8      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	494d      	ldr	r1, [pc, #308]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d044      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d119      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e067      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4934      	ldr	r1, [pc, #208]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f64:	f7ff f99e 	bl	80012a4 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7ff f99a 	bl	80012a4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e04f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 020c 	and.w	r2, r3, #12
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1eb      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d20c      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e032      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4916      	ldr	r1, [pc, #88]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490e      	ldr	r1, [pc, #56]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f821 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490a      	ldr	r1, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f8fe 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00
 8002030:	40023800 	.word	0x40023800
 8002034:	080058c4 	.word	0x080058c4
 8002038:	20000024 	.word	0x20000024
 800203c:	20000028 	.word	0x20000028

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002044:	b094      	sub	sp, #80	; 0x50
 8002046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	647b      	str	r3, [r7, #68]	; 0x44
 800204c:	2300      	movs	r3, #0
 800204e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002050:	2300      	movs	r3, #0
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002058:	4b79      	ldr	r3, [pc, #484]	; (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d00d      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x40>
 8002064:	2b08      	cmp	r3, #8
 8002066:	f200 80e1 	bhi.w	800222c <HAL_RCC_GetSysClockFreq+0x1ec>
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x34>
 800206e:	2b04      	cmp	r3, #4
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x3a>
 8002072:	e0db      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_GetSysClockFreq+0x204>)
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002078:	e0db      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207a:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_RCC_GetSysClockFreq+0x208>)
 800207c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800207e:	e0d8      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002080:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d063      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002096:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	2200      	movs	r2, #0
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
 80020a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
 80020aa:	2300      	movs	r3, #0
 80020ac:	637b      	str	r3, [r7, #52]	; 0x34
 80020ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020b2:	4622      	mov	r2, r4
 80020b4:	462b      	mov	r3, r5
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	0159      	lsls	r1, r3, #5
 80020c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c4:	0150      	lsls	r0, r2, #5
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4621      	mov	r1, r4
 80020cc:	1a51      	subs	r1, r2, r1
 80020ce:	6139      	str	r1, [r7, #16]
 80020d0:	4629      	mov	r1, r5
 80020d2:	eb63 0301 	sbc.w	r3, r3, r1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020e4:	4659      	mov	r1, fp
 80020e6:	018b      	lsls	r3, r1, #6
 80020e8:	4651      	mov	r1, sl
 80020ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ee:	4651      	mov	r1, sl
 80020f0:	018a      	lsls	r2, r1, #6
 80020f2:	4651      	mov	r1, sl
 80020f4:	ebb2 0801 	subs.w	r8, r2, r1
 80020f8:	4659      	mov	r1, fp
 80020fa:	eb63 0901 	sbc.w	r9, r3, r1
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002112:	4690      	mov	r8, r2
 8002114:	4699      	mov	r9, r3
 8002116:	4623      	mov	r3, r4
 8002118:	eb18 0303 	adds.w	r3, r8, r3
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	462b      	mov	r3, r5
 8002120:	eb49 0303 	adc.w	r3, r9, r3
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002132:	4629      	mov	r1, r5
 8002134:	024b      	lsls	r3, r1, #9
 8002136:	4621      	mov	r1, r4
 8002138:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800213c:	4621      	mov	r1, r4
 800213e:	024a      	lsls	r2, r1, #9
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002146:	2200      	movs	r2, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
 800214a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800214c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002150:	f7fe f89e 	bl	8000290 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4613      	mov	r3, r2
 800215a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800215c:	e058      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	2200      	movs	r2, #0
 8002166:	4618      	mov	r0, r3
 8002168:	4611      	mov	r1, r2
 800216a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
 8002174:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	f04f 0000 	mov.w	r0, #0
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	0159      	lsls	r1, r3, #5
 8002186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800218a:	0150      	lsls	r0, r2, #5
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4641      	mov	r1, r8
 8002192:	ebb2 0a01 	subs.w	sl, r2, r1
 8002196:	4649      	mov	r1, r9
 8002198:	eb63 0b01 	sbc.w	fp, r3, r1
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021b0:	ebb2 040a 	subs.w	r4, r2, sl
 80021b4:	eb63 050b 	sbc.w	r5, r3, fp
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	00eb      	lsls	r3, r5, #3
 80021c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c6:	00e2      	lsls	r2, r4, #3
 80021c8:	4614      	mov	r4, r2
 80021ca:	461d      	mov	r5, r3
 80021cc:	4643      	mov	r3, r8
 80021ce:	18e3      	adds	r3, r4, r3
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	464b      	mov	r3, r9
 80021d4:	eb45 0303 	adc.w	r3, r5, r3
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021e6:	4629      	mov	r1, r5
 80021e8:	028b      	lsls	r3, r1, #10
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f0:	4621      	mov	r1, r4
 80021f2:	028a      	lsls	r2, r1, #10
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fa:	2200      	movs	r2, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	61fa      	str	r2, [r7, #28]
 8002200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002204:	f7fe f844 	bl	8000290 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800222a:	e002      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetSysClockFreq+0x204>)
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002234:	4618      	mov	r0, r3
 8002236:	3750      	adds	r7, #80	; 0x50
 8002238:	46bd      	mov	sp, r7
 800223a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000024 	.word	0x20000024

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a9b      	lsrs	r3, r3, #10
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	080058d4 	.word	0x080058d4

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002290:	f7ff ffdc 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0b5b      	lsrs	r3, r3, #13
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4903      	ldr	r1, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	080058d4 	.word	0x080058d4

080022b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07b      	b.n	80023be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022d6:	d009      	beq.n	80022ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
 80022de:	e005      	b.n	80022ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe fd00 	bl	8000d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002322:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	ea42 0103 	orr.w	r1, r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	f003 0104 	and.w	r1, r3, #4
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	f003 0210 	and.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b088      	sub	sp, #32
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_SPI_Transmit+0x22>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e126      	b.n	8002636 <HAL_SPI_Transmit+0x270>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023f0:	f7fe ff58 	bl	80012a4 <HAL_GetTick>
 80023f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d002      	beq.n	800240c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002406:	2302      	movs	r3, #2
 8002408:	77fb      	strb	r3, [r7, #31]
    goto error;
 800240a:	e10b      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_SPI_Transmit+0x52>
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800241c:	e102      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2203      	movs	r2, #3
 8002422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002464:	d10f      	bne.n	8002486 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d007      	beq.n	80024a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ac:	d14b      	bne.n	8002546 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_SPI_Transmit+0xf6>
 80024b6:	8afb      	ldrh	r3, [r7, #22]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d13e      	bne.n	800253a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	881a      	ldrh	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024e0:	e02b      	b.n	800253a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d112      	bne.n	8002516 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	881a      	ldrh	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	86da      	strh	r2, [r3, #54]	; 0x36
 8002514:	e011      	b.n	800253a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002516:	f7fe fec5 	bl	80012a4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d803      	bhi.n	800252e <HAL_SPI_Transmit+0x168>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d102      	bne.n	8002534 <HAL_SPI_Transmit+0x16e>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002538:	e074      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ce      	bne.n	80024e2 <HAL_SPI_Transmit+0x11c>
 8002544:	e04c      	b.n	80025e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_SPI_Transmit+0x18e>
 800254e:	8afb      	ldrh	r3, [r7, #22]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d140      	bne.n	80025d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800257a:	e02c      	b.n	80025d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d113      	bne.n	80025b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	330c      	adds	r3, #12
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80025b0:	e011      	b.n	80025d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025b2:	f7fe fe77 	bl	80012a4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d803      	bhi.n	80025ca <HAL_SPI_Transmit+0x204>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d102      	bne.n	80025d0 <HAL_SPI_Transmit+0x20a>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025d4:	e026      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1cd      	bne.n	800257c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f8b3 	bl	8002750 <SPI_EndRxTxTransaction>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	77fb      	strb	r3, [r7, #31]
 8002620:	e000      	b.n	8002624 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002622:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002634:	7ffb      	ldrb	r3, [r7, #31]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002650:	f7fe fe28 	bl	80012a4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002660:	f7fe fe20 	bl	80012a4 <HAL_GetTick>
 8002664:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	015b      	lsls	r3, r3, #5
 800266c:	0d1b      	lsrs	r3, r3, #20
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002676:	e054      	b.n	8002722 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d050      	beq.n	8002722 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002680:	f7fe fe10 	bl	80012a4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	429a      	cmp	r2, r3
 800268e:	d902      	bls.n	8002696 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d13d      	bne.n	8002712 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ae:	d111      	bne.n	80026d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b8:	d004      	beq.n	80026c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d107      	bne.n	80026d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026dc:	d10f      	bne.n	80026fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e017      	b.n	8002742 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3b01      	subs	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4013      	ands	r3, r2
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	bf0c      	ite	eq
 8002732:	2301      	moveq	r3, #1
 8002734:	2300      	movne	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	429a      	cmp	r2, r3
 800273e:	d19b      	bne.n	8002678 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000024 	.word	0x20000024

08002750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <SPI_EndRxTxTransaction+0x7c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <SPI_EndRxTxTransaction+0x80>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0d5b      	lsrs	r3, r3, #21
 8002768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800277a:	d112      	bne.n	80027a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff ff5a 	bl	8002640 <SPI_WaitFlagStateUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e00f      	b.n	80027c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d0f2      	beq.n	80027a2 <SPI_EndRxTxTransaction+0x52>
 80027bc:	e000      	b.n	80027c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80027be:	bf00      	nop
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000024 	.word	0x20000024
 80027d0:	165e9f81 	.word	0x165e9f81

080027d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e03f      	b.n	8002866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe faee 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9cb 	bl	8002bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800282c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800283c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800284c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b08a      	sub	sp, #40	; 0x28
 8002872:	af02      	add	r7, sp, #8
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b20      	cmp	r3, #32
 800288c:	d17c      	bne.n	8002988 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_UART_Transmit+0x2c>
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e075      	b.n	800298a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_UART_Transmit+0x3e>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e06e      	b.n	800298a <HAL_UART_Transmit+0x11c>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2221      	movs	r2, #33	; 0x21
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fcef 	bl	80012a4 <HAL_GetTick>
 80028c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028dc:	d108      	bne.n	80028f0 <HAL_UART_Transmit+0x82>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e003      	b.n	80028f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002900:	e02a      	b.n	8002958 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f8e2 	bl	8002ad6 <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e036      	b.n	800298a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002930:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	3302      	adds	r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	e007      	b.n	800294a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	3301      	adds	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1cf      	bne.n	8002902 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f8b2 	bl	8002ad6 <UART_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e006      	b.n	800298a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b08a      	sub	sp, #40	; 0x28
 8002996:	af02      	add	r7, sp, #8
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	f040 808c 	bne.w	8002acc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_UART_Receive+0x2e>
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e084      	b.n	8002ace <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Receive+0x40>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e07d      	b.n	8002ace <HAL_UART_Receive+0x13c>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2222      	movs	r2, #34	; 0x22
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ee:	f7fe fc59 	bl	80012a4 <HAL_GetTick>
 80029f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d108      	bne.n	8002a1c <HAL_UART_Receive+0x8a>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e003      	b.n	8002a24 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a2c:	e043      	b.n	8002ab6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2120      	movs	r1, #32
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f84c 	bl	8002ad6 <UART_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e042      	b.n	8002ace <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	3302      	adds	r3, #2
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e01f      	b.n	8002aa8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a70:	d007      	beq.n	8002a82 <HAL_UART_Receive+0xf0>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_UART_Receive+0xfe>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e008      	b.n	8002aa2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1b6      	bne.n	8002a2e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b090      	sub	sp, #64	; 0x40
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae6:	e050      	b.n	8002b8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d04c      	beq.n	8002b8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x30>
 8002af6:	f7fe fbd5 	bl	80012a4 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d241      	bcs.n	8002b8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	e853 3f00 	ldrex	r3, [r3]
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b26:	637a      	str	r2, [r7, #52]	; 0x34
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1e5      	bne.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3314      	adds	r3, #20
 8002b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3314      	adds	r3, #20
 8002b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b5a:	623a      	str	r2, [r7, #32]
 8002b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	69f9      	ldr	r1, [r7, #28]
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e5      	bne.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e00f      	b.n	8002baa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d09f      	beq.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3740      	adds	r7, #64	; 0x40
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb8:	b0c0      	sub	sp, #256	; 0x100
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	68d9      	ldr	r1, [r3, #12]
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	ea40 0301 	orr.w	r3, r0, r1
 8002bdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c0c:	f021 010c 	bic.w	r1, r1, #12
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2e:	6999      	ldr	r1, [r3, #24]
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	ea40 0301 	orr.w	r3, r0, r1
 8002c3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b8f      	ldr	r3, [pc, #572]	; (8002e80 <UART_SetConfig+0x2cc>)
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d005      	beq.n	8002c54 <UART_SetConfig+0xa0>
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4b8d      	ldr	r3, [pc, #564]	; (8002e84 <UART_SetConfig+0x2d0>)
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d104      	bne.n	8002c5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c54:	f7ff fb1a 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 8002c58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c5c:	e003      	b.n	8002c66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c5e:	f7ff fb01 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8002c62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c70:	f040 810c 	bne.w	8002e8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c86:	4622      	mov	r2, r4
 8002c88:	462b      	mov	r3, r5
 8002c8a:	1891      	adds	r1, r2, r2
 8002c8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c8e:	415b      	adcs	r3, r3
 8002c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c96:	4621      	mov	r1, r4
 8002c98:	eb12 0801 	adds.w	r8, r2, r1
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	eb43 0901 	adc.w	r9, r3, r1
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb6:	4690      	mov	r8, r2
 8002cb8:	4699      	mov	r9, r3
 8002cba:	4623      	mov	r3, r4
 8002cbc:	eb18 0303 	adds.w	r3, r8, r3
 8002cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cc4:	462b      	mov	r3, r5
 8002cc6:	eb49 0303 	adc.w	r3, r9, r3
 8002cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	18db      	adds	r3, r3, r3
 8002ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ce8:	4613      	mov	r3, r2
 8002cea:	eb42 0303 	adc.w	r3, r2, r3
 8002cee:	657b      	str	r3, [r7, #84]	; 0x54
 8002cf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cf8:	f7fd faca 	bl	8000290 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002d02:	fba3 2302 	umull	r2, r3, r3, r2
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	011c      	lsls	r4, r3, #4
 8002d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d1c:	4642      	mov	r2, r8
 8002d1e:	464b      	mov	r3, r9
 8002d20:	1891      	adds	r1, r2, r2
 8002d22:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d24:	415b      	adcs	r3, r3
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d32:	4649      	mov	r1, r9
 8002d34:	eb43 0b01 	adc.w	fp, r3, r1
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d4c:	4692      	mov	sl, r2
 8002d4e:	469b      	mov	fp, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	eb1a 0303 	adds.w	r3, sl, r3
 8002d56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	18db      	adds	r3, r3, r3
 8002d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d7e:	4613      	mov	r3, r2
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
 8002d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d8e:	f7fd fa7f 	bl	8000290 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2264      	movs	r2, #100	; 0x64
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	1acb      	subs	r3, r1, r3
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002db0:	fba3 2302 	umull	r2, r3, r3, r2
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dbc:	441c      	add	r4, r3
 8002dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002dcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	1891      	adds	r1, r2, r2
 8002dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dd8:	415b      	adcs	r3, r3
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002de0:	4641      	mov	r1, r8
 8002de2:	1851      	adds	r1, r2, r1
 8002de4:	6339      	str	r1, [r7, #48]	; 0x30
 8002de6:	4649      	mov	r1, r9
 8002de8:	414b      	adcs	r3, r1
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002df8:	4659      	mov	r1, fp
 8002dfa:	00cb      	lsls	r3, r1, #3
 8002dfc:	4651      	mov	r1, sl
 8002dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e02:	4651      	mov	r1, sl
 8002e04:	00ca      	lsls	r2, r1, #3
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e14:	464b      	mov	r3, r9
 8002e16:	460a      	mov	r2, r1
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e34:	460b      	mov	r3, r1
 8002e36:	18db      	adds	r3, r3, r3
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e4a:	f7fd fa21 	bl	8000290 <__aeabi_uldivmod>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002e54:	fba3 1302 	umull	r1, r3, r3, r2
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	2164      	movs	r1, #100	; 0x64
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	3332      	adds	r3, #50	; 0x32
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <UART_SetConfig+0x2d4>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	f003 0207 	and.w	r2, r3, #7
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4422      	add	r2, r4
 8002e7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e7c:	e105      	b.n	800308a <UART_SetConfig+0x4d6>
 8002e7e:	bf00      	nop
 8002e80:	40011000 	.word	0x40011000
 8002e84:	40011400 	.word	0x40011400
 8002e88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e90:	2200      	movs	r2, #0
 8002e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	464b      	mov	r3, r9
 8002ea2:	1891      	adds	r1, r2, r2
 8002ea4:	6239      	str	r1, [r7, #32]
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eae:	4641      	mov	r1, r8
 8002eb0:	1854      	adds	r4, r2, r1
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	eb43 0501 	adc.w	r5, r3, r1
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	00eb      	lsls	r3, r5, #3
 8002ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec6:	00e2      	lsls	r2, r4, #3
 8002ec8:	4614      	mov	r4, r2
 8002eca:	461d      	mov	r5, r3
 8002ecc:	4643      	mov	r3, r8
 8002ece:	18e3      	adds	r3, r4, r3
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	eb45 0303 	adc.w	r3, r5, r3
 8002eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002efa:	4629      	mov	r1, r5
 8002efc:	008b      	lsls	r3, r1, #2
 8002efe:	4621      	mov	r1, r4
 8002f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f04:	4621      	mov	r1, r4
 8002f06:	008a      	lsls	r2, r1, #2
 8002f08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f0c:	f7fd f9c0 	bl	8000290 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4b60      	ldr	r3, [pc, #384]	; (8003098 <UART_SetConfig+0x4e4>)
 8002f16:	fba3 2302 	umull	r2, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	011c      	lsls	r4, r3, #4
 8002f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f22:	2200      	movs	r2, #0
 8002f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f30:	4642      	mov	r2, r8
 8002f32:	464b      	mov	r3, r9
 8002f34:	1891      	adds	r1, r2, r2
 8002f36:	61b9      	str	r1, [r7, #24]
 8002f38:	415b      	adcs	r3, r3
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f40:	4641      	mov	r1, r8
 8002f42:	1851      	adds	r1, r2, r1
 8002f44:	6139      	str	r1, [r7, #16]
 8002f46:	4649      	mov	r1, r9
 8002f48:	414b      	adcs	r3, r1
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f58:	4659      	mov	r1, fp
 8002f5a:	00cb      	lsls	r3, r1, #3
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f62:	4651      	mov	r1, sl
 8002f64:	00ca      	lsls	r2, r1, #3
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f74:	464b      	mov	r3, r9
 8002f76:	460a      	mov	r2, r1
 8002f78:	eb42 0303 	adc.w	r3, r2, r3
 8002f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f98:	4649      	mov	r1, r9
 8002f9a:	008b      	lsls	r3, r1, #2
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa2:	4641      	mov	r1, r8
 8002fa4:	008a      	lsls	r2, r1, #2
 8002fa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002faa:	f7fd f971 	bl	8000290 <__aeabi_uldivmod>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4b39      	ldr	r3, [pc, #228]	; (8003098 <UART_SetConfig+0x4e4>)
 8002fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	2164      	movs	r1, #100	; 0x64
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	3332      	adds	r3, #50	; 0x32
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <UART_SetConfig+0x4e4>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd2:	441c      	add	r4, r3
 8002fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd8:	2200      	movs	r2, #0
 8002fda:	673b      	str	r3, [r7, #112]	; 0x70
 8002fdc:	677a      	str	r2, [r7, #116]	; 0x74
 8002fde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fe2:	4642      	mov	r2, r8
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	1891      	adds	r1, r2, r2
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	415b      	adcs	r3, r3
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	1851      	adds	r1, r2, r1
 8002ff6:	6039      	str	r1, [r7, #0]
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	414b      	adcs	r3, r1
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800300a:	4659      	mov	r1, fp
 800300c:	00cb      	lsls	r3, r1, #3
 800300e:	4651      	mov	r1, sl
 8003010:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003014:	4651      	mov	r1, sl
 8003016:	00ca      	lsls	r2, r1, #3
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	4603      	mov	r3, r0
 800301e:	4642      	mov	r2, r8
 8003020:	189b      	adds	r3, r3, r2
 8003022:	66bb      	str	r3, [r7, #104]	; 0x68
 8003024:	464b      	mov	r3, r9
 8003026:	460a      	mov	r2, r1
 8003028:	eb42 0303 	adc.w	r3, r2, r3
 800302c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	663b      	str	r3, [r7, #96]	; 0x60
 8003038:	667a      	str	r2, [r7, #100]	; 0x64
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003046:	4649      	mov	r1, r9
 8003048:	008b      	lsls	r3, r1, #2
 800304a:	4641      	mov	r1, r8
 800304c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003050:	4641      	mov	r1, r8
 8003052:	008a      	lsls	r2, r1, #2
 8003054:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003058:	f7fd f91a 	bl	8000290 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <UART_SetConfig+0x4e4>)
 8003062:	fba3 1302 	umull	r1, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2164      	movs	r1, #100	; 0x64
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a08      	ldr	r2, [pc, #32]	; (8003098 <UART_SetConfig+0x4e4>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4422      	add	r2, r4
 8003088:	609a      	str	r2, [r3, #8]
}
 800308a:	bf00      	nop
 800308c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	51eb851f 	.word	0x51eb851f

0800309c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	7c1b      	ldrb	r3, [r3, #16]
 80030aa:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	2100      	movs	r1, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 ff48 	bl	8004f60 <memset>
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
 80030e4:	4613      	mov	r3, r2
 80030e6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	7c1b      	ldrb	r3, [r3, #16]
 80030ee:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	89ba      	ldrh	r2, [r7, #12]
 8003100:	fb12 f303 	smulbb	r3, r2, r3
 8003104:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003106:	89bb      	ldrh	r3, [r7, #12]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800310c:	89bb      	ldrh	r3, [r7, #12]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4413      	add	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003114:	7bf9      	ldrb	r1, [r7, #15]
 8003116:	78ba      	ldrb	r2, [r7, #2]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	460b      	mov	r3, r1
 800311e:	2100      	movs	r1, #0
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f001 fe24 	bl	8004d6e <u8x8_DrawTile>
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003140:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003148:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	7c5b      	ldrb	r3, [r3, #17]
 8003150:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003152:	7bba      	ldrb	r2, [r7, #14]
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ffbd 	bl	80030d8 <u8g2_send_tile_row>
    src_row++;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	3301      	adds	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003164:	7bbb      	ldrb	r3, [r7, #14]
 8003166:	3301      	adds	r3, #1
 8003168:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	7b7b      	ldrb	r3, [r7, #13]
 800316e:	429a      	cmp	r2, r3
 8003170:	d203      	bcs.n	800317a <u8g2_send_buffer+0x4c>
 8003172:	7bba      	ldrb	r2, [r7, #14]
 8003174:	7b3b      	ldrb	r3, [r7, #12]
 8003176:	429a      	cmp	r2, r3
 8003178:	d3eb      	bcc.n	8003152 <u8g2_send_buffer+0x24>
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff69 	bl	800309c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80031ca:	2100      	movs	r1, #0
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ffd8 	bl	8003182 <u8g2_SetBufferCurrTileRow>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa3 	bl	800312e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031ee:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	4413      	add	r3, r2
 80031fa:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	7c5b      	ldrb	r3, [r3, #17]
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	429a      	cmp	r2, r3
 8003206:	d304      	bcc.n	8003212 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f001 fe01 	bl	8004e10 <u8x8_RefreshDisplay>
    return 0;
 800320e:	2300      	movs	r3, #0
 8003210:	e00d      	b.n	800322e <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff3d 	bl	800309c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ffab 	bl	8003182 <u8g2_SetBufferCurrTileRow>
  return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2208      	movs	r2, #8
 8003244:	701a      	strb	r2, [r3, #0]
  return buf;
 8003246:	4b03      	ldr	r3, [pc, #12]	; (8003254 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	200002c0 	.word	0x200002c0

08003258 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a0b      	ldr	r2, [pc, #44]	; (800329c <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800326e:	490c      	ldr	r1, [pc, #48]	; (80032a0 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f001 fe2d 	bl	8004ed0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003276:	f107 0313 	add.w	r3, r7, #19
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ffdc 	bl	8003238 <u8g2_m_16_8_f>
 8003280:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003282:	7cfa      	ldrb	r2, [r7, #19]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800328a:	6979      	ldr	r1, [r7, #20]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f001 f9b4 	bl	80045fa <u8g2_SetupBuffer>
}
 8003292:	bf00      	nop
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	08004a91 	.word	0x08004a91
 80032a0:	08004c69 	.word	0x08004c69
 80032a4:	0800447d 	.word	0x0800447d

080032a8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	781b      	ldrb	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	81fb      	strh	r3, [r7, #14]
    font++;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3301      	adds	r3, #1
 80032ea:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	89fb      	ldrh	r3, [r7, #14]
 80032fa:	4413      	add	r3, r2
 80032fc:	81fb      	strh	r3, [r7, #14]
    return pos;
 80032fe:	89fb      	ldrh	r3, [r7, #14]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8003316:	2100      	movs	r1, #0
 8003318:	6838      	ldr	r0, [r7, #0]
 800331a:	f7ff ffc5 	bl	80032a8 <u8g2_font_get_byte>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003326:	2101      	movs	r1, #1
 8003328:	6838      	ldr	r0, [r7, #0]
 800332a:	f7ff ffbd 	bl	80032a8 <u8g2_font_get_byte>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003336:	2102      	movs	r1, #2
 8003338:	6838      	ldr	r0, [r7, #0]
 800333a:	f7ff ffb5 	bl	80032a8 <u8g2_font_get_byte>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8003346:	2103      	movs	r1, #3
 8003348:	6838      	ldr	r0, [r7, #0]
 800334a:	f7ff ffad 	bl	80032a8 <u8g2_font_get_byte>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003356:	2104      	movs	r1, #4
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f7ff ffa5 	bl	80032a8 <u8g2_font_get_byte>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003366:	2105      	movs	r1, #5
 8003368:	6838      	ldr	r0, [r7, #0]
 800336a:	f7ff ff9d 	bl	80032a8 <u8g2_font_get_byte>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003376:	2106      	movs	r1, #6
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	f7ff ff95 	bl	80032a8 <u8g2_font_get_byte>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003386:	2107      	movs	r1, #7
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	f7ff ff8d 	bl	80032a8 <u8g2_font_get_byte>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003396:	2108      	movs	r1, #8
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	f7ff ff85 	bl	80032a8 <u8g2_font_get_byte>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80033a6:	2109      	movs	r1, #9
 80033a8:	6838      	ldr	r0, [r7, #0]
 80033aa:	f7ff ff7d 	bl	80032a8 <u8g2_font_get_byte>
 80033ae:	4603      	mov	r3, r0
 80033b0:	b25a      	sxtb	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80033b6:	210a      	movs	r1, #10
 80033b8:	6838      	ldr	r0, [r7, #0]
 80033ba:	f7ff ff75 	bl	80032a8 <u8g2_font_get_byte>
 80033be:	4603      	mov	r3, r0
 80033c0:	b25a      	sxtb	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80033c6:	210b      	movs	r1, #11
 80033c8:	6838      	ldr	r0, [r7, #0]
 80033ca:	f7ff ff6d 	bl	80032a8 <u8g2_font_get_byte>
 80033ce:	4603      	mov	r3, r0
 80033d0:	b25a      	sxtb	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80033d6:	210c      	movs	r1, #12
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	f7ff ff65 	bl	80032a8 <u8g2_font_get_byte>
 80033de:	4603      	mov	r3, r0
 80033e0:	b25a      	sxtb	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80033e6:	210d      	movs	r1, #13
 80033e8:	6838      	ldr	r0, [r7, #0]
 80033ea:	f7ff ff5d 	bl	80032a8 <u8g2_font_get_byte>
 80033ee:	4603      	mov	r3, r0
 80033f0:	b25a      	sxtb	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80033f6:	210e      	movs	r1, #14
 80033f8:	6838      	ldr	r0, [r7, #0]
 80033fa:	f7ff ff55 	bl	80032a8 <u8g2_font_get_byte>
 80033fe:	4603      	mov	r3, r0
 8003400:	b25a      	sxtb	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003406:	210f      	movs	r1, #15
 8003408:	6838      	ldr	r0, [r7, #0]
 800340a:	f7ff ff4d 	bl	80032a8 <u8g2_font_get_byte>
 800340e:	4603      	mov	r3, r0
 8003410:	b25a      	sxtb	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003416:	2110      	movs	r1, #16
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	f7ff ff45 	bl	80032a8 <u8g2_font_get_byte>
 800341e:	4603      	mov	r3, r0
 8003420:	b25a      	sxtb	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003426:	2111      	movs	r1, #17
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	f7ff ff4f 	bl	80032cc <u8g2_font_get_word>
 800342e:	4603      	mov	r3, r0
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003436:	2113      	movs	r1, #19
 8003438:	6838      	ldr	r0, [r7, #0]
 800343a:	f7ff ff47 	bl	80032cc <u8g2_font_get_word>
 800343e:	4603      	mov	r3, r0
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003446:	2115      	movs	r1, #21
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	f7ff ff3f 	bl	80032cc <u8g2_font_get_word>
 800344e:	4603      	mov	r3, r0
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	82da      	strh	r2, [r3, #22]
#endif
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7b1b      	ldrb	r3, [r3, #12]
 800346e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	7b7b      	ldrb	r3, [r7, #13]
 800347c:	fa42 f303 	asr.w	r3, r2, r3
 8003480:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003482:	7b7b      	ldrb	r3, [r7, #13]
 8003484:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003486:	7bba      	ldrb	r2, [r7, #14]
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	4413      	add	r3, r2
 800348c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800348e:	7bbb      	ldrb	r3, [r7, #14]
 8003490:	2b07      	cmp	r3, #7
 8003492:	d91a      	bls.n	80034ca <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003494:	2308      	movs	r3, #8
 8003496:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003498:	7b3a      	ldrb	r2, [r7, #12]
 800349a:	7b7b      	ldrb	r3, [r7, #13]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	7b3b      	ldrb	r3, [r7, #12]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	b25a      	sxtb	r2, r3
 80034ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034be:	4313      	orrs	r3, r2
 80034c0:	b25b      	sxtb	r3, r3
 80034c2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	3b08      	subs	r3, #8
 80034c8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	4013      	ands	r3, r2
 80034de:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7bba      	ldrb	r2, [r7, #14]
 80034e4:	731a      	strb	r2, [r3, #12]
  return val;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ffaa 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 800350a:	4603      	mov	r3, r0
 800350c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800350e:	2301      	movs	r3, #1
 8003510:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	3b01      	subs	r3, #1
 8003516:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003518:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	7bbb      	ldrb	r3, [r7, #14]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	73fb      	strb	r3, [r7, #15]
  return v;
 800352e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800353a:	b490      	push	{r4, r7}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	4604      	mov	r4, r0
 8003542:	4608      	mov	r0, r1
 8003544:	4611      	mov	r1, r2
 8003546:	461a      	mov	r2, r3
 8003548:	4623      	mov	r3, r4
 800354a:	80fb      	strh	r3, [r7, #6]
 800354c:	4603      	mov	r3, r0
 800354e:	717b      	strb	r3, [r7, #5]
 8003550:	460b      	mov	r3, r1
 8003552:	713b      	strb	r3, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d014      	beq.n	8003588 <u8g2_add_vector_y+0x4e>
 800355e:	2b02      	cmp	r3, #2
 8003560:	dc19      	bgt.n	8003596 <u8g2_add_vector_y+0x5c>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <u8g2_add_vector_y+0x32>
 8003566:	2b01      	cmp	r3, #1
 8003568:	d007      	beq.n	800357a <u8g2_add_vector_y+0x40>
 800356a:	e014      	b.n	8003596 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800356c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003570:	b29a      	uxth	r2, r3
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	4413      	add	r3, r2
 8003576:	80fb      	strh	r3, [r7, #6]
      break;
 8003578:	e014      	b.n	80035a4 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800357a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800357e:	b29a      	uxth	r2, r3
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	4413      	add	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
      break;
 8003586:	e00d      	b.n	80035a4 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8003588:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800358c:	b29b      	uxth	r3, r3
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	80fb      	strh	r3, [r7, #6]
      break;
 8003594:	e006      	b.n	80035a4 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8003596:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800359a:	b29b      	uxth	r3, r3
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	80fb      	strh	r3, [r7, #6]
      break;      
 80035a2:	bf00      	nop
  }
  return dy;
 80035a4:	88fb      	ldrh	r3, [r7, #6]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc90      	pop	{r4, r7}
 80035ae:	4770      	bx	lr

080035b0 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80035b0:	b490      	push	{r4, r7}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4604      	mov	r4, r0
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4623      	mov	r3, r4
 80035c0:	80fb      	strh	r3, [r7, #6]
 80035c2:	4603      	mov	r3, r0
 80035c4:	717b      	strb	r3, [r7, #5]
 80035c6:	460b      	mov	r3, r1
 80035c8:	713b      	strb	r3, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d014      	beq.n	80035fe <u8g2_add_vector_x+0x4e>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	dc19      	bgt.n	800360c <u8g2_add_vector_x+0x5c>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <u8g2_add_vector_x+0x32>
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d007      	beq.n	80035f0 <u8g2_add_vector_x+0x40>
 80035e0:	e014      	b.n	800360c <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80035e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	4413      	add	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
      break;
 80035ee:	e014      	b.n	800361a <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80035f0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	80fb      	strh	r3, [r7, #6]
      break;
 80035fc:	e00d      	b.n	800361a <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80035fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003602:	b29b      	uxth	r3, r3
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	80fb      	strh	r3, [r7, #6]
      break;
 800360a:	e006      	b.n	800361a <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800360c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003610:	b29a      	uxth	r2, r3
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	4413      	add	r3, r2
 8003616:	80fb      	strh	r3, [r7, #6]
      break;      
 8003618:	bf00      	nop
  }
  return dx;
 800361a:	88fb      	ldrh	r3, [r7, #6]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bc90      	pop	{r4, r7}
 8003624:	4770      	bx	lr

08003626 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b088      	sub	sp, #32
 800362a:	af02      	add	r7, sp, #8
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	70fb      	strb	r3, [r7, #3]
 8003632:	4613      	mov	r3, r2
 8003634:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3360      	adds	r3, #96	; 0x60
 800363a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003646:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800364e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003656:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	7d7b      	ldrb	r3, [r7, #21]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003664:	7dfa      	ldrb	r2, [r7, #23]
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	429a      	cmp	r2, r3
 800366a:	d201      	bcs.n	8003670 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	889b      	ldrh	r3, [r3, #4]
 8003674:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	88db      	ldrh	r3, [r3, #6]
 800367a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800367c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003680:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	7c1b      	ldrb	r3, [r3, #16]
 8003688:	89b8      	ldrh	r0, [r7, #12]
 800368a:	f7ff ff91 	bl	80035b0 <u8g2_add_vector_x>
 800368e:	4603      	mov	r3, r0
 8003690:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8003692:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003696:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	7c1b      	ldrb	r3, [r3, #16]
 800369e:	8978      	ldrh	r0, [r7, #10]
 80036a0:	f7ff ff4b 	bl	800353a <u8g2_add_vector_y>
 80036a4:	4603      	mov	r3, r0
 80036a6:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80036a8:	78bb      	ldrb	r3, [r7, #2]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d010      	beq.n	80036d0 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	7b9a      	ldrb	r2, [r3, #14]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80036b8:	7dbb      	ldrb	r3, [r7, #22]
 80036ba:	b298      	uxth	r0, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	7c1b      	ldrb	r3, [r3, #16]
 80036c0:	897a      	ldrh	r2, [r7, #10]
 80036c2:	89b9      	ldrh	r1, [r7, #12]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4603      	mov	r3, r0
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fdee 	bl	80042aa <u8g2_DrawHVLine>
 80036ce:	e013      	b.n	80036f8 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	7b5b      	ldrb	r3, [r3, #13]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10f      	bne.n	80036f8 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	7bda      	ldrb	r2, [r3, #15]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80036e2:	7dbb      	ldrb	r3, [r7, #22]
 80036e4:	b298      	uxth	r0, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	7c1b      	ldrb	r3, [r3, #16]
 80036ea:	897a      	ldrh	r2, [r7, #10]
 80036ec:	89b9      	ldrh	r1, [r7, #12]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4603      	mov	r3, r0
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fdd9 	bl	80042aa <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80036f8:	7dfa      	ldrb	r2, [r7, #23]
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d309      	bcc.n	8003714 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8003700:	7dfa      	ldrb	r2, [r7, #23]
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	757b      	strb	r3, [r7, #21]
    ly++;
 800370c:	7d3b      	ldrb	r3, [r7, #20]
 800370e:	3301      	adds	r3, #1
 8003710:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003712:	e79d      	b.n	8003650 <u8g2_font_decode_len+0x2a>
      break;
 8003714:	bf00      	nop
  }
  lx += cnt;
 8003716:	7d7a      	ldrb	r2, [r7, #21]
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	4413      	add	r3, r2
 800371c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800371e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8003726:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	725a      	strb	r2, [r3, #9]
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <u8g2_font_2x_decode_len>:


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b088      	sub	sp, #32
 800373a:	af02      	add	r7, sp, #8
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	70fb      	strb	r3, [r7, #3]
 8003742:	4613      	mov	r3, r2
 8003744:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3360      	adds	r3, #96	; 0x60
 800374a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003756:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800375e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003766:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	7d7b      	ldrb	r3, [r7, #21]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003774:	7dfa      	ldrb	r2, [r7, #23]
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	429a      	cmp	r2, r3
 800377a:	d201      	bcs.n	8003780 <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	889b      	ldrh	r3, [r3, #4]
 8003784:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	88db      	ldrh	r3, [r3, #6]
 800378a:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 800378c:	7d7b      	ldrb	r3, [r7, #21]
 800378e:	b29b      	uxth	r3, r3
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	89bb      	ldrh	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 800379a:	7d3b      	ldrb	r3, [r7, #20]
 800379c:	b29b      	uxth	r3, r3
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	4413      	add	r3, r2
 80037a6:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80037a8:	78bb      	ldrb	r3, [r7, #2]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01d      	beq.n	80037ea <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	7b9a      	ldrb	r2, [r3, #14]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80037b8:	7dbb      	ldrb	r3, [r7, #22]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	b29b      	uxth	r3, r3
 80037c0:	897a      	ldrh	r2, [r7, #10]
 80037c2:	89b9      	ldrh	r1, [r7, #12]
 80037c4:	2000      	movs	r0, #0
 80037c6:	9000      	str	r0, [sp, #0]
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fd6e 	bl	80042aa <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	3301      	adds	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	7dbb      	ldrb	r3, [r7, #22]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	89b9      	ldrh	r1, [r7, #12]
 80037de:	2000      	movs	r0, #0
 80037e0:	9000      	str	r0, [sp, #0]
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fd61 	bl	80042aa <u8g2_DrawHVLine>
 80037e8:	e020      	b.n	800382c <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	7b5b      	ldrb	r3, [r3, #13]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11c      	bne.n	800382c <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	7bda      	ldrb	r2, [r3, #15]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80037fc:	7dbb      	ldrb	r3, [r7, #22]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	b29b      	uxth	r3, r3
 8003804:	897a      	ldrh	r2, [r7, #10]
 8003806:	89b9      	ldrh	r1, [r7, #12]
 8003808:	2000      	movs	r0, #0
 800380a:	9000      	str	r0, [sp, #0]
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fd4c 	bl	80042aa <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	3301      	adds	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	7dbb      	ldrb	r3, [r7, #22]
 800381a:	b29b      	uxth	r3, r3
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	b29b      	uxth	r3, r3
 8003820:	89b9      	ldrh	r1, [r7, #12]
 8003822:	2000      	movs	r0, #0
 8003824:	9000      	str	r0, [sp, #0]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fd3f 	bl	80042aa <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800382c:	7dfa      	ldrb	r2, [r7, #23]
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	429a      	cmp	r2, r3
 8003832:	d309      	bcc.n	8003848 <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 8003834:	7dfa      	ldrb	r2, [r7, #23]
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	757b      	strb	r3, [r7, #21]
    ly++;
 8003840:	7d3b      	ldrb	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003846:	e78b      	b.n	8003760 <u8g2_font_2x_decode_len+0x2a>
      break;
 8003848:	bf00      	nop
  }
  lx += cnt;
 800384a:	7d7a      	ldrb	r2, [r7, #21]
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	4413      	add	r3, r2
 8003850:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003852:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 800385a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	725a      	strb	r2, [r3, #9]
  
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3360      	adds	r3, #96	; 0x60
 8003878:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800388c:	4619      	mov	r1, r3
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff fde5 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 8003894:	4603      	mov	r3, r0
 8003896:	b25a      	sxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80038a2:	4619      	mov	r1, r3
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff fdda 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 80038aa:	4603      	mov	r3, r0
 80038ac:	b25a      	sxtb	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	7b9b      	ldrb	r3, [r3, #14]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	73da      	strb	r2, [r3, #15]
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3360      	adds	r3, #96	; 0x60
 80038e6:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80038e8:	6839      	ldr	r1, [r7, #0]
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ffbd 	bl	800386a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80038f6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80038fe:	4619      	mov	r1, r3
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f7ff fdf7 	bl	80034f4 <u8g2_font_decode_get_signed_bits>
 8003906:	4603      	mov	r3, r0
 8003908:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003910:	4619      	mov	r1, r3
 8003912:	6978      	ldr	r0, [r7, #20]
 8003914:	f7ff fdee 	bl	80034f4 <u8g2_font_decode_get_signed_bits>
 8003918:	4603      	mov	r3, r0
 800391a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003922:	4619      	mov	r1, r3
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f7ff fde5 	bl	80034f4 <u8g2_font_decode_get_signed_bits>
 800392a:	4603      	mov	r3, r0
 800392c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f340 80d7 	ble.w	8003ae8 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	8898      	ldrh	r0, [r3, #4]
 800393e:	7cfa      	ldrb	r2, [r7, #19]
 8003940:	7c7b      	ldrb	r3, [r7, #17]
 8003942:	4413      	add	r3, r2
 8003944:	b2db      	uxtb	r3, r3
 8003946:	425b      	negs	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	b25a      	sxtb	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	7c1b      	ldrb	r3, [r3, #16]
 8003950:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003954:	f7ff fe2c 	bl	80035b0 <u8g2_add_vector_x>
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	88d8      	ldrh	r0, [r3, #6]
 8003964:	7cfa      	ldrb	r2, [r7, #19]
 8003966:	7c7b      	ldrb	r3, [r7, #17]
 8003968:	4413      	add	r3, r2
 800396a:	b2db      	uxtb	r3, r3
 800396c:	425b      	negs	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	b25a      	sxtb	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	7c1b      	ldrb	r3, [r3, #16]
 8003976:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800397a:	f7ff fdde 	bl	800353a <u8g2_add_vector_y>
 800397e:	4603      	mov	r3, r0
 8003980:	461a      	mov	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	889b      	ldrh	r3, [r3, #4]
 800398a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	88db      	ldrh	r3, [r3, #6]
 8003990:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8003992:	8bfb      	ldrh	r3, [r7, #30]
 8003994:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8003996:	8b7b      	ldrh	r3, [r7, #26]
 8003998:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	7c1b      	ldrb	r3, [r3, #16]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d85a      	bhi.n	8003a58 <u8g2_font_decode_glyph+0x180>
 80039a2:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <u8g2_font_decode_glyph+0xd0>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039fd 	.word	0x080039fd
 80039b4:	08003a31 	.word	0x08003a31
      {
	case 0:
	    x1 += decode->glyph_width;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	8bbb      	ldrh	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80039c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	8b3b      	ldrh	r3, [r7, #24]
 80039ce:	4413      	add	r3, r2
 80039d0:	833b      	strh	r3, [r7, #24]
	    break;
 80039d2:	e041      	b.n	8003a58 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80039d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	8bfa      	ldrh	r2, [r7, #30]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80039e0:	8bfb      	ldrh	r3, [r7, #30]
 80039e2:	3301      	adds	r3, #1
 80039e4:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80039e6:	8bbb      	ldrh	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	8b3b      	ldrh	r3, [r7, #24]
 80039f6:	4413      	add	r3, r2
 80039f8:	833b      	strh	r3, [r7, #24]
	    break;
 80039fa:	e02d      	b.n	8003a58 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	8bfa      	ldrh	r2, [r7, #30]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003a0a:	8bfb      	ldrh	r3, [r7, #30]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003a10:	8bbb      	ldrh	r3, [r7, #28]
 8003a12:	3301      	adds	r3, #1
 8003a14:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8003a16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8b7a      	ldrh	r2, [r7, #26]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003a22:	8b7b      	ldrh	r3, [r7, #26]
 8003a24:	3301      	adds	r3, #1
 8003a26:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003a28:	8b3b      	ldrh	r3, [r7, #24]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003a2e:	e013      	b.n	8003a58 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8003a30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	8bbb      	ldrh	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8b7a      	ldrh	r2, [r7, #26]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003a4a:	8b7b      	ldrh	r3, [r7, #26]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003a50:	8b3b      	ldrh	r3, [r7, #24]
 8003a52:	3301      	adds	r3, #1
 8003a54:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003a56:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003a58:	8bb8      	ldrh	r0, [r7, #28]
 8003a5a:	8b7a      	ldrh	r2, [r7, #26]
 8003a5c:	8bf9      	ldrh	r1, [r7, #30]
 8003a5e:	8b3b      	ldrh	r3, [r7, #24]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4603      	mov	r3, r0
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fcde 	bl	8004426 <u8g2_IsIntersection>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <u8g2_font_decode_glyph+0x19e>
	return d;
 8003a70:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003a74:	e03a      	b.n	8003aec <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff fce7 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f7ff fcde 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fdba 	bl	8003626 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003ab2:	7bbb      	ldrb	r3, [r7, #14]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fdb4 	bl	8003626 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003abe:	2101      	movs	r1, #1
 8003ac0:	6978      	ldr	r0, [r7, #20]
 8003ac2:	f7ff fccc 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ec      	bne.n	8003aa6 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003ad2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	dd00      	ble.n	8003adc <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003ada:	e7d2      	b.n	8003a82 <u8g2_font_decode_glyph+0x1aa>
	break;
 8003adc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	7b9a      	ldrb	r2, [r3, #14]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8003ae8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <u8g2_font_2x_decode_glyph>:


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3360      	adds	r3, #96	; 0x60
 8003b02:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff feaf 	bl	800386a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8003b12:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	69f8      	ldr	r0, [r7, #28]
 8003b1e:	f7ff fce9 	bl	80034f4 <u8g2_font_decode_get_signed_bits>
 8003b22:	4603      	mov	r3, r0
 8003b24:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	69f8      	ldr	r0, [r7, #28]
 8003b30:	f7ff fce0 	bl	80034f4 <u8g2_font_decode_get_signed_bits>
 8003b34:	4603      	mov	r3, r0
 8003b36:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b3e:	4619      	mov	r1, r3
 8003b40:	69f8      	ldr	r0, [r7, #28]
 8003b42:	f7ff fcd7 	bl	80034f4 <u8g2_font_decode_get_signed_bits>
 8003b46:	4603      	mov	r3, r0
 8003b48:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	dd7b      	ble.n	8003c4c <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	889a      	ldrh	r2, [r3, #4]
 8003b58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	88da      	ldrh	r2, [r3, #6]
 8003b6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	b299      	uxth	r1, r3
 8003b74:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	889b      	ldrh	r3, [r3, #4]
 8003b8a:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	88db      	ldrh	r3, [r3, #6]
 8003b90:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 8003b92:	8afb      	ldrh	r3, [r7, #22]
 8003b94:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 8003b96:	8abb      	ldrh	r3, [r7, #20]
 8003b98:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	8a7b      	ldrh	r3, [r7, #18]
 8003ba8:	4413      	add	r3, r2
 8003baa:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 8003bac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	8a3b      	ldrh	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003bbc:	8a78      	ldrh	r0, [r7, #18]
 8003bbe:	8aba      	ldrh	r2, [r7, #20]
 8003bc0:	8af9      	ldrh	r1, [r7, #22]
 8003bc2:	8a3b      	ldrh	r3, [r7, #16]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fc2c 	bl	8004426 <u8g2_IsIntersection>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 8003bd4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003bd8:	e03c      	b.n	8003c54 <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2200      	movs	r2, #0
 8003be4:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003bec:	4619      	mov	r1, r3
 8003bee:	69f8      	ldr	r0, [r7, #28]
 8003bf0:	f7ff fc35 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003bfe:	4619      	mov	r1, r3
 8003c00:	69f8      	ldr	r0, [r7, #28]
 8003c02:	f7ff fc2c 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 8003c06:	4603      	mov	r3, r0
 8003c08:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fd90 	bl	8003736 <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 8003c16:	7bbb      	ldrb	r3, [r7, #14]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fd8a 	bl	8003736 <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003c22:	2101      	movs	r1, #1
 8003c24:	69f8      	ldr	r0, [r7, #28]
 8003c26:	f7ff fc1a 	bl	800345e <u8g2_font_decode_get_unsigned_bits>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ec      	bne.n	8003c0a <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003c36:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	dd00      	ble.n	8003c40 <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003c3e:	e7d2      	b.n	8003be6 <u8g2_font_2x_decode_glyph+0xf2>
	break;
 8003c40:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	7b9a      	ldrb	r2, [r3, #14]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 8003c4c:	7e3b      	ldrb	r3, [r7, #24]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	b25b      	sxtb	r3, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	3317      	adds	r3, #23
 8003c72:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	2bff      	cmp	r3, #255	; 0xff
 8003c78:	d82a      	bhi.n	8003cd0 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003c7a:	887b      	ldrh	r3, [r7, #2]
 8003c7c:	2b60      	cmp	r3, #96	; 0x60
 8003c7e:	d907      	bls.n	8003c90 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c86:	461a      	mov	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e009      	b.n	8003ca4 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d906      	bls.n	8003ca4 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04e      	beq.n	8003d4c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	887a      	ldrh	r2, [r7, #2]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d102      	bne.n	8003cc0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	e049      	b.n	8003d54 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003cce:	e7e9      	b.n	8003ca4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4413      	add	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	6938      	ldr	r0, [r7, #16]
 8003ce6:	f7ff faf1 	bl	80032cc <u8g2_font_get_word>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	6938      	ldr	r0, [r7, #16]
 8003cf8:	f7ff fae8 	bl	80032cc <u8g2_font_get_word>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	3304      	adds	r3, #4
 8003d04:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003d06:	89fa      	ldrh	r2, [r7, #14]
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d3e9      	bcc.n	8003ce2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003d28:	89fb      	ldrh	r3, [r7, #14]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d010      	beq.n	8003d50 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003d2e:	89fa      	ldrh	r2, [r7, #14]
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d102      	bne.n	8003d3c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	3303      	adds	r3, #3
 8003d3a:	e00b      	b.n	8003d54 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3302      	adds	r3, #2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4413      	add	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003d4a:	e7e0      	b.n	8003d0e <u8g2_font_get_glyph_data+0xb2>
	break;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <u8g2_font_get_glyph_data+0xf6>
	break;
 8003d50:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	813b      	strh	r3, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	897a      	ldrh	r2, [r7, #10]
 8003d7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	893a      	ldrh	r2, [r7, #8]
 8003d86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f7ff ff64 	bl	8003c5c <u8g2_font_get_glyph_data>
 8003d94:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003d9c:	6939      	ldr	r1, [r7, #16]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff fd9a 	bl	80038d8 <u8g2_font_decode_glyph>
 8003da4:	4603      	mov	r3, r0
 8003da6:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003da8:	8afb      	ldrh	r3, [r7, #22]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <u8g2_font_2x_draw_glyph>:

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	4608      	mov	r0, r1
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	817b      	strh	r3, [r7, #10]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	813b      	strh	r3, [r7, #8]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	897a      	ldrh	r2, [r7, #10]
 8003dd4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	893a      	ldrh	r2, [r7, #8]
 8003ddc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4619      	mov	r1, r3
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff ff39 	bl	8003c5c <u8g2_font_get_glyph_data>
 8003dea:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 8003df2:	6939      	ldr	r1, [r7, #16]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff fe7d 	bl	8003af4 <u8g2_font_2x_decode_glyph>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003dfe:	8afb      	ldrh	r3, [r7, #22]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	4608      	mov	r0, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	461a      	mov	r2, r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	817b      	strh	r3, [r7, #10]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	813b      	strh	r3, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d833      	bhi.n	8003e94 <u8g2_DrawGlyph+0x8c>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <u8g2_DrawGlyph+0x2c>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e59 	.word	0x08003e59
 8003e3c:	08003e6d 	.word	0x08003e6d
 8003e40:	08003e81 	.word	0x08003e81
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	4798      	blx	r3
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	461a      	mov	r2, r3
 8003e50:	893b      	ldrh	r3, [r7, #8]
 8003e52:	4413      	add	r3, r2
 8003e54:	813b      	strh	r3, [r7, #8]
      break;
 8003e56:	e01d      	b.n	8003e94 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	4798      	blx	r3
 8003e60:	4603      	mov	r3, r0
 8003e62:	461a      	mov	r2, r3
 8003e64:	897b      	ldrh	r3, [r7, #10]
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	817b      	strh	r3, [r7, #10]
      break;
 8003e6a:	e013      	b.n	8003e94 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	4798      	blx	r3
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	893b      	ldrh	r3, [r7, #8]
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	813b      	strh	r3, [r7, #8]
      break;
 8003e7e:	e009      	b.n	8003e94 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	4798      	blx	r3
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	897b      	ldrh	r3, [r7, #10]
 8003e8e:	4413      	add	r3, r2
 8003e90:	817b      	strh	r3, [r7, #10]
      break;
 8003e92:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	893a      	ldrh	r2, [r7, #8]
 8003e98:	8979      	ldrh	r1, [r7, #10]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7ff ff5e 	bl	8003d5c <u8g2_font_draw_glyph>
 8003ea0:	4603      	mov	r3, r0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop

08003eac <u8g2_DrawGlyphX2>:

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	4798      	blx	r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	893a      	ldrh	r2, [r7, #8]
 8003ede:	8979      	ldrh	r1, [r7, #10]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff ff66 	bl	8003db2 <u8g2_font_2x_draw_glyph>
 8003ee6:	4603      	mov	r3, r0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	817b      	strh	r3, [r7, #10]
 8003efe:	4613      	mov	r3, r2
 8003f00:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fcc0 	bl	8004888 <u8x8_utf8_init>
  sum = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	7812      	ldrb	r2, [r2, #0]
 8003f14:	4611      	mov	r1, r2
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	4798      	blx	r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003f1e:	8abb      	ldrh	r3, [r7, #20]
 8003f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d038      	beq.n	8003f9a <u8g2_draw_string+0xaa>
      break;
    str++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003f2e:	8abb      	ldrh	r3, [r7, #20]
 8003f30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d0e9      	beq.n	8003f0c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003f38:	8abb      	ldrh	r3, [r7, #20]
 8003f3a:	893a      	ldrh	r2, [r7, #8]
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff ff62 	bl	8003e08 <u8g2_DrawGlyph>
 8003f44:	4603      	mov	r3, r0
 8003f46:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d81e      	bhi.n	8003f90 <u8g2_draw_string+0xa0>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <u8g2_draw_string+0x68>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f73 	.word	0x08003f73
 8003f60:	08003f7d 	.word	0x08003f7d
 8003f64:	08003f87 	.word	0x08003f87
      {
	case 0:
	  x += delta;
 8003f68:	897a      	ldrh	r2, [r7, #10]
 8003f6a:	8a7b      	ldrh	r3, [r7, #18]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	817b      	strh	r3, [r7, #10]
	  break;
 8003f70:	e00e      	b.n	8003f90 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8003f72:	893a      	ldrh	r2, [r7, #8]
 8003f74:	8a7b      	ldrh	r3, [r7, #18]
 8003f76:	4413      	add	r3, r2
 8003f78:	813b      	strh	r3, [r7, #8]
	  break;
 8003f7a:	e009      	b.n	8003f90 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8003f7c:	897a      	ldrh	r2, [r7, #10]
 8003f7e:	8a7b      	ldrh	r3, [r7, #18]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	817b      	strh	r3, [r7, #10]
	  break;
 8003f84:	e004      	b.n	8003f90 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8003f86:	893a      	ldrh	r2, [r7, #8]
 8003f88:	8a7b      	ldrh	r3, [r7, #18]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	813b      	strh	r3, [r7, #8]
	  break;
 8003f8e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8003f90:	8afa      	ldrh	r2, [r7, #22]
 8003f92:	8a7b      	ldrh	r3, [r7, #18]
 8003f94:	4413      	add	r3, r2
 8003f96:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003f98:	e7b8      	b.n	8003f0c <u8g2_draw_string+0x1c>
      break;
 8003f9a:	bf00      	nop
    }
  }
  return sum;
 8003f9c:	8afb      	ldrh	r3, [r7, #22]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop

08003fa8 <u8g2_draw_string_2x>:

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	817b      	strh	r3, [r7, #10]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fc64 	bl	8004888 <u8x8_utf8_init>
  sum = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	4798      	blx	r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003fd6:	8abb      	ldrh	r3, [r7, #20]
 8003fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d018      	beq.n	8004012 <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003fe6:	8abb      	ldrh	r3, [r7, #20]
 8003fe8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d0e9      	beq.n	8003fc4 <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 8003ff0:	8abb      	ldrh	r3, [r7, #20]
 8003ff2:	893a      	ldrh	r2, [r7, #8]
 8003ff4:	8979      	ldrh	r1, [r7, #10]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff ff58 	bl	8003eac <u8g2_DrawGlyphX2>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	827b      	strh	r3, [r7, #18]
      x += delta;
 8004000:	897a      	ldrh	r2, [r7, #10]
 8004002:	8a7b      	ldrh	r3, [r7, #18]
 8004004:	4413      	add	r3, r2
 8004006:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 8004008:	8afa      	ldrh	r2, [r7, #22]
 800400a:	8a7b      	ldrh	r3, [r7, #18]
 800400c:	4413      	add	r3, r2
 800400e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004010:	e7d8      	b.n	8003fc4 <u8g2_draw_string_2x+0x1c>
      break;
 8004012:	bf00      	nop
    }
  }
  return sum;
 8004014:	8afb      	ldrh	r3, [r7, #22]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	817b      	strh	r3, [r7, #10]
 800402e:	4613      	mov	r3, r2
 8004030:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a06      	ldr	r2, [pc, #24]	; (8004050 <u8g2_DrawStr+0x30>)
 8004036:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004038:	893a      	ldrh	r2, [r7, #8]
 800403a:	8979      	ldrh	r1, [r7, #10]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff ff56 	bl	8003ef0 <u8g2_draw_string>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	080048a5 	.word	0x080048a5

08004054 <u8g2_DrawStrX2>:

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	4613      	mov	r3, r2
 8004064:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a06      	ldr	r2, [pc, #24]	; (8004084 <u8g2_DrawStrX2+0x30>)
 800406a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 800406c:	893a      	ldrh	r2, [r7, #8]
 800406e:	8979      	ldrh	r1, [r7, #10]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff ff98 	bl	8003fa8 <u8g2_draw_string_2x>
 8004078:	4603      	mov	r3, r0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	080048a5 	.word	0x080048a5

08004088 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05d      	beq.n	8004154 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04d      	beq.n	8004156 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d11c      	bne.n	80040fe <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80040d0:	429a      	cmp	r2, r3
 80040d2:	da05      	bge.n	80040e0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dd32      	ble.n	8004156 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80040fc:	e02b      	b.n	8004156 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800410c:	4619      	mov	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004114:	440b      	add	r3, r1
 8004116:	429a      	cmp	r2, r3
 8004118:	da0d      	bge.n	8004136 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004120:	b2da      	uxtb	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4413      	add	r3, r2
 800412c:	b2db      	uxtb	r3, r3
 800412e:	b25a      	sxtb	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004142:	429a      	cmp	r2, r3
 8004144:	dd07      	ble.n	8004156 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004152:	e000      	b.n	8004156 <u8g2_UpdateRefHeight+0xce>
    return;
 8004154:	bf00      	nop
  }  
}
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return 0;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a04      	ldr	r2, [pc, #16]	; (8004194 <u8g2_SetFontPosBaseline+0x1c>)
 8004184:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	08004161 	.word	0x08004161

08004198 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d00b      	beq.n	80041c4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3374      	adds	r3, #116	; 0x74
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff f8a7 	bl	800330c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ff62 	bl	8004088 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	460b      	mov	r3, r1
 80041dc:	80fb      	strh	r3, [r7, #6]
 80041de:	4613      	mov	r3, r2
 80041e0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80041e8:	8afb      	ldrh	r3, [r7, #22]
 80041ea:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	881a      	ldrh	r2, [r3, #0]
 80041f0:	8abb      	ldrh	r3, [r7, #20]
 80041f2:	4413      	add	r3, r2
 80041f4:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80041f6:	8afa      	ldrh	r2, [r7, #22]
 80041f8:	8abb      	ldrh	r3, [r7, #20]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d90b      	bls.n	8004216 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80041fe:	8afa      	ldrh	r2, [r7, #22]
 8004200:	88bb      	ldrh	r3, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d205      	bcs.n	8004212 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004206:	88bb      	ldrh	r3, [r7, #4]
 8004208:	82bb      	strh	r3, [r7, #20]
      b--;
 800420a:	8abb      	ldrh	r3, [r7, #20]
 800420c:	3b01      	subs	r3, #1
 800420e:	82bb      	strh	r3, [r7, #20]
 8004210:	e001      	b.n	8004216 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004216:	8afa      	ldrh	r2, [r7, #22]
 8004218:	88bb      	ldrh	r3, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d301      	bcc.n	8004222 <u8g2_clip_intersection2+0x56>
    return 0;
 800421e:	2300      	movs	r3, #0
 8004220:	e01c      	b.n	800425c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004222:	8aba      	ldrh	r2, [r7, #20]
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	429a      	cmp	r2, r3
 8004228:	d801      	bhi.n	800422e <u8g2_clip_intersection2+0x62>
    return 0;
 800422a:	2300      	movs	r3, #0
 800422c:	e016      	b.n	800425c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800422e:	8afa      	ldrh	r2, [r7, #22]
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	429a      	cmp	r2, r3
 8004234:	d201      	bcs.n	800423a <u8g2_clip_intersection2+0x6e>
    a = c;
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800423a:	8aba      	ldrh	r2, [r7, #20]
 800423c:	88bb      	ldrh	r3, [r7, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	d901      	bls.n	8004246 <u8g2_clip_intersection2+0x7a>
    b = d;
 8004242:	88bb      	ldrh	r3, [r7, #4]
 8004244:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8afa      	ldrh	r2, [r7, #22]
 800424a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800424c:	8aba      	ldrh	r2, [r7, #20]
 800424e:	8afb      	ldrh	r3, [r7, #22]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	8aba      	ldrh	r2, [r7, #20]
 8004258:	801a      	strh	r2, [r3, #0]
  return 1;
 800425a:	2301      	movs	r3, #1
}
 800425c:	4618      	mov	r0, r3
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b087      	sub	sp, #28
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	461a      	mov	r2, r3
 8004276:	4603      	mov	r3, r0
 8004278:	817b      	strh	r3, [r7, #10]
 800427a:	460b      	mov	r3, r1
 800427c:	813b      	strh	r3, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004286:	893a      	ldrh	r2, [r7, #8]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004290:	88f8      	ldrh	r0, [r7, #6]
 8004292:	893a      	ldrh	r2, [r7, #8]
 8004294:	8979      	ldrh	r1, [r7, #10]
 8004296:	f897 3020 	ldrb.w	r3, [r7, #32]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4603      	mov	r3, r0
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	47a0      	blx	r4
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}

080042aa <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80042aa:	b590      	push	{r4, r7, lr}
 80042ac:	b087      	sub	sp, #28
 80042ae:	af02      	add	r7, sp, #8
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	4608      	mov	r0, r1
 80042b4:	4611      	mov	r1, r2
 80042b6:	461a      	mov	r2, r3
 80042b8:	4603      	mov	r3, r0
 80042ba:	817b      	strh	r3, [r7, #10]
 80042bc:	460b      	mov	r3, r1
 80042be:	813b      	strh	r3, [r7, #8]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d075      	beq.n	80043ba <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d072      	beq.n	80043ba <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d91a      	bls.n	8004310 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80042da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d109      	bne.n	80042f6 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80042e2:	897a      	ldrh	r2, [r7, #10]
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	817b      	strh	r3, [r7, #10]
	  x++;
 80042ec:	897b      	ldrh	r3, [r7, #10]
 80042ee:	3301      	adds	r3, #1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	817b      	strh	r3, [r7, #10]
 80042f4:	e00c      	b.n	8004310 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80042f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d108      	bne.n	8004310 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80042fe:	893a      	ldrh	r2, [r7, #8]
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	b29b      	uxth	r3, r3
 8004306:	813b      	strh	r3, [r7, #8]
	  y++;
 8004308:	893b      	ldrh	r3, [r7, #8]
 800430a:	3301      	adds	r3, #1
 800430c:	b29b      	uxth	r3, r3
 800430e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8004310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800431c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d11a      	bne.n	800435a <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800432a:	893b      	ldrh	r3, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	d83b      	bhi.n	80043a8 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004336:	893b      	ldrh	r3, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d937      	bls.n	80043ac <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004348:	1db9      	adds	r1, r7, #6
 800434a:	f107 000a 	add.w	r0, r7, #10
 800434e:	f7ff ff3d 	bl	80041cc <u8g2_clip_intersection2>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11a      	bne.n	800438e <u8g2_DrawHVLine+0xe4>
	  return;
 8004358:	e02f      	b.n	80043ba <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004360:	897b      	ldrh	r3, [r7, #10]
 8004362:	429a      	cmp	r2, r3
 8004364:	d824      	bhi.n	80043b0 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800436c:	897b      	ldrh	r3, [r7, #10]
 800436e:	429a      	cmp	r2, r3
 8004370:	d920      	bls.n	80043b4 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800437e:	1db9      	adds	r1, r7, #6
 8004380:	f107 0008 	add.w	r0, r7, #8
 8004384:	f7ff ff22 	bl	80041cc <u8g2_clip_intersection2>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d014      	beq.n	80043b8 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	689c      	ldr	r4, [r3, #8]
 8004394:	8979      	ldrh	r1, [r7, #10]
 8004396:	893a      	ldrh	r2, [r7, #8]
 8004398:	88f8      	ldrh	r0, [r7, #6]
 800439a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	4603      	mov	r3, r0
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	47a0      	blx	r4
 80043a6:	e008      	b.n	80043ba <u8g2_DrawHVLine+0x110>
	  return;
 80043a8:	bf00      	nop
 80043aa:	e006      	b.n	80043ba <u8g2_DrawHVLine+0x110>
	  return;
 80043ac:	bf00      	nop
 80043ae:	e004      	b.n	80043ba <u8g2_DrawHVLine+0x110>
	  return;
 80043b0:	bf00      	nop
 80043b2:	e002      	b.n	80043ba <u8g2_DrawHVLine+0x110>
	  return;
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <u8g2_DrawHVLine+0x110>
	  return;
 80043b8:	bf00      	nop
    }
}
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd90      	pop	{r4, r7, pc}

080043c0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80043c0:	b490      	push	{r4, r7}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4623      	mov	r3, r4
 80043d0:	80fb      	strh	r3, [r7, #6]
 80043d2:	4603      	mov	r3, r0
 80043d4:	80bb      	strh	r3, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	807b      	strh	r3, [r7, #2]
 80043da:	4613      	mov	r3, r2
 80043dc:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	88bb      	ldrh	r3, [r7, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d20d      	bcs.n	8004402 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80043e6:	883a      	ldrh	r2, [r7, #0]
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d901      	bls.n	80043f2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e014      	b.n	800441c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	883b      	ldrh	r3, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d901      	bls.n	80043fe <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e00e      	b.n	800441c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	e00c      	b.n	800441c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004402:	883a      	ldrh	r2, [r7, #0]
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	429a      	cmp	r2, r3
 8004408:	d907      	bls.n	800441a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800440a:	887a      	ldrh	r2, [r7, #2]
 800440c:	883b      	ldrh	r3, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d901      	bls.n	8004416 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004412:	2301      	movs	r3, #1
 8004414:	e002      	b.n	800441c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800441a:	2300      	movs	r3, #0
    }
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bc90      	pop	{r4, r7}
 8004424:	4770      	bx	lr

08004426 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	4608      	mov	r0, r1
 8004430:	4611      	mov	r1, r2
 8004432:	461a      	mov	r2, r3
 8004434:	4603      	mov	r3, r0
 8004436:	817b      	strh	r3, [r7, #10]
 8004438:	460b      	mov	r3, r1
 800443a:	813b      	strh	r3, [r7, #8]
 800443c:	4613      	mov	r3, r2
 800443e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800444c:	8b3b      	ldrh	r3, [r7, #24]
 800444e:	893a      	ldrh	r2, [r7, #8]
 8004450:	f7ff ffb6 	bl	80043c0 <u8g2_is_intersection_decision_tree>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <u8g2_IsIntersection+0x38>
    return 0; 
 800445a:	2300      	movs	r3, #0
 800445c:	e00a      	b.n	8004474 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	897a      	ldrh	r2, [r7, #10]
 800446e:	f7ff ffa7 	bl	80043c0 <u8g2_is_intersection_decision_tree>
 8004472:	4603      	mov	r3, r0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800447c:	b480      	push	{r7}
 800447e:	b089      	sub	sp, #36	; 0x24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	460b      	mov	r3, r1
 8004490:	813b      	strh	r3, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8004496:	893b      	ldrh	r3, [r7, #8]
 8004498:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800449a:	7efb      	ldrb	r3, [r7, #27]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80044a6:	7e3a      	ldrb	r2, [r7, #24]
 80044a8:	7efb      	ldrb	r3, [r7, #27]
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d801      	bhi.n	80044c6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80044c2:	7e3b      	ldrb	r3, [r7, #24]
 80044c4:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d001      	beq.n	80044d4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80044d0:	7e3b      	ldrb	r3, [r7, #24]
 80044d2:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80044d8:	8afb      	ldrh	r3, [r7, #22]
 80044da:	f023 0307 	bic.w	r3, r3, #7
 80044de:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	7c1b      	ldrb	r3, [r3, #16]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8afa      	ldrh	r2, [r7, #22]
 80044ea:	fb12 f303 	smulbb	r3, r2, r3
 80044ee:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80044f6:	8afb      	ldrh	r3, [r7, #22]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80044fe:	897b      	ldrh	r3, [r7, #10]
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004506:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d117      	bne.n	800453e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	7ebb      	ldrb	r3, [r7, #26]
 8004514:	4313      	orrs	r3, r2
 8004516:	b2da      	uxtb	r2, r3
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	781a      	ldrb	r2, [r3, #0]
 8004520:	7e7b      	ldrb	r3, [r7, #25]
 8004522:	4053      	eors	r3, r2
 8004524:	b2da      	uxtb	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	701a      	strb	r2, [r3, #0]
	ptr++;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3301      	adds	r3, #1
 800452e:	61fb      	str	r3, [r7, #28]
	len--;
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	3b01      	subs	r3, #1
 8004534:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e8      	bne.n	800450e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800453c:	e038      	b.n	80045b0 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	7ebb      	ldrb	r3, [r7, #26]
 8004544:	4313      	orrs	r3, r2
 8004546:	b2da      	uxtb	r2, r3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	7e7b      	ldrb	r3, [r7, #25]
 8004552:	4053      	eors	r3, r2
 8004554:	b2da      	uxtb	r2, r3
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800455a:	7efb      	ldrb	r3, [r7, #27]
 800455c:	3301      	adds	r3, #1
 800455e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8004560:	7efb      	ldrb	r3, [r7, #27]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	76fb      	strb	r3, [r7, #27]
      len--;
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	3b01      	subs	r3, #1
 800456c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800456e:	7efb      	ldrb	r3, [r7, #27]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d114      	bne.n	800459e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004578:	461a      	mov	r2, r3
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004586:	2b01      	cmp	r3, #1
 8004588:	d801      	bhi.n	800458e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004594:	2b01      	cmp	r3, #1
 8004596:	d008      	beq.n	80045aa <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8004598:	2301      	movs	r3, #1
 800459a:	767b      	strb	r3, [r7, #25]
 800459c:	e005      	b.n	80045aa <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800459e:	7ebb      	ldrb	r3, [r7, #26]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80045a4:	7e7b      	ldrb	r3, [r7, #25]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1c6      	bne.n	800453e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80045b0:	bf00      	nop
 80045b2:	3724      	adds	r7, #36	; 0x24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	79fa      	ldrb	r2, [r7, #7]
 8004620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff ffa9 	bl	80045bc <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fd84 	bl	8004178 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004694:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004696:	89fb      	ldrh	r3, [r7, #14]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	89fa      	ldrh	r2, [r7, #14]
 80046a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	7c1b      	ldrb	r3, [r3, #16]
 80046a6:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80046a8:	89fb      	ldrh	r3, [r7, #14]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	89fa      	ldrh	r2, [r7, #14]
 80046b2:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046ba:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80046bc:	89fb      	ldrh	r3, [r7, #14]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	89fa      	ldrh	r2, [r7, #14]
 80046c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ce:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80046d0:	89fb      	ldrh	r3, [r7, #14]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80046d8:	4413      	add	r3, r2
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	7c52      	ldrb	r2, [r2, #17]
 80046de:	4293      	cmp	r3, r2
 80046e0:	dd08      	ble.n	80046f4 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	7c5b      	ldrb	r3, [r3, #17]
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80046f4:	89fb      	ldrh	r3, [r7, #14]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004716:	89fb      	ldrh	r3, [r7, #14]
 8004718:	4413      	add	r3, r2
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	8a9a      	ldrh	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	8ada      	ldrh	r2, [r3, #22]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af02      	add	r7, sp, #8
 8004748:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4603      	mov	r3, r0
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fe5d 	bl	8004426 <u8g2_IsIntersection>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800477a:	e03b      	b.n	80047f4 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004790:	429a      	cmp	r2, r3
 8004792:	d205      	bcs.n	80047a0 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d905      	bls.n	80047bc <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d205      	bcs.n	80047d8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d905      	bls.n	80047f4 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ff3b 	bl	8004680 <u8g2_update_dimension_common>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ff7b 	bl	8004742 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	461a      	mov	r2, r3
 8004862:	4603      	mov	r3, r0
 8004864:	817b      	strh	r3, [r7, #10]
 8004866:	460b      	mov	r3, r1
 8004868:	813b      	strh	r3, [r7, #8]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800486e:	88f8      	ldrh	r0, [r7, #6]
 8004870:	893a      	ldrh	r2, [r7, #8]
 8004872:	8979      	ldrh	r1, [r7, #10]
 8004874:	7e3b      	ldrb	r3, [r7, #24]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4603      	mov	r3, r0
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff fcf4 	bl	8004268 <u8g2_draw_hv_line_2dir>
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <u8x8_ascii_next+0x18>
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	2b0a      	cmp	r3, #10
 80048ba:	d102      	bne.n	80048c2 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80048bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048c0:	e001      	b.n	80048c6 <u8x8_ascii_next+0x22>
  return b;
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	b29b      	uxth	r3, r3
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80048d2:	b590      	push	{r4, r7, lr}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691c      	ldr	r4, [r3, #16]
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	2300      	movs	r3, #0
 80048e6:	2120      	movs	r1, #32
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	47a0      	blx	r4
 80048ec:	4603      	mov	r3, r0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd90      	pop	{r4, r7, pc}

080048f6 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80048f6:	b590      	push	{r4, r7, lr}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	460b      	mov	r3, r1
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	691c      	ldr	r4, [r3, #16]
 8004908:	7afa      	ldrb	r2, [r7, #11]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2117      	movs	r1, #23
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	47a0      	blx	r4
 8004912:	4603      	mov	r3, r0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}

0800491c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004928:	1cfb      	adds	r3, r7, #3
 800492a:	461a      	mov	r2, r3
 800492c:	2101      	movs	r1, #1
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff ffe1 	bl	80048f6 <u8x8_byte_SendBytes>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800493e:	b590      	push	{r4, r7, lr}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68dc      	ldr	r4, [r3, #12]
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	2300      	movs	r3, #0
 8004952:	2115      	movs	r1, #21
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	47a0      	blx	r4
 8004958:	4603      	mov	r3, r0
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}

08004962 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004962:	b590      	push	{r4, r7, lr}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68dc      	ldr	r4, [r3, #12]
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	2300      	movs	r3, #0
 8004976:	2116      	movs	r1, #22
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	47a0      	blx	r4
 800497c:	4603      	mov	r3, r0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}

08004986 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004986:	b590      	push	{r4, r7, lr}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	460b      	mov	r3, r1
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68dc      	ldr	r4, [r3, #12]
 8004998:	7afa      	ldrb	r2, [r7, #11]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2117      	movs	r1, #23
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	47a0      	blx	r4
 80049a2:	4603      	mov	r3, r0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd90      	pop	{r4, r7, pc}

080049ac <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68dc      	ldr	r4, [r3, #12]
 80049b8:	2300      	movs	r3, #0
 80049ba:	2200      	movs	r2, #0
 80049bc:	2118      	movs	r1, #24
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	47a0      	blx	r4
 80049c2:	4603      	mov	r3, r0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}

080049cc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68dc      	ldr	r4, [r3, #12]
 80049d8:	2300      	movs	r3, #0
 80049da:	2200      	movs	r2, #0
 80049dc:	2119      	movs	r1, #25
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	47a0      	blx	r4
 80049e2:	4603      	mov	r3, r0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd90      	pop	{r4, r7, pc}

080049ec <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	73fb      	strb	r3, [r7, #15]
    data++;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2bfe      	cmp	r3, #254	; 0xfe
 8004a06:	d031      	beq.n	8004a6c <u8x8_cad_SendSequence+0x80>
 8004a08:	2bfe      	cmp	r3, #254	; 0xfe
 8004a0a:	dc3d      	bgt.n	8004a88 <u8x8_cad_SendSequence+0x9c>
 8004a0c:	2b19      	cmp	r3, #25
 8004a0e:	dc3b      	bgt.n	8004a88 <u8x8_cad_SendSequence+0x9c>
 8004a10:	2b18      	cmp	r3, #24
 8004a12:	da23      	bge.n	8004a5c <u8x8_cad_SendSequence+0x70>
 8004a14:	2b16      	cmp	r3, #22
 8004a16:	dc02      	bgt.n	8004a1e <u8x8_cad_SendSequence+0x32>
 8004a18:	2b15      	cmp	r3, #21
 8004a1a:	da03      	bge.n	8004a24 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004a1c:	e034      	b.n	8004a88 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004a1e:	2b17      	cmp	r3, #23
 8004a20:	d00e      	beq.n	8004a40 <u8x8_cad_SendSequence+0x54>
	return;
 8004a22:	e031      	b.n	8004a88 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68dc      	ldr	r4, [r3, #12]
 8004a2e:	7bba      	ldrb	r2, [r7, #14]
 8004a30:	7bf9      	ldrb	r1, [r7, #15]
 8004a32:	2300      	movs	r3, #0
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	47a0      	blx	r4
	  data++;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	603b      	str	r3, [r7, #0]
	  break;
 8004a3e:	e022      	b.n	8004a86 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004a46:	f107 030e 	add.w	r3, r7, #14
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff99 	bl	8004986 <u8x8_cad_SendData>
	  data++;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	603b      	str	r3, [r7, #0]
	  break;
 8004a5a:	e014      	b.n	8004a86 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68dc      	ldr	r4, [r3, #12]
 8004a60:	7bf9      	ldrb	r1, [r7, #15]
 8004a62:	2300      	movs	r3, #0
 8004a64:	2200      	movs	r2, #0
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	47a0      	blx	r4
	  break;
 8004a6a:	e00c      	b.n	8004a86 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004a72:	7bbb      	ldrb	r3, [r7, #14]
 8004a74:	461a      	mov	r2, r3
 8004a76:	2129      	movs	r1, #41	; 0x29
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f9d8 	bl	8004e2e <u8x8_gpio_call>
	  data++;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	603b      	str	r3, [r7, #0]
	  break;
 8004a84:	bf00      	nop
    cmd = *data;
 8004a86:	e7b6      	b.n	80049f6 <u8x8_cad_SendSequence+0xa>
	return;
 8004a88:	bf00      	nop
    }
  }
}
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd90      	pop	{r4, r7, pc}

08004a90 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	72fb      	strb	r3, [r7, #11]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8004aa2:	7afb      	ldrb	r3, [r7, #11]
 8004aa4:	3b14      	subs	r3, #20
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d82f      	bhi.n	8004b0a <u8x8_cad_001+0x7a>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <u8x8_cad_001+0x20>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004af9 	.word	0x08004af9
 8004ab4:	08004ac9 	.word	0x08004ac9
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004af9 	.word	0x08004af9
 8004ac4:	08004af9 	.word	0x08004af9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8004ac8:	2100      	movs	r1, #0
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff ff01 	bl	80048d2 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004ad0:	7abb      	ldrb	r3, [r7, #10]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff21 	bl	800491c <u8x8_byte_SendByte>
      break;
 8004ada:	e018      	b.n	8004b0e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004adc:	2100      	movs	r1, #0
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fef7 	bl	80048d2 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004ae4:	7abb      	ldrb	r3, [r7, #10]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff ff17 	bl	800491c <u8x8_byte_SendByte>
      break;
 8004aee:	e00e      	b.n	8004b0e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8004af0:	2101      	movs	r1, #1
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff feed 	bl	80048d2 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691c      	ldr	r4, [r3, #16]
 8004afc:	7aba      	ldrb	r2, [r7, #10]
 8004afe:	7af9      	ldrb	r1, [r7, #11]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	47a0      	blx	r4
 8004b06:	4603      	mov	r3, r0
 8004b08:	e002      	b.n	8004b10 <u8x8_cad_001+0x80>
    default:
      return 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <u8x8_cad_001+0x80>
  }
  return 1;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}

08004b18 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	72fb      	strb	r3, [r7, #11]
 8004b26:	4613      	mov	r3, r2
 8004b28:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004b2a:	7afb      	ldrb	r3, [r7, #11]
 8004b2c:	3b0b      	subs	r3, #11
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	f200 808a 	bhi.w	8004c48 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b51 	.word	0x08004b51
 8004b40:	08004c49 	.word	0x08004c49
 8004b44:	08004b6b 	.word	0x08004b6b
 8004b48:	08004b9d 	.word	0x08004b9d
 8004b4c:	08004bbd 	.word	0x08004bbd
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004b50:	7abb      	ldrb	r3, [r7, #10]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d104      	bne.n	8004b60 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8004b56:	4940      	ldr	r1, [pc, #256]	; (8004c58 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff ff47 	bl	80049ec <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004b5e:	e075      	b.n	8004c4c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004b60:	493e      	ldr	r1, [pc, #248]	; (8004c5c <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ff42 	bl	80049ec <u8x8_cad_SendSequence>
      break;
 8004b68:	e070      	b.n	8004c4c <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8004b6a:	7abb      	ldrb	r3, [r7, #10]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8004b70:	493b      	ldr	r1, [pc, #236]	; (8004c60 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff ff3a 	bl	80049ec <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	7c9a      	ldrb	r2, [r3, #18]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004b84:	e062      	b.n	8004c4c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8004b86:	4937      	ldr	r1, [pc, #220]	; (8004c64 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff ff2f 	bl	80049ec <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	7cda      	ldrb	r2, [r3, #19]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8004b9a:	e057      	b.n	8004c4c <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff ff05 	bl	80049ac <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004ba2:	2181      	movs	r1, #129	; 0x81
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff feca 	bl	800493e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8004baa:	7abb      	ldrb	r3, [r7, #10]
 8004bac:	4619      	mov	r1, r3
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff fed7 	bl	8004962 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff ff09 	bl	80049cc <u8x8_cad_EndTransfer>
      break;
 8004bba:	e047      	b.n	8004c4c <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff fef5 	bl	80049ac <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	795b      	ldrb	r3, [r3, #5]
 8004bc6:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004bda:	2140      	movs	r1, #64	; 0x40
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff feae 	bl	800493e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f043 0310 	orr.w	r3, r3, #16
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	4619      	mov	r1, r3
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff fea4 	bl	800493e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	4619      	mov	r1, r3
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff feae 	bl	8004962 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	799b      	ldrb	r3, [r3, #6]
 8004c0a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	4619      	mov	r1, r3
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7ff fea5 	bl	8004962 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	791b      	ldrb	r3, [r3, #4]
 8004c1c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004c24:	7dbb      	ldrb	r3, [r7, #22]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fea9 	bl	8004986 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004c34:	7abb      	ldrb	r3, [r7, #10]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004c3a:	7abb      	ldrb	r3, [r7, #10]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1eb      	bne.n	8004c18 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fec3 	bl	80049cc <u8x8_cad_EndTransfer>
      break;
 8004c46:	e001      	b.n	8004c4c <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004c4c:	2301      	movs	r3, #1
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	08005c44 	.word	0x08005c44
 8004c5c:	08005c4c 	.word	0x08005c4c
 8004c60:	08005c54 	.word	0x08005c54
 8004c64:	08005c5c 	.word	0x08005c5c

08004c68 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	460b      	mov	r3, r1
 8004c74:	72fb      	strb	r3, [r7, #11]
 8004c76:	4613      	mov	r3, r2
 8004c78:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004c7a:	7aba      	ldrb	r2, [r7, #10]
 8004c7c:	7af9      	ldrb	r1, [r7, #11]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ff49 	bl	8004b18 <u8x8_d_ssd1306_sh1106_generic>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e014      	b.n	8004cba <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8004c90:	7afb      	ldrb	r3, [r7, #11]
 8004c92:	2b09      	cmp	r3, #9
 8004c94:	d009      	beq.n	8004caa <u8x8_d_ssd1306_128x64_noname+0x42>
 8004c96:	2b0a      	cmp	r3, #10
 8004c98:	d10c      	bne.n	8004cb4 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f82a 	bl	8004cf4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8004ca0:	4908      	ldr	r1, [pc, #32]	; (8004cc4 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff fea2 	bl	80049ec <u8x8_cad_SendSequence>
      break;
 8004ca8:	e006      	b.n	8004cb8 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8004caa:	4907      	ldr	r1, [pc, #28]	; (8004cc8 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f80d 	bl	8004ccc <u8x8_d_helper_display_setup_memory>
      break;
 8004cb2:	e001      	b.n	8004cb8 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8004cb8:	2301      	movs	r3, #1
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08005c0c 	.word	0x08005c0c
 8004cc8:	08005c64 	.word	0x08005c64

08004ccc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	7c9a      	ldrb	r2, [r3, #18]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695c      	ldr	r4, [r3, #20]
 8004d00:	2300      	movs	r3, #0
 8004d02:	2200      	movs	r2, #0
 8004d04:	2128      	movs	r1, #40	; 0x28
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68dc      	ldr	r4, [r3, #12]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2200      	movs	r2, #0
 8004d12:	2114      	movs	r1, #20
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004d18:	2201      	movs	r2, #1
 8004d1a:	214b      	movs	r1, #75	; 0x4b
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f886 	bl	8004e2e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	791b      	ldrb	r3, [r3, #4]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2129      	movs	r1, #41	; 0x29
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f87e 	bl	8004e2e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004d32:	2200      	movs	r2, #0
 8004d34:	214b      	movs	r1, #75	; 0x4b
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f879 	bl	8004e2e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	791b      	ldrb	r3, [r3, #4]
 8004d42:	461a      	mov	r2, r3
 8004d44:	2129      	movs	r1, #41	; 0x29
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f871 	bl	8004e2e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	214b      	movs	r1, #75	; 0x4b
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f86c 	bl	8004e2e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	795b      	ldrb	r3, [r3, #5]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2129      	movs	r1, #41	; 0x29
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f864 	bl	8004e2e <u8x8_gpio_call>
}    
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd90      	pop	{r4, r7, pc}

08004d6e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004d6e:	b590      	push	{r4, r7, lr}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	4608      	mov	r0, r1
 8004d78:	4611      	mov	r1, r2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	70fb      	strb	r3, [r7, #3]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70bb      	strb	r3, [r7, #2]
 8004d84:	4613      	mov	r3, r2
 8004d86:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004d8c:	78bb      	ldrb	r3, [r7, #2]
 8004d8e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004d90:	787b      	ldrb	r3, [r7, #1]
 8004d92:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689c      	ldr	r4, [r3, #8]
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	2201      	movs	r2, #1
 8004da2:	210f      	movs	r1, #15
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	47a0      	blx	r4
 8004da8:	4603      	mov	r3, r0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}

08004db2 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004db2:	b590      	push	{r4, r7, lr}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689c      	ldr	r4, [r3, #8]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2109      	movs	r1, #9
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	47a0      	blx	r4
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd90      	pop	{r4, r7, pc}

08004dd0 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689c      	ldr	r4, [r3, #8]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2200      	movs	r2, #0
 8004de0:	210a      	movs	r1, #10
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd90      	pop	{r4, r7, pc}

08004dee <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004dee:	b590      	push	{r4, r7, lr}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689c      	ldr	r4, [r3, #8]
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	2300      	movs	r3, #0
 8004e02:	210b      	movs	r1, #11
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	47a0      	blx	r4
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd90      	pop	{r4, r7, pc}

08004e10 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689c      	ldr	r4, [r3, #8]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2110      	movs	r1, #16
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	47a0      	blx	r4
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd90      	pop	{r4, r7, pc}

08004e2e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004e2e:	b590      	push	{r4, r7, lr}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695c      	ldr	r4, [r3, #20]
 8004e42:	78ba      	ldrb	r2, [r7, #2]
 8004e44:	78f9      	ldrb	r1, [r7, #3]
 8004e46:	2300      	movs	r3, #0
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	47a0      	blx	r4
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}

08004e54 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	72fb      	strb	r3, [r7, #11]
 8004e62:	4613      	mov	r3, r2
 8004e64:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <u8x8_SetupDefaults+0x58>)
 8004e86:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <u8x8_SetupDefaults+0x58>)
 8004e8c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <u8x8_SetupDefaults+0x58>)
 8004e92:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <u8x8_SetupDefaults+0x58>)
 8004e98:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	22ff      	movs	r2, #255	; 0xff
 8004eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	08004e55 	.word	0x08004e55

08004ed0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ffc8 	bl	8004e74 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff ff58 	bl	8004db2 <u8x8_SetupMemory>
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <__errno>:
 8004f0c:	4b01      	ldr	r3, [pc, #4]	; (8004f14 <__errno+0x8>)
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000030 	.word	0x20000030

08004f18 <__libc_init_array>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4d0d      	ldr	r5, [pc, #52]	; (8004f50 <__libc_init_array+0x38>)
 8004f1c:	4c0d      	ldr	r4, [pc, #52]	; (8004f54 <__libc_init_array+0x3c>)
 8004f1e:	1b64      	subs	r4, r4, r5
 8004f20:	10a4      	asrs	r4, r4, #2
 8004f22:	2600      	movs	r6, #0
 8004f24:	42a6      	cmp	r6, r4
 8004f26:	d109      	bne.n	8004f3c <__libc_init_array+0x24>
 8004f28:	4d0b      	ldr	r5, [pc, #44]	; (8004f58 <__libc_init_array+0x40>)
 8004f2a:	4c0c      	ldr	r4, [pc, #48]	; (8004f5c <__libc_init_array+0x44>)
 8004f2c:	f000 fc8e 	bl	800584c <_init>
 8004f30:	1b64      	subs	r4, r4, r5
 8004f32:	10a4      	asrs	r4, r4, #2
 8004f34:	2600      	movs	r6, #0
 8004f36:	42a6      	cmp	r6, r4
 8004f38:	d105      	bne.n	8004f46 <__libc_init_array+0x2e>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f40:	4798      	blx	r3
 8004f42:	3601      	adds	r6, #1
 8004f44:	e7ee      	b.n	8004f24 <__libc_init_array+0xc>
 8004f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4a:	4798      	blx	r3
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	e7f2      	b.n	8004f36 <__libc_init_array+0x1e>
 8004f50:	08005d18 	.word	0x08005d18
 8004f54:	08005d18 	.word	0x08005d18
 8004f58:	08005d18 	.word	0x08005d18
 8004f5c:	08005d1c 	.word	0x08005d1c

08004f60 <memset>:
 8004f60:	4402      	add	r2, r0
 8004f62:	4603      	mov	r3, r0
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d100      	bne.n	8004f6a <memset+0xa>
 8004f68:	4770      	bx	lr
 8004f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6e:	e7f9      	b.n	8004f64 <memset+0x4>

08004f70 <siprintf>:
 8004f70:	b40e      	push	{r1, r2, r3}
 8004f72:	b500      	push	{lr}
 8004f74:	b09c      	sub	sp, #112	; 0x70
 8004f76:	ab1d      	add	r3, sp, #116	; 0x74
 8004f78:	9002      	str	r0, [sp, #8]
 8004f7a:	9006      	str	r0, [sp, #24]
 8004f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f80:	4809      	ldr	r0, [pc, #36]	; (8004fa8 <siprintf+0x38>)
 8004f82:	9107      	str	r1, [sp, #28]
 8004f84:	9104      	str	r1, [sp, #16]
 8004f86:	4909      	ldr	r1, [pc, #36]	; (8004fac <siprintf+0x3c>)
 8004f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f8c:	9105      	str	r1, [sp, #20]
 8004f8e:	6800      	ldr	r0, [r0, #0]
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	a902      	add	r1, sp, #8
 8004f94:	f000 f8fe 	bl	8005194 <_svfiprintf_r>
 8004f98:	9b02      	ldr	r3, [sp, #8]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	b01c      	add	sp, #112	; 0x70
 8004fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fa4:	b003      	add	sp, #12
 8004fa6:	4770      	bx	lr
 8004fa8:	20000030 	.word	0x20000030
 8004fac:	ffff0208 	.word	0xffff0208

08004fb0 <__retarget_lock_acquire_recursive>:
 8004fb0:	4770      	bx	lr

08004fb2 <__retarget_lock_release_recursive>:
 8004fb2:	4770      	bx	lr

08004fb4 <sbrk_aligned>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4e0e      	ldr	r6, [pc, #56]	; (8004ff0 <sbrk_aligned+0x3c>)
 8004fb8:	460c      	mov	r4, r1
 8004fba:	6831      	ldr	r1, [r6, #0]
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	b911      	cbnz	r1, 8004fc6 <sbrk_aligned+0x12>
 8004fc0:	f000 fb7c 	bl	80056bc <_sbrk_r>
 8004fc4:	6030      	str	r0, [r6, #0]
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f000 fb77 	bl	80056bc <_sbrk_r>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	d00a      	beq.n	8004fe8 <sbrk_aligned+0x34>
 8004fd2:	1cc4      	adds	r4, r0, #3
 8004fd4:	f024 0403 	bic.w	r4, r4, #3
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d007      	beq.n	8004fec <sbrk_aligned+0x38>
 8004fdc:	1a21      	subs	r1, r4, r0
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 fb6c 	bl	80056bc <_sbrk_r>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d101      	bne.n	8004fec <sbrk_aligned+0x38>
 8004fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8004fec:	4620      	mov	r0, r4
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	200006c8 	.word	0x200006c8

08004ff4 <_malloc_r>:
 8004ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff8:	1ccd      	adds	r5, r1, #3
 8004ffa:	f025 0503 	bic.w	r5, r5, #3
 8004ffe:	3508      	adds	r5, #8
 8005000:	2d0c      	cmp	r5, #12
 8005002:	bf38      	it	cc
 8005004:	250c      	movcc	r5, #12
 8005006:	2d00      	cmp	r5, #0
 8005008:	4607      	mov	r7, r0
 800500a:	db01      	blt.n	8005010 <_malloc_r+0x1c>
 800500c:	42a9      	cmp	r1, r5
 800500e:	d905      	bls.n	800501c <_malloc_r+0x28>
 8005010:	230c      	movs	r3, #12
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	2600      	movs	r6, #0
 8005016:	4630      	mov	r0, r6
 8005018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800501c:	4e2e      	ldr	r6, [pc, #184]	; (80050d8 <_malloc_r+0xe4>)
 800501e:	f000 fb85 	bl	800572c <__malloc_lock>
 8005022:	6833      	ldr	r3, [r6, #0]
 8005024:	461c      	mov	r4, r3
 8005026:	bb34      	cbnz	r4, 8005076 <_malloc_r+0x82>
 8005028:	4629      	mov	r1, r5
 800502a:	4638      	mov	r0, r7
 800502c:	f7ff ffc2 	bl	8004fb4 <sbrk_aligned>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	4604      	mov	r4, r0
 8005034:	d14d      	bne.n	80050d2 <_malloc_r+0xde>
 8005036:	6834      	ldr	r4, [r6, #0]
 8005038:	4626      	mov	r6, r4
 800503a:	2e00      	cmp	r6, #0
 800503c:	d140      	bne.n	80050c0 <_malloc_r+0xcc>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	4631      	mov	r1, r6
 8005042:	4638      	mov	r0, r7
 8005044:	eb04 0803 	add.w	r8, r4, r3
 8005048:	f000 fb38 	bl	80056bc <_sbrk_r>
 800504c:	4580      	cmp	r8, r0
 800504e:	d13a      	bne.n	80050c6 <_malloc_r+0xd2>
 8005050:	6821      	ldr	r1, [r4, #0]
 8005052:	3503      	adds	r5, #3
 8005054:	1a6d      	subs	r5, r5, r1
 8005056:	f025 0503 	bic.w	r5, r5, #3
 800505a:	3508      	adds	r5, #8
 800505c:	2d0c      	cmp	r5, #12
 800505e:	bf38      	it	cc
 8005060:	250c      	movcc	r5, #12
 8005062:	4629      	mov	r1, r5
 8005064:	4638      	mov	r0, r7
 8005066:	f7ff ffa5 	bl	8004fb4 <sbrk_aligned>
 800506a:	3001      	adds	r0, #1
 800506c:	d02b      	beq.n	80050c6 <_malloc_r+0xd2>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	442b      	add	r3, r5
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	e00e      	b.n	8005094 <_malloc_r+0xa0>
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	1b52      	subs	r2, r2, r5
 800507a:	d41e      	bmi.n	80050ba <_malloc_r+0xc6>
 800507c:	2a0b      	cmp	r2, #11
 800507e:	d916      	bls.n	80050ae <_malloc_r+0xba>
 8005080:	1961      	adds	r1, r4, r5
 8005082:	42a3      	cmp	r3, r4
 8005084:	6025      	str	r5, [r4, #0]
 8005086:	bf18      	it	ne
 8005088:	6059      	strne	r1, [r3, #4]
 800508a:	6863      	ldr	r3, [r4, #4]
 800508c:	bf08      	it	eq
 800508e:	6031      	streq	r1, [r6, #0]
 8005090:	5162      	str	r2, [r4, r5]
 8005092:	604b      	str	r3, [r1, #4]
 8005094:	4638      	mov	r0, r7
 8005096:	f104 060b 	add.w	r6, r4, #11
 800509a:	f000 fb4d 	bl	8005738 <__malloc_unlock>
 800509e:	f026 0607 	bic.w	r6, r6, #7
 80050a2:	1d23      	adds	r3, r4, #4
 80050a4:	1af2      	subs	r2, r6, r3
 80050a6:	d0b6      	beq.n	8005016 <_malloc_r+0x22>
 80050a8:	1b9b      	subs	r3, r3, r6
 80050aa:	50a3      	str	r3, [r4, r2]
 80050ac:	e7b3      	b.n	8005016 <_malloc_r+0x22>
 80050ae:	6862      	ldr	r2, [r4, #4]
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	bf0c      	ite	eq
 80050b4:	6032      	streq	r2, [r6, #0]
 80050b6:	605a      	strne	r2, [r3, #4]
 80050b8:	e7ec      	b.n	8005094 <_malloc_r+0xa0>
 80050ba:	4623      	mov	r3, r4
 80050bc:	6864      	ldr	r4, [r4, #4]
 80050be:	e7b2      	b.n	8005026 <_malloc_r+0x32>
 80050c0:	4634      	mov	r4, r6
 80050c2:	6876      	ldr	r6, [r6, #4]
 80050c4:	e7b9      	b.n	800503a <_malloc_r+0x46>
 80050c6:	230c      	movs	r3, #12
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4638      	mov	r0, r7
 80050cc:	f000 fb34 	bl	8005738 <__malloc_unlock>
 80050d0:	e7a1      	b.n	8005016 <_malloc_r+0x22>
 80050d2:	6025      	str	r5, [r4, #0]
 80050d4:	e7de      	b.n	8005094 <_malloc_r+0xa0>
 80050d6:	bf00      	nop
 80050d8:	200006c4 	.word	0x200006c4

080050dc <__ssputs_r>:
 80050dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	688e      	ldr	r6, [r1, #8]
 80050e2:	429e      	cmp	r6, r3
 80050e4:	4682      	mov	sl, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	4690      	mov	r8, r2
 80050ea:	461f      	mov	r7, r3
 80050ec:	d838      	bhi.n	8005160 <__ssputs_r+0x84>
 80050ee:	898a      	ldrh	r2, [r1, #12]
 80050f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050f4:	d032      	beq.n	800515c <__ssputs_r+0x80>
 80050f6:	6825      	ldr	r5, [r4, #0]
 80050f8:	6909      	ldr	r1, [r1, #16]
 80050fa:	eba5 0901 	sub.w	r9, r5, r1
 80050fe:	6965      	ldr	r5, [r4, #20]
 8005100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005108:	3301      	adds	r3, #1
 800510a:	444b      	add	r3, r9
 800510c:	106d      	asrs	r5, r5, #1
 800510e:	429d      	cmp	r5, r3
 8005110:	bf38      	it	cc
 8005112:	461d      	movcc	r5, r3
 8005114:	0553      	lsls	r3, r2, #21
 8005116:	d531      	bpl.n	800517c <__ssputs_r+0xa0>
 8005118:	4629      	mov	r1, r5
 800511a:	f7ff ff6b 	bl	8004ff4 <_malloc_r>
 800511e:	4606      	mov	r6, r0
 8005120:	b950      	cbnz	r0, 8005138 <__ssputs_r+0x5c>
 8005122:	230c      	movs	r3, #12
 8005124:	f8ca 3000 	str.w	r3, [sl]
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005138:	6921      	ldr	r1, [r4, #16]
 800513a:	464a      	mov	r2, r9
 800513c:	f000 face 	bl	80056dc <memcpy>
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	6126      	str	r6, [r4, #16]
 800514e:	6165      	str	r5, [r4, #20]
 8005150:	444e      	add	r6, r9
 8005152:	eba5 0509 	sub.w	r5, r5, r9
 8005156:	6026      	str	r6, [r4, #0]
 8005158:	60a5      	str	r5, [r4, #8]
 800515a:	463e      	mov	r6, r7
 800515c:	42be      	cmp	r6, r7
 800515e:	d900      	bls.n	8005162 <__ssputs_r+0x86>
 8005160:	463e      	mov	r6, r7
 8005162:	6820      	ldr	r0, [r4, #0]
 8005164:	4632      	mov	r2, r6
 8005166:	4641      	mov	r1, r8
 8005168:	f000 fac6 	bl	80056f8 <memmove>
 800516c:	68a3      	ldr	r3, [r4, #8]
 800516e:	1b9b      	subs	r3, r3, r6
 8005170:	60a3      	str	r3, [r4, #8]
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	4433      	add	r3, r6
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	2000      	movs	r0, #0
 800517a:	e7db      	b.n	8005134 <__ssputs_r+0x58>
 800517c:	462a      	mov	r2, r5
 800517e:	f000 fb2d 	bl	80057dc <_realloc_r>
 8005182:	4606      	mov	r6, r0
 8005184:	2800      	cmp	r0, #0
 8005186:	d1e1      	bne.n	800514c <__ssputs_r+0x70>
 8005188:	6921      	ldr	r1, [r4, #16]
 800518a:	4650      	mov	r0, sl
 800518c:	f000 fada 	bl	8005744 <_free_r>
 8005190:	e7c7      	b.n	8005122 <__ssputs_r+0x46>
	...

08005194 <_svfiprintf_r>:
 8005194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005198:	4698      	mov	r8, r3
 800519a:	898b      	ldrh	r3, [r1, #12]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	b09d      	sub	sp, #116	; 0x74
 80051a0:	4607      	mov	r7, r0
 80051a2:	460d      	mov	r5, r1
 80051a4:	4614      	mov	r4, r2
 80051a6:	d50e      	bpl.n	80051c6 <_svfiprintf_r+0x32>
 80051a8:	690b      	ldr	r3, [r1, #16]
 80051aa:	b963      	cbnz	r3, 80051c6 <_svfiprintf_r+0x32>
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	f7ff ff21 	bl	8004ff4 <_malloc_r>
 80051b2:	6028      	str	r0, [r5, #0]
 80051b4:	6128      	str	r0, [r5, #16]
 80051b6:	b920      	cbnz	r0, 80051c2 <_svfiprintf_r+0x2e>
 80051b8:	230c      	movs	r3, #12
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	e0d1      	b.n	8005366 <_svfiprintf_r+0x1d2>
 80051c2:	2340      	movs	r3, #64	; 0x40
 80051c4:	616b      	str	r3, [r5, #20]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ca:	2320      	movs	r3, #32
 80051cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051d4:	2330      	movs	r3, #48	; 0x30
 80051d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005380 <_svfiprintf_r+0x1ec>
 80051da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051de:	f04f 0901 	mov.w	r9, #1
 80051e2:	4623      	mov	r3, r4
 80051e4:	469a      	mov	sl, r3
 80051e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ea:	b10a      	cbz	r2, 80051f0 <_svfiprintf_r+0x5c>
 80051ec:	2a25      	cmp	r2, #37	; 0x25
 80051ee:	d1f9      	bne.n	80051e4 <_svfiprintf_r+0x50>
 80051f0:	ebba 0b04 	subs.w	fp, sl, r4
 80051f4:	d00b      	beq.n	800520e <_svfiprintf_r+0x7a>
 80051f6:	465b      	mov	r3, fp
 80051f8:	4622      	mov	r2, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	4638      	mov	r0, r7
 80051fe:	f7ff ff6d 	bl	80050dc <__ssputs_r>
 8005202:	3001      	adds	r0, #1
 8005204:	f000 80aa 	beq.w	800535c <_svfiprintf_r+0x1c8>
 8005208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800520a:	445a      	add	r2, fp
 800520c:	9209      	str	r2, [sp, #36]	; 0x24
 800520e:	f89a 3000 	ldrb.w	r3, [sl]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80a2 	beq.w	800535c <_svfiprintf_r+0x1c8>
 8005218:	2300      	movs	r3, #0
 800521a:	f04f 32ff 	mov.w	r2, #4294967295
 800521e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005222:	f10a 0a01 	add.w	sl, sl, #1
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	9307      	str	r3, [sp, #28]
 800522a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800522e:	931a      	str	r3, [sp, #104]	; 0x68
 8005230:	4654      	mov	r4, sl
 8005232:	2205      	movs	r2, #5
 8005234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005238:	4851      	ldr	r0, [pc, #324]	; (8005380 <_svfiprintf_r+0x1ec>)
 800523a:	f7fa ffd9 	bl	80001f0 <memchr>
 800523e:	9a04      	ldr	r2, [sp, #16]
 8005240:	b9d8      	cbnz	r0, 800527a <_svfiprintf_r+0xe6>
 8005242:	06d0      	lsls	r0, r2, #27
 8005244:	bf44      	itt	mi
 8005246:	2320      	movmi	r3, #32
 8005248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524c:	0711      	lsls	r1, r2, #28
 800524e:	bf44      	itt	mi
 8005250:	232b      	movmi	r3, #43	; 0x2b
 8005252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005256:	f89a 3000 	ldrb.w	r3, [sl]
 800525a:	2b2a      	cmp	r3, #42	; 0x2a
 800525c:	d015      	beq.n	800528a <_svfiprintf_r+0xf6>
 800525e:	9a07      	ldr	r2, [sp, #28]
 8005260:	4654      	mov	r4, sl
 8005262:	2000      	movs	r0, #0
 8005264:	f04f 0c0a 	mov.w	ip, #10
 8005268:	4621      	mov	r1, r4
 800526a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800526e:	3b30      	subs	r3, #48	; 0x30
 8005270:	2b09      	cmp	r3, #9
 8005272:	d94e      	bls.n	8005312 <_svfiprintf_r+0x17e>
 8005274:	b1b0      	cbz	r0, 80052a4 <_svfiprintf_r+0x110>
 8005276:	9207      	str	r2, [sp, #28]
 8005278:	e014      	b.n	80052a4 <_svfiprintf_r+0x110>
 800527a:	eba0 0308 	sub.w	r3, r0, r8
 800527e:	fa09 f303 	lsl.w	r3, r9, r3
 8005282:	4313      	orrs	r3, r2
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	46a2      	mov	sl, r4
 8005288:	e7d2      	b.n	8005230 <_svfiprintf_r+0x9c>
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	1d19      	adds	r1, r3, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	9103      	str	r1, [sp, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfbb      	ittet	lt
 8005296:	425b      	neglt	r3, r3
 8005298:	f042 0202 	orrlt.w	r2, r2, #2
 800529c:	9307      	strge	r3, [sp, #28]
 800529e:	9307      	strlt	r3, [sp, #28]
 80052a0:	bfb8      	it	lt
 80052a2:	9204      	strlt	r2, [sp, #16]
 80052a4:	7823      	ldrb	r3, [r4, #0]
 80052a6:	2b2e      	cmp	r3, #46	; 0x2e
 80052a8:	d10c      	bne.n	80052c4 <_svfiprintf_r+0x130>
 80052aa:	7863      	ldrb	r3, [r4, #1]
 80052ac:	2b2a      	cmp	r3, #42	; 0x2a
 80052ae:	d135      	bne.n	800531c <_svfiprintf_r+0x188>
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	1d1a      	adds	r2, r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	9203      	str	r2, [sp, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bfb8      	it	lt
 80052bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80052c0:	3402      	adds	r4, #2
 80052c2:	9305      	str	r3, [sp, #20]
 80052c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005390 <_svfiprintf_r+0x1fc>
 80052c8:	7821      	ldrb	r1, [r4, #0]
 80052ca:	2203      	movs	r2, #3
 80052cc:	4650      	mov	r0, sl
 80052ce:	f7fa ff8f 	bl	80001f0 <memchr>
 80052d2:	b140      	cbz	r0, 80052e6 <_svfiprintf_r+0x152>
 80052d4:	2340      	movs	r3, #64	; 0x40
 80052d6:	eba0 000a 	sub.w	r0, r0, sl
 80052da:	fa03 f000 	lsl.w	r0, r3, r0
 80052de:	9b04      	ldr	r3, [sp, #16]
 80052e0:	4303      	orrs	r3, r0
 80052e2:	3401      	adds	r4, #1
 80052e4:	9304      	str	r3, [sp, #16]
 80052e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ea:	4826      	ldr	r0, [pc, #152]	; (8005384 <_svfiprintf_r+0x1f0>)
 80052ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052f0:	2206      	movs	r2, #6
 80052f2:	f7fa ff7d 	bl	80001f0 <memchr>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d038      	beq.n	800536c <_svfiprintf_r+0x1d8>
 80052fa:	4b23      	ldr	r3, [pc, #140]	; (8005388 <_svfiprintf_r+0x1f4>)
 80052fc:	bb1b      	cbnz	r3, 8005346 <_svfiprintf_r+0x1b2>
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	3307      	adds	r3, #7
 8005302:	f023 0307 	bic.w	r3, r3, #7
 8005306:	3308      	adds	r3, #8
 8005308:	9303      	str	r3, [sp, #12]
 800530a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530c:	4433      	add	r3, r6
 800530e:	9309      	str	r3, [sp, #36]	; 0x24
 8005310:	e767      	b.n	80051e2 <_svfiprintf_r+0x4e>
 8005312:	fb0c 3202 	mla	r2, ip, r2, r3
 8005316:	460c      	mov	r4, r1
 8005318:	2001      	movs	r0, #1
 800531a:	e7a5      	b.n	8005268 <_svfiprintf_r+0xd4>
 800531c:	2300      	movs	r3, #0
 800531e:	3401      	adds	r4, #1
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	4619      	mov	r1, r3
 8005324:	f04f 0c0a 	mov.w	ip, #10
 8005328:	4620      	mov	r0, r4
 800532a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800532e:	3a30      	subs	r2, #48	; 0x30
 8005330:	2a09      	cmp	r2, #9
 8005332:	d903      	bls.n	800533c <_svfiprintf_r+0x1a8>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0c5      	beq.n	80052c4 <_svfiprintf_r+0x130>
 8005338:	9105      	str	r1, [sp, #20]
 800533a:	e7c3      	b.n	80052c4 <_svfiprintf_r+0x130>
 800533c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005340:	4604      	mov	r4, r0
 8005342:	2301      	movs	r3, #1
 8005344:	e7f0      	b.n	8005328 <_svfiprintf_r+0x194>
 8005346:	ab03      	add	r3, sp, #12
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	462a      	mov	r2, r5
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <_svfiprintf_r+0x1f8>)
 800534e:	a904      	add	r1, sp, #16
 8005350:	4638      	mov	r0, r7
 8005352:	f3af 8000 	nop.w
 8005356:	1c42      	adds	r2, r0, #1
 8005358:	4606      	mov	r6, r0
 800535a:	d1d6      	bne.n	800530a <_svfiprintf_r+0x176>
 800535c:	89ab      	ldrh	r3, [r5, #12]
 800535e:	065b      	lsls	r3, r3, #25
 8005360:	f53f af2c 	bmi.w	80051bc <_svfiprintf_r+0x28>
 8005364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005366:	b01d      	add	sp, #116	; 0x74
 8005368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536c:	ab03      	add	r3, sp, #12
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	462a      	mov	r2, r5
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <_svfiprintf_r+0x1f8>)
 8005374:	a904      	add	r1, sp, #16
 8005376:	4638      	mov	r0, r7
 8005378:	f000 f87a 	bl	8005470 <_printf_i>
 800537c:	e7eb      	b.n	8005356 <_svfiprintf_r+0x1c2>
 800537e:	bf00      	nop
 8005380:	08005cdc 	.word	0x08005cdc
 8005384:	08005ce6 	.word	0x08005ce6
 8005388:	00000000 	.word	0x00000000
 800538c:	080050dd 	.word	0x080050dd
 8005390:	08005ce2 	.word	0x08005ce2

08005394 <_printf_common>:
 8005394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	4616      	mov	r6, r2
 800539a:	4699      	mov	r9, r3
 800539c:	688a      	ldr	r2, [r1, #8]
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a4:	4293      	cmp	r3, r2
 80053a6:	bfb8      	it	lt
 80053a8:	4613      	movlt	r3, r2
 80053aa:	6033      	str	r3, [r6, #0]
 80053ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b0:	4607      	mov	r7, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	b10a      	cbz	r2, 80053ba <_printf_common+0x26>
 80053b6:	3301      	adds	r3, #1
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	0699      	lsls	r1, r3, #26
 80053be:	bf42      	ittt	mi
 80053c0:	6833      	ldrmi	r3, [r6, #0]
 80053c2:	3302      	addmi	r3, #2
 80053c4:	6033      	strmi	r3, [r6, #0]
 80053c6:	6825      	ldr	r5, [r4, #0]
 80053c8:	f015 0506 	ands.w	r5, r5, #6
 80053cc:	d106      	bne.n	80053dc <_printf_common+0x48>
 80053ce:	f104 0a19 	add.w	sl, r4, #25
 80053d2:	68e3      	ldr	r3, [r4, #12]
 80053d4:	6832      	ldr	r2, [r6, #0]
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	42ab      	cmp	r3, r5
 80053da:	dc26      	bgt.n	800542a <_printf_common+0x96>
 80053dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e0:	1e13      	subs	r3, r2, #0
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	bf18      	it	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	0692      	lsls	r2, r2, #26
 80053ea:	d42b      	bmi.n	8005444 <_printf_common+0xb0>
 80053ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f0:	4649      	mov	r1, r9
 80053f2:	4638      	mov	r0, r7
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d01e      	beq.n	8005438 <_printf_common+0xa4>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	68e5      	ldr	r5, [r4, #12]
 80053fe:	6832      	ldr	r2, [r6, #0]
 8005400:	f003 0306 	and.w	r3, r3, #6
 8005404:	2b04      	cmp	r3, #4
 8005406:	bf08      	it	eq
 8005408:	1aad      	subeq	r5, r5, r2
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	bf0c      	ite	eq
 8005410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005414:	2500      	movne	r5, #0
 8005416:	4293      	cmp	r3, r2
 8005418:	bfc4      	itt	gt
 800541a:	1a9b      	subgt	r3, r3, r2
 800541c:	18ed      	addgt	r5, r5, r3
 800541e:	2600      	movs	r6, #0
 8005420:	341a      	adds	r4, #26
 8005422:	42b5      	cmp	r5, r6
 8005424:	d11a      	bne.n	800545c <_printf_common+0xc8>
 8005426:	2000      	movs	r0, #0
 8005428:	e008      	b.n	800543c <_printf_common+0xa8>
 800542a:	2301      	movs	r3, #1
 800542c:	4652      	mov	r2, sl
 800542e:	4649      	mov	r1, r9
 8005430:	4638      	mov	r0, r7
 8005432:	47c0      	blx	r8
 8005434:	3001      	adds	r0, #1
 8005436:	d103      	bne.n	8005440 <_printf_common+0xac>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005440:	3501      	adds	r5, #1
 8005442:	e7c6      	b.n	80053d2 <_printf_common+0x3e>
 8005444:	18e1      	adds	r1, r4, r3
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	2030      	movs	r0, #48	; 0x30
 800544a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800544e:	4422      	add	r2, r4
 8005450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005458:	3302      	adds	r3, #2
 800545a:	e7c7      	b.n	80053ec <_printf_common+0x58>
 800545c:	2301      	movs	r3, #1
 800545e:	4622      	mov	r2, r4
 8005460:	4649      	mov	r1, r9
 8005462:	4638      	mov	r0, r7
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d0e6      	beq.n	8005438 <_printf_common+0xa4>
 800546a:	3601      	adds	r6, #1
 800546c:	e7d9      	b.n	8005422 <_printf_common+0x8e>
	...

08005470 <_printf_i>:
 8005470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	7e0f      	ldrb	r7, [r1, #24]
 8005476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005478:	2f78      	cmp	r7, #120	; 0x78
 800547a:	4691      	mov	r9, r2
 800547c:	4680      	mov	r8, r0
 800547e:	460c      	mov	r4, r1
 8005480:	469a      	mov	sl, r3
 8005482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005486:	d807      	bhi.n	8005498 <_printf_i+0x28>
 8005488:	2f62      	cmp	r7, #98	; 0x62
 800548a:	d80a      	bhi.n	80054a2 <_printf_i+0x32>
 800548c:	2f00      	cmp	r7, #0
 800548e:	f000 80d8 	beq.w	8005642 <_printf_i+0x1d2>
 8005492:	2f58      	cmp	r7, #88	; 0x58
 8005494:	f000 80a3 	beq.w	80055de <_printf_i+0x16e>
 8005498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800549c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a0:	e03a      	b.n	8005518 <_printf_i+0xa8>
 80054a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054a6:	2b15      	cmp	r3, #21
 80054a8:	d8f6      	bhi.n	8005498 <_printf_i+0x28>
 80054aa:	a101      	add	r1, pc, #4	; (adr r1, 80054b0 <_printf_i+0x40>)
 80054ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b0:	08005509 	.word	0x08005509
 80054b4:	0800551d 	.word	0x0800551d
 80054b8:	08005499 	.word	0x08005499
 80054bc:	08005499 	.word	0x08005499
 80054c0:	08005499 	.word	0x08005499
 80054c4:	08005499 	.word	0x08005499
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005499 	.word	0x08005499
 80054d0:	08005499 	.word	0x08005499
 80054d4:	08005499 	.word	0x08005499
 80054d8:	08005499 	.word	0x08005499
 80054dc:	08005629 	.word	0x08005629
 80054e0:	0800554d 	.word	0x0800554d
 80054e4:	0800560b 	.word	0x0800560b
 80054e8:	08005499 	.word	0x08005499
 80054ec:	08005499 	.word	0x08005499
 80054f0:	0800564b 	.word	0x0800564b
 80054f4:	08005499 	.word	0x08005499
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	08005499 	.word	0x08005499
 8005500:	08005499 	.word	0x08005499
 8005504:	08005613 	.word	0x08005613
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	602a      	str	r2, [r5, #0]
 8005510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005518:	2301      	movs	r3, #1
 800551a:	e0a3      	b.n	8005664 <_printf_i+0x1f4>
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	6829      	ldr	r1, [r5, #0]
 8005520:	0606      	lsls	r6, r0, #24
 8005522:	f101 0304 	add.w	r3, r1, #4
 8005526:	d50a      	bpl.n	800553e <_printf_i+0xce>
 8005528:	680e      	ldr	r6, [r1, #0]
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	2e00      	cmp	r6, #0
 800552e:	da03      	bge.n	8005538 <_printf_i+0xc8>
 8005530:	232d      	movs	r3, #45	; 0x2d
 8005532:	4276      	negs	r6, r6
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	485e      	ldr	r0, [pc, #376]	; (80056b4 <_printf_i+0x244>)
 800553a:	230a      	movs	r3, #10
 800553c:	e019      	b.n	8005572 <_printf_i+0x102>
 800553e:	680e      	ldr	r6, [r1, #0]
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005546:	bf18      	it	ne
 8005548:	b236      	sxthne	r6, r6
 800554a:	e7ef      	b.n	800552c <_printf_i+0xbc>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	1d19      	adds	r1, r3, #4
 8005552:	6029      	str	r1, [r5, #0]
 8005554:	0601      	lsls	r1, r0, #24
 8005556:	d501      	bpl.n	800555c <_printf_i+0xec>
 8005558:	681e      	ldr	r6, [r3, #0]
 800555a:	e002      	b.n	8005562 <_printf_i+0xf2>
 800555c:	0646      	lsls	r6, r0, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0xe8>
 8005560:	881e      	ldrh	r6, [r3, #0]
 8005562:	4854      	ldr	r0, [pc, #336]	; (80056b4 <_printf_i+0x244>)
 8005564:	2f6f      	cmp	r7, #111	; 0x6f
 8005566:	bf0c      	ite	eq
 8005568:	2308      	moveq	r3, #8
 800556a:	230a      	movne	r3, #10
 800556c:	2100      	movs	r1, #0
 800556e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005572:	6865      	ldr	r5, [r4, #4]
 8005574:	60a5      	str	r5, [r4, #8]
 8005576:	2d00      	cmp	r5, #0
 8005578:	bfa2      	ittt	ge
 800557a:	6821      	ldrge	r1, [r4, #0]
 800557c:	f021 0104 	bicge.w	r1, r1, #4
 8005580:	6021      	strge	r1, [r4, #0]
 8005582:	b90e      	cbnz	r6, 8005588 <_printf_i+0x118>
 8005584:	2d00      	cmp	r5, #0
 8005586:	d04d      	beq.n	8005624 <_printf_i+0x1b4>
 8005588:	4615      	mov	r5, r2
 800558a:	fbb6 f1f3 	udiv	r1, r6, r3
 800558e:	fb03 6711 	mls	r7, r3, r1, r6
 8005592:	5dc7      	ldrb	r7, [r0, r7]
 8005594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005598:	4637      	mov	r7, r6
 800559a:	42bb      	cmp	r3, r7
 800559c:	460e      	mov	r6, r1
 800559e:	d9f4      	bls.n	800558a <_printf_i+0x11a>
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d10b      	bne.n	80055bc <_printf_i+0x14c>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07de      	lsls	r6, r3, #31
 80055a8:	d508      	bpl.n	80055bc <_printf_i+0x14c>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	6861      	ldr	r1, [r4, #4]
 80055ae:	4299      	cmp	r1, r3
 80055b0:	bfde      	ittt	le
 80055b2:	2330      	movle	r3, #48	; 0x30
 80055b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055bc:	1b52      	subs	r2, r2, r5
 80055be:	6122      	str	r2, [r4, #16]
 80055c0:	f8cd a000 	str.w	sl, [sp]
 80055c4:	464b      	mov	r3, r9
 80055c6:	aa03      	add	r2, sp, #12
 80055c8:	4621      	mov	r1, r4
 80055ca:	4640      	mov	r0, r8
 80055cc:	f7ff fee2 	bl	8005394 <_printf_common>
 80055d0:	3001      	adds	r0, #1
 80055d2:	d14c      	bne.n	800566e <_printf_i+0x1fe>
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	b004      	add	sp, #16
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	4835      	ldr	r0, [pc, #212]	; (80056b4 <_printf_i+0x244>)
 80055e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055e4:	6829      	ldr	r1, [r5, #0]
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80055ec:	6029      	str	r1, [r5, #0]
 80055ee:	061d      	lsls	r5, r3, #24
 80055f0:	d514      	bpl.n	800561c <_printf_i+0x1ac>
 80055f2:	07df      	lsls	r7, r3, #31
 80055f4:	bf44      	itt	mi
 80055f6:	f043 0320 	orrmi.w	r3, r3, #32
 80055fa:	6023      	strmi	r3, [r4, #0]
 80055fc:	b91e      	cbnz	r6, 8005606 <_printf_i+0x196>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f023 0320 	bic.w	r3, r3, #32
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	2310      	movs	r3, #16
 8005608:	e7b0      	b.n	800556c <_printf_i+0xfc>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	f043 0320 	orr.w	r3, r3, #32
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	2378      	movs	r3, #120	; 0x78
 8005614:	4828      	ldr	r0, [pc, #160]	; (80056b8 <_printf_i+0x248>)
 8005616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800561a:	e7e3      	b.n	80055e4 <_printf_i+0x174>
 800561c:	0659      	lsls	r1, r3, #25
 800561e:	bf48      	it	mi
 8005620:	b2b6      	uxthmi	r6, r6
 8005622:	e7e6      	b.n	80055f2 <_printf_i+0x182>
 8005624:	4615      	mov	r5, r2
 8005626:	e7bb      	b.n	80055a0 <_printf_i+0x130>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	6826      	ldr	r6, [r4, #0]
 800562c:	6961      	ldr	r1, [r4, #20]
 800562e:	1d18      	adds	r0, r3, #4
 8005630:	6028      	str	r0, [r5, #0]
 8005632:	0635      	lsls	r5, r6, #24
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	d501      	bpl.n	800563c <_printf_i+0x1cc>
 8005638:	6019      	str	r1, [r3, #0]
 800563a:	e002      	b.n	8005642 <_printf_i+0x1d2>
 800563c:	0670      	lsls	r0, r6, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0x1c8>
 8005640:	8019      	strh	r1, [r3, #0]
 8005642:	2300      	movs	r3, #0
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	4615      	mov	r5, r2
 8005648:	e7ba      	b.n	80055c0 <_printf_i+0x150>
 800564a:	682b      	ldr	r3, [r5, #0]
 800564c:	1d1a      	adds	r2, r3, #4
 800564e:	602a      	str	r2, [r5, #0]
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	6862      	ldr	r2, [r4, #4]
 8005654:	2100      	movs	r1, #0
 8005656:	4628      	mov	r0, r5
 8005658:	f7fa fdca 	bl	80001f0 <memchr>
 800565c:	b108      	cbz	r0, 8005662 <_printf_i+0x1f2>
 800565e:	1b40      	subs	r0, r0, r5
 8005660:	6060      	str	r0, [r4, #4]
 8005662:	6863      	ldr	r3, [r4, #4]
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	2300      	movs	r3, #0
 8005668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566c:	e7a8      	b.n	80055c0 <_printf_i+0x150>
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	462a      	mov	r2, r5
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	47d0      	blx	sl
 8005678:	3001      	adds	r0, #1
 800567a:	d0ab      	beq.n	80055d4 <_printf_i+0x164>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	079b      	lsls	r3, r3, #30
 8005680:	d413      	bmi.n	80056aa <_printf_i+0x23a>
 8005682:	68e0      	ldr	r0, [r4, #12]
 8005684:	9b03      	ldr	r3, [sp, #12]
 8005686:	4298      	cmp	r0, r3
 8005688:	bfb8      	it	lt
 800568a:	4618      	movlt	r0, r3
 800568c:	e7a4      	b.n	80055d8 <_printf_i+0x168>
 800568e:	2301      	movs	r3, #1
 8005690:	4632      	mov	r2, r6
 8005692:	4649      	mov	r1, r9
 8005694:	4640      	mov	r0, r8
 8005696:	47d0      	blx	sl
 8005698:	3001      	adds	r0, #1
 800569a:	d09b      	beq.n	80055d4 <_printf_i+0x164>
 800569c:	3501      	adds	r5, #1
 800569e:	68e3      	ldr	r3, [r4, #12]
 80056a0:	9903      	ldr	r1, [sp, #12]
 80056a2:	1a5b      	subs	r3, r3, r1
 80056a4:	42ab      	cmp	r3, r5
 80056a6:	dcf2      	bgt.n	800568e <_printf_i+0x21e>
 80056a8:	e7eb      	b.n	8005682 <_printf_i+0x212>
 80056aa:	2500      	movs	r5, #0
 80056ac:	f104 0619 	add.w	r6, r4, #25
 80056b0:	e7f5      	b.n	800569e <_printf_i+0x22e>
 80056b2:	bf00      	nop
 80056b4:	08005ced 	.word	0x08005ced
 80056b8:	08005cfe 	.word	0x08005cfe

080056bc <_sbrk_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4d06      	ldr	r5, [pc, #24]	; (80056d8 <_sbrk_r+0x1c>)
 80056c0:	2300      	movs	r3, #0
 80056c2:	4604      	mov	r4, r0
 80056c4:	4608      	mov	r0, r1
 80056c6:	602b      	str	r3, [r5, #0]
 80056c8:	f7fb fc38 	bl	8000f3c <_sbrk>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_sbrk_r+0x1a>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_sbrk_r+0x1a>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	200006cc 	.word	0x200006cc

080056dc <memcpy>:
 80056dc:	440a      	add	r2, r1
 80056de:	4291      	cmp	r1, r2
 80056e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056e4:	d100      	bne.n	80056e8 <memcpy+0xc>
 80056e6:	4770      	bx	lr
 80056e8:	b510      	push	{r4, lr}
 80056ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056f2:	4291      	cmp	r1, r2
 80056f4:	d1f9      	bne.n	80056ea <memcpy+0xe>
 80056f6:	bd10      	pop	{r4, pc}

080056f8 <memmove>:
 80056f8:	4288      	cmp	r0, r1
 80056fa:	b510      	push	{r4, lr}
 80056fc:	eb01 0402 	add.w	r4, r1, r2
 8005700:	d902      	bls.n	8005708 <memmove+0x10>
 8005702:	4284      	cmp	r4, r0
 8005704:	4623      	mov	r3, r4
 8005706:	d807      	bhi.n	8005718 <memmove+0x20>
 8005708:	1e43      	subs	r3, r0, #1
 800570a:	42a1      	cmp	r1, r4
 800570c:	d008      	beq.n	8005720 <memmove+0x28>
 800570e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005716:	e7f8      	b.n	800570a <memmove+0x12>
 8005718:	4402      	add	r2, r0
 800571a:	4601      	mov	r1, r0
 800571c:	428a      	cmp	r2, r1
 800571e:	d100      	bne.n	8005722 <memmove+0x2a>
 8005720:	bd10      	pop	{r4, pc}
 8005722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800572a:	e7f7      	b.n	800571c <memmove+0x24>

0800572c <__malloc_lock>:
 800572c:	4801      	ldr	r0, [pc, #4]	; (8005734 <__malloc_lock+0x8>)
 800572e:	f7ff bc3f 	b.w	8004fb0 <__retarget_lock_acquire_recursive>
 8005732:	bf00      	nop
 8005734:	200006c0 	.word	0x200006c0

08005738 <__malloc_unlock>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__malloc_unlock+0x8>)
 800573a:	f7ff bc3a 	b.w	8004fb2 <__retarget_lock_release_recursive>
 800573e:	bf00      	nop
 8005740:	200006c0 	.word	0x200006c0

08005744 <_free_r>:
 8005744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005746:	2900      	cmp	r1, #0
 8005748:	d044      	beq.n	80057d4 <_free_r+0x90>
 800574a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800574e:	9001      	str	r0, [sp, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f1a1 0404 	sub.w	r4, r1, #4
 8005756:	bfb8      	it	lt
 8005758:	18e4      	addlt	r4, r4, r3
 800575a:	f7ff ffe7 	bl	800572c <__malloc_lock>
 800575e:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <_free_r+0x94>)
 8005760:	9801      	ldr	r0, [sp, #4]
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	b933      	cbnz	r3, 8005774 <_free_r+0x30>
 8005766:	6063      	str	r3, [r4, #4]
 8005768:	6014      	str	r4, [r2, #0]
 800576a:	b003      	add	sp, #12
 800576c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005770:	f7ff bfe2 	b.w	8005738 <__malloc_unlock>
 8005774:	42a3      	cmp	r3, r4
 8005776:	d908      	bls.n	800578a <_free_r+0x46>
 8005778:	6825      	ldr	r5, [r4, #0]
 800577a:	1961      	adds	r1, r4, r5
 800577c:	428b      	cmp	r3, r1
 800577e:	bf01      	itttt	eq
 8005780:	6819      	ldreq	r1, [r3, #0]
 8005782:	685b      	ldreq	r3, [r3, #4]
 8005784:	1949      	addeq	r1, r1, r5
 8005786:	6021      	streq	r1, [r4, #0]
 8005788:	e7ed      	b.n	8005766 <_free_r+0x22>
 800578a:	461a      	mov	r2, r3
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	b10b      	cbz	r3, 8005794 <_free_r+0x50>
 8005790:	42a3      	cmp	r3, r4
 8005792:	d9fa      	bls.n	800578a <_free_r+0x46>
 8005794:	6811      	ldr	r1, [r2, #0]
 8005796:	1855      	adds	r5, r2, r1
 8005798:	42a5      	cmp	r5, r4
 800579a:	d10b      	bne.n	80057b4 <_free_r+0x70>
 800579c:	6824      	ldr	r4, [r4, #0]
 800579e:	4421      	add	r1, r4
 80057a0:	1854      	adds	r4, r2, r1
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	6011      	str	r1, [r2, #0]
 80057a6:	d1e0      	bne.n	800576a <_free_r+0x26>
 80057a8:	681c      	ldr	r4, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	6053      	str	r3, [r2, #4]
 80057ae:	4421      	add	r1, r4
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	e7da      	b.n	800576a <_free_r+0x26>
 80057b4:	d902      	bls.n	80057bc <_free_r+0x78>
 80057b6:	230c      	movs	r3, #12
 80057b8:	6003      	str	r3, [r0, #0]
 80057ba:	e7d6      	b.n	800576a <_free_r+0x26>
 80057bc:	6825      	ldr	r5, [r4, #0]
 80057be:	1961      	adds	r1, r4, r5
 80057c0:	428b      	cmp	r3, r1
 80057c2:	bf04      	itt	eq
 80057c4:	6819      	ldreq	r1, [r3, #0]
 80057c6:	685b      	ldreq	r3, [r3, #4]
 80057c8:	6063      	str	r3, [r4, #4]
 80057ca:	bf04      	itt	eq
 80057cc:	1949      	addeq	r1, r1, r5
 80057ce:	6021      	streq	r1, [r4, #0]
 80057d0:	6054      	str	r4, [r2, #4]
 80057d2:	e7ca      	b.n	800576a <_free_r+0x26>
 80057d4:	b003      	add	sp, #12
 80057d6:	bd30      	pop	{r4, r5, pc}
 80057d8:	200006c4 	.word	0x200006c4

080057dc <_realloc_r>:
 80057dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e0:	4680      	mov	r8, r0
 80057e2:	4614      	mov	r4, r2
 80057e4:	460e      	mov	r6, r1
 80057e6:	b921      	cbnz	r1, 80057f2 <_realloc_r+0x16>
 80057e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ec:	4611      	mov	r1, r2
 80057ee:	f7ff bc01 	b.w	8004ff4 <_malloc_r>
 80057f2:	b92a      	cbnz	r2, 8005800 <_realloc_r+0x24>
 80057f4:	f7ff ffa6 	bl	8005744 <_free_r>
 80057f8:	4625      	mov	r5, r4
 80057fa:	4628      	mov	r0, r5
 80057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005800:	f000 f81b 	bl	800583a <_malloc_usable_size_r>
 8005804:	4284      	cmp	r4, r0
 8005806:	4607      	mov	r7, r0
 8005808:	d802      	bhi.n	8005810 <_realloc_r+0x34>
 800580a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800580e:	d812      	bhi.n	8005836 <_realloc_r+0x5a>
 8005810:	4621      	mov	r1, r4
 8005812:	4640      	mov	r0, r8
 8005814:	f7ff fbee 	bl	8004ff4 <_malloc_r>
 8005818:	4605      	mov	r5, r0
 800581a:	2800      	cmp	r0, #0
 800581c:	d0ed      	beq.n	80057fa <_realloc_r+0x1e>
 800581e:	42bc      	cmp	r4, r7
 8005820:	4622      	mov	r2, r4
 8005822:	4631      	mov	r1, r6
 8005824:	bf28      	it	cs
 8005826:	463a      	movcs	r2, r7
 8005828:	f7ff ff58 	bl	80056dc <memcpy>
 800582c:	4631      	mov	r1, r6
 800582e:	4640      	mov	r0, r8
 8005830:	f7ff ff88 	bl	8005744 <_free_r>
 8005834:	e7e1      	b.n	80057fa <_realloc_r+0x1e>
 8005836:	4635      	mov	r5, r6
 8005838:	e7df      	b.n	80057fa <_realloc_r+0x1e>

0800583a <_malloc_usable_size_r>:
 800583a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800583e:	1f18      	subs	r0, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	bfbc      	itt	lt
 8005844:	580b      	ldrlt	r3, [r1, r0]
 8005846:	18c0      	addlt	r0, r0, r3
 8005848:	4770      	bx	lr
	...

0800584c <_init>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr

08005858 <_fini>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr
