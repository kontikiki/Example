
InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008924  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008a38  08008a38  00018a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f24  08008f24  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008f24  08008f24  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f24  08008f24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f28  08008f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001e0  0800910c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800910c  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4b5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad8  00000000  00000000  0002c6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002e198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183d6  00000000  00000000  0002f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdc7  00000000  00000000  00047d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba00  00000000  00000000  00054aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e04ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004934  00000000  00000000  000e0540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a1c 	.word	0x08008a1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008a1c 	.word	0x08008a1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <HAL_TIM_IC_CaptureCallback>:

int isFirstCaptured = 0;


float uWidth = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7f1b      	ldrb	r3, [r3, #28]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d117      	bne.n	80010d4 <HAL_TIM_IC_CaptureCallback+0x40>
		if (isFirstCaptured == 0) {
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d107      	bne.n	80010bc <HAL_TIM_IC_CaptureCallback+0x28>
			pre_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f002 f98c 	bl	80033cc <HAL_TIM_ReadCapturedValue>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_TIM_IC_CaptureCallback+0x98>)
 80010b8:	6013      	str	r3, [r2, #0]
			TIM2->CNT=0;
			isFirstCaptured = 0;

		}
	}
}
 80010ba:	e030      	b.n	800111e <HAL_TIM_IC_CaptureCallback+0x8a>
		} else if (isFirstCaptured == 1) {
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d12c      	bne.n	800111e <HAL_TIM_IC_CaptureCallback+0x8a>
			now_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010c4:	2100      	movs	r1, #0
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f002 f980 	bl	80033cc <HAL_TIM_ReadCapturedValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80010d0:	6013      	str	r3, [r2, #0]
}
 80010d2:	e024      	b.n	800111e <HAL_TIM_IC_CaptureCallback+0x8a>
	} else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7f1b      	ldrb	r3, [r3, #28]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d120      	bne.n	800111e <HAL_TIM_IC_CaptureCallback+0x8a>
		if (isFirstCaptured == 0) {
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10a      	bne.n	80010fa <HAL_TIM_IC_CaptureCallback+0x66>
			pre_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80010e4:	2104      	movs	r1, #4
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f002 f970 	bl	80033cc <HAL_TIM_ReadCapturedValue>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80010f0:	6013      	str	r3, [r2, #0]
			isFirstCaptured = 1;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	e011      	b.n	800111e <HAL_TIM_IC_CaptureCallback+0x8a>
		} else if (isFirstCaptured == 1) {
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d10d      	bne.n	800111e <HAL_TIM_IC_CaptureCallback+0x8a>
			now_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001102:	2104      	movs	r1, #4
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f002 f961 	bl	80033cc <HAL_TIM_ReadCapturedValue>
 800110a:	4603      	mov	r3, r0
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800110e:	6013      	str	r3, [r2, #0]
			TIM2->CNT=0;
 8001110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	; 0x24
			isFirstCaptured = 0;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x94>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200002f0 	.word	0x200002f0
 800112c:	200002d4 	.word	0x200002d4
 8001130:	200002d8 	.word	0x200002d8
 8001134:	200002dc 	.word	0x200002dc
 8001138:	200002e0 	.word	0x200002e0

0800113c <__io_putchar>:

int __io_putchar(int ch) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8001144:	1d39      	adds	r1, r7, #4
 8001146:	2364      	movs	r3, #100	; 0x64
 8001148:	2201      	movs	r2, #1
 800114a:	4804      	ldr	r0, [pc, #16]	; (800115c <__io_putchar+0x20>)
 800114c:	f002 fe69 	bl	8003e22 <HAL_UART_Transmit>
	return ch;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000028c 	.word	0x2000028c

08001160 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001166:	f000 fc51 	bl	8001a0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800116a:	f000 f883 	bl	8001274 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800116e:	f000 fa0d 	bl	800158c <MX_GPIO_Init>
	MX_TIM1_Init();
 8001172:	f000 f8c5 	bl	8001300 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001176:	f000 f963 	bl	8001440 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800117a:	f000 f9dd 	bl	8001538 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	TIM1->CCR1 = 30;
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <main+0xe4>)
 8001180:	221e      	movs	r2, #30
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4830      	ldr	r0, [pc, #192]	; (8001248 <main+0xe8>)
 8001188:	f001 fbec 	bl	8002964 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	482f      	ldr	r0, [pc, #188]	; (800124c <main+0xec>)
 8001190:	f001 fce2 	bl	8002b58 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001194:	2104      	movs	r1, #4
 8001196:	482d      	ldr	r0, [pc, #180]	; (800124c <main+0xec>)
 8001198:	f001 fcde 	bl	8002b58 <HAL_TIM_IC_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		diff_frequency = now_IC_Val2 - pre_IC_Val2;
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <main+0xf0>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <main+0xf4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	4a2c      	ldr	r2, [pc, #176]	; (8001258 <main+0xf8>)
 80011a8:	6013      	str	r3, [r2, #0]

		float refClock = (float) TIMCLOCK / (float) PRESCALER;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <main+0xfc>)
 80011ac:	607b      	str	r3, [r7, #4]
		frequency = diff_frequency / refClock;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <main+0xf8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd8e 	bl	8000cd4 <__aeabi_ui2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fe95 	bl	8000eec <__aeabi_fdiv>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <main+0x100>)
 80011c8:	601a      	str	r2, [r3, #0]
		//printf("diff of frequency: %f \r\n", diff_frequency);

		if (now_IC_Val2 > now_IC_Val1) {
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <main+0xf0>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <main+0x104>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d907      	bls.n	80011e6 <main+0x86>
			diff_width = now_IC_Val2 - now_IC_Val1;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <main+0xf0>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <main+0x104>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <main+0x108>)
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e00f      	b.n	8001206 <main+0xa6>
		} else if (now_IC_Val2 < now_IC_Val1) {
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <main+0xf0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <main+0x104>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d209      	bcs.n	8001206 <main+0xa6>
			diff_width = diff_frequency - (now_IC_Val1 - now_IC_Val2);
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <main+0xf0>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <main+0x104>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <main+0xf8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4413      	add	r3, r2
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <main+0x108>)
 8001204:	6013      	str	r3, [r2, #0]
		}

		float mFactor = 1000000 / refClock;
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	4814      	ldr	r0, [pc, #80]	; (800125c <main+0xfc>)
 800120a:	f7ff fe6f 	bl	8000eec <__aeabi_fdiv>
 800120e:	4603      	mov	r3, r0
 8001210:	603b      	str	r3, [r7, #0]
		uWidth = diff_width * mFactor;
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <main+0x108>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd5c 	bl	8000cd4 <__aeabi_ui2f>
 800121c:	4603      	mov	r3, r0
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fdaf 	bl	8000d84 <__aeabi_fmul>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <main+0x10c>)
 800122c:	601a      	str	r2, [r3, #0]

		printf("uWidth: %f \r\n", uWidth);
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <main+0x10c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8f8 	bl	8000428 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <main+0x110>)
 800123e:	f003 fe0f 	bl	8004e60 <iprintf>
	while (1) {
 8001242:	e7ab      	b.n	800119c <main+0x3c>
 8001244:	40012c00 	.word	0x40012c00
 8001248:	200001fc 	.word	0x200001fc
 800124c:	20000244 	.word	0x20000244
 8001250:	200002e0 	.word	0x200002e0
 8001254:	200002dc 	.word	0x200002dc
 8001258:	200002e4 	.word	0x200002e4
 800125c:	49742400 	.word	0x49742400
 8001260:	200002ec 	.word	0x200002ec
 8001264:	200002d8 	.word	0x200002d8
 8001268:	200002e8 	.word	0x200002e8
 800126c:	200002f4 	.word	0x200002f4
 8001270:	08008a38 	.word	0x08008a38

08001274 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b090      	sub	sp, #64	; 0x40
 8001278:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	2228      	movs	r2, #40	; 0x28
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f002 ff76 	bl	8004174 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fe99 	bl	8001ff4 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x58>
		Error_Handler();
 80012c8:	f000 f982 	bl	80015d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2302      	movs	r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2102      	movs	r1, #2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 f906 	bl	80024f8 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x82>
		Error_Handler();
 80012f2:	f000 f96d 	bl	80015d0 <Error_Handler>
	}
}
 80012f6:	bf00      	nop
 80012f8:	3740      	adds	r7, #64	; 0x40
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b096      	sub	sp, #88	; 0x58
 8001304:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001314:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2220      	movs	r2, #32
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f002 ff1b 	bl	8004174 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800133e:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <MX_TIM1_Init+0x138>)
 8001340:	4a3e      	ldr	r2, [pc, #248]	; (800143c <MX_TIM1_Init+0x13c>)
 8001342:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001344:	4b3c      	ldr	r3, [pc, #240]	; (8001438 <MX_TIM1_Init+0x138>)
 8001346:	2247      	movs	r2, #71	; 0x47
 8001348:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <MX_TIM1_Init+0x138>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <MX_TIM1_Init+0x138>)
 8001352:	2263      	movs	r2, #99	; 0x63
 8001354:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <MX_TIM1_Init+0x138>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800135c:	4b36      	ldr	r3, [pc, #216]	; (8001438 <MX_TIM1_Init+0x138>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <MX_TIM1_Init+0x138>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001368:	4833      	ldr	r0, [pc, #204]	; (8001438 <MX_TIM1_Init+0x138>)
 800136a:	f001 fa53 	bl	8002814 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM1_Init+0x78>
		Error_Handler();
 8001374:	f000 f92c 	bl	80015d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800137e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001382:	4619      	mov	r1, r3
 8001384:	482c      	ldr	r0, [pc, #176]	; (8001438 <MX_TIM1_Init+0x138>)
 8001386:	f001 ff59 	bl	800323c <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0x94>
		Error_Handler();
 8001390:	f000 f91e 	bl	80015d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001394:	4828      	ldr	r0, [pc, #160]	; (8001438 <MX_TIM1_Init+0x138>)
 8001396:	f001 fa8c 	bl	80028b2 <HAL_TIM_PWM_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0xa4>
		Error_Handler();
 80013a0:	f000 f916 	bl	80015d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80013ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013b0:	4619      	mov	r1, r3
 80013b2:	4821      	ldr	r0, [pc, #132]	; (8001438 <MX_TIM1_Init+0x138>)
 80013b4:	f002 fc24 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 80013be:	f000 f907 	bl	80015d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c2:	2360      	movs	r3, #96	; 0x60
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_TIM1_Init+0x138>)
 80013e8:	f001 fe66 	bl	80030b8 <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 80013f2:	f000 f8ed 	bl	80015d0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM1_Init+0x138>)
 800141a:	f002 fc4f 	bl	8003cbc <HAL_TIMEx_ConfigBreakDeadTime>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8001424:	f000 f8d4 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM1_Init+0x138>)
 800142a:	f000 f951 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 800142e:	bf00      	nop
 8001430:	3758      	adds	r7, #88	; 0x58
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001fc 	.word	0x200001fc
 800143c:	40012c00 	.word	0x40012c00

08001440 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800145e:	463b      	mov	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <MX_TIM2_Init+0xf4>)
 800146c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001470:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <MX_TIM2_Init+0xf4>)
 8001474:	2247      	movs	r2, #71	; 0x47
 8001476:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <MX_TIM2_Init+0xf4>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_TIM2_Init+0xf4>)
 8001480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001484:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <MX_TIM2_Init+0xf4>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <MX_TIM2_Init+0xf4>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001492:	4828      	ldr	r0, [pc, #160]	; (8001534 <MX_TIM2_Init+0xf4>)
 8001494:	f001 f9be 	bl	8002814 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x62>
		Error_Handler();
 800149e:	f000 f897 	bl	80015d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a6:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4821      	ldr	r0, [pc, #132]	; (8001534 <MX_TIM2_Init+0xf4>)
 80014b0:	f001 fec4 	bl	800323c <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0x7e>
		Error_Handler();
 80014ba:	f000 f889 	bl	80015d0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80014be:	481d      	ldr	r0, [pc, #116]	; (8001534 <MX_TIM2_Init+0xf4>)
 80014c0:	f001 faf2 	bl	8002aa8 <HAL_TIM_IC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x8e>
		Error_Handler();
 80014ca:	f000 f881 	bl	80015d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	4815      	ldr	r0, [pc, #84]	; (8001534 <MX_TIM2_Init+0xf4>)
 80014de:	f002 fb8f 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 80014e8:	f000 f872 	bl	80015d0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ec:	2300      	movs	r3, #0
 80014ee:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014f0:	2301      	movs	r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_TIM2_Init+0xf4>)
 8001504:	f001 fd3c 	bl	8002f80 <HAL_TIM_IC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0xd2>
		Error_Handler();
 800150e:	f000 f85f 	bl	80015d0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001512:	2302      	movs	r3, #2
 8001514:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001516:	463b      	mov	r3, r7
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_TIM2_Init+0xf4>)
 800151e:	f001 fd2f 	bl	8002f80 <HAL_TIM_IC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0xec>
		Error_Handler();
 8001528:	f000 f852 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000244 	.word	0x20000244

08001538 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_USART1_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART1_UART_Init+0x4c>)
 8001570:	f002 fc07 	bl	8003d82 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800157a:	f000 f829 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000028c 	.word	0x2000028c
 8001588:	40013800 	.word	0x40013800

0800158c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_GPIO_Init+0x40>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <MX_GPIO_Init+0x40>)
 8001598:	f043 0320 	orr.w	r3, r3, #32
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_GPIO_Init+0x40>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_GPIO_Init+0x40>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <MX_GPIO_Init+0x40>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <MX_GPIO_Init+0x40>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000

080015d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_MspInit+0x40>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_MspInit+0x40>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6193      	str	r3, [r2, #24]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_MspInit+0x40>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_MspInit+0x40>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_MspInit+0x40>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_MspInit+0x40>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <HAL_TIM_Base_MspInit+0xa4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d10c      	bne.n	800165a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001646:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001658:	e030      	b.n	80016bc <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001662:	d12b      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	61d3      	str	r3, [r2, #28]
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_TIM_Base_MspInit+0xa8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001694:	2303      	movs	r3, #3
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <HAL_TIM_Base_MspInit+0xac>)
 80016a8:	f000 fb20 	bl	8001cec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	201c      	movs	r0, #28
 80016b2:	f000 fae4 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b6:	201c      	movs	r0, #28
 80016b8:	f000 fafd 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40012c00 	.word	0x40012c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800

080016d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_TIM_MspPostInit+0x5c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d118      	bne.n	8001722 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_TIM_MspPostInit+0x60>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_TIM_MspPostInit+0x60>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_TIM_MspPostInit+0x60>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2302      	movs	r3, #2
 8001714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_TIM_MspPostInit+0x64>)
 800171e:	f000 fae5 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40010800 	.word	0x40010800

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_UART_MspInit+0x8c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d131      	bne.n	80017bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_UART_MspInit+0x90>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <HAL_UART_MspInit+0x90>)
 800175e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_UART_MspInit+0x90>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_MspInit+0x90>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <HAL_UART_MspInit+0x90>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_UART_MspInit+0x90>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <HAL_UART_MspInit+0x94>)
 800179e:	f000 faa5 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_UART_MspInit+0x94>)
 80017b8:	f000 fa98 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010800 	.word	0x40010800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001816:	f000 f93f 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM2_IRQHandler+0x10>)
 8001826:	f001 faa3 	bl	8002d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000244 	.word	0x20000244

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <_kill>:

int _kill(int pid, int sig)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800184c:	f002 fc68 	bl	8004120 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	2216      	movs	r2, #22
 8001854:	601a      	str	r2, [r3, #0]
  return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_exit>:

void _exit (int status)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800186a:	f04f 31ff 	mov.w	r1, #4294967295
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffe7 	bl	8001842 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001874:	e7fe      	b.n	8001874 <_exit+0x12>

08001876 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e00a      	b.n	800189e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001888:	f3af 8000 	nop.w
 800188c:	4601      	mov	r1, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dbf0      	blt.n	8001888 <_read+0x12>
  }

  return len;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e009      	b.n	80018d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fc36 	bl	800113c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbf1      	blt.n	80018c2 <_write+0x12>
  }
  return len;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_close>:

int _close(int file)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <_isatty>:

int _isatty(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f002 fbd2 	bl	8004120 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20005000 	.word	0x20005000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	200002f8 	.word	0x200002f8
 80019b0:	20000310 	.word	0x20000310

080019b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff fff8 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c6:	490c      	ldr	r1, [pc, #48]	; (80019f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019dc:	4c09      	ldr	r4, [pc, #36]	; (8001a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f002 fb9f 	bl	800412c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff fbb7 	bl	8001160 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019fc:	08008f2c 	.word	0x08008f2c
  ldr r2, =_sbss
 8001a00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a04:	20000310 	.word	0x20000310

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x28>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x28>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f923 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff fdd8 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f93b 	bl	8001cd2 <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f903 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <HAL_IncTick+0x20>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	200002fc 	.word	0x200002fc

08001abc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b02      	ldr	r3, [pc, #8]	; (8001acc <HAL_GetTick+0x10>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	200002fc 	.word	0x200002fc

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4906      	ldr	r1, [pc, #24]	; (8001b68 <__NVIC_EnableIRQ+0x34>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	; (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	; (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff90 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff2d 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff42 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff90 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5f 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff35 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa2 	bl	8001c24 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b08b      	sub	sp, #44	; 0x2c
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfe:	e169      	b.n	8001fd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d00:	2201      	movs	r2, #1
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8158 	bne.w	8001fce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a9a      	ldr	r2, [pc, #616]	; (8001f8c <HAL_GPIO_Init+0x2a0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d05e      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d28:	4a98      	ldr	r2, [pc, #608]	; (8001f8c <HAL_GPIO_Init+0x2a0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d875      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d2e:	4a98      	ldr	r2, [pc, #608]	; (8001f90 <HAL_GPIO_Init+0x2a4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d058      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d34:	4a96      	ldr	r2, [pc, #600]	; (8001f90 <HAL_GPIO_Init+0x2a4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d86f      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d3a:	4a96      	ldr	r2, [pc, #600]	; (8001f94 <HAL_GPIO_Init+0x2a8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d052      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d40:	4a94      	ldr	r2, [pc, #592]	; (8001f94 <HAL_GPIO_Init+0x2a8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d869      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d46:	4a94      	ldr	r2, [pc, #592]	; (8001f98 <HAL_GPIO_Init+0x2ac>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d04c      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d4c:	4a92      	ldr	r2, [pc, #584]	; (8001f98 <HAL_GPIO_Init+0x2ac>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d863      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d52:	4a92      	ldr	r2, [pc, #584]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d046      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
 8001d58:	4a90      	ldr	r2, [pc, #576]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d85d      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d82a      	bhi.n	8001db8 <HAL_GPIO_Init+0xcc>
 8001d62:	2b12      	cmp	r3, #18
 8001d64:	d859      	bhi.n	8001e1a <HAL_GPIO_Init+0x12e>
 8001d66:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <HAL_GPIO_Init+0x80>)
 8001d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6c:	08001de7 	.word	0x08001de7
 8001d70:	08001dc1 	.word	0x08001dc1
 8001d74:	08001dd3 	.word	0x08001dd3
 8001d78:	08001e15 	.word	0x08001e15
 8001d7c:	08001e1b 	.word	0x08001e1b
 8001d80:	08001e1b 	.word	0x08001e1b
 8001d84:	08001e1b 	.word	0x08001e1b
 8001d88:	08001e1b 	.word	0x08001e1b
 8001d8c:	08001e1b 	.word	0x08001e1b
 8001d90:	08001e1b 	.word	0x08001e1b
 8001d94:	08001e1b 	.word	0x08001e1b
 8001d98:	08001e1b 	.word	0x08001e1b
 8001d9c:	08001e1b 	.word	0x08001e1b
 8001da0:	08001e1b 	.word	0x08001e1b
 8001da4:	08001e1b 	.word	0x08001e1b
 8001da8:	08001e1b 	.word	0x08001e1b
 8001dac:	08001e1b 	.word	0x08001e1b
 8001db0:	08001dc9 	.word	0x08001dc9
 8001db4:	08001ddd 	.word	0x08001ddd
 8001db8:	4a79      	ldr	r2, [pc, #484]	; (8001fa0 <HAL_GPIO_Init+0x2b4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dbe:	e02c      	b.n	8001e1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e029      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e024      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	623b      	str	r3, [r7, #32]
          break;
 8001dda:	e01f      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	330c      	adds	r3, #12
 8001de2:	623b      	str	r3, [r7, #32]
          break;
 8001de4:	e01a      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dee:	2304      	movs	r3, #4
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e013      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	611a      	str	r2, [r3, #16]
          break;
 8001e06:	e009      	b.n	8001e1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	615a      	str	r2, [r3, #20]
          break;
 8001e12:	e003      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
          break;
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x130>
          break;
 8001e1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d801      	bhi.n	8001e26 <HAL_GPIO_Init+0x13a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	e001      	b.n	8001e2a <HAL_GPIO_Init+0x13e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d802      	bhi.n	8001e38 <HAL_GPIO_Init+0x14c>
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	e002      	b.n	8001e3e <HAL_GPIO_Init+0x152>
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	3b08      	subs	r3, #8
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	210f      	movs	r1, #15
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	6a39      	ldr	r1, [r7, #32]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80b1 	beq.w	8001fce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e6c:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <HAL_GPIO_Init+0x2b8>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_GPIO_Init+0x2b8>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e84:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <HAL_GPIO_Init+0x2bc>)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a40      	ldr	r2, [pc, #256]	; (8001fac <HAL_GPIO_Init+0x2c0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <HAL_GPIO_Init+0x1ec>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3f      	ldr	r2, [pc, #252]	; (8001fb0 <HAL_GPIO_Init+0x2c4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_GPIO_Init+0x1e8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3e      	ldr	r2, [pc, #248]	; (8001fb4 <HAL_GPIO_Init+0x2c8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <HAL_GPIO_Init+0x1e4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3d      	ldr	r2, [pc, #244]	; (8001fb8 <HAL_GPIO_Init+0x2cc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_GPIO_Init+0x1e0>
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e006      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ecc:	2304      	movs	r3, #4
 8001ece:	e004      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	4093      	lsls	r3, r2
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eea:	492f      	ldr	r1, [pc, #188]	; (8001fa8 <HAL_GPIO_Init+0x2bc>)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	492c      	ldr	r1, [pc, #176]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	4928      	ldr	r1, [pc, #160]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f2c:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4922      	ldr	r1, [pc, #136]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	491e      	ldr	r1, [pc, #120]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4918      	ldr	r1, [pc, #96]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4914      	ldr	r1, [pc, #80]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d021      	beq.n	8001fc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	490e      	ldr	r1, [pc, #56]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e021      	b.n	8001fce <HAL_GPIO_Init+0x2e2>
 8001f8a:	bf00      	nop
 8001f8c:	10320000 	.word	0x10320000
 8001f90:	10310000 	.word	0x10310000
 8001f94:	10220000 	.word	0x10220000
 8001f98:	10210000 	.word	0x10210000
 8001f9c:	10120000 	.word	0x10120000
 8001fa0:	10110000 	.word	0x10110000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	40010c00 	.word	0x40010c00
 8001fb4:	40011000 	.word	0x40011000
 8001fb8:	40011400 	.word	0x40011400
 8001fbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f47f ae8e 	bne.w	8001d00 <HAL_GPIO_Init+0x14>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	372c      	adds	r7, #44	; 0x2c
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e272      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8087 	beq.w	8002122 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002014:	4b92      	ldr	r3, [pc, #584]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b04      	cmp	r3, #4
 800201e:	d00c      	beq.n	800203a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002020:	4b8f      	ldr	r3, [pc, #572]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d112      	bne.n	8002052 <HAL_RCC_OscConfig+0x5e>
 800202c:	4b8c      	ldr	r3, [pc, #560]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d10b      	bne.n	8002052 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203a:	4b89      	ldr	r3, [pc, #548]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d06c      	beq.n	8002120 <HAL_RCC_OscConfig+0x12c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d168      	bne.n	8002120 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e24c      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x76>
 800205c:	4b80      	ldr	r3, [pc, #512]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a7f      	ldr	r2, [pc, #508]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e02e      	b.n	80020c8 <HAL_RCC_OscConfig+0xd4>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x98>
 8002072:	4b7b      	ldr	r3, [pc, #492]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7a      	ldr	r2, [pc, #488]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b78      	ldr	r3, [pc, #480]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a77      	ldr	r2, [pc, #476]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e01d      	b.n	80020c8 <HAL_RCC_OscConfig+0xd4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0xbc>
 8002096:	4b72      	ldr	r3, [pc, #456]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a71      	ldr	r2, [pc, #452]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6e      	ldr	r2, [pc, #440]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0xd4>
 80020b0:	4b6b      	ldr	r3, [pc, #428]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a6a      	ldr	r2, [pc, #424]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b68      	ldr	r3, [pc, #416]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a67      	ldr	r2, [pc, #412]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fcf4 	bl	8001abc <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff fcf0 	bl	8001abc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e200      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0xe4>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fce0 	bl	8001abc <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7ff fcdc 	bl	8001abc <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1ec      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x10c>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d063      	beq.n	80021f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212e:	4b4c      	ldr	r3, [pc, #304]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d11c      	bne.n	8002180 <HAL_RCC_OscConfig+0x18c>
 8002146:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	4b43      	ldr	r3, [pc, #268]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x176>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1c0      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4939      	ldr	r1, [pc, #228]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	e03a      	b.n	80021f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff fc95 	bl	8001abc <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff fc91 	bl	8001abc <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1a1      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4927      	ldr	r1, [pc, #156]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fc74 	bl	8001abc <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff fc70 	bl	8001abc <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e180      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03a      	beq.n	8002278 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d019      	beq.n	800223e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_RCC_OscConfig+0x274>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7ff fc54 	bl	8001abc <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff fc50 	bl	8001abc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e160      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f000 face 	bl	80027d8 <RCC_Delay>
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCC_OscConfig+0x274>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7ff fc3a 	bl	8001abc <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224a:	e00f      	b.n	800226c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff fc36 	bl	8001abc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d908      	bls.n	800226c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e146      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	42420000 	.word	0x42420000
 8002268:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	4b92      	ldr	r3, [pc, #584]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e9      	bne.n	800224c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a6 	beq.w	80023d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b8b      	ldr	r3, [pc, #556]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10d      	bne.n	80022b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a87      	ldr	r2, [pc, #540]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b85      	ldr	r3, [pc, #532]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b82      	ldr	r3, [pc, #520]	; (80024bc <HAL_RCC_OscConfig+0x4c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x4c8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7e      	ldr	r2, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x4c8>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fbf7 	bl	8001abc <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7ff fbf3 	bl	8001abc <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e103      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4b75      	ldr	r3, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x4c8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x312>
 80022f8:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6213      	str	r3, [r2, #32]
 8002304:	e02d      	b.n	8002362 <HAL_RCC_OscConfig+0x36e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x334>
 800230e:	4b6a      	ldr	r3, [pc, #424]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a66      	ldr	r2, [pc, #408]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	e01c      	b.n	8002362 <HAL_RCC_OscConfig+0x36e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b05      	cmp	r3, #5
 800232e:	d10c      	bne.n	800234a <HAL_RCC_OscConfig+0x356>
 8002330:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a60      	ldr	r2, [pc, #384]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4a5d      	ldr	r2, [pc, #372]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6213      	str	r3, [r2, #32]
 8002348:	e00b      	b.n	8002362 <HAL_RCC_OscConfig+0x36e>
 800234a:	4b5b      	ldr	r3, [pc, #364]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a5a      	ldr	r2, [pc, #360]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	4b58      	ldr	r3, [pc, #352]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a57      	ldr	r2, [pc, #348]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d015      	beq.n	8002396 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7ff fba7 	bl	8001abc <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7ff fba3 	bl	8001abc <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e0b1      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ee      	beq.n	8002372 <HAL_RCC_OscConfig+0x37e>
 8002394:	e014      	b.n	80023c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7ff fb91 	bl	8001abc <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7ff fb8d 	bl	8001abc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e09b      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ee      	bne.n	800239e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8087 	beq.w	80024ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d061      	beq.n	80024ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d146      	bne.n	800247e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_RCC_OscConfig+0x4cc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7ff fb61 	bl	8001abc <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fe:	f7ff fb5d 	bl	8001abc <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e06d      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002424:	d108      	bne.n	8002438 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4921      	ldr	r1, [pc, #132]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a19      	ldr	r1, [r3, #32]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	430b      	orrs	r3, r1
 800244a:	491b      	ldr	r1, [pc, #108]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x4cc>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7ff fb31 	bl	8001abc <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245e:	f7ff fb2d 	bl	8001abc <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e03d      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x46a>
 800247c:	e035      	b.n	80024ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_RCC_OscConfig+0x4cc>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fb1a 	bl	8001abc <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7ff fb16 	bl	8001abc <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e026      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x498>
 80024aa:	e01e      	b.n	80024ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e019      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40007000 	.word	0x40007000
 80024c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_OscConfig+0x500>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0d0      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d910      	bls.n	800253c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	4965      	ldr	r1, [pc, #404]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0b8      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800255e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800256c:	4b53      	ldr	r3, [pc, #332]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002576:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	494d      	ldr	r1, [pc, #308]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d040      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d115      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e073      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06b      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4936      	ldr	r1, [pc, #216]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7ff fa68 	bl	8001abc <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7ff fa64 	bl	8001abc <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e053      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d210      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0207 	bic.w	r2, r3, #7
 800262e:	4922      	ldr	r1, [pc, #136]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e032      	b.n	80026ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4916      	ldr	r1, [pc, #88]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	490e      	ldr	r1, [pc, #56]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002686:	f000 f821 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800268a:	4602      	mov	r2, r0
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	490a      	ldr	r1, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1cc>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1d0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f9c6 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08008a48 	.word	0x08008a48
 80026c4:	20000000 	.word	0x20000000
 80026c8:	20000004 	.word	0x20000004

080026cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HAL_RCC_GetSysClockFreq+0x94>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x30>
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x36>
 80026fa:	e027      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fe:	613b      	str	r3, [r7, #16]
      break;
 8002700:	e027      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_RCC_GetSysClockFreq+0x9c>)
 800270c:	5cd3      	ldrb	r3, [r2, r3]
 800270e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d010      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_RCC_GetSysClockFreq+0x94>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0c5b      	lsrs	r3, r3, #17
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	4a11      	ldr	r2, [pc, #68]	; (800276c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002726:	5cd3      	ldrb	r3, [r2, r3]
 8002728:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <HAL_RCC_GetSysClockFreq+0x98>)
 800272e:	fb03 f202 	mul.w	r2, r3, r2
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e004      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	613b      	str	r3, [r7, #16]
      break;
 800274a:	e002      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetSysClockFreq+0x98>)
 800274e:	613b      	str	r3, [r7, #16]
      break;
 8002750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002752:	693b      	ldr	r3, [r7, #16]
}
 8002754:	4618      	mov	r0, r3
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	007a1200 	.word	0x007a1200
 8002768:	08008a60 	.word	0x08008a60
 800276c:	08008a70 	.word	0x08008a70
 8002770:	003d0900 	.word	0x003d0900

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b02      	ldr	r3, [pc, #8]	; (8002784 <HAL_RCC_GetHCLKFreq+0x10>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	20000000 	.word	0x20000000

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800278c:	f7ff fff2 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08008a58 	.word	0x08008a58

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b4:	f7ff ffde 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0adb      	lsrs	r3, r3, #11
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08008a58 	.word	0x08008a58

080027d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <RCC_Delay+0x34>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <RCC_Delay+0x38>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0a5b      	lsrs	r3, r3, #9
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f4:	bf00      	nop
  }
  while (Delay --);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	60fa      	str	r2, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <RCC_Delay+0x1c>
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000000 	.word	0x20000000
 8002810:	10624dd3 	.word	0x10624dd3

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e041      	b.n	80028aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fef0 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 fe22 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e041      	b.n	8002948 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f839 	bl	8002950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f000 fdd3 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
	...

08002964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_TIM_PWM_Start+0x24>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e022      	b.n	80029ce <HAL_TIM_PWM_Start+0x6a>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d109      	bne.n	80029a2 <HAL_TIM_PWM_Start+0x3e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e015      	b.n	80029ce <HAL_TIM_PWM_Start+0x6a>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d109      	bne.n	80029bc <HAL_TIM_PWM_Start+0x58>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e008      	b.n	80029ce <HAL_TIM_PWM_Start+0x6a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e05e      	b.n	8002a94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <HAL_TIM_PWM_Start+0x82>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e4:	e013      	b.n	8002a0e <HAL_TIM_PWM_Start+0xaa>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d104      	bne.n	80029f6 <HAL_TIM_PWM_Start+0x92>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f4:	e00b      	b.n	8002a0e <HAL_TIM_PWM_Start+0xaa>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start+0xa2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a04:	e003      	b.n	8002a0e <HAL_TIM_PWM_Start+0xaa>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2201      	movs	r2, #1
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 f8cd 	bl	8003bb6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <HAL_TIM_PWM_Start+0x138>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d107      	bne.n	8002a36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_TIM_PWM_Start+0x138>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_TIM_PWM_Start+0xfa>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d009      	beq.n	8002a5e <HAL_TIM_PWM_Start+0xfa>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIM_PWM_Start+0x13c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIM_PWM_Start+0xfa>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_TIM_PWM_Start+0x140>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d111      	bne.n	8002a82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d010      	beq.n	8002a92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	e007      	b.n	8002a92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f839 	bl	8002b46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fcd8 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_IC_Start_IT+0x1e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	e013      	b.n	8002b9e <HAL_TIM_IC_Start_IT+0x46>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_IC_Start_IT+0x2e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	e00b      	b.n	8002b9e <HAL_TIM_IC_Start_IT+0x46>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_IC_Start_IT+0x3e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	e003      	b.n	8002b9e <HAL_TIM_IC_Start_IT+0x46>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <HAL_TIM_IC_Start_IT+0x58>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e013      	b.n	8002bd8 <HAL_TIM_IC_Start_IT+0x80>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d104      	bne.n	8002bc0 <HAL_TIM_IC_Start_IT+0x68>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e00b      	b.n	8002bd8 <HAL_TIM_IC_Start_IT+0x80>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d104      	bne.n	8002bd0 <HAL_TIM_IC_Start_IT+0x78>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e003      	b.n	8002bd8 <HAL_TIM_IC_Start_IT+0x80>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bda:	7bbb      	ldrb	r3, [r7, #14]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002be0:	7b7b      	ldrb	r3, [r7, #13]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0b8      	b.n	8002d5c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_IC_Start_IT+0xa2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf8:	e013      	b.n	8002c22 <HAL_TIM_IC_Start_IT+0xca>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d104      	bne.n	8002c0a <HAL_TIM_IC_Start_IT+0xb2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c08:	e00b      	b.n	8002c22 <HAL_TIM_IC_Start_IT+0xca>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d104      	bne.n	8002c1a <HAL_TIM_IC_Start_IT+0xc2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c18:	e003      	b.n	8002c22 <HAL_TIM_IC_Start_IT+0xca>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_IC_Start_IT+0xda>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c30:	e013      	b.n	8002c5a <HAL_TIM_IC_Start_IT+0x102>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_IC_Start_IT+0xea>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c40:	e00b      	b.n	8002c5a <HAL_TIM_IC_Start_IT+0x102>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_IC_Start_IT+0xfa>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c50:	e003      	b.n	8002c5a <HAL_TIM_IC_Start_IT+0x102>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	d841      	bhi.n	8002ce4 <HAL_TIM_IC_Start_IT+0x18c>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HAL_TIM_IC_Start_IT+0x110>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c9d 	.word	0x08002c9d
 8002c6c:	08002ce5 	.word	0x08002ce5
 8002c70:	08002ce5 	.word	0x08002ce5
 8002c74:	08002ce5 	.word	0x08002ce5
 8002c78:	08002caf 	.word	0x08002caf
 8002c7c:	08002ce5 	.word	0x08002ce5
 8002c80:	08002ce5 	.word	0x08002ce5
 8002c84:	08002ce5 	.word	0x08002ce5
 8002c88:	08002cc1 	.word	0x08002cc1
 8002c8c:	08002ce5 	.word	0x08002ce5
 8002c90:	08002ce5 	.word	0x08002ce5
 8002c94:	08002ce5 	.word	0x08002ce5
 8002c98:	08002cd3 	.word	0x08002cd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0202 	orr.w	r2, r2, #2
 8002caa:	60da      	str	r2, [r3, #12]
      break;
 8002cac:	e01d      	b.n	8002cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0204 	orr.w	r2, r2, #4
 8002cbc:	60da      	str	r2, [r3, #12]
      break;
 8002cbe:	e014      	b.n	8002cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0208 	orr.w	r2, r2, #8
 8002cce:	60da      	str	r2, [r3, #12]
      break;
 8002cd0:	e00b      	b.n	8002cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0210 	orr.w	r2, r2, #16
 8002ce0:	60da      	str	r2, [r3, #12]
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d134      	bne.n	8002d5a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ff5c 	bl	8003bb6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_TIM_IC_Start_IT+0x20c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_IC_Start_IT+0x1ce>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d009      	beq.n	8002d26 <HAL_TIM_IC_Start_IT+0x1ce>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_TIM_IC_Start_IT+0x210>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIM_IC_Start_IT+0x1ce>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <HAL_TIM_IC_Start_IT+0x214>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d010      	beq.n	8002d5a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	e007      	b.n	8002d5a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800

08002d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0202 	mvn.w	r2, #2
 8002d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe f96e 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fb53 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fb59 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0204 	mvn.w	r2, #4
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2202      	movs	r2, #2
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe f944 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fb29 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fb2f 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0208 	mvn.w	r2, #8
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe f91a 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 faff 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fb05 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d122      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0210 	mvn.w	r2, #16
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f8f0 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fad5 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fadb 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0201 	mvn.w	r2, #1
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fab0 	bl	8003454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d10e      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	2b80      	cmp	r3, #128	; 0x80
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 ff28 	bl	8003d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d10e      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	d107      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa9f 	bl	800348a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d107      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0220 	mvn.w	r2, #32
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fef3 	bl	8003d5e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e088      	b.n	80030b0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f000 fc58 	bl	8003870 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 020c 	bic.w	r2, r2, #12
 8002fce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
 8002fe2:	e060      	b.n	80030a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d11c      	bne.n	8003024 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f000 fcc1 	bl	8003980 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800300c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6999      	ldr	r1, [r3, #24]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	619a      	str	r2, [r3, #24]
 8003022:	e040      	b.n	80030a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11b      	bne.n	8003062 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f000 fd0c 	bl	8003a56 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 020c 	bic.w	r2, r2, #12
 800304c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69d9      	ldr	r1, [r3, #28]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	61da      	str	r2, [r3, #28]
 8003060:	e021      	b.n	80030a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d11c      	bne.n	80030a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f000 fd28 	bl	8003acc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800308a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69d9      	ldr	r1, [r3, #28]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	61da      	str	r2, [r3, #28]
 80030a0:	e001      	b.n	80030a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e0ae      	b.n	8003234 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	f200 809f 	bhi.w	8003224 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030e6:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003225 	.word	0x08003225
 80030f4:	08003225 	.word	0x08003225
 80030f8:	08003225 	.word	0x08003225
 80030fc:	08003161 	.word	0x08003161
 8003100:	08003225 	.word	0x08003225
 8003104:	08003225 	.word	0x08003225
 8003108:	08003225 	.word	0x08003225
 800310c:	080031a3 	.word	0x080031a3
 8003110:	08003225 	.word	0x08003225
 8003114:	08003225 	.word	0x08003225
 8003118:	08003225 	.word	0x08003225
 800311c:	080031e3 	.word	0x080031e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fa1a 	bl	8003560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0204 	bic.w	r2, r2, #4
 800314a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6999      	ldr	r1, [r3, #24]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	619a      	str	r2, [r3, #24]
      break;
 800315e:	e064      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fa60 	bl	800362c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	619a      	str	r2, [r3, #24]
      break;
 80031a0:	e043      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 faa9 	bl	8003700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0208 	orr.w	r2, r2, #8
 80031bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0204 	bic.w	r2, r2, #4
 80031cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69d9      	ldr	r1, [r3, #28]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	61da      	str	r2, [r3, #28]
      break;
 80031e0:	e023      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 faf3 	bl	80037d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	61da      	str	r2, [r3, #28]
      break;
 8003222:	e002      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
      break;
 8003228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIM_ConfigClockSource+0x1c>
 8003254:	2302      	movs	r3, #2
 8003256:	e0b4      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x186>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003290:	d03e      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0xd4>
 8003292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003296:	f200 8087 	bhi.w	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 800329a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329e:	f000 8086 	beq.w	80033ae <HAL_TIM_ConfigClockSource+0x172>
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d87f      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032a8:	2b70      	cmp	r3, #112	; 0x70
 80032aa:	d01a      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0xa6>
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d87b      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d050      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x11a>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d877      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032b8:	2b50      	cmp	r3, #80	; 0x50
 80032ba:	d03c      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0xfa>
 80032bc:	2b50      	cmp	r3, #80	; 0x50
 80032be:	d873      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d058      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x13a>
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d86f      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c8:	2b30      	cmp	r3, #48	; 0x30
 80032ca:	d064      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032cc:	2b30      	cmp	r3, #48	; 0x30
 80032ce:	d86b      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d060      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d867      	bhi.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05c      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	2b10      	cmp	r3, #16
 80032de:	d05a      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x15a>
 80032e0:	e062      	b.n	80033a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f000 fc41 	bl	8003b78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003304:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	609a      	str	r2, [r3, #8]
      break;
 800330e:	e04f      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f000 fc2a 	bl	8003b78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003332:	609a      	str	r2, [r3, #8]
      break;
 8003334:	e03c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	461a      	mov	r2, r3
 8003344:	f000 faee 	bl	8003924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2150      	movs	r1, #80	; 0x50
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fbf8 	bl	8003b44 <TIM_ITRx_SetConfig>
      break;
 8003354:	e02c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	461a      	mov	r2, r3
 8003364:	f000 fb48 	bl	80039f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2160      	movs	r1, #96	; 0x60
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fbe8 	bl	8003b44 <TIM_ITRx_SetConfig>
      break;
 8003374:	e01c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	461a      	mov	r2, r3
 8003384:	f000 face 	bl	8003924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2140      	movs	r1, #64	; 0x40
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fbd8 	bl	8003b44 <TIM_ITRx_SetConfig>
      break;
 8003394:	e00c      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	4610      	mov	r0, r2
 80033a2:	f000 fbcf 	bl	8003b44 <TIM_ITRx_SetConfig>
      break;
 80033a6:	e003      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d831      	bhi.n	8003444 <HAL_TIM_ReadCapturedValue+0x78>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800341d 	.word	0x0800341d
 80033ec:	08003445 	.word	0x08003445
 80033f0:	08003445 	.word	0x08003445
 80033f4:	08003445 	.word	0x08003445
 80033f8:	08003427 	.word	0x08003427
 80033fc:	08003445 	.word	0x08003445
 8003400:	08003445 	.word	0x08003445
 8003404:	08003445 	.word	0x08003445
 8003408:	08003431 	.word	0x08003431
 800340c:	08003445 	.word	0x08003445
 8003410:	08003445 	.word	0x08003445
 8003414:	08003445 	.word	0x08003445
 8003418:	0800343b 	.word	0x0800343b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003422:	60fb      	str	r3, [r7, #12]

      break;
 8003424:	e00f      	b.n	8003446 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	60fb      	str	r3, [r7, #12]

      break;
 800342e:	e00a      	b.n	8003446 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	60fb      	str	r3, [r7, #12]

      break;
 8003438:	e005      	b.n	8003446 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	60fb      	str	r3, [r7, #12]

      break;
 8003442:	e000      	b.n	8003446 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003444:	bf00      	nop
  }

  return tmpreg;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop

08003454 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a29      	ldr	r2, [pc, #164]	; (8003554 <TIM_Base_SetConfig+0xb8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00b      	beq.n	80034cc <TIM_Base_SetConfig+0x30>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d007      	beq.n	80034cc <TIM_Base_SetConfig+0x30>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a26      	ldr	r2, [pc, #152]	; (8003558 <TIM_Base_SetConfig+0xbc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_Base_SetConfig+0x30>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a25      	ldr	r2, [pc, #148]	; (800355c <TIM_Base_SetConfig+0xc0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d108      	bne.n	80034de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <TIM_Base_SetConfig+0xb8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <TIM_Base_SetConfig+0x62>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ec:	d007      	beq.n	80034fe <TIM_Base_SetConfig+0x62>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <TIM_Base_SetConfig+0xbc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_Base_SetConfig+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <TIM_Base_SetConfig+0xc0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <TIM_Base_SetConfig+0xb8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d103      	bne.n	8003544 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	615a      	str	r2, [r3, #20]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400
 800355c:	40000800 	.word	0x40000800

08003560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 0201 	bic.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 0302 	bic.w	r3, r3, #2
 80035a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <TIM_OC1_SetConfig+0xc8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10c      	bne.n	80035d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0308 	bic.w	r3, r3, #8
 80035c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a13      	ldr	r2, [pc, #76]	; (8003628 <TIM_OC1_SetConfig+0xc8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d111      	bne.n	8003602 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00

0800362c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f023 0210 	bic.w	r2, r3, #16
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0320 	bic.w	r3, r3, #32
 8003676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <TIM_OC2_SetConfig+0xd0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10d      	bne.n	80036a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a14      	ldr	r2, [pc, #80]	; (80036fc <TIM_OC2_SetConfig+0xd0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d113      	bne.n	80036d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00

08003700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <TIM_OC3_SetConfig+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10d      	bne.n	800377a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <TIM_OC3_SetConfig+0xd0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d113      	bne.n	80037aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40012c00 	.word	0x40012c00

080037d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	031b      	lsls	r3, r3, #12
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a0f      	ldr	r2, [pc, #60]	; (800386c <TIM_OC4_SetConfig+0x98>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d109      	bne.n	8003848 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800383a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40012c00 	.word	0x40012c00

08003870 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 0201 	bic.w	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <TIM_TI1_SetConfig+0xa8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_TI1_SetConfig+0x46>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d007      	beq.n	80038b6 <TIM_TI1_SetConfig+0x46>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <TIM_TI1_SetConfig+0xac>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_TI1_SetConfig+0x46>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <TIM_TI1_SetConfig+0xb0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <TIM_TI1_SetConfig+0x4a>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <TIM_TI1_SetConfig+0x4c>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e003      	b.n	80038da <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f023 030a 	bic.w	r3, r3, #10
 80038f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f003 030a 	and.w	r3, r3, #10
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	40012c00 	.word	0x40012c00
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800

08003924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 030a 	bic.w	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f023 0210 	bic.w	r2, r3, #16
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	031b      	lsls	r3, r3, #12
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f023 0210 	bic.w	r2, r3, #16
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	031b      	lsls	r3, r3, #12
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	621a      	str	r2, [r3, #32]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b087      	sub	sp, #28
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a92:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b0a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	031b      	lsls	r3, r3, #12
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	031b      	lsls	r3, r3, #12
 8003b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f043 0307 	orr.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	609a      	str	r2, [r3, #8]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	021a      	lsls	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2201      	movs	r2, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	401a      	ands	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e046      	b.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d009      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10c      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800

08003cbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e03d      	b.n	8003d54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e042      	b.n	8003e1a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fd fcc5 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2224      	movs	r2, #36	; 0x24
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f91c 	bl	8004004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b08a      	sub	sp, #40	; 0x28
 8003e26:	af02      	add	r7, sp, #8
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d16d      	bne.n	8003f1e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_UART_Transmit+0x2c>
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e066      	b.n	8003f20 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2221      	movs	r2, #33	; 0x21
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e60:	f7fd fe2c 	bl	8001abc <HAL_GetTick>
 8003e64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	88fa      	ldrh	r2, [r7, #6]
 8003e6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	d108      	bne.n	8003e8e <HAL_UART_Transmit+0x6c>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	e003      	b.n	8003e96 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e96:	e02a      	b.n	8003eee <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f840 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e036      	b.n	8003f20 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	3302      	adds	r3, #2
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e007      	b.n	8003ee0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1cf      	bne.n	8003e98 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f810 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e006      	b.n	8003f20 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
  }
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b090      	sub	sp, #64	; 0x40
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f38:	e050      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d04c      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f48:	f7fd fdb8 	bl	8001abc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d241      	bcs.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f78:	637a      	str	r2, [r7, #52]	; 0x34
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3314      	adds	r3, #20
 8003f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fac:	623a      	str	r2, [r7, #32]
 8003fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	69f9      	ldr	r1, [r7, #28]
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e5      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e00f      	b.n	8003ffc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d09f      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3740      	adds	r7, #64	; 0x40
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800403e:	f023 030c 	bic.w	r3, r3, #12
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	430b      	orrs	r3, r1
 800404a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <UART_SetConfig+0x114>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d103      	bne.n	8004074 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe fba0 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	e002      	b.n	800407a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7fe fb88 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8004078:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	009a      	lsls	r2, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	4a22      	ldr	r2, [pc, #136]	; (800411c <UART_SetConfig+0x118>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	0119      	lsls	r1, r3, #4
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009a      	lsls	r2, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <UART_SetConfig+0x118>)
 80040b2:	fba3 0302 	umull	r0, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2064      	movs	r0, #100	; 0x64
 80040ba:	fb00 f303 	mul.w	r3, r0, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	3332      	adds	r3, #50	; 0x32
 80040c4:	4a15      	ldr	r2, [pc, #84]	; (800411c <UART_SetConfig+0x118>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d0:	4419      	add	r1, r3
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009a      	lsls	r2, r3, #2
 80040dc:	441a      	add	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <UART_SetConfig+0x118>)
 80040ea:	fba3 0302 	umull	r0, r3, r3, r2
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2064      	movs	r0, #100	; 0x64
 80040f2:	fb00 f303 	mul.w	r3, r0, r3
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	3332      	adds	r3, #50	; 0x32
 80040fc:	4a07      	ldr	r2, [pc, #28]	; (800411c <UART_SetConfig+0x118>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	f003 020f 	and.w	r2, r3, #15
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	440a      	add	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40013800 	.word	0x40013800
 800411c:	51eb851f 	.word	0x51eb851f

08004120 <__errno>:
 8004120:	4b01      	ldr	r3, [pc, #4]	; (8004128 <__errno+0x8>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2000000c 	.word	0x2000000c

0800412c <__libc_init_array>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	2600      	movs	r6, #0
 8004130:	4d0c      	ldr	r5, [pc, #48]	; (8004164 <__libc_init_array+0x38>)
 8004132:	4c0d      	ldr	r4, [pc, #52]	; (8004168 <__libc_init_array+0x3c>)
 8004134:	1b64      	subs	r4, r4, r5
 8004136:	10a4      	asrs	r4, r4, #2
 8004138:	42a6      	cmp	r6, r4
 800413a:	d109      	bne.n	8004150 <__libc_init_array+0x24>
 800413c:	f004 fc6e 	bl	8008a1c <_init>
 8004140:	2600      	movs	r6, #0
 8004142:	4d0a      	ldr	r5, [pc, #40]	; (800416c <__libc_init_array+0x40>)
 8004144:	4c0a      	ldr	r4, [pc, #40]	; (8004170 <__libc_init_array+0x44>)
 8004146:	1b64      	subs	r4, r4, r5
 8004148:	10a4      	asrs	r4, r4, #2
 800414a:	42a6      	cmp	r6, r4
 800414c:	d105      	bne.n	800415a <__libc_init_array+0x2e>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	f855 3b04 	ldr.w	r3, [r5], #4
 8004154:	4798      	blx	r3
 8004156:	3601      	adds	r6, #1
 8004158:	e7ee      	b.n	8004138 <__libc_init_array+0xc>
 800415a:	f855 3b04 	ldr.w	r3, [r5], #4
 800415e:	4798      	blx	r3
 8004160:	3601      	adds	r6, #1
 8004162:	e7f2      	b.n	800414a <__libc_init_array+0x1e>
 8004164:	08008f24 	.word	0x08008f24
 8004168:	08008f24 	.word	0x08008f24
 800416c:	08008f24 	.word	0x08008f24
 8004170:	08008f28 	.word	0x08008f28

08004174 <memset>:
 8004174:	4603      	mov	r3, r0
 8004176:	4402      	add	r2, r0
 8004178:	4293      	cmp	r3, r2
 800417a:	d100      	bne.n	800417e <memset+0xa>
 800417c:	4770      	bx	lr
 800417e:	f803 1b01 	strb.w	r1, [r3], #1
 8004182:	e7f9      	b.n	8004178 <memset+0x4>

08004184 <__cvt>:
 8004184:	2b00      	cmp	r3, #0
 8004186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800418a:	461f      	mov	r7, r3
 800418c:	bfbb      	ittet	lt
 800418e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004192:	461f      	movlt	r7, r3
 8004194:	2300      	movge	r3, #0
 8004196:	232d      	movlt	r3, #45	; 0x2d
 8004198:	b088      	sub	sp, #32
 800419a:	4614      	mov	r4, r2
 800419c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800419e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80041a0:	7013      	strb	r3, [r2, #0]
 80041a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80041a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80041a8:	f023 0820 	bic.w	r8, r3, #32
 80041ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041b0:	d005      	beq.n	80041be <__cvt+0x3a>
 80041b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80041b6:	d100      	bne.n	80041ba <__cvt+0x36>
 80041b8:	3501      	adds	r5, #1
 80041ba:	2302      	movs	r3, #2
 80041bc:	e000      	b.n	80041c0 <__cvt+0x3c>
 80041be:	2303      	movs	r3, #3
 80041c0:	aa07      	add	r2, sp, #28
 80041c2:	9204      	str	r2, [sp, #16]
 80041c4:	aa06      	add	r2, sp, #24
 80041c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80041ca:	e9cd 3500 	strd	r3, r5, [sp]
 80041ce:	4622      	mov	r2, r4
 80041d0:	463b      	mov	r3, r7
 80041d2:	f001 fd9d 	bl	8005d10 <_dtoa_r>
 80041d6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041da:	4606      	mov	r6, r0
 80041dc:	d102      	bne.n	80041e4 <__cvt+0x60>
 80041de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041e0:	07db      	lsls	r3, r3, #31
 80041e2:	d522      	bpl.n	800422a <__cvt+0xa6>
 80041e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041e8:	eb06 0905 	add.w	r9, r6, r5
 80041ec:	d110      	bne.n	8004210 <__cvt+0x8c>
 80041ee:	7833      	ldrb	r3, [r6, #0]
 80041f0:	2b30      	cmp	r3, #48	; 0x30
 80041f2:	d10a      	bne.n	800420a <__cvt+0x86>
 80041f4:	2200      	movs	r2, #0
 80041f6:	2300      	movs	r3, #0
 80041f8:	4620      	mov	r0, r4
 80041fa:	4639      	mov	r1, r7
 80041fc:	f7fc fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8004200:	b918      	cbnz	r0, 800420a <__cvt+0x86>
 8004202:	f1c5 0501 	rsb	r5, r5, #1
 8004206:	f8ca 5000 	str.w	r5, [sl]
 800420a:	f8da 3000 	ldr.w	r3, [sl]
 800420e:	4499      	add	r9, r3
 8004210:	2200      	movs	r2, #0
 8004212:	2300      	movs	r3, #0
 8004214:	4620      	mov	r0, r4
 8004216:	4639      	mov	r1, r7
 8004218:	f7fc fbc6 	bl	80009a8 <__aeabi_dcmpeq>
 800421c:	b108      	cbz	r0, 8004222 <__cvt+0x9e>
 800421e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004222:	2230      	movs	r2, #48	; 0x30
 8004224:	9b07      	ldr	r3, [sp, #28]
 8004226:	454b      	cmp	r3, r9
 8004228:	d307      	bcc.n	800423a <__cvt+0xb6>
 800422a:	4630      	mov	r0, r6
 800422c:	9b07      	ldr	r3, [sp, #28]
 800422e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004230:	1b9b      	subs	r3, r3, r6
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	b008      	add	sp, #32
 8004236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423a:	1c59      	adds	r1, r3, #1
 800423c:	9107      	str	r1, [sp, #28]
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e7f0      	b.n	8004224 <__cvt+0xa0>

08004242 <__exponent>:
 8004242:	4603      	mov	r3, r0
 8004244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004246:	2900      	cmp	r1, #0
 8004248:	f803 2b02 	strb.w	r2, [r3], #2
 800424c:	bfb6      	itet	lt
 800424e:	222d      	movlt	r2, #45	; 0x2d
 8004250:	222b      	movge	r2, #43	; 0x2b
 8004252:	4249      	neglt	r1, r1
 8004254:	2909      	cmp	r1, #9
 8004256:	7042      	strb	r2, [r0, #1]
 8004258:	dd2b      	ble.n	80042b2 <__exponent+0x70>
 800425a:	f10d 0407 	add.w	r4, sp, #7
 800425e:	46a4      	mov	ip, r4
 8004260:	270a      	movs	r7, #10
 8004262:	fb91 f6f7 	sdiv	r6, r1, r7
 8004266:	460a      	mov	r2, r1
 8004268:	46a6      	mov	lr, r4
 800426a:	fb07 1516 	mls	r5, r7, r6, r1
 800426e:	2a63      	cmp	r2, #99	; 0x63
 8004270:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004274:	4631      	mov	r1, r6
 8004276:	f104 34ff 	add.w	r4, r4, #4294967295
 800427a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800427e:	dcf0      	bgt.n	8004262 <__exponent+0x20>
 8004280:	3130      	adds	r1, #48	; 0x30
 8004282:	f1ae 0502 	sub.w	r5, lr, #2
 8004286:	f804 1c01 	strb.w	r1, [r4, #-1]
 800428a:	4629      	mov	r1, r5
 800428c:	1c44      	adds	r4, r0, #1
 800428e:	4561      	cmp	r1, ip
 8004290:	d30a      	bcc.n	80042a8 <__exponent+0x66>
 8004292:	f10d 0209 	add.w	r2, sp, #9
 8004296:	eba2 020e 	sub.w	r2, r2, lr
 800429a:	4565      	cmp	r5, ip
 800429c:	bf88      	it	hi
 800429e:	2200      	movhi	r2, #0
 80042a0:	4413      	add	r3, r2
 80042a2:	1a18      	subs	r0, r3, r0
 80042a4:	b003      	add	sp, #12
 80042a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042ac:	f804 2f01 	strb.w	r2, [r4, #1]!
 80042b0:	e7ed      	b.n	800428e <__exponent+0x4c>
 80042b2:	2330      	movs	r3, #48	; 0x30
 80042b4:	3130      	adds	r1, #48	; 0x30
 80042b6:	7083      	strb	r3, [r0, #2]
 80042b8:	70c1      	strb	r1, [r0, #3]
 80042ba:	1d03      	adds	r3, r0, #4
 80042bc:	e7f1      	b.n	80042a2 <__exponent+0x60>
	...

080042c0 <_printf_float>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	b091      	sub	sp, #68	; 0x44
 80042c6:	460c      	mov	r4, r1
 80042c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80042cc:	4616      	mov	r6, r2
 80042ce:	461f      	mov	r7, r3
 80042d0:	4605      	mov	r5, r0
 80042d2:	f002 ff67 	bl	80071a4 <_localeconv_r>
 80042d6:	6803      	ldr	r3, [r0, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	9309      	str	r3, [sp, #36]	; 0x24
 80042dc:	f7fb ff38 	bl	8000150 <strlen>
 80042e0:	2300      	movs	r3, #0
 80042e2:	930e      	str	r3, [sp, #56]	; 0x38
 80042e4:	f8d8 3000 	ldr.w	r3, [r8]
 80042e8:	900a      	str	r0, [sp, #40]	; 0x28
 80042ea:	3307      	adds	r3, #7
 80042ec:	f023 0307 	bic.w	r3, r3, #7
 80042f0:	f103 0208 	add.w	r2, r3, #8
 80042f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80042f8:	f8d4 b000 	ldr.w	fp, [r4]
 80042fc:	f8c8 2000 	str.w	r2, [r8]
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004308:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800430c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004310:	930b      	str	r3, [sp, #44]	; 0x2c
 8004312:	f04f 32ff 	mov.w	r2, #4294967295
 8004316:	4640      	mov	r0, r8
 8004318:	4b9c      	ldr	r3, [pc, #624]	; (800458c <_printf_float+0x2cc>)
 800431a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800431c:	f7fc fb76 	bl	8000a0c <__aeabi_dcmpun>
 8004320:	bb70      	cbnz	r0, 8004380 <_printf_float+0xc0>
 8004322:	f04f 32ff 	mov.w	r2, #4294967295
 8004326:	4640      	mov	r0, r8
 8004328:	4b98      	ldr	r3, [pc, #608]	; (800458c <_printf_float+0x2cc>)
 800432a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800432c:	f7fc fb50 	bl	80009d0 <__aeabi_dcmple>
 8004330:	bb30      	cbnz	r0, 8004380 <_printf_float+0xc0>
 8004332:	2200      	movs	r2, #0
 8004334:	2300      	movs	r3, #0
 8004336:	4640      	mov	r0, r8
 8004338:	4651      	mov	r1, sl
 800433a:	f7fc fb3f 	bl	80009bc <__aeabi_dcmplt>
 800433e:	b110      	cbz	r0, 8004346 <_printf_float+0x86>
 8004340:	232d      	movs	r3, #45	; 0x2d
 8004342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004346:	4b92      	ldr	r3, [pc, #584]	; (8004590 <_printf_float+0x2d0>)
 8004348:	4892      	ldr	r0, [pc, #584]	; (8004594 <_printf_float+0x2d4>)
 800434a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800434e:	bf94      	ite	ls
 8004350:	4698      	movls	r8, r3
 8004352:	4680      	movhi	r8, r0
 8004354:	2303      	movs	r3, #3
 8004356:	f04f 0a00 	mov.w	sl, #0
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	f02b 0304 	bic.w	r3, fp, #4
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	4633      	mov	r3, r6
 8004364:	4621      	mov	r1, r4
 8004366:	4628      	mov	r0, r5
 8004368:	9700      	str	r7, [sp, #0]
 800436a:	aa0f      	add	r2, sp, #60	; 0x3c
 800436c:	f000 f9d4 	bl	8004718 <_printf_common>
 8004370:	3001      	adds	r0, #1
 8004372:	f040 8090 	bne.w	8004496 <_printf_float+0x1d6>
 8004376:	f04f 30ff 	mov.w	r0, #4294967295
 800437a:	b011      	add	sp, #68	; 0x44
 800437c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004380:	4642      	mov	r2, r8
 8004382:	4653      	mov	r3, sl
 8004384:	4640      	mov	r0, r8
 8004386:	4651      	mov	r1, sl
 8004388:	f7fc fb40 	bl	8000a0c <__aeabi_dcmpun>
 800438c:	b148      	cbz	r0, 80043a2 <_printf_float+0xe2>
 800438e:	f1ba 0f00 	cmp.w	sl, #0
 8004392:	bfb8      	it	lt
 8004394:	232d      	movlt	r3, #45	; 0x2d
 8004396:	4880      	ldr	r0, [pc, #512]	; (8004598 <_printf_float+0x2d8>)
 8004398:	bfb8      	it	lt
 800439a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800439e:	4b7f      	ldr	r3, [pc, #508]	; (800459c <_printf_float+0x2dc>)
 80043a0:	e7d3      	b.n	800434a <_printf_float+0x8a>
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	d142      	bne.n	8004432 <_printf_float+0x172>
 80043ac:	2306      	movs	r3, #6
 80043ae:	6063      	str	r3, [r4, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	9206      	str	r2, [sp, #24]
 80043b4:	aa0e      	add	r2, sp, #56	; 0x38
 80043b6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80043ba:	aa0d      	add	r2, sp, #52	; 0x34
 80043bc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80043c0:	9203      	str	r2, [sp, #12]
 80043c2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80043c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	4642      	mov	r2, r8
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	4628      	mov	r0, r5
 80043d4:	4653      	mov	r3, sl
 80043d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80043d8:	f7ff fed4 	bl	8004184 <__cvt>
 80043dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043de:	4680      	mov	r8, r0
 80043e0:	2947      	cmp	r1, #71	; 0x47
 80043e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043e4:	d108      	bne.n	80043f8 <_printf_float+0x138>
 80043e6:	1cc8      	adds	r0, r1, #3
 80043e8:	db02      	blt.n	80043f0 <_printf_float+0x130>
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	4299      	cmp	r1, r3
 80043ee:	dd40      	ble.n	8004472 <_printf_float+0x1b2>
 80043f0:	f1a9 0902 	sub.w	r9, r9, #2
 80043f4:	fa5f f989 	uxtb.w	r9, r9
 80043f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043fc:	d81f      	bhi.n	800443e <_printf_float+0x17e>
 80043fe:	464a      	mov	r2, r9
 8004400:	3901      	subs	r1, #1
 8004402:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004406:	910d      	str	r1, [sp, #52]	; 0x34
 8004408:	f7ff ff1b 	bl	8004242 <__exponent>
 800440c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800440e:	4682      	mov	sl, r0
 8004410:	1813      	adds	r3, r2, r0
 8004412:	2a01      	cmp	r2, #1
 8004414:	6123      	str	r3, [r4, #16]
 8004416:	dc02      	bgt.n	800441e <_printf_float+0x15e>
 8004418:	6822      	ldr	r2, [r4, #0]
 800441a:	07d2      	lsls	r2, r2, #31
 800441c:	d501      	bpl.n	8004422 <_printf_float+0x162>
 800441e:	3301      	adds	r3, #1
 8004420:	6123      	str	r3, [r4, #16]
 8004422:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004426:	2b00      	cmp	r3, #0
 8004428:	d09b      	beq.n	8004362 <_printf_float+0xa2>
 800442a:	232d      	movs	r3, #45	; 0x2d
 800442c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004430:	e797      	b.n	8004362 <_printf_float+0xa2>
 8004432:	2947      	cmp	r1, #71	; 0x47
 8004434:	d1bc      	bne.n	80043b0 <_printf_float+0xf0>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ba      	bne.n	80043b0 <_printf_float+0xf0>
 800443a:	2301      	movs	r3, #1
 800443c:	e7b7      	b.n	80043ae <_printf_float+0xee>
 800443e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004442:	d118      	bne.n	8004476 <_printf_float+0x1b6>
 8004444:	2900      	cmp	r1, #0
 8004446:	6863      	ldr	r3, [r4, #4]
 8004448:	dd0b      	ble.n	8004462 <_printf_float+0x1a2>
 800444a:	6121      	str	r1, [r4, #16]
 800444c:	b913      	cbnz	r3, 8004454 <_printf_float+0x194>
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	07d0      	lsls	r0, r2, #31
 8004452:	d502      	bpl.n	800445a <_printf_float+0x19a>
 8004454:	3301      	adds	r3, #1
 8004456:	440b      	add	r3, r1
 8004458:	6123      	str	r3, [r4, #16]
 800445a:	f04f 0a00 	mov.w	sl, #0
 800445e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004460:	e7df      	b.n	8004422 <_printf_float+0x162>
 8004462:	b913      	cbnz	r3, 800446a <_printf_float+0x1aa>
 8004464:	6822      	ldr	r2, [r4, #0]
 8004466:	07d2      	lsls	r2, r2, #31
 8004468:	d501      	bpl.n	800446e <_printf_float+0x1ae>
 800446a:	3302      	adds	r3, #2
 800446c:	e7f4      	b.n	8004458 <_printf_float+0x198>
 800446e:	2301      	movs	r3, #1
 8004470:	e7f2      	b.n	8004458 <_printf_float+0x198>
 8004472:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004478:	4299      	cmp	r1, r3
 800447a:	db05      	blt.n	8004488 <_printf_float+0x1c8>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	6121      	str	r1, [r4, #16]
 8004480:	07d8      	lsls	r0, r3, #31
 8004482:	d5ea      	bpl.n	800445a <_printf_float+0x19a>
 8004484:	1c4b      	adds	r3, r1, #1
 8004486:	e7e7      	b.n	8004458 <_printf_float+0x198>
 8004488:	2900      	cmp	r1, #0
 800448a:	bfcc      	ite	gt
 800448c:	2201      	movgt	r2, #1
 800448e:	f1c1 0202 	rsble	r2, r1, #2
 8004492:	4413      	add	r3, r2
 8004494:	e7e0      	b.n	8004458 <_printf_float+0x198>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	055a      	lsls	r2, r3, #21
 800449a:	d407      	bmi.n	80044ac <_printf_float+0x1ec>
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	4642      	mov	r2, r8
 80044a0:	4631      	mov	r1, r6
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	d12b      	bne.n	8004502 <_printf_float+0x242>
 80044aa:	e764      	b.n	8004376 <_printf_float+0xb6>
 80044ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044b0:	f240 80dd 	bls.w	800466e <_printf_float+0x3ae>
 80044b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044b8:	2200      	movs	r2, #0
 80044ba:	2300      	movs	r3, #0
 80044bc:	f7fc fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d033      	beq.n	800452c <_printf_float+0x26c>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	4a35      	ldr	r2, [pc, #212]	; (80045a0 <_printf_float+0x2e0>)
 80044cc:	47b8      	blx	r7
 80044ce:	3001      	adds	r0, #1
 80044d0:	f43f af51 	beq.w	8004376 <_printf_float+0xb6>
 80044d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044d8:	429a      	cmp	r2, r3
 80044da:	db02      	blt.n	80044e2 <_printf_float+0x222>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	07d8      	lsls	r0, r3, #31
 80044e0:	d50f      	bpl.n	8004502 <_printf_float+0x242>
 80044e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f af42 	beq.w	8004376 <_printf_float+0xb6>
 80044f2:	f04f 0800 	mov.w	r8, #0
 80044f6:	f104 091a 	add.w	r9, r4, #26
 80044fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044fc:	3b01      	subs	r3, #1
 80044fe:	4543      	cmp	r3, r8
 8004500:	dc09      	bgt.n	8004516 <_printf_float+0x256>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	079b      	lsls	r3, r3, #30
 8004506:	f100 8102 	bmi.w	800470e <_printf_float+0x44e>
 800450a:	68e0      	ldr	r0, [r4, #12]
 800450c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800450e:	4298      	cmp	r0, r3
 8004510:	bfb8      	it	lt
 8004512:	4618      	movlt	r0, r3
 8004514:	e731      	b.n	800437a <_printf_float+0xba>
 8004516:	2301      	movs	r3, #1
 8004518:	464a      	mov	r2, r9
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	3001      	adds	r0, #1
 8004522:	f43f af28 	beq.w	8004376 <_printf_float+0xb6>
 8004526:	f108 0801 	add.w	r8, r8, #1
 800452a:	e7e6      	b.n	80044fa <_printf_float+0x23a>
 800452c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800452e:	2b00      	cmp	r3, #0
 8004530:	dc38      	bgt.n	80045a4 <_printf_float+0x2e4>
 8004532:	2301      	movs	r3, #1
 8004534:	4631      	mov	r1, r6
 8004536:	4628      	mov	r0, r5
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <_printf_float+0x2e0>)
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	f43f af1a 	beq.w	8004376 <_printf_float+0xb6>
 8004542:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004546:	4313      	orrs	r3, r2
 8004548:	d102      	bne.n	8004550 <_printf_float+0x290>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	07d9      	lsls	r1, r3, #31
 800454e:	d5d8      	bpl.n	8004502 <_printf_float+0x242>
 8004550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004554:	4631      	mov	r1, r6
 8004556:	4628      	mov	r0, r5
 8004558:	47b8      	blx	r7
 800455a:	3001      	adds	r0, #1
 800455c:	f43f af0b 	beq.w	8004376 <_printf_float+0xb6>
 8004560:	f04f 0900 	mov.w	r9, #0
 8004564:	f104 0a1a 	add.w	sl, r4, #26
 8004568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800456a:	425b      	negs	r3, r3
 800456c:	454b      	cmp	r3, r9
 800456e:	dc01      	bgt.n	8004574 <_printf_float+0x2b4>
 8004570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004572:	e794      	b.n	800449e <_printf_float+0x1de>
 8004574:	2301      	movs	r3, #1
 8004576:	4652      	mov	r2, sl
 8004578:	4631      	mov	r1, r6
 800457a:	4628      	mov	r0, r5
 800457c:	47b8      	blx	r7
 800457e:	3001      	adds	r0, #1
 8004580:	f43f aef9 	beq.w	8004376 <_printf_float+0xb6>
 8004584:	f109 0901 	add.w	r9, r9, #1
 8004588:	e7ee      	b.n	8004568 <_printf_float+0x2a8>
 800458a:	bf00      	nop
 800458c:	7fefffff 	.word	0x7fefffff
 8004590:	08008a78 	.word	0x08008a78
 8004594:	08008a7c 	.word	0x08008a7c
 8004598:	08008a84 	.word	0x08008a84
 800459c:	08008a80 	.word	0x08008a80
 80045a0:	08008a88 	.word	0x08008a88
 80045a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045a8:	429a      	cmp	r2, r3
 80045aa:	bfa8      	it	ge
 80045ac:	461a      	movge	r2, r3
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	4691      	mov	r9, r2
 80045b2:	dc37      	bgt.n	8004624 <_printf_float+0x364>
 80045b4:	f04f 0b00 	mov.w	fp, #0
 80045b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045bc:	f104 021a 	add.w	r2, r4, #26
 80045c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80045c4:	ebaa 0309 	sub.w	r3, sl, r9
 80045c8:	455b      	cmp	r3, fp
 80045ca:	dc33      	bgt.n	8004634 <_printf_float+0x374>
 80045cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045d0:	429a      	cmp	r2, r3
 80045d2:	db3b      	blt.n	800464c <_printf_float+0x38c>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	07da      	lsls	r2, r3, #31
 80045d8:	d438      	bmi.n	800464c <_printf_float+0x38c>
 80045da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045de:	eba3 020a 	sub.w	r2, r3, sl
 80045e2:	eba3 0901 	sub.w	r9, r3, r1
 80045e6:	4591      	cmp	r9, r2
 80045e8:	bfa8      	it	ge
 80045ea:	4691      	movge	r9, r2
 80045ec:	f1b9 0f00 	cmp.w	r9, #0
 80045f0:	dc34      	bgt.n	800465c <_printf_float+0x39c>
 80045f2:	f04f 0800 	mov.w	r8, #0
 80045f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045fa:	f104 0a1a 	add.w	sl, r4, #26
 80045fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	eba3 0309 	sub.w	r3, r3, r9
 8004608:	4543      	cmp	r3, r8
 800460a:	f77f af7a 	ble.w	8004502 <_printf_float+0x242>
 800460e:	2301      	movs	r3, #1
 8004610:	4652      	mov	r2, sl
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	f43f aeac 	beq.w	8004376 <_printf_float+0xb6>
 800461e:	f108 0801 	add.w	r8, r8, #1
 8004622:	e7ec      	b.n	80045fe <_printf_float+0x33e>
 8004624:	4613      	mov	r3, r2
 8004626:	4631      	mov	r1, r6
 8004628:	4642      	mov	r2, r8
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	d1c0      	bne.n	80045b4 <_printf_float+0x2f4>
 8004632:	e6a0      	b.n	8004376 <_printf_float+0xb6>
 8004634:	2301      	movs	r3, #1
 8004636:	4631      	mov	r1, r6
 8004638:	4628      	mov	r0, r5
 800463a:	920b      	str	r2, [sp, #44]	; 0x2c
 800463c:	47b8      	blx	r7
 800463e:	3001      	adds	r0, #1
 8004640:	f43f ae99 	beq.w	8004376 <_printf_float+0xb6>
 8004644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004646:	f10b 0b01 	add.w	fp, fp, #1
 800464a:	e7b9      	b.n	80045c0 <_printf_float+0x300>
 800464c:	4631      	mov	r1, r6
 800464e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004652:	4628      	mov	r0, r5
 8004654:	47b8      	blx	r7
 8004656:	3001      	adds	r0, #1
 8004658:	d1bf      	bne.n	80045da <_printf_float+0x31a>
 800465a:	e68c      	b.n	8004376 <_printf_float+0xb6>
 800465c:	464b      	mov	r3, r9
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	eb08 020a 	add.w	r2, r8, sl
 8004666:	47b8      	blx	r7
 8004668:	3001      	adds	r0, #1
 800466a:	d1c2      	bne.n	80045f2 <_printf_float+0x332>
 800466c:	e683      	b.n	8004376 <_printf_float+0xb6>
 800466e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004670:	2a01      	cmp	r2, #1
 8004672:	dc01      	bgt.n	8004678 <_printf_float+0x3b8>
 8004674:	07db      	lsls	r3, r3, #31
 8004676:	d537      	bpl.n	80046e8 <_printf_float+0x428>
 8004678:	2301      	movs	r3, #1
 800467a:	4642      	mov	r2, r8
 800467c:	4631      	mov	r1, r6
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f ae77 	beq.w	8004376 <_printf_float+0xb6>
 8004688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468c:	4631      	mov	r1, r6
 800468e:	4628      	mov	r0, r5
 8004690:	47b8      	blx	r7
 8004692:	3001      	adds	r0, #1
 8004694:	f43f ae6f 	beq.w	8004376 <_printf_float+0xb6>
 8004698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800469c:	2200      	movs	r2, #0
 800469e:	2300      	movs	r3, #0
 80046a0:	f7fc f982 	bl	80009a8 <__aeabi_dcmpeq>
 80046a4:	b9d8      	cbnz	r0, 80046de <_printf_float+0x41e>
 80046a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046a8:	f108 0201 	add.w	r2, r8, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	d10e      	bne.n	80046d6 <_printf_float+0x416>
 80046b8:	e65d      	b.n	8004376 <_printf_float+0xb6>
 80046ba:	2301      	movs	r3, #1
 80046bc:	464a      	mov	r2, r9
 80046be:	4631      	mov	r1, r6
 80046c0:	4628      	mov	r0, r5
 80046c2:	47b8      	blx	r7
 80046c4:	3001      	adds	r0, #1
 80046c6:	f43f ae56 	beq.w	8004376 <_printf_float+0xb6>
 80046ca:	f108 0801 	add.w	r8, r8, #1
 80046ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046d0:	3b01      	subs	r3, #1
 80046d2:	4543      	cmp	r3, r8
 80046d4:	dcf1      	bgt.n	80046ba <_printf_float+0x3fa>
 80046d6:	4653      	mov	r3, sl
 80046d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80046dc:	e6e0      	b.n	80044a0 <_printf_float+0x1e0>
 80046de:	f04f 0800 	mov.w	r8, #0
 80046e2:	f104 091a 	add.w	r9, r4, #26
 80046e6:	e7f2      	b.n	80046ce <_printf_float+0x40e>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4642      	mov	r2, r8
 80046ec:	e7df      	b.n	80046ae <_printf_float+0x3ee>
 80046ee:	2301      	movs	r3, #1
 80046f0:	464a      	mov	r2, r9
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b8      	blx	r7
 80046f8:	3001      	adds	r0, #1
 80046fa:	f43f ae3c 	beq.w	8004376 <_printf_float+0xb6>
 80046fe:	f108 0801 	add.w	r8, r8, #1
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004706:	1a5b      	subs	r3, r3, r1
 8004708:	4543      	cmp	r3, r8
 800470a:	dcf0      	bgt.n	80046ee <_printf_float+0x42e>
 800470c:	e6fd      	b.n	800450a <_printf_float+0x24a>
 800470e:	f04f 0800 	mov.w	r8, #0
 8004712:	f104 0919 	add.w	r9, r4, #25
 8004716:	e7f4      	b.n	8004702 <_printf_float+0x442>

08004718 <_printf_common>:
 8004718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800471c:	4616      	mov	r6, r2
 800471e:	4699      	mov	r9, r3
 8004720:	688a      	ldr	r2, [r1, #8]
 8004722:	690b      	ldr	r3, [r1, #16]
 8004724:	4607      	mov	r7, r0
 8004726:	4293      	cmp	r3, r2
 8004728:	bfb8      	it	lt
 800472a:	4613      	movlt	r3, r2
 800472c:	6033      	str	r3, [r6, #0]
 800472e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004732:	460c      	mov	r4, r1
 8004734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004738:	b10a      	cbz	r2, 800473e <_printf_common+0x26>
 800473a:	3301      	adds	r3, #1
 800473c:	6033      	str	r3, [r6, #0]
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	0699      	lsls	r1, r3, #26
 8004742:	bf42      	ittt	mi
 8004744:	6833      	ldrmi	r3, [r6, #0]
 8004746:	3302      	addmi	r3, #2
 8004748:	6033      	strmi	r3, [r6, #0]
 800474a:	6825      	ldr	r5, [r4, #0]
 800474c:	f015 0506 	ands.w	r5, r5, #6
 8004750:	d106      	bne.n	8004760 <_printf_common+0x48>
 8004752:	f104 0a19 	add.w	sl, r4, #25
 8004756:	68e3      	ldr	r3, [r4, #12]
 8004758:	6832      	ldr	r2, [r6, #0]
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	42ab      	cmp	r3, r5
 800475e:	dc28      	bgt.n	80047b2 <_printf_common+0x9a>
 8004760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004764:	1e13      	subs	r3, r2, #0
 8004766:	6822      	ldr	r2, [r4, #0]
 8004768:	bf18      	it	ne
 800476a:	2301      	movne	r3, #1
 800476c:	0692      	lsls	r2, r2, #26
 800476e:	d42d      	bmi.n	80047cc <_printf_common+0xb4>
 8004770:	4649      	mov	r1, r9
 8004772:	4638      	mov	r0, r7
 8004774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004778:	47c0      	blx	r8
 800477a:	3001      	adds	r0, #1
 800477c:	d020      	beq.n	80047c0 <_printf_common+0xa8>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	68e5      	ldr	r5, [r4, #12]
 8004782:	f003 0306 	and.w	r3, r3, #6
 8004786:	2b04      	cmp	r3, #4
 8004788:	bf18      	it	ne
 800478a:	2500      	movne	r5, #0
 800478c:	6832      	ldr	r2, [r6, #0]
 800478e:	f04f 0600 	mov.w	r6, #0
 8004792:	68a3      	ldr	r3, [r4, #8]
 8004794:	bf08      	it	eq
 8004796:	1aad      	subeq	r5, r5, r2
 8004798:	6922      	ldr	r2, [r4, #16]
 800479a:	bf08      	it	eq
 800479c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047a0:	4293      	cmp	r3, r2
 80047a2:	bfc4      	itt	gt
 80047a4:	1a9b      	subgt	r3, r3, r2
 80047a6:	18ed      	addgt	r5, r5, r3
 80047a8:	341a      	adds	r4, #26
 80047aa:	42b5      	cmp	r5, r6
 80047ac:	d11a      	bne.n	80047e4 <_printf_common+0xcc>
 80047ae:	2000      	movs	r0, #0
 80047b0:	e008      	b.n	80047c4 <_printf_common+0xac>
 80047b2:	2301      	movs	r3, #1
 80047b4:	4652      	mov	r2, sl
 80047b6:	4649      	mov	r1, r9
 80047b8:	4638      	mov	r0, r7
 80047ba:	47c0      	blx	r8
 80047bc:	3001      	adds	r0, #1
 80047be:	d103      	bne.n	80047c8 <_printf_common+0xb0>
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c8:	3501      	adds	r5, #1
 80047ca:	e7c4      	b.n	8004756 <_printf_common+0x3e>
 80047cc:	2030      	movs	r0, #48	; 0x30
 80047ce:	18e1      	adds	r1, r4, r3
 80047d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047da:	4422      	add	r2, r4
 80047dc:	3302      	adds	r3, #2
 80047de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047e2:	e7c5      	b.n	8004770 <_printf_common+0x58>
 80047e4:	2301      	movs	r3, #1
 80047e6:	4622      	mov	r2, r4
 80047e8:	4649      	mov	r1, r9
 80047ea:	4638      	mov	r0, r7
 80047ec:	47c0      	blx	r8
 80047ee:	3001      	adds	r0, #1
 80047f0:	d0e6      	beq.n	80047c0 <_printf_common+0xa8>
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7d9      	b.n	80047aa <_printf_common+0x92>
	...

080047f8 <_printf_i>:
 80047f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	7e0f      	ldrb	r7, [r1, #24]
 80047fe:	4691      	mov	r9, r2
 8004800:	2f78      	cmp	r7, #120	; 0x78
 8004802:	4680      	mov	r8, r0
 8004804:	460c      	mov	r4, r1
 8004806:	469a      	mov	sl, r3
 8004808:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800480a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800480e:	d807      	bhi.n	8004820 <_printf_i+0x28>
 8004810:	2f62      	cmp	r7, #98	; 0x62
 8004812:	d80a      	bhi.n	800482a <_printf_i+0x32>
 8004814:	2f00      	cmp	r7, #0
 8004816:	f000 80d9 	beq.w	80049cc <_printf_i+0x1d4>
 800481a:	2f58      	cmp	r7, #88	; 0x58
 800481c:	f000 80a4 	beq.w	8004968 <_printf_i+0x170>
 8004820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004828:	e03a      	b.n	80048a0 <_printf_i+0xa8>
 800482a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800482e:	2b15      	cmp	r3, #21
 8004830:	d8f6      	bhi.n	8004820 <_printf_i+0x28>
 8004832:	a101      	add	r1, pc, #4	; (adr r1, 8004838 <_printf_i+0x40>)
 8004834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004838:	08004891 	.word	0x08004891
 800483c:	080048a5 	.word	0x080048a5
 8004840:	08004821 	.word	0x08004821
 8004844:	08004821 	.word	0x08004821
 8004848:	08004821 	.word	0x08004821
 800484c:	08004821 	.word	0x08004821
 8004850:	080048a5 	.word	0x080048a5
 8004854:	08004821 	.word	0x08004821
 8004858:	08004821 	.word	0x08004821
 800485c:	08004821 	.word	0x08004821
 8004860:	08004821 	.word	0x08004821
 8004864:	080049b3 	.word	0x080049b3
 8004868:	080048d5 	.word	0x080048d5
 800486c:	08004995 	.word	0x08004995
 8004870:	08004821 	.word	0x08004821
 8004874:	08004821 	.word	0x08004821
 8004878:	080049d5 	.word	0x080049d5
 800487c:	08004821 	.word	0x08004821
 8004880:	080048d5 	.word	0x080048d5
 8004884:	08004821 	.word	0x08004821
 8004888:	08004821 	.word	0x08004821
 800488c:	0800499d 	.word	0x0800499d
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	1d1a      	adds	r2, r3, #4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	602a      	str	r2, [r5, #0]
 8004898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800489c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0a4      	b.n	80049ee <_printf_i+0x1f6>
 80048a4:	6820      	ldr	r0, [r4, #0]
 80048a6:	6829      	ldr	r1, [r5, #0]
 80048a8:	0606      	lsls	r6, r0, #24
 80048aa:	f101 0304 	add.w	r3, r1, #4
 80048ae:	d50a      	bpl.n	80048c6 <_printf_i+0xce>
 80048b0:	680e      	ldr	r6, [r1, #0]
 80048b2:	602b      	str	r3, [r5, #0]
 80048b4:	2e00      	cmp	r6, #0
 80048b6:	da03      	bge.n	80048c0 <_printf_i+0xc8>
 80048b8:	232d      	movs	r3, #45	; 0x2d
 80048ba:	4276      	negs	r6, r6
 80048bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c0:	230a      	movs	r3, #10
 80048c2:	485e      	ldr	r0, [pc, #376]	; (8004a3c <_printf_i+0x244>)
 80048c4:	e019      	b.n	80048fa <_printf_i+0x102>
 80048c6:	680e      	ldr	r6, [r1, #0]
 80048c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048cc:	602b      	str	r3, [r5, #0]
 80048ce:	bf18      	it	ne
 80048d0:	b236      	sxthne	r6, r6
 80048d2:	e7ef      	b.n	80048b4 <_printf_i+0xbc>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	1d19      	adds	r1, r3, #4
 80048da:	6029      	str	r1, [r5, #0]
 80048dc:	0601      	lsls	r1, r0, #24
 80048de:	d501      	bpl.n	80048e4 <_printf_i+0xec>
 80048e0:	681e      	ldr	r6, [r3, #0]
 80048e2:	e002      	b.n	80048ea <_printf_i+0xf2>
 80048e4:	0646      	lsls	r6, r0, #25
 80048e6:	d5fb      	bpl.n	80048e0 <_printf_i+0xe8>
 80048e8:	881e      	ldrh	r6, [r3, #0]
 80048ea:	2f6f      	cmp	r7, #111	; 0x6f
 80048ec:	bf0c      	ite	eq
 80048ee:	2308      	moveq	r3, #8
 80048f0:	230a      	movne	r3, #10
 80048f2:	4852      	ldr	r0, [pc, #328]	; (8004a3c <_printf_i+0x244>)
 80048f4:	2100      	movs	r1, #0
 80048f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048fa:	6865      	ldr	r5, [r4, #4]
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	bfa8      	it	ge
 8004900:	6821      	ldrge	r1, [r4, #0]
 8004902:	60a5      	str	r5, [r4, #8]
 8004904:	bfa4      	itt	ge
 8004906:	f021 0104 	bicge.w	r1, r1, #4
 800490a:	6021      	strge	r1, [r4, #0]
 800490c:	b90e      	cbnz	r6, 8004912 <_printf_i+0x11a>
 800490e:	2d00      	cmp	r5, #0
 8004910:	d04d      	beq.n	80049ae <_printf_i+0x1b6>
 8004912:	4615      	mov	r5, r2
 8004914:	fbb6 f1f3 	udiv	r1, r6, r3
 8004918:	fb03 6711 	mls	r7, r3, r1, r6
 800491c:	5dc7      	ldrb	r7, [r0, r7]
 800491e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004922:	4637      	mov	r7, r6
 8004924:	42bb      	cmp	r3, r7
 8004926:	460e      	mov	r6, r1
 8004928:	d9f4      	bls.n	8004914 <_printf_i+0x11c>
 800492a:	2b08      	cmp	r3, #8
 800492c:	d10b      	bne.n	8004946 <_printf_i+0x14e>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	07de      	lsls	r6, r3, #31
 8004932:	d508      	bpl.n	8004946 <_printf_i+0x14e>
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	6861      	ldr	r1, [r4, #4]
 8004938:	4299      	cmp	r1, r3
 800493a:	bfde      	ittt	le
 800493c:	2330      	movle	r3, #48	; 0x30
 800493e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004942:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004946:	1b52      	subs	r2, r2, r5
 8004948:	6122      	str	r2, [r4, #16]
 800494a:	464b      	mov	r3, r9
 800494c:	4621      	mov	r1, r4
 800494e:	4640      	mov	r0, r8
 8004950:	f8cd a000 	str.w	sl, [sp]
 8004954:	aa03      	add	r2, sp, #12
 8004956:	f7ff fedf 	bl	8004718 <_printf_common>
 800495a:	3001      	adds	r0, #1
 800495c:	d14c      	bne.n	80049f8 <_printf_i+0x200>
 800495e:	f04f 30ff 	mov.w	r0, #4294967295
 8004962:	b004      	add	sp, #16
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004968:	4834      	ldr	r0, [pc, #208]	; (8004a3c <_printf_i+0x244>)
 800496a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800496e:	6829      	ldr	r1, [r5, #0]
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	f851 6b04 	ldr.w	r6, [r1], #4
 8004976:	6029      	str	r1, [r5, #0]
 8004978:	061d      	lsls	r5, r3, #24
 800497a:	d514      	bpl.n	80049a6 <_printf_i+0x1ae>
 800497c:	07df      	lsls	r7, r3, #31
 800497e:	bf44      	itt	mi
 8004980:	f043 0320 	orrmi.w	r3, r3, #32
 8004984:	6023      	strmi	r3, [r4, #0]
 8004986:	b91e      	cbnz	r6, 8004990 <_printf_i+0x198>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	f023 0320 	bic.w	r3, r3, #32
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	2310      	movs	r3, #16
 8004992:	e7af      	b.n	80048f4 <_printf_i+0xfc>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	f043 0320 	orr.w	r3, r3, #32
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	2378      	movs	r3, #120	; 0x78
 800499e:	4828      	ldr	r0, [pc, #160]	; (8004a40 <_printf_i+0x248>)
 80049a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049a4:	e7e3      	b.n	800496e <_printf_i+0x176>
 80049a6:	0659      	lsls	r1, r3, #25
 80049a8:	bf48      	it	mi
 80049aa:	b2b6      	uxthmi	r6, r6
 80049ac:	e7e6      	b.n	800497c <_printf_i+0x184>
 80049ae:	4615      	mov	r5, r2
 80049b0:	e7bb      	b.n	800492a <_printf_i+0x132>
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	6826      	ldr	r6, [r4, #0]
 80049b6:	1d18      	adds	r0, r3, #4
 80049b8:	6961      	ldr	r1, [r4, #20]
 80049ba:	6028      	str	r0, [r5, #0]
 80049bc:	0635      	lsls	r5, r6, #24
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	d501      	bpl.n	80049c6 <_printf_i+0x1ce>
 80049c2:	6019      	str	r1, [r3, #0]
 80049c4:	e002      	b.n	80049cc <_printf_i+0x1d4>
 80049c6:	0670      	lsls	r0, r6, #25
 80049c8:	d5fb      	bpl.n	80049c2 <_printf_i+0x1ca>
 80049ca:	8019      	strh	r1, [r3, #0]
 80049cc:	2300      	movs	r3, #0
 80049ce:	4615      	mov	r5, r2
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	e7ba      	b.n	800494a <_printf_i+0x152>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	2100      	movs	r1, #0
 80049d8:	1d1a      	adds	r2, r3, #4
 80049da:	602a      	str	r2, [r5, #0]
 80049dc:	681d      	ldr	r5, [r3, #0]
 80049de:	6862      	ldr	r2, [r4, #4]
 80049e0:	4628      	mov	r0, r5
 80049e2:	f002 fc01 	bl	80071e8 <memchr>
 80049e6:	b108      	cbz	r0, 80049ec <_printf_i+0x1f4>
 80049e8:	1b40      	subs	r0, r0, r5
 80049ea:	6060      	str	r0, [r4, #4]
 80049ec:	6863      	ldr	r3, [r4, #4]
 80049ee:	6123      	str	r3, [r4, #16]
 80049f0:	2300      	movs	r3, #0
 80049f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f6:	e7a8      	b.n	800494a <_printf_i+0x152>
 80049f8:	462a      	mov	r2, r5
 80049fa:	4649      	mov	r1, r9
 80049fc:	4640      	mov	r0, r8
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	47d0      	blx	sl
 8004a02:	3001      	adds	r0, #1
 8004a04:	d0ab      	beq.n	800495e <_printf_i+0x166>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	079b      	lsls	r3, r3, #30
 8004a0a:	d413      	bmi.n	8004a34 <_printf_i+0x23c>
 8004a0c:	68e0      	ldr	r0, [r4, #12]
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	4298      	cmp	r0, r3
 8004a12:	bfb8      	it	lt
 8004a14:	4618      	movlt	r0, r3
 8004a16:	e7a4      	b.n	8004962 <_printf_i+0x16a>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4632      	mov	r2, r6
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4640      	mov	r0, r8
 8004a20:	47d0      	blx	sl
 8004a22:	3001      	adds	r0, #1
 8004a24:	d09b      	beq.n	800495e <_printf_i+0x166>
 8004a26:	3501      	adds	r5, #1
 8004a28:	68e3      	ldr	r3, [r4, #12]
 8004a2a:	9903      	ldr	r1, [sp, #12]
 8004a2c:	1a5b      	subs	r3, r3, r1
 8004a2e:	42ab      	cmp	r3, r5
 8004a30:	dcf2      	bgt.n	8004a18 <_printf_i+0x220>
 8004a32:	e7eb      	b.n	8004a0c <_printf_i+0x214>
 8004a34:	2500      	movs	r5, #0
 8004a36:	f104 0619 	add.w	r6, r4, #25
 8004a3a:	e7f5      	b.n	8004a28 <_printf_i+0x230>
 8004a3c:	08008a8a 	.word	0x08008a8a
 8004a40:	08008a9b 	.word	0x08008a9b

08004a44 <_scanf_float>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	b087      	sub	sp, #28
 8004a4a:	9303      	str	r3, [sp, #12]
 8004a4c:	688b      	ldr	r3, [r1, #8]
 8004a4e:	4617      	mov	r7, r2
 8004a50:	1e5a      	subs	r2, r3, #1
 8004a52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004a56:	bf85      	ittet	hi
 8004a58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a5c:	195b      	addhi	r3, r3, r5
 8004a5e:	2300      	movls	r3, #0
 8004a60:	9302      	strhi	r3, [sp, #8]
 8004a62:	bf88      	it	hi
 8004a64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004a68:	468b      	mov	fp, r1
 8004a6a:	f04f 0500 	mov.w	r5, #0
 8004a6e:	bf8c      	ite	hi
 8004a70:	608b      	strhi	r3, [r1, #8]
 8004a72:	9302      	strls	r3, [sp, #8]
 8004a74:	680b      	ldr	r3, [r1, #0]
 8004a76:	4680      	mov	r8, r0
 8004a78:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004a7c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004a80:	460c      	mov	r4, r1
 8004a82:	465e      	mov	r6, fp
 8004a84:	46aa      	mov	sl, r5
 8004a86:	46a9      	mov	r9, r5
 8004a88:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004a8c:	9501      	str	r5, [sp, #4]
 8004a8e:	68a2      	ldr	r2, [r4, #8]
 8004a90:	b152      	cbz	r2, 8004aa8 <_scanf_float+0x64>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b4e      	cmp	r3, #78	; 0x4e
 8004a98:	d864      	bhi.n	8004b64 <_scanf_float+0x120>
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d83c      	bhi.n	8004b18 <_scanf_float+0xd4>
 8004a9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004aa2:	b2c8      	uxtb	r0, r1
 8004aa4:	280e      	cmp	r0, #14
 8004aa6:	d93a      	bls.n	8004b1e <_scanf_float+0xda>
 8004aa8:	f1b9 0f00 	cmp.w	r9, #0
 8004aac:	d003      	beq.n	8004ab6 <_scanf_float+0x72>
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aba:	f1ba 0f01 	cmp.w	sl, #1
 8004abe:	f200 8113 	bhi.w	8004ce8 <_scanf_float+0x2a4>
 8004ac2:	455e      	cmp	r6, fp
 8004ac4:	f200 8105 	bhi.w	8004cd2 <_scanf_float+0x28e>
 8004ac8:	2501      	movs	r5, #1
 8004aca:	4628      	mov	r0, r5
 8004acc:	b007      	add	sp, #28
 8004ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004ad6:	2a0d      	cmp	r2, #13
 8004ad8:	d8e6      	bhi.n	8004aa8 <_scanf_float+0x64>
 8004ada:	a101      	add	r1, pc, #4	; (adr r1, 8004ae0 <_scanf_float+0x9c>)
 8004adc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ae0:	08004c1f 	.word	0x08004c1f
 8004ae4:	08004aa9 	.word	0x08004aa9
 8004ae8:	08004aa9 	.word	0x08004aa9
 8004aec:	08004aa9 	.word	0x08004aa9
 8004af0:	08004c7f 	.word	0x08004c7f
 8004af4:	08004c57 	.word	0x08004c57
 8004af8:	08004aa9 	.word	0x08004aa9
 8004afc:	08004aa9 	.word	0x08004aa9
 8004b00:	08004c2d 	.word	0x08004c2d
 8004b04:	08004aa9 	.word	0x08004aa9
 8004b08:	08004aa9 	.word	0x08004aa9
 8004b0c:	08004aa9 	.word	0x08004aa9
 8004b10:	08004aa9 	.word	0x08004aa9
 8004b14:	08004be5 	.word	0x08004be5
 8004b18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004b1c:	e7db      	b.n	8004ad6 <_scanf_float+0x92>
 8004b1e:	290e      	cmp	r1, #14
 8004b20:	d8c2      	bhi.n	8004aa8 <_scanf_float+0x64>
 8004b22:	a001      	add	r0, pc, #4	; (adr r0, 8004b28 <_scanf_float+0xe4>)
 8004b24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004b28:	08004bd7 	.word	0x08004bd7
 8004b2c:	08004aa9 	.word	0x08004aa9
 8004b30:	08004bd7 	.word	0x08004bd7
 8004b34:	08004c6b 	.word	0x08004c6b
 8004b38:	08004aa9 	.word	0x08004aa9
 8004b3c:	08004b85 	.word	0x08004b85
 8004b40:	08004bc1 	.word	0x08004bc1
 8004b44:	08004bc1 	.word	0x08004bc1
 8004b48:	08004bc1 	.word	0x08004bc1
 8004b4c:	08004bc1 	.word	0x08004bc1
 8004b50:	08004bc1 	.word	0x08004bc1
 8004b54:	08004bc1 	.word	0x08004bc1
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004bc1 	.word	0x08004bc1
 8004b64:	2b6e      	cmp	r3, #110	; 0x6e
 8004b66:	d809      	bhi.n	8004b7c <_scanf_float+0x138>
 8004b68:	2b60      	cmp	r3, #96	; 0x60
 8004b6a:	d8b2      	bhi.n	8004ad2 <_scanf_float+0x8e>
 8004b6c:	2b54      	cmp	r3, #84	; 0x54
 8004b6e:	d077      	beq.n	8004c60 <_scanf_float+0x21c>
 8004b70:	2b59      	cmp	r3, #89	; 0x59
 8004b72:	d199      	bne.n	8004aa8 <_scanf_float+0x64>
 8004b74:	2d07      	cmp	r5, #7
 8004b76:	d197      	bne.n	8004aa8 <_scanf_float+0x64>
 8004b78:	2508      	movs	r5, #8
 8004b7a:	e029      	b.n	8004bd0 <_scanf_float+0x18c>
 8004b7c:	2b74      	cmp	r3, #116	; 0x74
 8004b7e:	d06f      	beq.n	8004c60 <_scanf_float+0x21c>
 8004b80:	2b79      	cmp	r3, #121	; 0x79
 8004b82:	e7f6      	b.n	8004b72 <_scanf_float+0x12e>
 8004b84:	6821      	ldr	r1, [r4, #0]
 8004b86:	05c8      	lsls	r0, r1, #23
 8004b88:	d51a      	bpl.n	8004bc0 <_scanf_float+0x17c>
 8004b8a:	9b02      	ldr	r3, [sp, #8]
 8004b8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004b90:	6021      	str	r1, [r4, #0]
 8004b92:	f109 0901 	add.w	r9, r9, #1
 8004b96:	b11b      	cbz	r3, 8004ba0 <_scanf_float+0x15c>
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	3201      	adds	r2, #1
 8004b9c:	9302      	str	r3, [sp, #8]
 8004b9e:	60a2      	str	r2, [r4, #8]
 8004ba0:	68a3      	ldr	r3, [r4, #8]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	60a3      	str	r3, [r4, #8]
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	6123      	str	r3, [r4, #16]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	f340 8084 	ble.w	8004cc0 <_scanf_float+0x27c>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	e766      	b.n	8004a8e <_scanf_float+0x4a>
 8004bc0:	eb1a 0f05 	cmn.w	sl, r5
 8004bc4:	f47f af70 	bne.w	8004aa8 <_scanf_float+0x64>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004bce:	6022      	str	r2, [r4, #0]
 8004bd0:	f806 3b01 	strb.w	r3, [r6], #1
 8004bd4:	e7e4      	b.n	8004ba0 <_scanf_float+0x15c>
 8004bd6:	6822      	ldr	r2, [r4, #0]
 8004bd8:	0610      	lsls	r0, r2, #24
 8004bda:	f57f af65 	bpl.w	8004aa8 <_scanf_float+0x64>
 8004bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be2:	e7f4      	b.n	8004bce <_scanf_float+0x18a>
 8004be4:	f1ba 0f00 	cmp.w	sl, #0
 8004be8:	d10e      	bne.n	8004c08 <_scanf_float+0x1c4>
 8004bea:	f1b9 0f00 	cmp.w	r9, #0
 8004bee:	d10e      	bne.n	8004c0e <_scanf_float+0x1ca>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004bf6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004bfa:	d108      	bne.n	8004c0e <_scanf_float+0x1ca>
 8004bfc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c00:	f04f 0a01 	mov.w	sl, #1
 8004c04:	6022      	str	r2, [r4, #0]
 8004c06:	e7e3      	b.n	8004bd0 <_scanf_float+0x18c>
 8004c08:	f1ba 0f02 	cmp.w	sl, #2
 8004c0c:	d055      	beq.n	8004cba <_scanf_float+0x276>
 8004c0e:	2d01      	cmp	r5, #1
 8004c10:	d002      	beq.n	8004c18 <_scanf_float+0x1d4>
 8004c12:	2d04      	cmp	r5, #4
 8004c14:	f47f af48 	bne.w	8004aa8 <_scanf_float+0x64>
 8004c18:	3501      	adds	r5, #1
 8004c1a:	b2ed      	uxtb	r5, r5
 8004c1c:	e7d8      	b.n	8004bd0 <_scanf_float+0x18c>
 8004c1e:	f1ba 0f01 	cmp.w	sl, #1
 8004c22:	f47f af41 	bne.w	8004aa8 <_scanf_float+0x64>
 8004c26:	f04f 0a02 	mov.w	sl, #2
 8004c2a:	e7d1      	b.n	8004bd0 <_scanf_float+0x18c>
 8004c2c:	b97d      	cbnz	r5, 8004c4e <_scanf_float+0x20a>
 8004c2e:	f1b9 0f00 	cmp.w	r9, #0
 8004c32:	f47f af3c 	bne.w	8004aae <_scanf_float+0x6a>
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004c3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004c40:	f47f af39 	bne.w	8004ab6 <_scanf_float+0x72>
 8004c44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c48:	2501      	movs	r5, #1
 8004c4a:	6022      	str	r2, [r4, #0]
 8004c4c:	e7c0      	b.n	8004bd0 <_scanf_float+0x18c>
 8004c4e:	2d03      	cmp	r5, #3
 8004c50:	d0e2      	beq.n	8004c18 <_scanf_float+0x1d4>
 8004c52:	2d05      	cmp	r5, #5
 8004c54:	e7de      	b.n	8004c14 <_scanf_float+0x1d0>
 8004c56:	2d02      	cmp	r5, #2
 8004c58:	f47f af26 	bne.w	8004aa8 <_scanf_float+0x64>
 8004c5c:	2503      	movs	r5, #3
 8004c5e:	e7b7      	b.n	8004bd0 <_scanf_float+0x18c>
 8004c60:	2d06      	cmp	r5, #6
 8004c62:	f47f af21 	bne.w	8004aa8 <_scanf_float+0x64>
 8004c66:	2507      	movs	r5, #7
 8004c68:	e7b2      	b.n	8004bd0 <_scanf_float+0x18c>
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	0591      	lsls	r1, r2, #22
 8004c6e:	f57f af1b 	bpl.w	8004aa8 <_scanf_float+0x64>
 8004c72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c7c:	e7a8      	b.n	8004bd0 <_scanf_float+0x18c>
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004c84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004c88:	d006      	beq.n	8004c98 <_scanf_float+0x254>
 8004c8a:	0550      	lsls	r0, r2, #21
 8004c8c:	f57f af0c 	bpl.w	8004aa8 <_scanf_float+0x64>
 8004c90:	f1b9 0f00 	cmp.w	r9, #0
 8004c94:	f43f af0f 	beq.w	8004ab6 <_scanf_float+0x72>
 8004c98:	0591      	lsls	r1, r2, #22
 8004c9a:	bf58      	it	pl
 8004c9c:	9901      	ldrpl	r1, [sp, #4]
 8004c9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ca2:	bf58      	it	pl
 8004ca4:	eba9 0101 	subpl.w	r1, r9, r1
 8004ca8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004cac:	f04f 0900 	mov.w	r9, #0
 8004cb0:	bf58      	it	pl
 8004cb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004cb6:	6022      	str	r2, [r4, #0]
 8004cb8:	e78a      	b.n	8004bd0 <_scanf_float+0x18c>
 8004cba:	f04f 0a03 	mov.w	sl, #3
 8004cbe:	e787      	b.n	8004bd0 <_scanf_float+0x18c>
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004cc8:	4798      	blx	r3
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f43f aedf 	beq.w	8004a8e <_scanf_float+0x4a>
 8004cd0:	e6ea      	b.n	8004aa8 <_scanf_float+0x64>
 8004cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cd6:	463a      	mov	r2, r7
 8004cd8:	4640      	mov	r0, r8
 8004cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cde:	4798      	blx	r3
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	6123      	str	r3, [r4, #16]
 8004ce6:	e6ec      	b.n	8004ac2 <_scanf_float+0x7e>
 8004ce8:	1e6b      	subs	r3, r5, #1
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d825      	bhi.n	8004d3a <_scanf_float+0x2f6>
 8004cee:	2d02      	cmp	r5, #2
 8004cf0:	d836      	bhi.n	8004d60 <_scanf_float+0x31c>
 8004cf2:	455e      	cmp	r6, fp
 8004cf4:	f67f aee8 	bls.w	8004ac8 <_scanf_float+0x84>
 8004cf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cfc:	463a      	mov	r2, r7
 8004cfe:	4640      	mov	r0, r8
 8004d00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d04:	4798      	blx	r3
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	e7f1      	b.n	8004cf2 <_scanf_float+0x2ae>
 8004d0e:	9802      	ldr	r0, [sp, #8]
 8004d10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004d18:	463a      	mov	r2, r7
 8004d1a:	9002      	str	r0, [sp, #8]
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4798      	blx	r3
 8004d20:	6923      	ldr	r3, [r4, #16]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d2a:	fa5f fa8a 	uxtb.w	sl, sl
 8004d2e:	f1ba 0f02 	cmp.w	sl, #2
 8004d32:	d1ec      	bne.n	8004d0e <_scanf_float+0x2ca>
 8004d34:	3d03      	subs	r5, #3
 8004d36:	b2ed      	uxtb	r5, r5
 8004d38:	1b76      	subs	r6, r6, r5
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	05da      	lsls	r2, r3, #23
 8004d3e:	d52f      	bpl.n	8004da0 <_scanf_float+0x35c>
 8004d40:	055b      	lsls	r3, r3, #21
 8004d42:	d510      	bpl.n	8004d66 <_scanf_float+0x322>
 8004d44:	455e      	cmp	r6, fp
 8004d46:	f67f aebf 	bls.w	8004ac8 <_scanf_float+0x84>
 8004d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d4e:	463a      	mov	r2, r7
 8004d50:	4640      	mov	r0, r8
 8004d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d56:	4798      	blx	r3
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	e7f1      	b.n	8004d44 <_scanf_float+0x300>
 8004d60:	46aa      	mov	sl, r5
 8004d62:	9602      	str	r6, [sp, #8]
 8004d64:	e7df      	b.n	8004d26 <_scanf_float+0x2e2>
 8004d66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	2965      	cmp	r1, #101	; 0x65
 8004d6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d72:	f106 35ff 	add.w	r5, r6, #4294967295
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	d00c      	beq.n	8004d94 <_scanf_float+0x350>
 8004d7a:	2945      	cmp	r1, #69	; 0x45
 8004d7c:	d00a      	beq.n	8004d94 <_scanf_float+0x350>
 8004d7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d82:	463a      	mov	r2, r7
 8004d84:	4640      	mov	r0, r8
 8004d86:	4798      	blx	r3
 8004d88:	6923      	ldr	r3, [r4, #16]
 8004d8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	1eb5      	subs	r5, r6, #2
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	463a      	mov	r2, r7
 8004d96:	4640      	mov	r0, r8
 8004d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d9c:	4798      	blx	r3
 8004d9e:	462e      	mov	r6, r5
 8004da0:	6825      	ldr	r5, [r4, #0]
 8004da2:	f015 0510 	ands.w	r5, r5, #16
 8004da6:	d155      	bne.n	8004e54 <_scanf_float+0x410>
 8004da8:	7035      	strb	r5, [r6, #0]
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db4:	d11b      	bne.n	8004dee <_scanf_float+0x3aa>
 8004db6:	9b01      	ldr	r3, [sp, #4]
 8004db8:	454b      	cmp	r3, r9
 8004dba:	eba3 0209 	sub.w	r2, r3, r9
 8004dbe:	d123      	bne.n	8004e08 <_scanf_float+0x3c4>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4659      	mov	r1, fp
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	f000 fe93 	bl	8005af0 <_strtod_r>
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	f012 0f02 	tst.w	r2, #2
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	460f      	mov	r7, r1
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	d021      	beq.n	8004e1e <_scanf_float+0x3da>
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	9903      	ldr	r1, [sp, #12]
 8004dde:	600a      	str	r2, [r1, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	e9c3 6700 	strd	r6, r7, [r3]
 8004de6:	68e3      	ldr	r3, [r4, #12]
 8004de8:	3301      	adds	r3, #1
 8004dea:	60e3      	str	r3, [r4, #12]
 8004dec:	e66d      	b.n	8004aca <_scanf_float+0x86>
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0e5      	beq.n	8004dc0 <_scanf_float+0x37c>
 8004df4:	9905      	ldr	r1, [sp, #20]
 8004df6:	230a      	movs	r3, #10
 8004df8:	462a      	mov	r2, r5
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	3101      	adds	r1, #1
 8004dfe:	f000 fef9 	bl	8005bf4 <_strtol_r>
 8004e02:	9b04      	ldr	r3, [sp, #16]
 8004e04:	9e05      	ldr	r6, [sp, #20]
 8004e06:	1ac2      	subs	r2, r0, r3
 8004e08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004e0c:	429e      	cmp	r6, r3
 8004e0e:	bf28      	it	cs
 8004e10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004e14:	4630      	mov	r0, r6
 8004e16:	4910      	ldr	r1, [pc, #64]	; (8004e58 <_scanf_float+0x414>)
 8004e18:	f000 f83e 	bl	8004e98 <siprintf>
 8004e1c:	e7d0      	b.n	8004dc0 <_scanf_float+0x37c>
 8004e1e:	f012 0f04 	tst.w	r2, #4
 8004e22:	f103 0204 	add.w	r2, r3, #4
 8004e26:	d1d9      	bne.n	8004ddc <_scanf_float+0x398>
 8004e28:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004e2c:	f8cc 2000 	str.w	r2, [ip]
 8004e30:	f8d3 8000 	ldr.w	r8, [r3]
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	f7fb fde8 	bl	8000a0c <__aeabi_dcmpun>
 8004e3c:	b128      	cbz	r0, 8004e4a <_scanf_float+0x406>
 8004e3e:	4807      	ldr	r0, [pc, #28]	; (8004e5c <_scanf_float+0x418>)
 8004e40:	f000 f826 	bl	8004e90 <nanf>
 8004e44:	f8c8 0000 	str.w	r0, [r8]
 8004e48:	e7cd      	b.n	8004de6 <_scanf_float+0x3a2>
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	f7fb fe3b 	bl	8000ac8 <__aeabi_d2f>
 8004e52:	e7f7      	b.n	8004e44 <_scanf_float+0x400>
 8004e54:	2500      	movs	r5, #0
 8004e56:	e638      	b.n	8004aca <_scanf_float+0x86>
 8004e58:	08008aac 	.word	0x08008aac
 8004e5c:	08008f20 	.word	0x08008f20

08004e60 <iprintf>:
 8004e60:	b40f      	push	{r0, r1, r2, r3}
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <iprintf+0x2c>)
 8004e64:	b513      	push	{r0, r1, r4, lr}
 8004e66:	681c      	ldr	r4, [r3, #0]
 8004e68:	b124      	cbz	r4, 8004e74 <iprintf+0x14>
 8004e6a:	69a3      	ldr	r3, [r4, #24]
 8004e6c:	b913      	cbnz	r3, 8004e74 <iprintf+0x14>
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f001 fd94 	bl	800699c <__sinit>
 8004e74:	ab05      	add	r3, sp, #20
 8004e76:	4620      	mov	r0, r4
 8004e78:	9a04      	ldr	r2, [sp, #16]
 8004e7a:	68a1      	ldr	r1, [r4, #8]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	f003 f8fb 	bl	8008078 <_vfiprintf_r>
 8004e82:	b002      	add	sp, #8
 8004e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e88:	b004      	add	sp, #16
 8004e8a:	4770      	bx	lr
 8004e8c:	2000000c 	.word	0x2000000c

08004e90 <nanf>:
 8004e90:	4800      	ldr	r0, [pc, #0]	; (8004e94 <nanf+0x4>)
 8004e92:	4770      	bx	lr
 8004e94:	7fc00000 	.word	0x7fc00000

08004e98 <siprintf>:
 8004e98:	b40e      	push	{r1, r2, r3}
 8004e9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e9e:	b500      	push	{lr}
 8004ea0:	b09c      	sub	sp, #112	; 0x70
 8004ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ea4:	9002      	str	r0, [sp, #8]
 8004ea6:	9006      	str	r0, [sp, #24]
 8004ea8:	9107      	str	r1, [sp, #28]
 8004eaa:	9104      	str	r1, [sp, #16]
 8004eac:	4808      	ldr	r0, [pc, #32]	; (8004ed0 <siprintf+0x38>)
 8004eae:	4909      	ldr	r1, [pc, #36]	; (8004ed4 <siprintf+0x3c>)
 8004eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb4:	9105      	str	r1, [sp, #20]
 8004eb6:	6800      	ldr	r0, [r0, #0]
 8004eb8:	a902      	add	r1, sp, #8
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	f002 ffb4 	bl	8007e28 <_svfiprintf_r>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	9b02      	ldr	r3, [sp, #8]
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	b01c      	add	sp, #112	; 0x70
 8004ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ecc:	b003      	add	sp, #12
 8004ece:	4770      	bx	lr
 8004ed0:	2000000c 	.word	0x2000000c
 8004ed4:	ffff0208 	.word	0xffff0208

08004ed8 <sulp>:
 8004ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004edc:	460f      	mov	r7, r1
 8004ede:	4690      	mov	r8, r2
 8004ee0:	f002 fd0e 	bl	8007900 <__ulp>
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	460d      	mov	r5, r1
 8004ee8:	f1b8 0f00 	cmp.w	r8, #0
 8004eec:	d011      	beq.n	8004f12 <sulp+0x3a>
 8004eee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	dd0b      	ble.n	8004f12 <sulp+0x3a>
 8004efa:	2400      	movs	r4, #0
 8004efc:	051b      	lsls	r3, r3, #20
 8004efe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004f02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004f06:	4622      	mov	r2, r4
 8004f08:	462b      	mov	r3, r5
 8004f0a:	f7fb fae5 	bl	80004d8 <__aeabi_dmul>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	460d      	mov	r5, r1
 8004f12:	4620      	mov	r0, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1a:	0000      	movs	r0, r0
 8004f1c:	0000      	movs	r0, r0
	...

08004f20 <_strtod_l>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	469b      	mov	fp, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	b09f      	sub	sp, #124	; 0x7c
 8004f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2c:	4b9e      	ldr	r3, [pc, #632]	; (80051a8 <_strtod_l+0x288>)
 8004f2e:	4682      	mov	sl, r0
 8004f30:	681f      	ldr	r7, [r3, #0]
 8004f32:	460e      	mov	r6, r1
 8004f34:	4638      	mov	r0, r7
 8004f36:	9215      	str	r2, [sp, #84]	; 0x54
 8004f38:	f7fb f90a 	bl	8000150 <strlen>
 8004f3c:	f04f 0800 	mov.w	r8, #0
 8004f40:	4604      	mov	r4, r0
 8004f42:	f04f 0900 	mov.w	r9, #0
 8004f46:	9619      	str	r6, [sp, #100]	; 0x64
 8004f48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	2a2b      	cmp	r2, #43	; 0x2b
 8004f4e:	d04c      	beq.n	8004fea <_strtod_l+0xca>
 8004f50:	d83a      	bhi.n	8004fc8 <_strtod_l+0xa8>
 8004f52:	2a0d      	cmp	r2, #13
 8004f54:	d833      	bhi.n	8004fbe <_strtod_l+0x9e>
 8004f56:	2a08      	cmp	r2, #8
 8004f58:	d833      	bhi.n	8004fc2 <_strtod_l+0xa2>
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	d03d      	beq.n	8004fda <_strtod_l+0xba>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	930a      	str	r3, [sp, #40]	; 0x28
 8004f62:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004f64:	782b      	ldrb	r3, [r5, #0]
 8004f66:	2b30      	cmp	r3, #48	; 0x30
 8004f68:	f040 80aa 	bne.w	80050c0 <_strtod_l+0x1a0>
 8004f6c:	786b      	ldrb	r3, [r5, #1]
 8004f6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f72:	2b58      	cmp	r3, #88	; 0x58
 8004f74:	d166      	bne.n	8005044 <_strtod_l+0x124>
 8004f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f78:	4650      	mov	r0, sl
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	ab1a      	add	r3, sp, #104	; 0x68
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	4a8a      	ldr	r2, [pc, #552]	; (80051ac <_strtod_l+0x28c>)
 8004f82:	f8cd b008 	str.w	fp, [sp, #8]
 8004f86:	ab1b      	add	r3, sp, #108	; 0x6c
 8004f88:	a919      	add	r1, sp, #100	; 0x64
 8004f8a:	f001 fe0d 	bl	8006ba8 <__gethex>
 8004f8e:	f010 0607 	ands.w	r6, r0, #7
 8004f92:	4604      	mov	r4, r0
 8004f94:	d005      	beq.n	8004fa2 <_strtod_l+0x82>
 8004f96:	2e06      	cmp	r6, #6
 8004f98:	d129      	bne.n	8004fee <_strtod_l+0xce>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	9519      	str	r5, [sp, #100]	; 0x64
 8004fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8004fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f040 858a 	bne.w	8005abe <_strtod_l+0xb9e>
 8004faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fac:	b1d3      	cbz	r3, 8004fe4 <_strtod_l+0xc4>
 8004fae:	4642      	mov	r2, r8
 8004fb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	b01f      	add	sp, #124	; 0x7c
 8004fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbe:	2a20      	cmp	r2, #32
 8004fc0:	d1cd      	bne.n	8004f5e <_strtod_l+0x3e>
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	9319      	str	r3, [sp, #100]	; 0x64
 8004fc6:	e7bf      	b.n	8004f48 <_strtod_l+0x28>
 8004fc8:	2a2d      	cmp	r2, #45	; 0x2d
 8004fca:	d1c8      	bne.n	8004f5e <_strtod_l+0x3e>
 8004fcc:	2201      	movs	r2, #1
 8004fce:	920a      	str	r2, [sp, #40]	; 0x28
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	9219      	str	r2, [sp, #100]	; 0x64
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1c3      	bne.n	8004f62 <_strtod_l+0x42>
 8004fda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fdc:	9619      	str	r6, [sp, #100]	; 0x64
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f040 856b 	bne.w	8005aba <_strtod_l+0xb9a>
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	e7e4      	b.n	8004fb4 <_strtod_l+0x94>
 8004fea:	2200      	movs	r2, #0
 8004fec:	e7ef      	b.n	8004fce <_strtod_l+0xae>
 8004fee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004ff0:	b13a      	cbz	r2, 8005002 <_strtod_l+0xe2>
 8004ff2:	2135      	movs	r1, #53	; 0x35
 8004ff4:	a81c      	add	r0, sp, #112	; 0x70
 8004ff6:	f002 fd87 	bl	8007b08 <__copybits>
 8004ffa:	4650      	mov	r0, sl
 8004ffc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ffe:	f002 f94f 	bl	80072a0 <_Bfree>
 8005002:	3e01      	subs	r6, #1
 8005004:	2e04      	cmp	r6, #4
 8005006:	d806      	bhi.n	8005016 <_strtod_l+0xf6>
 8005008:	e8df f006 	tbb	[pc, r6]
 800500c:	1714030a 	.word	0x1714030a
 8005010:	0a          	.byte	0x0a
 8005011:	00          	.byte	0x00
 8005012:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005016:	0721      	lsls	r1, r4, #28
 8005018:	d5c3      	bpl.n	8004fa2 <_strtod_l+0x82>
 800501a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800501e:	e7c0      	b.n	8004fa2 <_strtod_l+0x82>
 8005020:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005022:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005026:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800502a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800502e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005032:	e7f0      	b.n	8005016 <_strtod_l+0xf6>
 8005034:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80051b0 <_strtod_l+0x290>
 8005038:	e7ed      	b.n	8005016 <_strtod_l+0xf6>
 800503a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800503e:	f04f 38ff 	mov.w	r8, #4294967295
 8005042:	e7e8      	b.n	8005016 <_strtod_l+0xf6>
 8005044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	9219      	str	r2, [sp, #100]	; 0x64
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d0f9      	beq.n	8005044 <_strtod_l+0x124>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0a6      	beq.n	8004fa2 <_strtod_l+0x82>
 8005054:	2301      	movs	r3, #1
 8005056:	9307      	str	r3, [sp, #28]
 8005058:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800505a:	220a      	movs	r2, #10
 800505c:	9308      	str	r3, [sp, #32]
 800505e:	2300      	movs	r3, #0
 8005060:	469b      	mov	fp, r3
 8005062:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005066:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005068:	7805      	ldrb	r5, [r0, #0]
 800506a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800506e:	b2d9      	uxtb	r1, r3
 8005070:	2909      	cmp	r1, #9
 8005072:	d927      	bls.n	80050c4 <_strtod_l+0x1a4>
 8005074:	4622      	mov	r2, r4
 8005076:	4639      	mov	r1, r7
 8005078:	f003 f987 	bl	800838a <strncmp>
 800507c:	2800      	cmp	r0, #0
 800507e:	d033      	beq.n	80050e8 <_strtod_l+0x1c8>
 8005080:	2000      	movs	r0, #0
 8005082:	462a      	mov	r2, r5
 8005084:	465c      	mov	r4, fp
 8005086:	4603      	mov	r3, r0
 8005088:	9004      	str	r0, [sp, #16]
 800508a:	2a65      	cmp	r2, #101	; 0x65
 800508c:	d001      	beq.n	8005092 <_strtod_l+0x172>
 800508e:	2a45      	cmp	r2, #69	; 0x45
 8005090:	d114      	bne.n	80050bc <_strtod_l+0x19c>
 8005092:	b91c      	cbnz	r4, 800509c <_strtod_l+0x17c>
 8005094:	9a07      	ldr	r2, [sp, #28]
 8005096:	4302      	orrs	r2, r0
 8005098:	d09f      	beq.n	8004fda <_strtod_l+0xba>
 800509a:	2400      	movs	r4, #0
 800509c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800509e:	1c72      	adds	r2, r6, #1
 80050a0:	9219      	str	r2, [sp, #100]	; 0x64
 80050a2:	7872      	ldrb	r2, [r6, #1]
 80050a4:	2a2b      	cmp	r2, #43	; 0x2b
 80050a6:	d079      	beq.n	800519c <_strtod_l+0x27c>
 80050a8:	2a2d      	cmp	r2, #45	; 0x2d
 80050aa:	f000 8083 	beq.w	80051b4 <_strtod_l+0x294>
 80050ae:	2700      	movs	r7, #0
 80050b0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80050b4:	2909      	cmp	r1, #9
 80050b6:	f240 8083 	bls.w	80051c0 <_strtod_l+0x2a0>
 80050ba:	9619      	str	r6, [sp, #100]	; 0x64
 80050bc:	2500      	movs	r5, #0
 80050be:	e09f      	b.n	8005200 <_strtod_l+0x2e0>
 80050c0:	2300      	movs	r3, #0
 80050c2:	e7c8      	b.n	8005056 <_strtod_l+0x136>
 80050c4:	f1bb 0f08 	cmp.w	fp, #8
 80050c8:	bfd5      	itete	le
 80050ca:	9906      	ldrle	r1, [sp, #24]
 80050cc:	9905      	ldrgt	r1, [sp, #20]
 80050ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80050d2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80050d6:	f100 0001 	add.w	r0, r0, #1
 80050da:	bfd4      	ite	le
 80050dc:	9306      	strle	r3, [sp, #24]
 80050de:	9305      	strgt	r3, [sp, #20]
 80050e0:	f10b 0b01 	add.w	fp, fp, #1
 80050e4:	9019      	str	r0, [sp, #100]	; 0x64
 80050e6:	e7be      	b.n	8005066 <_strtod_l+0x146>
 80050e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050ea:	191a      	adds	r2, r3, r4
 80050ec:	9219      	str	r2, [sp, #100]	; 0x64
 80050ee:	5d1a      	ldrb	r2, [r3, r4]
 80050f0:	f1bb 0f00 	cmp.w	fp, #0
 80050f4:	d036      	beq.n	8005164 <_strtod_l+0x244>
 80050f6:	465c      	mov	r4, fp
 80050f8:	9004      	str	r0, [sp, #16]
 80050fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d912      	bls.n	8005128 <_strtod_l+0x208>
 8005102:	2301      	movs	r3, #1
 8005104:	e7c1      	b.n	800508a <_strtod_l+0x16a>
 8005106:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005108:	3001      	adds	r0, #1
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	9219      	str	r2, [sp, #100]	; 0x64
 800510e:	785a      	ldrb	r2, [r3, #1]
 8005110:	2a30      	cmp	r2, #48	; 0x30
 8005112:	d0f8      	beq.n	8005106 <_strtod_l+0x1e6>
 8005114:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005118:	2b08      	cmp	r3, #8
 800511a:	f200 84d5 	bhi.w	8005ac8 <_strtod_l+0xba8>
 800511e:	9004      	str	r0, [sp, #16]
 8005120:	2000      	movs	r0, #0
 8005122:	4604      	mov	r4, r0
 8005124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005126:	9308      	str	r3, [sp, #32]
 8005128:	3a30      	subs	r2, #48	; 0x30
 800512a:	f100 0301 	add.w	r3, r0, #1
 800512e:	d013      	beq.n	8005158 <_strtod_l+0x238>
 8005130:	9904      	ldr	r1, [sp, #16]
 8005132:	1905      	adds	r5, r0, r4
 8005134:	4419      	add	r1, r3
 8005136:	9104      	str	r1, [sp, #16]
 8005138:	4623      	mov	r3, r4
 800513a:	210a      	movs	r1, #10
 800513c:	42ab      	cmp	r3, r5
 800513e:	d113      	bne.n	8005168 <_strtod_l+0x248>
 8005140:	1823      	adds	r3, r4, r0
 8005142:	2b08      	cmp	r3, #8
 8005144:	f104 0401 	add.w	r4, r4, #1
 8005148:	4404      	add	r4, r0
 800514a:	dc1b      	bgt.n	8005184 <_strtod_l+0x264>
 800514c:	230a      	movs	r3, #10
 800514e:	9906      	ldr	r1, [sp, #24]
 8005150:	fb03 2301 	mla	r3, r3, r1, r2
 8005154:	9306      	str	r3, [sp, #24]
 8005156:	2300      	movs	r3, #0
 8005158:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800515a:	4618      	mov	r0, r3
 800515c:	1c51      	adds	r1, r2, #1
 800515e:	9119      	str	r1, [sp, #100]	; 0x64
 8005160:	7852      	ldrb	r2, [r2, #1]
 8005162:	e7ca      	b.n	80050fa <_strtod_l+0x1da>
 8005164:	4658      	mov	r0, fp
 8005166:	e7d3      	b.n	8005110 <_strtod_l+0x1f0>
 8005168:	2b08      	cmp	r3, #8
 800516a:	dc04      	bgt.n	8005176 <_strtod_l+0x256>
 800516c:	9f06      	ldr	r7, [sp, #24]
 800516e:	434f      	muls	r7, r1
 8005170:	9706      	str	r7, [sp, #24]
 8005172:	3301      	adds	r3, #1
 8005174:	e7e2      	b.n	800513c <_strtod_l+0x21c>
 8005176:	1c5f      	adds	r7, r3, #1
 8005178:	2f10      	cmp	r7, #16
 800517a:	bfde      	ittt	le
 800517c:	9f05      	ldrle	r7, [sp, #20]
 800517e:	434f      	mulle	r7, r1
 8005180:	9705      	strle	r7, [sp, #20]
 8005182:	e7f6      	b.n	8005172 <_strtod_l+0x252>
 8005184:	2c10      	cmp	r4, #16
 8005186:	bfdf      	itttt	le
 8005188:	230a      	movle	r3, #10
 800518a:	9905      	ldrle	r1, [sp, #20]
 800518c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005190:	9305      	strle	r3, [sp, #20]
 8005192:	e7e0      	b.n	8005156 <_strtod_l+0x236>
 8005194:	2300      	movs	r3, #0
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	2301      	movs	r3, #1
 800519a:	e77b      	b.n	8005094 <_strtod_l+0x174>
 800519c:	2700      	movs	r7, #0
 800519e:	1cb2      	adds	r2, r6, #2
 80051a0:	9219      	str	r2, [sp, #100]	; 0x64
 80051a2:	78b2      	ldrb	r2, [r6, #2]
 80051a4:	e784      	b.n	80050b0 <_strtod_l+0x190>
 80051a6:	bf00      	nop
 80051a8:	08008d64 	.word	0x08008d64
 80051ac:	08008ab4 	.word	0x08008ab4
 80051b0:	7ff00000 	.word	0x7ff00000
 80051b4:	2701      	movs	r7, #1
 80051b6:	e7f2      	b.n	800519e <_strtod_l+0x27e>
 80051b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051ba:	1c51      	adds	r1, r2, #1
 80051bc:	9119      	str	r1, [sp, #100]	; 0x64
 80051be:	7852      	ldrb	r2, [r2, #1]
 80051c0:	2a30      	cmp	r2, #48	; 0x30
 80051c2:	d0f9      	beq.n	80051b8 <_strtod_l+0x298>
 80051c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80051c8:	2908      	cmp	r1, #8
 80051ca:	f63f af77 	bhi.w	80050bc <_strtod_l+0x19c>
 80051ce:	f04f 0e0a 	mov.w	lr, #10
 80051d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80051d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051d8:	9209      	str	r2, [sp, #36]	; 0x24
 80051da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051dc:	1c51      	adds	r1, r2, #1
 80051de:	9119      	str	r1, [sp, #100]	; 0x64
 80051e0:	7852      	ldrb	r2, [r2, #1]
 80051e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80051e6:	2d09      	cmp	r5, #9
 80051e8:	d935      	bls.n	8005256 <_strtod_l+0x336>
 80051ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051ec:	1b49      	subs	r1, r1, r5
 80051ee:	2908      	cmp	r1, #8
 80051f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80051f4:	dc02      	bgt.n	80051fc <_strtod_l+0x2dc>
 80051f6:	4565      	cmp	r5, ip
 80051f8:	bfa8      	it	ge
 80051fa:	4665      	movge	r5, ip
 80051fc:	b107      	cbz	r7, 8005200 <_strtod_l+0x2e0>
 80051fe:	426d      	negs	r5, r5
 8005200:	2c00      	cmp	r4, #0
 8005202:	d14c      	bne.n	800529e <_strtod_l+0x37e>
 8005204:	9907      	ldr	r1, [sp, #28]
 8005206:	4301      	orrs	r1, r0
 8005208:	f47f aecb 	bne.w	8004fa2 <_strtod_l+0x82>
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f aee4 	bne.w	8004fda <_strtod_l+0xba>
 8005212:	2a69      	cmp	r2, #105	; 0x69
 8005214:	d026      	beq.n	8005264 <_strtod_l+0x344>
 8005216:	dc23      	bgt.n	8005260 <_strtod_l+0x340>
 8005218:	2a49      	cmp	r2, #73	; 0x49
 800521a:	d023      	beq.n	8005264 <_strtod_l+0x344>
 800521c:	2a4e      	cmp	r2, #78	; 0x4e
 800521e:	f47f aedc 	bne.w	8004fda <_strtod_l+0xba>
 8005222:	499d      	ldr	r1, [pc, #628]	; (8005498 <_strtod_l+0x578>)
 8005224:	a819      	add	r0, sp, #100	; 0x64
 8005226:	f001 ff0d 	bl	8007044 <__match>
 800522a:	2800      	cmp	r0, #0
 800522c:	f43f aed5 	beq.w	8004fda <_strtod_l+0xba>
 8005230:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b28      	cmp	r3, #40	; 0x28
 8005236:	d12c      	bne.n	8005292 <_strtod_l+0x372>
 8005238:	4998      	ldr	r1, [pc, #608]	; (800549c <_strtod_l+0x57c>)
 800523a:	aa1c      	add	r2, sp, #112	; 0x70
 800523c:	a819      	add	r0, sp, #100	; 0x64
 800523e:	f001 ff15 	bl	800706c <__hexnan>
 8005242:	2805      	cmp	r0, #5
 8005244:	d125      	bne.n	8005292 <_strtod_l+0x372>
 8005246:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005248:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800524c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005250:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005254:	e6a5      	b.n	8004fa2 <_strtod_l+0x82>
 8005256:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800525a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800525e:	e7bc      	b.n	80051da <_strtod_l+0x2ba>
 8005260:	2a6e      	cmp	r2, #110	; 0x6e
 8005262:	e7dc      	b.n	800521e <_strtod_l+0x2fe>
 8005264:	498e      	ldr	r1, [pc, #568]	; (80054a0 <_strtod_l+0x580>)
 8005266:	a819      	add	r0, sp, #100	; 0x64
 8005268:	f001 feec 	bl	8007044 <__match>
 800526c:	2800      	cmp	r0, #0
 800526e:	f43f aeb4 	beq.w	8004fda <_strtod_l+0xba>
 8005272:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005274:	498b      	ldr	r1, [pc, #556]	; (80054a4 <_strtod_l+0x584>)
 8005276:	3b01      	subs	r3, #1
 8005278:	a819      	add	r0, sp, #100	; 0x64
 800527a:	9319      	str	r3, [sp, #100]	; 0x64
 800527c:	f001 fee2 	bl	8007044 <__match>
 8005280:	b910      	cbnz	r0, 8005288 <_strtod_l+0x368>
 8005282:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005284:	3301      	adds	r3, #1
 8005286:	9319      	str	r3, [sp, #100]	; 0x64
 8005288:	f04f 0800 	mov.w	r8, #0
 800528c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80054a8 <_strtod_l+0x588>
 8005290:	e687      	b.n	8004fa2 <_strtod_l+0x82>
 8005292:	4886      	ldr	r0, [pc, #536]	; (80054ac <_strtod_l+0x58c>)
 8005294:	f003 f820 	bl	80082d8 <nan>
 8005298:	4680      	mov	r8, r0
 800529a:	4689      	mov	r9, r1
 800529c:	e681      	b.n	8004fa2 <_strtod_l+0x82>
 800529e:	9b04      	ldr	r3, [sp, #16]
 80052a0:	f1bb 0f00 	cmp.w	fp, #0
 80052a4:	bf08      	it	eq
 80052a6:	46a3      	moveq	fp, r4
 80052a8:	1aeb      	subs	r3, r5, r3
 80052aa:	2c10      	cmp	r4, #16
 80052ac:	9806      	ldr	r0, [sp, #24]
 80052ae:	4626      	mov	r6, r4
 80052b0:	9307      	str	r3, [sp, #28]
 80052b2:	bfa8      	it	ge
 80052b4:	2610      	movge	r6, #16
 80052b6:	f7fb f895 	bl	80003e4 <__aeabi_ui2d>
 80052ba:	2c09      	cmp	r4, #9
 80052bc:	4680      	mov	r8, r0
 80052be:	4689      	mov	r9, r1
 80052c0:	dd13      	ble.n	80052ea <_strtod_l+0x3ca>
 80052c2:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <_strtod_l+0x590>)
 80052c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80052c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80052cc:	f7fb f904 	bl	80004d8 <__aeabi_dmul>
 80052d0:	4680      	mov	r8, r0
 80052d2:	9805      	ldr	r0, [sp, #20]
 80052d4:	4689      	mov	r9, r1
 80052d6:	f7fb f885 	bl	80003e4 <__aeabi_ui2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4640      	mov	r0, r8
 80052e0:	4649      	mov	r1, r9
 80052e2:	f7fa ff43 	bl	800016c <__adddf3>
 80052e6:	4680      	mov	r8, r0
 80052e8:	4689      	mov	r9, r1
 80052ea:	2c0f      	cmp	r4, #15
 80052ec:	dc36      	bgt.n	800535c <_strtod_l+0x43c>
 80052ee:	9b07      	ldr	r3, [sp, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f43f ae56 	beq.w	8004fa2 <_strtod_l+0x82>
 80052f6:	dd22      	ble.n	800533e <_strtod_l+0x41e>
 80052f8:	2b16      	cmp	r3, #22
 80052fa:	dc09      	bgt.n	8005310 <_strtod_l+0x3f0>
 80052fc:	496c      	ldr	r1, [pc, #432]	; (80054b0 <_strtod_l+0x590>)
 80052fe:	4642      	mov	r2, r8
 8005300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005304:	464b      	mov	r3, r9
 8005306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800530a:	f7fb f8e5 	bl	80004d8 <__aeabi_dmul>
 800530e:	e7c3      	b.n	8005298 <_strtod_l+0x378>
 8005310:	9a07      	ldr	r2, [sp, #28]
 8005312:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005316:	4293      	cmp	r3, r2
 8005318:	db20      	blt.n	800535c <_strtod_l+0x43c>
 800531a:	4d65      	ldr	r5, [pc, #404]	; (80054b0 <_strtod_l+0x590>)
 800531c:	f1c4 040f 	rsb	r4, r4, #15
 8005320:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005324:	4642      	mov	r2, r8
 8005326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800532a:	464b      	mov	r3, r9
 800532c:	f7fb f8d4 	bl	80004d8 <__aeabi_dmul>
 8005330:	9b07      	ldr	r3, [sp, #28]
 8005332:	1b1c      	subs	r4, r3, r4
 8005334:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800533c:	e7e5      	b.n	800530a <_strtod_l+0x3ea>
 800533e:	9b07      	ldr	r3, [sp, #28]
 8005340:	3316      	adds	r3, #22
 8005342:	db0b      	blt.n	800535c <_strtod_l+0x43c>
 8005344:	9b04      	ldr	r3, [sp, #16]
 8005346:	4640      	mov	r0, r8
 8005348:	1b5d      	subs	r5, r3, r5
 800534a:	4b59      	ldr	r3, [pc, #356]	; (80054b0 <_strtod_l+0x590>)
 800534c:	4649      	mov	r1, r9
 800534e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005352:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005356:	f7fb f9e9 	bl	800072c <__aeabi_ddiv>
 800535a:	e79d      	b.n	8005298 <_strtod_l+0x378>
 800535c:	9b07      	ldr	r3, [sp, #28]
 800535e:	1ba6      	subs	r6, r4, r6
 8005360:	441e      	add	r6, r3
 8005362:	2e00      	cmp	r6, #0
 8005364:	dd74      	ble.n	8005450 <_strtod_l+0x530>
 8005366:	f016 030f 	ands.w	r3, r6, #15
 800536a:	d00a      	beq.n	8005382 <_strtod_l+0x462>
 800536c:	4950      	ldr	r1, [pc, #320]	; (80054b0 <_strtod_l+0x590>)
 800536e:	4642      	mov	r2, r8
 8005370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005378:	464b      	mov	r3, r9
 800537a:	f7fb f8ad 	bl	80004d8 <__aeabi_dmul>
 800537e:	4680      	mov	r8, r0
 8005380:	4689      	mov	r9, r1
 8005382:	f036 060f 	bics.w	r6, r6, #15
 8005386:	d052      	beq.n	800542e <_strtod_l+0x50e>
 8005388:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800538c:	dd27      	ble.n	80053de <_strtod_l+0x4be>
 800538e:	f04f 0b00 	mov.w	fp, #0
 8005392:	f8cd b010 	str.w	fp, [sp, #16]
 8005396:	f8cd b020 	str.w	fp, [sp, #32]
 800539a:	f8cd b018 	str.w	fp, [sp, #24]
 800539e:	2322      	movs	r3, #34	; 0x22
 80053a0:	f04f 0800 	mov.w	r8, #0
 80053a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80054a8 <_strtod_l+0x588>
 80053a8:	f8ca 3000 	str.w	r3, [sl]
 80053ac:	9b08      	ldr	r3, [sp, #32]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f43f adf7 	beq.w	8004fa2 <_strtod_l+0x82>
 80053b4:	4650      	mov	r0, sl
 80053b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80053b8:	f001 ff72 	bl	80072a0 <_Bfree>
 80053bc:	4650      	mov	r0, sl
 80053be:	9906      	ldr	r1, [sp, #24]
 80053c0:	f001 ff6e 	bl	80072a0 <_Bfree>
 80053c4:	4650      	mov	r0, sl
 80053c6:	9904      	ldr	r1, [sp, #16]
 80053c8:	f001 ff6a 	bl	80072a0 <_Bfree>
 80053cc:	4650      	mov	r0, sl
 80053ce:	9908      	ldr	r1, [sp, #32]
 80053d0:	f001 ff66 	bl	80072a0 <_Bfree>
 80053d4:	4659      	mov	r1, fp
 80053d6:	4650      	mov	r0, sl
 80053d8:	f001 ff62 	bl	80072a0 <_Bfree>
 80053dc:	e5e1      	b.n	8004fa2 <_strtod_l+0x82>
 80053de:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <_strtod_l+0x594>)
 80053e0:	4640      	mov	r0, r8
 80053e2:	9305      	str	r3, [sp, #20]
 80053e4:	2300      	movs	r3, #0
 80053e6:	4649      	mov	r1, r9
 80053e8:	461f      	mov	r7, r3
 80053ea:	1136      	asrs	r6, r6, #4
 80053ec:	2e01      	cmp	r6, #1
 80053ee:	dc21      	bgt.n	8005434 <_strtod_l+0x514>
 80053f0:	b10b      	cbz	r3, 80053f6 <_strtod_l+0x4d6>
 80053f2:	4680      	mov	r8, r0
 80053f4:	4689      	mov	r9, r1
 80053f6:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <_strtod_l+0x594>)
 80053f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80053fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005400:	4642      	mov	r2, r8
 8005402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005406:	464b      	mov	r3, r9
 8005408:	f7fb f866 	bl	80004d8 <__aeabi_dmul>
 800540c:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <_strtod_l+0x588>)
 800540e:	460a      	mov	r2, r1
 8005410:	400b      	ands	r3, r1
 8005412:	4929      	ldr	r1, [pc, #164]	; (80054b8 <_strtod_l+0x598>)
 8005414:	4680      	mov	r8, r0
 8005416:	428b      	cmp	r3, r1
 8005418:	d8b9      	bhi.n	800538e <_strtod_l+0x46e>
 800541a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800541e:	428b      	cmp	r3, r1
 8005420:	bf86      	itte	hi
 8005422:	f04f 38ff 	movhi.w	r8, #4294967295
 8005426:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80054bc <_strtod_l+0x59c>
 800542a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800542e:	2300      	movs	r3, #0
 8005430:	9305      	str	r3, [sp, #20]
 8005432:	e07f      	b.n	8005534 <_strtod_l+0x614>
 8005434:	07f2      	lsls	r2, r6, #31
 8005436:	d505      	bpl.n	8005444 <_strtod_l+0x524>
 8005438:	9b05      	ldr	r3, [sp, #20]
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fb f84b 	bl	80004d8 <__aeabi_dmul>
 8005442:	2301      	movs	r3, #1
 8005444:	9a05      	ldr	r2, [sp, #20]
 8005446:	3701      	adds	r7, #1
 8005448:	3208      	adds	r2, #8
 800544a:	1076      	asrs	r6, r6, #1
 800544c:	9205      	str	r2, [sp, #20]
 800544e:	e7cd      	b.n	80053ec <_strtod_l+0x4cc>
 8005450:	d0ed      	beq.n	800542e <_strtod_l+0x50e>
 8005452:	4276      	negs	r6, r6
 8005454:	f016 020f 	ands.w	r2, r6, #15
 8005458:	d00a      	beq.n	8005470 <_strtod_l+0x550>
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <_strtod_l+0x590>)
 800545c:	4640      	mov	r0, r8
 800545e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005462:	4649      	mov	r1, r9
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fb f960 	bl	800072c <__aeabi_ddiv>
 800546c:	4680      	mov	r8, r0
 800546e:	4689      	mov	r9, r1
 8005470:	1136      	asrs	r6, r6, #4
 8005472:	d0dc      	beq.n	800542e <_strtod_l+0x50e>
 8005474:	2e1f      	cmp	r6, #31
 8005476:	dd23      	ble.n	80054c0 <_strtod_l+0x5a0>
 8005478:	f04f 0b00 	mov.w	fp, #0
 800547c:	f8cd b010 	str.w	fp, [sp, #16]
 8005480:	f8cd b020 	str.w	fp, [sp, #32]
 8005484:	f8cd b018 	str.w	fp, [sp, #24]
 8005488:	2322      	movs	r3, #34	; 0x22
 800548a:	f04f 0800 	mov.w	r8, #0
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	f8ca 3000 	str.w	r3, [sl]
 8005496:	e789      	b.n	80053ac <_strtod_l+0x48c>
 8005498:	08008a85 	.word	0x08008a85
 800549c:	08008ac8 	.word	0x08008ac8
 80054a0:	08008a7d 	.word	0x08008a7d
 80054a4:	08008c0c 	.word	0x08008c0c
 80054a8:	7ff00000 	.word	0x7ff00000
 80054ac:	08008f20 	.word	0x08008f20
 80054b0:	08008e00 	.word	0x08008e00
 80054b4:	08008dd8 	.word	0x08008dd8
 80054b8:	7ca00000 	.word	0x7ca00000
 80054bc:	7fefffff 	.word	0x7fefffff
 80054c0:	f016 0310 	ands.w	r3, r6, #16
 80054c4:	bf18      	it	ne
 80054c6:	236a      	movne	r3, #106	; 0x6a
 80054c8:	4640      	mov	r0, r8
 80054ca:	9305      	str	r3, [sp, #20]
 80054cc:	4649      	mov	r1, r9
 80054ce:	2300      	movs	r3, #0
 80054d0:	4fb0      	ldr	r7, [pc, #704]	; (8005794 <_strtod_l+0x874>)
 80054d2:	07f2      	lsls	r2, r6, #31
 80054d4:	d504      	bpl.n	80054e0 <_strtod_l+0x5c0>
 80054d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054da:	f7fa fffd 	bl	80004d8 <__aeabi_dmul>
 80054de:	2301      	movs	r3, #1
 80054e0:	1076      	asrs	r6, r6, #1
 80054e2:	f107 0708 	add.w	r7, r7, #8
 80054e6:	d1f4      	bne.n	80054d2 <_strtod_l+0x5b2>
 80054e8:	b10b      	cbz	r3, 80054ee <_strtod_l+0x5ce>
 80054ea:	4680      	mov	r8, r0
 80054ec:	4689      	mov	r9, r1
 80054ee:	9b05      	ldr	r3, [sp, #20]
 80054f0:	b1c3      	cbz	r3, 8005524 <_strtod_l+0x604>
 80054f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80054f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	4649      	mov	r1, r9
 80054fe:	dd11      	ble.n	8005524 <_strtod_l+0x604>
 8005500:	2b1f      	cmp	r3, #31
 8005502:	f340 8127 	ble.w	8005754 <_strtod_l+0x834>
 8005506:	2b34      	cmp	r3, #52	; 0x34
 8005508:	bfd8      	it	le
 800550a:	f04f 33ff 	movle.w	r3, #4294967295
 800550e:	f04f 0800 	mov.w	r8, #0
 8005512:	bfcf      	iteee	gt
 8005514:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005518:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800551c:	fa03 f202 	lslle.w	r2, r3, r2
 8005520:	ea02 0901 	andle.w	r9, r2, r1
 8005524:	2200      	movs	r2, #0
 8005526:	2300      	movs	r3, #0
 8005528:	4640      	mov	r0, r8
 800552a:	4649      	mov	r1, r9
 800552c:	f7fb fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005530:	2800      	cmp	r0, #0
 8005532:	d1a1      	bne.n	8005478 <_strtod_l+0x558>
 8005534:	9b06      	ldr	r3, [sp, #24]
 8005536:	465a      	mov	r2, fp
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	4650      	mov	r0, sl
 800553c:	4623      	mov	r3, r4
 800553e:	9908      	ldr	r1, [sp, #32]
 8005540:	f001 ff16 	bl	8007370 <__s2b>
 8005544:	9008      	str	r0, [sp, #32]
 8005546:	2800      	cmp	r0, #0
 8005548:	f43f af21 	beq.w	800538e <_strtod_l+0x46e>
 800554c:	9b04      	ldr	r3, [sp, #16]
 800554e:	f04f 0b00 	mov.w	fp, #0
 8005552:	1b5d      	subs	r5, r3, r5
 8005554:	9b07      	ldr	r3, [sp, #28]
 8005556:	f8cd b010 	str.w	fp, [sp, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfb4      	ite	lt
 800555e:	462b      	movlt	r3, r5
 8005560:	2300      	movge	r3, #0
 8005562:	930e      	str	r3, [sp, #56]	; 0x38
 8005564:	9b07      	ldr	r3, [sp, #28]
 8005566:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800556a:	9314      	str	r3, [sp, #80]	; 0x50
 800556c:	9b08      	ldr	r3, [sp, #32]
 800556e:	4650      	mov	r0, sl
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	f001 fe55 	bl	8007220 <_Balloc>
 8005576:	9006      	str	r0, [sp, #24]
 8005578:	2800      	cmp	r0, #0
 800557a:	f43f af10 	beq.w	800539e <_strtod_l+0x47e>
 800557e:	9b08      	ldr	r3, [sp, #32]
 8005580:	300c      	adds	r0, #12
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	f103 010c 	add.w	r1, r3, #12
 8005588:	3202      	adds	r2, #2
 800558a:	0092      	lsls	r2, r2, #2
 800558c:	f001 fe3a 	bl	8007204 <memcpy>
 8005590:	ab1c      	add	r3, sp, #112	; 0x70
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	ab1b      	add	r3, sp, #108	; 0x6c
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	4650      	mov	r0, sl
 800559e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80055a2:	f002 fa27 	bl	80079f4 <__d2b>
 80055a6:	901a      	str	r0, [sp, #104]	; 0x68
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f43f aef8 	beq.w	800539e <_strtod_l+0x47e>
 80055ae:	2101      	movs	r1, #1
 80055b0:	4650      	mov	r0, sl
 80055b2:	f001 ff75 	bl	80074a0 <__i2b>
 80055b6:	4603      	mov	r3, r0
 80055b8:	9004      	str	r0, [sp, #16]
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f43f aeef 	beq.w	800539e <_strtod_l+0x47e>
 80055c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80055c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80055c4:	2d00      	cmp	r5, #0
 80055c6:	bfab      	itete	ge
 80055c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80055ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80055cc:	18ee      	addge	r6, r5, r3
 80055ce:	1b5c      	sublt	r4, r3, r5
 80055d0:	9b05      	ldr	r3, [sp, #20]
 80055d2:	bfa8      	it	ge
 80055d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80055d6:	eba5 0503 	sub.w	r5, r5, r3
 80055da:	4415      	add	r5, r2
 80055dc:	4b6e      	ldr	r3, [pc, #440]	; (8005798 <_strtod_l+0x878>)
 80055de:	f105 35ff 	add.w	r5, r5, #4294967295
 80055e2:	bfb8      	it	lt
 80055e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80055e6:	429d      	cmp	r5, r3
 80055e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80055ec:	f280 80c4 	bge.w	8005778 <_strtod_l+0x858>
 80055f0:	1b5b      	subs	r3, r3, r5
 80055f2:	2b1f      	cmp	r3, #31
 80055f4:	f04f 0701 	mov.w	r7, #1
 80055f8:	eba2 0203 	sub.w	r2, r2, r3
 80055fc:	f300 80b1 	bgt.w	8005762 <_strtod_l+0x842>
 8005600:	2500      	movs	r5, #0
 8005602:	fa07 f303 	lsl.w	r3, r7, r3
 8005606:	930f      	str	r3, [sp, #60]	; 0x3c
 8005608:	18b7      	adds	r7, r6, r2
 800560a:	9b05      	ldr	r3, [sp, #20]
 800560c:	42be      	cmp	r6, r7
 800560e:	4414      	add	r4, r2
 8005610:	441c      	add	r4, r3
 8005612:	4633      	mov	r3, r6
 8005614:	bfa8      	it	ge
 8005616:	463b      	movge	r3, r7
 8005618:	42a3      	cmp	r3, r4
 800561a:	bfa8      	it	ge
 800561c:	4623      	movge	r3, r4
 800561e:	2b00      	cmp	r3, #0
 8005620:	bfc2      	ittt	gt
 8005622:	1aff      	subgt	r7, r7, r3
 8005624:	1ae4      	subgt	r4, r4, r3
 8005626:	1af6      	subgt	r6, r6, r3
 8005628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800562a:	2b00      	cmp	r3, #0
 800562c:	dd17      	ble.n	800565e <_strtod_l+0x73e>
 800562e:	461a      	mov	r2, r3
 8005630:	4650      	mov	r0, sl
 8005632:	9904      	ldr	r1, [sp, #16]
 8005634:	f001 fff2 	bl	800761c <__pow5mult>
 8005638:	9004      	str	r0, [sp, #16]
 800563a:	2800      	cmp	r0, #0
 800563c:	f43f aeaf 	beq.w	800539e <_strtod_l+0x47e>
 8005640:	4601      	mov	r1, r0
 8005642:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005644:	4650      	mov	r0, sl
 8005646:	f001 ff41 	bl	80074cc <__multiply>
 800564a:	9009      	str	r0, [sp, #36]	; 0x24
 800564c:	2800      	cmp	r0, #0
 800564e:	f43f aea6 	beq.w	800539e <_strtod_l+0x47e>
 8005652:	4650      	mov	r0, sl
 8005654:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005656:	f001 fe23 	bl	80072a0 <_Bfree>
 800565a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565c:	931a      	str	r3, [sp, #104]	; 0x68
 800565e:	2f00      	cmp	r7, #0
 8005660:	f300 808e 	bgt.w	8005780 <_strtod_l+0x860>
 8005664:	9b07      	ldr	r3, [sp, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	dd08      	ble.n	800567c <_strtod_l+0x75c>
 800566a:	4650      	mov	r0, sl
 800566c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800566e:	9906      	ldr	r1, [sp, #24]
 8005670:	f001 ffd4 	bl	800761c <__pow5mult>
 8005674:	9006      	str	r0, [sp, #24]
 8005676:	2800      	cmp	r0, #0
 8005678:	f43f ae91 	beq.w	800539e <_strtod_l+0x47e>
 800567c:	2c00      	cmp	r4, #0
 800567e:	dd08      	ble.n	8005692 <_strtod_l+0x772>
 8005680:	4622      	mov	r2, r4
 8005682:	4650      	mov	r0, sl
 8005684:	9906      	ldr	r1, [sp, #24]
 8005686:	f002 f823 	bl	80076d0 <__lshift>
 800568a:	9006      	str	r0, [sp, #24]
 800568c:	2800      	cmp	r0, #0
 800568e:	f43f ae86 	beq.w	800539e <_strtod_l+0x47e>
 8005692:	2e00      	cmp	r6, #0
 8005694:	dd08      	ble.n	80056a8 <_strtod_l+0x788>
 8005696:	4632      	mov	r2, r6
 8005698:	4650      	mov	r0, sl
 800569a:	9904      	ldr	r1, [sp, #16]
 800569c:	f002 f818 	bl	80076d0 <__lshift>
 80056a0:	9004      	str	r0, [sp, #16]
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f43f ae7b 	beq.w	800539e <_strtod_l+0x47e>
 80056a8:	4650      	mov	r0, sl
 80056aa:	9a06      	ldr	r2, [sp, #24]
 80056ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056ae:	f002 f89b 	bl	80077e8 <__mdiff>
 80056b2:	4683      	mov	fp, r0
 80056b4:	2800      	cmp	r0, #0
 80056b6:	f43f ae72 	beq.w	800539e <_strtod_l+0x47e>
 80056ba:	2400      	movs	r4, #0
 80056bc:	68c3      	ldr	r3, [r0, #12]
 80056be:	9904      	ldr	r1, [sp, #16]
 80056c0:	60c4      	str	r4, [r0, #12]
 80056c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056c4:	f002 f874 	bl	80077b0 <__mcmp>
 80056c8:	42a0      	cmp	r0, r4
 80056ca:	da6b      	bge.n	80057a4 <_strtod_l+0x884>
 80056cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ce:	ea53 0308 	orrs.w	r3, r3, r8
 80056d2:	f040 8091 	bne.w	80057f8 <_strtod_l+0x8d8>
 80056d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 808c 	bne.w	80057f8 <_strtod_l+0x8d8>
 80056e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056e4:	0d1b      	lsrs	r3, r3, #20
 80056e6:	051b      	lsls	r3, r3, #20
 80056e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80056ec:	f240 8084 	bls.w	80057f8 <_strtod_l+0x8d8>
 80056f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80056f4:	b91b      	cbnz	r3, 80056fe <_strtod_l+0x7de>
 80056f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	dd7c      	ble.n	80057f8 <_strtod_l+0x8d8>
 80056fe:	4659      	mov	r1, fp
 8005700:	2201      	movs	r2, #1
 8005702:	4650      	mov	r0, sl
 8005704:	f001 ffe4 	bl	80076d0 <__lshift>
 8005708:	9904      	ldr	r1, [sp, #16]
 800570a:	4683      	mov	fp, r0
 800570c:	f002 f850 	bl	80077b0 <__mcmp>
 8005710:	2800      	cmp	r0, #0
 8005712:	dd71      	ble.n	80057f8 <_strtod_l+0x8d8>
 8005714:	9905      	ldr	r1, [sp, #20]
 8005716:	464b      	mov	r3, r9
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <_strtod_l+0x87c>)
 800571a:	2900      	cmp	r1, #0
 800571c:	f000 808c 	beq.w	8005838 <_strtod_l+0x918>
 8005720:	ea02 0109 	and.w	r1, r2, r9
 8005724:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005728:	f300 8086 	bgt.w	8005838 <_strtod_l+0x918>
 800572c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005730:	f77f aeaa 	ble.w	8005488 <_strtod_l+0x568>
 8005734:	4640      	mov	r0, r8
 8005736:	4649      	mov	r1, r9
 8005738:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <_strtod_l+0x880>)
 800573a:	2200      	movs	r2, #0
 800573c:	f7fa fecc 	bl	80004d8 <__aeabi_dmul>
 8005740:	460b      	mov	r3, r1
 8005742:	4303      	orrs	r3, r0
 8005744:	bf08      	it	eq
 8005746:	2322      	moveq	r3, #34	; 0x22
 8005748:	4680      	mov	r8, r0
 800574a:	4689      	mov	r9, r1
 800574c:	bf08      	it	eq
 800574e:	f8ca 3000 	streq.w	r3, [sl]
 8005752:	e62f      	b.n	80053b4 <_strtod_l+0x494>
 8005754:	f04f 32ff 	mov.w	r2, #4294967295
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	ea03 0808 	and.w	r8, r3, r8
 8005760:	e6e0      	b.n	8005524 <_strtod_l+0x604>
 8005762:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005766:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800576a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800576e:	35e2      	adds	r5, #226	; 0xe2
 8005770:	fa07 f505 	lsl.w	r5, r7, r5
 8005774:	970f      	str	r7, [sp, #60]	; 0x3c
 8005776:	e747      	b.n	8005608 <_strtod_l+0x6e8>
 8005778:	2301      	movs	r3, #1
 800577a:	2500      	movs	r5, #0
 800577c:	930f      	str	r3, [sp, #60]	; 0x3c
 800577e:	e743      	b.n	8005608 <_strtod_l+0x6e8>
 8005780:	463a      	mov	r2, r7
 8005782:	4650      	mov	r0, sl
 8005784:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005786:	f001 ffa3 	bl	80076d0 <__lshift>
 800578a:	901a      	str	r0, [sp, #104]	; 0x68
 800578c:	2800      	cmp	r0, #0
 800578e:	f47f af69 	bne.w	8005664 <_strtod_l+0x744>
 8005792:	e604      	b.n	800539e <_strtod_l+0x47e>
 8005794:	08008ae0 	.word	0x08008ae0
 8005798:	fffffc02 	.word	0xfffffc02
 800579c:	7ff00000 	.word	0x7ff00000
 80057a0:	39500000 	.word	0x39500000
 80057a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80057a8:	d165      	bne.n	8005876 <_strtod_l+0x956>
 80057aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057b0:	b35a      	cbz	r2, 800580a <_strtod_l+0x8ea>
 80057b2:	4a99      	ldr	r2, [pc, #612]	; (8005a18 <_strtod_l+0xaf8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d12b      	bne.n	8005810 <_strtod_l+0x8f0>
 80057b8:	9b05      	ldr	r3, [sp, #20]
 80057ba:	4641      	mov	r1, r8
 80057bc:	b303      	cbz	r3, 8005800 <_strtod_l+0x8e0>
 80057be:	464a      	mov	r2, r9
 80057c0:	4b96      	ldr	r3, [pc, #600]	; (8005a1c <_strtod_l+0xafc>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	d81b      	bhi.n	8005806 <_strtod_l+0x8e6>
 80057ce:	0d1b      	lsrs	r3, r3, #20
 80057d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	4299      	cmp	r1, r3
 80057da:	d119      	bne.n	8005810 <_strtod_l+0x8f0>
 80057dc:	4b90      	ldr	r3, [pc, #576]	; (8005a20 <_strtod_l+0xb00>)
 80057de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d102      	bne.n	80057ea <_strtod_l+0x8ca>
 80057e4:	3101      	adds	r1, #1
 80057e6:	f43f adda 	beq.w	800539e <_strtod_l+0x47e>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	4b8b      	ldr	r3, [pc, #556]	; (8005a1c <_strtod_l+0xafc>)
 80057f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057f2:	401a      	ands	r2, r3
 80057f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80057f8:	9b05      	ldr	r3, [sp, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d19a      	bne.n	8005734 <_strtod_l+0x814>
 80057fe:	e5d9      	b.n	80053b4 <_strtod_l+0x494>
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
 8005804:	e7e8      	b.n	80057d8 <_strtod_l+0x8b8>
 8005806:	4613      	mov	r3, r2
 8005808:	e7e6      	b.n	80057d8 <_strtod_l+0x8b8>
 800580a:	ea53 0308 	orrs.w	r3, r3, r8
 800580e:	d081      	beq.n	8005714 <_strtod_l+0x7f4>
 8005810:	b1e5      	cbz	r5, 800584c <_strtod_l+0x92c>
 8005812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005814:	421d      	tst	r5, r3
 8005816:	d0ef      	beq.n	80057f8 <_strtod_l+0x8d8>
 8005818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	9a05      	ldr	r2, [sp, #20]
 8005820:	b1c3      	cbz	r3, 8005854 <_strtod_l+0x934>
 8005822:	f7ff fb59 	bl	8004ed8 <sulp>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800582e:	f7fa fc9d 	bl	800016c <__adddf3>
 8005832:	4680      	mov	r8, r0
 8005834:	4689      	mov	r9, r1
 8005836:	e7df      	b.n	80057f8 <_strtod_l+0x8d8>
 8005838:	4013      	ands	r3, r2
 800583a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800583e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005842:	f04f 38ff 	mov.w	r8, #4294967295
 8005846:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800584a:	e7d5      	b.n	80057f8 <_strtod_l+0x8d8>
 800584c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800584e:	ea13 0f08 	tst.w	r3, r8
 8005852:	e7e0      	b.n	8005816 <_strtod_l+0x8f6>
 8005854:	f7ff fb40 	bl	8004ed8 <sulp>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005860:	f7fa fc82 	bl	8000168 <__aeabi_dsub>
 8005864:	2200      	movs	r2, #0
 8005866:	2300      	movs	r3, #0
 8005868:	4680      	mov	r8, r0
 800586a:	4689      	mov	r9, r1
 800586c:	f7fb f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8005870:	2800      	cmp	r0, #0
 8005872:	d0c1      	beq.n	80057f8 <_strtod_l+0x8d8>
 8005874:	e608      	b.n	8005488 <_strtod_l+0x568>
 8005876:	4658      	mov	r0, fp
 8005878:	9904      	ldr	r1, [sp, #16]
 800587a:	f002 f917 	bl	8007aac <__ratio>
 800587e:	2200      	movs	r2, #0
 8005880:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005884:	4606      	mov	r6, r0
 8005886:	460f      	mov	r7, r1
 8005888:	f7fb f8a2 	bl	80009d0 <__aeabi_dcmple>
 800588c:	2800      	cmp	r0, #0
 800588e:	d070      	beq.n	8005972 <_strtod_l+0xa52>
 8005890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d042      	beq.n	800591c <_strtod_l+0x9fc>
 8005896:	2600      	movs	r6, #0
 8005898:	4f62      	ldr	r7, [pc, #392]	; (8005a24 <_strtod_l+0xb04>)
 800589a:	4d62      	ldr	r5, [pc, #392]	; (8005a24 <_strtod_l+0xb04>)
 800589c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058a2:	0d1b      	lsrs	r3, r3, #20
 80058a4:	051b      	lsls	r3, r3, #20
 80058a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80058a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058aa:	4b5f      	ldr	r3, [pc, #380]	; (8005a28 <_strtod_l+0xb08>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	f040 80c3 	bne.w	8005a38 <_strtod_l+0xb18>
 80058b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b4:	4640      	mov	r0, r8
 80058b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80058ba:	4649      	mov	r1, r9
 80058bc:	f002 f820 	bl	8007900 <__ulp>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4630      	mov	r0, r6
 80058c6:	4639      	mov	r1, r7
 80058c8:	f7fa fe06 	bl	80004d8 <__aeabi_dmul>
 80058cc:	4642      	mov	r2, r8
 80058ce:	464b      	mov	r3, r9
 80058d0:	f7fa fc4c 	bl	800016c <__adddf3>
 80058d4:	460b      	mov	r3, r1
 80058d6:	4951      	ldr	r1, [pc, #324]	; (8005a1c <_strtod_l+0xafc>)
 80058d8:	4a54      	ldr	r2, [pc, #336]	; (8005a2c <_strtod_l+0xb0c>)
 80058da:	4019      	ands	r1, r3
 80058dc:	4291      	cmp	r1, r2
 80058de:	4680      	mov	r8, r0
 80058e0:	d95d      	bls.n	800599e <_strtod_l+0xa7e>
 80058e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058e4:	4b4e      	ldr	r3, [pc, #312]	; (8005a20 <_strtod_l+0xb00>)
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d103      	bne.n	80058f2 <_strtod_l+0x9d2>
 80058ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058ec:	3301      	adds	r3, #1
 80058ee:	f43f ad56 	beq.w	800539e <_strtod_l+0x47e>
 80058f2:	f04f 38ff 	mov.w	r8, #4294967295
 80058f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005a20 <_strtod_l+0xb00>
 80058fa:	4650      	mov	r0, sl
 80058fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058fe:	f001 fccf 	bl	80072a0 <_Bfree>
 8005902:	4650      	mov	r0, sl
 8005904:	9906      	ldr	r1, [sp, #24]
 8005906:	f001 fccb 	bl	80072a0 <_Bfree>
 800590a:	4650      	mov	r0, sl
 800590c:	9904      	ldr	r1, [sp, #16]
 800590e:	f001 fcc7 	bl	80072a0 <_Bfree>
 8005912:	4659      	mov	r1, fp
 8005914:	4650      	mov	r0, sl
 8005916:	f001 fcc3 	bl	80072a0 <_Bfree>
 800591a:	e627      	b.n	800556c <_strtod_l+0x64c>
 800591c:	f1b8 0f00 	cmp.w	r8, #0
 8005920:	d119      	bne.n	8005956 <_strtod_l+0xa36>
 8005922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005928:	b9e3      	cbnz	r3, 8005964 <_strtod_l+0xa44>
 800592a:	2200      	movs	r2, #0
 800592c:	4630      	mov	r0, r6
 800592e:	4639      	mov	r1, r7
 8005930:	4b3c      	ldr	r3, [pc, #240]	; (8005a24 <_strtod_l+0xb04>)
 8005932:	f7fb f843 	bl	80009bc <__aeabi_dcmplt>
 8005936:	b9c8      	cbnz	r0, 800596c <_strtod_l+0xa4c>
 8005938:	2200      	movs	r2, #0
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	4b3c      	ldr	r3, [pc, #240]	; (8005a30 <_strtod_l+0xb10>)
 8005940:	f7fa fdca 	bl	80004d8 <__aeabi_dmul>
 8005944:	4604      	mov	r4, r0
 8005946:	460d      	mov	r5, r1
 8005948:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800594c:	9416      	str	r4, [sp, #88]	; 0x58
 800594e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005950:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005954:	e7a2      	b.n	800589c <_strtod_l+0x97c>
 8005956:	f1b8 0f01 	cmp.w	r8, #1
 800595a:	d103      	bne.n	8005964 <_strtod_l+0xa44>
 800595c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	f43f ad92 	beq.w	8005488 <_strtod_l+0x568>
 8005964:	2600      	movs	r6, #0
 8005966:	2400      	movs	r4, #0
 8005968:	4f32      	ldr	r7, [pc, #200]	; (8005a34 <_strtod_l+0xb14>)
 800596a:	e796      	b.n	800589a <_strtod_l+0x97a>
 800596c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800596e:	4d30      	ldr	r5, [pc, #192]	; (8005a30 <_strtod_l+0xb10>)
 8005970:	e7ea      	b.n	8005948 <_strtod_l+0xa28>
 8005972:	4b2f      	ldr	r3, [pc, #188]	; (8005a30 <_strtod_l+0xb10>)
 8005974:	2200      	movs	r2, #0
 8005976:	4630      	mov	r0, r6
 8005978:	4639      	mov	r1, r7
 800597a:	f7fa fdad 	bl	80004d8 <__aeabi_dmul>
 800597e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005980:	4604      	mov	r4, r0
 8005982:	460d      	mov	r5, r1
 8005984:	b933      	cbnz	r3, 8005994 <_strtod_l+0xa74>
 8005986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800598a:	9010      	str	r0, [sp, #64]	; 0x40
 800598c:	9311      	str	r3, [sp, #68]	; 0x44
 800598e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005992:	e783      	b.n	800589c <_strtod_l+0x97c>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800599c:	e7f7      	b.n	800598e <_strtod_l+0xa6e>
 800599e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80059a2:	9b05      	ldr	r3, [sp, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1a8      	bne.n	80058fa <_strtod_l+0x9da>
 80059a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059ae:	0d1b      	lsrs	r3, r3, #20
 80059b0:	051b      	lsls	r3, r3, #20
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d1a1      	bne.n	80058fa <_strtod_l+0x9da>
 80059b6:	4620      	mov	r0, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7fb fb33 	bl	8001024 <__aeabi_d2lz>
 80059be:	f7fa fd5d 	bl	800047c <__aeabi_l2d>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fa fbcd 	bl	8000168 <__aeabi_dsub>
 80059ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059d4:	ea43 0308 	orr.w	r3, r3, r8
 80059d8:	4313      	orrs	r3, r2
 80059da:	4604      	mov	r4, r0
 80059dc:	460d      	mov	r5, r1
 80059de:	d066      	beq.n	8005aae <_strtod_l+0xb8e>
 80059e0:	a309      	add	r3, pc, #36	; (adr r3, 8005a08 <_strtod_l+0xae8>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	f7fa ffe9 	bl	80009bc <__aeabi_dcmplt>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f47f ace2 	bne.w	80053b4 <_strtod_l+0x494>
 80059f0:	a307      	add	r3, pc, #28	; (adr r3, 8005a10 <_strtod_l+0xaf0>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	4620      	mov	r0, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	f7fa fffd 	bl	80009f8 <__aeabi_dcmpgt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f43f af7b 	beq.w	80058fa <_strtod_l+0x9da>
 8005a04:	e4d6      	b.n	80053b4 <_strtod_l+0x494>
 8005a06:	bf00      	nop
 8005a08:	94a03595 	.word	0x94a03595
 8005a0c:	3fdfffff 	.word	0x3fdfffff
 8005a10:	35afe535 	.word	0x35afe535
 8005a14:	3fe00000 	.word	0x3fe00000
 8005a18:	000fffff 	.word	0x000fffff
 8005a1c:	7ff00000 	.word	0x7ff00000
 8005a20:	7fefffff 	.word	0x7fefffff
 8005a24:	3ff00000 	.word	0x3ff00000
 8005a28:	7fe00000 	.word	0x7fe00000
 8005a2c:	7c9fffff 	.word	0x7c9fffff
 8005a30:	3fe00000 	.word	0x3fe00000
 8005a34:	bff00000 	.word	0xbff00000
 8005a38:	9b05      	ldr	r3, [sp, #20]
 8005a3a:	b313      	cbz	r3, 8005a82 <_strtod_l+0xb62>
 8005a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005a42:	d81e      	bhi.n	8005a82 <_strtod_l+0xb62>
 8005a44:	a326      	add	r3, pc, #152	; (adr r3, 8005ae0 <_strtod_l+0xbc0>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7fa ffbf 	bl	80009d0 <__aeabi_dcmple>
 8005a52:	b190      	cbz	r0, 8005a7a <_strtod_l+0xb5a>
 8005a54:	4629      	mov	r1, r5
 8005a56:	4620      	mov	r0, r4
 8005a58:	f7fb f816 	bl	8000a88 <__aeabi_d2uiz>
 8005a5c:	2801      	cmp	r0, #1
 8005a5e:	bf38      	it	cc
 8005a60:	2001      	movcc	r0, #1
 8005a62:	f7fa fcbf 	bl	80003e4 <__aeabi_ui2d>
 8005a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a68:	4604      	mov	r4, r0
 8005a6a:	460d      	mov	r5, r1
 8005a6c:	b9d3      	cbnz	r3, 8005aa4 <_strtod_l+0xb84>
 8005a6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a72:	9012      	str	r0, [sp, #72]	; 0x48
 8005a74:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a76:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a7c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005a80:	1a9f      	subs	r7, r3, r2
 8005a82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a86:	f001 ff3b 	bl	8007900 <__ulp>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4630      	mov	r0, r6
 8005a90:	4639      	mov	r1, r7
 8005a92:	f7fa fd21 	bl	80004d8 <__aeabi_dmul>
 8005a96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a9a:	f7fa fb67 	bl	800016c <__adddf3>
 8005a9e:	4680      	mov	r8, r0
 8005aa0:	4689      	mov	r9, r1
 8005aa2:	e77e      	b.n	80059a2 <_strtod_l+0xa82>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005aac:	e7e3      	b.n	8005a76 <_strtod_l+0xb56>
 8005aae:	a30e      	add	r3, pc, #56	; (adr r3, 8005ae8 <_strtod_l+0xbc8>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f7fa ff82 	bl	80009bc <__aeabi_dcmplt>
 8005ab8:	e7a1      	b.n	80059fe <_strtod_l+0xade>
 8005aba:	2300      	movs	r3, #0
 8005abc:	930a      	str	r3, [sp, #40]	; 0x28
 8005abe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ac0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	f7ff ba71 	b.w	8004faa <_strtod_l+0x8a>
 8005ac8:	2a65      	cmp	r2, #101	; 0x65
 8005aca:	f43f ab63 	beq.w	8005194 <_strtod_l+0x274>
 8005ace:	2a45      	cmp	r2, #69	; 0x45
 8005ad0:	f43f ab60 	beq.w	8005194 <_strtod_l+0x274>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f7ff bb95 	b.w	8005204 <_strtod_l+0x2e4>
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w
 8005ae0:	ffc00000 	.word	0xffc00000
 8005ae4:	41dfffff 	.word	0x41dfffff
 8005ae8:	94a03595 	.word	0x94a03595
 8005aec:	3fcfffff 	.word	0x3fcfffff

08005af0 <_strtod_r>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <_strtod_r+0x8>)
 8005af2:	f7ff ba15 	b.w	8004f20 <_strtod_l>
 8005af6:	bf00      	nop
 8005af8:	20000074 	.word	0x20000074

08005afc <_strtol_l.constprop.0>:
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b02:	4680      	mov	r8, r0
 8005b04:	d001      	beq.n	8005b0a <_strtol_l.constprop.0+0xe>
 8005b06:	2b24      	cmp	r3, #36	; 0x24
 8005b08:	d906      	bls.n	8005b18 <_strtol_l.constprop.0+0x1c>
 8005b0a:	f7fe fb09 	bl	8004120 <__errno>
 8005b0e:	2316      	movs	r3, #22
 8005b10:	6003      	str	r3, [r0, #0]
 8005b12:	2000      	movs	r0, #0
 8005b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b18:	460d      	mov	r5, r1
 8005b1a:	4f35      	ldr	r7, [pc, #212]	; (8005bf0 <_strtol_l.constprop.0+0xf4>)
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b22:	5de6      	ldrb	r6, [r4, r7]
 8005b24:	f016 0608 	ands.w	r6, r6, #8
 8005b28:	d1f8      	bne.n	8005b1c <_strtol_l.constprop.0+0x20>
 8005b2a:	2c2d      	cmp	r4, #45	; 0x2d
 8005b2c:	d12f      	bne.n	8005b8e <_strtol_l.constprop.0+0x92>
 8005b2e:	2601      	movs	r6, #1
 8005b30:	782c      	ldrb	r4, [r5, #0]
 8005b32:	1c85      	adds	r5, r0, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d057      	beq.n	8005be8 <_strtol_l.constprop.0+0xec>
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d109      	bne.n	8005b50 <_strtol_l.constprop.0+0x54>
 8005b3c:	2c30      	cmp	r4, #48	; 0x30
 8005b3e:	d107      	bne.n	8005b50 <_strtol_l.constprop.0+0x54>
 8005b40:	7828      	ldrb	r0, [r5, #0]
 8005b42:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005b46:	2858      	cmp	r0, #88	; 0x58
 8005b48:	d149      	bne.n	8005bde <_strtol_l.constprop.0+0xe2>
 8005b4a:	2310      	movs	r3, #16
 8005b4c:	786c      	ldrb	r4, [r5, #1]
 8005b4e:	3502      	adds	r5, #2
 8005b50:	2700      	movs	r7, #0
 8005b52:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005b56:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005b5a:	fbbe f9f3 	udiv	r9, lr, r3
 8005b5e:	4638      	mov	r0, r7
 8005b60:	fb03 ea19 	mls	sl, r3, r9, lr
 8005b64:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005b68:	f1bc 0f09 	cmp.w	ip, #9
 8005b6c:	d814      	bhi.n	8005b98 <_strtol_l.constprop.0+0x9c>
 8005b6e:	4664      	mov	r4, ip
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	dd22      	ble.n	8005bba <_strtol_l.constprop.0+0xbe>
 8005b74:	2f00      	cmp	r7, #0
 8005b76:	db1d      	blt.n	8005bb4 <_strtol_l.constprop.0+0xb8>
 8005b78:	4581      	cmp	r9, r0
 8005b7a:	d31b      	bcc.n	8005bb4 <_strtol_l.constprop.0+0xb8>
 8005b7c:	d101      	bne.n	8005b82 <_strtol_l.constprop.0+0x86>
 8005b7e:	45a2      	cmp	sl, r4
 8005b80:	db18      	blt.n	8005bb4 <_strtol_l.constprop.0+0xb8>
 8005b82:	2701      	movs	r7, #1
 8005b84:	fb00 4003 	mla	r0, r0, r3, r4
 8005b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b8c:	e7ea      	b.n	8005b64 <_strtol_l.constprop.0+0x68>
 8005b8e:	2c2b      	cmp	r4, #43	; 0x2b
 8005b90:	bf04      	itt	eq
 8005b92:	782c      	ldrbeq	r4, [r5, #0]
 8005b94:	1c85      	addeq	r5, r0, #2
 8005b96:	e7cd      	b.n	8005b34 <_strtol_l.constprop.0+0x38>
 8005b98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005b9c:	f1bc 0f19 	cmp.w	ip, #25
 8005ba0:	d801      	bhi.n	8005ba6 <_strtol_l.constprop.0+0xaa>
 8005ba2:	3c37      	subs	r4, #55	; 0x37
 8005ba4:	e7e4      	b.n	8005b70 <_strtol_l.constprop.0+0x74>
 8005ba6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005baa:	f1bc 0f19 	cmp.w	ip, #25
 8005bae:	d804      	bhi.n	8005bba <_strtol_l.constprop.0+0xbe>
 8005bb0:	3c57      	subs	r4, #87	; 0x57
 8005bb2:	e7dd      	b.n	8005b70 <_strtol_l.constprop.0+0x74>
 8005bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8005bb8:	e7e6      	b.n	8005b88 <_strtol_l.constprop.0+0x8c>
 8005bba:	2f00      	cmp	r7, #0
 8005bbc:	da07      	bge.n	8005bce <_strtol_l.constprop.0+0xd2>
 8005bbe:	2322      	movs	r3, #34	; 0x22
 8005bc0:	4670      	mov	r0, lr
 8005bc2:	f8c8 3000 	str.w	r3, [r8]
 8005bc6:	2a00      	cmp	r2, #0
 8005bc8:	d0a4      	beq.n	8005b14 <_strtol_l.constprop.0+0x18>
 8005bca:	1e69      	subs	r1, r5, #1
 8005bcc:	e005      	b.n	8005bda <_strtol_l.constprop.0+0xde>
 8005bce:	b106      	cbz	r6, 8005bd2 <_strtol_l.constprop.0+0xd6>
 8005bd0:	4240      	negs	r0, r0
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	d09e      	beq.n	8005b14 <_strtol_l.constprop.0+0x18>
 8005bd6:	2f00      	cmp	r7, #0
 8005bd8:	d1f7      	bne.n	8005bca <_strtol_l.constprop.0+0xce>
 8005bda:	6011      	str	r1, [r2, #0]
 8005bdc:	e79a      	b.n	8005b14 <_strtol_l.constprop.0+0x18>
 8005bde:	2430      	movs	r4, #48	; 0x30
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1b5      	bne.n	8005b50 <_strtol_l.constprop.0+0x54>
 8005be4:	2308      	movs	r3, #8
 8005be6:	e7b3      	b.n	8005b50 <_strtol_l.constprop.0+0x54>
 8005be8:	2c30      	cmp	r4, #48	; 0x30
 8005bea:	d0a9      	beq.n	8005b40 <_strtol_l.constprop.0+0x44>
 8005bec:	230a      	movs	r3, #10
 8005bee:	e7af      	b.n	8005b50 <_strtol_l.constprop.0+0x54>
 8005bf0:	08008b09 	.word	0x08008b09

08005bf4 <_strtol_r>:
 8005bf4:	f7ff bf82 	b.w	8005afc <_strtol_l.constprop.0>

08005bf8 <quorem>:
 8005bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	6903      	ldr	r3, [r0, #16]
 8005bfe:	690c      	ldr	r4, [r1, #16]
 8005c00:	4607      	mov	r7, r0
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	f2c0 8082 	blt.w	8005d0c <quorem+0x114>
 8005c08:	3c01      	subs	r4, #1
 8005c0a:	f100 0514 	add.w	r5, r0, #20
 8005c0e:	f101 0814 	add.w	r8, r1, #20
 8005c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c20:	3301      	adds	r3, #1
 8005c22:	429a      	cmp	r2, r3
 8005c24:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c30:	d331      	bcc.n	8005c96 <quorem+0x9e>
 8005c32:	f04f 0e00 	mov.w	lr, #0
 8005c36:	4640      	mov	r0, r8
 8005c38:	46ac      	mov	ip, r5
 8005c3a:	46f2      	mov	sl, lr
 8005c3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c40:	b293      	uxth	r3, r2
 8005c42:	fb06 e303 	mla	r3, r6, r3, lr
 8005c46:	0c12      	lsrs	r2, r2, #16
 8005c48:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	fb06 e202 	mla	r2, r6, r2, lr
 8005c52:	ebaa 0303 	sub.w	r3, sl, r3
 8005c56:	f8dc a000 	ldr.w	sl, [ip]
 8005c5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c5e:	fa1f fa8a 	uxth.w	sl, sl
 8005c62:	4453      	add	r3, sl
 8005c64:	f8dc a000 	ldr.w	sl, [ip]
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c78:	4581      	cmp	r9, r0
 8005c7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c7e:	f84c 3b04 	str.w	r3, [ip], #4
 8005c82:	d2db      	bcs.n	8005c3c <quorem+0x44>
 8005c84:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c88:	b92b      	cbnz	r3, 8005c96 <quorem+0x9e>
 8005c8a:	9b01      	ldr	r3, [sp, #4]
 8005c8c:	3b04      	subs	r3, #4
 8005c8e:	429d      	cmp	r5, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	d32f      	bcc.n	8005cf4 <quorem+0xfc>
 8005c94:	613c      	str	r4, [r7, #16]
 8005c96:	4638      	mov	r0, r7
 8005c98:	f001 fd8a 	bl	80077b0 <__mcmp>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	db25      	blt.n	8005cec <quorem+0xf4>
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f04f 0c00 	mov.w	ip, #0
 8005ca6:	3601      	adds	r6, #1
 8005ca8:	f858 1b04 	ldr.w	r1, [r8], #4
 8005cac:	f8d0 e000 	ldr.w	lr, [r0]
 8005cb0:	b28b      	uxth	r3, r1
 8005cb2:	ebac 0303 	sub.w	r3, ip, r3
 8005cb6:	fa1f f28e 	uxth.w	r2, lr
 8005cba:	4413      	add	r3, r2
 8005cbc:	0c0a      	lsrs	r2, r1, #16
 8005cbe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ccc:	45c1      	cmp	r9, r8
 8005cce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cd2:	f840 3b04 	str.w	r3, [r0], #4
 8005cd6:	d2e7      	bcs.n	8005ca8 <quorem+0xb0>
 8005cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ce0:	b922      	cbnz	r2, 8005cec <quorem+0xf4>
 8005ce2:	3b04      	subs	r3, #4
 8005ce4:	429d      	cmp	r5, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	d30a      	bcc.n	8005d00 <quorem+0x108>
 8005cea:	613c      	str	r4, [r7, #16]
 8005cec:	4630      	mov	r0, r6
 8005cee:	b003      	add	sp, #12
 8005cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	3b04      	subs	r3, #4
 8005cf8:	2a00      	cmp	r2, #0
 8005cfa:	d1cb      	bne.n	8005c94 <quorem+0x9c>
 8005cfc:	3c01      	subs	r4, #1
 8005cfe:	e7c6      	b.n	8005c8e <quorem+0x96>
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	3b04      	subs	r3, #4
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	d1f0      	bne.n	8005cea <quorem+0xf2>
 8005d08:	3c01      	subs	r4, #1
 8005d0a:	e7eb      	b.n	8005ce4 <quorem+0xec>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e7ee      	b.n	8005cee <quorem+0xf6>

08005d10 <_dtoa_r>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	4616      	mov	r6, r2
 8005d16:	461f      	mov	r7, r3
 8005d18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d1a:	b099      	sub	sp, #100	; 0x64
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005d26:	b974      	cbnz	r4, 8005d46 <_dtoa_r+0x36>
 8005d28:	2010      	movs	r0, #16
 8005d2a:	f001 fa43 	bl	80071b4 <malloc>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	6268      	str	r0, [r5, #36]	; 0x24
 8005d32:	b920      	cbnz	r0, 8005d3e <_dtoa_r+0x2e>
 8005d34:	21ea      	movs	r1, #234	; 0xea
 8005d36:	4ba8      	ldr	r3, [pc, #672]	; (8005fd8 <_dtoa_r+0x2c8>)
 8005d38:	48a8      	ldr	r0, [pc, #672]	; (8005fdc <_dtoa_r+0x2cc>)
 8005d3a:	f002 fc1b 	bl	8008574 <__assert_func>
 8005d3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d42:	6004      	str	r4, [r0, #0]
 8005d44:	60c4      	str	r4, [r0, #12]
 8005d46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d48:	6819      	ldr	r1, [r3, #0]
 8005d4a:	b151      	cbz	r1, 8005d62 <_dtoa_r+0x52>
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4093      	lsls	r3, r2
 8005d52:	604a      	str	r2, [r1, #4]
 8005d54:	608b      	str	r3, [r1, #8]
 8005d56:	4628      	mov	r0, r5
 8005d58:	f001 faa2 	bl	80072a0 <_Bfree>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	1e3b      	subs	r3, r7, #0
 8005d64:	bfaf      	iteee	ge
 8005d66:	2300      	movge	r3, #0
 8005d68:	2201      	movlt	r2, #1
 8005d6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d6e:	9305      	strlt	r3, [sp, #20]
 8005d70:	bfa8      	it	ge
 8005d72:	f8c8 3000 	strge.w	r3, [r8]
 8005d76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d7a:	4b99      	ldr	r3, [pc, #612]	; (8005fe0 <_dtoa_r+0x2d0>)
 8005d7c:	bfb8      	it	lt
 8005d7e:	f8c8 2000 	strlt.w	r2, [r8]
 8005d82:	ea33 0309 	bics.w	r3, r3, r9
 8005d86:	d119      	bne.n	8005dbc <_dtoa_r+0xac>
 8005d88:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d94:	4333      	orrs	r3, r6
 8005d96:	f000 857f 	beq.w	8006898 <_dtoa_r+0xb88>
 8005d9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d9c:	b953      	cbnz	r3, 8005db4 <_dtoa_r+0xa4>
 8005d9e:	4b91      	ldr	r3, [pc, #580]	; (8005fe4 <_dtoa_r+0x2d4>)
 8005da0:	e022      	b.n	8005de8 <_dtoa_r+0xd8>
 8005da2:	4b91      	ldr	r3, [pc, #580]	; (8005fe8 <_dtoa_r+0x2d8>)
 8005da4:	9303      	str	r3, [sp, #12]
 8005da6:	3308      	adds	r3, #8
 8005da8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	9803      	ldr	r0, [sp, #12]
 8005dae:	b019      	add	sp, #100	; 0x64
 8005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db4:	4b8b      	ldr	r3, [pc, #556]	; (8005fe4 <_dtoa_r+0x2d4>)
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	3303      	adds	r3, #3
 8005dba:	e7f5      	b.n	8005da8 <_dtoa_r+0x98>
 8005dbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005dc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f7fa fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	b158      	cbz	r0, 8005dec <_dtoa_r+0xdc>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8558 	beq.w	8006892 <_dtoa_r+0xb82>
 8005de2:	4882      	ldr	r0, [pc, #520]	; (8005fec <_dtoa_r+0x2dc>)
 8005de4:	6018      	str	r0, [r3, #0]
 8005de6:	1e43      	subs	r3, r0, #1
 8005de8:	9303      	str	r3, [sp, #12]
 8005dea:	e7df      	b.n	8005dac <_dtoa_r+0x9c>
 8005dec:	ab16      	add	r3, sp, #88	; 0x58
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	ab17      	add	r3, sp, #92	; 0x5c
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	4628      	mov	r0, r5
 8005df6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005dfa:	f001 fdfb 	bl	80079f4 <__d2b>
 8005dfe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e02:	4683      	mov	fp, r0
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	d07f      	beq.n	8005f08 <_dtoa_r+0x1f8>
 8005e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005e1a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e1e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005e22:	2200      	movs	r2, #0
 8005e24:	4b72      	ldr	r3, [pc, #456]	; (8005ff0 <_dtoa_r+0x2e0>)
 8005e26:	f7fa f99f 	bl	8000168 <__aeabi_dsub>
 8005e2a:	a365      	add	r3, pc, #404	; (adr r3, 8005fc0 <_dtoa_r+0x2b0>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa fb52 	bl	80004d8 <__aeabi_dmul>
 8005e34:	a364      	add	r3, pc, #400	; (adr r3, 8005fc8 <_dtoa_r+0x2b8>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa f997 	bl	800016c <__adddf3>
 8005e3e:	4606      	mov	r6, r0
 8005e40:	4620      	mov	r0, r4
 8005e42:	460f      	mov	r7, r1
 8005e44:	f7fa fade 	bl	8000404 <__aeabi_i2d>
 8005e48:	a361      	add	r3, pc, #388	; (adr r3, 8005fd0 <_dtoa_r+0x2c0>)
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f7fa fb43 	bl	80004d8 <__aeabi_dmul>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4630      	mov	r0, r6
 8005e58:	4639      	mov	r1, r7
 8005e5a:	f7fa f987 	bl	800016c <__adddf3>
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460f      	mov	r7, r1
 8005e62:	f7fa fde9 	bl	8000a38 <__aeabi_d2iz>
 8005e66:	2200      	movs	r2, #0
 8005e68:	4682      	mov	sl, r0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	4639      	mov	r1, r7
 8005e70:	f7fa fda4 	bl	80009bc <__aeabi_dcmplt>
 8005e74:	b148      	cbz	r0, 8005e8a <_dtoa_r+0x17a>
 8005e76:	4650      	mov	r0, sl
 8005e78:	f7fa fac4 	bl	8000404 <__aeabi_i2d>
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	463b      	mov	r3, r7
 8005e80:	f7fa fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8005e84:	b908      	cbnz	r0, 8005e8a <_dtoa_r+0x17a>
 8005e86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e8a:	f1ba 0f16 	cmp.w	sl, #22
 8005e8e:	d858      	bhi.n	8005f42 <_dtoa_r+0x232>
 8005e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e94:	4b57      	ldr	r3, [pc, #348]	; (8005ff4 <_dtoa_r+0x2e4>)
 8005e96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f7fa fd8d 	bl	80009bc <__aeabi_dcmplt>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d04f      	beq.n	8005f46 <_dtoa_r+0x236>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eac:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005eb0:	1b1c      	subs	r4, r3, r4
 8005eb2:	1e63      	subs	r3, r4, #1
 8005eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb6:	bf49      	itett	mi
 8005eb8:	f1c4 0301 	rsbmi	r3, r4, #1
 8005ebc:	2300      	movpl	r3, #0
 8005ebe:	9306      	strmi	r3, [sp, #24]
 8005ec0:	2300      	movmi	r3, #0
 8005ec2:	bf54      	ite	pl
 8005ec4:	9306      	strpl	r3, [sp, #24]
 8005ec6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ec8:	f1ba 0f00 	cmp.w	sl, #0
 8005ecc:	db3d      	blt.n	8005f4a <_dtoa_r+0x23a>
 8005ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005ed4:	4453      	add	r3, sl
 8005ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed8:	2300      	movs	r3, #0
 8005eda:	930a      	str	r3, [sp, #40]	; 0x28
 8005edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	f200 808c 	bhi.w	8005ffc <_dtoa_r+0x2ec>
 8005ee4:	2b05      	cmp	r3, #5
 8005ee6:	bfc4      	itt	gt
 8005ee8:	3b04      	subgt	r3, #4
 8005eea:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005eec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eee:	bfc8      	it	gt
 8005ef0:	2400      	movgt	r4, #0
 8005ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ef6:	bfd8      	it	le
 8005ef8:	2401      	movle	r4, #1
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	f200 808a 	bhi.w	8006014 <_dtoa_r+0x304>
 8005f00:	e8df f003 	tbb	[pc, r3]
 8005f04:	5b4d4f2d 	.word	0x5b4d4f2d
 8005f08:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005f0c:	441c      	add	r4, r3
 8005f0e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	bfc3      	ittte	gt
 8005f16:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f1a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005f1e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f22:	f1c3 0320 	rsble	r3, r3, #32
 8005f26:	bfc6      	itte	gt
 8005f28:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f2c:	4318      	orrgt	r0, r3
 8005f2e:	fa06 f003 	lslle.w	r0, r6, r3
 8005f32:	f7fa fa57 	bl	80003e4 <__aeabi_ui2d>
 8005f36:	2301      	movs	r3, #1
 8005f38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005f3c:	3c01      	subs	r4, #1
 8005f3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f40:	e76f      	b.n	8005e22 <_dtoa_r+0x112>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7b2      	b.n	8005eac <_dtoa_r+0x19c>
 8005f46:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f48:	e7b1      	b.n	8005eae <_dtoa_r+0x19e>
 8005f4a:	9b06      	ldr	r3, [sp, #24]
 8005f4c:	eba3 030a 	sub.w	r3, r3, sl
 8005f50:	9306      	str	r3, [sp, #24]
 8005f52:	f1ca 0300 	rsb	r3, sl, #0
 8005f56:	930a      	str	r3, [sp, #40]	; 0x28
 8005f58:	2300      	movs	r3, #0
 8005f5a:	930e      	str	r3, [sp, #56]	; 0x38
 8005f5c:	e7be      	b.n	8005edc <_dtoa_r+0x1cc>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	dc58      	bgt.n	800601a <_dtoa_r+0x30a>
 8005f68:	f04f 0901 	mov.w	r9, #1
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005f72:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005f76:	2200      	movs	r2, #0
 8005f78:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005f7a:	6042      	str	r2, [r0, #4]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	f102 0614 	add.w	r6, r2, #20
 8005f82:	429e      	cmp	r6, r3
 8005f84:	6841      	ldr	r1, [r0, #4]
 8005f86:	d94e      	bls.n	8006026 <_dtoa_r+0x316>
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f001 f949 	bl	8007220 <_Balloc>
 8005f8e:	9003      	str	r0, [sp, #12]
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d14c      	bne.n	800602e <_dtoa_r+0x31e>
 8005f94:	4602      	mov	r2, r0
 8005f96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f9a:	4b17      	ldr	r3, [pc, #92]	; (8005ff8 <_dtoa_r+0x2e8>)
 8005f9c:	e6cc      	b.n	8005d38 <_dtoa_r+0x28>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7de      	b.n	8005f60 <_dtoa_r+0x250>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fa8:	eb0a 0903 	add.w	r9, sl, r3
 8005fac:	f109 0301 	add.w	r3, r9, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	9308      	str	r3, [sp, #32]
 8005fb4:	bfb8      	it	lt
 8005fb6:	2301      	movlt	r3, #1
 8005fb8:	e7dd      	b.n	8005f76 <_dtoa_r+0x266>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e7f2      	b.n	8005fa4 <_dtoa_r+0x294>
 8005fbe:	bf00      	nop
 8005fc0:	636f4361 	.word	0x636f4361
 8005fc4:	3fd287a7 	.word	0x3fd287a7
 8005fc8:	8b60c8b3 	.word	0x8b60c8b3
 8005fcc:	3fc68a28 	.word	0x3fc68a28
 8005fd0:	509f79fb 	.word	0x509f79fb
 8005fd4:	3fd34413 	.word	0x3fd34413
 8005fd8:	08008c16 	.word	0x08008c16
 8005fdc:	08008c2d 	.word	0x08008c2d
 8005fe0:	7ff00000 	.word	0x7ff00000
 8005fe4:	08008c12 	.word	0x08008c12
 8005fe8:	08008c09 	.word	0x08008c09
 8005fec:	08008a89 	.word	0x08008a89
 8005ff0:	3ff80000 	.word	0x3ff80000
 8005ff4:	08008e00 	.word	0x08008e00
 8005ff8:	08008c88 	.word	0x08008c88
 8005ffc:	2401      	movs	r4, #1
 8005ffe:	2300      	movs	r3, #0
 8006000:	940b      	str	r4, [sp, #44]	; 0x2c
 8006002:	9322      	str	r3, [sp, #136]	; 0x88
 8006004:	f04f 39ff 	mov.w	r9, #4294967295
 8006008:	2200      	movs	r2, #0
 800600a:	2312      	movs	r3, #18
 800600c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006010:	9223      	str	r2, [sp, #140]	; 0x8c
 8006012:	e7b0      	b.n	8005f76 <_dtoa_r+0x266>
 8006014:	2301      	movs	r3, #1
 8006016:	930b      	str	r3, [sp, #44]	; 0x2c
 8006018:	e7f4      	b.n	8006004 <_dtoa_r+0x2f4>
 800601a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800601e:	464b      	mov	r3, r9
 8006020:	f8cd 9020 	str.w	r9, [sp, #32]
 8006024:	e7a7      	b.n	8005f76 <_dtoa_r+0x266>
 8006026:	3101      	adds	r1, #1
 8006028:	6041      	str	r1, [r0, #4]
 800602a:	0052      	lsls	r2, r2, #1
 800602c:	e7a7      	b.n	8005f7e <_dtoa_r+0x26e>
 800602e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006030:	9a03      	ldr	r2, [sp, #12]
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	9b08      	ldr	r3, [sp, #32]
 8006036:	2b0e      	cmp	r3, #14
 8006038:	f200 80a8 	bhi.w	800618c <_dtoa_r+0x47c>
 800603c:	2c00      	cmp	r4, #0
 800603e:	f000 80a5 	beq.w	800618c <_dtoa_r+0x47c>
 8006042:	f1ba 0f00 	cmp.w	sl, #0
 8006046:	dd34      	ble.n	80060b2 <_dtoa_r+0x3a2>
 8006048:	4a9a      	ldr	r2, [pc, #616]	; (80062b4 <_dtoa_r+0x5a4>)
 800604a:	f00a 030f 	and.w	r3, sl, #15
 800604e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006052:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006056:	e9d3 3400 	ldrd	r3, r4, [r3]
 800605a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800605e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006062:	d016      	beq.n	8006092 <_dtoa_r+0x382>
 8006064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006068:	4b93      	ldr	r3, [pc, #588]	; (80062b8 <_dtoa_r+0x5a8>)
 800606a:	2703      	movs	r7, #3
 800606c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006070:	f7fa fb5c 	bl	800072c <__aeabi_ddiv>
 8006074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006078:	f004 040f 	and.w	r4, r4, #15
 800607c:	4e8e      	ldr	r6, [pc, #568]	; (80062b8 <_dtoa_r+0x5a8>)
 800607e:	b954      	cbnz	r4, 8006096 <_dtoa_r+0x386>
 8006080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006088:	f7fa fb50 	bl	800072c <__aeabi_ddiv>
 800608c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006090:	e029      	b.n	80060e6 <_dtoa_r+0x3d6>
 8006092:	2702      	movs	r7, #2
 8006094:	e7f2      	b.n	800607c <_dtoa_r+0x36c>
 8006096:	07e1      	lsls	r1, r4, #31
 8006098:	d508      	bpl.n	80060ac <_dtoa_r+0x39c>
 800609a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800609e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060a2:	f7fa fa19 	bl	80004d8 <__aeabi_dmul>
 80060a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060aa:	3701      	adds	r7, #1
 80060ac:	1064      	asrs	r4, r4, #1
 80060ae:	3608      	adds	r6, #8
 80060b0:	e7e5      	b.n	800607e <_dtoa_r+0x36e>
 80060b2:	f000 80a5 	beq.w	8006200 <_dtoa_r+0x4f0>
 80060b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060ba:	f1ca 0400 	rsb	r4, sl, #0
 80060be:	4b7d      	ldr	r3, [pc, #500]	; (80062b4 <_dtoa_r+0x5a4>)
 80060c0:	f004 020f 	and.w	r2, r4, #15
 80060c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f7fa fa04 	bl	80004d8 <__aeabi_dmul>
 80060d0:	2702      	movs	r7, #2
 80060d2:	2300      	movs	r3, #0
 80060d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060d8:	4e77      	ldr	r6, [pc, #476]	; (80062b8 <_dtoa_r+0x5a8>)
 80060da:	1124      	asrs	r4, r4, #4
 80060dc:	2c00      	cmp	r4, #0
 80060de:	f040 8084 	bne.w	80061ea <_dtoa_r+0x4da>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1d2      	bne.n	800608c <_dtoa_r+0x37c>
 80060e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 808b 	beq.w	8006204 <_dtoa_r+0x4f4>
 80060ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060fa:	2200      	movs	r2, #0
 80060fc:	4b6f      	ldr	r3, [pc, #444]	; (80062bc <_dtoa_r+0x5ac>)
 80060fe:	f7fa fc5d 	bl	80009bc <__aeabi_dcmplt>
 8006102:	2800      	cmp	r0, #0
 8006104:	d07e      	beq.n	8006204 <_dtoa_r+0x4f4>
 8006106:	9b08      	ldr	r3, [sp, #32]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d07b      	beq.n	8006204 <_dtoa_r+0x4f4>
 800610c:	f1b9 0f00 	cmp.w	r9, #0
 8006110:	dd38      	ble.n	8006184 <_dtoa_r+0x474>
 8006112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006116:	2200      	movs	r2, #0
 8006118:	4b69      	ldr	r3, [pc, #420]	; (80062c0 <_dtoa_r+0x5b0>)
 800611a:	f7fa f9dd 	bl	80004d8 <__aeabi_dmul>
 800611e:	464c      	mov	r4, r9
 8006120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006124:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006128:	3701      	adds	r7, #1
 800612a:	4638      	mov	r0, r7
 800612c:	f7fa f96a 	bl	8000404 <__aeabi_i2d>
 8006130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006134:	f7fa f9d0 	bl	80004d8 <__aeabi_dmul>
 8006138:	2200      	movs	r2, #0
 800613a:	4b62      	ldr	r3, [pc, #392]	; (80062c4 <_dtoa_r+0x5b4>)
 800613c:	f7fa f816 	bl	800016c <__adddf3>
 8006140:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006144:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006148:	9611      	str	r6, [sp, #68]	; 0x44
 800614a:	2c00      	cmp	r4, #0
 800614c:	d15d      	bne.n	800620a <_dtoa_r+0x4fa>
 800614e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006152:	2200      	movs	r2, #0
 8006154:	4b5c      	ldr	r3, [pc, #368]	; (80062c8 <_dtoa_r+0x5b8>)
 8006156:	f7fa f807 	bl	8000168 <__aeabi_dsub>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006162:	4633      	mov	r3, r6
 8006164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006166:	f7fa fc47 	bl	80009f8 <__aeabi_dcmpgt>
 800616a:	2800      	cmp	r0, #0
 800616c:	f040 829c 	bne.w	80066a8 <_dtoa_r+0x998>
 8006170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006174:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006176:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800617a:	f7fa fc1f 	bl	80009bc <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	f040 8290 	bne.w	80066a4 <_dtoa_r+0x994>
 8006184:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006188:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800618c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800618e:	2b00      	cmp	r3, #0
 8006190:	f2c0 8152 	blt.w	8006438 <_dtoa_r+0x728>
 8006194:	f1ba 0f0e 	cmp.w	sl, #14
 8006198:	f300 814e 	bgt.w	8006438 <_dtoa_r+0x728>
 800619c:	4b45      	ldr	r3, [pc, #276]	; (80062b4 <_dtoa_r+0x5a4>)
 800619e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80061aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f280 80db 	bge.w	8006368 <_dtoa_r+0x658>
 80061b2:	9b08      	ldr	r3, [sp, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f300 80d7 	bgt.w	8006368 <_dtoa_r+0x658>
 80061ba:	f040 8272 	bne.w	80066a2 <_dtoa_r+0x992>
 80061be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061c2:	2200      	movs	r2, #0
 80061c4:	4b40      	ldr	r3, [pc, #256]	; (80062c8 <_dtoa_r+0x5b8>)
 80061c6:	f7fa f987 	bl	80004d8 <__aeabi_dmul>
 80061ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ce:	f7fa fc09 	bl	80009e4 <__aeabi_dcmpge>
 80061d2:	9c08      	ldr	r4, [sp, #32]
 80061d4:	4626      	mov	r6, r4
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f040 8248 	bne.w	800666c <_dtoa_r+0x95c>
 80061dc:	2331      	movs	r3, #49	; 0x31
 80061de:	9f03      	ldr	r7, [sp, #12]
 80061e0:	f10a 0a01 	add.w	sl, sl, #1
 80061e4:	f807 3b01 	strb.w	r3, [r7], #1
 80061e8:	e244      	b.n	8006674 <_dtoa_r+0x964>
 80061ea:	07e2      	lsls	r2, r4, #31
 80061ec:	d505      	bpl.n	80061fa <_dtoa_r+0x4ea>
 80061ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061f2:	f7fa f971 	bl	80004d8 <__aeabi_dmul>
 80061f6:	2301      	movs	r3, #1
 80061f8:	3701      	adds	r7, #1
 80061fa:	1064      	asrs	r4, r4, #1
 80061fc:	3608      	adds	r6, #8
 80061fe:	e76d      	b.n	80060dc <_dtoa_r+0x3cc>
 8006200:	2702      	movs	r7, #2
 8006202:	e770      	b.n	80060e6 <_dtoa_r+0x3d6>
 8006204:	46d0      	mov	r8, sl
 8006206:	9c08      	ldr	r4, [sp, #32]
 8006208:	e78f      	b.n	800612a <_dtoa_r+0x41a>
 800620a:	9903      	ldr	r1, [sp, #12]
 800620c:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <_dtoa_r+0x5a4>)
 800620e:	4421      	add	r1, r4
 8006210:	9112      	str	r1, [sp, #72]	; 0x48
 8006212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006214:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006218:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800621c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006220:	2900      	cmp	r1, #0
 8006222:	d055      	beq.n	80062d0 <_dtoa_r+0x5c0>
 8006224:	2000      	movs	r0, #0
 8006226:	4929      	ldr	r1, [pc, #164]	; (80062cc <_dtoa_r+0x5bc>)
 8006228:	f7fa fa80 	bl	800072c <__aeabi_ddiv>
 800622c:	463b      	mov	r3, r7
 800622e:	4632      	mov	r2, r6
 8006230:	f7f9 ff9a 	bl	8000168 <__aeabi_dsub>
 8006234:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006238:	9f03      	ldr	r7, [sp, #12]
 800623a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800623e:	f7fa fbfb 	bl	8000a38 <__aeabi_d2iz>
 8006242:	4604      	mov	r4, r0
 8006244:	f7fa f8de 	bl	8000404 <__aeabi_i2d>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006250:	f7f9 ff8a 	bl	8000168 <__aeabi_dsub>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	3430      	adds	r4, #48	; 0x30
 800625a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800625e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006262:	f807 4b01 	strb.w	r4, [r7], #1
 8006266:	f7fa fba9 	bl	80009bc <__aeabi_dcmplt>
 800626a:	2800      	cmp	r0, #0
 800626c:	d174      	bne.n	8006358 <_dtoa_r+0x648>
 800626e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006272:	2000      	movs	r0, #0
 8006274:	4911      	ldr	r1, [pc, #68]	; (80062bc <_dtoa_r+0x5ac>)
 8006276:	f7f9 ff77 	bl	8000168 <__aeabi_dsub>
 800627a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800627e:	f7fa fb9d 	bl	80009bc <__aeabi_dcmplt>
 8006282:	2800      	cmp	r0, #0
 8006284:	f040 80b7 	bne.w	80063f6 <_dtoa_r+0x6e6>
 8006288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800628a:	429f      	cmp	r7, r3
 800628c:	f43f af7a 	beq.w	8006184 <_dtoa_r+0x474>
 8006290:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006294:	2200      	movs	r2, #0
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <_dtoa_r+0x5b0>)
 8006298:	f7fa f91e 	bl	80004d8 <__aeabi_dmul>
 800629c:	2200      	movs	r2, #0
 800629e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a6:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <_dtoa_r+0x5b0>)
 80062a8:	f7fa f916 	bl	80004d8 <__aeabi_dmul>
 80062ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062b0:	e7c3      	b.n	800623a <_dtoa_r+0x52a>
 80062b2:	bf00      	nop
 80062b4:	08008e00 	.word	0x08008e00
 80062b8:	08008dd8 	.word	0x08008dd8
 80062bc:	3ff00000 	.word	0x3ff00000
 80062c0:	40240000 	.word	0x40240000
 80062c4:	401c0000 	.word	0x401c0000
 80062c8:	40140000 	.word	0x40140000
 80062cc:	3fe00000 	.word	0x3fe00000
 80062d0:	4630      	mov	r0, r6
 80062d2:	4639      	mov	r1, r7
 80062d4:	f7fa f900 	bl	80004d8 <__aeabi_dmul>
 80062d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062de:	9c03      	ldr	r4, [sp, #12]
 80062e0:	9314      	str	r3, [sp, #80]	; 0x50
 80062e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e6:	f7fa fba7 	bl	8000a38 <__aeabi_d2iz>
 80062ea:	9015      	str	r0, [sp, #84]	; 0x54
 80062ec:	f7fa f88a 	bl	8000404 <__aeabi_i2d>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f8:	f7f9 ff36 	bl	8000168 <__aeabi_dsub>
 80062fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062fe:	4606      	mov	r6, r0
 8006300:	3330      	adds	r3, #48	; 0x30
 8006302:	f804 3b01 	strb.w	r3, [r4], #1
 8006306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006308:	460f      	mov	r7, r1
 800630a:	429c      	cmp	r4, r3
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	d124      	bne.n	800635c <_dtoa_r+0x64c>
 8006312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006316:	4bb0      	ldr	r3, [pc, #704]	; (80065d8 <_dtoa_r+0x8c8>)
 8006318:	f7f9 ff28 	bl	800016c <__adddf3>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4630      	mov	r0, r6
 8006322:	4639      	mov	r1, r7
 8006324:	f7fa fb68 	bl	80009f8 <__aeabi_dcmpgt>
 8006328:	2800      	cmp	r0, #0
 800632a:	d163      	bne.n	80063f4 <_dtoa_r+0x6e4>
 800632c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006330:	2000      	movs	r0, #0
 8006332:	49a9      	ldr	r1, [pc, #676]	; (80065d8 <_dtoa_r+0x8c8>)
 8006334:	f7f9 ff18 	bl	8000168 <__aeabi_dsub>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4630      	mov	r0, r6
 800633e:	4639      	mov	r1, r7
 8006340:	f7fa fb3c 	bl	80009bc <__aeabi_dcmplt>
 8006344:	2800      	cmp	r0, #0
 8006346:	f43f af1d 	beq.w	8006184 <_dtoa_r+0x474>
 800634a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800634c:	1e7b      	subs	r3, r7, #1
 800634e:	9314      	str	r3, [sp, #80]	; 0x50
 8006350:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006354:	2b30      	cmp	r3, #48	; 0x30
 8006356:	d0f8      	beq.n	800634a <_dtoa_r+0x63a>
 8006358:	46c2      	mov	sl, r8
 800635a:	e03b      	b.n	80063d4 <_dtoa_r+0x6c4>
 800635c:	4b9f      	ldr	r3, [pc, #636]	; (80065dc <_dtoa_r+0x8cc>)
 800635e:	f7fa f8bb 	bl	80004d8 <__aeabi_dmul>
 8006362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006366:	e7bc      	b.n	80062e2 <_dtoa_r+0x5d2>
 8006368:	9f03      	ldr	r7, [sp, #12]
 800636a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800636e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006372:	4640      	mov	r0, r8
 8006374:	4649      	mov	r1, r9
 8006376:	f7fa f9d9 	bl	800072c <__aeabi_ddiv>
 800637a:	f7fa fb5d 	bl	8000a38 <__aeabi_d2iz>
 800637e:	4604      	mov	r4, r0
 8006380:	f7fa f840 	bl	8000404 <__aeabi_i2d>
 8006384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006388:	f7fa f8a6 	bl	80004d8 <__aeabi_dmul>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7f9 fee8 	bl	8000168 <__aeabi_dsub>
 8006398:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800639c:	f807 6b01 	strb.w	r6, [r7], #1
 80063a0:	9e03      	ldr	r6, [sp, #12]
 80063a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80063a6:	1bbe      	subs	r6, r7, r6
 80063a8:	45b4      	cmp	ip, r6
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	d136      	bne.n	800641e <_dtoa_r+0x70e>
 80063b0:	f7f9 fedc 	bl	800016c <__adddf3>
 80063b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063b8:	4680      	mov	r8, r0
 80063ba:	4689      	mov	r9, r1
 80063bc:	f7fa fb1c 	bl	80009f8 <__aeabi_dcmpgt>
 80063c0:	bb58      	cbnz	r0, 800641a <_dtoa_r+0x70a>
 80063c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063c6:	4640      	mov	r0, r8
 80063c8:	4649      	mov	r1, r9
 80063ca:	f7fa faed 	bl	80009a8 <__aeabi_dcmpeq>
 80063ce:	b108      	cbz	r0, 80063d4 <_dtoa_r+0x6c4>
 80063d0:	07e1      	lsls	r1, r4, #31
 80063d2:	d422      	bmi.n	800641a <_dtoa_r+0x70a>
 80063d4:	4628      	mov	r0, r5
 80063d6:	4659      	mov	r1, fp
 80063d8:	f000 ff62 	bl	80072a0 <_Bfree>
 80063dc:	2300      	movs	r3, #0
 80063de:	703b      	strb	r3, [r7, #0]
 80063e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80063e2:	f10a 0001 	add.w	r0, sl, #1
 80063e6:	6018      	str	r0, [r3, #0]
 80063e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f43f acde 	beq.w	8005dac <_dtoa_r+0x9c>
 80063f0:	601f      	str	r7, [r3, #0]
 80063f2:	e4db      	b.n	8005dac <_dtoa_r+0x9c>
 80063f4:	4627      	mov	r7, r4
 80063f6:	463b      	mov	r3, r7
 80063f8:	461f      	mov	r7, r3
 80063fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063fe:	2a39      	cmp	r2, #57	; 0x39
 8006400:	d107      	bne.n	8006412 <_dtoa_r+0x702>
 8006402:	9a03      	ldr	r2, [sp, #12]
 8006404:	429a      	cmp	r2, r3
 8006406:	d1f7      	bne.n	80063f8 <_dtoa_r+0x6e8>
 8006408:	2230      	movs	r2, #48	; 0x30
 800640a:	9903      	ldr	r1, [sp, #12]
 800640c:	f108 0801 	add.w	r8, r8, #1
 8006410:	700a      	strb	r2, [r1, #0]
 8006412:	781a      	ldrb	r2, [r3, #0]
 8006414:	3201      	adds	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	e79e      	b.n	8006358 <_dtoa_r+0x648>
 800641a:	46d0      	mov	r8, sl
 800641c:	e7eb      	b.n	80063f6 <_dtoa_r+0x6e6>
 800641e:	2200      	movs	r2, #0
 8006420:	4b6e      	ldr	r3, [pc, #440]	; (80065dc <_dtoa_r+0x8cc>)
 8006422:	f7fa f859 	bl	80004d8 <__aeabi_dmul>
 8006426:	2200      	movs	r2, #0
 8006428:	2300      	movs	r3, #0
 800642a:	4680      	mov	r8, r0
 800642c:	4689      	mov	r9, r1
 800642e:	f7fa fabb 	bl	80009a8 <__aeabi_dcmpeq>
 8006432:	2800      	cmp	r0, #0
 8006434:	d09b      	beq.n	800636e <_dtoa_r+0x65e>
 8006436:	e7cd      	b.n	80063d4 <_dtoa_r+0x6c4>
 8006438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800643a:	2a00      	cmp	r2, #0
 800643c:	f000 80d0 	beq.w	80065e0 <_dtoa_r+0x8d0>
 8006440:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006442:	2a01      	cmp	r2, #1
 8006444:	f300 80ae 	bgt.w	80065a4 <_dtoa_r+0x894>
 8006448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800644a:	2a00      	cmp	r2, #0
 800644c:	f000 80a6 	beq.w	800659c <_dtoa_r+0x88c>
 8006450:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006454:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006456:	9f06      	ldr	r7, [sp, #24]
 8006458:	9a06      	ldr	r2, [sp, #24]
 800645a:	2101      	movs	r1, #1
 800645c:	441a      	add	r2, r3
 800645e:	9206      	str	r2, [sp, #24]
 8006460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006462:	4628      	mov	r0, r5
 8006464:	441a      	add	r2, r3
 8006466:	9209      	str	r2, [sp, #36]	; 0x24
 8006468:	f001 f81a 	bl	80074a0 <__i2b>
 800646c:	4606      	mov	r6, r0
 800646e:	2f00      	cmp	r7, #0
 8006470:	dd0c      	ble.n	800648c <_dtoa_r+0x77c>
 8006472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	dd09      	ble.n	800648c <_dtoa_r+0x77c>
 8006478:	42bb      	cmp	r3, r7
 800647a:	bfa8      	it	ge
 800647c:	463b      	movge	r3, r7
 800647e:	9a06      	ldr	r2, [sp, #24]
 8006480:	1aff      	subs	r7, r7, r3
 8006482:	1ad2      	subs	r2, r2, r3
 8006484:	9206      	str	r2, [sp, #24]
 8006486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	9309      	str	r3, [sp, #36]	; 0x24
 800648c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648e:	b1f3      	cbz	r3, 80064ce <_dtoa_r+0x7be>
 8006490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80a8 	beq.w	80065e8 <_dtoa_r+0x8d8>
 8006498:	2c00      	cmp	r4, #0
 800649a:	dd10      	ble.n	80064be <_dtoa_r+0x7ae>
 800649c:	4631      	mov	r1, r6
 800649e:	4622      	mov	r2, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	f001 f8bb 	bl	800761c <__pow5mult>
 80064a6:	465a      	mov	r2, fp
 80064a8:	4601      	mov	r1, r0
 80064aa:	4606      	mov	r6, r0
 80064ac:	4628      	mov	r0, r5
 80064ae:	f001 f80d 	bl	80074cc <__multiply>
 80064b2:	4680      	mov	r8, r0
 80064b4:	4659      	mov	r1, fp
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 fef2 	bl	80072a0 <_Bfree>
 80064bc:	46c3      	mov	fp, r8
 80064be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c0:	1b1a      	subs	r2, r3, r4
 80064c2:	d004      	beq.n	80064ce <_dtoa_r+0x7be>
 80064c4:	4659      	mov	r1, fp
 80064c6:	4628      	mov	r0, r5
 80064c8:	f001 f8a8 	bl	800761c <__pow5mult>
 80064cc:	4683      	mov	fp, r0
 80064ce:	2101      	movs	r1, #1
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 ffe5 	bl	80074a0 <__i2b>
 80064d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064d8:	4604      	mov	r4, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f340 8086 	ble.w	80065ec <_dtoa_r+0x8dc>
 80064e0:	461a      	mov	r2, r3
 80064e2:	4601      	mov	r1, r0
 80064e4:	4628      	mov	r0, r5
 80064e6:	f001 f899 	bl	800761c <__pow5mult>
 80064ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ec:	4604      	mov	r4, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	dd7f      	ble.n	80065f2 <_dtoa_r+0x8e2>
 80064f2:	f04f 0800 	mov.w	r8, #0
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064fc:	6918      	ldr	r0, [r3, #16]
 80064fe:	f000 ff81 	bl	8007404 <__hi0bits>
 8006502:	f1c0 0020 	rsb	r0, r0, #32
 8006506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006508:	4418      	add	r0, r3
 800650a:	f010 001f 	ands.w	r0, r0, #31
 800650e:	f000 8092 	beq.w	8006636 <_dtoa_r+0x926>
 8006512:	f1c0 0320 	rsb	r3, r0, #32
 8006516:	2b04      	cmp	r3, #4
 8006518:	f340 808a 	ble.w	8006630 <_dtoa_r+0x920>
 800651c:	f1c0 001c 	rsb	r0, r0, #28
 8006520:	9b06      	ldr	r3, [sp, #24]
 8006522:	4407      	add	r7, r0
 8006524:	4403      	add	r3, r0
 8006526:	9306      	str	r3, [sp, #24]
 8006528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652a:	4403      	add	r3, r0
 800652c:	9309      	str	r3, [sp, #36]	; 0x24
 800652e:	9b06      	ldr	r3, [sp, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	dd05      	ble.n	8006540 <_dtoa_r+0x830>
 8006534:	4659      	mov	r1, fp
 8006536:	461a      	mov	r2, r3
 8006538:	4628      	mov	r0, r5
 800653a:	f001 f8c9 	bl	80076d0 <__lshift>
 800653e:	4683      	mov	fp, r0
 8006540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	dd05      	ble.n	8006552 <_dtoa_r+0x842>
 8006546:	4621      	mov	r1, r4
 8006548:	461a      	mov	r2, r3
 800654a:	4628      	mov	r0, r5
 800654c:	f001 f8c0 	bl	80076d0 <__lshift>
 8006550:	4604      	mov	r4, r0
 8006552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d070      	beq.n	800663a <_dtoa_r+0x92a>
 8006558:	4621      	mov	r1, r4
 800655a:	4658      	mov	r0, fp
 800655c:	f001 f928 	bl	80077b0 <__mcmp>
 8006560:	2800      	cmp	r0, #0
 8006562:	da6a      	bge.n	800663a <_dtoa_r+0x92a>
 8006564:	2300      	movs	r3, #0
 8006566:	4659      	mov	r1, fp
 8006568:	220a      	movs	r2, #10
 800656a:	4628      	mov	r0, r5
 800656c:	f000 feba 	bl	80072e4 <__multadd>
 8006570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006572:	4683      	mov	fp, r0
 8006574:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 8194 	beq.w	80068a6 <_dtoa_r+0xb96>
 800657e:	4631      	mov	r1, r6
 8006580:	2300      	movs	r3, #0
 8006582:	220a      	movs	r2, #10
 8006584:	4628      	mov	r0, r5
 8006586:	f000 fead 	bl	80072e4 <__multadd>
 800658a:	f1b9 0f00 	cmp.w	r9, #0
 800658e:	4606      	mov	r6, r0
 8006590:	f300 8093 	bgt.w	80066ba <_dtoa_r+0x9aa>
 8006594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006596:	2b02      	cmp	r3, #2
 8006598:	dc57      	bgt.n	800664a <_dtoa_r+0x93a>
 800659a:	e08e      	b.n	80066ba <_dtoa_r+0x9aa>
 800659c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800659e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065a2:	e757      	b.n	8006454 <_dtoa_r+0x744>
 80065a4:	9b08      	ldr	r3, [sp, #32]
 80065a6:	1e5c      	subs	r4, r3, #1
 80065a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	bfb7      	itett	lt
 80065ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065b0:	1b1c      	subge	r4, r3, r4
 80065b2:	1ae2      	sublt	r2, r4, r3
 80065b4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80065b6:	bfbe      	ittt	lt
 80065b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80065ba:	189b      	addlt	r3, r3, r2
 80065bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80065be:	9b08      	ldr	r3, [sp, #32]
 80065c0:	bfb8      	it	lt
 80065c2:	2400      	movlt	r4, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bfbb      	ittet	lt
 80065c8:	9b06      	ldrlt	r3, [sp, #24]
 80065ca:	9a08      	ldrlt	r2, [sp, #32]
 80065cc:	9f06      	ldrge	r7, [sp, #24]
 80065ce:	1a9f      	sublt	r7, r3, r2
 80065d0:	bfac      	ite	ge
 80065d2:	9b08      	ldrge	r3, [sp, #32]
 80065d4:	2300      	movlt	r3, #0
 80065d6:	e73f      	b.n	8006458 <_dtoa_r+0x748>
 80065d8:	3fe00000 	.word	0x3fe00000
 80065dc:	40240000 	.word	0x40240000
 80065e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065e2:	9f06      	ldr	r7, [sp, #24]
 80065e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065e6:	e742      	b.n	800646e <_dtoa_r+0x75e>
 80065e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ea:	e76b      	b.n	80064c4 <_dtoa_r+0x7b4>
 80065ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	dc19      	bgt.n	8006626 <_dtoa_r+0x916>
 80065f2:	9b04      	ldr	r3, [sp, #16]
 80065f4:	b9bb      	cbnz	r3, 8006626 <_dtoa_r+0x916>
 80065f6:	9b05      	ldr	r3, [sp, #20]
 80065f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065fc:	b99b      	cbnz	r3, 8006626 <_dtoa_r+0x916>
 80065fe:	9b05      	ldr	r3, [sp, #20]
 8006600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006604:	0d1b      	lsrs	r3, r3, #20
 8006606:	051b      	lsls	r3, r3, #20
 8006608:	b183      	cbz	r3, 800662c <_dtoa_r+0x91c>
 800660a:	f04f 0801 	mov.w	r8, #1
 800660e:	9b06      	ldr	r3, [sp, #24]
 8006610:	3301      	adds	r3, #1
 8006612:	9306      	str	r3, [sp, #24]
 8006614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006616:	3301      	adds	r3, #1
 8006618:	9309      	str	r3, [sp, #36]	; 0x24
 800661a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	f47f af6a 	bne.w	80064f6 <_dtoa_r+0x7e6>
 8006622:	2001      	movs	r0, #1
 8006624:	e76f      	b.n	8006506 <_dtoa_r+0x7f6>
 8006626:	f04f 0800 	mov.w	r8, #0
 800662a:	e7f6      	b.n	800661a <_dtoa_r+0x90a>
 800662c:	4698      	mov	r8, r3
 800662e:	e7f4      	b.n	800661a <_dtoa_r+0x90a>
 8006630:	f43f af7d 	beq.w	800652e <_dtoa_r+0x81e>
 8006634:	4618      	mov	r0, r3
 8006636:	301c      	adds	r0, #28
 8006638:	e772      	b.n	8006520 <_dtoa_r+0x810>
 800663a:	9b08      	ldr	r3, [sp, #32]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dc36      	bgt.n	80066ae <_dtoa_r+0x99e>
 8006640:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006642:	2b02      	cmp	r3, #2
 8006644:	dd33      	ble.n	80066ae <_dtoa_r+0x99e>
 8006646:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800664a:	f1b9 0f00 	cmp.w	r9, #0
 800664e:	d10d      	bne.n	800666c <_dtoa_r+0x95c>
 8006650:	4621      	mov	r1, r4
 8006652:	464b      	mov	r3, r9
 8006654:	2205      	movs	r2, #5
 8006656:	4628      	mov	r0, r5
 8006658:	f000 fe44 	bl	80072e4 <__multadd>
 800665c:	4601      	mov	r1, r0
 800665e:	4604      	mov	r4, r0
 8006660:	4658      	mov	r0, fp
 8006662:	f001 f8a5 	bl	80077b0 <__mcmp>
 8006666:	2800      	cmp	r0, #0
 8006668:	f73f adb8 	bgt.w	80061dc <_dtoa_r+0x4cc>
 800666c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800666e:	9f03      	ldr	r7, [sp, #12]
 8006670:	ea6f 0a03 	mvn.w	sl, r3
 8006674:	f04f 0800 	mov.w	r8, #0
 8006678:	4621      	mov	r1, r4
 800667a:	4628      	mov	r0, r5
 800667c:	f000 fe10 	bl	80072a0 <_Bfree>
 8006680:	2e00      	cmp	r6, #0
 8006682:	f43f aea7 	beq.w	80063d4 <_dtoa_r+0x6c4>
 8006686:	f1b8 0f00 	cmp.w	r8, #0
 800668a:	d005      	beq.n	8006698 <_dtoa_r+0x988>
 800668c:	45b0      	cmp	r8, r6
 800668e:	d003      	beq.n	8006698 <_dtoa_r+0x988>
 8006690:	4641      	mov	r1, r8
 8006692:	4628      	mov	r0, r5
 8006694:	f000 fe04 	bl	80072a0 <_Bfree>
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	f000 fe00 	bl	80072a0 <_Bfree>
 80066a0:	e698      	b.n	80063d4 <_dtoa_r+0x6c4>
 80066a2:	2400      	movs	r4, #0
 80066a4:	4626      	mov	r6, r4
 80066a6:	e7e1      	b.n	800666c <_dtoa_r+0x95c>
 80066a8:	46c2      	mov	sl, r8
 80066aa:	4626      	mov	r6, r4
 80066ac:	e596      	b.n	80061dc <_dtoa_r+0x4cc>
 80066ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80fd 	beq.w	80068b4 <_dtoa_r+0xba4>
 80066ba:	2f00      	cmp	r7, #0
 80066bc:	dd05      	ble.n	80066ca <_dtoa_r+0x9ba>
 80066be:	4631      	mov	r1, r6
 80066c0:	463a      	mov	r2, r7
 80066c2:	4628      	mov	r0, r5
 80066c4:	f001 f804 	bl	80076d0 <__lshift>
 80066c8:	4606      	mov	r6, r0
 80066ca:	f1b8 0f00 	cmp.w	r8, #0
 80066ce:	d05c      	beq.n	800678a <_dtoa_r+0xa7a>
 80066d0:	4628      	mov	r0, r5
 80066d2:	6871      	ldr	r1, [r6, #4]
 80066d4:	f000 fda4 	bl	8007220 <_Balloc>
 80066d8:	4607      	mov	r7, r0
 80066da:	b928      	cbnz	r0, 80066e8 <_dtoa_r+0x9d8>
 80066dc:	4602      	mov	r2, r0
 80066de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066e2:	4b7f      	ldr	r3, [pc, #508]	; (80068e0 <_dtoa_r+0xbd0>)
 80066e4:	f7ff bb28 	b.w	8005d38 <_dtoa_r+0x28>
 80066e8:	6932      	ldr	r2, [r6, #16]
 80066ea:	f106 010c 	add.w	r1, r6, #12
 80066ee:	3202      	adds	r2, #2
 80066f0:	0092      	lsls	r2, r2, #2
 80066f2:	300c      	adds	r0, #12
 80066f4:	f000 fd86 	bl	8007204 <memcpy>
 80066f8:	2201      	movs	r2, #1
 80066fa:	4639      	mov	r1, r7
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 ffe7 	bl	80076d0 <__lshift>
 8006702:	46b0      	mov	r8, r6
 8006704:	4606      	mov	r6, r0
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	9308      	str	r3, [sp, #32]
 800670c:	9b03      	ldr	r3, [sp, #12]
 800670e:	444b      	add	r3, r9
 8006710:	930a      	str	r3, [sp, #40]	; 0x28
 8006712:	9b04      	ldr	r3, [sp, #16]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	9309      	str	r3, [sp, #36]	; 0x24
 800671a:	9b08      	ldr	r3, [sp, #32]
 800671c:	4621      	mov	r1, r4
 800671e:	3b01      	subs	r3, #1
 8006720:	4658      	mov	r0, fp
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	f7ff fa68 	bl	8005bf8 <quorem>
 8006728:	4603      	mov	r3, r0
 800672a:	4641      	mov	r1, r8
 800672c:	3330      	adds	r3, #48	; 0x30
 800672e:	9006      	str	r0, [sp, #24]
 8006730:	4658      	mov	r0, fp
 8006732:	930b      	str	r3, [sp, #44]	; 0x2c
 8006734:	f001 f83c 	bl	80077b0 <__mcmp>
 8006738:	4632      	mov	r2, r6
 800673a:	4681      	mov	r9, r0
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f001 f852 	bl	80077e8 <__mdiff>
 8006744:	68c2      	ldr	r2, [r0, #12]
 8006746:	4607      	mov	r7, r0
 8006748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674a:	bb02      	cbnz	r2, 800678e <_dtoa_r+0xa7e>
 800674c:	4601      	mov	r1, r0
 800674e:	4658      	mov	r0, fp
 8006750:	f001 f82e 	bl	80077b0 <__mcmp>
 8006754:	4602      	mov	r2, r0
 8006756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006758:	4639      	mov	r1, r7
 800675a:	4628      	mov	r0, r5
 800675c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006760:	f000 fd9e 	bl	80072a0 <_Bfree>
 8006764:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006768:	9f08      	ldr	r7, [sp, #32]
 800676a:	ea43 0102 	orr.w	r1, r3, r2
 800676e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006770:	430b      	orrs	r3, r1
 8006772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006774:	d10d      	bne.n	8006792 <_dtoa_r+0xa82>
 8006776:	2b39      	cmp	r3, #57	; 0x39
 8006778:	d029      	beq.n	80067ce <_dtoa_r+0xabe>
 800677a:	f1b9 0f00 	cmp.w	r9, #0
 800677e:	dd01      	ble.n	8006784 <_dtoa_r+0xa74>
 8006780:	9b06      	ldr	r3, [sp, #24]
 8006782:	3331      	adds	r3, #49	; 0x31
 8006784:	9a04      	ldr	r2, [sp, #16]
 8006786:	7013      	strb	r3, [r2, #0]
 8006788:	e776      	b.n	8006678 <_dtoa_r+0x968>
 800678a:	4630      	mov	r0, r6
 800678c:	e7b9      	b.n	8006702 <_dtoa_r+0x9f2>
 800678e:	2201      	movs	r2, #1
 8006790:	e7e2      	b.n	8006758 <_dtoa_r+0xa48>
 8006792:	f1b9 0f00 	cmp.w	r9, #0
 8006796:	db06      	blt.n	80067a6 <_dtoa_r+0xa96>
 8006798:	9922      	ldr	r1, [sp, #136]	; 0x88
 800679a:	ea41 0909 	orr.w	r9, r1, r9
 800679e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a0:	ea59 0101 	orrs.w	r1, r9, r1
 80067a4:	d120      	bne.n	80067e8 <_dtoa_r+0xad8>
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	ddec      	ble.n	8006784 <_dtoa_r+0xa74>
 80067aa:	4659      	mov	r1, fp
 80067ac:	2201      	movs	r2, #1
 80067ae:	4628      	mov	r0, r5
 80067b0:	9308      	str	r3, [sp, #32]
 80067b2:	f000 ff8d 	bl	80076d0 <__lshift>
 80067b6:	4621      	mov	r1, r4
 80067b8:	4683      	mov	fp, r0
 80067ba:	f000 fff9 	bl	80077b0 <__mcmp>
 80067be:	2800      	cmp	r0, #0
 80067c0:	9b08      	ldr	r3, [sp, #32]
 80067c2:	dc02      	bgt.n	80067ca <_dtoa_r+0xaba>
 80067c4:	d1de      	bne.n	8006784 <_dtoa_r+0xa74>
 80067c6:	07da      	lsls	r2, r3, #31
 80067c8:	d5dc      	bpl.n	8006784 <_dtoa_r+0xa74>
 80067ca:	2b39      	cmp	r3, #57	; 0x39
 80067cc:	d1d8      	bne.n	8006780 <_dtoa_r+0xa70>
 80067ce:	2339      	movs	r3, #57	; 0x39
 80067d0:	9a04      	ldr	r2, [sp, #16]
 80067d2:	7013      	strb	r3, [r2, #0]
 80067d4:	463b      	mov	r3, r7
 80067d6:	461f      	mov	r7, r3
 80067d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80067dc:	3b01      	subs	r3, #1
 80067de:	2a39      	cmp	r2, #57	; 0x39
 80067e0:	d050      	beq.n	8006884 <_dtoa_r+0xb74>
 80067e2:	3201      	adds	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e747      	b.n	8006678 <_dtoa_r+0x968>
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	dd03      	ble.n	80067f4 <_dtoa_r+0xae4>
 80067ec:	2b39      	cmp	r3, #57	; 0x39
 80067ee:	d0ee      	beq.n	80067ce <_dtoa_r+0xabe>
 80067f0:	3301      	adds	r3, #1
 80067f2:	e7c7      	b.n	8006784 <_dtoa_r+0xa74>
 80067f4:	9a08      	ldr	r2, [sp, #32]
 80067f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067fc:	428a      	cmp	r2, r1
 80067fe:	d02a      	beq.n	8006856 <_dtoa_r+0xb46>
 8006800:	4659      	mov	r1, fp
 8006802:	2300      	movs	r3, #0
 8006804:	220a      	movs	r2, #10
 8006806:	4628      	mov	r0, r5
 8006808:	f000 fd6c 	bl	80072e4 <__multadd>
 800680c:	45b0      	cmp	r8, r6
 800680e:	4683      	mov	fp, r0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	f04f 020a 	mov.w	r2, #10
 8006818:	4641      	mov	r1, r8
 800681a:	4628      	mov	r0, r5
 800681c:	d107      	bne.n	800682e <_dtoa_r+0xb1e>
 800681e:	f000 fd61 	bl	80072e4 <__multadd>
 8006822:	4680      	mov	r8, r0
 8006824:	4606      	mov	r6, r0
 8006826:	9b08      	ldr	r3, [sp, #32]
 8006828:	3301      	adds	r3, #1
 800682a:	9308      	str	r3, [sp, #32]
 800682c:	e775      	b.n	800671a <_dtoa_r+0xa0a>
 800682e:	f000 fd59 	bl	80072e4 <__multadd>
 8006832:	4631      	mov	r1, r6
 8006834:	4680      	mov	r8, r0
 8006836:	2300      	movs	r3, #0
 8006838:	220a      	movs	r2, #10
 800683a:	4628      	mov	r0, r5
 800683c:	f000 fd52 	bl	80072e4 <__multadd>
 8006840:	4606      	mov	r6, r0
 8006842:	e7f0      	b.n	8006826 <_dtoa_r+0xb16>
 8006844:	f1b9 0f00 	cmp.w	r9, #0
 8006848:	bfcc      	ite	gt
 800684a:	464f      	movgt	r7, r9
 800684c:	2701      	movle	r7, #1
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	9a03      	ldr	r2, [sp, #12]
 8006854:	4417      	add	r7, r2
 8006856:	4659      	mov	r1, fp
 8006858:	2201      	movs	r2, #1
 800685a:	4628      	mov	r0, r5
 800685c:	9308      	str	r3, [sp, #32]
 800685e:	f000 ff37 	bl	80076d0 <__lshift>
 8006862:	4621      	mov	r1, r4
 8006864:	4683      	mov	fp, r0
 8006866:	f000 ffa3 	bl	80077b0 <__mcmp>
 800686a:	2800      	cmp	r0, #0
 800686c:	dcb2      	bgt.n	80067d4 <_dtoa_r+0xac4>
 800686e:	d102      	bne.n	8006876 <_dtoa_r+0xb66>
 8006870:	9b08      	ldr	r3, [sp, #32]
 8006872:	07db      	lsls	r3, r3, #31
 8006874:	d4ae      	bmi.n	80067d4 <_dtoa_r+0xac4>
 8006876:	463b      	mov	r3, r7
 8006878:	461f      	mov	r7, r3
 800687a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800687e:	2a30      	cmp	r2, #48	; 0x30
 8006880:	d0fa      	beq.n	8006878 <_dtoa_r+0xb68>
 8006882:	e6f9      	b.n	8006678 <_dtoa_r+0x968>
 8006884:	9a03      	ldr	r2, [sp, #12]
 8006886:	429a      	cmp	r2, r3
 8006888:	d1a5      	bne.n	80067d6 <_dtoa_r+0xac6>
 800688a:	2331      	movs	r3, #49	; 0x31
 800688c:	f10a 0a01 	add.w	sl, sl, #1
 8006890:	e779      	b.n	8006786 <_dtoa_r+0xa76>
 8006892:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <_dtoa_r+0xbd4>)
 8006894:	f7ff baa8 	b.w	8005de8 <_dtoa_r+0xd8>
 8006898:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800689a:	2b00      	cmp	r3, #0
 800689c:	f47f aa81 	bne.w	8005da2 <_dtoa_r+0x92>
 80068a0:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <_dtoa_r+0xbd8>)
 80068a2:	f7ff baa1 	b.w	8005de8 <_dtoa_r+0xd8>
 80068a6:	f1b9 0f00 	cmp.w	r9, #0
 80068aa:	dc03      	bgt.n	80068b4 <_dtoa_r+0xba4>
 80068ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	f73f aecb 	bgt.w	800664a <_dtoa_r+0x93a>
 80068b4:	9f03      	ldr	r7, [sp, #12]
 80068b6:	4621      	mov	r1, r4
 80068b8:	4658      	mov	r0, fp
 80068ba:	f7ff f99d 	bl	8005bf8 <quorem>
 80068be:	9a03      	ldr	r2, [sp, #12]
 80068c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80068c4:	f807 3b01 	strb.w	r3, [r7], #1
 80068c8:	1aba      	subs	r2, r7, r2
 80068ca:	4591      	cmp	r9, r2
 80068cc:	ddba      	ble.n	8006844 <_dtoa_r+0xb34>
 80068ce:	4659      	mov	r1, fp
 80068d0:	2300      	movs	r3, #0
 80068d2:	220a      	movs	r2, #10
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 fd05 	bl	80072e4 <__multadd>
 80068da:	4683      	mov	fp, r0
 80068dc:	e7eb      	b.n	80068b6 <_dtoa_r+0xba6>
 80068de:	bf00      	nop
 80068e0:	08008c88 	.word	0x08008c88
 80068e4:	08008a88 	.word	0x08008a88
 80068e8:	08008c09 	.word	0x08008c09

080068ec <std>:
 80068ec:	2300      	movs	r3, #0
 80068ee:	b510      	push	{r4, lr}
 80068f0:	4604      	mov	r4, r0
 80068f2:	e9c0 3300 	strd	r3, r3, [r0]
 80068f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068fa:	6083      	str	r3, [r0, #8]
 80068fc:	8181      	strh	r1, [r0, #12]
 80068fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006900:	81c2      	strh	r2, [r0, #14]
 8006902:	6183      	str	r3, [r0, #24]
 8006904:	4619      	mov	r1, r3
 8006906:	2208      	movs	r2, #8
 8006908:	305c      	adds	r0, #92	; 0x5c
 800690a:	f7fd fc33 	bl	8004174 <memset>
 800690e:	4b05      	ldr	r3, [pc, #20]	; (8006924 <std+0x38>)
 8006910:	6224      	str	r4, [r4, #32]
 8006912:	6263      	str	r3, [r4, #36]	; 0x24
 8006914:	4b04      	ldr	r3, [pc, #16]	; (8006928 <std+0x3c>)
 8006916:	62a3      	str	r3, [r4, #40]	; 0x28
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <std+0x40>)
 800691a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <std+0x44>)
 800691e:	6323      	str	r3, [r4, #48]	; 0x30
 8006920:	bd10      	pop	{r4, pc}
 8006922:	bf00      	nop
 8006924:	08008305 	.word	0x08008305
 8006928:	08008327 	.word	0x08008327
 800692c:	0800835f 	.word	0x0800835f
 8006930:	08008383 	.word	0x08008383

08006934 <_cleanup_r>:
 8006934:	4901      	ldr	r1, [pc, #4]	; (800693c <_cleanup_r+0x8>)
 8006936:	f000 b8af 	b.w	8006a98 <_fwalk_reent>
 800693a:	bf00      	nop
 800693c:	080086d5 	.word	0x080086d5

08006940 <__sfmoreglue>:
 8006940:	2268      	movs	r2, #104	; 0x68
 8006942:	b570      	push	{r4, r5, r6, lr}
 8006944:	1e4d      	subs	r5, r1, #1
 8006946:	4355      	muls	r5, r2
 8006948:	460e      	mov	r6, r1
 800694a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800694e:	f001 f99b 	bl	8007c88 <_malloc_r>
 8006952:	4604      	mov	r4, r0
 8006954:	b140      	cbz	r0, 8006968 <__sfmoreglue+0x28>
 8006956:	2100      	movs	r1, #0
 8006958:	e9c0 1600 	strd	r1, r6, [r0]
 800695c:	300c      	adds	r0, #12
 800695e:	60a0      	str	r0, [r4, #8]
 8006960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006964:	f7fd fc06 	bl	8004174 <memset>
 8006968:	4620      	mov	r0, r4
 800696a:	bd70      	pop	{r4, r5, r6, pc}

0800696c <__sfp_lock_acquire>:
 800696c:	4801      	ldr	r0, [pc, #4]	; (8006974 <__sfp_lock_acquire+0x8>)
 800696e:	f000 bc1e 	b.w	80071ae <__retarget_lock_acquire_recursive>
 8006972:	bf00      	nop
 8006974:	20000301 	.word	0x20000301

08006978 <__sfp_lock_release>:
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <__sfp_lock_release+0x8>)
 800697a:	f000 bc19 	b.w	80071b0 <__retarget_lock_release_recursive>
 800697e:	bf00      	nop
 8006980:	20000301 	.word	0x20000301

08006984 <__sinit_lock_acquire>:
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <__sinit_lock_acquire+0x8>)
 8006986:	f000 bc12 	b.w	80071ae <__retarget_lock_acquire_recursive>
 800698a:	bf00      	nop
 800698c:	20000302 	.word	0x20000302

08006990 <__sinit_lock_release>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__sinit_lock_release+0x8>)
 8006992:	f000 bc0d 	b.w	80071b0 <__retarget_lock_release_recursive>
 8006996:	bf00      	nop
 8006998:	20000302 	.word	0x20000302

0800699c <__sinit>:
 800699c:	b510      	push	{r4, lr}
 800699e:	4604      	mov	r4, r0
 80069a0:	f7ff fff0 	bl	8006984 <__sinit_lock_acquire>
 80069a4:	69a3      	ldr	r3, [r4, #24]
 80069a6:	b11b      	cbz	r3, 80069b0 <__sinit+0x14>
 80069a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ac:	f7ff bff0 	b.w	8006990 <__sinit_lock_release>
 80069b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069b4:	6523      	str	r3, [r4, #80]	; 0x50
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <__sinit+0x68>)
 80069b8:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <__sinit+0x6c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80069be:	42a3      	cmp	r3, r4
 80069c0:	bf08      	it	eq
 80069c2:	2301      	moveq	r3, #1
 80069c4:	4620      	mov	r0, r4
 80069c6:	bf08      	it	eq
 80069c8:	61a3      	streq	r3, [r4, #24]
 80069ca:	f000 f81f 	bl	8006a0c <__sfp>
 80069ce:	6060      	str	r0, [r4, #4]
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 f81b 	bl	8006a0c <__sfp>
 80069d6:	60a0      	str	r0, [r4, #8]
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f817 	bl	8006a0c <__sfp>
 80069de:	2200      	movs	r2, #0
 80069e0:	2104      	movs	r1, #4
 80069e2:	60e0      	str	r0, [r4, #12]
 80069e4:	6860      	ldr	r0, [r4, #4]
 80069e6:	f7ff ff81 	bl	80068ec <std>
 80069ea:	2201      	movs	r2, #1
 80069ec:	2109      	movs	r1, #9
 80069ee:	68a0      	ldr	r0, [r4, #8]
 80069f0:	f7ff ff7c 	bl	80068ec <std>
 80069f4:	2202      	movs	r2, #2
 80069f6:	2112      	movs	r1, #18
 80069f8:	68e0      	ldr	r0, [r4, #12]
 80069fa:	f7ff ff77 	bl	80068ec <std>
 80069fe:	2301      	movs	r3, #1
 8006a00:	61a3      	str	r3, [r4, #24]
 8006a02:	e7d1      	b.n	80069a8 <__sinit+0xc>
 8006a04:	08008a74 	.word	0x08008a74
 8006a08:	08006935 	.word	0x08006935

08006a0c <__sfp>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	4607      	mov	r7, r0
 8006a10:	f7ff ffac 	bl	800696c <__sfp_lock_acquire>
 8006a14:	4b1e      	ldr	r3, [pc, #120]	; (8006a90 <__sfp+0x84>)
 8006a16:	681e      	ldr	r6, [r3, #0]
 8006a18:	69b3      	ldr	r3, [r6, #24]
 8006a1a:	b913      	cbnz	r3, 8006a22 <__sfp+0x16>
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7ff ffbd 	bl	800699c <__sinit>
 8006a22:	3648      	adds	r6, #72	; 0x48
 8006a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	d503      	bpl.n	8006a34 <__sfp+0x28>
 8006a2c:	6833      	ldr	r3, [r6, #0]
 8006a2e:	b30b      	cbz	r3, 8006a74 <__sfp+0x68>
 8006a30:	6836      	ldr	r6, [r6, #0]
 8006a32:	e7f7      	b.n	8006a24 <__sfp+0x18>
 8006a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a38:	b9d5      	cbnz	r5, 8006a70 <__sfp+0x64>
 8006a3a:	4b16      	ldr	r3, [pc, #88]	; (8006a94 <__sfp+0x88>)
 8006a3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a40:	60e3      	str	r3, [r4, #12]
 8006a42:	6665      	str	r5, [r4, #100]	; 0x64
 8006a44:	f000 fbb2 	bl	80071ac <__retarget_lock_init_recursive>
 8006a48:	f7ff ff96 	bl	8006978 <__sfp_lock_release>
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	4629      	mov	r1, r5
 8006a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a58:	6025      	str	r5, [r4, #0]
 8006a5a:	61a5      	str	r5, [r4, #24]
 8006a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a60:	f7fd fb88 	bl	8004174 <memset>
 8006a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a70:	3468      	adds	r4, #104	; 0x68
 8006a72:	e7d9      	b.n	8006a28 <__sfp+0x1c>
 8006a74:	2104      	movs	r1, #4
 8006a76:	4638      	mov	r0, r7
 8006a78:	f7ff ff62 	bl	8006940 <__sfmoreglue>
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	6030      	str	r0, [r6, #0]
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d1d5      	bne.n	8006a30 <__sfp+0x24>
 8006a84:	f7ff ff78 	bl	8006978 <__sfp_lock_release>
 8006a88:	230c      	movs	r3, #12
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	e7ee      	b.n	8006a6c <__sfp+0x60>
 8006a8e:	bf00      	nop
 8006a90:	08008a74 	.word	0x08008a74
 8006a94:	ffff0001 	.word	0xffff0001

08006a98 <_fwalk_reent>:
 8006a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	4688      	mov	r8, r1
 8006aa0:	2700      	movs	r7, #0
 8006aa2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006aa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aaa:	f1b9 0901 	subs.w	r9, r9, #1
 8006aae:	d505      	bpl.n	8006abc <_fwalk_reent+0x24>
 8006ab0:	6824      	ldr	r4, [r4, #0]
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	d1f7      	bne.n	8006aa6 <_fwalk_reent+0xe>
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006abc:	89ab      	ldrh	r3, [r5, #12]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d907      	bls.n	8006ad2 <_fwalk_reent+0x3a>
 8006ac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	d003      	beq.n	8006ad2 <_fwalk_reent+0x3a>
 8006aca:	4629      	mov	r1, r5
 8006acc:	4630      	mov	r0, r6
 8006ace:	47c0      	blx	r8
 8006ad0:	4307      	orrs	r7, r0
 8006ad2:	3568      	adds	r5, #104	; 0x68
 8006ad4:	e7e9      	b.n	8006aaa <_fwalk_reent+0x12>

08006ad6 <rshift>:
 8006ad6:	6903      	ldr	r3, [r0, #16]
 8006ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006adc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006ae0:	f100 0414 	add.w	r4, r0, #20
 8006ae4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006ae8:	dd46      	ble.n	8006b78 <rshift+0xa2>
 8006aea:	f011 011f 	ands.w	r1, r1, #31
 8006aee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006af2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006af6:	d10c      	bne.n	8006b12 <rshift+0x3c>
 8006af8:	4629      	mov	r1, r5
 8006afa:	f100 0710 	add.w	r7, r0, #16
 8006afe:	42b1      	cmp	r1, r6
 8006b00:	d335      	bcc.n	8006b6e <rshift+0x98>
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	1eea      	subs	r2, r5, #3
 8006b08:	4296      	cmp	r6, r2
 8006b0a:	bf38      	it	cc
 8006b0c:	2300      	movcc	r3, #0
 8006b0e:	4423      	add	r3, r4
 8006b10:	e015      	b.n	8006b3e <rshift+0x68>
 8006b12:	46a1      	mov	r9, r4
 8006b14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b18:	f1c1 0820 	rsb	r8, r1, #32
 8006b1c:	40cf      	lsrs	r7, r1
 8006b1e:	f105 0e04 	add.w	lr, r5, #4
 8006b22:	4576      	cmp	r6, lr
 8006b24:	46f4      	mov	ip, lr
 8006b26:	d816      	bhi.n	8006b56 <rshift+0x80>
 8006b28:	1a9a      	subs	r2, r3, r2
 8006b2a:	0092      	lsls	r2, r2, #2
 8006b2c:	3a04      	subs	r2, #4
 8006b2e:	3501      	adds	r5, #1
 8006b30:	42ae      	cmp	r6, r5
 8006b32:	bf38      	it	cc
 8006b34:	2200      	movcc	r2, #0
 8006b36:	18a3      	adds	r3, r4, r2
 8006b38:	50a7      	str	r7, [r4, r2]
 8006b3a:	b107      	cbz	r7, 8006b3e <rshift+0x68>
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	eba3 0204 	sub.w	r2, r3, r4
 8006b44:	bf08      	it	eq
 8006b46:	2300      	moveq	r3, #0
 8006b48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b4c:	6102      	str	r2, [r0, #16]
 8006b4e:	bf08      	it	eq
 8006b50:	6143      	streq	r3, [r0, #20]
 8006b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b56:	f8dc c000 	ldr.w	ip, [ip]
 8006b5a:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b5e:	ea4c 0707 	orr.w	r7, ip, r7
 8006b62:	f849 7b04 	str.w	r7, [r9], #4
 8006b66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b6a:	40cf      	lsrs	r7, r1
 8006b6c:	e7d9      	b.n	8006b22 <rshift+0x4c>
 8006b6e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b72:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b76:	e7c2      	b.n	8006afe <rshift+0x28>
 8006b78:	4623      	mov	r3, r4
 8006b7a:	e7e0      	b.n	8006b3e <rshift+0x68>

08006b7c <__hexdig_fun>:
 8006b7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	d802      	bhi.n	8006b8a <__hexdig_fun+0xe>
 8006b84:	3820      	subs	r0, #32
 8006b86:	b2c0      	uxtb	r0, r0
 8006b88:	4770      	bx	lr
 8006b8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006b8e:	2b05      	cmp	r3, #5
 8006b90:	d801      	bhi.n	8006b96 <__hexdig_fun+0x1a>
 8006b92:	3847      	subs	r0, #71	; 0x47
 8006b94:	e7f7      	b.n	8006b86 <__hexdig_fun+0xa>
 8006b96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b9a:	2b05      	cmp	r3, #5
 8006b9c:	d801      	bhi.n	8006ba2 <__hexdig_fun+0x26>
 8006b9e:	3827      	subs	r0, #39	; 0x27
 8006ba0:	e7f1      	b.n	8006b86 <__hexdig_fun+0xa>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	4770      	bx	lr
	...

08006ba8 <__gethex>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	b08b      	sub	sp, #44	; 0x2c
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	4bb2      	ldr	r3, [pc, #712]	; (8006e7c <__gethex+0x2d4>)
 8006bb2:	9002      	str	r0, [sp, #8]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	468b      	mov	fp, r1
 8006bb8:	4618      	mov	r0, r3
 8006bba:	4690      	mov	r8, r2
 8006bbc:	9303      	str	r3, [sp, #12]
 8006bbe:	f7f9 fac7 	bl	8000150 <strlen>
 8006bc2:	4682      	mov	sl, r0
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	f8db 2000 	ldr.w	r2, [fp]
 8006bca:	4403      	add	r3, r0
 8006bcc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006bd0:	9306      	str	r3, [sp, #24]
 8006bd2:	1c93      	adds	r3, r2, #2
 8006bd4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006bd8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006bdc:	32fe      	adds	r2, #254	; 0xfe
 8006bde:	18d1      	adds	r1, r2, r3
 8006be0:	461f      	mov	r7, r3
 8006be2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006be6:	9101      	str	r1, [sp, #4]
 8006be8:	2830      	cmp	r0, #48	; 0x30
 8006bea:	d0f8      	beq.n	8006bde <__gethex+0x36>
 8006bec:	f7ff ffc6 	bl	8006b7c <__hexdig_fun>
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d13a      	bne.n	8006c6c <__gethex+0xc4>
 8006bf6:	4652      	mov	r2, sl
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	9903      	ldr	r1, [sp, #12]
 8006bfc:	f001 fbc5 	bl	800838a <strncmp>
 8006c00:	4605      	mov	r5, r0
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d166      	bne.n	8006cd4 <__gethex+0x12c>
 8006c06:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c0a:	eb07 060a 	add.w	r6, r7, sl
 8006c0e:	f7ff ffb5 	bl	8006b7c <__hexdig_fun>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d060      	beq.n	8006cd8 <__gethex+0x130>
 8006c16:	4633      	mov	r3, r6
 8006c18:	7818      	ldrb	r0, [r3, #0]
 8006c1a:	461f      	mov	r7, r3
 8006c1c:	2830      	cmp	r0, #48	; 0x30
 8006c1e:	f103 0301 	add.w	r3, r3, #1
 8006c22:	d0f9      	beq.n	8006c18 <__gethex+0x70>
 8006c24:	f7ff ffaa 	bl	8006b7c <__hexdig_fun>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	fab0 f480 	clz	r4, r0
 8006c2e:	4635      	mov	r5, r6
 8006c30:	0964      	lsrs	r4, r4, #5
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	463a      	mov	r2, r7
 8006c36:	4616      	mov	r6, r2
 8006c38:	7830      	ldrb	r0, [r6, #0]
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	f7ff ff9e 	bl	8006b7c <__hexdig_fun>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d1f8      	bne.n	8006c36 <__gethex+0x8e>
 8006c44:	4652      	mov	r2, sl
 8006c46:	4630      	mov	r0, r6
 8006c48:	9903      	ldr	r1, [sp, #12]
 8006c4a:	f001 fb9e 	bl	800838a <strncmp>
 8006c4e:	b980      	cbnz	r0, 8006c72 <__gethex+0xca>
 8006c50:	b94d      	cbnz	r5, 8006c66 <__gethex+0xbe>
 8006c52:	eb06 050a 	add.w	r5, r6, sl
 8006c56:	462a      	mov	r2, r5
 8006c58:	4616      	mov	r6, r2
 8006c5a:	7830      	ldrb	r0, [r6, #0]
 8006c5c:	3201      	adds	r2, #1
 8006c5e:	f7ff ff8d 	bl	8006b7c <__hexdig_fun>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d1f8      	bne.n	8006c58 <__gethex+0xb0>
 8006c66:	1bad      	subs	r5, r5, r6
 8006c68:	00ad      	lsls	r5, r5, #2
 8006c6a:	e004      	b.n	8006c76 <__gethex+0xce>
 8006c6c:	2400      	movs	r4, #0
 8006c6e:	4625      	mov	r5, r4
 8006c70:	e7e0      	b.n	8006c34 <__gethex+0x8c>
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	d1f7      	bne.n	8006c66 <__gethex+0xbe>
 8006c76:	7833      	ldrb	r3, [r6, #0]
 8006c78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c7c:	2b50      	cmp	r3, #80	; 0x50
 8006c7e:	d139      	bne.n	8006cf4 <__gethex+0x14c>
 8006c80:	7873      	ldrb	r3, [r6, #1]
 8006c82:	2b2b      	cmp	r3, #43	; 0x2b
 8006c84:	d02a      	beq.n	8006cdc <__gethex+0x134>
 8006c86:	2b2d      	cmp	r3, #45	; 0x2d
 8006c88:	d02c      	beq.n	8006ce4 <__gethex+0x13c>
 8006c8a:	f04f 0900 	mov.w	r9, #0
 8006c8e:	1c71      	adds	r1, r6, #1
 8006c90:	7808      	ldrb	r0, [r1, #0]
 8006c92:	f7ff ff73 	bl	8006b7c <__hexdig_fun>
 8006c96:	1e43      	subs	r3, r0, #1
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b18      	cmp	r3, #24
 8006c9c:	d82a      	bhi.n	8006cf4 <__gethex+0x14c>
 8006c9e:	f1a0 0210 	sub.w	r2, r0, #16
 8006ca2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ca6:	f7ff ff69 	bl	8006b7c <__hexdig_fun>
 8006caa:	1e43      	subs	r3, r0, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b18      	cmp	r3, #24
 8006cb0:	d91b      	bls.n	8006cea <__gethex+0x142>
 8006cb2:	f1b9 0f00 	cmp.w	r9, #0
 8006cb6:	d000      	beq.n	8006cba <__gethex+0x112>
 8006cb8:	4252      	negs	r2, r2
 8006cba:	4415      	add	r5, r2
 8006cbc:	f8cb 1000 	str.w	r1, [fp]
 8006cc0:	b1d4      	cbz	r4, 8006cf8 <__gethex+0x150>
 8006cc2:	9b01      	ldr	r3, [sp, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bf14      	ite	ne
 8006cc8:	2700      	movne	r7, #0
 8006cca:	2706      	moveq	r7, #6
 8006ccc:	4638      	mov	r0, r7
 8006cce:	b00b      	add	sp, #44	; 0x2c
 8006cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd4:	463e      	mov	r6, r7
 8006cd6:	4625      	mov	r5, r4
 8006cd8:	2401      	movs	r4, #1
 8006cda:	e7cc      	b.n	8006c76 <__gethex+0xce>
 8006cdc:	f04f 0900 	mov.w	r9, #0
 8006ce0:	1cb1      	adds	r1, r6, #2
 8006ce2:	e7d5      	b.n	8006c90 <__gethex+0xe8>
 8006ce4:	f04f 0901 	mov.w	r9, #1
 8006ce8:	e7fa      	b.n	8006ce0 <__gethex+0x138>
 8006cea:	230a      	movs	r3, #10
 8006cec:	fb03 0202 	mla	r2, r3, r2, r0
 8006cf0:	3a10      	subs	r2, #16
 8006cf2:	e7d6      	b.n	8006ca2 <__gethex+0xfa>
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	e7e1      	b.n	8006cbc <__gethex+0x114>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	1bf3      	subs	r3, r6, r7
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	2b07      	cmp	r3, #7
 8006d00:	dc0a      	bgt.n	8006d18 <__gethex+0x170>
 8006d02:	9802      	ldr	r0, [sp, #8]
 8006d04:	f000 fa8c 	bl	8007220 <_Balloc>
 8006d08:	4604      	mov	r4, r0
 8006d0a:	b940      	cbnz	r0, 8006d1e <__gethex+0x176>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	21de      	movs	r1, #222	; 0xde
 8006d10:	4b5b      	ldr	r3, [pc, #364]	; (8006e80 <__gethex+0x2d8>)
 8006d12:	485c      	ldr	r0, [pc, #368]	; (8006e84 <__gethex+0x2dc>)
 8006d14:	f001 fc2e 	bl	8008574 <__assert_func>
 8006d18:	3101      	adds	r1, #1
 8006d1a:	105b      	asrs	r3, r3, #1
 8006d1c:	e7ef      	b.n	8006cfe <__gethex+0x156>
 8006d1e:	f04f 0b00 	mov.w	fp, #0
 8006d22:	f100 0914 	add.w	r9, r0, #20
 8006d26:	f1ca 0301 	rsb	r3, sl, #1
 8006d2a:	f8cd 9010 	str.w	r9, [sp, #16]
 8006d2e:	f8cd b004 	str.w	fp, [sp, #4]
 8006d32:	9308      	str	r3, [sp, #32]
 8006d34:	42b7      	cmp	r7, r6
 8006d36:	d33f      	bcc.n	8006db8 <__gethex+0x210>
 8006d38:	9f04      	ldr	r7, [sp, #16]
 8006d3a:	9b01      	ldr	r3, [sp, #4]
 8006d3c:	f847 3b04 	str.w	r3, [r7], #4
 8006d40:	eba7 0709 	sub.w	r7, r7, r9
 8006d44:	10bf      	asrs	r7, r7, #2
 8006d46:	6127      	str	r7, [r4, #16]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fb5b 	bl	8007404 <__hi0bits>
 8006d4e:	017f      	lsls	r7, r7, #5
 8006d50:	f8d8 6000 	ldr.w	r6, [r8]
 8006d54:	1a3f      	subs	r7, r7, r0
 8006d56:	42b7      	cmp	r7, r6
 8006d58:	dd62      	ble.n	8006e20 <__gethex+0x278>
 8006d5a:	1bbf      	subs	r7, r7, r6
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 fef5 	bl	8007b4e <__any_on>
 8006d64:	4682      	mov	sl, r0
 8006d66:	b1a8      	cbz	r0, 8006d94 <__gethex+0x1ec>
 8006d68:	f04f 0a01 	mov.w	sl, #1
 8006d6c:	1e7b      	subs	r3, r7, #1
 8006d6e:	1159      	asrs	r1, r3, #5
 8006d70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006d74:	f003 021f 	and.w	r2, r3, #31
 8006d78:	fa0a f202 	lsl.w	r2, sl, r2
 8006d7c:	420a      	tst	r2, r1
 8006d7e:	d009      	beq.n	8006d94 <__gethex+0x1ec>
 8006d80:	4553      	cmp	r3, sl
 8006d82:	dd05      	ble.n	8006d90 <__gethex+0x1e8>
 8006d84:	4620      	mov	r0, r4
 8006d86:	1eb9      	subs	r1, r7, #2
 8006d88:	f000 fee1 	bl	8007b4e <__any_on>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d144      	bne.n	8006e1a <__gethex+0x272>
 8006d90:	f04f 0a02 	mov.w	sl, #2
 8006d94:	4639      	mov	r1, r7
 8006d96:	4620      	mov	r0, r4
 8006d98:	f7ff fe9d 	bl	8006ad6 <rshift>
 8006d9c:	443d      	add	r5, r7
 8006d9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006da2:	42ab      	cmp	r3, r5
 8006da4:	da4a      	bge.n	8006e3c <__gethex+0x294>
 8006da6:	4621      	mov	r1, r4
 8006da8:	9802      	ldr	r0, [sp, #8]
 8006daa:	f000 fa79 	bl	80072a0 <_Bfree>
 8006dae:	2300      	movs	r3, #0
 8006db0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006db2:	27a3      	movs	r7, #163	; 0xa3
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	e789      	b.n	8006ccc <__gethex+0x124>
 8006db8:	1e73      	subs	r3, r6, #1
 8006dba:	9a06      	ldr	r2, [sp, #24]
 8006dbc:	9307      	str	r3, [sp, #28]
 8006dbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d019      	beq.n	8006dfa <__gethex+0x252>
 8006dc6:	f1bb 0f20 	cmp.w	fp, #32
 8006dca:	d107      	bne.n	8006ddc <__gethex+0x234>
 8006dcc:	9b04      	ldr	r3, [sp, #16]
 8006dce:	9a01      	ldr	r2, [sp, #4]
 8006dd0:	f843 2b04 	str.w	r2, [r3], #4
 8006dd4:	9304      	str	r3, [sp, #16]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	469b      	mov	fp, r3
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006de0:	f7ff fecc 	bl	8006b7c <__hexdig_fun>
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	f000 000f 	and.w	r0, r0, #15
 8006dea:	fa00 f00b 	lsl.w	r0, r0, fp
 8006dee:	4303      	orrs	r3, r0
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	f10b 0b04 	add.w	fp, fp, #4
 8006df6:	9b07      	ldr	r3, [sp, #28]
 8006df8:	e00d      	b.n	8006e16 <__gethex+0x26e>
 8006dfa:	9a08      	ldr	r2, [sp, #32]
 8006dfc:	1e73      	subs	r3, r6, #1
 8006dfe:	4413      	add	r3, r2
 8006e00:	42bb      	cmp	r3, r7
 8006e02:	d3e0      	bcc.n	8006dc6 <__gethex+0x21e>
 8006e04:	4618      	mov	r0, r3
 8006e06:	4652      	mov	r2, sl
 8006e08:	9903      	ldr	r1, [sp, #12]
 8006e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0c:	f001 fabd 	bl	800838a <strncmp>
 8006e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d1d7      	bne.n	8006dc6 <__gethex+0x21e>
 8006e16:	461e      	mov	r6, r3
 8006e18:	e78c      	b.n	8006d34 <__gethex+0x18c>
 8006e1a:	f04f 0a03 	mov.w	sl, #3
 8006e1e:	e7b9      	b.n	8006d94 <__gethex+0x1ec>
 8006e20:	da09      	bge.n	8006e36 <__gethex+0x28e>
 8006e22:	1bf7      	subs	r7, r6, r7
 8006e24:	4621      	mov	r1, r4
 8006e26:	463a      	mov	r2, r7
 8006e28:	9802      	ldr	r0, [sp, #8]
 8006e2a:	f000 fc51 	bl	80076d0 <__lshift>
 8006e2e:	4604      	mov	r4, r0
 8006e30:	1bed      	subs	r5, r5, r7
 8006e32:	f100 0914 	add.w	r9, r0, #20
 8006e36:	f04f 0a00 	mov.w	sl, #0
 8006e3a:	e7b0      	b.n	8006d9e <__gethex+0x1f6>
 8006e3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006e40:	42a8      	cmp	r0, r5
 8006e42:	dd72      	ble.n	8006f2a <__gethex+0x382>
 8006e44:	1b45      	subs	r5, r0, r5
 8006e46:	42ae      	cmp	r6, r5
 8006e48:	dc35      	bgt.n	8006eb6 <__gethex+0x30e>
 8006e4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d029      	beq.n	8006ea6 <__gethex+0x2fe>
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d02b      	beq.n	8006eae <__gethex+0x306>
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d11c      	bne.n	8006e94 <__gethex+0x2ec>
 8006e5a:	42ae      	cmp	r6, r5
 8006e5c:	d11a      	bne.n	8006e94 <__gethex+0x2ec>
 8006e5e:	2e01      	cmp	r6, #1
 8006e60:	d112      	bne.n	8006e88 <__gethex+0x2e0>
 8006e62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e66:	9a05      	ldr	r2, [sp, #20]
 8006e68:	2762      	movs	r7, #98	; 0x62
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	6123      	str	r3, [r4, #16]
 8006e70:	f8c9 3000 	str.w	r3, [r9]
 8006e74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e76:	601c      	str	r4, [r3, #0]
 8006e78:	e728      	b.n	8006ccc <__gethex+0x124>
 8006e7a:	bf00      	nop
 8006e7c:	08008d64 	.word	0x08008d64
 8006e80:	08008c88 	.word	0x08008c88
 8006e84:	08008cfc 	.word	0x08008cfc
 8006e88:	4620      	mov	r0, r4
 8006e8a:	1e71      	subs	r1, r6, #1
 8006e8c:	f000 fe5f 	bl	8007b4e <__any_on>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d1e6      	bne.n	8006e62 <__gethex+0x2ba>
 8006e94:	4621      	mov	r1, r4
 8006e96:	9802      	ldr	r0, [sp, #8]
 8006e98:	f000 fa02 	bl	80072a0 <_Bfree>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ea0:	2750      	movs	r7, #80	; 0x50
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	e712      	b.n	8006ccc <__gethex+0x124>
 8006ea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f3      	bne.n	8006e94 <__gethex+0x2ec>
 8006eac:	e7d9      	b.n	8006e62 <__gethex+0x2ba>
 8006eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1d6      	bne.n	8006e62 <__gethex+0x2ba>
 8006eb4:	e7ee      	b.n	8006e94 <__gethex+0x2ec>
 8006eb6:	1e6f      	subs	r7, r5, #1
 8006eb8:	f1ba 0f00 	cmp.w	sl, #0
 8006ebc:	d132      	bne.n	8006f24 <__gethex+0x37c>
 8006ebe:	b127      	cbz	r7, 8006eca <__gethex+0x322>
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 fe43 	bl	8007b4e <__any_on>
 8006ec8:	4682      	mov	sl, r0
 8006eca:	2101      	movs	r1, #1
 8006ecc:	117b      	asrs	r3, r7, #5
 8006ece:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006ed2:	f007 071f 	and.w	r7, r7, #31
 8006ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8006eda:	421f      	tst	r7, r3
 8006edc:	f04f 0702 	mov.w	r7, #2
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	bf18      	it	ne
 8006ee6:	f04a 0a02 	orrne.w	sl, sl, #2
 8006eea:	1b76      	subs	r6, r6, r5
 8006eec:	f7ff fdf3 	bl	8006ad6 <rshift>
 8006ef0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ef4:	f1ba 0f00 	cmp.w	sl, #0
 8006ef8:	d048      	beq.n	8006f8c <__gethex+0x3e4>
 8006efa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d015      	beq.n	8006f2e <__gethex+0x386>
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d017      	beq.n	8006f36 <__gethex+0x38e>
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d109      	bne.n	8006f1e <__gethex+0x376>
 8006f0a:	f01a 0f02 	tst.w	sl, #2
 8006f0e:	d006      	beq.n	8006f1e <__gethex+0x376>
 8006f10:	f8d9 0000 	ldr.w	r0, [r9]
 8006f14:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f18:	f01a 0f01 	tst.w	sl, #1
 8006f1c:	d10e      	bne.n	8006f3c <__gethex+0x394>
 8006f1e:	f047 0710 	orr.w	r7, r7, #16
 8006f22:	e033      	b.n	8006f8c <__gethex+0x3e4>
 8006f24:	f04f 0a01 	mov.w	sl, #1
 8006f28:	e7cf      	b.n	8006eca <__gethex+0x322>
 8006f2a:	2701      	movs	r7, #1
 8006f2c:	e7e2      	b.n	8006ef4 <__gethex+0x34c>
 8006f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f30:	f1c3 0301 	rsb	r3, r3, #1
 8006f34:	9315      	str	r3, [sp, #84]	; 0x54
 8006f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <__gethex+0x376>
 8006f3c:	f04f 0c00 	mov.w	ip, #0
 8006f40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f44:	f104 0314 	add.w	r3, r4, #20
 8006f48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f56:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f5a:	d01c      	beq.n	8006f96 <__gethex+0x3ee>
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	6002      	str	r2, [r0, #0]
 8006f60:	2f02      	cmp	r7, #2
 8006f62:	f104 0314 	add.w	r3, r4, #20
 8006f66:	d13d      	bne.n	8006fe4 <__gethex+0x43c>
 8006f68:	f8d8 2000 	ldr.w	r2, [r8]
 8006f6c:	3a01      	subs	r2, #1
 8006f6e:	42b2      	cmp	r2, r6
 8006f70:	d10a      	bne.n	8006f88 <__gethex+0x3e0>
 8006f72:	2201      	movs	r2, #1
 8006f74:	1171      	asrs	r1, r6, #5
 8006f76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f7a:	f006 061f 	and.w	r6, r6, #31
 8006f7e:	fa02 f606 	lsl.w	r6, r2, r6
 8006f82:	421e      	tst	r6, r3
 8006f84:	bf18      	it	ne
 8006f86:	4617      	movne	r7, r2
 8006f88:	f047 0720 	orr.w	r7, r7, #32
 8006f8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f8e:	601c      	str	r4, [r3, #0]
 8006f90:	9b05      	ldr	r3, [sp, #20]
 8006f92:	601d      	str	r5, [r3, #0]
 8006f94:	e69a      	b.n	8006ccc <__gethex+0x124>
 8006f96:	4299      	cmp	r1, r3
 8006f98:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f9c:	d8d8      	bhi.n	8006f50 <__gethex+0x3a8>
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	459b      	cmp	fp, r3
 8006fa2:	db17      	blt.n	8006fd4 <__gethex+0x42c>
 8006fa4:	6861      	ldr	r1, [r4, #4]
 8006fa6:	9802      	ldr	r0, [sp, #8]
 8006fa8:	3101      	adds	r1, #1
 8006faa:	f000 f939 	bl	8007220 <_Balloc>
 8006fae:	4681      	mov	r9, r0
 8006fb0:	b918      	cbnz	r0, 8006fba <__gethex+0x412>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	2184      	movs	r1, #132	; 0x84
 8006fb6:	4b19      	ldr	r3, [pc, #100]	; (800701c <__gethex+0x474>)
 8006fb8:	e6ab      	b.n	8006d12 <__gethex+0x16a>
 8006fba:	6922      	ldr	r2, [r4, #16]
 8006fbc:	f104 010c 	add.w	r1, r4, #12
 8006fc0:	3202      	adds	r2, #2
 8006fc2:	0092      	lsls	r2, r2, #2
 8006fc4:	300c      	adds	r0, #12
 8006fc6:	f000 f91d 	bl	8007204 <memcpy>
 8006fca:	4621      	mov	r1, r4
 8006fcc:	9802      	ldr	r0, [sp, #8]
 8006fce:	f000 f967 	bl	80072a0 <_Bfree>
 8006fd2:	464c      	mov	r4, r9
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	6122      	str	r2, [r4, #16]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fe0:	615a      	str	r2, [r3, #20]
 8006fe2:	e7bd      	b.n	8006f60 <__gethex+0x3b8>
 8006fe4:	6922      	ldr	r2, [r4, #16]
 8006fe6:	455a      	cmp	r2, fp
 8006fe8:	dd0b      	ble.n	8007002 <__gethex+0x45a>
 8006fea:	2101      	movs	r1, #1
 8006fec:	4620      	mov	r0, r4
 8006fee:	f7ff fd72 	bl	8006ad6 <rshift>
 8006ff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ff6:	3501      	adds	r5, #1
 8006ff8:	42ab      	cmp	r3, r5
 8006ffa:	f6ff aed4 	blt.w	8006da6 <__gethex+0x1fe>
 8006ffe:	2701      	movs	r7, #1
 8007000:	e7c2      	b.n	8006f88 <__gethex+0x3e0>
 8007002:	f016 061f 	ands.w	r6, r6, #31
 8007006:	d0fa      	beq.n	8006ffe <__gethex+0x456>
 8007008:	4453      	add	r3, sl
 800700a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800700e:	f000 f9f9 	bl	8007404 <__hi0bits>
 8007012:	f1c6 0620 	rsb	r6, r6, #32
 8007016:	42b0      	cmp	r0, r6
 8007018:	dbe7      	blt.n	8006fea <__gethex+0x442>
 800701a:	e7f0      	b.n	8006ffe <__gethex+0x456>
 800701c:	08008c88 	.word	0x08008c88

08007020 <L_shift>:
 8007020:	f1c2 0208 	rsb	r2, r2, #8
 8007024:	0092      	lsls	r2, r2, #2
 8007026:	b570      	push	{r4, r5, r6, lr}
 8007028:	f1c2 0620 	rsb	r6, r2, #32
 800702c:	6843      	ldr	r3, [r0, #4]
 800702e:	6804      	ldr	r4, [r0, #0]
 8007030:	fa03 f506 	lsl.w	r5, r3, r6
 8007034:	432c      	orrs	r4, r5
 8007036:	40d3      	lsrs	r3, r2
 8007038:	6004      	str	r4, [r0, #0]
 800703a:	f840 3f04 	str.w	r3, [r0, #4]!
 800703e:	4288      	cmp	r0, r1
 8007040:	d3f4      	bcc.n	800702c <L_shift+0xc>
 8007042:	bd70      	pop	{r4, r5, r6, pc}

08007044 <__match>:
 8007044:	b530      	push	{r4, r5, lr}
 8007046:	6803      	ldr	r3, [r0, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800704e:	b914      	cbnz	r4, 8007056 <__match+0x12>
 8007050:	6003      	str	r3, [r0, #0]
 8007052:	2001      	movs	r0, #1
 8007054:	bd30      	pop	{r4, r5, pc}
 8007056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800705a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800705e:	2d19      	cmp	r5, #25
 8007060:	bf98      	it	ls
 8007062:	3220      	addls	r2, #32
 8007064:	42a2      	cmp	r2, r4
 8007066:	d0f0      	beq.n	800704a <__match+0x6>
 8007068:	2000      	movs	r0, #0
 800706a:	e7f3      	b.n	8007054 <__match+0x10>

0800706c <__hexnan>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	2500      	movs	r5, #0
 8007072:	680b      	ldr	r3, [r1, #0]
 8007074:	4682      	mov	sl, r0
 8007076:	115e      	asrs	r6, r3, #5
 8007078:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800707c:	f013 031f 	ands.w	r3, r3, #31
 8007080:	bf18      	it	ne
 8007082:	3604      	addne	r6, #4
 8007084:	1f37      	subs	r7, r6, #4
 8007086:	46b9      	mov	r9, r7
 8007088:	463c      	mov	r4, r7
 800708a:	46ab      	mov	fp, r5
 800708c:	b087      	sub	sp, #28
 800708e:	4690      	mov	r8, r2
 8007090:	6802      	ldr	r2, [r0, #0]
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	f846 5c04 	str.w	r5, [r6, #-4]
 8007098:	9502      	str	r5, [sp, #8]
 800709a:	7851      	ldrb	r1, [r2, #1]
 800709c:	1c53      	adds	r3, r2, #1
 800709e:	9303      	str	r3, [sp, #12]
 80070a0:	b341      	cbz	r1, 80070f4 <__hexnan+0x88>
 80070a2:	4608      	mov	r0, r1
 80070a4:	9205      	str	r2, [sp, #20]
 80070a6:	9104      	str	r1, [sp, #16]
 80070a8:	f7ff fd68 	bl	8006b7c <__hexdig_fun>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d14f      	bne.n	8007150 <__hexnan+0xe4>
 80070b0:	9904      	ldr	r1, [sp, #16]
 80070b2:	9a05      	ldr	r2, [sp, #20]
 80070b4:	2920      	cmp	r1, #32
 80070b6:	d818      	bhi.n	80070ea <__hexnan+0x7e>
 80070b8:	9b02      	ldr	r3, [sp, #8]
 80070ba:	459b      	cmp	fp, r3
 80070bc:	dd13      	ble.n	80070e6 <__hexnan+0x7a>
 80070be:	454c      	cmp	r4, r9
 80070c0:	d206      	bcs.n	80070d0 <__hexnan+0x64>
 80070c2:	2d07      	cmp	r5, #7
 80070c4:	dc04      	bgt.n	80070d0 <__hexnan+0x64>
 80070c6:	462a      	mov	r2, r5
 80070c8:	4649      	mov	r1, r9
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7ff ffa8 	bl	8007020 <L_shift>
 80070d0:	4544      	cmp	r4, r8
 80070d2:	d950      	bls.n	8007176 <__hexnan+0x10a>
 80070d4:	2300      	movs	r3, #0
 80070d6:	f1a4 0904 	sub.w	r9, r4, #4
 80070da:	f844 3c04 	str.w	r3, [r4, #-4]
 80070de:	461d      	mov	r5, r3
 80070e0:	464c      	mov	r4, r9
 80070e2:	f8cd b008 	str.w	fp, [sp, #8]
 80070e6:	9a03      	ldr	r2, [sp, #12]
 80070e8:	e7d7      	b.n	800709a <__hexnan+0x2e>
 80070ea:	2929      	cmp	r1, #41	; 0x29
 80070ec:	d156      	bne.n	800719c <__hexnan+0x130>
 80070ee:	3202      	adds	r2, #2
 80070f0:	f8ca 2000 	str.w	r2, [sl]
 80070f4:	f1bb 0f00 	cmp.w	fp, #0
 80070f8:	d050      	beq.n	800719c <__hexnan+0x130>
 80070fa:	454c      	cmp	r4, r9
 80070fc:	d206      	bcs.n	800710c <__hexnan+0xa0>
 80070fe:	2d07      	cmp	r5, #7
 8007100:	dc04      	bgt.n	800710c <__hexnan+0xa0>
 8007102:	462a      	mov	r2, r5
 8007104:	4649      	mov	r1, r9
 8007106:	4620      	mov	r0, r4
 8007108:	f7ff ff8a 	bl	8007020 <L_shift>
 800710c:	4544      	cmp	r4, r8
 800710e:	d934      	bls.n	800717a <__hexnan+0x10e>
 8007110:	4623      	mov	r3, r4
 8007112:	f1a8 0204 	sub.w	r2, r8, #4
 8007116:	f853 1b04 	ldr.w	r1, [r3], #4
 800711a:	429f      	cmp	r7, r3
 800711c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007120:	d2f9      	bcs.n	8007116 <__hexnan+0xaa>
 8007122:	1b3b      	subs	r3, r7, r4
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	3304      	adds	r3, #4
 800712a:	3401      	adds	r4, #1
 800712c:	3e03      	subs	r6, #3
 800712e:	42b4      	cmp	r4, r6
 8007130:	bf88      	it	hi
 8007132:	2304      	movhi	r3, #4
 8007134:	2200      	movs	r2, #0
 8007136:	4443      	add	r3, r8
 8007138:	f843 2b04 	str.w	r2, [r3], #4
 800713c:	429f      	cmp	r7, r3
 800713e:	d2fb      	bcs.n	8007138 <__hexnan+0xcc>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	b91b      	cbnz	r3, 800714c <__hexnan+0xe0>
 8007144:	4547      	cmp	r7, r8
 8007146:	d127      	bne.n	8007198 <__hexnan+0x12c>
 8007148:	2301      	movs	r3, #1
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	2005      	movs	r0, #5
 800714e:	e026      	b.n	800719e <__hexnan+0x132>
 8007150:	3501      	adds	r5, #1
 8007152:	2d08      	cmp	r5, #8
 8007154:	f10b 0b01 	add.w	fp, fp, #1
 8007158:	dd06      	ble.n	8007168 <__hexnan+0xfc>
 800715a:	4544      	cmp	r4, r8
 800715c:	d9c3      	bls.n	80070e6 <__hexnan+0x7a>
 800715e:	2300      	movs	r3, #0
 8007160:	2501      	movs	r5, #1
 8007162:	f844 3c04 	str.w	r3, [r4, #-4]
 8007166:	3c04      	subs	r4, #4
 8007168:	6822      	ldr	r2, [r4, #0]
 800716a:	f000 000f 	and.w	r0, r0, #15
 800716e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007172:	6022      	str	r2, [r4, #0]
 8007174:	e7b7      	b.n	80070e6 <__hexnan+0x7a>
 8007176:	2508      	movs	r5, #8
 8007178:	e7b5      	b.n	80070e6 <__hexnan+0x7a>
 800717a:	9b01      	ldr	r3, [sp, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0df      	beq.n	8007140 <__hexnan+0xd4>
 8007180:	f04f 32ff 	mov.w	r2, #4294967295
 8007184:	f1c3 0320 	rsb	r3, r3, #32
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
 800718c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007190:	401a      	ands	r2, r3
 8007192:	f846 2c04 	str.w	r2, [r6, #-4]
 8007196:	e7d3      	b.n	8007140 <__hexnan+0xd4>
 8007198:	3f04      	subs	r7, #4
 800719a:	e7d1      	b.n	8007140 <__hexnan+0xd4>
 800719c:	2004      	movs	r0, #4
 800719e:	b007      	add	sp, #28
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071a4 <_localeconv_r>:
 80071a4:	4800      	ldr	r0, [pc, #0]	; (80071a8 <_localeconv_r+0x4>)
 80071a6:	4770      	bx	lr
 80071a8:	20000164 	.word	0x20000164

080071ac <__retarget_lock_init_recursive>:
 80071ac:	4770      	bx	lr

080071ae <__retarget_lock_acquire_recursive>:
 80071ae:	4770      	bx	lr

080071b0 <__retarget_lock_release_recursive>:
 80071b0:	4770      	bx	lr
	...

080071b4 <malloc>:
 80071b4:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <malloc+0xc>)
 80071b6:	4601      	mov	r1, r0
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	f000 bd65 	b.w	8007c88 <_malloc_r>
 80071be:	bf00      	nop
 80071c0:	2000000c 	.word	0x2000000c

080071c4 <__ascii_mbtowc>:
 80071c4:	b082      	sub	sp, #8
 80071c6:	b901      	cbnz	r1, 80071ca <__ascii_mbtowc+0x6>
 80071c8:	a901      	add	r1, sp, #4
 80071ca:	b142      	cbz	r2, 80071de <__ascii_mbtowc+0x1a>
 80071cc:	b14b      	cbz	r3, 80071e2 <__ascii_mbtowc+0x1e>
 80071ce:	7813      	ldrb	r3, [r2, #0]
 80071d0:	600b      	str	r3, [r1, #0]
 80071d2:	7812      	ldrb	r2, [r2, #0]
 80071d4:	1e10      	subs	r0, r2, #0
 80071d6:	bf18      	it	ne
 80071d8:	2001      	movne	r0, #1
 80071da:	b002      	add	sp, #8
 80071dc:	4770      	bx	lr
 80071de:	4610      	mov	r0, r2
 80071e0:	e7fb      	b.n	80071da <__ascii_mbtowc+0x16>
 80071e2:	f06f 0001 	mvn.w	r0, #1
 80071e6:	e7f8      	b.n	80071da <__ascii_mbtowc+0x16>

080071e8 <memchr>:
 80071e8:	4603      	mov	r3, r0
 80071ea:	b510      	push	{r4, lr}
 80071ec:	b2c9      	uxtb	r1, r1
 80071ee:	4402      	add	r2, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	4618      	mov	r0, r3
 80071f4:	d101      	bne.n	80071fa <memchr+0x12>
 80071f6:	2000      	movs	r0, #0
 80071f8:	e003      	b.n	8007202 <memchr+0x1a>
 80071fa:	7804      	ldrb	r4, [r0, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	428c      	cmp	r4, r1
 8007200:	d1f6      	bne.n	80071f0 <memchr+0x8>
 8007202:	bd10      	pop	{r4, pc}

08007204 <memcpy>:
 8007204:	440a      	add	r2, r1
 8007206:	4291      	cmp	r1, r2
 8007208:	f100 33ff 	add.w	r3, r0, #4294967295
 800720c:	d100      	bne.n	8007210 <memcpy+0xc>
 800720e:	4770      	bx	lr
 8007210:	b510      	push	{r4, lr}
 8007212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007216:	4291      	cmp	r1, r2
 8007218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800721c:	d1f9      	bne.n	8007212 <memcpy+0xe>
 800721e:	bd10      	pop	{r4, pc}

08007220 <_Balloc>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007224:	4604      	mov	r4, r0
 8007226:	460d      	mov	r5, r1
 8007228:	b976      	cbnz	r6, 8007248 <_Balloc+0x28>
 800722a:	2010      	movs	r0, #16
 800722c:	f7ff ffc2 	bl	80071b4 <malloc>
 8007230:	4602      	mov	r2, r0
 8007232:	6260      	str	r0, [r4, #36]	; 0x24
 8007234:	b920      	cbnz	r0, 8007240 <_Balloc+0x20>
 8007236:	2166      	movs	r1, #102	; 0x66
 8007238:	4b17      	ldr	r3, [pc, #92]	; (8007298 <_Balloc+0x78>)
 800723a:	4818      	ldr	r0, [pc, #96]	; (800729c <_Balloc+0x7c>)
 800723c:	f001 f99a 	bl	8008574 <__assert_func>
 8007240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007244:	6006      	str	r6, [r0, #0]
 8007246:	60c6      	str	r6, [r0, #12]
 8007248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800724a:	68f3      	ldr	r3, [r6, #12]
 800724c:	b183      	cbz	r3, 8007270 <_Balloc+0x50>
 800724e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007256:	b9b8      	cbnz	r0, 8007288 <_Balloc+0x68>
 8007258:	2101      	movs	r1, #1
 800725a:	fa01 f605 	lsl.w	r6, r1, r5
 800725e:	1d72      	adds	r2, r6, #5
 8007260:	4620      	mov	r0, r4
 8007262:	0092      	lsls	r2, r2, #2
 8007264:	f000 fc94 	bl	8007b90 <_calloc_r>
 8007268:	b160      	cbz	r0, 8007284 <_Balloc+0x64>
 800726a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800726e:	e00e      	b.n	800728e <_Balloc+0x6e>
 8007270:	2221      	movs	r2, #33	; 0x21
 8007272:	2104      	movs	r1, #4
 8007274:	4620      	mov	r0, r4
 8007276:	f000 fc8b 	bl	8007b90 <_calloc_r>
 800727a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800727c:	60f0      	str	r0, [r6, #12]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e4      	bne.n	800724e <_Balloc+0x2e>
 8007284:	2000      	movs	r0, #0
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	6802      	ldr	r2, [r0, #0]
 800728a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800728e:	2300      	movs	r3, #0
 8007290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007294:	e7f7      	b.n	8007286 <_Balloc+0x66>
 8007296:	bf00      	nop
 8007298:	08008c16 	.word	0x08008c16
 800729c:	08008d78 	.word	0x08008d78

080072a0 <_Bfree>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072a4:	4605      	mov	r5, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	b976      	cbnz	r6, 80072c8 <_Bfree+0x28>
 80072aa:	2010      	movs	r0, #16
 80072ac:	f7ff ff82 	bl	80071b4 <malloc>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6268      	str	r0, [r5, #36]	; 0x24
 80072b4:	b920      	cbnz	r0, 80072c0 <_Bfree+0x20>
 80072b6:	218a      	movs	r1, #138	; 0x8a
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <_Bfree+0x3c>)
 80072ba:	4809      	ldr	r0, [pc, #36]	; (80072e0 <_Bfree+0x40>)
 80072bc:	f001 f95a 	bl	8008574 <__assert_func>
 80072c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072c4:	6006      	str	r6, [r0, #0]
 80072c6:	60c6      	str	r6, [r0, #12]
 80072c8:	b13c      	cbz	r4, 80072da <_Bfree+0x3a>
 80072ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072cc:	6862      	ldr	r2, [r4, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072d4:	6021      	str	r1, [r4, #0]
 80072d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	08008c16 	.word	0x08008c16
 80072e0:	08008d78 	.word	0x08008d78

080072e4 <__multadd>:
 80072e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e8:	4607      	mov	r7, r0
 80072ea:	460c      	mov	r4, r1
 80072ec:	461e      	mov	r6, r3
 80072ee:	2000      	movs	r0, #0
 80072f0:	690d      	ldr	r5, [r1, #16]
 80072f2:	f101 0c14 	add.w	ip, r1, #20
 80072f6:	f8dc 3000 	ldr.w	r3, [ip]
 80072fa:	3001      	adds	r0, #1
 80072fc:	b299      	uxth	r1, r3
 80072fe:	fb02 6101 	mla	r1, r2, r1, r6
 8007302:	0c1e      	lsrs	r6, r3, #16
 8007304:	0c0b      	lsrs	r3, r1, #16
 8007306:	fb02 3306 	mla	r3, r2, r6, r3
 800730a:	b289      	uxth	r1, r1
 800730c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007310:	4285      	cmp	r5, r0
 8007312:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007316:	f84c 1b04 	str.w	r1, [ip], #4
 800731a:	dcec      	bgt.n	80072f6 <__multadd+0x12>
 800731c:	b30e      	cbz	r6, 8007362 <__multadd+0x7e>
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	42ab      	cmp	r3, r5
 8007322:	dc19      	bgt.n	8007358 <__multadd+0x74>
 8007324:	6861      	ldr	r1, [r4, #4]
 8007326:	4638      	mov	r0, r7
 8007328:	3101      	adds	r1, #1
 800732a:	f7ff ff79 	bl	8007220 <_Balloc>
 800732e:	4680      	mov	r8, r0
 8007330:	b928      	cbnz	r0, 800733e <__multadd+0x5a>
 8007332:	4602      	mov	r2, r0
 8007334:	21b5      	movs	r1, #181	; 0xb5
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <__multadd+0x84>)
 8007338:	480c      	ldr	r0, [pc, #48]	; (800736c <__multadd+0x88>)
 800733a:	f001 f91b 	bl	8008574 <__assert_func>
 800733e:	6922      	ldr	r2, [r4, #16]
 8007340:	f104 010c 	add.w	r1, r4, #12
 8007344:	3202      	adds	r2, #2
 8007346:	0092      	lsls	r2, r2, #2
 8007348:	300c      	adds	r0, #12
 800734a:	f7ff ff5b 	bl	8007204 <memcpy>
 800734e:	4621      	mov	r1, r4
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ffa5 	bl	80072a0 <_Bfree>
 8007356:	4644      	mov	r4, r8
 8007358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800735c:	3501      	adds	r5, #1
 800735e:	615e      	str	r6, [r3, #20]
 8007360:	6125      	str	r5, [r4, #16]
 8007362:	4620      	mov	r0, r4
 8007364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007368:	08008c88 	.word	0x08008c88
 800736c:	08008d78 	.word	0x08008d78

08007370 <__s2b>:
 8007370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007374:	4615      	mov	r5, r2
 8007376:	2209      	movs	r2, #9
 8007378:	461f      	mov	r7, r3
 800737a:	3308      	adds	r3, #8
 800737c:	460c      	mov	r4, r1
 800737e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007382:	4606      	mov	r6, r0
 8007384:	2201      	movs	r2, #1
 8007386:	2100      	movs	r1, #0
 8007388:	429a      	cmp	r2, r3
 800738a:	db09      	blt.n	80073a0 <__s2b+0x30>
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff ff47 	bl	8007220 <_Balloc>
 8007392:	b940      	cbnz	r0, 80073a6 <__s2b+0x36>
 8007394:	4602      	mov	r2, r0
 8007396:	21ce      	movs	r1, #206	; 0xce
 8007398:	4b18      	ldr	r3, [pc, #96]	; (80073fc <__s2b+0x8c>)
 800739a:	4819      	ldr	r0, [pc, #100]	; (8007400 <__s2b+0x90>)
 800739c:	f001 f8ea 	bl	8008574 <__assert_func>
 80073a0:	0052      	lsls	r2, r2, #1
 80073a2:	3101      	adds	r1, #1
 80073a4:	e7f0      	b.n	8007388 <__s2b+0x18>
 80073a6:	9b08      	ldr	r3, [sp, #32]
 80073a8:	2d09      	cmp	r5, #9
 80073aa:	6143      	str	r3, [r0, #20]
 80073ac:	f04f 0301 	mov.w	r3, #1
 80073b0:	6103      	str	r3, [r0, #16]
 80073b2:	dd16      	ble.n	80073e2 <__s2b+0x72>
 80073b4:	f104 0909 	add.w	r9, r4, #9
 80073b8:	46c8      	mov	r8, r9
 80073ba:	442c      	add	r4, r5
 80073bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073c0:	4601      	mov	r1, r0
 80073c2:	220a      	movs	r2, #10
 80073c4:	4630      	mov	r0, r6
 80073c6:	3b30      	subs	r3, #48	; 0x30
 80073c8:	f7ff ff8c 	bl	80072e4 <__multadd>
 80073cc:	45a0      	cmp	r8, r4
 80073ce:	d1f5      	bne.n	80073bc <__s2b+0x4c>
 80073d0:	f1a5 0408 	sub.w	r4, r5, #8
 80073d4:	444c      	add	r4, r9
 80073d6:	1b2d      	subs	r5, r5, r4
 80073d8:	1963      	adds	r3, r4, r5
 80073da:	42bb      	cmp	r3, r7
 80073dc:	db04      	blt.n	80073e8 <__s2b+0x78>
 80073de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e2:	2509      	movs	r5, #9
 80073e4:	340a      	adds	r4, #10
 80073e6:	e7f6      	b.n	80073d6 <__s2b+0x66>
 80073e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80073ec:	4601      	mov	r1, r0
 80073ee:	220a      	movs	r2, #10
 80073f0:	4630      	mov	r0, r6
 80073f2:	3b30      	subs	r3, #48	; 0x30
 80073f4:	f7ff ff76 	bl	80072e4 <__multadd>
 80073f8:	e7ee      	b.n	80073d8 <__s2b+0x68>
 80073fa:	bf00      	nop
 80073fc:	08008c88 	.word	0x08008c88
 8007400:	08008d78 	.word	0x08008d78

08007404 <__hi0bits>:
 8007404:	0c02      	lsrs	r2, r0, #16
 8007406:	0412      	lsls	r2, r2, #16
 8007408:	4603      	mov	r3, r0
 800740a:	b9ca      	cbnz	r2, 8007440 <__hi0bits+0x3c>
 800740c:	0403      	lsls	r3, r0, #16
 800740e:	2010      	movs	r0, #16
 8007410:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007414:	bf04      	itt	eq
 8007416:	021b      	lsleq	r3, r3, #8
 8007418:	3008      	addeq	r0, #8
 800741a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800741e:	bf04      	itt	eq
 8007420:	011b      	lsleq	r3, r3, #4
 8007422:	3004      	addeq	r0, #4
 8007424:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007428:	bf04      	itt	eq
 800742a:	009b      	lsleq	r3, r3, #2
 800742c:	3002      	addeq	r0, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	db05      	blt.n	800743e <__hi0bits+0x3a>
 8007432:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007436:	f100 0001 	add.w	r0, r0, #1
 800743a:	bf08      	it	eq
 800743c:	2020      	moveq	r0, #32
 800743e:	4770      	bx	lr
 8007440:	2000      	movs	r0, #0
 8007442:	e7e5      	b.n	8007410 <__hi0bits+0xc>

08007444 <__lo0bits>:
 8007444:	6803      	ldr	r3, [r0, #0]
 8007446:	4602      	mov	r2, r0
 8007448:	f013 0007 	ands.w	r0, r3, #7
 800744c:	d00b      	beq.n	8007466 <__lo0bits+0x22>
 800744e:	07d9      	lsls	r1, r3, #31
 8007450:	d421      	bmi.n	8007496 <__lo0bits+0x52>
 8007452:	0798      	lsls	r0, r3, #30
 8007454:	bf49      	itett	mi
 8007456:	085b      	lsrmi	r3, r3, #1
 8007458:	089b      	lsrpl	r3, r3, #2
 800745a:	2001      	movmi	r0, #1
 800745c:	6013      	strmi	r3, [r2, #0]
 800745e:	bf5c      	itt	pl
 8007460:	2002      	movpl	r0, #2
 8007462:	6013      	strpl	r3, [r2, #0]
 8007464:	4770      	bx	lr
 8007466:	b299      	uxth	r1, r3
 8007468:	b909      	cbnz	r1, 800746e <__lo0bits+0x2a>
 800746a:	2010      	movs	r0, #16
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	b2d9      	uxtb	r1, r3
 8007470:	b909      	cbnz	r1, 8007476 <__lo0bits+0x32>
 8007472:	3008      	adds	r0, #8
 8007474:	0a1b      	lsrs	r3, r3, #8
 8007476:	0719      	lsls	r1, r3, #28
 8007478:	bf04      	itt	eq
 800747a:	091b      	lsreq	r3, r3, #4
 800747c:	3004      	addeq	r0, #4
 800747e:	0799      	lsls	r1, r3, #30
 8007480:	bf04      	itt	eq
 8007482:	089b      	lsreq	r3, r3, #2
 8007484:	3002      	addeq	r0, #2
 8007486:	07d9      	lsls	r1, r3, #31
 8007488:	d403      	bmi.n	8007492 <__lo0bits+0x4e>
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	f100 0001 	add.w	r0, r0, #1
 8007490:	d003      	beq.n	800749a <__lo0bits+0x56>
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	4770      	bx	lr
 8007496:	2000      	movs	r0, #0
 8007498:	4770      	bx	lr
 800749a:	2020      	movs	r0, #32
 800749c:	4770      	bx	lr
	...

080074a0 <__i2b>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	460c      	mov	r4, r1
 80074a4:	2101      	movs	r1, #1
 80074a6:	f7ff febb 	bl	8007220 <_Balloc>
 80074aa:	4602      	mov	r2, r0
 80074ac:	b928      	cbnz	r0, 80074ba <__i2b+0x1a>
 80074ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074b2:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <__i2b+0x24>)
 80074b4:	4804      	ldr	r0, [pc, #16]	; (80074c8 <__i2b+0x28>)
 80074b6:	f001 f85d 	bl	8008574 <__assert_func>
 80074ba:	2301      	movs	r3, #1
 80074bc:	6144      	str	r4, [r0, #20]
 80074be:	6103      	str	r3, [r0, #16]
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	bf00      	nop
 80074c4:	08008c88 	.word	0x08008c88
 80074c8:	08008d78 	.word	0x08008d78

080074cc <__multiply>:
 80074cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d0:	4691      	mov	r9, r2
 80074d2:	690a      	ldr	r2, [r1, #16]
 80074d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074d8:	460c      	mov	r4, r1
 80074da:	429a      	cmp	r2, r3
 80074dc:	bfbe      	ittt	lt
 80074de:	460b      	movlt	r3, r1
 80074e0:	464c      	movlt	r4, r9
 80074e2:	4699      	movlt	r9, r3
 80074e4:	6927      	ldr	r7, [r4, #16]
 80074e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	6861      	ldr	r1, [r4, #4]
 80074ee:	eb07 060a 	add.w	r6, r7, sl
 80074f2:	42b3      	cmp	r3, r6
 80074f4:	b085      	sub	sp, #20
 80074f6:	bfb8      	it	lt
 80074f8:	3101      	addlt	r1, #1
 80074fa:	f7ff fe91 	bl	8007220 <_Balloc>
 80074fe:	b930      	cbnz	r0, 800750e <__multiply+0x42>
 8007500:	4602      	mov	r2, r0
 8007502:	f240 115d 	movw	r1, #349	; 0x15d
 8007506:	4b43      	ldr	r3, [pc, #268]	; (8007614 <__multiply+0x148>)
 8007508:	4843      	ldr	r0, [pc, #268]	; (8007618 <__multiply+0x14c>)
 800750a:	f001 f833 	bl	8008574 <__assert_func>
 800750e:	f100 0514 	add.w	r5, r0, #20
 8007512:	462b      	mov	r3, r5
 8007514:	2200      	movs	r2, #0
 8007516:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800751a:	4543      	cmp	r3, r8
 800751c:	d321      	bcc.n	8007562 <__multiply+0x96>
 800751e:	f104 0314 	add.w	r3, r4, #20
 8007522:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007526:	f109 0314 	add.w	r3, r9, #20
 800752a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	1b3a      	subs	r2, r7, r4
 8007532:	3a15      	subs	r2, #21
 8007534:	f022 0203 	bic.w	r2, r2, #3
 8007538:	3204      	adds	r2, #4
 800753a:	f104 0115 	add.w	r1, r4, #21
 800753e:	428f      	cmp	r7, r1
 8007540:	bf38      	it	cc
 8007542:	2204      	movcc	r2, #4
 8007544:	9201      	str	r2, [sp, #4]
 8007546:	9a02      	ldr	r2, [sp, #8]
 8007548:	9303      	str	r3, [sp, #12]
 800754a:	429a      	cmp	r2, r3
 800754c:	d80c      	bhi.n	8007568 <__multiply+0x9c>
 800754e:	2e00      	cmp	r6, #0
 8007550:	dd03      	ble.n	800755a <__multiply+0x8e>
 8007552:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007556:	2b00      	cmp	r3, #0
 8007558:	d059      	beq.n	800760e <__multiply+0x142>
 800755a:	6106      	str	r6, [r0, #16]
 800755c:	b005      	add	sp, #20
 800755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007562:	f843 2b04 	str.w	r2, [r3], #4
 8007566:	e7d8      	b.n	800751a <__multiply+0x4e>
 8007568:	f8b3 a000 	ldrh.w	sl, [r3]
 800756c:	f1ba 0f00 	cmp.w	sl, #0
 8007570:	d023      	beq.n	80075ba <__multiply+0xee>
 8007572:	46a9      	mov	r9, r5
 8007574:	f04f 0c00 	mov.w	ip, #0
 8007578:	f104 0e14 	add.w	lr, r4, #20
 800757c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007580:	f8d9 1000 	ldr.w	r1, [r9]
 8007584:	fa1f fb82 	uxth.w	fp, r2
 8007588:	b289      	uxth	r1, r1
 800758a:	fb0a 110b 	mla	r1, sl, fp, r1
 800758e:	4461      	add	r1, ip
 8007590:	f8d9 c000 	ldr.w	ip, [r9]
 8007594:	0c12      	lsrs	r2, r2, #16
 8007596:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800759a:	fb0a c202 	mla	r2, sl, r2, ip
 800759e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075a2:	b289      	uxth	r1, r1
 80075a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075a8:	4577      	cmp	r7, lr
 80075aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075ae:	f849 1b04 	str.w	r1, [r9], #4
 80075b2:	d8e3      	bhi.n	800757c <__multiply+0xb0>
 80075b4:	9a01      	ldr	r2, [sp, #4]
 80075b6:	f845 c002 	str.w	ip, [r5, r2]
 80075ba:	9a03      	ldr	r2, [sp, #12]
 80075bc:	3304      	adds	r3, #4
 80075be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075c2:	f1b9 0f00 	cmp.w	r9, #0
 80075c6:	d020      	beq.n	800760a <__multiply+0x13e>
 80075c8:	46ae      	mov	lr, r5
 80075ca:	f04f 0a00 	mov.w	sl, #0
 80075ce:	6829      	ldr	r1, [r5, #0]
 80075d0:	f104 0c14 	add.w	ip, r4, #20
 80075d4:	f8bc b000 	ldrh.w	fp, [ip]
 80075d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075dc:	b289      	uxth	r1, r1
 80075de:	fb09 220b 	mla	r2, r9, fp, r2
 80075e2:	4492      	add	sl, r2
 80075e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075e8:	f84e 1b04 	str.w	r1, [lr], #4
 80075ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075f0:	f8be 1000 	ldrh.w	r1, [lr]
 80075f4:	0c12      	lsrs	r2, r2, #16
 80075f6:	fb09 1102 	mla	r1, r9, r2, r1
 80075fa:	4567      	cmp	r7, ip
 80075fc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007600:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007604:	d8e6      	bhi.n	80075d4 <__multiply+0x108>
 8007606:	9a01      	ldr	r2, [sp, #4]
 8007608:	50a9      	str	r1, [r5, r2]
 800760a:	3504      	adds	r5, #4
 800760c:	e79b      	b.n	8007546 <__multiply+0x7a>
 800760e:	3e01      	subs	r6, #1
 8007610:	e79d      	b.n	800754e <__multiply+0x82>
 8007612:	bf00      	nop
 8007614:	08008c88 	.word	0x08008c88
 8007618:	08008d78 	.word	0x08008d78

0800761c <__pow5mult>:
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007620:	4615      	mov	r5, r2
 8007622:	f012 0203 	ands.w	r2, r2, #3
 8007626:	4606      	mov	r6, r0
 8007628:	460f      	mov	r7, r1
 800762a:	d007      	beq.n	800763c <__pow5mult+0x20>
 800762c:	4c25      	ldr	r4, [pc, #148]	; (80076c4 <__pow5mult+0xa8>)
 800762e:	3a01      	subs	r2, #1
 8007630:	2300      	movs	r3, #0
 8007632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007636:	f7ff fe55 	bl	80072e4 <__multadd>
 800763a:	4607      	mov	r7, r0
 800763c:	10ad      	asrs	r5, r5, #2
 800763e:	d03d      	beq.n	80076bc <__pow5mult+0xa0>
 8007640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007642:	b97c      	cbnz	r4, 8007664 <__pow5mult+0x48>
 8007644:	2010      	movs	r0, #16
 8007646:	f7ff fdb5 	bl	80071b4 <malloc>
 800764a:	4602      	mov	r2, r0
 800764c:	6270      	str	r0, [r6, #36]	; 0x24
 800764e:	b928      	cbnz	r0, 800765c <__pow5mult+0x40>
 8007650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007654:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <__pow5mult+0xac>)
 8007656:	481d      	ldr	r0, [pc, #116]	; (80076cc <__pow5mult+0xb0>)
 8007658:	f000 ff8c 	bl	8008574 <__assert_func>
 800765c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007660:	6004      	str	r4, [r0, #0]
 8007662:	60c4      	str	r4, [r0, #12]
 8007664:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800766c:	b94c      	cbnz	r4, 8007682 <__pow5mult+0x66>
 800766e:	f240 2171 	movw	r1, #625	; 0x271
 8007672:	4630      	mov	r0, r6
 8007674:	f7ff ff14 	bl	80074a0 <__i2b>
 8007678:	2300      	movs	r3, #0
 800767a:	4604      	mov	r4, r0
 800767c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	f04f 0900 	mov.w	r9, #0
 8007686:	07eb      	lsls	r3, r5, #31
 8007688:	d50a      	bpl.n	80076a0 <__pow5mult+0x84>
 800768a:	4639      	mov	r1, r7
 800768c:	4622      	mov	r2, r4
 800768e:	4630      	mov	r0, r6
 8007690:	f7ff ff1c 	bl	80074cc <__multiply>
 8007694:	4680      	mov	r8, r0
 8007696:	4639      	mov	r1, r7
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff fe01 	bl	80072a0 <_Bfree>
 800769e:	4647      	mov	r7, r8
 80076a0:	106d      	asrs	r5, r5, #1
 80076a2:	d00b      	beq.n	80076bc <__pow5mult+0xa0>
 80076a4:	6820      	ldr	r0, [r4, #0]
 80076a6:	b938      	cbnz	r0, 80076b8 <__pow5mult+0x9c>
 80076a8:	4622      	mov	r2, r4
 80076aa:	4621      	mov	r1, r4
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff ff0d 	bl	80074cc <__multiply>
 80076b2:	6020      	str	r0, [r4, #0]
 80076b4:	f8c0 9000 	str.w	r9, [r0]
 80076b8:	4604      	mov	r4, r0
 80076ba:	e7e4      	b.n	8007686 <__pow5mult+0x6a>
 80076bc:	4638      	mov	r0, r7
 80076be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c2:	bf00      	nop
 80076c4:	08008ec8 	.word	0x08008ec8
 80076c8:	08008c16 	.word	0x08008c16
 80076cc:	08008d78 	.word	0x08008d78

080076d0 <__lshift>:
 80076d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	460c      	mov	r4, r1
 80076d6:	4607      	mov	r7, r0
 80076d8:	4691      	mov	r9, r2
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	6849      	ldr	r1, [r1, #4]
 80076de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076e8:	f108 0601 	add.w	r6, r8, #1
 80076ec:	42b3      	cmp	r3, r6
 80076ee:	db0b      	blt.n	8007708 <__lshift+0x38>
 80076f0:	4638      	mov	r0, r7
 80076f2:	f7ff fd95 	bl	8007220 <_Balloc>
 80076f6:	4605      	mov	r5, r0
 80076f8:	b948      	cbnz	r0, 800770e <__lshift+0x3e>
 80076fa:	4602      	mov	r2, r0
 80076fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007700:	4b29      	ldr	r3, [pc, #164]	; (80077a8 <__lshift+0xd8>)
 8007702:	482a      	ldr	r0, [pc, #168]	; (80077ac <__lshift+0xdc>)
 8007704:	f000 ff36 	bl	8008574 <__assert_func>
 8007708:	3101      	adds	r1, #1
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	e7ee      	b.n	80076ec <__lshift+0x1c>
 800770e:	2300      	movs	r3, #0
 8007710:	f100 0114 	add.w	r1, r0, #20
 8007714:	f100 0210 	add.w	r2, r0, #16
 8007718:	4618      	mov	r0, r3
 800771a:	4553      	cmp	r3, sl
 800771c:	db37      	blt.n	800778e <__lshift+0xbe>
 800771e:	6920      	ldr	r0, [r4, #16]
 8007720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007724:	f104 0314 	add.w	r3, r4, #20
 8007728:	f019 091f 	ands.w	r9, r9, #31
 800772c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007730:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007734:	d02f      	beq.n	8007796 <__lshift+0xc6>
 8007736:	468a      	mov	sl, r1
 8007738:	f04f 0c00 	mov.w	ip, #0
 800773c:	f1c9 0e20 	rsb	lr, r9, #32
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	fa02 f209 	lsl.w	r2, r2, r9
 8007746:	ea42 020c 	orr.w	r2, r2, ip
 800774a:	f84a 2b04 	str.w	r2, [sl], #4
 800774e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007752:	4298      	cmp	r0, r3
 8007754:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007758:	d8f2      	bhi.n	8007740 <__lshift+0x70>
 800775a:	1b03      	subs	r3, r0, r4
 800775c:	3b15      	subs	r3, #21
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	3304      	adds	r3, #4
 8007764:	f104 0215 	add.w	r2, r4, #21
 8007768:	4290      	cmp	r0, r2
 800776a:	bf38      	it	cc
 800776c:	2304      	movcc	r3, #4
 800776e:	f841 c003 	str.w	ip, [r1, r3]
 8007772:	f1bc 0f00 	cmp.w	ip, #0
 8007776:	d001      	beq.n	800777c <__lshift+0xac>
 8007778:	f108 0602 	add.w	r6, r8, #2
 800777c:	3e01      	subs	r6, #1
 800777e:	4638      	mov	r0, r7
 8007780:	4621      	mov	r1, r4
 8007782:	612e      	str	r6, [r5, #16]
 8007784:	f7ff fd8c 	bl	80072a0 <_Bfree>
 8007788:	4628      	mov	r0, r5
 800778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007792:	3301      	adds	r3, #1
 8007794:	e7c1      	b.n	800771a <__lshift+0x4a>
 8007796:	3904      	subs	r1, #4
 8007798:	f853 2b04 	ldr.w	r2, [r3], #4
 800779c:	4298      	cmp	r0, r3
 800779e:	f841 2f04 	str.w	r2, [r1, #4]!
 80077a2:	d8f9      	bhi.n	8007798 <__lshift+0xc8>
 80077a4:	e7ea      	b.n	800777c <__lshift+0xac>
 80077a6:	bf00      	nop
 80077a8:	08008c88 	.word	0x08008c88
 80077ac:	08008d78 	.word	0x08008d78

080077b0 <__mcmp>:
 80077b0:	4603      	mov	r3, r0
 80077b2:	690a      	ldr	r2, [r1, #16]
 80077b4:	6900      	ldr	r0, [r0, #16]
 80077b6:	b530      	push	{r4, r5, lr}
 80077b8:	1a80      	subs	r0, r0, r2
 80077ba:	d10d      	bne.n	80077d8 <__mcmp+0x28>
 80077bc:	3314      	adds	r3, #20
 80077be:	3114      	adds	r1, #20
 80077c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077d0:	4295      	cmp	r5, r2
 80077d2:	d002      	beq.n	80077da <__mcmp+0x2a>
 80077d4:	d304      	bcc.n	80077e0 <__mcmp+0x30>
 80077d6:	2001      	movs	r0, #1
 80077d8:	bd30      	pop	{r4, r5, pc}
 80077da:	42a3      	cmp	r3, r4
 80077dc:	d3f4      	bcc.n	80077c8 <__mcmp+0x18>
 80077de:	e7fb      	b.n	80077d8 <__mcmp+0x28>
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	e7f8      	b.n	80077d8 <__mcmp+0x28>
	...

080077e8 <__mdiff>:
 80077e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	460d      	mov	r5, r1
 80077ee:	4607      	mov	r7, r0
 80077f0:	4611      	mov	r1, r2
 80077f2:	4628      	mov	r0, r5
 80077f4:	4614      	mov	r4, r2
 80077f6:	f7ff ffdb 	bl	80077b0 <__mcmp>
 80077fa:	1e06      	subs	r6, r0, #0
 80077fc:	d111      	bne.n	8007822 <__mdiff+0x3a>
 80077fe:	4631      	mov	r1, r6
 8007800:	4638      	mov	r0, r7
 8007802:	f7ff fd0d 	bl	8007220 <_Balloc>
 8007806:	4602      	mov	r2, r0
 8007808:	b928      	cbnz	r0, 8007816 <__mdiff+0x2e>
 800780a:	f240 2132 	movw	r1, #562	; 0x232
 800780e:	4b3a      	ldr	r3, [pc, #232]	; (80078f8 <__mdiff+0x110>)
 8007810:	483a      	ldr	r0, [pc, #232]	; (80078fc <__mdiff+0x114>)
 8007812:	f000 feaf 	bl	8008574 <__assert_func>
 8007816:	2301      	movs	r3, #1
 8007818:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800781c:	4610      	mov	r0, r2
 800781e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007822:	bfa4      	itt	ge
 8007824:	4623      	movge	r3, r4
 8007826:	462c      	movge	r4, r5
 8007828:	4638      	mov	r0, r7
 800782a:	6861      	ldr	r1, [r4, #4]
 800782c:	bfa6      	itte	ge
 800782e:	461d      	movge	r5, r3
 8007830:	2600      	movge	r6, #0
 8007832:	2601      	movlt	r6, #1
 8007834:	f7ff fcf4 	bl	8007220 <_Balloc>
 8007838:	4602      	mov	r2, r0
 800783a:	b918      	cbnz	r0, 8007844 <__mdiff+0x5c>
 800783c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007840:	4b2d      	ldr	r3, [pc, #180]	; (80078f8 <__mdiff+0x110>)
 8007842:	e7e5      	b.n	8007810 <__mdiff+0x28>
 8007844:	f102 0814 	add.w	r8, r2, #20
 8007848:	46c2      	mov	sl, r8
 800784a:	f04f 0c00 	mov.w	ip, #0
 800784e:	6927      	ldr	r7, [r4, #16]
 8007850:	60c6      	str	r6, [r0, #12]
 8007852:	692e      	ldr	r6, [r5, #16]
 8007854:	f104 0014 	add.w	r0, r4, #20
 8007858:	f105 0914 	add.w	r9, r5, #20
 800785c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007864:	3410      	adds	r4, #16
 8007866:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800786a:	f859 3b04 	ldr.w	r3, [r9], #4
 800786e:	fa1f f18b 	uxth.w	r1, fp
 8007872:	448c      	add	ip, r1
 8007874:	b299      	uxth	r1, r3
 8007876:	0c1b      	lsrs	r3, r3, #16
 8007878:	ebac 0101 	sub.w	r1, ip, r1
 800787c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007880:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007884:	b289      	uxth	r1, r1
 8007886:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800788a:	454e      	cmp	r6, r9
 800788c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007890:	f84a 3b04 	str.w	r3, [sl], #4
 8007894:	d8e7      	bhi.n	8007866 <__mdiff+0x7e>
 8007896:	1b73      	subs	r3, r6, r5
 8007898:	3b15      	subs	r3, #21
 800789a:	f023 0303 	bic.w	r3, r3, #3
 800789e:	3515      	adds	r5, #21
 80078a0:	3304      	adds	r3, #4
 80078a2:	42ae      	cmp	r6, r5
 80078a4:	bf38      	it	cc
 80078a6:	2304      	movcc	r3, #4
 80078a8:	4418      	add	r0, r3
 80078aa:	4443      	add	r3, r8
 80078ac:	461e      	mov	r6, r3
 80078ae:	4605      	mov	r5, r0
 80078b0:	4575      	cmp	r5, lr
 80078b2:	d30e      	bcc.n	80078d2 <__mdiff+0xea>
 80078b4:	f10e 0103 	add.w	r1, lr, #3
 80078b8:	1a09      	subs	r1, r1, r0
 80078ba:	f021 0103 	bic.w	r1, r1, #3
 80078be:	3803      	subs	r0, #3
 80078c0:	4586      	cmp	lr, r0
 80078c2:	bf38      	it	cc
 80078c4:	2100      	movcc	r1, #0
 80078c6:	4419      	add	r1, r3
 80078c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80078cc:	b18b      	cbz	r3, 80078f2 <__mdiff+0x10a>
 80078ce:	6117      	str	r7, [r2, #16]
 80078d0:	e7a4      	b.n	800781c <__mdiff+0x34>
 80078d2:	f855 8b04 	ldr.w	r8, [r5], #4
 80078d6:	fa1f f188 	uxth.w	r1, r8
 80078da:	4461      	add	r1, ip
 80078dc:	140c      	asrs	r4, r1, #16
 80078de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078e2:	b289      	uxth	r1, r1
 80078e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80078e8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80078ec:	f846 1b04 	str.w	r1, [r6], #4
 80078f0:	e7de      	b.n	80078b0 <__mdiff+0xc8>
 80078f2:	3f01      	subs	r7, #1
 80078f4:	e7e8      	b.n	80078c8 <__mdiff+0xe0>
 80078f6:	bf00      	nop
 80078f8:	08008c88 	.word	0x08008c88
 80078fc:	08008d78 	.word	0x08008d78

08007900 <__ulp>:
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <__ulp+0x48>)
 8007902:	400b      	ands	r3, r1
 8007904:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007908:	2b00      	cmp	r3, #0
 800790a:	dd02      	ble.n	8007912 <__ulp+0x12>
 800790c:	2000      	movs	r0, #0
 800790e:	4619      	mov	r1, r3
 8007910:	4770      	bx	lr
 8007912:	425b      	negs	r3, r3
 8007914:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007918:	f04f 0000 	mov.w	r0, #0
 800791c:	f04f 0100 	mov.w	r1, #0
 8007920:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007924:	da04      	bge.n	8007930 <__ulp+0x30>
 8007926:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800792a:	fa43 f102 	asr.w	r1, r3, r2
 800792e:	4770      	bx	lr
 8007930:	f1a2 0314 	sub.w	r3, r2, #20
 8007934:	2b1e      	cmp	r3, #30
 8007936:	bfd6      	itet	le
 8007938:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800793c:	2301      	movgt	r3, #1
 800793e:	fa22 f303 	lsrle.w	r3, r2, r3
 8007942:	4618      	mov	r0, r3
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	7ff00000 	.word	0x7ff00000

0800794c <__b2d>:
 800794c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007950:	6907      	ldr	r7, [r0, #16]
 8007952:	f100 0914 	add.w	r9, r0, #20
 8007956:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800795a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800795e:	f1a7 0804 	sub.w	r8, r7, #4
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff fd4e 	bl	8007404 <__hi0bits>
 8007968:	f1c0 0320 	rsb	r3, r0, #32
 800796c:	280a      	cmp	r0, #10
 800796e:	600b      	str	r3, [r1, #0]
 8007970:	491f      	ldr	r1, [pc, #124]	; (80079f0 <__b2d+0xa4>)
 8007972:	dc17      	bgt.n	80079a4 <__b2d+0x58>
 8007974:	45c1      	cmp	r9, r8
 8007976:	bf28      	it	cs
 8007978:	2200      	movcs	r2, #0
 800797a:	f1c0 0c0b 	rsb	ip, r0, #11
 800797e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007982:	bf38      	it	cc
 8007984:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007988:	ea43 0501 	orr.w	r5, r3, r1
 800798c:	f100 0315 	add.w	r3, r0, #21
 8007990:	fa06 f303 	lsl.w	r3, r6, r3
 8007994:	fa22 f20c 	lsr.w	r2, r2, ip
 8007998:	ea43 0402 	orr.w	r4, r3, r2
 800799c:	4620      	mov	r0, r4
 800799e:	4629      	mov	r1, r5
 80079a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079a4:	45c1      	cmp	r9, r8
 80079a6:	bf2e      	itee	cs
 80079a8:	2200      	movcs	r2, #0
 80079aa:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80079ae:	f1a7 0808 	subcc.w	r8, r7, #8
 80079b2:	f1b0 030b 	subs.w	r3, r0, #11
 80079b6:	d016      	beq.n	80079e6 <__b2d+0x9a>
 80079b8:	f1c3 0720 	rsb	r7, r3, #32
 80079bc:	fa22 f107 	lsr.w	r1, r2, r7
 80079c0:	45c8      	cmp	r8, r9
 80079c2:	fa06 f603 	lsl.w	r6, r6, r3
 80079c6:	ea46 0601 	orr.w	r6, r6, r1
 80079ca:	bf94      	ite	ls
 80079cc:	2100      	movls	r1, #0
 80079ce:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80079d2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80079d6:	fa02 f003 	lsl.w	r0, r2, r3
 80079da:	40f9      	lsrs	r1, r7
 80079dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80079e0:	ea40 0401 	orr.w	r4, r0, r1
 80079e4:	e7da      	b.n	800799c <__b2d+0x50>
 80079e6:	4614      	mov	r4, r2
 80079e8:	ea46 0501 	orr.w	r5, r6, r1
 80079ec:	e7d6      	b.n	800799c <__b2d+0x50>
 80079ee:	bf00      	nop
 80079f0:	3ff00000 	.word	0x3ff00000

080079f4 <__d2b>:
 80079f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80079f8:	2101      	movs	r1, #1
 80079fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80079fe:	4690      	mov	r8, r2
 8007a00:	461d      	mov	r5, r3
 8007a02:	f7ff fc0d 	bl	8007220 <_Balloc>
 8007a06:	4604      	mov	r4, r0
 8007a08:	b930      	cbnz	r0, 8007a18 <__d2b+0x24>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	f240 310a 	movw	r1, #778	; 0x30a
 8007a10:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <__d2b+0xb0>)
 8007a12:	4825      	ldr	r0, [pc, #148]	; (8007aa8 <__d2b+0xb4>)
 8007a14:	f000 fdae 	bl	8008574 <__assert_func>
 8007a18:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007a1c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007a20:	bb2d      	cbnz	r5, 8007a6e <__d2b+0x7a>
 8007a22:	9301      	str	r3, [sp, #4]
 8007a24:	f1b8 0300 	subs.w	r3, r8, #0
 8007a28:	d026      	beq.n	8007a78 <__d2b+0x84>
 8007a2a:	4668      	mov	r0, sp
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	f7ff fd09 	bl	8007444 <__lo0bits>
 8007a32:	9900      	ldr	r1, [sp, #0]
 8007a34:	b1f0      	cbz	r0, 8007a74 <__d2b+0x80>
 8007a36:	9a01      	ldr	r2, [sp, #4]
 8007a38:	f1c0 0320 	rsb	r3, r0, #32
 8007a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a40:	430b      	orrs	r3, r1
 8007a42:	40c2      	lsrs	r2, r0
 8007a44:	6163      	str	r3, [r4, #20]
 8007a46:	9201      	str	r2, [sp, #4]
 8007a48:	9b01      	ldr	r3, [sp, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2102      	movne	r1, #2
 8007a50:	2101      	moveq	r1, #1
 8007a52:	61a3      	str	r3, [r4, #24]
 8007a54:	6121      	str	r1, [r4, #16]
 8007a56:	b1c5      	cbz	r5, 8007a8a <__d2b+0x96>
 8007a58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a5c:	4405      	add	r5, r0
 8007a5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a62:	603d      	str	r5, [r7, #0]
 8007a64:	6030      	str	r0, [r6, #0]
 8007a66:	4620      	mov	r0, r4
 8007a68:	b002      	add	sp, #8
 8007a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a72:	e7d6      	b.n	8007a22 <__d2b+0x2e>
 8007a74:	6161      	str	r1, [r4, #20]
 8007a76:	e7e7      	b.n	8007a48 <__d2b+0x54>
 8007a78:	a801      	add	r0, sp, #4
 8007a7a:	f7ff fce3 	bl	8007444 <__lo0bits>
 8007a7e:	2101      	movs	r1, #1
 8007a80:	9b01      	ldr	r3, [sp, #4]
 8007a82:	6121      	str	r1, [r4, #16]
 8007a84:	6163      	str	r3, [r4, #20]
 8007a86:	3020      	adds	r0, #32
 8007a88:	e7e5      	b.n	8007a56 <__d2b+0x62>
 8007a8a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007a8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a92:	6038      	str	r0, [r7, #0]
 8007a94:	6918      	ldr	r0, [r3, #16]
 8007a96:	f7ff fcb5 	bl	8007404 <__hi0bits>
 8007a9a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007a9e:	6031      	str	r1, [r6, #0]
 8007aa0:	e7e1      	b.n	8007a66 <__d2b+0x72>
 8007aa2:	bf00      	nop
 8007aa4:	08008c88 	.word	0x08008c88
 8007aa8:	08008d78 	.word	0x08008d78

08007aac <__ratio>:
 8007aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	4688      	mov	r8, r1
 8007ab2:	4669      	mov	r1, sp
 8007ab4:	4681      	mov	r9, r0
 8007ab6:	f7ff ff49 	bl	800794c <__b2d>
 8007aba:	460f      	mov	r7, r1
 8007abc:	4604      	mov	r4, r0
 8007abe:	460d      	mov	r5, r1
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	a901      	add	r1, sp, #4
 8007ac4:	f7ff ff42 	bl	800794c <__b2d>
 8007ac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007acc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007ad0:	468b      	mov	fp, r1
 8007ad2:	eba3 0c02 	sub.w	ip, r3, r2
 8007ad6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bfd5      	itete	le
 8007ae4:	460a      	movle	r2, r1
 8007ae6:	462a      	movgt	r2, r5
 8007ae8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007aec:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007af0:	bfd8      	it	le
 8007af2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007af6:	465b      	mov	r3, fp
 8007af8:	4602      	mov	r2, r0
 8007afa:	4639      	mov	r1, r7
 8007afc:	4620      	mov	r0, r4
 8007afe:	f7f8 fe15 	bl	800072c <__aeabi_ddiv>
 8007b02:	b003      	add	sp, #12
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b08 <__copybits>:
 8007b08:	3901      	subs	r1, #1
 8007b0a:	b570      	push	{r4, r5, r6, lr}
 8007b0c:	1149      	asrs	r1, r1, #5
 8007b0e:	6914      	ldr	r4, [r2, #16]
 8007b10:	3101      	adds	r1, #1
 8007b12:	f102 0314 	add.w	r3, r2, #20
 8007b16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b1e:	1f05      	subs	r5, r0, #4
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	d30c      	bcc.n	8007b3e <__copybits+0x36>
 8007b24:	1aa3      	subs	r3, r4, r2
 8007b26:	3b11      	subs	r3, #17
 8007b28:	f023 0303 	bic.w	r3, r3, #3
 8007b2c:	3211      	adds	r2, #17
 8007b2e:	42a2      	cmp	r2, r4
 8007b30:	bf88      	it	hi
 8007b32:	2300      	movhi	r3, #0
 8007b34:	4418      	add	r0, r3
 8007b36:	2300      	movs	r3, #0
 8007b38:	4288      	cmp	r0, r1
 8007b3a:	d305      	bcc.n	8007b48 <__copybits+0x40>
 8007b3c:	bd70      	pop	{r4, r5, r6, pc}
 8007b3e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b42:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b46:	e7eb      	b.n	8007b20 <__copybits+0x18>
 8007b48:	f840 3b04 	str.w	r3, [r0], #4
 8007b4c:	e7f4      	b.n	8007b38 <__copybits+0x30>

08007b4e <__any_on>:
 8007b4e:	f100 0214 	add.w	r2, r0, #20
 8007b52:	6900      	ldr	r0, [r0, #16]
 8007b54:	114b      	asrs	r3, r1, #5
 8007b56:	4298      	cmp	r0, r3
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	db11      	blt.n	8007b80 <__any_on+0x32>
 8007b5c:	dd0a      	ble.n	8007b74 <__any_on+0x26>
 8007b5e:	f011 011f 	ands.w	r1, r1, #31
 8007b62:	d007      	beq.n	8007b74 <__any_on+0x26>
 8007b64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b68:	fa24 f001 	lsr.w	r0, r4, r1
 8007b6c:	fa00 f101 	lsl.w	r1, r0, r1
 8007b70:	428c      	cmp	r4, r1
 8007b72:	d10b      	bne.n	8007b8c <__any_on+0x3e>
 8007b74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d803      	bhi.n	8007b84 <__any_on+0x36>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	bd10      	pop	{r4, pc}
 8007b80:	4603      	mov	r3, r0
 8007b82:	e7f7      	b.n	8007b74 <__any_on+0x26>
 8007b84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	d0f5      	beq.n	8007b78 <__any_on+0x2a>
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	e7f6      	b.n	8007b7e <__any_on+0x30>

08007b90 <_calloc_r>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	fba1 5402 	umull	r5, r4, r1, r2
 8007b96:	b934      	cbnz	r4, 8007ba6 <_calloc_r+0x16>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f000 f875 	bl	8007c88 <_malloc_r>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	b928      	cbnz	r0, 8007bae <_calloc_r+0x1e>
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
 8007ba6:	220c      	movs	r2, #12
 8007ba8:	2600      	movs	r6, #0
 8007baa:	6002      	str	r2, [r0, #0]
 8007bac:	e7f9      	b.n	8007ba2 <_calloc_r+0x12>
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f7fc fadf 	bl	8004174 <memset>
 8007bb6:	e7f4      	b.n	8007ba2 <_calloc_r+0x12>

08007bb8 <_free_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4605      	mov	r5, r0
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d040      	beq.n	8007c42 <_free_r+0x8a>
 8007bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc4:	1f0c      	subs	r4, r1, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfb8      	it	lt
 8007bca:	18e4      	addlt	r4, r4, r3
 8007bcc:	f000 fe62 	bl	8008894 <__malloc_lock>
 8007bd0:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <_free_r+0x8c>)
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	b933      	cbnz	r3, 8007be4 <_free_r+0x2c>
 8007bd6:	6063      	str	r3, [r4, #4]
 8007bd8:	6014      	str	r4, [r2, #0]
 8007bda:	4628      	mov	r0, r5
 8007bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be0:	f000 be5e 	b.w	80088a0 <__malloc_unlock>
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	d908      	bls.n	8007bfa <_free_r+0x42>
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	1821      	adds	r1, r4, r0
 8007bec:	428b      	cmp	r3, r1
 8007bee:	bf01      	itttt	eq
 8007bf0:	6819      	ldreq	r1, [r3, #0]
 8007bf2:	685b      	ldreq	r3, [r3, #4]
 8007bf4:	1809      	addeq	r1, r1, r0
 8007bf6:	6021      	streq	r1, [r4, #0]
 8007bf8:	e7ed      	b.n	8007bd6 <_free_r+0x1e>
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	b10b      	cbz	r3, 8007c04 <_free_r+0x4c>
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d9fa      	bls.n	8007bfa <_free_r+0x42>
 8007c04:	6811      	ldr	r1, [r2, #0]
 8007c06:	1850      	adds	r0, r2, r1
 8007c08:	42a0      	cmp	r0, r4
 8007c0a:	d10b      	bne.n	8007c24 <_free_r+0x6c>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	4401      	add	r1, r0
 8007c10:	1850      	adds	r0, r2, r1
 8007c12:	4283      	cmp	r3, r0
 8007c14:	6011      	str	r1, [r2, #0]
 8007c16:	d1e0      	bne.n	8007bda <_free_r+0x22>
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4401      	add	r1, r0
 8007c1e:	6011      	str	r1, [r2, #0]
 8007c20:	6053      	str	r3, [r2, #4]
 8007c22:	e7da      	b.n	8007bda <_free_r+0x22>
 8007c24:	d902      	bls.n	8007c2c <_free_r+0x74>
 8007c26:	230c      	movs	r3, #12
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	e7d6      	b.n	8007bda <_free_r+0x22>
 8007c2c:	6820      	ldr	r0, [r4, #0]
 8007c2e:	1821      	adds	r1, r4, r0
 8007c30:	428b      	cmp	r3, r1
 8007c32:	bf01      	itttt	eq
 8007c34:	6819      	ldreq	r1, [r3, #0]
 8007c36:	685b      	ldreq	r3, [r3, #4]
 8007c38:	1809      	addeq	r1, r1, r0
 8007c3a:	6021      	streq	r1, [r4, #0]
 8007c3c:	6063      	str	r3, [r4, #4]
 8007c3e:	6054      	str	r4, [r2, #4]
 8007c40:	e7cb      	b.n	8007bda <_free_r+0x22>
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20000304 	.word	0x20000304

08007c48 <sbrk_aligned>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	4e0e      	ldr	r6, [pc, #56]	; (8007c84 <sbrk_aligned+0x3c>)
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	6831      	ldr	r1, [r6, #0]
 8007c50:	4605      	mov	r5, r0
 8007c52:	b911      	cbnz	r1, 8007c5a <sbrk_aligned+0x12>
 8007c54:	f000 fb46 	bl	80082e4 <_sbrk_r>
 8007c58:	6030      	str	r0, [r6, #0]
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f000 fb41 	bl	80082e4 <_sbrk_r>
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d00a      	beq.n	8007c7c <sbrk_aligned+0x34>
 8007c66:	1cc4      	adds	r4, r0, #3
 8007c68:	f024 0403 	bic.w	r4, r4, #3
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	d007      	beq.n	8007c80 <sbrk_aligned+0x38>
 8007c70:	1a21      	subs	r1, r4, r0
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 fb36 	bl	80082e4 <_sbrk_r>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d101      	bne.n	8007c80 <sbrk_aligned+0x38>
 8007c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c80:	4620      	mov	r0, r4
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	20000308 	.word	0x20000308

08007c88 <_malloc_r>:
 8007c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	1ccd      	adds	r5, r1, #3
 8007c8e:	f025 0503 	bic.w	r5, r5, #3
 8007c92:	3508      	adds	r5, #8
 8007c94:	2d0c      	cmp	r5, #12
 8007c96:	bf38      	it	cc
 8007c98:	250c      	movcc	r5, #12
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	db01      	blt.n	8007ca4 <_malloc_r+0x1c>
 8007ca0:	42a9      	cmp	r1, r5
 8007ca2:	d905      	bls.n	8007cb0 <_malloc_r+0x28>
 8007ca4:	230c      	movs	r3, #12
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	603b      	str	r3, [r7, #0]
 8007caa:	4630      	mov	r0, r6
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	4e2e      	ldr	r6, [pc, #184]	; (8007d6c <_malloc_r+0xe4>)
 8007cb2:	f000 fdef 	bl	8008894 <__malloc_lock>
 8007cb6:	6833      	ldr	r3, [r6, #0]
 8007cb8:	461c      	mov	r4, r3
 8007cba:	bb34      	cbnz	r4, 8007d0a <_malloc_r+0x82>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f7ff ffc2 	bl	8007c48 <sbrk_aligned>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	d14d      	bne.n	8007d66 <_malloc_r+0xde>
 8007cca:	6834      	ldr	r4, [r6, #0]
 8007ccc:	4626      	mov	r6, r4
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	d140      	bne.n	8007d54 <_malloc_r+0xcc>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	eb04 0803 	add.w	r8, r4, r3
 8007cdc:	f000 fb02 	bl	80082e4 <_sbrk_r>
 8007ce0:	4580      	cmp	r8, r0
 8007ce2:	d13a      	bne.n	8007d5a <_malloc_r+0xd2>
 8007ce4:	6821      	ldr	r1, [r4, #0]
 8007ce6:	3503      	adds	r5, #3
 8007ce8:	1a6d      	subs	r5, r5, r1
 8007cea:	f025 0503 	bic.w	r5, r5, #3
 8007cee:	3508      	adds	r5, #8
 8007cf0:	2d0c      	cmp	r5, #12
 8007cf2:	bf38      	it	cc
 8007cf4:	250c      	movcc	r5, #12
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7ff ffa5 	bl	8007c48 <sbrk_aligned>
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d02b      	beq.n	8007d5a <_malloc_r+0xd2>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	442b      	add	r3, r5
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	e00e      	b.n	8007d28 <_malloc_r+0xa0>
 8007d0a:	6822      	ldr	r2, [r4, #0]
 8007d0c:	1b52      	subs	r2, r2, r5
 8007d0e:	d41e      	bmi.n	8007d4e <_malloc_r+0xc6>
 8007d10:	2a0b      	cmp	r2, #11
 8007d12:	d916      	bls.n	8007d42 <_malloc_r+0xba>
 8007d14:	1961      	adds	r1, r4, r5
 8007d16:	42a3      	cmp	r3, r4
 8007d18:	6025      	str	r5, [r4, #0]
 8007d1a:	bf18      	it	ne
 8007d1c:	6059      	strne	r1, [r3, #4]
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	bf08      	it	eq
 8007d22:	6031      	streq	r1, [r6, #0]
 8007d24:	5162      	str	r2, [r4, r5]
 8007d26:	604b      	str	r3, [r1, #4]
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f104 060b 	add.w	r6, r4, #11
 8007d2e:	f000 fdb7 	bl	80088a0 <__malloc_unlock>
 8007d32:	f026 0607 	bic.w	r6, r6, #7
 8007d36:	1d23      	adds	r3, r4, #4
 8007d38:	1af2      	subs	r2, r6, r3
 8007d3a:	d0b6      	beq.n	8007caa <_malloc_r+0x22>
 8007d3c:	1b9b      	subs	r3, r3, r6
 8007d3e:	50a3      	str	r3, [r4, r2]
 8007d40:	e7b3      	b.n	8007caa <_malloc_r+0x22>
 8007d42:	6862      	ldr	r2, [r4, #4]
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	bf0c      	ite	eq
 8007d48:	6032      	streq	r2, [r6, #0]
 8007d4a:	605a      	strne	r2, [r3, #4]
 8007d4c:	e7ec      	b.n	8007d28 <_malloc_r+0xa0>
 8007d4e:	4623      	mov	r3, r4
 8007d50:	6864      	ldr	r4, [r4, #4]
 8007d52:	e7b2      	b.n	8007cba <_malloc_r+0x32>
 8007d54:	4634      	mov	r4, r6
 8007d56:	6876      	ldr	r6, [r6, #4]
 8007d58:	e7b9      	b.n	8007cce <_malloc_r+0x46>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	f000 fd9e 	bl	80088a0 <__malloc_unlock>
 8007d64:	e7a1      	b.n	8007caa <_malloc_r+0x22>
 8007d66:	6025      	str	r5, [r4, #0]
 8007d68:	e7de      	b.n	8007d28 <_malloc_r+0xa0>
 8007d6a:	bf00      	nop
 8007d6c:	20000304 	.word	0x20000304

08007d70 <__ssputs_r>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	688e      	ldr	r6, [r1, #8]
 8007d76:	4682      	mov	sl, r0
 8007d78:	429e      	cmp	r6, r3
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4690      	mov	r8, r2
 8007d7e:	461f      	mov	r7, r3
 8007d80:	d838      	bhi.n	8007df4 <__ssputs_r+0x84>
 8007d82:	898a      	ldrh	r2, [r1, #12]
 8007d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d88:	d032      	beq.n	8007df0 <__ssputs_r+0x80>
 8007d8a:	6825      	ldr	r5, [r4, #0]
 8007d8c:	6909      	ldr	r1, [r1, #16]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	eba5 0901 	sub.w	r9, r5, r1
 8007d94:	6965      	ldr	r5, [r4, #20]
 8007d96:	444b      	add	r3, r9
 8007d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007da0:	106d      	asrs	r5, r5, #1
 8007da2:	429d      	cmp	r5, r3
 8007da4:	bf38      	it	cc
 8007da6:	461d      	movcc	r5, r3
 8007da8:	0553      	lsls	r3, r2, #21
 8007daa:	d531      	bpl.n	8007e10 <__ssputs_r+0xa0>
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7ff ff6b 	bl	8007c88 <_malloc_r>
 8007db2:	4606      	mov	r6, r0
 8007db4:	b950      	cbnz	r0, 8007dcc <__ssputs_r+0x5c>
 8007db6:	230c      	movs	r3, #12
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	f8ca 3000 	str.w	r3, [sl]
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dcc:	464a      	mov	r2, r9
 8007dce:	6921      	ldr	r1, [r4, #16]
 8007dd0:	f7ff fa18 	bl	8007204 <memcpy>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	6126      	str	r6, [r4, #16]
 8007de2:	444e      	add	r6, r9
 8007de4:	6026      	str	r6, [r4, #0]
 8007de6:	463e      	mov	r6, r7
 8007de8:	6165      	str	r5, [r4, #20]
 8007dea:	eba5 0509 	sub.w	r5, r5, r9
 8007dee:	60a5      	str	r5, [r4, #8]
 8007df0:	42be      	cmp	r6, r7
 8007df2:	d900      	bls.n	8007df6 <__ssputs_r+0x86>
 8007df4:	463e      	mov	r6, r7
 8007df6:	4632      	mov	r2, r6
 8007df8:	4641      	mov	r1, r8
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	f000 fd30 	bl	8008860 <memmove>
 8007e00:	68a3      	ldr	r3, [r4, #8]
 8007e02:	2000      	movs	r0, #0
 8007e04:	1b9b      	subs	r3, r3, r6
 8007e06:	60a3      	str	r3, [r4, #8]
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	4433      	add	r3, r6
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	e7db      	b.n	8007dc8 <__ssputs_r+0x58>
 8007e10:	462a      	mov	r2, r5
 8007e12:	f000 fd4b 	bl	80088ac <_realloc_r>
 8007e16:	4606      	mov	r6, r0
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d1e1      	bne.n	8007de0 <__ssputs_r+0x70>
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	6921      	ldr	r1, [r4, #16]
 8007e20:	f7ff feca 	bl	8007bb8 <_free_r>
 8007e24:	e7c7      	b.n	8007db6 <__ssputs_r+0x46>
	...

08007e28 <_svfiprintf_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	4698      	mov	r8, r3
 8007e2e:	898b      	ldrh	r3, [r1, #12]
 8007e30:	4607      	mov	r7, r0
 8007e32:	061b      	lsls	r3, r3, #24
 8007e34:	460d      	mov	r5, r1
 8007e36:	4614      	mov	r4, r2
 8007e38:	b09d      	sub	sp, #116	; 0x74
 8007e3a:	d50e      	bpl.n	8007e5a <_svfiprintf_r+0x32>
 8007e3c:	690b      	ldr	r3, [r1, #16]
 8007e3e:	b963      	cbnz	r3, 8007e5a <_svfiprintf_r+0x32>
 8007e40:	2140      	movs	r1, #64	; 0x40
 8007e42:	f7ff ff21 	bl	8007c88 <_malloc_r>
 8007e46:	6028      	str	r0, [r5, #0]
 8007e48:	6128      	str	r0, [r5, #16]
 8007e4a:	b920      	cbnz	r0, 8007e56 <_svfiprintf_r+0x2e>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	e0d1      	b.n	8007ffa <_svfiprintf_r+0x1d2>
 8007e56:	2340      	movs	r3, #64	; 0x40
 8007e58:	616b      	str	r3, [r5, #20]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5e:	2320      	movs	r3, #32
 8007e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e64:	2330      	movs	r3, #48	; 0x30
 8007e66:	f04f 0901 	mov.w	r9, #1
 8007e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008014 <_svfiprintf_r+0x1ec>
 8007e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e76:	4623      	mov	r3, r4
 8007e78:	469a      	mov	sl, r3
 8007e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e7e:	b10a      	cbz	r2, 8007e84 <_svfiprintf_r+0x5c>
 8007e80:	2a25      	cmp	r2, #37	; 0x25
 8007e82:	d1f9      	bne.n	8007e78 <_svfiprintf_r+0x50>
 8007e84:	ebba 0b04 	subs.w	fp, sl, r4
 8007e88:	d00b      	beq.n	8007ea2 <_svfiprintf_r+0x7a>
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff ff6d 	bl	8007d70 <__ssputs_r>
 8007e96:	3001      	adds	r0, #1
 8007e98:	f000 80aa 	beq.w	8007ff0 <_svfiprintf_r+0x1c8>
 8007e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9e:	445a      	add	r2, fp
 8007ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 80a2 	beq.w	8007ff0 <_svfiprintf_r+0x1c8>
 8007eac:	2300      	movs	r3, #0
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb6:	f10a 0a01 	add.w	sl, sl, #1
 8007eba:	9304      	str	r3, [sp, #16]
 8007ebc:	9307      	str	r3, [sp, #28]
 8007ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ec4:	4654      	mov	r4, sl
 8007ec6:	2205      	movs	r2, #5
 8007ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ecc:	4851      	ldr	r0, [pc, #324]	; (8008014 <_svfiprintf_r+0x1ec>)
 8007ece:	f7ff f98b 	bl	80071e8 <memchr>
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	b9d8      	cbnz	r0, 8007f0e <_svfiprintf_r+0xe6>
 8007ed6:	06d0      	lsls	r0, r2, #27
 8007ed8:	bf44      	itt	mi
 8007eda:	2320      	movmi	r3, #32
 8007edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee0:	0711      	lsls	r1, r2, #28
 8007ee2:	bf44      	itt	mi
 8007ee4:	232b      	movmi	r3, #43	; 0x2b
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eea:	f89a 3000 	ldrb.w	r3, [sl]
 8007eee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef0:	d015      	beq.n	8007f1e <_svfiprintf_r+0xf6>
 8007ef2:	4654      	mov	r4, sl
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f04f 0c0a 	mov.w	ip, #10
 8007efa:	9a07      	ldr	r2, [sp, #28]
 8007efc:	4621      	mov	r1, r4
 8007efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f02:	3b30      	subs	r3, #48	; 0x30
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d94e      	bls.n	8007fa6 <_svfiprintf_r+0x17e>
 8007f08:	b1b0      	cbz	r0, 8007f38 <_svfiprintf_r+0x110>
 8007f0a:	9207      	str	r2, [sp, #28]
 8007f0c:	e014      	b.n	8007f38 <_svfiprintf_r+0x110>
 8007f0e:	eba0 0308 	sub.w	r3, r0, r8
 8007f12:	fa09 f303 	lsl.w	r3, r9, r3
 8007f16:	4313      	orrs	r3, r2
 8007f18:	46a2      	mov	sl, r4
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	e7d2      	b.n	8007ec4 <_svfiprintf_r+0x9c>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	1d19      	adds	r1, r3, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	9103      	str	r1, [sp, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfbb      	ittet	lt
 8007f2a:	425b      	neglt	r3, r3
 8007f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f30:	9307      	strge	r3, [sp, #28]
 8007f32:	9307      	strlt	r3, [sp, #28]
 8007f34:	bfb8      	it	lt
 8007f36:	9204      	strlt	r2, [sp, #16]
 8007f38:	7823      	ldrb	r3, [r4, #0]
 8007f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f3c:	d10c      	bne.n	8007f58 <_svfiprintf_r+0x130>
 8007f3e:	7863      	ldrb	r3, [r4, #1]
 8007f40:	2b2a      	cmp	r3, #42	; 0x2a
 8007f42:	d135      	bne.n	8007fb0 <_svfiprintf_r+0x188>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	3402      	adds	r4, #2
 8007f48:	1d1a      	adds	r2, r3, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	9203      	str	r2, [sp, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfb8      	it	lt
 8007f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008018 <_svfiprintf_r+0x1f0>
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	4650      	mov	r0, sl
 8007f60:	7821      	ldrb	r1, [r4, #0]
 8007f62:	f7ff f941 	bl	80071e8 <memchr>
 8007f66:	b140      	cbz	r0, 8007f7a <_svfiprintf_r+0x152>
 8007f68:	2340      	movs	r3, #64	; 0x40
 8007f6a:	eba0 000a 	sub.w	r0, r0, sl
 8007f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	3401      	adds	r4, #1
 8007f76:	4303      	orrs	r3, r0
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7e:	2206      	movs	r2, #6
 8007f80:	4826      	ldr	r0, [pc, #152]	; (800801c <_svfiprintf_r+0x1f4>)
 8007f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f86:	f7ff f92f 	bl	80071e8 <memchr>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d038      	beq.n	8008000 <_svfiprintf_r+0x1d8>
 8007f8e:	4b24      	ldr	r3, [pc, #144]	; (8008020 <_svfiprintf_r+0x1f8>)
 8007f90:	bb1b      	cbnz	r3, 8007fda <_svfiprintf_r+0x1b2>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	3307      	adds	r3, #7
 8007f96:	f023 0307 	bic.w	r3, r3, #7
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	9303      	str	r3, [sp, #12]
 8007f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa0:	4433      	add	r3, r6
 8007fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa4:	e767      	b.n	8007e76 <_svfiprintf_r+0x4e>
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	2001      	movs	r0, #1
 8007faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fae:	e7a5      	b.n	8007efc <_svfiprintf_r+0xd4>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f04f 0c0a 	mov.w	ip, #10
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	3401      	adds	r4, #1
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc2:	3a30      	subs	r2, #48	; 0x30
 8007fc4:	2a09      	cmp	r2, #9
 8007fc6:	d903      	bls.n	8007fd0 <_svfiprintf_r+0x1a8>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0c5      	beq.n	8007f58 <_svfiprintf_r+0x130>
 8007fcc:	9105      	str	r1, [sp, #20]
 8007fce:	e7c3      	b.n	8007f58 <_svfiprintf_r+0x130>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd8:	e7f0      	b.n	8007fbc <_svfiprintf_r+0x194>
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	4b10      	ldr	r3, [pc, #64]	; (8008024 <_svfiprintf_r+0x1fc>)
 8007fe4:	a904      	add	r1, sp, #16
 8007fe6:	f7fc f96b 	bl	80042c0 <_printf_float>
 8007fea:	1c42      	adds	r2, r0, #1
 8007fec:	4606      	mov	r6, r0
 8007fee:	d1d6      	bne.n	8007f9e <_svfiprintf_r+0x176>
 8007ff0:	89ab      	ldrh	r3, [r5, #12]
 8007ff2:	065b      	lsls	r3, r3, #25
 8007ff4:	f53f af2c 	bmi.w	8007e50 <_svfiprintf_r+0x28>
 8007ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ffa:	b01d      	add	sp, #116	; 0x74
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	ab03      	add	r3, sp, #12
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	462a      	mov	r2, r5
 8008006:	4638      	mov	r0, r7
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <_svfiprintf_r+0x1fc>)
 800800a:	a904      	add	r1, sp, #16
 800800c:	f7fc fbf4 	bl	80047f8 <_printf_i>
 8008010:	e7eb      	b.n	8007fea <_svfiprintf_r+0x1c2>
 8008012:	bf00      	nop
 8008014:	08008ed4 	.word	0x08008ed4
 8008018:	08008eda 	.word	0x08008eda
 800801c:	08008ede 	.word	0x08008ede
 8008020:	080042c1 	.word	0x080042c1
 8008024:	08007d71 	.word	0x08007d71

08008028 <__sfputc_r>:
 8008028:	6893      	ldr	r3, [r2, #8]
 800802a:	b410      	push	{r4}
 800802c:	3b01      	subs	r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	6093      	str	r3, [r2, #8]
 8008032:	da07      	bge.n	8008044 <__sfputc_r+0x1c>
 8008034:	6994      	ldr	r4, [r2, #24]
 8008036:	42a3      	cmp	r3, r4
 8008038:	db01      	blt.n	800803e <__sfputc_r+0x16>
 800803a:	290a      	cmp	r1, #10
 800803c:	d102      	bne.n	8008044 <__sfputc_r+0x1c>
 800803e:	bc10      	pop	{r4}
 8008040:	f000 b9b8 	b.w	80083b4 <__swbuf_r>
 8008044:	6813      	ldr	r3, [r2, #0]
 8008046:	1c58      	adds	r0, r3, #1
 8008048:	6010      	str	r0, [r2, #0]
 800804a:	7019      	strb	r1, [r3, #0]
 800804c:	4608      	mov	r0, r1
 800804e:	bc10      	pop	{r4}
 8008050:	4770      	bx	lr

08008052 <__sfputs_r>:
 8008052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	4614      	mov	r4, r2
 800805a:	18d5      	adds	r5, r2, r3
 800805c:	42ac      	cmp	r4, r5
 800805e:	d101      	bne.n	8008064 <__sfputs_r+0x12>
 8008060:	2000      	movs	r0, #0
 8008062:	e007      	b.n	8008074 <__sfputs_r+0x22>
 8008064:	463a      	mov	r2, r7
 8008066:	4630      	mov	r0, r6
 8008068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806c:	f7ff ffdc 	bl	8008028 <__sfputc_r>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d1f3      	bne.n	800805c <__sfputs_r+0xa>
 8008074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008078 <_vfiprintf_r>:
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	460d      	mov	r5, r1
 800807e:	4614      	mov	r4, r2
 8008080:	4698      	mov	r8, r3
 8008082:	4606      	mov	r6, r0
 8008084:	b09d      	sub	sp, #116	; 0x74
 8008086:	b118      	cbz	r0, 8008090 <_vfiprintf_r+0x18>
 8008088:	6983      	ldr	r3, [r0, #24]
 800808a:	b90b      	cbnz	r3, 8008090 <_vfiprintf_r+0x18>
 800808c:	f7fe fc86 	bl	800699c <__sinit>
 8008090:	4b89      	ldr	r3, [pc, #548]	; (80082b8 <_vfiprintf_r+0x240>)
 8008092:	429d      	cmp	r5, r3
 8008094:	d11b      	bne.n	80080ce <_vfiprintf_r+0x56>
 8008096:	6875      	ldr	r5, [r6, #4]
 8008098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800809a:	07d9      	lsls	r1, r3, #31
 800809c:	d405      	bmi.n	80080aa <_vfiprintf_r+0x32>
 800809e:	89ab      	ldrh	r3, [r5, #12]
 80080a0:	059a      	lsls	r2, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_vfiprintf_r+0x32>
 80080a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a6:	f7ff f882 	bl	80071ae <__retarget_lock_acquire_recursive>
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	071b      	lsls	r3, r3, #28
 80080ae:	d501      	bpl.n	80080b4 <_vfiprintf_r+0x3c>
 80080b0:	692b      	ldr	r3, [r5, #16]
 80080b2:	b9eb      	cbnz	r3, 80080f0 <_vfiprintf_r+0x78>
 80080b4:	4629      	mov	r1, r5
 80080b6:	4630      	mov	r0, r6
 80080b8:	f000 f9ee 	bl	8008498 <__swsetup_r>
 80080bc:	b1c0      	cbz	r0, 80080f0 <_vfiprintf_r+0x78>
 80080be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080c0:	07dc      	lsls	r4, r3, #31
 80080c2:	d50e      	bpl.n	80080e2 <_vfiprintf_r+0x6a>
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	b01d      	add	sp, #116	; 0x74
 80080ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ce:	4b7b      	ldr	r3, [pc, #492]	; (80082bc <_vfiprintf_r+0x244>)
 80080d0:	429d      	cmp	r5, r3
 80080d2:	d101      	bne.n	80080d8 <_vfiprintf_r+0x60>
 80080d4:	68b5      	ldr	r5, [r6, #8]
 80080d6:	e7df      	b.n	8008098 <_vfiprintf_r+0x20>
 80080d8:	4b79      	ldr	r3, [pc, #484]	; (80082c0 <_vfiprintf_r+0x248>)
 80080da:	429d      	cmp	r5, r3
 80080dc:	bf08      	it	eq
 80080de:	68f5      	ldreq	r5, [r6, #12]
 80080e0:	e7da      	b.n	8008098 <_vfiprintf_r+0x20>
 80080e2:	89ab      	ldrh	r3, [r5, #12]
 80080e4:	0598      	lsls	r0, r3, #22
 80080e6:	d4ed      	bmi.n	80080c4 <_vfiprintf_r+0x4c>
 80080e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ea:	f7ff f861 	bl	80071b0 <__retarget_lock_release_recursive>
 80080ee:	e7e9      	b.n	80080c4 <_vfiprintf_r+0x4c>
 80080f0:	2300      	movs	r3, #0
 80080f2:	9309      	str	r3, [sp, #36]	; 0x24
 80080f4:	2320      	movs	r3, #32
 80080f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080fa:	2330      	movs	r3, #48	; 0x30
 80080fc:	f04f 0901 	mov.w	r9, #1
 8008100:	f8cd 800c 	str.w	r8, [sp, #12]
 8008104:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80082c4 <_vfiprintf_r+0x24c>
 8008108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800810c:	4623      	mov	r3, r4
 800810e:	469a      	mov	sl, r3
 8008110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008114:	b10a      	cbz	r2, 800811a <_vfiprintf_r+0xa2>
 8008116:	2a25      	cmp	r2, #37	; 0x25
 8008118:	d1f9      	bne.n	800810e <_vfiprintf_r+0x96>
 800811a:	ebba 0b04 	subs.w	fp, sl, r4
 800811e:	d00b      	beq.n	8008138 <_vfiprintf_r+0xc0>
 8008120:	465b      	mov	r3, fp
 8008122:	4622      	mov	r2, r4
 8008124:	4629      	mov	r1, r5
 8008126:	4630      	mov	r0, r6
 8008128:	f7ff ff93 	bl	8008052 <__sfputs_r>
 800812c:	3001      	adds	r0, #1
 800812e:	f000 80aa 	beq.w	8008286 <_vfiprintf_r+0x20e>
 8008132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008134:	445a      	add	r2, fp
 8008136:	9209      	str	r2, [sp, #36]	; 0x24
 8008138:	f89a 3000 	ldrb.w	r3, [sl]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80a2 	beq.w	8008286 <_vfiprintf_r+0x20e>
 8008142:	2300      	movs	r3, #0
 8008144:	f04f 32ff 	mov.w	r2, #4294967295
 8008148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800814c:	f10a 0a01 	add.w	sl, sl, #1
 8008150:	9304      	str	r3, [sp, #16]
 8008152:	9307      	str	r3, [sp, #28]
 8008154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008158:	931a      	str	r3, [sp, #104]	; 0x68
 800815a:	4654      	mov	r4, sl
 800815c:	2205      	movs	r2, #5
 800815e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008162:	4858      	ldr	r0, [pc, #352]	; (80082c4 <_vfiprintf_r+0x24c>)
 8008164:	f7ff f840 	bl	80071e8 <memchr>
 8008168:	9a04      	ldr	r2, [sp, #16]
 800816a:	b9d8      	cbnz	r0, 80081a4 <_vfiprintf_r+0x12c>
 800816c:	06d1      	lsls	r1, r2, #27
 800816e:	bf44      	itt	mi
 8008170:	2320      	movmi	r3, #32
 8008172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008176:	0713      	lsls	r3, r2, #28
 8008178:	bf44      	itt	mi
 800817a:	232b      	movmi	r3, #43	; 0x2b
 800817c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008180:	f89a 3000 	ldrb.w	r3, [sl]
 8008184:	2b2a      	cmp	r3, #42	; 0x2a
 8008186:	d015      	beq.n	80081b4 <_vfiprintf_r+0x13c>
 8008188:	4654      	mov	r4, sl
 800818a:	2000      	movs	r0, #0
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	9a07      	ldr	r2, [sp, #28]
 8008192:	4621      	mov	r1, r4
 8008194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008198:	3b30      	subs	r3, #48	; 0x30
 800819a:	2b09      	cmp	r3, #9
 800819c:	d94e      	bls.n	800823c <_vfiprintf_r+0x1c4>
 800819e:	b1b0      	cbz	r0, 80081ce <_vfiprintf_r+0x156>
 80081a0:	9207      	str	r2, [sp, #28]
 80081a2:	e014      	b.n	80081ce <_vfiprintf_r+0x156>
 80081a4:	eba0 0308 	sub.w	r3, r0, r8
 80081a8:	fa09 f303 	lsl.w	r3, r9, r3
 80081ac:	4313      	orrs	r3, r2
 80081ae:	46a2      	mov	sl, r4
 80081b0:	9304      	str	r3, [sp, #16]
 80081b2:	e7d2      	b.n	800815a <_vfiprintf_r+0xe2>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	1d19      	adds	r1, r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	9103      	str	r1, [sp, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bfbb      	ittet	lt
 80081c0:	425b      	neglt	r3, r3
 80081c2:	f042 0202 	orrlt.w	r2, r2, #2
 80081c6:	9307      	strge	r3, [sp, #28]
 80081c8:	9307      	strlt	r3, [sp, #28]
 80081ca:	bfb8      	it	lt
 80081cc:	9204      	strlt	r2, [sp, #16]
 80081ce:	7823      	ldrb	r3, [r4, #0]
 80081d0:	2b2e      	cmp	r3, #46	; 0x2e
 80081d2:	d10c      	bne.n	80081ee <_vfiprintf_r+0x176>
 80081d4:	7863      	ldrb	r3, [r4, #1]
 80081d6:	2b2a      	cmp	r3, #42	; 0x2a
 80081d8:	d135      	bne.n	8008246 <_vfiprintf_r+0x1ce>
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	3402      	adds	r4, #2
 80081de:	1d1a      	adds	r2, r3, #4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	9203      	str	r2, [sp, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bfb8      	it	lt
 80081e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80081ec:	9305      	str	r3, [sp, #20]
 80081ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80082c8 <_vfiprintf_r+0x250>
 80081f2:	2203      	movs	r2, #3
 80081f4:	4650      	mov	r0, sl
 80081f6:	7821      	ldrb	r1, [r4, #0]
 80081f8:	f7fe fff6 	bl	80071e8 <memchr>
 80081fc:	b140      	cbz	r0, 8008210 <_vfiprintf_r+0x198>
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	eba0 000a 	sub.w	r0, r0, sl
 8008204:	fa03 f000 	lsl.w	r0, r3, r0
 8008208:	9b04      	ldr	r3, [sp, #16]
 800820a:	3401      	adds	r4, #1
 800820c:	4303      	orrs	r3, r0
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008214:	2206      	movs	r2, #6
 8008216:	482d      	ldr	r0, [pc, #180]	; (80082cc <_vfiprintf_r+0x254>)
 8008218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800821c:	f7fe ffe4 	bl	80071e8 <memchr>
 8008220:	2800      	cmp	r0, #0
 8008222:	d03f      	beq.n	80082a4 <_vfiprintf_r+0x22c>
 8008224:	4b2a      	ldr	r3, [pc, #168]	; (80082d0 <_vfiprintf_r+0x258>)
 8008226:	bb1b      	cbnz	r3, 8008270 <_vfiprintf_r+0x1f8>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	3307      	adds	r3, #7
 800822c:	f023 0307 	bic.w	r3, r3, #7
 8008230:	3308      	adds	r3, #8
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008236:	443b      	add	r3, r7
 8008238:	9309      	str	r3, [sp, #36]	; 0x24
 800823a:	e767      	b.n	800810c <_vfiprintf_r+0x94>
 800823c:	460c      	mov	r4, r1
 800823e:	2001      	movs	r0, #1
 8008240:	fb0c 3202 	mla	r2, ip, r2, r3
 8008244:	e7a5      	b.n	8008192 <_vfiprintf_r+0x11a>
 8008246:	2300      	movs	r3, #0
 8008248:	f04f 0c0a 	mov.w	ip, #10
 800824c:	4619      	mov	r1, r3
 800824e:	3401      	adds	r4, #1
 8008250:	9305      	str	r3, [sp, #20]
 8008252:	4620      	mov	r0, r4
 8008254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008258:	3a30      	subs	r2, #48	; 0x30
 800825a:	2a09      	cmp	r2, #9
 800825c:	d903      	bls.n	8008266 <_vfiprintf_r+0x1ee>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0c5      	beq.n	80081ee <_vfiprintf_r+0x176>
 8008262:	9105      	str	r1, [sp, #20]
 8008264:	e7c3      	b.n	80081ee <_vfiprintf_r+0x176>
 8008266:	4604      	mov	r4, r0
 8008268:	2301      	movs	r3, #1
 800826a:	fb0c 2101 	mla	r1, ip, r1, r2
 800826e:	e7f0      	b.n	8008252 <_vfiprintf_r+0x1da>
 8008270:	ab03      	add	r3, sp, #12
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	462a      	mov	r2, r5
 8008276:	4630      	mov	r0, r6
 8008278:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <_vfiprintf_r+0x25c>)
 800827a:	a904      	add	r1, sp, #16
 800827c:	f7fc f820 	bl	80042c0 <_printf_float>
 8008280:	4607      	mov	r7, r0
 8008282:	1c78      	adds	r0, r7, #1
 8008284:	d1d6      	bne.n	8008234 <_vfiprintf_r+0x1bc>
 8008286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008288:	07d9      	lsls	r1, r3, #31
 800828a:	d405      	bmi.n	8008298 <_vfiprintf_r+0x220>
 800828c:	89ab      	ldrh	r3, [r5, #12]
 800828e:	059a      	lsls	r2, r3, #22
 8008290:	d402      	bmi.n	8008298 <_vfiprintf_r+0x220>
 8008292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008294:	f7fe ff8c 	bl	80071b0 <__retarget_lock_release_recursive>
 8008298:	89ab      	ldrh	r3, [r5, #12]
 800829a:	065b      	lsls	r3, r3, #25
 800829c:	f53f af12 	bmi.w	80080c4 <_vfiprintf_r+0x4c>
 80082a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082a2:	e711      	b.n	80080c8 <_vfiprintf_r+0x50>
 80082a4:	ab03      	add	r3, sp, #12
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	462a      	mov	r2, r5
 80082aa:	4630      	mov	r0, r6
 80082ac:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <_vfiprintf_r+0x25c>)
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	f7fc faa2 	bl	80047f8 <_printf_i>
 80082b4:	e7e4      	b.n	8008280 <_vfiprintf_r+0x208>
 80082b6:	bf00      	nop
 80082b8:	08008cbc 	.word	0x08008cbc
 80082bc:	08008cdc 	.word	0x08008cdc
 80082c0:	08008c9c 	.word	0x08008c9c
 80082c4:	08008ed4 	.word	0x08008ed4
 80082c8:	08008eda 	.word	0x08008eda
 80082cc:	08008ede 	.word	0x08008ede
 80082d0:	080042c1 	.word	0x080042c1
 80082d4:	08008053 	.word	0x08008053

080082d8 <nan>:
 80082d8:	2000      	movs	r0, #0
 80082da:	4901      	ldr	r1, [pc, #4]	; (80082e0 <nan+0x8>)
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	7ff80000 	.word	0x7ff80000

080082e4 <_sbrk_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	2300      	movs	r3, #0
 80082e8:	4d05      	ldr	r5, [pc, #20]	; (8008300 <_sbrk_r+0x1c>)
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f7f9 fb2a 	bl	8001948 <_sbrk>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_sbrk_r+0x1a>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_sbrk_r+0x1a>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	2000030c 	.word	0x2000030c

08008304 <__sread>:
 8008304:	b510      	push	{r4, lr}
 8008306:	460c      	mov	r4, r1
 8008308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830c:	f000 fafe 	bl	800890c <_read_r>
 8008310:	2800      	cmp	r0, #0
 8008312:	bfab      	itete	ge
 8008314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008316:	89a3      	ldrhlt	r3, [r4, #12]
 8008318:	181b      	addge	r3, r3, r0
 800831a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800831e:	bfac      	ite	ge
 8008320:	6563      	strge	r3, [r4, #84]	; 0x54
 8008322:	81a3      	strhlt	r3, [r4, #12]
 8008324:	bd10      	pop	{r4, pc}

08008326 <__swrite>:
 8008326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832a:	461f      	mov	r7, r3
 800832c:	898b      	ldrh	r3, [r1, #12]
 800832e:	4605      	mov	r5, r0
 8008330:	05db      	lsls	r3, r3, #23
 8008332:	460c      	mov	r4, r1
 8008334:	4616      	mov	r6, r2
 8008336:	d505      	bpl.n	8008344 <__swrite+0x1e>
 8008338:	2302      	movs	r3, #2
 800833a:	2200      	movs	r2, #0
 800833c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008340:	f000 fa16 	bl	8008770 <_lseek_r>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	4632      	mov	r2, r6
 8008348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	4628      	mov	r0, r5
 8008350:	463b      	mov	r3, r7
 8008352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	f000 b88b 	b.w	8008474 <_write_r>

0800835e <__sseek>:
 800835e:	b510      	push	{r4, lr}
 8008360:	460c      	mov	r4, r1
 8008362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008366:	f000 fa03 	bl	8008770 <_lseek_r>
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	bf15      	itete	ne
 8008370:	6560      	strne	r0, [r4, #84]	; 0x54
 8008372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800837a:	81a3      	strheq	r3, [r4, #12]
 800837c:	bf18      	it	ne
 800837e:	81a3      	strhne	r3, [r4, #12]
 8008380:	bd10      	pop	{r4, pc}

08008382 <__sclose>:
 8008382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008386:	f000 b913 	b.w	80085b0 <_close_r>

0800838a <strncmp>:
 800838a:	4603      	mov	r3, r0
 800838c:	b510      	push	{r4, lr}
 800838e:	b172      	cbz	r2, 80083ae <strncmp+0x24>
 8008390:	3901      	subs	r1, #1
 8008392:	1884      	adds	r4, r0, r2
 8008394:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008398:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800839c:	4290      	cmp	r0, r2
 800839e:	d101      	bne.n	80083a4 <strncmp+0x1a>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d101      	bne.n	80083a8 <strncmp+0x1e>
 80083a4:	1a80      	subs	r0, r0, r2
 80083a6:	bd10      	pop	{r4, pc}
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d1f3      	bne.n	8008394 <strncmp+0xa>
 80083ac:	e7fa      	b.n	80083a4 <strncmp+0x1a>
 80083ae:	4610      	mov	r0, r2
 80083b0:	e7f9      	b.n	80083a6 <strncmp+0x1c>
	...

080083b4 <__swbuf_r>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	460e      	mov	r6, r1
 80083b8:	4614      	mov	r4, r2
 80083ba:	4605      	mov	r5, r0
 80083bc:	b118      	cbz	r0, 80083c6 <__swbuf_r+0x12>
 80083be:	6983      	ldr	r3, [r0, #24]
 80083c0:	b90b      	cbnz	r3, 80083c6 <__swbuf_r+0x12>
 80083c2:	f7fe faeb 	bl	800699c <__sinit>
 80083c6:	4b21      	ldr	r3, [pc, #132]	; (800844c <__swbuf_r+0x98>)
 80083c8:	429c      	cmp	r4, r3
 80083ca:	d12b      	bne.n	8008424 <__swbuf_r+0x70>
 80083cc:	686c      	ldr	r4, [r5, #4]
 80083ce:	69a3      	ldr	r3, [r4, #24]
 80083d0:	60a3      	str	r3, [r4, #8]
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	071a      	lsls	r2, r3, #28
 80083d6:	d52f      	bpl.n	8008438 <__swbuf_r+0x84>
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	b36b      	cbz	r3, 8008438 <__swbuf_r+0x84>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	6820      	ldr	r0, [r4, #0]
 80083e0:	b2f6      	uxtb	r6, r6
 80083e2:	1ac0      	subs	r0, r0, r3
 80083e4:	6963      	ldr	r3, [r4, #20]
 80083e6:	4637      	mov	r7, r6
 80083e8:	4283      	cmp	r3, r0
 80083ea:	dc04      	bgt.n	80083f6 <__swbuf_r+0x42>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4628      	mov	r0, r5
 80083f0:	f000 f970 	bl	80086d4 <_fflush_r>
 80083f4:	bb30      	cbnz	r0, 8008444 <__swbuf_r+0x90>
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	3001      	adds	r0, #1
 80083fa:	3b01      	subs	r3, #1
 80083fc:	60a3      	str	r3, [r4, #8]
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	6022      	str	r2, [r4, #0]
 8008404:	701e      	strb	r6, [r3, #0]
 8008406:	6963      	ldr	r3, [r4, #20]
 8008408:	4283      	cmp	r3, r0
 800840a:	d004      	beq.n	8008416 <__swbuf_r+0x62>
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	07db      	lsls	r3, r3, #31
 8008410:	d506      	bpl.n	8008420 <__swbuf_r+0x6c>
 8008412:	2e0a      	cmp	r6, #10
 8008414:	d104      	bne.n	8008420 <__swbuf_r+0x6c>
 8008416:	4621      	mov	r1, r4
 8008418:	4628      	mov	r0, r5
 800841a:	f000 f95b 	bl	80086d4 <_fflush_r>
 800841e:	b988      	cbnz	r0, 8008444 <__swbuf_r+0x90>
 8008420:	4638      	mov	r0, r7
 8008422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <__swbuf_r+0x9c>)
 8008426:	429c      	cmp	r4, r3
 8008428:	d101      	bne.n	800842e <__swbuf_r+0x7a>
 800842a:	68ac      	ldr	r4, [r5, #8]
 800842c:	e7cf      	b.n	80083ce <__swbuf_r+0x1a>
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <__swbuf_r+0xa0>)
 8008430:	429c      	cmp	r4, r3
 8008432:	bf08      	it	eq
 8008434:	68ec      	ldreq	r4, [r5, #12]
 8008436:	e7ca      	b.n	80083ce <__swbuf_r+0x1a>
 8008438:	4621      	mov	r1, r4
 800843a:	4628      	mov	r0, r5
 800843c:	f000 f82c 	bl	8008498 <__swsetup_r>
 8008440:	2800      	cmp	r0, #0
 8008442:	d0cb      	beq.n	80083dc <__swbuf_r+0x28>
 8008444:	f04f 37ff 	mov.w	r7, #4294967295
 8008448:	e7ea      	b.n	8008420 <__swbuf_r+0x6c>
 800844a:	bf00      	nop
 800844c:	08008cbc 	.word	0x08008cbc
 8008450:	08008cdc 	.word	0x08008cdc
 8008454:	08008c9c 	.word	0x08008c9c

08008458 <__ascii_wctomb>:
 8008458:	4603      	mov	r3, r0
 800845a:	4608      	mov	r0, r1
 800845c:	b141      	cbz	r1, 8008470 <__ascii_wctomb+0x18>
 800845e:	2aff      	cmp	r2, #255	; 0xff
 8008460:	d904      	bls.n	800846c <__ascii_wctomb+0x14>
 8008462:	228a      	movs	r2, #138	; 0x8a
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	4770      	bx	lr
 800846c:	2001      	movs	r0, #1
 800846e:	700a      	strb	r2, [r1, #0]
 8008470:	4770      	bx	lr
	...

08008474 <_write_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	2200      	movs	r2, #0
 800847e:	4d05      	ldr	r5, [pc, #20]	; (8008494 <_write_r+0x20>)
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7f9 fa14 	bl	80018b0 <_write>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_write_r+0x1e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_write_r+0x1e>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	2000030c 	.word	0x2000030c

08008498 <__swsetup_r>:
 8008498:	4b32      	ldr	r3, [pc, #200]	; (8008564 <__swsetup_r+0xcc>)
 800849a:	b570      	push	{r4, r5, r6, lr}
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	4606      	mov	r6, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	b125      	cbz	r5, 80084ae <__swsetup_r+0x16>
 80084a4:	69ab      	ldr	r3, [r5, #24]
 80084a6:	b913      	cbnz	r3, 80084ae <__swsetup_r+0x16>
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7fe fa77 	bl	800699c <__sinit>
 80084ae:	4b2e      	ldr	r3, [pc, #184]	; (8008568 <__swsetup_r+0xd0>)
 80084b0:	429c      	cmp	r4, r3
 80084b2:	d10f      	bne.n	80084d4 <__swsetup_r+0x3c>
 80084b4:	686c      	ldr	r4, [r5, #4]
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084bc:	0719      	lsls	r1, r3, #28
 80084be:	d42c      	bmi.n	800851a <__swsetup_r+0x82>
 80084c0:	06dd      	lsls	r5, r3, #27
 80084c2:	d411      	bmi.n	80084e8 <__swsetup_r+0x50>
 80084c4:	2309      	movs	r3, #9
 80084c6:	6033      	str	r3, [r6, #0]
 80084c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	81a3      	strh	r3, [r4, #12]
 80084d2:	e03e      	b.n	8008552 <__swsetup_r+0xba>
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <__swsetup_r+0xd4>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d101      	bne.n	80084de <__swsetup_r+0x46>
 80084da:	68ac      	ldr	r4, [r5, #8]
 80084dc:	e7eb      	b.n	80084b6 <__swsetup_r+0x1e>
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <__swsetup_r+0xd8>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	bf08      	it	eq
 80084e4:	68ec      	ldreq	r4, [r5, #12]
 80084e6:	e7e6      	b.n	80084b6 <__swsetup_r+0x1e>
 80084e8:	0758      	lsls	r0, r3, #29
 80084ea:	d512      	bpl.n	8008512 <__swsetup_r+0x7a>
 80084ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ee:	b141      	cbz	r1, 8008502 <__swsetup_r+0x6a>
 80084f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084f4:	4299      	cmp	r1, r3
 80084f6:	d002      	beq.n	80084fe <__swsetup_r+0x66>
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff fb5d 	bl	8007bb8 <_free_r>
 80084fe:	2300      	movs	r3, #0
 8008500:	6363      	str	r3, [r4, #52]	; 0x34
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	2300      	movs	r3, #0
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f043 0308 	orr.w	r3, r3, #8
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	b94b      	cbnz	r3, 8008532 <__swsetup_r+0x9a>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d003      	beq.n	8008532 <__swsetup_r+0x9a>
 800852a:	4621      	mov	r1, r4
 800852c:	4630      	mov	r0, r6
 800852e:	f000 f957 	bl	80087e0 <__smakebuf_r>
 8008532:	89a0      	ldrh	r0, [r4, #12]
 8008534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008538:	f010 0301 	ands.w	r3, r0, #1
 800853c:	d00a      	beq.n	8008554 <__swsetup_r+0xbc>
 800853e:	2300      	movs	r3, #0
 8008540:	60a3      	str	r3, [r4, #8]
 8008542:	6963      	ldr	r3, [r4, #20]
 8008544:	425b      	negs	r3, r3
 8008546:	61a3      	str	r3, [r4, #24]
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	b943      	cbnz	r3, 800855e <__swsetup_r+0xc6>
 800854c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008550:	d1ba      	bne.n	80084c8 <__swsetup_r+0x30>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	0781      	lsls	r1, r0, #30
 8008556:	bf58      	it	pl
 8008558:	6963      	ldrpl	r3, [r4, #20]
 800855a:	60a3      	str	r3, [r4, #8]
 800855c:	e7f4      	b.n	8008548 <__swsetup_r+0xb0>
 800855e:	2000      	movs	r0, #0
 8008560:	e7f7      	b.n	8008552 <__swsetup_r+0xba>
 8008562:	bf00      	nop
 8008564:	2000000c 	.word	0x2000000c
 8008568:	08008cbc 	.word	0x08008cbc
 800856c:	08008cdc 	.word	0x08008cdc
 8008570:	08008c9c 	.word	0x08008c9c

08008574 <__assert_func>:
 8008574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008576:	4614      	mov	r4, r2
 8008578:	461a      	mov	r2, r3
 800857a:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <__assert_func+0x2c>)
 800857c:	4605      	mov	r5, r0
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68d8      	ldr	r0, [r3, #12]
 8008582:	b14c      	cbz	r4, 8008598 <__assert_func+0x24>
 8008584:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <__assert_func+0x30>)
 8008586:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800858a:	9100      	str	r1, [sp, #0]
 800858c:	462b      	mov	r3, r5
 800858e:	4906      	ldr	r1, [pc, #24]	; (80085a8 <__assert_func+0x34>)
 8008590:	f000 f8dc 	bl	800874c <fiprintf>
 8008594:	f000 f9cc 	bl	8008930 <abort>
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <__assert_func+0x38>)
 800859a:	461c      	mov	r4, r3
 800859c:	e7f3      	b.n	8008586 <__assert_func+0x12>
 800859e:	bf00      	nop
 80085a0:	2000000c 	.word	0x2000000c
 80085a4:	08008ee5 	.word	0x08008ee5
 80085a8:	08008ef2 	.word	0x08008ef2
 80085ac:	08008f20 	.word	0x08008f20

080085b0 <_close_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	2300      	movs	r3, #0
 80085b4:	4d05      	ldr	r5, [pc, #20]	; (80085cc <_close_r+0x1c>)
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	602b      	str	r3, [r5, #0]
 80085bc:	f7f9 f994 	bl	80018e8 <_close>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_close_r+0x1a>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_close_r+0x1a>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	2000030c 	.word	0x2000030c

080085d0 <__sflush_r>:
 80085d0:	898a      	ldrh	r2, [r1, #12]
 80085d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d4:	4605      	mov	r5, r0
 80085d6:	0710      	lsls	r0, r2, #28
 80085d8:	460c      	mov	r4, r1
 80085da:	d457      	bmi.n	800868c <__sflush_r+0xbc>
 80085dc:	684b      	ldr	r3, [r1, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dc04      	bgt.n	80085ec <__sflush_r+0x1c>
 80085e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dc01      	bgt.n	80085ec <__sflush_r+0x1c>
 80085e8:	2000      	movs	r0, #0
 80085ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	d0fa      	beq.n	80085e8 <__sflush_r+0x18>
 80085f2:	2300      	movs	r3, #0
 80085f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085f8:	682f      	ldr	r7, [r5, #0]
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	d032      	beq.n	8008664 <__sflush_r+0x94>
 80085fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	075a      	lsls	r2, r3, #29
 8008604:	d505      	bpl.n	8008612 <__sflush_r+0x42>
 8008606:	6863      	ldr	r3, [r4, #4]
 8008608:	1ac0      	subs	r0, r0, r3
 800860a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800860c:	b10b      	cbz	r3, 8008612 <__sflush_r+0x42>
 800860e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008610:	1ac0      	subs	r0, r0, r3
 8008612:	2300      	movs	r3, #0
 8008614:	4602      	mov	r2, r0
 8008616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008618:	4628      	mov	r0, r5
 800861a:	6a21      	ldr	r1, [r4, #32]
 800861c:	47b0      	blx	r6
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	d106      	bne.n	8008632 <__sflush_r+0x62>
 8008624:	6829      	ldr	r1, [r5, #0]
 8008626:	291d      	cmp	r1, #29
 8008628:	d82c      	bhi.n	8008684 <__sflush_r+0xb4>
 800862a:	4a29      	ldr	r2, [pc, #164]	; (80086d0 <__sflush_r+0x100>)
 800862c:	40ca      	lsrs	r2, r1
 800862e:	07d6      	lsls	r6, r2, #31
 8008630:	d528      	bpl.n	8008684 <__sflush_r+0xb4>
 8008632:	2200      	movs	r2, #0
 8008634:	6062      	str	r2, [r4, #4]
 8008636:	6922      	ldr	r2, [r4, #16]
 8008638:	04d9      	lsls	r1, r3, #19
 800863a:	6022      	str	r2, [r4, #0]
 800863c:	d504      	bpl.n	8008648 <__sflush_r+0x78>
 800863e:	1c42      	adds	r2, r0, #1
 8008640:	d101      	bne.n	8008646 <__sflush_r+0x76>
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	b903      	cbnz	r3, 8008648 <__sflush_r+0x78>
 8008646:	6560      	str	r0, [r4, #84]	; 0x54
 8008648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800864a:	602f      	str	r7, [r5, #0]
 800864c:	2900      	cmp	r1, #0
 800864e:	d0cb      	beq.n	80085e8 <__sflush_r+0x18>
 8008650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008654:	4299      	cmp	r1, r3
 8008656:	d002      	beq.n	800865e <__sflush_r+0x8e>
 8008658:	4628      	mov	r0, r5
 800865a:	f7ff faad 	bl	8007bb8 <_free_r>
 800865e:	2000      	movs	r0, #0
 8008660:	6360      	str	r0, [r4, #52]	; 0x34
 8008662:	e7c2      	b.n	80085ea <__sflush_r+0x1a>
 8008664:	6a21      	ldr	r1, [r4, #32]
 8008666:	2301      	movs	r3, #1
 8008668:	4628      	mov	r0, r5
 800866a:	47b0      	blx	r6
 800866c:	1c41      	adds	r1, r0, #1
 800866e:	d1c7      	bne.n	8008600 <__sflush_r+0x30>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0c4      	beq.n	8008600 <__sflush_r+0x30>
 8008676:	2b1d      	cmp	r3, #29
 8008678:	d001      	beq.n	800867e <__sflush_r+0xae>
 800867a:	2b16      	cmp	r3, #22
 800867c:	d101      	bne.n	8008682 <__sflush_r+0xb2>
 800867e:	602f      	str	r7, [r5, #0]
 8008680:	e7b2      	b.n	80085e8 <__sflush_r+0x18>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	e7ae      	b.n	80085ea <__sflush_r+0x1a>
 800868c:	690f      	ldr	r7, [r1, #16]
 800868e:	2f00      	cmp	r7, #0
 8008690:	d0aa      	beq.n	80085e8 <__sflush_r+0x18>
 8008692:	0793      	lsls	r3, r2, #30
 8008694:	bf18      	it	ne
 8008696:	2300      	movne	r3, #0
 8008698:	680e      	ldr	r6, [r1, #0]
 800869a:	bf08      	it	eq
 800869c:	694b      	ldreq	r3, [r1, #20]
 800869e:	1bf6      	subs	r6, r6, r7
 80086a0:	600f      	str	r7, [r1, #0]
 80086a2:	608b      	str	r3, [r1, #8]
 80086a4:	2e00      	cmp	r6, #0
 80086a6:	dd9f      	ble.n	80085e8 <__sflush_r+0x18>
 80086a8:	4633      	mov	r3, r6
 80086aa:	463a      	mov	r2, r7
 80086ac:	4628      	mov	r0, r5
 80086ae:	6a21      	ldr	r1, [r4, #32]
 80086b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80086b4:	47e0      	blx	ip
 80086b6:	2800      	cmp	r0, #0
 80086b8:	dc06      	bgt.n	80086c8 <__sflush_r+0xf8>
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	e790      	b.n	80085ea <__sflush_r+0x1a>
 80086c8:	4407      	add	r7, r0
 80086ca:	1a36      	subs	r6, r6, r0
 80086cc:	e7ea      	b.n	80086a4 <__sflush_r+0xd4>
 80086ce:	bf00      	nop
 80086d0:	20400001 	.word	0x20400001

080086d4 <_fflush_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	690b      	ldr	r3, [r1, #16]
 80086d8:	4605      	mov	r5, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	b913      	cbnz	r3, 80086e4 <_fflush_r+0x10>
 80086de:	2500      	movs	r5, #0
 80086e0:	4628      	mov	r0, r5
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	b118      	cbz	r0, 80086ee <_fflush_r+0x1a>
 80086e6:	6983      	ldr	r3, [r0, #24]
 80086e8:	b90b      	cbnz	r3, 80086ee <_fflush_r+0x1a>
 80086ea:	f7fe f957 	bl	800699c <__sinit>
 80086ee:	4b14      	ldr	r3, [pc, #80]	; (8008740 <_fflush_r+0x6c>)
 80086f0:	429c      	cmp	r4, r3
 80086f2:	d11b      	bne.n	800872c <_fflush_r+0x58>
 80086f4:	686c      	ldr	r4, [r5, #4]
 80086f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0ef      	beq.n	80086de <_fflush_r+0xa>
 80086fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008700:	07d0      	lsls	r0, r2, #31
 8008702:	d404      	bmi.n	800870e <_fflush_r+0x3a>
 8008704:	0599      	lsls	r1, r3, #22
 8008706:	d402      	bmi.n	800870e <_fflush_r+0x3a>
 8008708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870a:	f7fe fd50 	bl	80071ae <__retarget_lock_acquire_recursive>
 800870e:	4628      	mov	r0, r5
 8008710:	4621      	mov	r1, r4
 8008712:	f7ff ff5d 	bl	80085d0 <__sflush_r>
 8008716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008718:	4605      	mov	r5, r0
 800871a:	07da      	lsls	r2, r3, #31
 800871c:	d4e0      	bmi.n	80086e0 <_fflush_r+0xc>
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	059b      	lsls	r3, r3, #22
 8008722:	d4dd      	bmi.n	80086e0 <_fflush_r+0xc>
 8008724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008726:	f7fe fd43 	bl	80071b0 <__retarget_lock_release_recursive>
 800872a:	e7d9      	b.n	80086e0 <_fflush_r+0xc>
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <_fflush_r+0x70>)
 800872e:	429c      	cmp	r4, r3
 8008730:	d101      	bne.n	8008736 <_fflush_r+0x62>
 8008732:	68ac      	ldr	r4, [r5, #8]
 8008734:	e7df      	b.n	80086f6 <_fflush_r+0x22>
 8008736:	4b04      	ldr	r3, [pc, #16]	; (8008748 <_fflush_r+0x74>)
 8008738:	429c      	cmp	r4, r3
 800873a:	bf08      	it	eq
 800873c:	68ec      	ldreq	r4, [r5, #12]
 800873e:	e7da      	b.n	80086f6 <_fflush_r+0x22>
 8008740:	08008cbc 	.word	0x08008cbc
 8008744:	08008cdc 	.word	0x08008cdc
 8008748:	08008c9c 	.word	0x08008c9c

0800874c <fiprintf>:
 800874c:	b40e      	push	{r1, r2, r3}
 800874e:	b503      	push	{r0, r1, lr}
 8008750:	4601      	mov	r1, r0
 8008752:	ab03      	add	r3, sp, #12
 8008754:	4805      	ldr	r0, [pc, #20]	; (800876c <fiprintf+0x20>)
 8008756:	f853 2b04 	ldr.w	r2, [r3], #4
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	f7ff fc8b 	bl	8008078 <_vfiprintf_r>
 8008762:	b002      	add	sp, #8
 8008764:	f85d eb04 	ldr.w	lr, [sp], #4
 8008768:	b003      	add	sp, #12
 800876a:	4770      	bx	lr
 800876c:	2000000c 	.word	0x2000000c

08008770 <_lseek_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	4611      	mov	r1, r2
 8008778:	2200      	movs	r2, #0
 800877a:	4d05      	ldr	r5, [pc, #20]	; (8008790 <_lseek_r+0x20>)
 800877c:	602a      	str	r2, [r5, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f7f9 f8d6 	bl	8001930 <_lseek>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_lseek_r+0x1e>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_lseek_r+0x1e>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	2000030c 	.word	0x2000030c

08008794 <__swhatbuf_r>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	460e      	mov	r6, r1
 8008798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879c:	4614      	mov	r4, r2
 800879e:	2900      	cmp	r1, #0
 80087a0:	461d      	mov	r5, r3
 80087a2:	b096      	sub	sp, #88	; 0x58
 80087a4:	da08      	bge.n	80087b8 <__swhatbuf_r+0x24>
 80087a6:	2200      	movs	r2, #0
 80087a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80087ac:	602a      	str	r2, [r5, #0]
 80087ae:	061a      	lsls	r2, r3, #24
 80087b0:	d410      	bmi.n	80087d4 <__swhatbuf_r+0x40>
 80087b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087b6:	e00e      	b.n	80087d6 <__swhatbuf_r+0x42>
 80087b8:	466a      	mov	r2, sp
 80087ba:	f000 f8c1 	bl	8008940 <_fstat_r>
 80087be:	2800      	cmp	r0, #0
 80087c0:	dbf1      	blt.n	80087a6 <__swhatbuf_r+0x12>
 80087c2:	9a01      	ldr	r2, [sp, #4]
 80087c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087cc:	425a      	negs	r2, r3
 80087ce:	415a      	adcs	r2, r3
 80087d0:	602a      	str	r2, [r5, #0]
 80087d2:	e7ee      	b.n	80087b2 <__swhatbuf_r+0x1e>
 80087d4:	2340      	movs	r3, #64	; 0x40
 80087d6:	2000      	movs	r0, #0
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	b016      	add	sp, #88	; 0x58
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080087e0 <__smakebuf_r>:
 80087e0:	898b      	ldrh	r3, [r1, #12]
 80087e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087e4:	079d      	lsls	r5, r3, #30
 80087e6:	4606      	mov	r6, r0
 80087e8:	460c      	mov	r4, r1
 80087ea:	d507      	bpl.n	80087fc <__smakebuf_r+0x1c>
 80087ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	6123      	str	r3, [r4, #16]
 80087f4:	2301      	movs	r3, #1
 80087f6:	6163      	str	r3, [r4, #20]
 80087f8:	b002      	add	sp, #8
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	466a      	mov	r2, sp
 80087fe:	ab01      	add	r3, sp, #4
 8008800:	f7ff ffc8 	bl	8008794 <__swhatbuf_r>
 8008804:	9900      	ldr	r1, [sp, #0]
 8008806:	4605      	mov	r5, r0
 8008808:	4630      	mov	r0, r6
 800880a:	f7ff fa3d 	bl	8007c88 <_malloc_r>
 800880e:	b948      	cbnz	r0, 8008824 <__smakebuf_r+0x44>
 8008810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008814:	059a      	lsls	r2, r3, #22
 8008816:	d4ef      	bmi.n	80087f8 <__smakebuf_r+0x18>
 8008818:	f023 0303 	bic.w	r3, r3, #3
 800881c:	f043 0302 	orr.w	r3, r3, #2
 8008820:	81a3      	strh	r3, [r4, #12]
 8008822:	e7e3      	b.n	80087ec <__smakebuf_r+0xc>
 8008824:	4b0d      	ldr	r3, [pc, #52]	; (800885c <__smakebuf_r+0x7c>)
 8008826:	62b3      	str	r3, [r6, #40]	; 0x28
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	6020      	str	r0, [r4, #0]
 800882c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008830:	81a3      	strh	r3, [r4, #12]
 8008832:	9b00      	ldr	r3, [sp, #0]
 8008834:	6120      	str	r0, [r4, #16]
 8008836:	6163      	str	r3, [r4, #20]
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	b15b      	cbz	r3, 8008854 <__smakebuf_r+0x74>
 800883c:	4630      	mov	r0, r6
 800883e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008842:	f000 f88f 	bl	8008964 <_isatty_r>
 8008846:	b128      	cbz	r0, 8008854 <__smakebuf_r+0x74>
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	f023 0303 	bic.w	r3, r3, #3
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	81a3      	strh	r3, [r4, #12]
 8008854:	89a0      	ldrh	r0, [r4, #12]
 8008856:	4305      	orrs	r5, r0
 8008858:	81a5      	strh	r5, [r4, #12]
 800885a:	e7cd      	b.n	80087f8 <__smakebuf_r+0x18>
 800885c:	08006935 	.word	0x08006935

08008860 <memmove>:
 8008860:	4288      	cmp	r0, r1
 8008862:	b510      	push	{r4, lr}
 8008864:	eb01 0402 	add.w	r4, r1, r2
 8008868:	d902      	bls.n	8008870 <memmove+0x10>
 800886a:	4284      	cmp	r4, r0
 800886c:	4623      	mov	r3, r4
 800886e:	d807      	bhi.n	8008880 <memmove+0x20>
 8008870:	1e43      	subs	r3, r0, #1
 8008872:	42a1      	cmp	r1, r4
 8008874:	d008      	beq.n	8008888 <memmove+0x28>
 8008876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800887e:	e7f8      	b.n	8008872 <memmove+0x12>
 8008880:	4601      	mov	r1, r0
 8008882:	4402      	add	r2, r0
 8008884:	428a      	cmp	r2, r1
 8008886:	d100      	bne.n	800888a <memmove+0x2a>
 8008888:	bd10      	pop	{r4, pc}
 800888a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800888e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008892:	e7f7      	b.n	8008884 <memmove+0x24>

08008894 <__malloc_lock>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__malloc_lock+0x8>)
 8008896:	f7fe bc8a 	b.w	80071ae <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20000300 	.word	0x20000300

080088a0 <__malloc_unlock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__malloc_unlock+0x8>)
 80088a2:	f7fe bc85 	b.w	80071b0 <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000300 	.word	0x20000300

080088ac <_realloc_r>:
 80088ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b0:	4680      	mov	r8, r0
 80088b2:	4614      	mov	r4, r2
 80088b4:	460e      	mov	r6, r1
 80088b6:	b921      	cbnz	r1, 80088c2 <_realloc_r+0x16>
 80088b8:	4611      	mov	r1, r2
 80088ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088be:	f7ff b9e3 	b.w	8007c88 <_malloc_r>
 80088c2:	b92a      	cbnz	r2, 80088d0 <_realloc_r+0x24>
 80088c4:	f7ff f978 	bl	8007bb8 <_free_r>
 80088c8:	4625      	mov	r5, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	f000 f858 	bl	8008984 <_malloc_usable_size_r>
 80088d4:	4284      	cmp	r4, r0
 80088d6:	4607      	mov	r7, r0
 80088d8:	d802      	bhi.n	80088e0 <_realloc_r+0x34>
 80088da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088de:	d812      	bhi.n	8008906 <_realloc_r+0x5a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7ff f9d0 	bl	8007c88 <_malloc_r>
 80088e8:	4605      	mov	r5, r0
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d0ed      	beq.n	80088ca <_realloc_r+0x1e>
 80088ee:	42bc      	cmp	r4, r7
 80088f0:	4622      	mov	r2, r4
 80088f2:	4631      	mov	r1, r6
 80088f4:	bf28      	it	cs
 80088f6:	463a      	movcs	r2, r7
 80088f8:	f7fe fc84 	bl	8007204 <memcpy>
 80088fc:	4631      	mov	r1, r6
 80088fe:	4640      	mov	r0, r8
 8008900:	f7ff f95a 	bl	8007bb8 <_free_r>
 8008904:	e7e1      	b.n	80088ca <_realloc_r+0x1e>
 8008906:	4635      	mov	r5, r6
 8008908:	e7df      	b.n	80088ca <_realloc_r+0x1e>
	...

0800890c <_read_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	2200      	movs	r2, #0
 8008916:	4d05      	ldr	r5, [pc, #20]	; (800892c <_read_r+0x20>)
 8008918:	602a      	str	r2, [r5, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f7f8 ffab 	bl	8001876 <_read>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_read_r+0x1e>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_read_r+0x1e>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	2000030c 	.word	0x2000030c

08008930 <abort>:
 8008930:	2006      	movs	r0, #6
 8008932:	b508      	push	{r3, lr}
 8008934:	f000 f856 	bl	80089e4 <raise>
 8008938:	2001      	movs	r0, #1
 800893a:	f7f8 ff92 	bl	8001862 <_exit>
	...

08008940 <_fstat_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	2300      	movs	r3, #0
 8008944:	4d06      	ldr	r5, [pc, #24]	; (8008960 <_fstat_r+0x20>)
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	4611      	mov	r1, r2
 800894c:	602b      	str	r3, [r5, #0]
 800894e:	f7f8 ffd6 	bl	80018fe <_fstat>
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	d102      	bne.n	800895c <_fstat_r+0x1c>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	b103      	cbz	r3, 800895c <_fstat_r+0x1c>
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	bf00      	nop
 8008960:	2000030c 	.word	0x2000030c

08008964 <_isatty_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	2300      	movs	r3, #0
 8008968:	4d05      	ldr	r5, [pc, #20]	; (8008980 <_isatty_r+0x1c>)
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	f7f8 ffd4 	bl	800191c <_isatty>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d102      	bne.n	800897e <_isatty_r+0x1a>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	b103      	cbz	r3, 800897e <_isatty_r+0x1a>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	2000030c 	.word	0x2000030c

08008984 <_malloc_usable_size_r>:
 8008984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008988:	1f18      	subs	r0, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	bfbc      	itt	lt
 800898e:	580b      	ldrlt	r3, [r1, r0]
 8008990:	18c0      	addlt	r0, r0, r3
 8008992:	4770      	bx	lr

08008994 <_raise_r>:
 8008994:	291f      	cmp	r1, #31
 8008996:	b538      	push	{r3, r4, r5, lr}
 8008998:	4604      	mov	r4, r0
 800899a:	460d      	mov	r5, r1
 800899c:	d904      	bls.n	80089a8 <_raise_r+0x14>
 800899e:	2316      	movs	r3, #22
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	f04f 30ff 	mov.w	r0, #4294967295
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089aa:	b112      	cbz	r2, 80089b2 <_raise_r+0x1e>
 80089ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089b0:	b94b      	cbnz	r3, 80089c6 <_raise_r+0x32>
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f830 	bl	8008a18 <_getpid_r>
 80089b8:	462a      	mov	r2, r5
 80089ba:	4601      	mov	r1, r0
 80089bc:	4620      	mov	r0, r4
 80089be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c2:	f000 b817 	b.w	80089f4 <_kill_r>
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d00a      	beq.n	80089e0 <_raise_r+0x4c>
 80089ca:	1c59      	adds	r1, r3, #1
 80089cc:	d103      	bne.n	80089d6 <_raise_r+0x42>
 80089ce:	2316      	movs	r3, #22
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	2001      	movs	r0, #1
 80089d4:	e7e7      	b.n	80089a6 <_raise_r+0x12>
 80089d6:	2400      	movs	r4, #0
 80089d8:	4628      	mov	r0, r5
 80089da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089de:	4798      	blx	r3
 80089e0:	2000      	movs	r0, #0
 80089e2:	e7e0      	b.n	80089a6 <_raise_r+0x12>

080089e4 <raise>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <raise+0xc>)
 80089e6:	4601      	mov	r1, r0
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	f7ff bfd3 	b.w	8008994 <_raise_r>
 80089ee:	bf00      	nop
 80089f0:	2000000c 	.word	0x2000000c

080089f4 <_kill_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	2300      	movs	r3, #0
 80089f8:	4d06      	ldr	r5, [pc, #24]	; (8008a14 <_kill_r+0x20>)
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	4611      	mov	r1, r2
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	f7f8 ff1e 	bl	8001842 <_kill>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d102      	bne.n	8008a10 <_kill_r+0x1c>
 8008a0a:	682b      	ldr	r3, [r5, #0]
 8008a0c:	b103      	cbz	r3, 8008a10 <_kill_r+0x1c>
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
 8008a12:	bf00      	nop
 8008a14:	2000030c 	.word	0x2000030c

08008a18 <_getpid_r>:
 8008a18:	f7f8 bf0c 	b.w	8001834 <_getpid>

08008a1c <_init>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	bf00      	nop
 8008a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a22:	bc08      	pop	{r3}
 8008a24:	469e      	mov	lr, r3
 8008a26:	4770      	bx	lr

08008a28 <_fini>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	bf00      	nop
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr
