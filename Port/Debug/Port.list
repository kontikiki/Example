
Port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003580  08003580  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003580  08003580  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003580  08003580  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000074  080035fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001194  080035fc  00021194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a00c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002163  00000000  00000000  0002a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec5  00000000  00000000  0002d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8d3  00000000  00000000  0004668d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7d7  00000000  00000000  00051f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd737  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f4  00000000  00000000  000dd788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080034a0 	.word	0x080034a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080034a0 	.word	0x080034a0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	200000e4 	.word	0x200000e4

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa59 	bl	800063c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f821 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f88f 	bl	80002b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f863 	bl	800025c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
printf("Hello world\n");
 8000196:	480b      	ldr	r0, [pc, #44]	; (80001c4 <main+0x44>)
 8000198:	f002 fcfa 	bl	8002b90 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800019c:	4b0a      	ldr	r3, [pc, #40]	; (80001c8 <main+0x48>)
 800019e:	1d3c      	adds	r4, r7, #4
 80001a0:	461d      	mov	r5, r3
 80001a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fa76 	bl	80016a4 <osThreadCreate>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4a04      	ldr	r2, [pc, #16]	; (80001cc <main+0x4c>)
 80001bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001be:	f001 fa6a 	bl	8001696 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c2:	e7fe      	b.n	80001c2 <main+0x42>
 80001c4:	080034c4 	.word	0x080034c4
 80001c8:	080034d0 	.word	0x080034d0
 80001cc:	20000328 	.word	0x20000328

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fc60 	bl	8002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f2:	2301      	movs	r3, #1
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000204:	2302      	movs	r3, #2
 8000206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fd2f 	bl	8000c7c <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000224:	f000 f8a4 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ff9c 	bl	8001180 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024e:	f000 f88f 	bl	8000370 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000262:	4a12      	ldr	r2, [pc, #72]	; (80002ac <MX_USART2_UART_Init+0x50>)
 8000264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800026c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000282:	220c      	movs	r2, #12
 8000284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000292:	4805      	ldr	r0, [pc, #20]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000294:	f001 f90c 	bl	80014b0 <HAL_UART_Init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800029e:	f000 f867 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200002e4 	.word	0x200002e4
 80002ac:	40004400 	.word	0x40004400

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <MX_GPIO_Init+0x90>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_GPIO_Init+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <MX_GPIO_Init+0x94>)
 8000314:	f000 fc80 	bl	8000c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 8000318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000326:	2303      	movs	r3, #3
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_GPIO_Init+0x94>)
 8000332:	f000 faed 	bl	8000910 <HAL_GPIO_Init>

}
 8000336:	bf00      	nop
 8000338:	3720      	adds	r7, #32
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40011000 	.word	0x40011000

08000348 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 8000350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000354:	4805      	ldr	r0, [pc, #20]	; (800036c <StartDefaultTask+0x24>)
 8000356:	f000 fc77 	bl	8000c48 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800035a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035e:	f000 f9cf 	bl	8000700 <HAL_Delay>
    osDelay(1);
 8000362:	2001      	movs	r0, #1
 8000364:	f001 f9ea 	bl	800173c <osDelay>
	  HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 8000368:	e7f2      	b.n	8000350 <StartDefaultTask+0x8>
 800036a:	bf00      	nop
 800036c:	40011000 	.word	0x40011000

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>
	...

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <HAL_MspInit+0x4c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <HAL_MspInit+0x4c>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <HAL_MspInit+0x4c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <HAL_MspInit+0x4c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <HAL_MspInit+0x4c>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <HAL_MspInit+0x4c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	210f      	movs	r1, #15
 80003b6:	f06f 0001 	mvn.w	r0, #1
 80003ba:	f000 fa80 	bl	80008be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a1b      	ldr	r2, [pc, #108]	; (8000454 <HAL_UART_MspInit+0x88>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d12f      	bne.n	800044c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <HAL_UART_MspInit+0x8c>)
 80003ee:	69db      	ldr	r3, [r3, #28]
 80003f0:	4a19      	ldr	r2, [pc, #100]	; (8000458 <HAL_UART_MspInit+0x8c>)
 80003f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f6:	61d3      	str	r3, [r2, #28]
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <HAL_UART_MspInit+0x8c>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <HAL_UART_MspInit+0x8c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a13      	ldr	r2, [pc, #76]	; (8000458 <HAL_UART_MspInit+0x8c>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <HAL_UART_MspInit+0x8c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800041c:	2304      	movs	r3, #4
 800041e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000420:	2302      	movs	r3, #2
 8000422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000424:	2303      	movs	r3, #3
 8000426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	480b      	ldr	r0, [pc, #44]	; (800045c <HAL_UART_MspInit+0x90>)
 8000430:	f000 fa6e 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000434:	2308      	movs	r3, #8
 8000436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <HAL_UART_MspInit+0x90>)
 8000448:	f000 fa62 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40004400 	.word	0x40004400
 8000458:	40021000 	.word	0x40021000
 800045c:	40010800 	.word	0x40010800

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800048e:	f000 f91b 	bl	80006c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000492:	f001 fed1 	bl	8002238 <xTaskGetSchedulerState>
 8000496:	4603      	mov	r3, r0
 8000498:	2b01      	cmp	r3, #1
 800049a:	d001      	beq.n	80004a0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800049c:	f002 f8bc 	bl	8002618 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e00a      	b.n	80004cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004b6:	f3af 8000 	nop.w
 80004ba:	4601      	mov	r1, r0
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	60ba      	str	r2, [r7, #8]
 80004c2:	b2ca      	uxtb	r2, r1
 80004c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dbf0      	blt.n	80004b6 <_read+0x12>
  }

  return len;
 80004d4:	687b      	ldr	r3, [r7, #4]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b086      	sub	sp, #24
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	e009      	b.n	8000504 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	60ba      	str	r2, [r7, #8]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf1      	blt.n	80004f0 <_write+0x12>
  }
  return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_close>:

int _close(int file)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800053c:	605a      	str	r2, [r3, #4]
  return 0;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <_isatty>:

int _isatty(int file)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <_sbrk+0x5c>)
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <_sbrk+0x60>)
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <_sbrk+0x64>)
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <_sbrk+0x68>)
 8000598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d207      	bcs.n	80005b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a8:	f002 fa52 	bl	8002a50 <__errno>
 80005ac:	4603      	mov	r3, r0
 80005ae:	220c      	movs	r2, #12
 80005b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	e009      	b.n	80005cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <_sbrk+0x64>)
 80005c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ca:	68fb      	ldr	r3, [r7, #12]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20005000 	.word	0x20005000
 80005d8:	00000400 	.word	0x00000400
 80005dc:	2000032c 	.word	0x2000032c
 80005e0:	20001198 	.word	0x20001198

080005e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005f2:	490d      	ldr	r1, [pc, #52]	; (8000628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000616:	f7ff ffe5 	bl	80005e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800061a:	f002 fa1f 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff fdaf 	bl	8000180 <main>
  bx lr
 8000622:	4770      	bx	lr
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800062c:	08003588 	.word	0x08003588
  ldr r2, =_sbss
 8000630:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000634:	20001194 	.word	0x20001194

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>
	...

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_Init+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_Init+0x28>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f92b 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000652:	200f      	movs	r0, #15
 8000654:	f000 f808 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f7ff fe90 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_InitTick+0x54>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_InitTick+0x58>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000682:	fbb2 f3f3 	udiv	r3, r2, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f935 	bl	80008f6 <HAL_SYSTICK_Config>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e00e      	b.n	80006b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d80a      	bhi.n	80006b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069c:	2200      	movs	r2, #0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 f90b 	bl	80008be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_InitTick+0x5c>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e000      	b.n	80006b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_IncTick+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <HAL_IncTick+0x20>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000330 	.word	0x20000330

080006ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <HAL_GetTick+0x10>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000330 	.word	0x20000330

08000700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000708:	f7ff fff0 	bl	80006ec <HAL_GetTick>
 800070c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000718:	d005      	beq.n	8000726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_Delay+0x44>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000726:	bf00      	nop
 8000728:	f7ff ffe0 	bl	80006ec <HAL_GetTick>
 800072c:	4602      	mov	r2, r0
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	429a      	cmp	r2, r3
 8000736:	d8f7      	bhi.n	8000728 <HAL_Delay+0x28>
  {
  }
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008

08000748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	60d3      	str	r3, [r2, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	f003 0307 	and.w	r3, r3, #7
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff90 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff49 	bl	8000748 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff5e 	bl	8000790 <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff90 	bl	8000800 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff5f 	bl	80007ac <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ffb0 	bl	8000864 <SysTick_Config>
 8000904:	4603      	mov	r3, r0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000922:	e169      	b.n	8000bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000924:	2201      	movs	r2, #1
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	429a      	cmp	r2, r3
 800093e:	f040 8158 	bne.w	8000bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	4a9a      	ldr	r2, [pc, #616]	; (8000bb0 <HAL_GPIO_Init+0x2a0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d05e      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 800094c:	4a98      	ldr	r2, [pc, #608]	; (8000bb0 <HAL_GPIO_Init+0x2a0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d875      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000952:	4a98      	ldr	r2, [pc, #608]	; (8000bb4 <HAL_GPIO_Init+0x2a4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d058      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000958:	4a96      	ldr	r2, [pc, #600]	; (8000bb4 <HAL_GPIO_Init+0x2a4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d86f      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800095e:	4a96      	ldr	r2, [pc, #600]	; (8000bb8 <HAL_GPIO_Init+0x2a8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d052      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000964:	4a94      	ldr	r2, [pc, #592]	; (8000bb8 <HAL_GPIO_Init+0x2a8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d869      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800096a:	4a94      	ldr	r2, [pc, #592]	; (8000bbc <HAL_GPIO_Init+0x2ac>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d04c      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000970:	4a92      	ldr	r2, [pc, #584]	; (8000bbc <HAL_GPIO_Init+0x2ac>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d863      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000976:	4a92      	ldr	r2, [pc, #584]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d046      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 800097c:	4a90      	ldr	r2, [pc, #576]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d85d      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000982:	2b12      	cmp	r3, #18
 8000984:	d82a      	bhi.n	80009dc <HAL_GPIO_Init+0xcc>
 8000986:	2b12      	cmp	r3, #18
 8000988:	d859      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <HAL_GPIO_Init+0x80>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	08000a0b 	.word	0x08000a0b
 8000994:	080009e5 	.word	0x080009e5
 8000998:	080009f7 	.word	0x080009f7
 800099c:	08000a39 	.word	0x08000a39
 80009a0:	08000a3f 	.word	0x08000a3f
 80009a4:	08000a3f 	.word	0x08000a3f
 80009a8:	08000a3f 	.word	0x08000a3f
 80009ac:	08000a3f 	.word	0x08000a3f
 80009b0:	08000a3f 	.word	0x08000a3f
 80009b4:	08000a3f 	.word	0x08000a3f
 80009b8:	08000a3f 	.word	0x08000a3f
 80009bc:	08000a3f 	.word	0x08000a3f
 80009c0:	08000a3f 	.word	0x08000a3f
 80009c4:	08000a3f 	.word	0x08000a3f
 80009c8:	08000a3f 	.word	0x08000a3f
 80009cc:	08000a3f 	.word	0x08000a3f
 80009d0:	08000a3f 	.word	0x08000a3f
 80009d4:	080009ed 	.word	0x080009ed
 80009d8:	08000a01 	.word	0x08000a01
 80009dc:	4a79      	ldr	r2, [pc, #484]	; (8000bc4 <HAL_GPIO_Init+0x2b4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009e2:	e02c      	b.n	8000a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e029      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	3304      	adds	r3, #4
 80009f2:	623b      	str	r3, [r7, #32]
          break;
 80009f4:	e024      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	3308      	adds	r3, #8
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e01f      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	330c      	adds	r3, #12
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e01a      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d102      	bne.n	8000a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a12:	2304      	movs	r3, #4
 8000a14:	623b      	str	r3, [r7, #32]
          break;
 8000a16:	e013      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d105      	bne.n	8000a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a20:	2308      	movs	r3, #8
 8000a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	611a      	str	r2, [r3, #16]
          break;
 8000a2a:	e009      	b.n	8000a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69fa      	ldr	r2, [r7, #28]
 8000a34:	615a      	str	r2, [r3, #20]
          break;
 8000a36:	e003      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          break;
 8000a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2bff      	cmp	r3, #255	; 0xff
 8000a44:	d801      	bhi.n	8000a4a <HAL_GPIO_Init+0x13a>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	e001      	b.n	8000a4e <HAL_GPIO_Init+0x13e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	2bff      	cmp	r3, #255	; 0xff
 8000a54:	d802      	bhi.n	8000a5c <HAL_GPIO_Init+0x14c>
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x152>
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	3b08      	subs	r3, #8
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	210f      	movs	r1, #15
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	401a      	ands	r2, r3
 8000a74:	6a39      	ldr	r1, [r7, #32]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 80b1 	beq.w	8000bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a90:	4b4d      	ldr	r3, [pc, #308]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a4c      	ldr	r2, [pc, #304]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa8:	4a48      	ldr	r2, [pc, #288]	; (8000bcc <HAL_GPIO_Init+0x2bc>)
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	220f      	movs	r2, #15
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a40      	ldr	r2, [pc, #256]	; (8000bd0 <HAL_GPIO_Init+0x2c0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d013      	beq.n	8000afc <HAL_GPIO_Init+0x1ec>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3f      	ldr	r2, [pc, #252]	; (8000bd4 <HAL_GPIO_Init+0x2c4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d00d      	beq.n	8000af8 <HAL_GPIO_Init+0x1e8>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3e      	ldr	r2, [pc, #248]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d007      	beq.n	8000af4 <HAL_GPIO_Init+0x1e4>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a3d      	ldr	r2, [pc, #244]	; (8000bdc <HAL_GPIO_Init+0x2cc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d101      	bne.n	8000af0 <HAL_GPIO_Init+0x1e0>
 8000aec:	2303      	movs	r3, #3
 8000aee:	e006      	b.n	8000afe <HAL_GPIO_Init+0x1ee>
 8000af0:	2304      	movs	r3, #4
 8000af2:	e004      	b.n	8000afe <HAL_GPIO_Init+0x1ee>
 8000af4:	2302      	movs	r3, #2
 8000af6:	e002      	b.n	8000afe <HAL_GPIO_Init+0x1ee>
 8000af8:	2301      	movs	r3, #1
 8000afa:	e000      	b.n	8000afe <HAL_GPIO_Init+0x1ee>
 8000afc:	2300      	movs	r3, #0
 8000afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b00:	f002 0203 	and.w	r2, r2, #3
 8000b04:	0092      	lsls	r2, r2, #2
 8000b06:	4093      	lsls	r3, r2
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b0e:	492f      	ldr	r1, [pc, #188]	; (8000bcc <HAL_GPIO_Init+0x2bc>)
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	3302      	adds	r3, #2
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	492c      	ldr	r1, [pc, #176]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	600b      	str	r3, [r1, #0]
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	4928      	ldr	r1, [pc, #160]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	4922      	ldr	r1, [pc, #136]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
 8000b5c:	e006      	b.n	8000b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	491e      	ldr	r1, [pc, #120]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	4918      	ldr	r1, [pc, #96]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	608b      	str	r3, [r1, #8]
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4914      	ldr	r1, [pc, #80]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d021      	beq.n	8000be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	490e      	ldr	r1, [pc, #56]	; (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60cb      	str	r3, [r1, #12]
 8000bac:	e021      	b.n	8000bf2 <HAL_GPIO_Init+0x2e2>
 8000bae:	bf00      	nop
 8000bb0:	10320000 	.word	0x10320000
 8000bb4:	10310000 	.word	0x10310000
 8000bb8:	10220000 	.word	0x10220000
 8000bbc:	10210000 	.word	0x10210000
 8000bc0:	10120000 	.word	0x10120000
 8000bc4:	10110000 	.word	0x10110000
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	40011000 	.word	0x40011000
 8000bdc:	40011400 	.word	0x40011400
 8000be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_GPIO_Init+0x304>)
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4909      	ldr	r1, [pc, #36]	; (8000c14 <HAL_GPIO_Init+0x304>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f47f ae8e 	bne.w	8000924 <HAL_GPIO_Init+0x14>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	372c      	adds	r7, #44	; 0x2c
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40010400 	.word	0x40010400

08000c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
 8000c24:	4613      	mov	r3, r2
 8000c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c28:	787b      	ldrb	r3, [r7, #1]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c34:	e003      	b.n	8000c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	041a      	lsls	r2, r3, #16
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	611a      	str	r2, [r3, #16]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	041a      	lsls	r2, r3, #16
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43d9      	mvns	r1, r3
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	400b      	ands	r3, r1
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	611a      	str	r2, [r3, #16]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
	...

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e272      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8087 	beq.w	8000daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c9c:	4b92      	ldr	r3, [pc, #584]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d00c      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca8:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 030c 	and.w	r3, r3, #12
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d112      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
 8000cb4:	4b8c      	ldr	r3, [pc, #560]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc0:	d10b      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc2:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d06c      	beq.n	8000da8 <HAL_RCC_OscConfig+0x12c>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d168      	bne.n	8000da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e24c      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce2:	d106      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x76>
 8000ce4:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a7f      	ldr	r2, [pc, #508]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e02e      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x98>
 8000cfa:	4b7b      	ldr	r3, [pc, #492]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a7a      	ldr	r2, [pc, #488]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	4b78      	ldr	r3, [pc, #480]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a77      	ldr	r2, [pc, #476]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e01d      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0xbc>
 8000d1e:	4b72      	ldr	r3, [pc, #456]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a71      	ldr	r2, [pc, #452]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b6f      	ldr	r3, [pc, #444]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a6e      	ldr	r2, [pc, #440]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00b      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000d38:	4b6b      	ldr	r3, [pc, #428]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a6a      	ldr	r2, [pc, #424]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b68      	ldr	r3, [pc, #416]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a67      	ldr	r2, [pc, #412]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d013      	beq.n	8000d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fcc8 	bl	80006ec <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fcc4 	bl	80006ec <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b64      	cmp	r3, #100	; 0x64
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e200      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	4b5d      	ldr	r3, [pc, #372]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f0      	beq.n	8000d60 <HAL_RCC_OscConfig+0xe4>
 8000d7e:	e014      	b.n	8000daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d80:	f7ff fcb4 	bl	80006ec <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d88:	f7ff fcb0 	bl	80006ec <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b64      	cmp	r3, #100	; 0x64
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e1ec      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9a:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f0      	bne.n	8000d88 <HAL_RCC_OscConfig+0x10c>
 8000da6:	e000      	b.n	8000daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d063      	beq.n	8000e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000db6:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00b      	beq.n	8000dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dc2:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 030c 	and.w	r3, r3, #12
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d11c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x18c>
 8000dce:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d116      	bne.n	8000e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d005      	beq.n	8000df2 <HAL_RCC_OscConfig+0x176>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d001      	beq.n	8000df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e1c0      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4939      	ldr	r1, [pc, #228]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e06:	e03a      	b.n	8000e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d020      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e10:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff fc69 	bl	80006ec <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1e:	f7ff fc65 	bl	80006ec <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e1a1      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0f0      	beq.n	8000e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4927      	ldr	r1, [pc, #156]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
 8000e50:	e015      	b.n	8000e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc48 	bl	80006ec <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e60:	f7ff fc44 	bl	80006ec <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e180      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d03a      	beq.n	8000f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d019      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e98:	f7ff fc28 	bl	80006ec <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fc24 	bl	80006ec <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e160      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 fad8 	bl	8001474 <RCC_Delay>
 8000ec4:	e01c      	b.n	8000f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fc0e 	bl	80006ec <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed2:	e00f      	b.n	8000ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fc0a 	bl	80006ec <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d908      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e146      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	42420000 	.word	0x42420000
 8000ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef4:	4b92      	ldr	r3, [pc, #584]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e9      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a6 	beq.w	800105a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f12:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10d      	bne.n	8000f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a87      	ldr	r2, [pc, #540]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b85      	ldr	r3, [pc, #532]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3a:	4b82      	ldr	r3, [pc, #520]	; (8001144 <HAL_RCC_OscConfig+0x4c8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f46:	4b7f      	ldr	r3, [pc, #508]	; (8001144 <HAL_RCC_OscConfig+0x4c8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7e      	ldr	r2, [pc, #504]	; (8001144 <HAL_RCC_OscConfig+0x4c8>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fbcb 	bl	80006ec <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5a:	f7ff fbc7 	bl	80006ec <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b64      	cmp	r3, #100	; 0x64
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e103      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6c:	4b75      	ldr	r3, [pc, #468]	; (8001144 <HAL_RCC_OscConfig+0x4c8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d106      	bne.n	8000f8e <HAL_RCC_OscConfig+0x312>
 8000f80:	4b6f      	ldr	r3, [pc, #444]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a6e      	ldr	r2, [pc, #440]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	e02d      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x334>
 8000f96:	4b6a      	ldr	r3, [pc, #424]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a69      	ldr	r2, [pc, #420]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	4b67      	ldr	r3, [pc, #412]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a66      	ldr	r2, [pc, #408]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	f023 0304 	bic.w	r3, r3, #4
 8000fac:	6213      	str	r3, [r2, #32]
 8000fae:	e01c      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x356>
 8000fb8:	4b61      	ldr	r3, [pc, #388]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a60      	ldr	r2, [pc, #384]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6213      	str	r3, [r2, #32]
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	e00b      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000fd2:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a5a      	ldr	r2, [pc, #360]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a57      	ldr	r2, [pc, #348]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d015      	beq.n	800101e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fb7b 	bl	80006ec <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff8:	e00a      	b.n	8001010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fb77 	bl	80006ec <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	f241 3288 	movw	r2, #5000	; 0x1388
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e0b1      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0ee      	beq.n	8000ffa <HAL_RCC_OscConfig+0x37e>
 800101c:	e014      	b.n	8001048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101e:	f7ff fb65 	bl	80006ec <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001024:	e00a      	b.n	800103c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001026:	f7ff fb61 	bl	80006ec <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	f241 3288 	movw	r2, #5000	; 0x1388
 8001034:	4293      	cmp	r3, r2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e09b      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103c:	4b40      	ldr	r3, [pc, #256]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1ee      	bne.n	8001026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d105      	bne.n	800105a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a3b      	ldr	r2, [pc, #236]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8087 	beq.w	8001172 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b08      	cmp	r3, #8
 800106e:	d061      	beq.n	8001134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d146      	bne.n	8001106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001078:	4b33      	ldr	r3, [pc, #204]	; (8001148 <HAL_RCC_OscConfig+0x4cc>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107e:	f7ff fb35 	bl	80006ec <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001086:	f7ff fb31 	bl	80006ec <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e06d      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ac:	d108      	bne.n	80010c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4921      	ldr	r1, [pc, #132]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a19      	ldr	r1, [r3, #32]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	430b      	orrs	r3, r1
 80010d2:	491b      	ldr	r1, [pc, #108]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_RCC_OscConfig+0x4cc>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fb05 	bl	80006ec <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fb01 	bl	80006ec <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e03d      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46a>
 8001104:	e035      	b.n	8001172 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_RCC_OscConfig+0x4cc>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff faee 	bl	80006ec <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff faea 	bl	80006ec <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e026      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x498>
 8001132:	e01e      	b.n	8001172 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d107      	bne.n	800114c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e019      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
 8001140:	40021000 	.word	0x40021000
 8001144:	40007000 	.word	0x40007000
 8001148:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_OscConfig+0x500>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	429a      	cmp	r2, r3
 800115e:	d106      	bne.n	800116e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	429a      	cmp	r2, r3
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000

08001180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0d0      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001194:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d910      	bls.n	80011c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 0207 	bic.w	r2, r3, #7
 80011aa:	4965      	ldr	r1, [pc, #404]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0b8      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011dc:	4b59      	ldr	r3, [pc, #356]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a58      	ldr	r2, [pc, #352]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001200:	4b50      	ldr	r3, [pc, #320]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	494d      	ldr	r1, [pc, #308]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d040      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d115      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e07f      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e073      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e06b      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f023 0203 	bic.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4936      	ldr	r1, [pc, #216]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001270:	f7ff fa3c 	bl	80006ec <HAL_GetTick>
 8001274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	e00a      	b.n	800128e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001278:	f7ff fa38 	bl	80006ec <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e053      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 020c 	and.w	r2, r3, #12
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	429a      	cmp	r2, r3
 800129e:	d1eb      	bne.n	8001278 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d210      	bcs.n	80012d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 0207 	bic.w	r2, r3, #7
 80012b6:	4922      	ldr	r1, [pc, #136]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e032      	b.n	8001336 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4916      	ldr	r1, [pc, #88]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800130e:	f000 f821 	bl	8001354 <HAL_RCC_GetSysClockFreq>
 8001312:	4602      	mov	r2, r0
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	490a      	ldr	r1, [pc, #40]	; (8001348 <HAL_RCC_ClockConfig+0x1c8>)
 8001320:	5ccb      	ldrb	r3, [r1, r3]
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1cc>)
 8001328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_RCC_ClockConfig+0x1d0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f99a 	bl	8000668 <HAL_InitTick>

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000
 8001344:	40021000 	.word	0x40021000
 8001348:	08003504 	.word	0x08003504
 800134c:	20000000 	.word	0x20000000
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001354:	b490      	push	{r4, r7}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_RCC_GetSysClockFreq+0xac>)
 800135c:	1d3c      	adds	r4, r7, #4
 800135e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001364:	f240 2301 	movw	r3, #513	; 0x201
 8001368:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b04      	cmp	r3, #4
 800138c:	d002      	beq.n	8001394 <HAL_RCC_GetSysClockFreq+0x40>
 800138e:	2b08      	cmp	r3, #8
 8001390:	d003      	beq.n	800139a <HAL_RCC_GetSysClockFreq+0x46>
 8001392:	e02b      	b.n	80013ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001396:	623b      	str	r3, [r7, #32]
      break;
 8001398:	e02b      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	0c9b      	lsrs	r3, r3, #18
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3328      	adds	r3, #40	; 0x28
 80013a4:	443b      	add	r3, r7
 80013a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d012      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	0c5b      	lsrs	r3, r3, #17
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	3328      	adds	r3, #40	; 0x28
 80013c2:	443b      	add	r3, r7
 80013c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	e004      	b.n	80013e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	623b      	str	r3, [r7, #32]
      break;
 80013ea:	e002      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ee:	623b      	str	r3, [r7, #32]
      break;
 80013f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013f2:	6a3b      	ldr	r3, [r7, #32]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc90      	pop	{r4, r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	080034ec 	.word	0x080034ec
 8001404:	40021000 	.word	0x40021000
 8001408:	007a1200 	.word	0x007a1200
 800140c:	003d0900 	.word	0x003d0900

08001410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <HAL_RCC_GetHCLKFreq+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001428:	f7ff fff2 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	4903      	ldr	r1, [pc, #12]	; (8001448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	08003514 	.word	0x08003514

0800144c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001450:	f7ff ffde 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0adb      	lsrs	r3, r3, #11
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	08003514 	.word	0x08003514

08001474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <RCC_Delay+0x34>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <RCC_Delay+0x38>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0a5b      	lsrs	r3, r3, #9
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001490:	bf00      	nop
  }
  while (Delay --);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	60fa      	str	r2, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f9      	bne.n	8001490 <RCC_Delay+0x1c>
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000000 	.word	0x20000000
 80014ac:	10624dd3 	.word	0x10624dd3

080014b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e03f      	b.n	8001542 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7fe ff78 	bl	80003cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2224      	movs	r2, #36	; 0x24
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f829 	bl	800154c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2220      	movs	r2, #32
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2220      	movs	r2, #32
 800153c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001586:	f023 030c 	bic.w	r3, r3, #12
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	430b      	orrs	r3, r1
 8001592:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <UART_SetConfig+0x114>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d103      	bne.n	80015bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015b4:	f7ff ff4a 	bl	800144c <HAL_RCC_GetPCLK2Freq>
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	e002      	b.n	80015c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80015bc:	f7ff ff32 	bl	8001424 <HAL_RCC_GetPCLK1Freq>
 80015c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009a      	lsls	r2, r3, #2
 80015cc:	441a      	add	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <UART_SetConfig+0x118>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	0119      	lsls	r1, r3, #4
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009a      	lsls	r2, r3, #2
 80015ec:	441a      	add	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <UART_SetConfig+0x118>)
 80015fa:	fba3 0302 	umull	r0, r3, r3, r2
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2064      	movs	r0, #100	; 0x64
 8001602:	fb00 f303 	mul.w	r3, r0, r3
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	3332      	adds	r3, #50	; 0x32
 800160c:	4a15      	ldr	r2, [pc, #84]	; (8001664 <UART_SetConfig+0x118>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001618:	4419      	add	r1, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009a      	lsls	r2, r3, #2
 8001624:	441a      	add	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <UART_SetConfig+0x118>)
 8001632:	fba3 0302 	umull	r0, r3, r3, r2
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2064      	movs	r0, #100	; 0x64
 800163a:	fb00 f303 	mul.w	r3, r0, r3
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	3332      	adds	r3, #50	; 0x32
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <UART_SetConfig+0x118>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	f003 020f 	and.w	r2, r3, #15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	440a      	add	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40013800 	.word	0x40013800
 8001664:	51eb851f 	.word	0x51eb851f

08001668 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	2b84      	cmp	r3, #132	; 0x84
 800167c:	d005      	beq.n	800168a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800167e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4413      	add	r3, r2
 8001686:	3303      	adds	r3, #3
 8001688:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800169a:	f000 fad1 	bl	8001c40 <vTaskStartScheduler>
  
  return osOK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d020      	beq.n	80016f8 <osThreadCreate+0x54>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01c      	beq.n	80016f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685c      	ldr	r4, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681d      	ldr	r5, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691e      	ldr	r6, [r3, #16]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffc9 	bl	8001668 <makeFreeRtosPriority>
 80016d6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016e0:	9202      	str	r2, [sp, #8]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	9100      	str	r1, [sp, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	4632      	mov	r2, r6
 80016ea:	4629      	mov	r1, r5
 80016ec:	4620      	mov	r0, r4
 80016ee:	f000 f8e8 	bl	80018c2 <xTaskCreateStatic>
 80016f2:	4603      	mov	r3, r0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e01c      	b.n	8001732 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685c      	ldr	r4, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001704:	b29e      	uxth	r6, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ffab 	bl	8001668 <makeFreeRtosPriority>
 8001712:	4602      	mov	r2, r0
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	9200      	str	r2, [sp, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4632      	mov	r2, r6
 8001720:	4629      	mov	r1, r5
 8001722:	4620      	mov	r0, r4
 8001724:	f000 f929 	bl	800197a <xTaskCreate>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800173c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <osDelay+0x16>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	e000      	b.n	8001754 <osDelay+0x18>
 8001752:	2301      	movs	r3, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa3f 	bl	8001bd8 <vTaskDelay>
  
  return osOK;
 800175a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f103 0208 	add.w	r2, r3, #8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f103 0208 	add.w	r2, r3, #8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f103 0208 	add.w	r2, r3, #8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001816:	d103      	bne.n	8001820 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e00c      	b.n	800183a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3308      	adds	r3, #8
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e002      	b.n	800182e <vListInsert+0x2e>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d2f6      	bcs.n	8001828 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6892      	ldr	r2, [r2, #8]
 8001886:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6852      	ldr	r2, [r2, #4]
 8001890:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d103      	bne.n	80018a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	1e5a      	subs	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b08e      	sub	sp, #56	; 0x38
 80018c6:	af04      	add	r7, sp, #16
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80018d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10a      	bne.n	80018ec <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80018d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018da:	f383 8811 	msr	BASEPRI, r3
 80018de:	f3bf 8f6f 	isb	sy
 80018e2:	f3bf 8f4f 	dsb	sy
 80018e6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80018e8:	bf00      	nop
 80018ea:	e7fe      	b.n	80018ea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80018ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10a      	bne.n	8001908 <xTaskCreateStatic+0x46>
	__asm volatile
 80018f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f6:	f383 8811 	msr	BASEPRI, r3
 80018fa:	f3bf 8f6f 	isb	sy
 80018fe:	f3bf 8f4f 	dsb	sy
 8001902:	61fb      	str	r3, [r7, #28]
}
 8001904:	bf00      	nop
 8001906:	e7fe      	b.n	8001906 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001908:	2354      	movs	r3, #84	; 0x54
 800190a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	2b54      	cmp	r3, #84	; 0x54
 8001910:	d00a      	beq.n	8001928 <xTaskCreateStatic+0x66>
	__asm volatile
 8001912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	61bb      	str	r3, [r7, #24]
}
 8001924:	bf00      	nop
 8001926:	e7fe      	b.n	8001926 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01e      	beq.n	800196c <xTaskCreateStatic+0xaa>
 800192e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800193c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	2202      	movs	r2, #2
 8001942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001946:	2300      	movs	r3, #0
 8001948:	9303      	str	r3, [sp, #12]
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f850 	bl	8001a04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001966:	f000 f8cd 	bl	8001b04 <prvAddNewTaskToReadyList>
 800196a:	e001      	b.n	8001970 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001970:	697b      	ldr	r3, [r7, #20]
	}
 8001972:	4618      	mov	r0, r3
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800197a:	b580      	push	{r7, lr}
 800197c:	b08c      	sub	sp, #48	; 0x30
 800197e:	af04      	add	r7, sp, #16
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fe86 	bl	80026a0 <pvPortMalloc>
 8001994:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800199c:	2054      	movs	r0, #84	; 0x54
 800199e:	f000 fe7f 	bl	80026a0 <pvPortMalloc>
 80019a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
 80019b0:	e005      	b.n	80019be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f000 ff38 	bl	8002828 <vPortFree>
 80019b8:	e001      	b.n	80019be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d017      	beq.n	80019f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019cc:	88fa      	ldrh	r2, [r7, #6]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9303      	str	r3, [sp, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f80e 	bl	8001a04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80019e8:	69f8      	ldr	r0, [r7, #28]
 80019ea:	f000 f88b 	bl	8001b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	e002      	b.n	80019fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80019fa:	69bb      	ldr	r3, [r7, #24]
	}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f023 0307 	bic.w	r3, r3, #7
 8001a2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <prvInitialiseNewTask+0x48>
	__asm volatile
 8001a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3a:	f383 8811 	msr	BASEPRI, r3
 8001a3e:	f3bf 8f6f 	isb	sy
 8001a42:	f3bf 8f4f 	dsb	sy
 8001a46:	617b      	str	r3, [r7, #20]
}
 8001a48:	bf00      	nop
 8001a4a:	e7fe      	b.n	8001a4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	e012      	b.n	8001a78 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4413      	add	r3, r2
 8001a58:	7819      	ldrb	r1, [r3, #0]
 8001a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	3334      	adds	r3, #52	; 0x34
 8001a62:	460a      	mov	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	d9e9      	bls.n	8001a52 <prvInitialiseNewTask+0x4e>
 8001a7e:	e000      	b.n	8001a82 <prvInitialiseNewTask+0x7e>
		{
			break;
 8001a80:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	2b13      	cmp	r3, #19
 8001a8e:	d901      	bls.n	8001a94 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a90:	2313      	movs	r3, #19
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fe79 	bl	80017a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	3318      	adds	r3, #24
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe74 	bl	80017a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001abe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	f1c3 0214 	rsb	r2, r3, #20
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	69b8      	ldr	r0, [r7, #24]
 8001ae4:	f000 fc2c 	bl	8002340 <pxPortInitialiseStack>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001afa:	bf00      	nop
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001b0c:	f000 fd06 	bl	800251c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <prvAddNewTaskToReadyList+0xb8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a29      	ldr	r2, [pc, #164]	; (8001bbc <prvAddNewTaskToReadyList+0xb8>)
 8001b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <prvAddNewTaskToReadyList+0xbc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b22:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <prvAddNewTaskToReadyList+0xbc>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <prvAddNewTaskToReadyList+0xb8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d110      	bne.n	8001b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001b30:	f000 fac0 	bl	80020b4 <prvInitialiseTaskLists>
 8001b34:	e00d      	b.n	8001b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <prvAddNewTaskToReadyList+0xc0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <prvAddNewTaskToReadyList+0xbc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d802      	bhi.n	8001b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <prvAddNewTaskToReadyList+0xbc>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <prvAddNewTaskToReadyList+0xc4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <prvAddNewTaskToReadyList+0xc4>)
 8001b5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	2201      	movs	r2, #1
 8001b62:	409a      	lsls	r2, r3
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <prvAddNewTaskToReadyList+0xc8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <prvAddNewTaskToReadyList+0xc8>)
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <prvAddNewTaskToReadyList+0xcc>)
 8001b7c:	441a      	add	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3304      	adds	r3, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7ff fe18 	bl	80017ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001b8a:	f000 fcf7 	bl	800257c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <prvAddNewTaskToReadyList+0xc0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00e      	beq.n	8001bb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <prvAddNewTaskToReadyList+0xbc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <prvAddNewTaskToReadyList+0xd0>)
 8001ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000538 	.word	0x20000538
 8001bc0:	20000334 	.word	0x20000334
 8001bc4:	20000544 	.word	0x20000544
 8001bc8:	20000554 	.word	0x20000554
 8001bcc:	20000540 	.word	0x20000540
 8001bd0:	20000338 	.word	0x20000338
 8001bd4:	e000ed04 	.word	0xe000ed04

08001bd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d017      	beq.n	8001c1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <vTaskDelay+0x60>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <vTaskDelay+0x30>
	__asm volatile
 8001bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf6:	f383 8811 	msr	BASEPRI, r3
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	60bb      	str	r3, [r7, #8]
}
 8001c04:	bf00      	nop
 8001c06:	e7fe      	b.n	8001c06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001c08:	f000 f87a 	bl	8001d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fb30 	bl	8002274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001c14:	f000 f882 	bl	8001d1c <xTaskResumeAll>
 8001c18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <vTaskDelay+0x64>)
 8001c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000560 	.word	0x20000560
 8001c3c:	e000ed04 	.word	0xe000ed04

08001c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001c4e:	463a      	mov	r2, r7
 8001c50:	1d39      	adds	r1, r7, #4
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fa7a 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	9202      	str	r2, [sp, #8]
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2300      	movs	r3, #0
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	491e      	ldr	r1, [pc, #120]	; (8001ce8 <vTaskStartScheduler+0xa8>)
 8001c70:	481e      	ldr	r0, [pc, #120]	; (8001cec <vTaskStartScheduler+0xac>)
 8001c72:	f7ff fe26 	bl	80018c2 <xTaskCreateStatic>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <vTaskStartScheduler+0xb0>)
 8001c7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <vTaskStartScheduler+0xb0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001c84:	2301      	movs	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e001      	b.n	8001c8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d116      	bne.n	8001cc2 <vTaskStartScheduler+0x82>
	__asm volatile
 8001c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c98:	f383 8811 	msr	BASEPRI, r3
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	f3bf 8f4f 	dsb	sy
 8001ca4:	613b      	str	r3, [r7, #16]
}
 8001ca6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <vTaskStartScheduler+0xb4>)
 8001caa:	f04f 32ff 	mov.w	r2, #4294967295
 8001cae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <vTaskStartScheduler+0xb8>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <vTaskStartScheduler+0xbc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001cbc:	f000 fbbc 	bl	8002438 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001cc0:	e00e      	b.n	8001ce0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d10a      	bne.n	8001ce0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	60fb      	str	r3, [r7, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	e7fe      	b.n	8001cde <vTaskStartScheduler+0x9e>
}
 8001ce0:	bf00      	nop
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	080034fc 	.word	0x080034fc
 8001cec:	08002085 	.word	0x08002085
 8001cf0:	2000055c 	.word	0x2000055c
 8001cf4:	20000558 	.word	0x20000558
 8001cf8:	20000544 	.word	0x20000544
 8001cfc:	2000053c 	.word	0x2000053c

08001d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <vTaskSuspendAll+0x18>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <vTaskSuspendAll+0x18>)
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000560 	.word	0x20000560

08001d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <xTaskResumeAll+0x114>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10a      	bne.n	8001d48 <xTaskResumeAll+0x2c>
	__asm volatile
 8001d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d36:	f383 8811 	msr	BASEPRI, r3
 8001d3a:	f3bf 8f6f 	isb	sy
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	603b      	str	r3, [r7, #0]
}
 8001d44:	bf00      	nop
 8001d46:	e7fe      	b.n	8001d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d48:	f000 fbe8 	bl	800251c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d4c:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <xTaskResumeAll+0x114>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <xTaskResumeAll+0x114>)
 8001d54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <xTaskResumeAll+0x114>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d161      	bne.n	8001e22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d5e:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <xTaskResumeAll+0x118>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d05d      	beq.n	8001e22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d66:	e02e      	b.n	8001dc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <xTaskResumeAll+0x11c>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3318      	adds	r3, #24
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fd7b 	bl	8001870 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fd76 	bl	8001870 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2201      	movs	r2, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <xTaskResumeAll+0x120>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <xTaskResumeAll+0x120>)
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <xTaskResumeAll+0x124>)
 8001da4:	441a      	add	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3304      	adds	r3, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7ff fd04 	bl	80017ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <xTaskResumeAll+0x128>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d302      	bcc.n	8001dc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <xTaskResumeAll+0x12c>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <xTaskResumeAll+0x11c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1cc      	bne.n	8001d68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001dd4:	f000 fa0c 	bl	80021f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <xTaskResumeAll+0x130>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001de4:	f000 f836 	bl	8001e54 <xTaskIncrementTick>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <xTaskResumeAll+0x12c>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f1      	bne.n	8001de4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <xTaskResumeAll+0x130>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <xTaskResumeAll+0x12c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <xTaskResumeAll+0x134>)
 8001e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e22:	f000 fbab 	bl	800257c <vPortExitCritical>

	return xAlreadyYielded;
 8001e26:	68bb      	ldr	r3, [r7, #8]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000560 	.word	0x20000560
 8001e34:	20000538 	.word	0x20000538
 8001e38:	200004f8 	.word	0x200004f8
 8001e3c:	20000540 	.word	0x20000540
 8001e40:	20000338 	.word	0x20000338
 8001e44:	20000334 	.word	0x20000334
 8001e48:	2000054c 	.word	0x2000054c
 8001e4c:	20000548 	.word	0x20000548
 8001e50:	e000ed04 	.word	0xe000ed04

08001e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <xTaskIncrementTick+0x150>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 808d 	bne.w	8001f82 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <xTaskIncrementTick+0x154>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001e70:	4a4d      	ldr	r2, [pc, #308]	; (8001fa8 <xTaskIncrementTick+0x154>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d120      	bne.n	8001ebe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <xTaskIncrementTick+0x158>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <xTaskIncrementTick+0x48>
	__asm volatile
 8001e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8a:	f383 8811 	msr	BASEPRI, r3
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f3bf 8f4f 	dsb	sy
 8001e96:	603b      	str	r3, [r7, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	e7fe      	b.n	8001e9a <xTaskIncrementTick+0x46>
 8001e9c:	4b43      	ldr	r3, [pc, #268]	; (8001fac <xTaskIncrementTick+0x158>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <xTaskIncrementTick+0x15c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a41      	ldr	r2, [pc, #260]	; (8001fac <xTaskIncrementTick+0x158>)
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4a41      	ldr	r2, [pc, #260]	; (8001fb0 <xTaskIncrementTick+0x15c>)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <xTaskIncrementTick+0x160>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <xTaskIncrementTick+0x160>)
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	f000 f999 	bl	80021f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <xTaskIncrementTick+0x164>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d34d      	bcc.n	8001f64 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ec8:	4b38      	ldr	r3, [pc, #224]	; (8001fac <xTaskIncrementTick+0x158>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <xTaskIncrementTick+0x82>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <xTaskIncrementTick+0x84>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <xTaskIncrementTick+0x164>)
 8001ede:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee2:	601a      	str	r2, [r3, #0]
					break;
 8001ee4:	e03e      	b.n	8001f64 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <xTaskIncrementTick+0x158>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d203      	bcs.n	8001f06 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001efe:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <xTaskIncrementTick+0x164>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6013      	str	r3, [r2, #0]
						break;
 8001f04:	e02e      	b.n	8001f64 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fcb0 	bl	8001870 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fca7 	bl	8001870 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	2201      	movs	r2, #1
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <xTaskIncrementTick+0x168>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <xTaskIncrementTick+0x168>)
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <xTaskIncrementTick+0x16c>)
 8001f42:	441a      	add	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3304      	adds	r3, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7ff fc35 	bl	80017ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <xTaskIncrementTick+0x170>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3b4      	bcc.n	8001ec8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f62:	e7b1      	b.n	8001ec8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <xTaskIncrementTick+0x170>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6a:	4915      	ldr	r1, [pc, #84]	; (8001fc0 <xTaskIncrementTick+0x16c>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d907      	bls.n	8001f8c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e004      	b.n	8001f8c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <xTaskIncrementTick+0x174>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	4a0f      	ldr	r2, [pc, #60]	; (8001fc8 <xTaskIncrementTick+0x174>)
 8001f8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <xTaskIncrementTick+0x178>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001f98:	697b      	ldr	r3, [r7, #20]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000560 	.word	0x20000560
 8001fa8:	2000053c 	.word	0x2000053c
 8001fac:	200004f0 	.word	0x200004f0
 8001fb0:	200004f4 	.word	0x200004f4
 8001fb4:	20000550 	.word	0x20000550
 8001fb8:	20000558 	.word	0x20000558
 8001fbc:	20000540 	.word	0x20000540
 8001fc0:	20000338 	.word	0x20000338
 8001fc4:	20000334 	.word	0x20000334
 8001fc8:	20000548 	.word	0x20000548
 8001fcc:	2000054c 	.word	0x2000054c

08001fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <vTaskSwitchContext+0xa0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <vTaskSwitchContext+0xa4>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001fe4:	e03f      	b.n	8002066 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <vTaskSwitchContext+0xa4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <vTaskSwitchContext+0xa8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
 8001ffc:	f1c3 031f 	rsb	r3, r3, #31
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	491e      	ldr	r1, [pc, #120]	; (800207c <vTaskSwitchContext+0xac>)
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201a:	f383 8811 	msr	BASEPRI, r3
 800201e:	f3bf 8f6f 	isb	sy
 8002022:	f3bf 8f4f 	dsb	sy
 8002026:	607b      	str	r3, [r7, #4]
}
 8002028:	bf00      	nop
 800202a:	e7fe      	b.n	800202a <vTaskSwitchContext+0x5a>
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4a11      	ldr	r2, [pc, #68]	; (800207c <vTaskSwitchContext+0xac>)
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	3308      	adds	r3, #8
 800204e:	429a      	cmp	r2, r3
 8002050:	d104      	bne.n	800205c <vTaskSwitchContext+0x8c>
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <vTaskSwitchContext+0xb0>)
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	20000560 	.word	0x20000560
 8002074:	2000054c 	.word	0x2000054c
 8002078:	20000540 	.word	0x20000540
 800207c:	20000338 	.word	0x20000338
 8002080:	20000334 	.word	0x20000334

08002084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800208c:	f000 f852 	bl	8002134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <prvIdleTask+0x28>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d9f9      	bls.n	800208c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <prvIdleTask+0x2c>)
 800209a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80020a8:	e7f0      	b.n	800208c <prvIdleTask+0x8>
 80020aa:	bf00      	nop
 80020ac:	20000338 	.word	0x20000338
 80020b0:	e000ed04 	.word	0xe000ed04

080020b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	e00c      	b.n	80020da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <prvInitialiseTaskLists+0x60>)
 80020cc:	4413      	add	r3, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fb48 	bl	8001764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3301      	adds	r3, #1
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b13      	cmp	r3, #19
 80020de:	d9ef      	bls.n	80020c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <prvInitialiseTaskLists+0x64>)
 80020e2:	f7ff fb3f 	bl	8001764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80020e6:	480d      	ldr	r0, [pc, #52]	; (800211c <prvInitialiseTaskLists+0x68>)
 80020e8:	f7ff fb3c 	bl	8001764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80020ec:	480c      	ldr	r0, [pc, #48]	; (8002120 <prvInitialiseTaskLists+0x6c>)
 80020ee:	f7ff fb39 	bl	8001764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80020f2:	480c      	ldr	r0, [pc, #48]	; (8002124 <prvInitialiseTaskLists+0x70>)
 80020f4:	f7ff fb36 	bl	8001764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <prvInitialiseTaskLists+0x74>)
 80020fa:	f7ff fb33 	bl	8001764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <prvInitialiseTaskLists+0x78>)
 8002100:	4a05      	ldr	r2, [pc, #20]	; (8002118 <prvInitialiseTaskLists+0x64>)
 8002102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <prvInitialiseTaskLists+0x7c>)
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <prvInitialiseTaskLists+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000338 	.word	0x20000338
 8002118:	200004c8 	.word	0x200004c8
 800211c:	200004dc 	.word	0x200004dc
 8002120:	200004f8 	.word	0x200004f8
 8002124:	2000050c 	.word	0x2000050c
 8002128:	20000524 	.word	0x20000524
 800212c:	200004f0 	.word	0x200004f0
 8002130:	200004f4 	.word	0x200004f4

08002134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800213a:	e019      	b.n	8002170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800213c:	f000 f9ee 	bl	800251c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <prvCheckTasksWaitingTermination+0x50>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fb8f 	bl	8001870 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <prvCheckTasksWaitingTermination+0x54>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3b01      	subs	r3, #1
 8002158:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <prvCheckTasksWaitingTermination+0x54>)
 800215a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <prvCheckTasksWaitingTermination+0x58>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3b01      	subs	r3, #1
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <prvCheckTasksWaitingTermination+0x58>)
 8002164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002166:	f000 fa09 	bl	800257c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f810 	bl	8002190 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <prvCheckTasksWaitingTermination+0x58>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e1      	bne.n	800213c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000050c 	.word	0x2000050c
 8002188:	20000538 	.word	0x20000538
 800218c:	20000520 	.word	0x20000520

08002190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d108      	bne.n	80021b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fb3e 	bl	8002828 <vPortFree>
				vPortFree( pxTCB );
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fb3b 	bl	8002828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80021b2:	e018      	b.n	80021e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d103      	bne.n	80021c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fb32 	bl	8002828 <vPortFree>
	}
 80021c4:	e00f      	b.n	80021e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d00a      	beq.n	80021e6 <prvDeleteTCB+0x56>
	__asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	60fb      	str	r3, [r7, #12]
}
 80021e2:	bf00      	nop
 80021e4:	e7fe      	b.n	80021e4 <prvDeleteTCB+0x54>
	}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <prvResetNextTaskUnblockTime+0x40>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <prvResetNextTaskUnblockTime+0x14>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <prvResetNextTaskUnblockTime+0x16>
 8002204:	2300      	movs	r3, #0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <prvResetNextTaskUnblockTime+0x44>)
 800220c:	f04f 32ff 	mov.w	r2, #4294967295
 8002210:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002212:	e008      	b.n	8002226 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <prvResetNextTaskUnblockTime+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <prvResetNextTaskUnblockTime+0x44>)
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	200004f0 	.word	0x200004f0
 8002234:	20000558 	.word	0x20000558

08002238 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <xTaskGetSchedulerState+0x34>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002246:	2301      	movs	r3, #1
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	e008      	b.n	800225e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <xTaskGetSchedulerState+0x38>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002254:	2302      	movs	r3, #2
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	e001      	b.n	800225e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800225e:	687b      	ldr	r3, [r7, #4]
	}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000544 	.word	0x20000544
 8002270:	20000560 	.word	0x20000560

08002274 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3304      	adds	r3, #4
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff faf0 	bl	8001870 <uxListRemove>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	2201      	movs	r2, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <prvAddCurrentTaskToDelayedList+0xb8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4013      	ands	r3, r2
 80022aa:	4a20      	ldr	r2, [pc, #128]	; (800232c <prvAddCurrentTaskToDelayedList+0xb8>)
 80022ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d10a      	bne.n	80022cc <prvAddCurrentTaskToDelayedList+0x58>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3304      	adds	r3, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	481a      	ldr	r0, [pc, #104]	; (8002330 <prvAddCurrentTaskToDelayedList+0xbc>)
 80022c6:	f7ff fa78 	bl	80017ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022ca:	e026      	b.n	800231a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022d4:	4b14      	ldr	r3, [pc, #80]	; (8002328 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d209      	bcs.n	80022f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <prvAddCurrentTaskToDelayedList+0xc0>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3304      	adds	r3, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4610      	mov	r0, r2
 80022f2:	f7ff fa85 	bl	8001800 <vListInsert>
}
 80022f6:	e010      	b.n	800231a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <prvAddCurrentTaskToDelayedList+0xc4>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3304      	adds	r3, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f7ff fa7b 	bl	8001800 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <prvAddCurrentTaskToDelayedList+0xc8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	d202      	bcs.n	800231a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002314:	4a09      	ldr	r2, [pc, #36]	; (800233c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6013      	str	r3, [r2, #0]
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000053c 	.word	0x2000053c
 8002328:	20000334 	.word	0x20000334
 800232c:	20000540 	.word	0x20000540
 8002330:	20000524 	.word	0x20000524
 8002334:	200004f4 	.word	0x200004f4
 8002338:	200004f0 	.word	0x200004f0
 800233c:	20000558 	.word	0x20000558

08002340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3b04      	subs	r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b04      	subs	r3, #4
 800235e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f023 0201 	bic.w	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3b04      	subs	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002370:	4a08      	ldr	r2, [pc, #32]	; (8002394 <pxPortInitialiseStack+0x54>)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b14      	subs	r3, #20
 800237a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b20      	subs	r3, #32
 8002386:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002388:	68fb      	ldr	r3, [r7, #12]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	08002399 	.word	0x08002399

08002398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <prvTaskExitError+0x54>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d00a      	beq.n	80023c2 <prvTaskExitError+0x2a>
	__asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	60fb      	str	r3, [r7, #12]
}
 80023be:	bf00      	nop
 80023c0:	e7fe      	b.n	80023c0 <prvTaskExitError+0x28>
	__asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	60bb      	str	r3, [r7, #8]
}
 80023d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80023d6:	bf00      	nop
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0fc      	beq.n	80023d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <pxCurrentTCBConst2>)
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	6808      	ldr	r0, [r1, #0]
 80023f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023fa:	f380 8809 	msr	PSP, r0
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f04f 0000 	mov.w	r0, #0
 8002406:	f380 8811 	msr	BASEPRI, r0
 800240a:	f04e 0e0d 	orr.w	lr, lr, #13
 800240e:	4770      	bx	lr

08002410 <pxCurrentTCBConst2>:
 8002410:	20000334 	.word	0x20000334
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop

08002418 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002418:	4806      	ldr	r0, [pc, #24]	; (8002434 <prvPortStartFirstTask+0x1c>)
 800241a:	6800      	ldr	r0, [r0, #0]
 800241c:	6800      	ldr	r0, [r0, #0]
 800241e:	f380 8808 	msr	MSP, r0
 8002422:	b662      	cpsie	i
 8002424:	b661      	cpsie	f
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	df00      	svc	0
 8002430:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002432:	bf00      	nop
 8002434:	e000ed08 	.word	0xe000ed08

08002438 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800243e:	4b32      	ldr	r3, [pc, #200]	; (8002508 <xPortStartScheduler+0xd0>)
 8002440:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <xPortStartScheduler+0xd4>)
 8002464:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <xPortStartScheduler+0xd8>)
 8002468:	2207      	movs	r2, #7
 800246a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800246c:	e009      	b.n	8002482 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <xPortStartScheduler+0xd8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3b01      	subs	r3, #1
 8002474:	4a26      	ldr	r2, [pc, #152]	; (8002510 <xPortStartScheduler+0xd8>)
 8002476:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b80      	cmp	r3, #128	; 0x80
 800248c:	d0ef      	beq.n	800246e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <xPortStartScheduler+0xd8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	d00a      	beq.n	80024b0 <xPortStartScheduler+0x78>
	__asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	60bb      	str	r3, [r7, #8]
}
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <xPortStartScheduler+0xd8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	4a16      	ldr	r2, [pc, #88]	; (8002510 <xPortStartScheduler+0xd8>)
 80024b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <xPortStartScheduler+0xd8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024c2:	4a13      	ldr	r2, [pc, #76]	; (8002510 <xPortStartScheduler+0xd8>)
 80024c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <xPortStartScheduler+0xdc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a10      	ldr	r2, [pc, #64]	; (8002514 <xPortStartScheduler+0xdc>)
 80024d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <xPortStartScheduler+0xdc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <xPortStartScheduler+0xdc>)
 80024e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80024e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80024e6:	f000 f8b9 	bl	800265c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <xPortStartScheduler+0xe0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80024f0:	f7ff ff92 	bl	8002418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80024f4:	f7ff fd6c 	bl	8001fd0 <vTaskSwitchContext>
	prvTaskExitError();
 80024f8:	f7ff ff4e 	bl	8002398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e400 	.word	0xe000e400
 800250c:	20000564 	.word	0x20000564
 8002510:	20000568 	.word	0x20000568
 8002514:	e000ed20 	.word	0xe000ed20
 8002518:	2000000c 	.word	0x2000000c

0800251c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
	__asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	607b      	str	r3, [r7, #4]
}
 8002534:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <vPortEnterCritical+0x58>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <vPortEnterCritical+0x58>)
 800253e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <vPortEnterCritical+0x58>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d10f      	bne.n	8002568 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <vPortEnterCritical+0x5c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <vPortEnterCritical+0x4c>
	__asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	603b      	str	r3, [r7, #0]
}
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <vPortEnterCritical+0x4a>
	}
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	2000000c 	.word	0x2000000c
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <vPortExitCritical+0x4c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <vPortExitCritical+0x24>
	__asm volatile
 800258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	607b      	str	r3, [r7, #4]
}
 800259c:	bf00      	nop
 800259e:	e7fe      	b.n	800259e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <vPortExitCritical+0x4c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <vPortExitCritical+0x4c>)
 80025a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <vPortExitCritical+0x4c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <vPortExitCritical+0x42>
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80025bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	2000000c 	.word	0x2000000c
 80025cc:	00000000 	.word	0x00000000

080025d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80025d0:	f3ef 8009 	mrs	r0, PSP
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <pxCurrentTCBConst>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80025e0:	6010      	str	r0, [r2, #0]
 80025e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80025e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80025ea:	f380 8811 	msr	BASEPRI, r0
 80025ee:	f7ff fcef 	bl	8001fd0 <vTaskSwitchContext>
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f380 8811 	msr	BASEPRI, r0
 80025fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	6808      	ldr	r0, [r1, #0]
 8002602:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002606:	f380 8809 	msr	PSP, r0
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	4770      	bx	lr

08002610 <pxCurrentTCBConst>:
 8002610:	20000334 	.word	0x20000334
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop

08002618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
	__asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	607b      	str	r3, [r7, #4]
}
 8002630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002632:	f7ff fc0f 	bl	8001e54 <xTaskIncrementTick>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <xPortSysTickHandler+0x40>)
 800263e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f383 8811 	msr	BASEPRI, r3
}
 800264e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	e000ed04 	.word	0xe000ed04

0800265c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <vPortSetupTimerInterrupt+0x30>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <vPortSetupTimerInterrupt+0x34>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <vPortSetupTimerInterrupt+0x38>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a09      	ldr	r2, [pc, #36]	; (8002698 <vPortSetupTimerInterrupt+0x3c>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	099b      	lsrs	r3, r3, #6
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <vPortSetupTimerInterrupt+0x40>)
 800267a:	3b01      	subs	r3, #1
 800267c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <vPortSetupTimerInterrupt+0x30>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	e000e010 	.word	0xe000e010
 8002690:	e000e018 	.word	0xe000e018
 8002694:	20000000 	.word	0x20000000
 8002698:	10624dd3 	.word	0x10624dd3
 800269c:	e000e014 	.word	0xe000e014

080026a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80026ac:	f7ff fb28 	bl	8001d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80026b0:	4b58      	ldr	r3, [pc, #352]	; (8002814 <pvPortMalloc+0x174>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80026b8:	f000 f910 	bl	80028dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80026bc:	4b56      	ldr	r3, [pc, #344]	; (8002818 <pvPortMalloc+0x178>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 808e 	bne.w	80027e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01d      	beq.n	800270c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80026d0:	2208      	movs	r2, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d014      	beq.n	800270c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f023 0307 	bic.w	r3, r3, #7
 80026e8:	3308      	adds	r3, #8
 80026ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <pvPortMalloc+0x6c>
	__asm volatile
 80026f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	617b      	str	r3, [r7, #20]
}
 8002708:	bf00      	nop
 800270a:	e7fe      	b.n	800270a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d069      	beq.n	80027e6 <pvPortMalloc+0x146>
 8002712:	4b42      	ldr	r3, [pc, #264]	; (800281c <pvPortMalloc+0x17c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d864      	bhi.n	80027e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800271c:	4b40      	ldr	r3, [pc, #256]	; (8002820 <pvPortMalloc+0x180>)
 800271e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <pvPortMalloc+0x180>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002726:	e004      	b.n	8002732 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	d903      	bls.n	8002744 <pvPortMalloc+0xa4>
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f1      	bne.n	8002728 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002744:	4b33      	ldr	r3, [pc, #204]	; (8002814 <pvPortMalloc+0x174>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	429a      	cmp	r2, r3
 800274c:	d04b      	beq.n	80027e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2208      	movs	r2, #8
 8002754:	4413      	add	r3, r2
 8002756:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad2      	subs	r2, r2, r3
 8002768:	2308      	movs	r3, #8
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	429a      	cmp	r2, r3
 800276e:	d91f      	bls.n	80027b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <pvPortMalloc+0xf8>
	__asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	613b      	str	r3, [r7, #16]
}
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80027aa:	69b8      	ldr	r0, [r7, #24]
 80027ac:	f000 f8f8 	bl	80029a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <pvPortMalloc+0x17c>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	4a18      	ldr	r2, [pc, #96]	; (800281c <pvPortMalloc+0x17c>)
 80027bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <pvPortMalloc+0x17c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <pvPortMalloc+0x184>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d203      	bcs.n	80027d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <pvPortMalloc+0x17c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a15      	ldr	r2, [pc, #84]	; (8002824 <pvPortMalloc+0x184>)
 80027d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <pvPortMalloc+0x178>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	431a      	orrs	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80027e6:	f7ff fa99 	bl	8001d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <pvPortMalloc+0x16a>
	__asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	60fb      	str	r3, [r7, #12]
}
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <pvPortMalloc+0x168>
	return pvReturn;
 800280a:	69fb      	ldr	r3, [r7, #28]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20001174 	.word	0x20001174
 8002818:	20001180 	.word	0x20001180
 800281c:	20001178 	.word	0x20001178
 8002820:	2000116c 	.word	0x2000116c
 8002824:	2000117c 	.word	0x2000117c

08002828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d048      	beq.n	80028cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800283a:	2308      	movs	r3, #8
 800283c:	425b      	negs	r3, r3
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4413      	add	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <vPortFree+0xac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <vPortFree+0x44>
	__asm volatile
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	60fb      	str	r3, [r7, #12]
}
 8002868:	bf00      	nop
 800286a:	e7fe      	b.n	800286a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <vPortFree+0x62>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	60bb      	str	r3, [r7, #8]
}
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <vPortFree+0xac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d019      	beq.n	80028cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d115      	bne.n	80028cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <vPortFree+0xac>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	401a      	ands	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80028b0:	f7ff fa26 	bl	8001d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <vPortFree+0xb0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	4a06      	ldr	r2, [pc, #24]	; (80028d8 <vPortFree+0xb0>)
 80028c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80028c2:	6938      	ldr	r0, [r7, #16]
 80028c4:	f000 f86c 	bl	80029a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80028c8:	f7ff fa28 	bl	8001d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20001180 	.word	0x20001180
 80028d8:	20001178 	.word	0x20001178

080028dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80028e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <prvHeapInit+0xac>)
 80028ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3307      	adds	r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0307 	bic.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <prvHeapInit+0xac>)
 800290c:	4413      	add	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002914:	4a1d      	ldr	r2, [pc, #116]	; (800298c <prvHeapInit+0xb0>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <prvHeapInit+0xb0>)
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4413      	add	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002928:	2208      	movs	r2, #8
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0307 	bic.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a15      	ldr	r2, [pc, #84]	; (8002990 <prvHeapInit+0xb4>)
 800293c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <prvHeapInit+0xb4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <prvHeapInit+0xb4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	1ad2      	subs	r2, r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <prvHeapInit+0xb4>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <prvHeapInit+0xb8>)
 800296a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a09      	ldr	r2, [pc, #36]	; (8002998 <prvHeapInit+0xbc>)
 8002972:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <prvHeapInit+0xc0>)
 8002976:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800297a:	601a      	str	r2, [r3, #0]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	2000056c 	.word	0x2000056c
 800298c:	2000116c 	.word	0x2000116c
 8002990:	20001174 	.word	0x20001174
 8002994:	2000117c 	.word	0x2000117c
 8002998:	20001178 	.word	0x20001178
 800299c:	20001180 	.word	0x20001180

080029a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80029a8:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <prvInsertBlockIntoFreeList+0xa8>)
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e002      	b.n	80029b4 <prvInsertBlockIntoFreeList+0x14>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d8f7      	bhi.n	80029ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4413      	add	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d108      	bne.n	80029e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	441a      	add	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	441a      	add	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d118      	bne.n	8002a28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <prvInsertBlockIntoFreeList+0xac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d00d      	beq.n	8002a1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e008      	b.n	8002a30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <prvInsertBlockIntoFreeList+0xac>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e003      	b.n	8002a30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d002      	beq.n	8002a3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	2000116c 	.word	0x2000116c
 8002a4c:	20001174 	.word	0x20001174

08002a50 <__errno>:
 8002a50:	4b01      	ldr	r3, [pc, #4]	; (8002a58 <__errno+0x8>)
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000010 	.word	0x20000010

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2600      	movs	r6, #0
 8002a60:	4d0c      	ldr	r5, [pc, #48]	; (8002a94 <__libc_init_array+0x38>)
 8002a62:	4c0d      	ldr	r4, [pc, #52]	; (8002a98 <__libc_init_array+0x3c>)
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	f000 fd18 	bl	80034a0 <_init>
 8002a70:	2600      	movs	r6, #0
 8002a72:	4d0a      	ldr	r5, [pc, #40]	; (8002a9c <__libc_init_array+0x40>)
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <__libc_init_array+0x44>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08003580 	.word	0x08003580
 8002a98:	08003580 	.word	0x08003580
 8002a9c:	08003580 	.word	0x08003580
 8002aa0:	08003584 	.word	0x08003584

08002aa4 <memset>:
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4402      	add	r2, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d100      	bne.n	8002aae <memset+0xa>
 8002aac:	4770      	bx	lr
 8002aae:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab2:	e7f9      	b.n	8002aa8 <memset+0x4>

08002ab4 <_puts_r>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	460e      	mov	r6, r1
 8002ab8:	4605      	mov	r5, r0
 8002aba:	b118      	cbz	r0, 8002ac4 <_puts_r+0x10>
 8002abc:	6983      	ldr	r3, [r0, #24]
 8002abe:	b90b      	cbnz	r3, 8002ac4 <_puts_r+0x10>
 8002ac0:	f000 fa44 	bl	8002f4c <__sinit>
 8002ac4:	69ab      	ldr	r3, [r5, #24]
 8002ac6:	68ac      	ldr	r4, [r5, #8]
 8002ac8:	b913      	cbnz	r3, 8002ad0 <_puts_r+0x1c>
 8002aca:	4628      	mov	r0, r5
 8002acc:	f000 fa3e 	bl	8002f4c <__sinit>
 8002ad0:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <_puts_r+0xd0>)
 8002ad2:	429c      	cmp	r4, r3
 8002ad4:	d120      	bne.n	8002b18 <_puts_r+0x64>
 8002ad6:	686c      	ldr	r4, [r5, #4]
 8002ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ada:	07db      	lsls	r3, r3, #31
 8002adc:	d405      	bmi.n	8002aea <_puts_r+0x36>
 8002ade:	89a3      	ldrh	r3, [r4, #12]
 8002ae0:	0598      	lsls	r0, r3, #22
 8002ae2:	d402      	bmi.n	8002aea <_puts_r+0x36>
 8002ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ae6:	f000 facf 	bl	8003088 <__retarget_lock_acquire_recursive>
 8002aea:	89a3      	ldrh	r3, [r4, #12]
 8002aec:	0719      	lsls	r1, r3, #28
 8002aee:	d51d      	bpl.n	8002b2c <_puts_r+0x78>
 8002af0:	6923      	ldr	r3, [r4, #16]
 8002af2:	b1db      	cbz	r3, 8002b2c <_puts_r+0x78>
 8002af4:	3e01      	subs	r6, #1
 8002af6:	68a3      	ldr	r3, [r4, #8]
 8002af8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002afc:	3b01      	subs	r3, #1
 8002afe:	60a3      	str	r3, [r4, #8]
 8002b00:	bb39      	cbnz	r1, 8002b52 <_puts_r+0x9e>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	da38      	bge.n	8002b78 <_puts_r+0xc4>
 8002b06:	4622      	mov	r2, r4
 8002b08:	210a      	movs	r1, #10
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f000 f848 	bl	8002ba0 <__swbuf_r>
 8002b10:	3001      	adds	r0, #1
 8002b12:	d011      	beq.n	8002b38 <_puts_r+0x84>
 8002b14:	250a      	movs	r5, #10
 8002b16:	e011      	b.n	8002b3c <_puts_r+0x88>
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <_puts_r+0xd4>)
 8002b1a:	429c      	cmp	r4, r3
 8002b1c:	d101      	bne.n	8002b22 <_puts_r+0x6e>
 8002b1e:	68ac      	ldr	r4, [r5, #8]
 8002b20:	e7da      	b.n	8002ad8 <_puts_r+0x24>
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <_puts_r+0xd8>)
 8002b24:	429c      	cmp	r4, r3
 8002b26:	bf08      	it	eq
 8002b28:	68ec      	ldreq	r4, [r5, #12]
 8002b2a:	e7d5      	b.n	8002ad8 <_puts_r+0x24>
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f000 f888 	bl	8002c44 <__swsetup_r>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d0dd      	beq.n	8002af4 <_puts_r+0x40>
 8002b38:	f04f 35ff 	mov.w	r5, #4294967295
 8002b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b3e:	07da      	lsls	r2, r3, #31
 8002b40:	d405      	bmi.n	8002b4e <_puts_r+0x9a>
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	059b      	lsls	r3, r3, #22
 8002b46:	d402      	bmi.n	8002b4e <_puts_r+0x9a>
 8002b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b4a:	f000 fa9e 	bl	800308a <__retarget_lock_release_recursive>
 8002b4e:	4628      	mov	r0, r5
 8002b50:	bd70      	pop	{r4, r5, r6, pc}
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da04      	bge.n	8002b60 <_puts_r+0xac>
 8002b56:	69a2      	ldr	r2, [r4, #24]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	dc06      	bgt.n	8002b6a <_puts_r+0xb6>
 8002b5c:	290a      	cmp	r1, #10
 8002b5e:	d004      	beq.n	8002b6a <_puts_r+0xb6>
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	6022      	str	r2, [r4, #0]
 8002b66:	7019      	strb	r1, [r3, #0]
 8002b68:	e7c5      	b.n	8002af6 <_puts_r+0x42>
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f000 f817 	bl	8002ba0 <__swbuf_r>
 8002b72:	3001      	adds	r0, #1
 8002b74:	d1bf      	bne.n	8002af6 <_puts_r+0x42>
 8002b76:	e7df      	b.n	8002b38 <_puts_r+0x84>
 8002b78:	250a      	movs	r5, #10
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	6022      	str	r2, [r4, #0]
 8002b80:	701d      	strb	r5, [r3, #0]
 8002b82:	e7db      	b.n	8002b3c <_puts_r+0x88>
 8002b84:	08003540 	.word	0x08003540
 8002b88:	08003560 	.word	0x08003560
 8002b8c:	08003520 	.word	0x08003520

08002b90 <puts>:
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <puts+0xc>)
 8002b92:	4601      	mov	r1, r0
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	f7ff bf8d 	b.w	8002ab4 <_puts_r>
 8002b9a:	bf00      	nop
 8002b9c:	20000010 	.word	0x20000010

08002ba0 <__swbuf_r>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	460e      	mov	r6, r1
 8002ba4:	4614      	mov	r4, r2
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	b118      	cbz	r0, 8002bb2 <__swbuf_r+0x12>
 8002baa:	6983      	ldr	r3, [r0, #24]
 8002bac:	b90b      	cbnz	r3, 8002bb2 <__swbuf_r+0x12>
 8002bae:	f000 f9cd 	bl	8002f4c <__sinit>
 8002bb2:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <__swbuf_r+0x98>)
 8002bb4:	429c      	cmp	r4, r3
 8002bb6:	d12b      	bne.n	8002c10 <__swbuf_r+0x70>
 8002bb8:	686c      	ldr	r4, [r5, #4]
 8002bba:	69a3      	ldr	r3, [r4, #24]
 8002bbc:	60a3      	str	r3, [r4, #8]
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	071a      	lsls	r2, r3, #28
 8002bc2:	d52f      	bpl.n	8002c24 <__swbuf_r+0x84>
 8002bc4:	6923      	ldr	r3, [r4, #16]
 8002bc6:	b36b      	cbz	r3, 8002c24 <__swbuf_r+0x84>
 8002bc8:	6923      	ldr	r3, [r4, #16]
 8002bca:	6820      	ldr	r0, [r4, #0]
 8002bcc:	b2f6      	uxtb	r6, r6
 8002bce:	1ac0      	subs	r0, r0, r3
 8002bd0:	6963      	ldr	r3, [r4, #20]
 8002bd2:	4637      	mov	r7, r6
 8002bd4:	4283      	cmp	r3, r0
 8002bd6:	dc04      	bgt.n	8002be2 <__swbuf_r+0x42>
 8002bd8:	4621      	mov	r1, r4
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 f922 	bl	8002e24 <_fflush_r>
 8002be0:	bb30      	cbnz	r0, 8002c30 <__swbuf_r+0x90>
 8002be2:	68a3      	ldr	r3, [r4, #8]
 8002be4:	3001      	adds	r0, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	60a3      	str	r3, [r4, #8]
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	6022      	str	r2, [r4, #0]
 8002bf0:	701e      	strb	r6, [r3, #0]
 8002bf2:	6963      	ldr	r3, [r4, #20]
 8002bf4:	4283      	cmp	r3, r0
 8002bf6:	d004      	beq.n	8002c02 <__swbuf_r+0x62>
 8002bf8:	89a3      	ldrh	r3, [r4, #12]
 8002bfa:	07db      	lsls	r3, r3, #31
 8002bfc:	d506      	bpl.n	8002c0c <__swbuf_r+0x6c>
 8002bfe:	2e0a      	cmp	r6, #10
 8002c00:	d104      	bne.n	8002c0c <__swbuf_r+0x6c>
 8002c02:	4621      	mov	r1, r4
 8002c04:	4628      	mov	r0, r5
 8002c06:	f000 f90d 	bl	8002e24 <_fflush_r>
 8002c0a:	b988      	cbnz	r0, 8002c30 <__swbuf_r+0x90>
 8002c0c:	4638      	mov	r0, r7
 8002c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <__swbuf_r+0x9c>)
 8002c12:	429c      	cmp	r4, r3
 8002c14:	d101      	bne.n	8002c1a <__swbuf_r+0x7a>
 8002c16:	68ac      	ldr	r4, [r5, #8]
 8002c18:	e7cf      	b.n	8002bba <__swbuf_r+0x1a>
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <__swbuf_r+0xa0>)
 8002c1c:	429c      	cmp	r4, r3
 8002c1e:	bf08      	it	eq
 8002c20:	68ec      	ldreq	r4, [r5, #12]
 8002c22:	e7ca      	b.n	8002bba <__swbuf_r+0x1a>
 8002c24:	4621      	mov	r1, r4
 8002c26:	4628      	mov	r0, r5
 8002c28:	f000 f80c 	bl	8002c44 <__swsetup_r>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d0cb      	beq.n	8002bc8 <__swbuf_r+0x28>
 8002c30:	f04f 37ff 	mov.w	r7, #4294967295
 8002c34:	e7ea      	b.n	8002c0c <__swbuf_r+0x6c>
 8002c36:	bf00      	nop
 8002c38:	08003540 	.word	0x08003540
 8002c3c:	08003560 	.word	0x08003560
 8002c40:	08003520 	.word	0x08003520

08002c44 <__swsetup_r>:
 8002c44:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <__swsetup_r+0xcc>)
 8002c46:	b570      	push	{r4, r5, r6, lr}
 8002c48:	681d      	ldr	r5, [r3, #0]
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	b125      	cbz	r5, 8002c5a <__swsetup_r+0x16>
 8002c50:	69ab      	ldr	r3, [r5, #24]
 8002c52:	b913      	cbnz	r3, 8002c5a <__swsetup_r+0x16>
 8002c54:	4628      	mov	r0, r5
 8002c56:	f000 f979 	bl	8002f4c <__sinit>
 8002c5a:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <__swsetup_r+0xd0>)
 8002c5c:	429c      	cmp	r4, r3
 8002c5e:	d10f      	bne.n	8002c80 <__swsetup_r+0x3c>
 8002c60:	686c      	ldr	r4, [r5, #4]
 8002c62:	89a3      	ldrh	r3, [r4, #12]
 8002c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c68:	0719      	lsls	r1, r3, #28
 8002c6a:	d42c      	bmi.n	8002cc6 <__swsetup_r+0x82>
 8002c6c:	06dd      	lsls	r5, r3, #27
 8002c6e:	d411      	bmi.n	8002c94 <__swsetup_r+0x50>
 8002c70:	2309      	movs	r3, #9
 8002c72:	6033      	str	r3, [r6, #0]
 8002c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	81a3      	strh	r3, [r4, #12]
 8002c7e:	e03e      	b.n	8002cfe <__swsetup_r+0xba>
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <__swsetup_r+0xd4>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	d101      	bne.n	8002c8a <__swsetup_r+0x46>
 8002c86:	68ac      	ldr	r4, [r5, #8]
 8002c88:	e7eb      	b.n	8002c62 <__swsetup_r+0x1e>
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <__swsetup_r+0xd8>)
 8002c8c:	429c      	cmp	r4, r3
 8002c8e:	bf08      	it	eq
 8002c90:	68ec      	ldreq	r4, [r5, #12]
 8002c92:	e7e6      	b.n	8002c62 <__swsetup_r+0x1e>
 8002c94:	0758      	lsls	r0, r3, #29
 8002c96:	d512      	bpl.n	8002cbe <__swsetup_r+0x7a>
 8002c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c9a:	b141      	cbz	r1, 8002cae <__swsetup_r+0x6a>
 8002c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ca0:	4299      	cmp	r1, r3
 8002ca2:	d002      	beq.n	8002caa <__swsetup_r+0x66>
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f000 fa57 	bl	8003158 <_free_r>
 8002caa:	2300      	movs	r3, #0
 8002cac:	6363      	str	r3, [r4, #52]	; 0x34
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002cb4:	81a3      	strh	r3, [r4, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	6063      	str	r3, [r4, #4]
 8002cba:	6923      	ldr	r3, [r4, #16]
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	89a3      	ldrh	r3, [r4, #12]
 8002cc0:	f043 0308 	orr.w	r3, r3, #8
 8002cc4:	81a3      	strh	r3, [r4, #12]
 8002cc6:	6923      	ldr	r3, [r4, #16]
 8002cc8:	b94b      	cbnz	r3, 8002cde <__swsetup_r+0x9a>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd4:	d003      	beq.n	8002cde <__swsetup_r+0x9a>
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	4630      	mov	r0, r6
 8002cda:	f000 f9fd 	bl	80030d8 <__smakebuf_r>
 8002cde:	89a0      	ldrh	r0, [r4, #12]
 8002ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ce4:	f010 0301 	ands.w	r3, r0, #1
 8002ce8:	d00a      	beq.n	8002d00 <__swsetup_r+0xbc>
 8002cea:	2300      	movs	r3, #0
 8002cec:	60a3      	str	r3, [r4, #8]
 8002cee:	6963      	ldr	r3, [r4, #20]
 8002cf0:	425b      	negs	r3, r3
 8002cf2:	61a3      	str	r3, [r4, #24]
 8002cf4:	6923      	ldr	r3, [r4, #16]
 8002cf6:	b943      	cbnz	r3, 8002d0a <__swsetup_r+0xc6>
 8002cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cfc:	d1ba      	bne.n	8002c74 <__swsetup_r+0x30>
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	0781      	lsls	r1, r0, #30
 8002d02:	bf58      	it	pl
 8002d04:	6963      	ldrpl	r3, [r4, #20]
 8002d06:	60a3      	str	r3, [r4, #8]
 8002d08:	e7f4      	b.n	8002cf4 <__swsetup_r+0xb0>
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	e7f7      	b.n	8002cfe <__swsetup_r+0xba>
 8002d0e:	bf00      	nop
 8002d10:	20000010 	.word	0x20000010
 8002d14:	08003540 	.word	0x08003540
 8002d18:	08003560 	.word	0x08003560
 8002d1c:	08003520 	.word	0x08003520

08002d20 <__sflush_r>:
 8002d20:	898a      	ldrh	r2, [r1, #12]
 8002d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d24:	4605      	mov	r5, r0
 8002d26:	0710      	lsls	r0, r2, #28
 8002d28:	460c      	mov	r4, r1
 8002d2a:	d457      	bmi.n	8002ddc <__sflush_r+0xbc>
 8002d2c:	684b      	ldr	r3, [r1, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	dc04      	bgt.n	8002d3c <__sflush_r+0x1c>
 8002d32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	dc01      	bgt.n	8002d3c <__sflush_r+0x1c>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d3e:	2e00      	cmp	r6, #0
 8002d40:	d0fa      	beq.n	8002d38 <__sflush_r+0x18>
 8002d42:	2300      	movs	r3, #0
 8002d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d48:	682f      	ldr	r7, [r5, #0]
 8002d4a:	602b      	str	r3, [r5, #0]
 8002d4c:	d032      	beq.n	8002db4 <__sflush_r+0x94>
 8002d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	075a      	lsls	r2, r3, #29
 8002d54:	d505      	bpl.n	8002d62 <__sflush_r+0x42>
 8002d56:	6863      	ldr	r3, [r4, #4]
 8002d58:	1ac0      	subs	r0, r0, r3
 8002d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d5c:	b10b      	cbz	r3, 8002d62 <__sflush_r+0x42>
 8002d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d60:	1ac0      	subs	r0, r0, r3
 8002d62:	2300      	movs	r3, #0
 8002d64:	4602      	mov	r2, r0
 8002d66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d68:	4628      	mov	r0, r5
 8002d6a:	6a21      	ldr	r1, [r4, #32]
 8002d6c:	47b0      	blx	r6
 8002d6e:	1c43      	adds	r3, r0, #1
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	d106      	bne.n	8002d82 <__sflush_r+0x62>
 8002d74:	6829      	ldr	r1, [r5, #0]
 8002d76:	291d      	cmp	r1, #29
 8002d78:	d82c      	bhi.n	8002dd4 <__sflush_r+0xb4>
 8002d7a:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <__sflush_r+0x100>)
 8002d7c:	40ca      	lsrs	r2, r1
 8002d7e:	07d6      	lsls	r6, r2, #31
 8002d80:	d528      	bpl.n	8002dd4 <__sflush_r+0xb4>
 8002d82:	2200      	movs	r2, #0
 8002d84:	6062      	str	r2, [r4, #4]
 8002d86:	6922      	ldr	r2, [r4, #16]
 8002d88:	04d9      	lsls	r1, r3, #19
 8002d8a:	6022      	str	r2, [r4, #0]
 8002d8c:	d504      	bpl.n	8002d98 <__sflush_r+0x78>
 8002d8e:	1c42      	adds	r2, r0, #1
 8002d90:	d101      	bne.n	8002d96 <__sflush_r+0x76>
 8002d92:	682b      	ldr	r3, [r5, #0]
 8002d94:	b903      	cbnz	r3, 8002d98 <__sflush_r+0x78>
 8002d96:	6560      	str	r0, [r4, #84]	; 0x54
 8002d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d9a:	602f      	str	r7, [r5, #0]
 8002d9c:	2900      	cmp	r1, #0
 8002d9e:	d0cb      	beq.n	8002d38 <__sflush_r+0x18>
 8002da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002da4:	4299      	cmp	r1, r3
 8002da6:	d002      	beq.n	8002dae <__sflush_r+0x8e>
 8002da8:	4628      	mov	r0, r5
 8002daa:	f000 f9d5 	bl	8003158 <_free_r>
 8002dae:	2000      	movs	r0, #0
 8002db0:	6360      	str	r0, [r4, #52]	; 0x34
 8002db2:	e7c2      	b.n	8002d3a <__sflush_r+0x1a>
 8002db4:	6a21      	ldr	r1, [r4, #32]
 8002db6:	2301      	movs	r3, #1
 8002db8:	4628      	mov	r0, r5
 8002dba:	47b0      	blx	r6
 8002dbc:	1c41      	adds	r1, r0, #1
 8002dbe:	d1c7      	bne.n	8002d50 <__sflush_r+0x30>
 8002dc0:	682b      	ldr	r3, [r5, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0c4      	beq.n	8002d50 <__sflush_r+0x30>
 8002dc6:	2b1d      	cmp	r3, #29
 8002dc8:	d001      	beq.n	8002dce <__sflush_r+0xae>
 8002dca:	2b16      	cmp	r3, #22
 8002dcc:	d101      	bne.n	8002dd2 <__sflush_r+0xb2>
 8002dce:	602f      	str	r7, [r5, #0]
 8002dd0:	e7b2      	b.n	8002d38 <__sflush_r+0x18>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd8:	81a3      	strh	r3, [r4, #12]
 8002dda:	e7ae      	b.n	8002d3a <__sflush_r+0x1a>
 8002ddc:	690f      	ldr	r7, [r1, #16]
 8002dde:	2f00      	cmp	r7, #0
 8002de0:	d0aa      	beq.n	8002d38 <__sflush_r+0x18>
 8002de2:	0793      	lsls	r3, r2, #30
 8002de4:	bf18      	it	ne
 8002de6:	2300      	movne	r3, #0
 8002de8:	680e      	ldr	r6, [r1, #0]
 8002dea:	bf08      	it	eq
 8002dec:	694b      	ldreq	r3, [r1, #20]
 8002dee:	1bf6      	subs	r6, r6, r7
 8002df0:	600f      	str	r7, [r1, #0]
 8002df2:	608b      	str	r3, [r1, #8]
 8002df4:	2e00      	cmp	r6, #0
 8002df6:	dd9f      	ble.n	8002d38 <__sflush_r+0x18>
 8002df8:	4633      	mov	r3, r6
 8002dfa:	463a      	mov	r2, r7
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	6a21      	ldr	r1, [r4, #32]
 8002e00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002e04:	47e0      	blx	ip
 8002e06:	2800      	cmp	r0, #0
 8002e08:	dc06      	bgt.n	8002e18 <__sflush_r+0xf8>
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e14:	81a3      	strh	r3, [r4, #12]
 8002e16:	e790      	b.n	8002d3a <__sflush_r+0x1a>
 8002e18:	4407      	add	r7, r0
 8002e1a:	1a36      	subs	r6, r6, r0
 8002e1c:	e7ea      	b.n	8002df4 <__sflush_r+0xd4>
 8002e1e:	bf00      	nop
 8002e20:	20400001 	.word	0x20400001

08002e24 <_fflush_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	690b      	ldr	r3, [r1, #16]
 8002e28:	4605      	mov	r5, r0
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	b913      	cbnz	r3, 8002e34 <_fflush_r+0x10>
 8002e2e:	2500      	movs	r5, #0
 8002e30:	4628      	mov	r0, r5
 8002e32:	bd38      	pop	{r3, r4, r5, pc}
 8002e34:	b118      	cbz	r0, 8002e3e <_fflush_r+0x1a>
 8002e36:	6983      	ldr	r3, [r0, #24]
 8002e38:	b90b      	cbnz	r3, 8002e3e <_fflush_r+0x1a>
 8002e3a:	f000 f887 	bl	8002f4c <__sinit>
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <_fflush_r+0x6c>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	d11b      	bne.n	8002e7c <_fflush_r+0x58>
 8002e44:	686c      	ldr	r4, [r5, #4]
 8002e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ef      	beq.n	8002e2e <_fflush_r+0xa>
 8002e4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e50:	07d0      	lsls	r0, r2, #31
 8002e52:	d404      	bmi.n	8002e5e <_fflush_r+0x3a>
 8002e54:	0599      	lsls	r1, r3, #22
 8002e56:	d402      	bmi.n	8002e5e <_fflush_r+0x3a>
 8002e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e5a:	f000 f915 	bl	8003088 <__retarget_lock_acquire_recursive>
 8002e5e:	4628      	mov	r0, r5
 8002e60:	4621      	mov	r1, r4
 8002e62:	f7ff ff5d 	bl	8002d20 <__sflush_r>
 8002e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e68:	4605      	mov	r5, r0
 8002e6a:	07da      	lsls	r2, r3, #31
 8002e6c:	d4e0      	bmi.n	8002e30 <_fflush_r+0xc>
 8002e6e:	89a3      	ldrh	r3, [r4, #12]
 8002e70:	059b      	lsls	r3, r3, #22
 8002e72:	d4dd      	bmi.n	8002e30 <_fflush_r+0xc>
 8002e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e76:	f000 f908 	bl	800308a <__retarget_lock_release_recursive>
 8002e7a:	e7d9      	b.n	8002e30 <_fflush_r+0xc>
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <_fflush_r+0x70>)
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	d101      	bne.n	8002e86 <_fflush_r+0x62>
 8002e82:	68ac      	ldr	r4, [r5, #8]
 8002e84:	e7df      	b.n	8002e46 <_fflush_r+0x22>
 8002e86:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <_fflush_r+0x74>)
 8002e88:	429c      	cmp	r4, r3
 8002e8a:	bf08      	it	eq
 8002e8c:	68ec      	ldreq	r4, [r5, #12]
 8002e8e:	e7da      	b.n	8002e46 <_fflush_r+0x22>
 8002e90:	08003540 	.word	0x08003540
 8002e94:	08003560 	.word	0x08003560
 8002e98:	08003520 	.word	0x08003520

08002e9c <std>:
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eaa:	6083      	str	r3, [r0, #8]
 8002eac:	8181      	strh	r1, [r0, #12]
 8002eae:	6643      	str	r3, [r0, #100]	; 0x64
 8002eb0:	81c2      	strh	r2, [r0, #14]
 8002eb2:	6183      	str	r3, [r0, #24]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	305c      	adds	r0, #92	; 0x5c
 8002eba:	f7ff fdf3 	bl	8002aa4 <memset>
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <std+0x38>)
 8002ec0:	6224      	str	r4, [r4, #32]
 8002ec2:	6263      	str	r3, [r4, #36]	; 0x24
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <std+0x3c>)
 8002ec6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <std+0x40>)
 8002eca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <std+0x44>)
 8002ece:	6323      	str	r3, [r4, #48]	; 0x30
 8002ed0:	bd10      	pop	{r4, pc}
 8002ed2:	bf00      	nop
 8002ed4:	08003331 	.word	0x08003331
 8002ed8:	08003353 	.word	0x08003353
 8002edc:	0800338b 	.word	0x0800338b
 8002ee0:	080033af 	.word	0x080033af

08002ee4 <_cleanup_r>:
 8002ee4:	4901      	ldr	r1, [pc, #4]	; (8002eec <_cleanup_r+0x8>)
 8002ee6:	f000 b8af 	b.w	8003048 <_fwalk_reent>
 8002eea:	bf00      	nop
 8002eec:	08002e25 	.word	0x08002e25

08002ef0 <__sfmoreglue>:
 8002ef0:	2268      	movs	r2, #104	; 0x68
 8002ef2:	b570      	push	{r4, r5, r6, lr}
 8002ef4:	1e4d      	subs	r5, r1, #1
 8002ef6:	4355      	muls	r5, r2
 8002ef8:	460e      	mov	r6, r1
 8002efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002efe:	f000 f993 	bl	8003228 <_malloc_r>
 8002f02:	4604      	mov	r4, r0
 8002f04:	b140      	cbz	r0, 8002f18 <__sfmoreglue+0x28>
 8002f06:	2100      	movs	r1, #0
 8002f08:	e9c0 1600 	strd	r1, r6, [r0]
 8002f0c:	300c      	adds	r0, #12
 8002f0e:	60a0      	str	r0, [r4, #8]
 8002f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f14:	f7ff fdc6 	bl	8002aa4 <memset>
 8002f18:	4620      	mov	r0, r4
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}

08002f1c <__sfp_lock_acquire>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <__sfp_lock_acquire+0x8>)
 8002f1e:	f000 b8b3 	b.w	8003088 <__retarget_lock_acquire_recursive>
 8002f22:	bf00      	nop
 8002f24:	20001185 	.word	0x20001185

08002f28 <__sfp_lock_release>:
 8002f28:	4801      	ldr	r0, [pc, #4]	; (8002f30 <__sfp_lock_release+0x8>)
 8002f2a:	f000 b8ae 	b.w	800308a <__retarget_lock_release_recursive>
 8002f2e:	bf00      	nop
 8002f30:	20001185 	.word	0x20001185

08002f34 <__sinit_lock_acquire>:
 8002f34:	4801      	ldr	r0, [pc, #4]	; (8002f3c <__sinit_lock_acquire+0x8>)
 8002f36:	f000 b8a7 	b.w	8003088 <__retarget_lock_acquire_recursive>
 8002f3a:	bf00      	nop
 8002f3c:	20001186 	.word	0x20001186

08002f40 <__sinit_lock_release>:
 8002f40:	4801      	ldr	r0, [pc, #4]	; (8002f48 <__sinit_lock_release+0x8>)
 8002f42:	f000 b8a2 	b.w	800308a <__retarget_lock_release_recursive>
 8002f46:	bf00      	nop
 8002f48:	20001186 	.word	0x20001186

08002f4c <__sinit>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	4604      	mov	r4, r0
 8002f50:	f7ff fff0 	bl	8002f34 <__sinit_lock_acquire>
 8002f54:	69a3      	ldr	r3, [r4, #24]
 8002f56:	b11b      	cbz	r3, 8002f60 <__sinit+0x14>
 8002f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f5c:	f7ff bff0 	b.w	8002f40 <__sinit_lock_release>
 8002f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f64:	6523      	str	r3, [r4, #80]	; 0x50
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <__sinit+0x68>)
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <__sinit+0x6c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f6e:	42a3      	cmp	r3, r4
 8002f70:	bf08      	it	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	4620      	mov	r0, r4
 8002f76:	bf08      	it	eq
 8002f78:	61a3      	streq	r3, [r4, #24]
 8002f7a:	f000 f81f 	bl	8002fbc <__sfp>
 8002f7e:	6060      	str	r0, [r4, #4]
 8002f80:	4620      	mov	r0, r4
 8002f82:	f000 f81b 	bl	8002fbc <__sfp>
 8002f86:	60a0      	str	r0, [r4, #8]
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f000 f817 	bl	8002fbc <__sfp>
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2104      	movs	r1, #4
 8002f92:	60e0      	str	r0, [r4, #12]
 8002f94:	6860      	ldr	r0, [r4, #4]
 8002f96:	f7ff ff81 	bl	8002e9c <std>
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2109      	movs	r1, #9
 8002f9e:	68a0      	ldr	r0, [r4, #8]
 8002fa0:	f7ff ff7c 	bl	8002e9c <std>
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	2112      	movs	r1, #18
 8002fa8:	68e0      	ldr	r0, [r4, #12]
 8002faa:	f7ff ff77 	bl	8002e9c <std>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61a3      	str	r3, [r4, #24]
 8002fb2:	e7d1      	b.n	8002f58 <__sinit+0xc>
 8002fb4:	0800351c 	.word	0x0800351c
 8002fb8:	08002ee5 	.word	0x08002ee5

08002fbc <__sfp>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	4607      	mov	r7, r0
 8002fc0:	f7ff ffac 	bl	8002f1c <__sfp_lock_acquire>
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <__sfp+0x84>)
 8002fc6:	681e      	ldr	r6, [r3, #0]
 8002fc8:	69b3      	ldr	r3, [r6, #24]
 8002fca:	b913      	cbnz	r3, 8002fd2 <__sfp+0x16>
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f7ff ffbd 	bl	8002f4c <__sinit>
 8002fd2:	3648      	adds	r6, #72	; 0x48
 8002fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	d503      	bpl.n	8002fe4 <__sfp+0x28>
 8002fdc:	6833      	ldr	r3, [r6, #0]
 8002fde:	b30b      	cbz	r3, 8003024 <__sfp+0x68>
 8002fe0:	6836      	ldr	r6, [r6, #0]
 8002fe2:	e7f7      	b.n	8002fd4 <__sfp+0x18>
 8002fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fe8:	b9d5      	cbnz	r5, 8003020 <__sfp+0x64>
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <__sfp+0x88>)
 8002fec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ff0:	60e3      	str	r3, [r4, #12]
 8002ff2:	6665      	str	r5, [r4, #100]	; 0x64
 8002ff4:	f000 f847 	bl	8003086 <__retarget_lock_init_recursive>
 8002ff8:	f7ff ff96 	bl	8002f28 <__sfp_lock_release>
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	4629      	mov	r1, r5
 8003000:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003004:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003008:	6025      	str	r5, [r4, #0]
 800300a:	61a5      	str	r5, [r4, #24]
 800300c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003010:	f7ff fd48 	bl	8002aa4 <memset>
 8003014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800301c:	4620      	mov	r0, r4
 800301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003020:	3468      	adds	r4, #104	; 0x68
 8003022:	e7d9      	b.n	8002fd8 <__sfp+0x1c>
 8003024:	2104      	movs	r1, #4
 8003026:	4638      	mov	r0, r7
 8003028:	f7ff ff62 	bl	8002ef0 <__sfmoreglue>
 800302c:	4604      	mov	r4, r0
 800302e:	6030      	str	r0, [r6, #0]
 8003030:	2800      	cmp	r0, #0
 8003032:	d1d5      	bne.n	8002fe0 <__sfp+0x24>
 8003034:	f7ff ff78 	bl	8002f28 <__sfp_lock_release>
 8003038:	230c      	movs	r3, #12
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	e7ee      	b.n	800301c <__sfp+0x60>
 800303e:	bf00      	nop
 8003040:	0800351c 	.word	0x0800351c
 8003044:	ffff0001 	.word	0xffff0001

08003048 <_fwalk_reent>:
 8003048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800304c:	4606      	mov	r6, r0
 800304e:	4688      	mov	r8, r1
 8003050:	2700      	movs	r7, #0
 8003052:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800305a:	f1b9 0901 	subs.w	r9, r9, #1
 800305e:	d505      	bpl.n	800306c <_fwalk_reent+0x24>
 8003060:	6824      	ldr	r4, [r4, #0]
 8003062:	2c00      	cmp	r4, #0
 8003064:	d1f7      	bne.n	8003056 <_fwalk_reent+0xe>
 8003066:	4638      	mov	r0, r7
 8003068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800306c:	89ab      	ldrh	r3, [r5, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d907      	bls.n	8003082 <_fwalk_reent+0x3a>
 8003072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003076:	3301      	adds	r3, #1
 8003078:	d003      	beq.n	8003082 <_fwalk_reent+0x3a>
 800307a:	4629      	mov	r1, r5
 800307c:	4630      	mov	r0, r6
 800307e:	47c0      	blx	r8
 8003080:	4307      	orrs	r7, r0
 8003082:	3568      	adds	r5, #104	; 0x68
 8003084:	e7e9      	b.n	800305a <_fwalk_reent+0x12>

08003086 <__retarget_lock_init_recursive>:
 8003086:	4770      	bx	lr

08003088 <__retarget_lock_acquire_recursive>:
 8003088:	4770      	bx	lr

0800308a <__retarget_lock_release_recursive>:
 800308a:	4770      	bx	lr

0800308c <__swhatbuf_r>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	460e      	mov	r6, r1
 8003090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003094:	4614      	mov	r4, r2
 8003096:	2900      	cmp	r1, #0
 8003098:	461d      	mov	r5, r3
 800309a:	b096      	sub	sp, #88	; 0x58
 800309c:	da08      	bge.n	80030b0 <__swhatbuf_r+0x24>
 800309e:	2200      	movs	r2, #0
 80030a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80030a4:	602a      	str	r2, [r5, #0]
 80030a6:	061a      	lsls	r2, r3, #24
 80030a8:	d410      	bmi.n	80030cc <__swhatbuf_r+0x40>
 80030aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ae:	e00e      	b.n	80030ce <__swhatbuf_r+0x42>
 80030b0:	466a      	mov	r2, sp
 80030b2:	f000 f9a3 	bl	80033fc <_fstat_r>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	dbf1      	blt.n	800309e <__swhatbuf_r+0x12>
 80030ba:	9a01      	ldr	r2, [sp, #4]
 80030bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80030c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80030c4:	425a      	negs	r2, r3
 80030c6:	415a      	adcs	r2, r3
 80030c8:	602a      	str	r2, [r5, #0]
 80030ca:	e7ee      	b.n	80030aa <__swhatbuf_r+0x1e>
 80030cc:	2340      	movs	r3, #64	; 0x40
 80030ce:	2000      	movs	r0, #0
 80030d0:	6023      	str	r3, [r4, #0]
 80030d2:	b016      	add	sp, #88	; 0x58
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080030d8 <__smakebuf_r>:
 80030d8:	898b      	ldrh	r3, [r1, #12]
 80030da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030dc:	079d      	lsls	r5, r3, #30
 80030de:	4606      	mov	r6, r0
 80030e0:	460c      	mov	r4, r1
 80030e2:	d507      	bpl.n	80030f4 <__smakebuf_r+0x1c>
 80030e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	6123      	str	r3, [r4, #16]
 80030ec:	2301      	movs	r3, #1
 80030ee:	6163      	str	r3, [r4, #20]
 80030f0:	b002      	add	sp, #8
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	466a      	mov	r2, sp
 80030f6:	ab01      	add	r3, sp, #4
 80030f8:	f7ff ffc8 	bl	800308c <__swhatbuf_r>
 80030fc:	9900      	ldr	r1, [sp, #0]
 80030fe:	4605      	mov	r5, r0
 8003100:	4630      	mov	r0, r6
 8003102:	f000 f891 	bl	8003228 <_malloc_r>
 8003106:	b948      	cbnz	r0, 800311c <__smakebuf_r+0x44>
 8003108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800310c:	059a      	lsls	r2, r3, #22
 800310e:	d4ef      	bmi.n	80030f0 <__smakebuf_r+0x18>
 8003110:	f023 0303 	bic.w	r3, r3, #3
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	e7e3      	b.n	80030e4 <__smakebuf_r+0xc>
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <__smakebuf_r+0x7c>)
 800311e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003120:	89a3      	ldrh	r3, [r4, #12]
 8003122:	6020      	str	r0, [r4, #0]
 8003124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	9b00      	ldr	r3, [sp, #0]
 800312c:	6120      	str	r0, [r4, #16]
 800312e:	6163      	str	r3, [r4, #20]
 8003130:	9b01      	ldr	r3, [sp, #4]
 8003132:	b15b      	cbz	r3, 800314c <__smakebuf_r+0x74>
 8003134:	4630      	mov	r0, r6
 8003136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800313a:	f000 f971 	bl	8003420 <_isatty_r>
 800313e:	b128      	cbz	r0, 800314c <__smakebuf_r+0x74>
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	f023 0303 	bic.w	r3, r3, #3
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	81a3      	strh	r3, [r4, #12]
 800314c:	89a0      	ldrh	r0, [r4, #12]
 800314e:	4305      	orrs	r5, r0
 8003150:	81a5      	strh	r5, [r4, #12]
 8003152:	e7cd      	b.n	80030f0 <__smakebuf_r+0x18>
 8003154:	08002ee5 	.word	0x08002ee5

08003158 <_free_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	4605      	mov	r5, r0
 800315c:	2900      	cmp	r1, #0
 800315e:	d040      	beq.n	80031e2 <_free_r+0x8a>
 8003160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003164:	1f0c      	subs	r4, r1, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	bfb8      	it	lt
 800316a:	18e4      	addlt	r4, r4, r3
 800316c:	f000 f97a 	bl	8003464 <__malloc_lock>
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <_free_r+0x8c>)
 8003172:	6813      	ldr	r3, [r2, #0]
 8003174:	b933      	cbnz	r3, 8003184 <_free_r+0x2c>
 8003176:	6063      	str	r3, [r4, #4]
 8003178:	6014      	str	r4, [r2, #0]
 800317a:	4628      	mov	r0, r5
 800317c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003180:	f000 b976 	b.w	8003470 <__malloc_unlock>
 8003184:	42a3      	cmp	r3, r4
 8003186:	d908      	bls.n	800319a <_free_r+0x42>
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	1821      	adds	r1, r4, r0
 800318c:	428b      	cmp	r3, r1
 800318e:	bf01      	itttt	eq
 8003190:	6819      	ldreq	r1, [r3, #0]
 8003192:	685b      	ldreq	r3, [r3, #4]
 8003194:	1809      	addeq	r1, r1, r0
 8003196:	6021      	streq	r1, [r4, #0]
 8003198:	e7ed      	b.n	8003176 <_free_r+0x1e>
 800319a:	461a      	mov	r2, r3
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	b10b      	cbz	r3, 80031a4 <_free_r+0x4c>
 80031a0:	42a3      	cmp	r3, r4
 80031a2:	d9fa      	bls.n	800319a <_free_r+0x42>
 80031a4:	6811      	ldr	r1, [r2, #0]
 80031a6:	1850      	adds	r0, r2, r1
 80031a8:	42a0      	cmp	r0, r4
 80031aa:	d10b      	bne.n	80031c4 <_free_r+0x6c>
 80031ac:	6820      	ldr	r0, [r4, #0]
 80031ae:	4401      	add	r1, r0
 80031b0:	1850      	adds	r0, r2, r1
 80031b2:	4283      	cmp	r3, r0
 80031b4:	6011      	str	r1, [r2, #0]
 80031b6:	d1e0      	bne.n	800317a <_free_r+0x22>
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4401      	add	r1, r0
 80031be:	6011      	str	r1, [r2, #0]
 80031c0:	6053      	str	r3, [r2, #4]
 80031c2:	e7da      	b.n	800317a <_free_r+0x22>
 80031c4:	d902      	bls.n	80031cc <_free_r+0x74>
 80031c6:	230c      	movs	r3, #12
 80031c8:	602b      	str	r3, [r5, #0]
 80031ca:	e7d6      	b.n	800317a <_free_r+0x22>
 80031cc:	6820      	ldr	r0, [r4, #0]
 80031ce:	1821      	adds	r1, r4, r0
 80031d0:	428b      	cmp	r3, r1
 80031d2:	bf01      	itttt	eq
 80031d4:	6819      	ldreq	r1, [r3, #0]
 80031d6:	685b      	ldreq	r3, [r3, #4]
 80031d8:	1809      	addeq	r1, r1, r0
 80031da:	6021      	streq	r1, [r4, #0]
 80031dc:	6063      	str	r3, [r4, #4]
 80031de:	6054      	str	r4, [r2, #4]
 80031e0:	e7cb      	b.n	800317a <_free_r+0x22>
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20001188 	.word	0x20001188

080031e8 <sbrk_aligned>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	4e0e      	ldr	r6, [pc, #56]	; (8003224 <sbrk_aligned+0x3c>)
 80031ec:	460c      	mov	r4, r1
 80031ee:	6831      	ldr	r1, [r6, #0]
 80031f0:	4605      	mov	r5, r0
 80031f2:	b911      	cbnz	r1, 80031fa <sbrk_aligned+0x12>
 80031f4:	f000 f88c 	bl	8003310 <_sbrk_r>
 80031f8:	6030      	str	r0, [r6, #0]
 80031fa:	4621      	mov	r1, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 f887 	bl	8003310 <_sbrk_r>
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	d00a      	beq.n	800321c <sbrk_aligned+0x34>
 8003206:	1cc4      	adds	r4, r0, #3
 8003208:	f024 0403 	bic.w	r4, r4, #3
 800320c:	42a0      	cmp	r0, r4
 800320e:	d007      	beq.n	8003220 <sbrk_aligned+0x38>
 8003210:	1a21      	subs	r1, r4, r0
 8003212:	4628      	mov	r0, r5
 8003214:	f000 f87c 	bl	8003310 <_sbrk_r>
 8003218:	3001      	adds	r0, #1
 800321a:	d101      	bne.n	8003220 <sbrk_aligned+0x38>
 800321c:	f04f 34ff 	mov.w	r4, #4294967295
 8003220:	4620      	mov	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	2000118c 	.word	0x2000118c

08003228 <_malloc_r>:
 8003228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800322c:	1ccd      	adds	r5, r1, #3
 800322e:	f025 0503 	bic.w	r5, r5, #3
 8003232:	3508      	adds	r5, #8
 8003234:	2d0c      	cmp	r5, #12
 8003236:	bf38      	it	cc
 8003238:	250c      	movcc	r5, #12
 800323a:	2d00      	cmp	r5, #0
 800323c:	4607      	mov	r7, r0
 800323e:	db01      	blt.n	8003244 <_malloc_r+0x1c>
 8003240:	42a9      	cmp	r1, r5
 8003242:	d905      	bls.n	8003250 <_malloc_r+0x28>
 8003244:	230c      	movs	r3, #12
 8003246:	2600      	movs	r6, #0
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4630      	mov	r0, r6
 800324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003250:	4e2e      	ldr	r6, [pc, #184]	; (800330c <_malloc_r+0xe4>)
 8003252:	f000 f907 	bl	8003464 <__malloc_lock>
 8003256:	6833      	ldr	r3, [r6, #0]
 8003258:	461c      	mov	r4, r3
 800325a:	bb34      	cbnz	r4, 80032aa <_malloc_r+0x82>
 800325c:	4629      	mov	r1, r5
 800325e:	4638      	mov	r0, r7
 8003260:	f7ff ffc2 	bl	80031e8 <sbrk_aligned>
 8003264:	1c43      	adds	r3, r0, #1
 8003266:	4604      	mov	r4, r0
 8003268:	d14d      	bne.n	8003306 <_malloc_r+0xde>
 800326a:	6834      	ldr	r4, [r6, #0]
 800326c:	4626      	mov	r6, r4
 800326e:	2e00      	cmp	r6, #0
 8003270:	d140      	bne.n	80032f4 <_malloc_r+0xcc>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	4631      	mov	r1, r6
 8003276:	4638      	mov	r0, r7
 8003278:	eb04 0803 	add.w	r8, r4, r3
 800327c:	f000 f848 	bl	8003310 <_sbrk_r>
 8003280:	4580      	cmp	r8, r0
 8003282:	d13a      	bne.n	80032fa <_malloc_r+0xd2>
 8003284:	6821      	ldr	r1, [r4, #0]
 8003286:	3503      	adds	r5, #3
 8003288:	1a6d      	subs	r5, r5, r1
 800328a:	f025 0503 	bic.w	r5, r5, #3
 800328e:	3508      	adds	r5, #8
 8003290:	2d0c      	cmp	r5, #12
 8003292:	bf38      	it	cc
 8003294:	250c      	movcc	r5, #12
 8003296:	4638      	mov	r0, r7
 8003298:	4629      	mov	r1, r5
 800329a:	f7ff ffa5 	bl	80031e8 <sbrk_aligned>
 800329e:	3001      	adds	r0, #1
 80032a0:	d02b      	beq.n	80032fa <_malloc_r+0xd2>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	442b      	add	r3, r5
 80032a6:	6023      	str	r3, [r4, #0]
 80032a8:	e00e      	b.n	80032c8 <_malloc_r+0xa0>
 80032aa:	6822      	ldr	r2, [r4, #0]
 80032ac:	1b52      	subs	r2, r2, r5
 80032ae:	d41e      	bmi.n	80032ee <_malloc_r+0xc6>
 80032b0:	2a0b      	cmp	r2, #11
 80032b2:	d916      	bls.n	80032e2 <_malloc_r+0xba>
 80032b4:	1961      	adds	r1, r4, r5
 80032b6:	42a3      	cmp	r3, r4
 80032b8:	6025      	str	r5, [r4, #0]
 80032ba:	bf18      	it	ne
 80032bc:	6059      	strne	r1, [r3, #4]
 80032be:	6863      	ldr	r3, [r4, #4]
 80032c0:	bf08      	it	eq
 80032c2:	6031      	streq	r1, [r6, #0]
 80032c4:	5162      	str	r2, [r4, r5]
 80032c6:	604b      	str	r3, [r1, #4]
 80032c8:	4638      	mov	r0, r7
 80032ca:	f104 060b 	add.w	r6, r4, #11
 80032ce:	f000 f8cf 	bl	8003470 <__malloc_unlock>
 80032d2:	f026 0607 	bic.w	r6, r6, #7
 80032d6:	1d23      	adds	r3, r4, #4
 80032d8:	1af2      	subs	r2, r6, r3
 80032da:	d0b6      	beq.n	800324a <_malloc_r+0x22>
 80032dc:	1b9b      	subs	r3, r3, r6
 80032de:	50a3      	str	r3, [r4, r2]
 80032e0:	e7b3      	b.n	800324a <_malloc_r+0x22>
 80032e2:	6862      	ldr	r2, [r4, #4]
 80032e4:	42a3      	cmp	r3, r4
 80032e6:	bf0c      	ite	eq
 80032e8:	6032      	streq	r2, [r6, #0]
 80032ea:	605a      	strne	r2, [r3, #4]
 80032ec:	e7ec      	b.n	80032c8 <_malloc_r+0xa0>
 80032ee:	4623      	mov	r3, r4
 80032f0:	6864      	ldr	r4, [r4, #4]
 80032f2:	e7b2      	b.n	800325a <_malloc_r+0x32>
 80032f4:	4634      	mov	r4, r6
 80032f6:	6876      	ldr	r6, [r6, #4]
 80032f8:	e7b9      	b.n	800326e <_malloc_r+0x46>
 80032fa:	230c      	movs	r3, #12
 80032fc:	4638      	mov	r0, r7
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	f000 f8b6 	bl	8003470 <__malloc_unlock>
 8003304:	e7a1      	b.n	800324a <_malloc_r+0x22>
 8003306:	6025      	str	r5, [r4, #0]
 8003308:	e7de      	b.n	80032c8 <_malloc_r+0xa0>
 800330a:	bf00      	nop
 800330c:	20001188 	.word	0x20001188

08003310 <_sbrk_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	2300      	movs	r3, #0
 8003314:	4d05      	ldr	r5, [pc, #20]	; (800332c <_sbrk_r+0x1c>)
 8003316:	4604      	mov	r4, r0
 8003318:	4608      	mov	r0, r1
 800331a:	602b      	str	r3, [r5, #0]
 800331c:	f7fd f92c 	bl	8000578 <_sbrk>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	d102      	bne.n	800332a <_sbrk_r+0x1a>
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	b103      	cbz	r3, 800332a <_sbrk_r+0x1a>
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	bd38      	pop	{r3, r4, r5, pc}
 800332c:	20001190 	.word	0x20001190

08003330 <__sread>:
 8003330:	b510      	push	{r4, lr}
 8003332:	460c      	mov	r4, r1
 8003334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003338:	f000 f8a0 	bl	800347c <_read_r>
 800333c:	2800      	cmp	r0, #0
 800333e:	bfab      	itete	ge
 8003340:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003342:	89a3      	ldrhlt	r3, [r4, #12]
 8003344:	181b      	addge	r3, r3, r0
 8003346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800334a:	bfac      	ite	ge
 800334c:	6563      	strge	r3, [r4, #84]	; 0x54
 800334e:	81a3      	strhlt	r3, [r4, #12]
 8003350:	bd10      	pop	{r4, pc}

08003352 <__swrite>:
 8003352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003356:	461f      	mov	r7, r3
 8003358:	898b      	ldrh	r3, [r1, #12]
 800335a:	4605      	mov	r5, r0
 800335c:	05db      	lsls	r3, r3, #23
 800335e:	460c      	mov	r4, r1
 8003360:	4616      	mov	r6, r2
 8003362:	d505      	bpl.n	8003370 <__swrite+0x1e>
 8003364:	2302      	movs	r3, #2
 8003366:	2200      	movs	r2, #0
 8003368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800336c:	f000 f868 	bl	8003440 <_lseek_r>
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	4632      	mov	r2, r6
 8003374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003378:	81a3      	strh	r3, [r4, #12]
 800337a:	4628      	mov	r0, r5
 800337c:	463b      	mov	r3, r7
 800337e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003386:	f000 b817 	b.w	80033b8 <_write_r>

0800338a <__sseek>:
 800338a:	b510      	push	{r4, lr}
 800338c:	460c      	mov	r4, r1
 800338e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003392:	f000 f855 	bl	8003440 <_lseek_r>
 8003396:	1c43      	adds	r3, r0, #1
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	bf15      	itete	ne
 800339c:	6560      	strne	r0, [r4, #84]	; 0x54
 800339e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033a6:	81a3      	strheq	r3, [r4, #12]
 80033a8:	bf18      	it	ne
 80033aa:	81a3      	strhne	r3, [r4, #12]
 80033ac:	bd10      	pop	{r4, pc}

080033ae <__sclose>:
 80033ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b2:	f000 b813 	b.w	80033dc <_close_r>
	...

080033b8 <_write_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4604      	mov	r4, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	4611      	mov	r1, r2
 80033c0:	2200      	movs	r2, #0
 80033c2:	4d05      	ldr	r5, [pc, #20]	; (80033d8 <_write_r+0x20>)
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7fd f889 	bl	80004de <_write>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_write_r+0x1e>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_write_r+0x1e>
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	20001190 	.word	0x20001190

080033dc <_close_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	2300      	movs	r3, #0
 80033e0:	4d05      	ldr	r5, [pc, #20]	; (80033f8 <_close_r+0x1c>)
 80033e2:	4604      	mov	r4, r0
 80033e4:	4608      	mov	r0, r1
 80033e6:	602b      	str	r3, [r5, #0]
 80033e8:	f7fd f895 	bl	8000516 <_close>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d102      	bne.n	80033f6 <_close_r+0x1a>
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	b103      	cbz	r3, 80033f6 <_close_r+0x1a>
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	20001190 	.word	0x20001190

080033fc <_fstat_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	2300      	movs	r3, #0
 8003400:	4d06      	ldr	r5, [pc, #24]	; (800341c <_fstat_r+0x20>)
 8003402:	4604      	mov	r4, r0
 8003404:	4608      	mov	r0, r1
 8003406:	4611      	mov	r1, r2
 8003408:	602b      	str	r3, [r5, #0]
 800340a:	f7fd f88f 	bl	800052c <_fstat>
 800340e:	1c43      	adds	r3, r0, #1
 8003410:	d102      	bne.n	8003418 <_fstat_r+0x1c>
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	b103      	cbz	r3, 8003418 <_fstat_r+0x1c>
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	bd38      	pop	{r3, r4, r5, pc}
 800341a:	bf00      	nop
 800341c:	20001190 	.word	0x20001190

08003420 <_isatty_r>:
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	2300      	movs	r3, #0
 8003424:	4d05      	ldr	r5, [pc, #20]	; (800343c <_isatty_r+0x1c>)
 8003426:	4604      	mov	r4, r0
 8003428:	4608      	mov	r0, r1
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	f7fd f88d 	bl	800054a <_isatty>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d102      	bne.n	800343a <_isatty_r+0x1a>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	b103      	cbz	r3, 800343a <_isatty_r+0x1a>
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	bd38      	pop	{r3, r4, r5, pc}
 800343c:	20001190 	.word	0x20001190

08003440 <_lseek_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4604      	mov	r4, r0
 8003444:	4608      	mov	r0, r1
 8003446:	4611      	mov	r1, r2
 8003448:	2200      	movs	r2, #0
 800344a:	4d05      	ldr	r5, [pc, #20]	; (8003460 <_lseek_r+0x20>)
 800344c:	602a      	str	r2, [r5, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	f7fd f885 	bl	800055e <_lseek>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d102      	bne.n	800345e <_lseek_r+0x1e>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	b103      	cbz	r3, 800345e <_lseek_r+0x1e>
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	20001190 	.word	0x20001190

08003464 <__malloc_lock>:
 8003464:	4801      	ldr	r0, [pc, #4]	; (800346c <__malloc_lock+0x8>)
 8003466:	f7ff be0f 	b.w	8003088 <__retarget_lock_acquire_recursive>
 800346a:	bf00      	nop
 800346c:	20001184 	.word	0x20001184

08003470 <__malloc_unlock>:
 8003470:	4801      	ldr	r0, [pc, #4]	; (8003478 <__malloc_unlock+0x8>)
 8003472:	f7ff be0a 	b.w	800308a <__retarget_lock_release_recursive>
 8003476:	bf00      	nop
 8003478:	20001184 	.word	0x20001184

0800347c <_read_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	4604      	mov	r4, r0
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	2200      	movs	r2, #0
 8003486:	4d05      	ldr	r5, [pc, #20]	; (800349c <_read_r+0x20>)
 8003488:	602a      	str	r2, [r5, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	f7fd f80a 	bl	80004a4 <_read>
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d102      	bne.n	800349a <_read_r+0x1e>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	b103      	cbz	r3, 800349a <_read_r+0x1e>
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	20001190 	.word	0x20001190

080034a0 <_init>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr

080034ac <_fini>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr
